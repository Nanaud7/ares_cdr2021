
robot-f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdd8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800cfa8  0800cfa8  0001cfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6f8  0800d6f8  000202a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d700  0800d700  000202a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d700  0800d700  0001d700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d704  0800d704  0001d704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  0800d708  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  200002a8  0800d9b0  000202a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800d9b0  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020263  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004410  00000000  00000000  0004053b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00044950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00045bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b7a  00000000  00000000  00046cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196a3  00000000  00000000  0006e84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0af5  00000000  00000000  00087eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001689e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a8  00000000  00000000  00168a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016eae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016eb1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a8 	.word	0x200002a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf90 	.word	0x0800cf90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002ac 	.word	0x200002ac
 800020c:	0800cf90 	.word	0x0800cf90

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AX12_Init>:
#include <AX12.h>


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	715a      	strb	r2, [r3, #5]

}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fc3a 	bl	800088c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fde2 	bl	8000be8 <__aeabi_d2uiz>
 8001024:	4603      	mov	r3, r0
 8001026:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff faad 	bl	8000588 <__aeabi_f2d>
 800102e:	a30e      	add	r3, pc, #56	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdd2 	bl	8000be8 <__aeabi_d2uiz>
 8001044:	4603      	mov	r3, r0
 8001046:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	461a      	mov	r2, r3
 800104c:	2106      	movs	r1, #6
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f9c2 	bl	80013d8 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001054:	8abb      	ldrh	r3, [r7, #20]
 8001056:	461a      	mov	r2, r3
 8001058:	2108      	movs	r1, #8
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f9bc 	bl	80013d8 <AX12_sendTram2Byte>

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2c54bf16 	.word	0x2c54bf16
 800106c:	3fd2c4b1 	.word	0x3fd2c4b1

08001070 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 800107c:	edd7 7a00 	vldr	s15, [r7]
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 3a90 	vmov	r3, s15
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa6a 	bl	8000564 <__aeabi_i2d>
 8001090:	a30b      	add	r3, pc, #44	; (adr r3, 80010c0 <AX12_setMaxTorque+0x50>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fbf9 	bl	800088c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fda1 	bl	8000be8 <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	461a      	mov	r2, r3
 80010ae:	210e      	movs	r1, #14
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f991 	bl	80013d8 <AX12_sendTram2Byte>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	905eab89 	.word	0x905eab89
 80010c4:	3fb90641 	.word	0x3fb90641

080010c8 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2118      	movs	r1, #24
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f966 	bl	80013ac <AX12_sendTram1Byte>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa2e 	bl	8000564 <__aeabi_i2d>
 8001108:	a30b      	add	r3, pc, #44	; (adr r3, 8001138 <AX12_setPosition+0x50>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbbd 	bl	800088c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd65 	bl	8000be8 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	461a      	mov	r2, r3
 8001126:	211e      	movs	r1, #30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f955 	bl	80013d8 <AX12_sendTram2Byte>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2c54bf16 	.word	0x2c54bf16
 800113c:	3fd2c4b1 	.word	0x3fd2c4b1

08001140 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 800114c:	edd7 7a00 	vldr	s15, [r7]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa02 	bl	8000564 <__aeabi_i2d>
 8001160:	a30b      	add	r3, pc, #44	; (adr r3, 8001190 <AX12_setMovingSpeed+0x50>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb91 	bl	800088c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd39 	bl	8000be8 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	461a      	mov	r2, r3
 800117e:	2120      	movs	r1, #32
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f929 	bl	80013d8 <AX12_sendTram2Byte>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	c83ed809 	.word	0xc83ed809
 8001194:	3fbc8721 	.word	0x3fbc8721

08001198 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001198:	b408      	push	{r3}
 800119a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
 80011ac:	466b      	mov	r3, sp
 80011ae:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 80011b6:	78fc      	ldrb	r4, [r7, #3]
 80011b8:	4623      	mov	r3, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	b2e0      	uxtb	r0, r4
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	00cb      	lsls	r3, r1, #3
 80011ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011d2:	00c2      	lsls	r2, r0, #3
 80011d4:	b2e0      	uxtb	r0, r4
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	00cb      	lsls	r3, r1, #3
 80011e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011e8:	00c2      	lsls	r2, r0, #3
 80011ea:	4623      	mov	r3, r4
 80011ec:	3307      	adds	r3, #7
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	ebad 0d03 	sub.w	sp, sp, r3
 80011f6:	ab02      	add	r3, sp, #8
 80011f8:	3300      	adds	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791a      	ldrb	r2, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001210:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001214:	3302      	adds	r3, #2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	e00b      	b.n	8001240 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3305      	adds	r3, #5
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	3301      	adds	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	7dfa      	ldrb	r2, [r7, #23]
 8001242:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001246:	429a      	cmp	r2, r3
 8001248:	d3ee      	bcc.n	8001228 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 800124a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800124e:	2b03      	cmp	r3, #3
 8001250:	d867      	bhi.n	8001322 <AX12_sendData+0x18a>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <AX12_sendData+0xc0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001291 	.word	0x08001291
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012ed 	.word	0x080012ed
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7898      	ldrb	r0, [r3, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	78d9      	ldrb	r1, [r3, #3]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	791a      	ldrb	r2, [r3, #4]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	1e5c      	subs	r4, r3, #1
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	f000 f861 	bl	8001348 <AX12_calculChecksum>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	551a      	strb	r2, [r3, r4]
 800128e:	e049      	b.n	8001324 <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7898      	ldrb	r0, [r3, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	78d9      	ldrb	r1, [r3, #3]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	791a      	ldrb	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	795d      	ldrb	r5, [r3, #5]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	1e5c      	subs	r4, r3, #1
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	f000 f84b 	bl	8001348 <AX12_calculChecksum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	551a      	strb	r2, [r3, r4]
 80012ba:	e033      	b.n	8001324 <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7898      	ldrb	r0, [r3, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	78d9      	ldrb	r1, [r3, #3]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	791d      	ldrb	r5, [r3, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	795e      	ldrb	r6, [r3, #5]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	1e54      	subs	r4, r2, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4633      	mov	r3, r6
 80012dc:	462a      	mov	r2, r5
 80012de:	f000 f833 	bl	8001348 <AX12_calculChecksum>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	551a      	strb	r2, [r3, r4]
 80012ea:	e01b      	b.n	8001324 <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	7898      	ldrb	r0, [r3, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	78dd      	ldrb	r5, [r3, #3]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	791e      	ldrb	r6, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 c005 	ldrb.w	ip, [r3, #5]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	79d2      	ldrb	r2, [r2, #7]
 8001306:	78f9      	ldrb	r1, [r7, #3]
 8001308:	1e4c      	subs	r4, r1, #1
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4663      	mov	r3, ip
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	f000 f818 	bl	8001348 <AX12_calculChecksum>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	551a      	strb	r2, [r3, r4]
 8001320:	e000      	b.n	8001324 <AX12_sendData+0x18c>
	default : break;
 8001322:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	b29a      	uxth	r2, r3
 800132e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001332:	f005 fd58 	bl	8006de6 <HAL_UART_Transmit>
 8001336:	46c5      	mov	sp, r8
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b001      	add	sp, #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	b29a      	uxth	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	7e3b      	ldrb	r3, [r7, #24]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	7f3b      	ldrb	r3, [r7, #28]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	43db      	mvns	r3, r3
 8001396:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr

080013ac <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2203      	movs	r2, #3
 80013c8:	2108      	movs	r1, #8
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fee4 	bl	8001198 <AX12_sendData>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 80013e8:	883b      	ldrh	r3, [r7, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bf9      	ldrb	r1, [r7, #15]
 80013fa:	9102      	str	r1, [sp, #8]
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	2203      	movs	r2, #3
 8001404:	2109      	movs	r1, #9
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fec6 	bl	8001198 <AX12_sendData>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <DRV8825_init>:
#include "DRV8825.h"

void DRV8825_init(Moteur *drv8825,uint16_t PIN_EN, GPIO_TypeDef * GPIO_EN, uint16_t PIN_DIR, GPIO_TypeDef * GPIO_DIR,TIM_HandleTypeDef* timer, uint8_t chanel){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
	/*****************************************
	 * nous récupérons les numéros des pins  *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->pin_EN = PIN_EN;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	897a      	ldrh	r2, [r7, #10]
 800142c:	815a      	strh	r2, [r3, #10]
	drv8825->pin_DIR = PIN_DIR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	801a      	strh	r2, [r3, #0]
	/*****************************************
	 * nous récupérons les GPIO des pins     *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->gpio_EN= GPIO_EN;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
	drv8825->gpio_DIR= GPIO_DIR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]

	/**********************************************
	 * nous initialisatons le timer et récupérons *
	 * à quelle chanel il est racroché 			  *
	 **********************************************/
	drv8825->timer = timer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
	drv8825->chanel = chanel;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f897 2020 	ldrb.w	r2, [r7, #32]
 800144c:	751a      	strb	r2, [r3, #20]

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DRV8825_setDir>:

void DRV8825_setDir(Moteur* drv8825,uint8_t dir){
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(drv8825->gpio_DIR,drv8825->pin_DIR,dir);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6858      	ldr	r0, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	f003 fcc5 	bl	8004e00 <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <DRV8825_setStart>:

void DRV8825_setStart(Moteur* drv8825,uint8_t enable){
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(drv8825->gpio_EN,drv8825->pin_EN,enable);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68d8      	ldr	r0, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	895b      	ldrh	r3, [r3, #10]
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	f003 fcb3 	bl	8004e00 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <DRV8825_moveMotorRPM>:

void DRV8825_moveMotorRPM(Moteur* drv8825,float rpm){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 80014b0:	ed97 7a00 	vldr	s14, [r7]
 80014b4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014e8 <DRV8825_moveMotorRPM+0x44>
 80014b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80014ec <DRV8825_moveMotorRPM+0x48>
 80014c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014f0 <DRV8825_moveMotorRPM+0x4c>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d0:	ee17 3a90 	vmov	r3, s15
 80014d4:	81fb      	strh	r3, [r7, #14]
	DRV8825_setFrequency(drv8825, f);
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f80a 	bl	80014f4 <DRV8825_setFrequency>
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	42700000 	.word	0x42700000
 80014ec:	43480000 	.word	0x43480000
 80014f0:	42000000 	.word	0x42000000

080014f4 <DRV8825_setFrequency>:
	uint16_t f = (PAS*vitesse)/(2*M_PI*RAYON);
	DRV8825_setFrequency(drv8825, f);
#endif
}

void DRV8825_setFrequency(Moteur* drv8825, uint16_t freq){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if(freq != 0){
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <DRV8825_setFrequency+0x2a>
	drv8825->timer->Init.Prescaler = 179;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	22b3      	movs	r2, #179	; 0xb3
 800150c:	605a      	str	r2, [r3, #4]
	drv8825->timer->Init.Period = (uint32_t)1000000/freq;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	4945      	ldr	r1, [pc, #276]	; (800162c <DRV8825_setFrequency+0x138>)
 8001516:	fbb1 f2f2 	udiv	r2, r1, r2
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	e009      	b.n	8001532 <DRV8825_setFrequency+0x3e>
	}
	else{
		drv8825->timer->Init.Prescaler = 0xFFFE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001526:	605a      	str	r2, [r3, #4]
		drv8825->timer->Init.Period = 0xFFFE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001530:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(drv8825->timer) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fa4e 	bl	80059d8 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <DRV8825_setFrequency+0x52>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001542:	f001 fb1d 	bl	8002b80 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(drv8825->timer) != HAL_OK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4618      	mov	r0, r3
 800154c:	f004 fb04 	bl	8005b58 <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <DRV8825_setFrequency+0x66>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001556:	f001 fb13 	bl	8002b80 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(drv8825->timer, drv8825->chanel);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7d1b      	ldrb	r3, [r3, #20]
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f004 fb51 	bl	8005c0c <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch(drv8825->chanel){
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7d1b      	ldrb	r3, [r3, #20]
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d858      	bhi.n	8001624 <DRV8825_setFrequency+0x130>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <DRV8825_setFrequency+0x84>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	080015ad 	.word	0x080015ad
 800157c:	08001625 	.word	0x08001625
 8001580:	08001625 	.word	0x08001625
 8001584:	08001625 	.word	0x08001625
 8001588:	080015cb 	.word	0x080015cb
 800158c:	08001625 	.word	0x08001625
 8001590:	08001625 	.word	0x08001625
 8001594:	08001625 	.word	0x08001625
 8001598:	080015e9 	.word	0x080015e9
 800159c:	08001625 	.word	0x08001625
 80015a0:	08001625 	.word	0x08001625
 80015a4:	08001625 	.word	0x08001625
 80015a8:	08001607 	.word	0x08001607
	case(TIM_CHANNEL_1):drv8825->timer->Instance->CCR1 = (50*drv8825->timer->Init.Period)/100;break;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2232      	movs	r2, #50	; 0x32
 80015b4:	fb02 f203 	mul.w	r2, r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	491c      	ldr	r1, [pc, #112]	; (8001630 <DRV8825_setFrequency+0x13c>)
 80015c0:	fba1 1202 	umull	r1, r2, r1, r2
 80015c4:	0952      	lsrs	r2, r2, #5
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
 80015c8:	e02c      	b.n	8001624 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_2):drv8825->timer->Instance->CCR2 = (50*drv8825->timer->Init.Period)/100;break;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2232      	movs	r2, #50	; 0x32
 80015d2:	fb02 f203 	mul.w	r2, r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4914      	ldr	r1, [pc, #80]	; (8001630 <DRV8825_setFrequency+0x13c>)
 80015de:	fba1 1202 	umull	r1, r2, r1, r2
 80015e2:	0952      	lsrs	r2, r2, #5
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
 80015e6:	e01d      	b.n	8001624 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_3):drv8825->timer->Instance->CCR3 = (50*drv8825->timer->Init.Period)/100;break;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2232      	movs	r2, #50	; 0x32
 80015f0:	fb02 f203 	mul.w	r2, r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <DRV8825_setFrequency+0x13c>)
 80015fc:	fba1 1202 	umull	r1, r2, r1, r2
 8001600:	0952      	lsrs	r2, r2, #5
 8001602:	63da      	str	r2, [r3, #60]	; 0x3c
 8001604:	e00e      	b.n	8001624 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_4):drv8825->timer->Instance->CCR4 = (50*drv8825->timer->Init.Period)/100;break;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2232      	movs	r2, #50	; 0x32
 800160e:	fb02 f203 	mul.w	r2, r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4905      	ldr	r1, [pc, #20]	; (8001630 <DRV8825_setFrequency+0x13c>)
 800161a:	fba1 1202 	umull	r1, r2, r1, r2
 800161e:	0952      	lsrs	r2, r2, #5
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
 8001622:	bf00      	nop
	}
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	000f4240 	.word	0x000f4240
 8001630:	51eb851f 	.word	0x51eb851f
 8001634:	00000000 	.word	0x00000000

08001638 <initUltrasons>:
#include <HC-SR04.h>

uint8_t initUltrasons(void){
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
	cpt_trigger = 0;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <initUltrasons+0x60>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	cpt_shared = 0;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <initUltrasons+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	us_done = 0;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <initUltrasons+0x68>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	e010      	b.n	8001678 <initUltrasons+0x40>
		time_rising[i] = 0;
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <initUltrasons+0x6c>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2100      	movs	r1, #0
 800165c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		us_distance[i] = 999;
 8001660:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <initUltrasons+0x70>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	18d1      	adds	r1, r2, r3
 8001668:	a309      	add	r3, pc, #36	; (adr r3, 8001690 <initUltrasons+0x58>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3301      	adds	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b03      	cmp	r3, #3
 800167c:	ddeb      	ble.n	8001656 <initUltrasons+0x1e>
	}

	return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	f3af 8000 	nop.w
 8001690:	00000000 	.word	0x00000000
 8001694:	408f3800 	.word	0x408f3800
 8001698:	200002f4 	.word	0x200002f4
 800169c:	200003c8 	.word	0x200003c8
 80016a0:	200002f0 	.word	0x200002f0
 80016a4:	200003b8 	.word	0x200003b8
 80016a8:	200002f8 	.word	0x200002f8

080016ac <checkUltrasons>:

uint8_t checkUltrasons(void){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	if((us_distance[US_FRONT_LEFT] <= 10) || (us_distance[US_FRONT_RIGHT] <= 10)){
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <checkUltrasons+0x7c>)
 80016b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <checkUltrasons+0x80>)
 80016bc:	f7ff fa38 	bl	8000b30 <__aeabi_dcmple>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <checkUltrasons+0x30>
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <checkUltrasons+0x7c>)
 80016c8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <checkUltrasons+0x80>)
 80016d2:	f7ff fa2d 	bl	8000b30 <__aeabi_dcmple>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <checkUltrasons+0x3c>
		StopFront = 1;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <checkUltrasons+0x84>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
		cpt_front = 0;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <checkUltrasons+0x88>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
	}

	if((us_distance[US_BACK_LEFT] <= 10) || (us_distance[US_BACK_RIGHT] <= 10)){
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <checkUltrasons+0x7c>)
 80016ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <checkUltrasons+0x80>)
 80016f4:	f7ff fa1c 	bl	8000b30 <__aeabi_dcmple>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <checkUltrasons+0x68>
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <checkUltrasons+0x7c>)
 8001700:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <checkUltrasons+0x80>)
 800170a:	f7ff fa11 	bl	8000b30 <__aeabi_dcmple>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <checkUltrasons+0x74>
		StopBack = 1;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <checkUltrasons+0x8c>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
		cpt_back = 0;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <checkUltrasons+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002f8 	.word	0x200002f8
 800172c:	40240000 	.word	0x40240000
 8001730:	200003b0 	.word	0x200003b0
 8001734:	2000037c 	.word	0x2000037c
 8001738:	200003d0 	.word	0x200003d0
 800173c:	200003b4 	.word	0x200003b4

08001740 <debugUltrasons>:

uint8_t debugUltrasons(void){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
#if DEBUG_ULTRASONS
	printf("dist us1 : %lf cm\r\n", us_distance[0]);
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <debugUltrasons+0x40>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	480e      	ldr	r0, [pc, #56]	; (8001784 <debugUltrasons+0x44>)
 800174c:	f006 fea4 	bl	8008498 <iprintf>
	printf("dist us2 : %lf cm\r\n", us_distance[1]);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <debugUltrasons+0x40>)
 8001752:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <debugUltrasons+0x48>)
 8001758:	f006 fe9e 	bl	8008498 <iprintf>
	printf("dist us3 : %lf cm\r\n", us_distance[2]);
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <debugUltrasons+0x40>)
 800175e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <debugUltrasons+0x4c>)
 8001764:	f006 fe98 	bl	8008498 <iprintf>
	printf("dist us4 : %lf cm\r\n", us_distance[3]);
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <debugUltrasons+0x40>)
 800176a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800176e:	4808      	ldr	r0, [pc, #32]	; (8001790 <debugUltrasons+0x50>)
 8001770:	f006 fe92 	bl	8008498 <iprintf>
	printf("\r\n");
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <debugUltrasons+0x54>)
 8001776:	f006 ff15 	bl	80085a4 <puts>

	//HAL_Delay(100);
#endif
	return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200002f8 	.word	0x200002f8
 8001784:	0800cfa8 	.word	0x0800cfa8
 8001788:	0800cfbc 	.word	0x0800cfbc
 800178c:	0800cfd0 	.word	0x0800cfd0
 8001790:	0800cfe4 	.word	0x0800cfe4
 8001794:	0800cff8 	.word	0x0800cff8

08001798 <initPinces>:
}

/* Pinces */

uint8_t id_pinces[4] = {3,7,1,2}; // 1,2,3,7
void initPinces(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	e03f      	b.n	8001824 <initPinces+0x8c>
		AX12_Init(&pinces[i],&huart3,id_pinces[i],BR_250K);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4a23      	ldr	r2, [pc, #140]	; (8001838 <initPinces+0xa0>)
 80017aa:	1898      	adds	r0, r3, r2
 80017ac:	4a23      	ldr	r2, [pc, #140]	; (800183c <initPinces+0xa4>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	2307      	movs	r3, #7
 80017b6:	4922      	ldr	r1, [pc, #136]	; (8001840 <initPinces+0xa8>)
 80017b8:	f7ff fc02 	bl	8000fc0 <AX12_Init>
		AX12_setMaxTorque(&pinces[i],100);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <initPinces+0xa0>)
 80017c2:	4413      	add	r3, r2
 80017c4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001844 <initPinces+0xac>
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc51 	bl	8001070 <AX12_setMaxTorque>
		AX12_setRangeAngle(&pinces[i], ANGLE_PINCE_CATCH,ANGLE_STARTUP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <initPinces+0xa0>)
 80017d4:	4413      	add	r3, r2
 80017d6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001848 <initPinces+0xb0>
 80017da:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fc0a 	bl	8000ff8 <AX12_setRangeAngle>
		AX12_setMovingSpeed(&pinces[i], 80);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <initPinces+0xa0>)
 80017ea:	4413      	add	r3, r2
 80017ec:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800184c <initPinces+0xb4>
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fca5 	bl	8001140 <AX12_setMovingSpeed>
		AX12_TorqueE_D(&pinces[i],TRUE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <initPinces+0xa0>)
 80017fc:	4413      	add	r3, r2
 80017fe:	2101      	movs	r1, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fc61 	bl	80010c8 <AX12_TorqueE_D>
		HAL_Delay(250);
 8001806:	20fa      	movs	r0, #250	; 0xfa
 8001808:	f002 fd14 	bl	8004234 <HAL_Delay>
		AX12_setPosition(&pinces[i], ANGLE_STARTUP);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4a09      	ldr	r2, [pc, #36]	; (8001838 <initPinces+0xa0>)
 8001812:	4413      	add	r3, r2
 8001814:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001848 <initPinces+0xb0>
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc65 	bl	80010e8 <AX12_setPosition>
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b03      	cmp	r3, #3
 8001828:	ddbc      	ble.n	80017a4 <initPinces+0xc>
	}
	HAL_Delay(250);
 800182a:	20fa      	movs	r0, #250	; 0xfa
 800182c:	f002 fd02 	bl	8004234 <HAL_Delay>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200003e4 	.word	0x200003e4
 800183c:	20000000 	.word	0x20000000
 8001840:	20000738 	.word	0x20000738
 8001844:	42c80000 	.word	0x42c80000
 8001848:	42dc0000 	.word	0x42dc0000
 800184c:	42a00000 	.word	0x42a00000

08001850 <initFlag>:
	AX12_setPosition(ax12, ANGLE_PINCE_RELEASE);
}

/* Pavillons */

void initFlag(){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	AX12_Init(&flag,&huart3,9,BR_250K); // 9
 8001854:	2307      	movs	r3, #7
 8001856:	2209      	movs	r2, #9
 8001858:	4912      	ldr	r1, [pc, #72]	; (80018a4 <initFlag+0x54>)
 800185a:	4813      	ldr	r0, [pc, #76]	; (80018a8 <initFlag+0x58>)
 800185c:	f7ff fbb0 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&flag,100);
 8001860:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80018ac <initFlag+0x5c>
 8001864:	4810      	ldr	r0, [pc, #64]	; (80018a8 <initFlag+0x58>)
 8001866:	f7ff fc03 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&flag, ANGLE_FLAG_DEPLOY,ANGLE_FLAG_REPOS);
 800186a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80018b0 <initFlag+0x60>
 800186e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <initFlag+0x58>)
 8001874:	f7ff fbc0 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&flag, 80);
 8001878:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80018b4 <initFlag+0x64>
 800187c:	480a      	ldr	r0, [pc, #40]	; (80018a8 <initFlag+0x58>)
 800187e:	f7ff fc5f 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&flag,TRUE);
 8001882:	2101      	movs	r1, #1
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <initFlag+0x58>)
 8001886:	f7ff fc1f 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 800188a:	20fa      	movs	r0, #250	; 0xfa
 800188c:	f002 fcd2 	bl	8004234 <HAL_Delay>
	AX12_setPosition(&flag, ANGLE_FLAG_REPOS);
 8001890:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80018b0 <initFlag+0x60>
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <initFlag+0x58>)
 8001896:	f7ff fc27 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800189a:	20fa      	movs	r0, #250	; 0xfa
 800189c:	f002 fcca 	bl	8004234 <HAL_Delay>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000738 	.word	0x20000738
 80018a8:	200003dc 	.word	0x200003dc
 80018ac:	42c80000 	.word	0x42c80000
 80018b0:	42c00000 	.word	0x42c00000
 80018b4:	42a00000 	.word	0x42a00000

080018b8 <raiseFlag>:

void raiseFlag(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
 80018bc:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <raiseFlag+0x14>)
 80018c2:	f7ff fc11 	bl	80010e8 <AX12_setPosition>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003dc 	.word	0x200003dc

080018d0 <initBras>:
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
}

/* Bras */

void initBras(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	AX12_Init(&bras,&huart3,4,BR_250K);
 80018d4:	2307      	movs	r3, #7
 80018d6:	2204      	movs	r2, #4
 80018d8:	4912      	ldr	r1, [pc, #72]	; (8001924 <initBras+0x54>)
 80018da:	4813      	ldr	r0, [pc, #76]	; (8001928 <initBras+0x58>)
 80018dc:	f7ff fb70 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&bras,100);
 80018e0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800192c <initBras+0x5c>
 80018e4:	4810      	ldr	r0, [pc, #64]	; (8001928 <initBras+0x58>)
 80018e6:	f7ff fbc3 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&bras, 0,ANGLE_STARTUP);
 80018ea:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001930 <initBras+0x60>
 80018ee:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001934 <initBras+0x64>
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <initBras+0x58>)
 80018f4:	f7ff fb80 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&bras, 80);
 80018f8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001938 <initBras+0x68>
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <initBras+0x58>)
 80018fe:	f7ff fc1f 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&bras,TRUE);
 8001902:	2101      	movs	r1, #1
 8001904:	4808      	ldr	r0, [pc, #32]	; (8001928 <initBras+0x58>)
 8001906:	f7ff fbdf 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 800190a:	20fa      	movs	r0, #250	; 0xfa
 800190c:	f002 fc92 	bl	8004234 <HAL_Delay>
	AX12_setPosition(&bras, ANGLE_STARTUP);
 8001910:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001930 <initBras+0x60>
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <initBras+0x58>)
 8001916:	f7ff fbe7 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800191a:	20fa      	movs	r0, #250	; 0xfa
 800191c:	f002 fc8a 	bl	8004234 <HAL_Delay>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000738 	.word	0x20000738
 8001928:	200003d4 	.word	0x200003d4
 800192c:	42c80000 	.word	0x42c80000
 8001930:	42dc0000 	.word	0x42dc0000
 8001934:	00000000 	.word	0x00000000
 8001938:	42a00000 	.word	0x42a00000

0800193c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001950:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <MX_ADC1_Init+0x9c>)
 8001952:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800195a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_ADC1_Init+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_ADC1_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_ADC1_Init+0x98>)
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <MX_ADC1_Init+0xa0>)
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_ADC1_Init+0x98>)
 800198a:	2201      	movs	r2, #1
 800198c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_ADC1_Init+0x98>)
 8001998:	2201      	movs	r2, #1
 800199a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_ADC1_Init+0x98>)
 800199e:	f002 fc6d 	bl	800427c <HAL_ADC_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019a8:	f001 f8ea 	bl	8002b80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_ADC1_Init+0x98>)
 80019be:	f002 fca1 	bl	8004304 <HAL_ADC_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019c8:	f001 f8da 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000408 	.word	0x20000408
 80019d8:	40012000 	.word	0x40012000
 80019dc:	0f000001 	.word	0x0f000001

080019e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_ADC_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d127      	bne.n	8001a52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_ADC_MspInit+0x80>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_ADC_MspInit+0x80>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_ADC_MspInit+0x80>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_ADC_MspInit+0x80>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_ADC_MspInit+0x80>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_ADC_MspInit+0x80>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Tirette_Alternative_Pin;
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Tirette_Alternative_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_ADC_MspInit+0x84>)
 8001a4e:	f003 f82b 	bl	8004aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012000 	.word	0x40012000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <ASSERV_update>:

int state = STAND_BY;
double relativeAngleInitial = 0;
double distanceToTargetInitial = 0;

void ASSERV_update(CONSIGNE point){
 8001a68:	b084      	sub	sp, #16
 8001a6a:	b5b0      	push	{r4, r5, r7, lr}
 8001a6c:	ed2d 8b02 	vpush	{d8}
 8001a70:	b08c      	sub	sp, #48	; 0x30
 8001a72:	af08      	add	r7, sp, #32
 8001a74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Odométrie
    ODO_odometrie();
 8001a7c:	f001 f9b4 	bl	8002de8 <ODO_odometrie>

    // Calcul de la distance séparant le robot de la cible
    double distanceToTarget = sqrt(pow(point.x - g_x ,2) + pow(point.y - g_y,2));
 8001a80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a84:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <ASSERV_update+0x1a0>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fc1d 	bl	80002c8 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b17 	vmov	d7, r2, r3
 8001a96:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001bf0 <ASSERV_update+0x188>
 8001a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9e:	eef0 0a67 	vmov.f32	s1, s15
 8001aa2:	f009 f953 	bl	800ad4c <pow>
 8001aa6:	ec55 4b10 	vmov	r4, r5, d0
 8001aaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001aae:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <ASSERV_update+0x1a4>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fc08 	bl	80002c8 <__aeabi_dsub>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	ec43 2b17 	vmov	d7, r2, r3
 8001ac0:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001bf0 <ASSERV_update+0x188>
 8001ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac8:	eef0 0a67 	vmov.f32	s1, s15
 8001acc:	f009 f93e 	bl	800ad4c <pow>
 8001ad0:	ec53 2b10 	vmov	r2, r3, d0
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fbf8 	bl	80002cc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ec43 2b17 	vmov	d7, r2, r3
 8001ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae8:	eef0 0a67 	vmov.f32	s1, s15
 8001aec:	f009 f9dc 	bl	800aea8 <sqrt>
 8001af0:	ed87 0b00 	vstr	d0, [r7]

    // Calcul de l'angle de rotation à effectuer pour orienter le robot vers la cible
    double angleToTarget = atan2(point.y - g_y, point.x - g_x);
 8001af4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <ASSERV_update+0x1a4>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fbe3 	bl	80002c8 <__aeabi_dsub>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	ec43 2b18 	vmov	d8, r2, r3
 8001b0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <ASSERV_update+0x1a0>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fbd8 	bl	80002c8 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	ec43 2b17 	vmov	d7, r2, r3
 8001b20:	eeb0 1a47 	vmov.f32	s2, s14
 8001b24:	eef0 1a67 	vmov.f32	s3, s15
 8001b28:	eeb0 0a48 	vmov.f32	s0, s16
 8001b2c:	eef0 0a68 	vmov.f32	s1, s17
 8001b30:	f009 f8ce 	bl	800acd0 <atan2>
 8001b34:	ed87 0b02 	vstr	d0, [r7, #8]

    if (angleToTarget > M_PI || angleToTarget < -M_PI)
 8001b38:	a32f      	add	r3, pc, #188	; (adr r3, 8001bf8 <ASSERV_update+0x190>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b42:	f7ff f809 	bl	8000b58 <__aeabi_dcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <ASSERV_update+0xf8>
 8001b4c:	a32c      	add	r3, pc, #176	; (adr r3, 8001c00 <ASSERV_update+0x198>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b56:	f7fe ffe1 	bl	8000b1c <__aeabi_dcmplt>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <ASSERV_update+0x104>
        angleToTarget = angleToPiPi(angleToTarget);
 8001b60:	ed97 0b02 	vldr	d0, [r7, #8]
 8001b64:	f000 fb28 	bl	80021b8 <angleToPiPi>
 8001b68:	ed87 0b02 	vstr	d0, [r7, #8]

    switch (state)
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <ASSERV_update+0x1a8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d01c      	beq.n	8001bae <ASSERV_update+0x146>
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	dc2d      	bgt.n	8001bd4 <ASSERV_update+0x16c>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <ASSERV_update+0x11a>
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d011      	beq.n	8001ba4 <ASSERV_update+0x13c>
 8001b80:	e028      	b.n	8001bd4 <ASSERV_update+0x16c>
    case STAND_BY :
		#if MODULE_DEBUG && DEBUG_ASSERVISSEMENT
			printf("indexStrategie = %d\r\n", indexStrategie);
		#endif

		if(indexStrategie < nb_points && match_started == 1){
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <ASSERV_update+0x1ac>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <ASSERV_update+0x1b0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	da07      	bge.n	8001b9e <ASSERV_update+0x136>
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <ASSERV_update+0x1b4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d103      	bne.n	8001b9e <ASSERV_update+0x136>
			state = 1;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <ASSERV_update+0x1a8>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
		}
		else{
			Motor_Disable();
		}
        break;
 8001b9c:	e01e      	b.n	8001bdc <ASSERV_update+0x174>
			Motor_Disable();
 8001b9e:	f001 f835 	bl	8002c0c <Motor_Disable>
        break;
 8001ba2:	e01b      	b.n	8001bdc <ASSERV_update+0x174>

    case ROTATION :
        controlRotation(angleToTarget);
 8001ba4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001ba8:	f000 f892 	bl	8001cd0 <controlRotation>
        break;
 8001bac:	e016      	b.n	8001bdc <ASSERV_update+0x174>

    case MOVE :
        controlMove(point, distanceToTarget, angleToTarget);
 8001bae:	466d      	mov	r5, sp
 8001bb0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bbc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc6:	ed97 1b02 	vldr	d1, [r7, #8]
 8001bca:	ed97 0b00 	vldr	d0, [r7]
 8001bce:	f000 f93f 	bl	8001e50 <controlMove>
        break;
 8001bd2:	e003      	b.n	8001bdc <ASSERV_update+0x174>

    default:
        state = STAND_BY;
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <ASSERV_update+0x1a8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
        break;
 8001bda:	bf00      	nop

    }
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	ecbd 8b02 	vpop	{d8}
 8001be6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001bea:	b004      	add	sp, #16
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	40000000 	.word	0x40000000
 8001bf8:	54442d18 	.word	0x54442d18
 8001bfc:	400921fb 	.word	0x400921fb
 8001c00:	54442d18 	.word	0x54442d18
 8001c04:	c00921fb 	.word	0xc00921fb
 8001c08:	20000450 	.word	0x20000450
 8001c0c:	200004a0 	.word	0x200004a0
 8001c10:	200002c4 	.word	0x200002c4
 8001c14:	20000498 	.word	0x20000498
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	200002ec 	.word	0x200002ec

08001c20 <robotControlSpeed>:

double robotControlSpeed(double x, double a){
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	ed87 0b02 	vstr	d0, [r7, #8]
 8001c2a:	ed87 1b00 	vstr	d1, [r7]
    double speed = atan(-x*(x-1)*a) / atan(0.25*a);
 8001c2e:	68bc      	ldr	r4, [r7, #8]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <robotControlSpeed+0xa4>)
 8001c3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c40:	f7fe fb42 	bl	80002c8 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fcf4 	bl	8000638 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c5c:	f7fe fcec 	bl	8000638 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	ec43 2b17 	vmov	d7, r2, r3
 8001c68:	eeb0 0a47 	vmov.f32	s0, s14
 8001c6c:	eef0 0a67 	vmov.f32	s1, s15
 8001c70:	f008 fdde 	bl	800a830 <atan>
 8001c74:	ec55 4b10 	vmov	r4, r5, d0
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <robotControlSpeed+0xa8>)
 8001c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c82:	f7fe fcd9 	bl	8000638 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	ec43 2b17 	vmov	d7, r2, r3
 8001c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c92:	eef0 0a67 	vmov.f32	s1, s15
 8001c96:	f008 fdcb 	bl	800a830 <atan>
 8001c9a:	ec53 2b10 	vmov	r2, r3, d0
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f7fe fdf3 	bl	800088c <__aeabi_ddiv>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return speed;
 8001cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cb2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cba:	eef0 0a67 	vmov.f32	s1, s15
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	3ff00000 	.word	0x3ff00000
 8001cc8:	3fd00000 	.word	0x3fd00000
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <controlRotation>:

uint8_t controlRotation(double angleToTarget){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	ed87 0b00 	vstr	d0, [r7]
        double relativeAngle = angleToTarget - g_angle;
 8001cda:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <controlRotation+0x168>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ce4:	f7fe faf0 	bl	80002c8 <__aeabi_dsub>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Angle à parcourir lors de cette rotation
        if (relativeAngleInitial == 0)
 8001cf0:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <controlRotation+0x16c>)
 8001cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f7fe ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <controlRotation+0x42>
            relativeAngleInitial = relativeAngle;
 8001d08:	494c      	ldr	r1, [pc, #304]	; (8001e3c <controlRotation+0x16c>)
 8001d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d0e:	e9c1 2300 	strd	r2, r3, [r1]

        // Calcul de la progression normalisée
        double progression = 1 - relativeAngle/relativeAngleInitial;
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <controlRotation+0x16c>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d1c:	f7fe fdb6 	bl	800088c <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	4945      	ldr	r1, [pc, #276]	; (8001e40 <controlRotation+0x170>)
 8001d2a:	f7fe facd 	bl	80002c8 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    progression = progression<=1?progression:1;
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <controlRotation+0x170>)
 8001d3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d40:	f7fe fef6 	bl	8000b30 <__aeabi_dcmple>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <controlRotation+0x80>
 8001d4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d4e:	e002      	b.n	8001d56 <controlRotation+0x86>
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <controlRotation+0x170>)
 8001d56:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    progression = progression>=0?progression:0;
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d66:	f7fe feed 	bl	8000b44 <__aeabi_dcmpge>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <controlRotation+0xa6>
 8001d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d74:	e003      	b.n	8001d7e <controlRotation+0xae>
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Choix du sens de rotation
        if (relativeAngle > 0){
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d8e:	f7fe fee3 	bl	8000b58 <__aeabi_dcmpgt>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <controlRotation+0xce>
            Motor_robotRotLeft();
 8001d98:	f000 ffc6 	bl	8002d28 <Motor_robotRotLeft>
 8001d9c:	e001      	b.n	8001da2 <controlRotation+0xd2>
        } else {
            Motor_robotRotRight();
 8001d9e:	f000 ffd5 	bl	8002d4c <Motor_robotRotRight>
        }

        // Condition d'arrêt
        if (progression > 0.999){
 8001da2:	a321      	add	r3, pc, #132	; (adr r3, 8001e28 <controlRotation+0x158>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dac:	f7fe fed4 	bl	8000b58 <__aeabi_dcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <controlRotation+0x100>
            Motor_Disable();
 8001db6:	f000 ff29 	bl	8002c0c <Motor_Disable>
            state = MOVE;
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <controlRotation+0x174>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
            relativeAngleInitial = 0;
 8001dc0:	491e      	ldr	r1, [pc, #120]	; (8001e3c <controlRotation+0x16c>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9c1 2300 	strd	r2, r3, [r1]
 8001dce:	e024      	b.n	8001e1a <controlRotation+0x14a>
        }
        else{
            // Calcul de la vitesse
            double speed = ROT_RPM_MAX * robotControlSpeed(progression, 20) + 0.75;
 8001dd0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001e30 <controlRotation+0x160>
 8001dd4:	ed97 0b04 	vldr	d0, [r7, #16]
 8001dd8:	f7ff ff22 	bl	8001c20 <robotControlSpeed>
 8001ddc:	ec51 0b10 	vmov	r0, r1, d0
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <controlRotation+0x178>)
 8001de6:	f7fe fc27 	bl	8000638 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <controlRotation+0x17c>)
 8001df8:	f7fe fa68 	bl	80002cc <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	e9c7 2302 	strd	r2, r3, [r7, #8]
            Motor_setSpeed(speed);
 8001e04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e08:	f7fe ff0e 	bl	8000c28 <__aeabi_d2f>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	ee00 3a10 	vmov	s0, r3
 8001e12:	f000 ff65 	bl	8002ce0 <Motor_setSpeed>
            Motor_Enable();
 8001e16:	f000 fee7 	bl	8002be8 <Motor_Enable>
        }

        return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	f3af 8000 	nop.w
 8001e28:	d916872b 	.word	0xd916872b
 8001e2c:	3feff7ce 	.word	0x3feff7ce
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40340000 	.word	0x40340000
 8001e38:	20000458 	.word	0x20000458
 8001e3c:	200002c8 	.word	0x200002c8
 8001e40:	3ff00000 	.word	0x3ff00000
 8001e44:	200002c4 	.word	0x200002c4
 8001e48:	403e0000 	.word	0x403e0000
 8001e4c:	3fe80000 	.word	0x3fe80000

08001e50 <controlMove>:

uint8_t controlMove(CONSIGNE point, double distanceToTarget, double angleToTarget){
 8001e50:	b084      	sub	sp, #16
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001e5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001e60:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e64:	ed87 1b00 	vstr	d1, [r7]
    if (distanceToTargetInitial == 0){
 8001e68:	4bad      	ldr	r3, [pc, #692]	; (8002120 <controlMove+0x2d0>)
 8001e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f7fe fe47 	bl	8000b08 <__aeabi_dcmpeq>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <controlMove+0x3a>
        distanceToTargetInitial = distanceToTarget;
 8001e80:	49a7      	ldr	r1, [pc, #668]	; (8002120 <controlMove+0x2d0>)
 8001e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
    }

    double progression = 1 - (distanceToTarget / distanceToTargetInitial);
 8001e8a:	4ba5      	ldr	r3, [pc, #660]	; (8002120 <controlMove+0x2d0>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e94:	f7fe fcfa 	bl	800088c <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	f04f 0000 	mov.w	r0, #0
 8001ea0:	49a0      	ldr	r1, [pc, #640]	; (8002124 <controlMove+0x2d4>)
 8001ea2:	f7fe fa11 	bl	80002c8 <__aeabi_dsub>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    progression = progression<=1?progression:1;
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <controlMove+0x2d4>)
 8001eb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eb8:	f7fe fe3a 	bl	8000b30 <__aeabi_dcmple>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <controlMove+0x78>
 8001ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ec6:	e002      	b.n	8001ece <controlMove+0x7e>
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b95      	ldr	r3, [pc, #596]	; (8002124 <controlMove+0x2d4>)
 8001ece:	e9c7 2306 	strd	r2, r3, [r7, #24]
    progression = progression>=0?progression:0;
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ede:	f7fe fe31 	bl	8000b44 <__aeabi_dcmpge>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <controlMove+0x9e>
 8001ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eec:	e003      	b.n	8001ef6 <controlMove+0xa6>
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    Motor_robotForward();
 8001efa:	f000 ff03 	bl	8002d04 <Motor_robotForward>

    double speed = 0;
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if(distanceToTargetInitial < 50){
 8001f0a:	4b85      	ldr	r3, [pc, #532]	; (8002120 <controlMove+0x2d0>)
 8001f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b84      	ldr	r3, [pc, #528]	; (8002128 <controlMove+0x2d8>)
 8001f16:	f7fe fe01 	bl	8000b1c <__aeabi_dcmplt>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01a      	beq.n	8001f56 <controlMove+0x106>
        speed = 10 * robotControlSpeed(progression, 10) + 0.75;
 8001f20:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8002100 <controlMove+0x2b0>
 8001f24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001f28:	f7ff fe7a 	bl	8001c20 <robotControlSpeed>
 8001f2c:	ec51 0b10 	vmov	r0, r1, d0
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b7d      	ldr	r3, [pc, #500]	; (800212c <controlMove+0x2dc>)
 8001f36:	f7fe fb7f 	bl	8000638 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <controlMove+0x2e0>)
 8001f48:	f7fe f9c0 	bl	80002cc <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001f54:	e019      	b.n	8001f8a <controlMove+0x13a>
    } else{
        speed = MOV_RPM_MAX * robotControlSpeed(progression, 20) + 0.75;
 8001f56:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 8002108 <controlMove+0x2b8>
 8001f5a:	ed97 0b06 	vldr	d0, [r7, #24]
 8001f5e:	f7ff fe5f 	bl	8001c20 <robotControlSpeed>
 8001f62:	ec51 0b10 	vmov	r0, r1, d0
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <controlMove+0x2d8>)
 8001f6c:	f7fe fb64 	bl	8000638 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <controlMove+0x2e0>)
 8001f7e:	f7fe f9a5 	bl	80002cc <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    double angleError = angleToPiPi(angleToTarget - g_angle) / M_PI;
 8001f8a:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <controlMove+0x2e4>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f94:	f7fe f998 	bl	80002c8 <__aeabi_dsub>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	ec43 2b17 	vmov	d7, r2, r3
 8001fa0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa4:	eef0 0a67 	vmov.f32	s1, s15
 8001fa8:	f000 f906 	bl	80021b8 <angleToPiPi>
 8001fac:	ec51 0b10 	vmov	r0, r1, d0
 8001fb0:	a357      	add	r3, pc, #348	; (adr r3, 8002110 <controlMove+0x2c0>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fc69 	bl	800088c <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if((StopFront == TRUE && point.dir == FORWARD) || (StopBack == TRUE && point.dir == BACKWARD)){
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <controlMove+0x2e8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <controlMove+0x180>
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d006      	beq.n	8001fde <controlMove+0x18e>
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	; (800213c <controlMove+0x2ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10f      	bne.n	8001ff8 <controlMove+0x1a8>
 8001fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <controlMove+0x1a8>
    	speed = 0;
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    	distanceToTargetInitial = 0;
 8001fea:	494d      	ldr	r1, [pc, #308]	; (8002120 <controlMove+0x2d0>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c1 2300 	strd	r2, r3, [r1]
    }

    // Condition d'arrêt
    if (progression > 0.95){
 8001ff8:	a347      	add	r3, pc, #284	; (adr r3, 8002118 <controlMove+0x2c8>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002002:	f7fe fda9 	bl	8000b58 <__aeabi_dcmpgt>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <controlMove+0x1f4>
        Motor_Disable();
 800200c:	f000 fdfe 	bl	8002c0c <Motor_Disable>
        distanceToTargetInitial = 0;
 8002010:	4943      	ldr	r1, [pc, #268]	; (8002120 <controlMove+0x2d0>)
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9c1 2300 	strd	r2, r3, [r1]
        indexStrategie++;
 800201e:	4b48      	ldr	r3, [pc, #288]	; (8002140 <controlMove+0x2f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a46      	ldr	r2, [pc, #280]	; (8002140 <controlMove+0x2f0>)
 8002026:	6013      	str	r3, [r2, #0]

        if (indexStrategie >= nb_points)
 8002028:	4b45      	ldr	r3, [pc, #276]	; (8002140 <controlMove+0x2f0>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b45      	ldr	r3, [pc, #276]	; (8002144 <controlMove+0x2f4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	db03      	blt.n	800203c <controlMove+0x1ec>
            state = STAND_BY;
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <controlMove+0x2f8>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e057      	b.n	80020ec <controlMove+0x29c>
        else
            state = ROTATION;
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <controlMove+0x2f8>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e053      	b.n	80020ec <controlMove+0x29c>
    }
    else{
        if(angleError > 0){
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002050:	f7fe fd82 	bl	8000b58 <__aeabi_dcmpgt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d023      	beq.n	80020a2 <controlMove+0x252>
            Motor_setSpeedLeft(speed);
 800205a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800205e:	f7fe fde3 	bl	8000c28 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	ee00 3a10 	vmov	s0, r3
 8002068:	f000 fde2 	bl	8002c30 <Motor_setSpeedLeft>
            Motor_setSpeedRight(speed * (1 - angleError));
 800206c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002070:	f04f 0000 	mov.w	r0, #0
 8002074:	492b      	ldr	r1, [pc, #172]	; (8002124 <controlMove+0x2d4>)
 8002076:	f7fe f927 	bl	80002c8 <__aeabi_dsub>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002086:	f7fe fad7 	bl	8000638 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fdc9 	bl	8000c28 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	ee00 3a10 	vmov	s0, r3
 800209c:	f000 fdf4 	bl	8002c88 <Motor_setSpeedRight>
 80020a0:	e022      	b.n	80020e8 <controlMove+0x298>
        } else {
            Motor_setSpeedLeft(speed * (1 - angleError));
 80020a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020a6:	f04f 0000 	mov.w	r0, #0
 80020aa:	491e      	ldr	r1, [pc, #120]	; (8002124 <controlMove+0x2d4>)
 80020ac:	f7fe f90c 	bl	80002c8 <__aeabi_dsub>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020bc:	f7fe fabc 	bl	8000638 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fdae 	bl	8000c28 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	ee00 3a10 	vmov	s0, r3
 80020d2:	f000 fdad 	bl	8002c30 <Motor_setSpeedLeft>
            Motor_setSpeedRight(speed);
 80020d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020da:	f7fe fda5 	bl	8000c28 <__aeabi_d2f>
 80020de:	4603      	mov	r3, r0
 80020e0:	ee00 3a10 	vmov	s0, r3
 80020e4:	f000 fdd0 	bl	8002c88 <Motor_setSpeedRight>
        }
        Motor_Enable();
 80020e8:	f000 fd7e 	bl	8002be8 <Motor_Enable>
    }

    return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020f8:	b004      	add	sp, #16
 80020fa:	4770      	bx	lr
 80020fc:	f3af 8000 	nop.w
 8002100:	00000000 	.word	0x00000000
 8002104:	40240000 	.word	0x40240000
 8002108:	00000000 	.word	0x00000000
 800210c:	40340000 	.word	0x40340000
 8002110:	54442d18 	.word	0x54442d18
 8002114:	400921fb 	.word	0x400921fb
 8002118:	66666666 	.word	0x66666666
 800211c:	3fee6666 	.word	0x3fee6666
 8002120:	200002d0 	.word	0x200002d0
 8002124:	3ff00000 	.word	0x3ff00000
 8002128:	40490000 	.word	0x40490000
 800212c:	40240000 	.word	0x40240000
 8002130:	3fe80000 	.word	0x3fe80000
 8002134:	20000458 	.word	0x20000458
 8002138:	200003b0 	.word	0x200003b0
 800213c:	200003d0 	.word	0x200003d0
 8002140:	20000498 	.word	0x20000498
 8002144:	20000004 	.word	0x20000004
 8002148:	200002c4 	.word	0x200002c4
 800214c:	00000000 	.word	0x00000000

08002150 <angleToZeroTwoPi>:

double angleToZeroTwoPi(double angle) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	ed87 0b00 	vstr	d0, [r7]
	return fmod(fmod(angle, M_PI) + 2*M_PI, 2*M_PI);
 800215a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80021a8 <angleToZeroTwoPi+0x58>
 800215e:	ed97 0b00 	vldr	d0, [r7]
 8002162:	f008 fdb7 	bl	800acd4 <fmod>
 8002166:	ec51 0b10 	vmov	r0, r1, d0
 800216a:	a311      	add	r3, pc, #68	; (adr r3, 80021b0 <angleToZeroTwoPi+0x60>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f8ac 	bl	80002cc <__adddf3>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	ec43 2b17 	vmov	d7, r2, r3
 800217c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80021b0 <angleToZeroTwoPi+0x60>
 8002180:	eeb0 0a47 	vmov.f32	s0, s14
 8002184:	eef0 0a67 	vmov.f32	s1, s15
 8002188:	f008 fda4 	bl	800acd4 <fmod>
 800218c:	eeb0 7a40 	vmov.f32	s14, s0
 8002190:	eef0 7a60 	vmov.f32	s15, s1
}
 8002194:	eeb0 0a47 	vmov.f32	s0, s14
 8002198:	eef0 0a67 	vmov.f32	s1, s15
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	f3af 8000 	nop.w
 80021a8:	54442d18 	.word	0x54442d18
 80021ac:	400921fb 	.word	0x400921fb
 80021b0:	54442d18 	.word	0x54442d18
 80021b4:	401921fb 	.word	0x401921fb

080021b8 <angleToPiPi>:

double angleToPiPi(double angle) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	ed87 0b00 	vstr	d0, [r7]
	return angleToZeroTwoPi(angle + M_PI) - M_PI;
 80021c2:	a311      	add	r3, pc, #68	; (adr r3, 8002208 <angleToPiPi+0x50>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021cc:	f7fe f87e 	bl	80002cc <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	ec43 2b17 	vmov	d7, r2, r3
 80021d8:	eeb0 0a47 	vmov.f32	s0, s14
 80021dc:	eef0 0a67 	vmov.f32	s1, s15
 80021e0:	f7ff ffb6 	bl	8002150 <angleToZeroTwoPi>
 80021e4:	ec51 0b10 	vmov	r0, r1, d0
 80021e8:	a307      	add	r3, pc, #28	; (adr r3, 8002208 <angleToPiPi+0x50>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f86b 	bl	80002c8 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80021fa:	eeb0 0a47 	vmov.f32	s0, s14
 80021fe:	eef0 0a67 	vmov.f32	s1, s15
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	54442d18 	.word	0x54442d18
 800220c:	400921fb 	.word	0x400921fb

08002210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b56      	ldr	r3, [pc, #344]	; (8002384 <MX_GPIO_Init+0x174>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a55      	ldr	r2, [pc, #340]	; (8002384 <MX_GPIO_Init+0x174>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b53      	ldr	r3, [pc, #332]	; (8002384 <MX_GPIO_Init+0x174>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <MX_GPIO_Init+0x174>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <MX_GPIO_Init+0x174>)
 800224c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <MX_GPIO_Init+0x174>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <MX_GPIO_Init+0x174>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a47      	ldr	r2, [pc, #284]	; (8002384 <MX_GPIO_Init+0x174>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <MX_GPIO_Init+0x174>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <MX_GPIO_Init+0x174>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <MX_GPIO_Init+0x174>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <MX_GPIO_Init+0x174>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <MX_GPIO_Init+0x174>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a39      	ldr	r2, [pc, #228]	; (8002384 <MX_GPIO_Init+0x174>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <MX_GPIO_Init+0x174>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	f640 0107 	movw	r1, #2055	; 0x807
 80022b8:	4833      	ldr	r0, [pc, #204]	; (8002388 <MX_GPIO_Init+0x178>)
 80022ba:	f002 fda1 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	2120      	movs	r1, #32
 80022c2:	4832      	ldr	r0, [pc, #200]	; (800238c <MX_GPIO_Init+0x17c>)
 80022c4:	f002 fd9c 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2104      	movs	r1, #4
 80022cc:	4830      	ldr	r0, [pc, #192]	; (8002390 <MX_GPIO_Init+0x180>)
 80022ce:	f002 fd97 	bl	8004e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin;
 80022d2:	f640 0307 	movw	r3, #2055	; 0x807
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4827      	ldr	r0, [pc, #156]	; (8002388 <MX_GPIO_Init+0x178>)
 80022ec:	f002 fbdc 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022f0:	2320      	movs	r3, #32
 80022f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4821      	ldr	r0, [pc, #132]	; (800238c <MX_GPIO_Init+0x17c>)
 8002308:	f002 fbce 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Echo1_Pin|Echo4_Pin|Echo3_Pin|Echo2_Pin;
 800230c:	f24e 0302 	movw	r3, #57346	; 0xe002
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <MX_GPIO_Init+0x184>)
 8002314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	481b      	ldr	r0, [pc, #108]	; (8002390 <MX_GPIO_Init+0x180>)
 8002322:	f002 fbc1 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8002326:	2304      	movs	r3, #4
 8002328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4814      	ldr	r0, [pc, #80]	; (8002390 <MX_GPIO_Init+0x180>)
 800233e:	f002 fbb3 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tirette_Pin;
 8002342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	480c      	ldr	r0, [pc, #48]	; (8002388 <MX_GPIO_Init+0x178>)
 8002358:	f002 fba6 	bl	8004aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	2007      	movs	r0, #7
 8002362:	f002 fad8 	bl	8004916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002366:	2007      	movs	r0, #7
 8002368:	f002 faf1 	bl	800494e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2028      	movs	r0, #40	; 0x28
 8002372:	f002 fad0 	bl	8004916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002376:	2028      	movs	r0, #40	; 0x28
 8002378:	f002 fae9 	bl	800494e <HAL_NVIC_EnableIRQ>

}
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	40020800 	.word	0x40020800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	10310000 	.word	0x10310000

08002398 <decodeMsgIHM>:
#include "ihm.h"

int decodeMsgIHM(char *trame){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

	char header = trame[0];
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	73fb      	strb	r3, [r7, #15]

	switch(header){
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b4d      	cmp	r3, #77	; 0x4d
 80023aa:	d017      	beq.n	80023dc <decodeMsgIHM+0x44>
 80023ac:	2b4d      	cmp	r3, #77	; 0x4d
 80023ae:	dc1e      	bgt.n	80023ee <decodeMsgIHM+0x56>
 80023b0:	2b42      	cmp	r3, #66	; 0x42
 80023b2:	d00a      	beq.n	80023ca <decodeMsgIHM+0x32>
 80023b4:	2b4a      	cmp	r3, #74	; 0x4a
 80023b6:	d11a      	bne.n	80023ee <decodeMsgIHM+0x56>
		case 'J' :
			port_depart = JAUNE;
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <decodeMsgIHM+0x64>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
			initStrategie();
 80023be:	f000 f95b 	bl	8002678 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Jaune\r\n");
 80023c2:	480f      	ldr	r0, [pc, #60]	; (8002400 <decodeMsgIHM+0x68>)
 80023c4:	f006 f8ee 	bl	80085a4 <puts>
			#endif
			break;
 80023c8:	e012      	b.n	80023f0 <decodeMsgIHM+0x58>

		case 'B' :
			port_depart = BLEU;
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <decodeMsgIHM+0x64>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
			initStrategie();
 80023d0:	f000 f952 	bl	8002678 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Bleu\r\n");
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <decodeMsgIHM+0x6c>)
 80023d6:	f006 f8e5 	bl	80085a4 <puts>
			#endif
			break;
 80023da:	e009      	b.n	80023f0 <decodeMsgIHM+0x58>

		case 'M' :
			initStrategie();
 80023dc:	f000 f94c 	bl	8002678 <initStrategie>
			//HAL_TIM_Base_Start_IT(&htim2);
			match_started = TRUE;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <decodeMsgIHM+0x70>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
			#if MODULE_DEBUG == 1
				printf("Go!\r\n");
 80023e6:	4809      	ldr	r0, [pc, #36]	; (800240c <decodeMsgIHM+0x74>)
 80023e8:	f006 f8dc 	bl	80085a4 <puts>
			#endif
			break;
 80023ec:	e000      	b.n	80023f0 <decodeMsgIHM+0x58>

		default :
			break;
 80023ee:	bf00      	nop
	}

	return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200002e8 	.word	0x200002e8
 8002400:	0800cffc 	.word	0x0800cffc
 8002404:	0800d01c 	.word	0x0800d01c
 8002408:	200002ec 	.word	0x200002ec
 800240c:	0800d03c 	.word	0x0800d03c

08002410 <getLidarData2>:
	#endif
	*/

}

void getLidarData2(){
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
	char header = lidarRawData[0];
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <getLidarData2+0x40>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	71fb      	strb	r3, [r7, #7]

	#if MODULE_DEBUG == 1 && DEBUG_LIDAR
	printf("header = %c\r\n",header);
	#endif

	switch(header){
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	2b42      	cmp	r3, #66	; 0x42
 8002420:	d002      	beq.n	8002428 <getLidarData2+0x18>
 8002422:	2b46      	cmp	r3, #70	; 0x46
 8002424:	d007      	beq.n	8002436 <getLidarData2+0x26>
			StopFront = 1;
			cpt_front = 0;
			break;

		default :
			break;
 8002426:	e00d      	b.n	8002444 <getLidarData2+0x34>
			StopBack = 1;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <getLidarData2+0x44>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
			cpt_back = 0;
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <getLidarData2+0x48>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
			break;
 8002434:	e006      	b.n	8002444 <getLidarData2+0x34>
			StopFront = 1;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <getLidarData2+0x4c>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]
			cpt_front = 0;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <getLidarData2+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
			break;
 8002442:	bf00      	nop
	}
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	2000033c 	.word	0x2000033c
 8002454:	200003d0 	.word	0x200003d0
 8002458:	200003b4 	.word	0x200003b4
 800245c:	200003b0 	.word	0x200003b0
 8002460:	2000037c 	.word	0x2000037c

08002464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800246a:	f001 fe71 	bl	8004150 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246e:	f000 f859 	bl	8002524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002472:	f7ff fecd 	bl	8002210 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002476:	f001 fc55 	bl	8003d24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800247a:	f000 ffa9 	bl	80033d0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800247e:	f001 f959 	bl	8003734 <MX_TIM8_Init>
  MX_TIM11_Init();
 8002482:	f001 f9f7 	bl	8003874 <MX_TIM11_Init>
  MX_UART4_Init();
 8002486:	f001 fbcf 	bl	8003c28 <MX_UART4_Init>
  MX_UART5_Init();
 800248a:	f001 fbf7 	bl	8003c7c <MX_UART5_Init>
  MX_USART3_UART_Init();
 800248e:	f001 fc73 	bl	8003d78 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002492:	f001 f843 	bl	800351c <MX_TIM3_Init>
  MX_TIM7_Init();
 8002496:	f001 f917 	bl	80036c8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800249a:	f001 fc19 	bl	8003cd0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800249e:	f000 ffef 	bl	8003480 <MX_TIM2_Init>
  MX_ADC1_Init();
 80024a2:	f7ff fa4b 	bl	800193c <MX_ADC1_Init>
  MX_TIM6_Init();
 80024a6:	f001 f8d9 	bl	800365c <MX_TIM6_Init>
  MX_TIM4_Init();
 80024aa:	f001 f88b 	bl	80035c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  initSerials();
 80024ae:	f000 f8d3 	bl	8002658 <initSerials>

  port_depart = BLEU;
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <main+0xa8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
  initStrategie();
 80024b8:	f000 f8de 	bl	8002678 <initStrategie>

  Motor_Init();
 80024bc:	f000 fb68 	bl	8002b90 <Motor_Init>
  initPinces();
 80024c0:	f7ff f96a 	bl	8001798 <initPinces>
  initBras();
 80024c4:	f7ff fa04 	bl	80018d0 <initBras>
  initFlag();
 80024c8:	f7ff f9c2 	bl	8001850 <initFlag>
  initUltrasons();
 80024cc:	f7ff f8b4 	bl	8001638 <initUltrasons>

  indexStrategie = 1; // Variable parcourant le tableau de stratégie
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <main+0xac>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
  initTimers();
 80024d6:	f000 f899 	bl	800260c <initTimers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Tirette
  float voltage = 0;
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
	  if((voltage < (float)TIRETTE_SEUIL) == TRUE && match_started == FALSE){
		  match_started = TRUE;
		  initStrategie();
	  }
	#else
	match_started = TRUE;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <main+0xb0>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

	#endif
  } while(match_started == FALSE);
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <main+0xb0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f8      	beq.n	80024e0 <main+0x7c>
  // Fin tirette

  #if MODULE_LIDAR
  	  HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 80024ee:	2201      	movs	r2, #1
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <main+0xb4>)
 80024f2:	480a      	ldr	r0, [pc, #40]	; (800251c <main+0xb8>)
 80024f4:	f004 fdab 	bl	800704e <HAL_UART_Receive_IT>
  #endif

  cptTempsMatch = 0;
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <main+0xbc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  #if MODULE_DEBUG
	  	  debugUltrasons();
 80024fe:	f7ff f91f 	bl	8001740 <debugUltrasons>
	  	  HAL_Delay(100);
 8002502:	2064      	movs	r0, #100	; 0x64
 8002504:	f001 fe96 	bl	8004234 <HAL_Delay>
	  	  debugUltrasons();
 8002508:	e7f9      	b.n	80024fe <main+0x9a>
 800250a:	bf00      	nop
 800250c:	200002e8 	.word	0x200002e8
 8002510:	20000498 	.word	0x20000498
 8002514:	200002ec 	.word	0x200002ec
 8002518:	200003cc 	.word	0x200003cc
 800251c:	2000077c 	.word	0x2000077c
 8002520:	200002d8 	.word	0x200002d8

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b094      	sub	sp, #80	; 0x50
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	2234      	movs	r2, #52	; 0x34
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fb3e 	bl	8007bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <SystemClock_Config+0xe0>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	4a2c      	ldr	r2, [pc, #176]	; (8002604 <SystemClock_Config+0xe0>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002556:	6413      	str	r3, [r2, #64]	; 0x40
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <SystemClock_Config+0xe0>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <SystemClock_Config+0xe4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a26      	ldr	r2, [pc, #152]	; (8002608 <SystemClock_Config+0xe4>)
 800256e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <SystemClock_Config+0xe4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002580:	2302      	movs	r3, #2
 8002582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002584:	2301      	movs	r3, #1
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002588:	2310      	movs	r3, #16
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258c:	2302      	movs	r3, #2
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002594:	2310      	movs	r3, #16
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002598:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800259e:	2302      	movs	r3, #2
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025a2:	2302      	movs	r3, #2
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 ff74 	bl	800549c <HAL_RCC_OscConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025ba:	f000 fae1 	bl	8002b80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025be:	f002 fc51 	bl	8004e64 <HAL_PWREx_EnableOverDrive>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80025c8:	f000 fada 	bl	8002b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025cc:	230f      	movs	r3, #15
 80025ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d0:	2302      	movs	r3, #2
 80025d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	2105      	movs	r1, #5
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fc8a 	bl	8004f04 <HAL_RCC_ClockConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80025f6:	f000 fac3 	bl	8002b80 <Error_Handler>
  }
}
 80025fa:	bf00      	nop
 80025fc:	3750      	adds	r7, #80	; 0x50
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40007000 	.word	0x40007000

0800260c <initTimers>:

/* USER CODE BEGIN 4 */

int initTimers(){
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0

	#if MODULE_ODOMETRIE
		HAL_TIM_Encoder_Start(&CODEUR_D, TIM_CHANNEL_ALL); // htim1
 8002610:	213c      	movs	r1, #60	; 0x3c
 8002612:	480b      	ldr	r0, [pc, #44]	; (8002640 <initTimers+0x34>)
 8002614:	f003 fc68 	bl	8005ee8 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&CODEUR_G, TIM_CHANNEL_ALL); // htim3
 8002618:	213c      	movs	r1, #60	; 0x3c
 800261a:	480a      	ldr	r0, [pc, #40]	; (8002644 <initTimers+0x38>)
 800261c:	f003 fc64 	bl	8005ee8 <HAL_TIM_Encoder_Start>
	#endif

	#if MODULE_ASSERVISSEMENT
		HAL_TIM_Base_Start_IT(&htim2); 	// Period : 15ms
 8002620:	4809      	ldr	r0, [pc, #36]	; (8002648 <initTimers+0x3c>)
 8002622:	f003 fa29 	bl	8005a78 <HAL_TIM_Base_Start_IT>
	#endif

	#if MODULE_ULTRASONS
		HAL_TIM_Base_Start_IT(&htim4); 	// Period : 1us
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <initTimers+0x40>)
 8002628:	f003 fa26 	bl	8005a78 <HAL_TIM_Base_Start_IT>
	#endif

	#if MODULE_LIDAR
		HAL_TIM_Base_Start_IT(&htim6); 	// Period : 10ms
 800262c:	4808      	ldr	r0, [pc, #32]	; (8002650 <initTimers+0x44>)
 800262e:	f003 fa23 	bl	8005a78 <HAL_TIM_Base_Start_IT>
	#endif

	#if MODULE_COMPTEUR
		HAL_TIM_Base_Start_IT(&htim7); 	// Period : 1sec
 8002632:	4808      	ldr	r0, [pc, #32]	; (8002654 <initTimers+0x48>)
 8002634:	f003 fa20 	bl	8005a78 <HAL_TIM_Base_Start_IT>
	#endif

	return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000660 	.word	0x20000660
 8002644:	20000588 	.word	0x20000588
 8002648:	200006a8 	.word	0x200006a8
 800264c:	20000540 	.word	0x20000540
 8002650:	20000618 	.word	0x20000618
 8002654:	200006f0 	.word	0x200006f0

08002658 <initSerials>:

int initSerials(){
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	#if MODULE_DEBUG == 1
		RetargetInit(&huart2);
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <initSerials+0x18>)
 800265e:	f000 fcfb 	bl	8003058 <RetargetInit>
		printf("Mode debug actif\r\n");
 8002662:	4804      	ldr	r0, [pc, #16]	; (8002674 <initSerials+0x1c>)
 8002664:	f005 ff9e 	bl	80085a4 <puts>

	#if MODULE_IHM
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
	#endif

	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000848 	.word	0x20000848
 8002674:	0800d044 	.word	0x0800d044

08002678 <initStrategie>:

int initStrategie(){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	if(port_depart == BLEU){
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <initStrategie+0x88>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d119      	bne.n	80026b8 <initStrategie+0x40>
		ODO_setAngle(START_BLEU_ANGLE);
 8002684:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80026f8 <initStrategie+0x80>
 8002688:	f000 fcd4 	bl	8003034 <ODO_setAngle>
		ODO_setX(consigneBleu[0].x);
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <initStrategie+0x8c>)
 800268e:	ed93 7b00 	vldr	d7, [r3]
 8002692:	eeb0 0a47 	vmov.f32	s0, s14
 8002696:	eef0 0a67 	vmov.f32	s1, s15
 800269a:	f000 fca7 	bl	8002fec <ODO_setX>
		ODO_setY(consigneBleu[0].y);
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <initStrategie+0x8c>)
 80026a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80026a4:	eeb0 0a47 	vmov.f32	s0, s14
 80026a8:	eef0 0a67 	vmov.f32	s1, s15
 80026ac:	f000 fcb0 	bl	8003010 <ODO_setY>
		consigne = consigneBleu;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <initStrategie+0x90>)
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <initStrategie+0x8c>)
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e01c      	b.n	80026f2 <initStrategie+0x7a>
	}
	else if(port_depart == JAUNE){
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <initStrategie+0x88>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d118      	bne.n	80026f2 <initStrategie+0x7a>
		ODO_setAngle(START_JAUNE_ANGLE);
 80026c0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80026f8 <initStrategie+0x80>
 80026c4:	f000 fcb6 	bl	8003034 <ODO_setAngle>
		ODO_setX(consigneJaune[0].x);
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <initStrategie+0x94>)
 80026ca:	ed93 7b00 	vldr	d7, [r3]
 80026ce:	eeb0 0a47 	vmov.f32	s0, s14
 80026d2:	eef0 0a67 	vmov.f32	s1, s15
 80026d6:	f000 fc89 	bl	8002fec <ODO_setX>
		ODO_setY(consigneJaune[0].y);
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <initStrategie+0x94>)
 80026dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80026e0:	eeb0 0a47 	vmov.f32	s0, s14
 80026e4:	eef0 0a67 	vmov.f32	s1, s15
 80026e8:	f000 fc92 	bl	8003010 <ODO_setY>
		consigne = consigneJaune;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <initStrategie+0x90>)
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <initStrategie+0x94>)
 80026f0:	601a      	str	r2, [r3, #0]
	}

	return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
	...
 8002700:	200002e8 	.word	0x200002e8
 8002704:	20000008 	.word	0x20000008
 8002708:	20000404 	.word	0x20000404
 800270c:	20000068 	.word	0x20000068

08002710 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af08      	add	r7, sp, #32
 8002716:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d123      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0x5a>
		if(indexStrategie < nb_points && match_started == 1)
 8002722:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	da1a      	bge.n	8002764 <HAL_TIM_PeriodElapsedCallback+0x54>
 800272e:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d116      	bne.n	8002764 <HAL_TIM_PeriodElapsedCallback+0x54>
			ASSERV_update(consigne[indexStrategie]);
 8002736:	4b4d      	ldr	r3, [pc, #308]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4619      	mov	r1, r3
 8002740:	460b      	mov	r3, r1
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	440b      	add	r3, r1
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	18d6      	adds	r6, r2, r3
 800274a:	466d      	mov	r5, sp
 800274c:	f106 0410 	add.w	r4, r6, #16
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002758:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800275c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002760:	f7ff f982 	bl	8001a68 <ASSERV_update>
		printf("TIM2\r\n");
 8002764:	4842      	ldr	r0, [pc, #264]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002766:	f005 ff1d 	bl	80085a4 <puts>
	}

	if(htim->Instance == TIM4){
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a41      	ldr	r2, [pc, #260]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d132      	bne.n	80027da <HAL_TIM_PeriodElapsedCallback+0xca>
		cpt_shared++;
 8002774:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a3f      	ldr	r2, [pc, #252]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800277c:	6013      	str	r3, [r2, #0]
		cpt_trigger++;
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	4a3d      	ldr	r2, [pc, #244]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002786:	6013      	str	r3, [r2, #0]
		//printf("cpt_trigger = %ld\r\n", cpt_trigger);

		if(cpt_trigger >= 0 && cpt_trigger < 10){
 8002788:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0b      	blt.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x98>
 8002790:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b09      	cmp	r3, #9
 8002796:	dc07      	bgt.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x98>
			checkUltrasons();
 8002798:	f7fe ff88 	bl	80016ac <checkUltrasons>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	2104      	movs	r1, #4
 80027a0:	4837      	ldr	r0, [pc, #220]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027a2:	f002 fb2d 	bl	8004e00 <HAL_GPIO_WritePin>
 80027a6:	e008      	b.n	80027ba <HAL_TIM_PeriodElapsedCallback+0xaa>
		}
		else if(cpt_trigger >= 20) {
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b13      	cmp	r3, #19
 80027ae:	dd04      	ble.n	80027ba <HAL_TIM_PeriodElapsedCallback+0xaa>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2104      	movs	r1, #4
 80027b4:	4832      	ldr	r0, [pc, #200]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027b6:	f002 fb23 	bl	8004e00 <HAL_GPIO_WritePin>
		}

		if(us_done < 4 && cpt_shared >= 5000){
 80027ba:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	dc0b      	bgt.n	80027da <HAL_TIM_PeriodElapsedCallback+0xca>
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80027ca:	4293      	cmp	r3, r2
 80027cc:	dd05      	ble.n	80027da <HAL_TIM_PeriodElapsedCallback+0xca>
			cpt_shared = 0;
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
			cpt_trigger = 0;
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM6){
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d117      	bne.n	8002814 <HAL_TIM_PeriodElapsedCallback+0x104>
		//printf("TIM6\r\n");
		cpt_back++;
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80027ec:	6013      	str	r3, [r2, #0]
		cpt_front++;
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	4a26      	ldr	r2, [pc, #152]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80027f6:	6013      	str	r3, [r2, #0]
		//printf("cpt_front = %d\r\n",cpt_front);

		if (cpt_back > 250){
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2bfa      	cmp	r3, #250	; 0xfa
 80027fe:	dd02      	ble.n	8002806 <HAL_TIM_PeriodElapsedCallback+0xf6>
			StopBack = 0;
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
		}

		if (cpt_front > 250){
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2bfa      	cmp	r3, #250	; 0xfa
 800280c:	dd02      	ble.n	8002814 <HAL_TIM_PeriodElapsedCallback+0x104>
			StopFront = 0;
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM7){
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a20      	ldr	r2, [pc, #128]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11b      	bne.n	8002856 <HAL_TIM_PeriodElapsedCallback+0x146>
		if(match_started == TRUE){
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d117      	bne.n	8002856 <HAL_TIM_PeriodElapsedCallback+0x146>
			cptTempsMatch++;
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800282e:	6013      	str	r3, [r2, #0]

			if (cptTempsMatch >= TEMPS_PAVILLONS){
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b5f      	cmp	r3, #95	; 0x5f
 8002836:	dd01      	ble.n	800283c <HAL_TIM_PeriodElapsedCallback+0x12c>
				raiseFlag();
 8002838:	f7ff f83e 	bl	80018b8 <raiseFlag>
			}

			if (cptTempsMatch >= 98){
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b61      	cmp	r3, #97	; 0x61
 8002842:	dd08      	ble.n	8002856 <HAL_TIM_PeriodElapsedCallback+0x146>
				Motor_Disable();
 8002844:	f000 f9e2 	bl	8002c0c <Motor_Disable>
				initBras();
 8002848:	f7ff f842 	bl	80018d0 <initBras>
				initPinces();
 800284c:	f7fe ffa4 	bl	8001798 <initPinces>
				match_started = 0;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285e:	bf00      	nop
 8002860:	20000498 	.word	0x20000498
 8002864:	20000004 	.word	0x20000004
 8002868:	200002ec 	.word	0x200002ec
 800286c:	20000404 	.word	0x20000404
 8002870:	0800d058 	.word	0x0800d058
 8002874:	40000800 	.word	0x40000800
 8002878:	200003c8 	.word	0x200003c8
 800287c:	200002f4 	.word	0x200002f4
 8002880:	40020400 	.word	0x40020400
 8002884:	200002f0 	.word	0x200002f0
 8002888:	40001000 	.word	0x40001000
 800288c:	200003b4 	.word	0x200003b4
 8002890:	2000037c 	.word	0x2000037c
 8002894:	200003d0 	.word	0x200003d0
 8002898:	200003b0 	.word	0x200003b0
 800289c:	40001400 	.word	0x40001400
 80028a0:	200002d8 	.word	0x200002d8

080028a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5){
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_UART_RxCpltCallback+0x80>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d113      	bne.n	80028de <HAL_UART_RxCpltCallback+0x3a>
		strcat(lidarRawData,&buff_lidar);
 80028b6:	491c      	ldr	r1, [pc, #112]	; (8002928 <HAL_UART_RxCpltCallback+0x84>)
 80028b8:	481c      	ldr	r0, [pc, #112]	; (800292c <HAL_UART_RxCpltCallback+0x88>)
 80028ba:	f005 ff41 	bl	8008740 <strcat>
		if(buff_lidar == '\n'){
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_UART_RxCpltCallback+0x84>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b0a      	cmp	r3, #10
 80028c4:	d106      	bne.n	80028d4 <HAL_UART_RxCpltCallback+0x30>
			//getLidarData();
			getLidarData2();
 80028c6:	f7ff fda3 	bl	8002410 <getLidarData2>
			memset(lidarRawData,0,sizeof(lidarRawData));
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	2100      	movs	r1, #0
 80028ce:	4817      	ldr	r0, [pc, #92]	; (800292c <HAL_UART_RxCpltCallback+0x88>)
 80028d0:	f005 f970 	bl	8007bb4 <memset>
		}
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 80028d4:	2201      	movs	r2, #1
 80028d6:	4914      	ldr	r1, [pc, #80]	; (8002928 <HAL_UART_RxCpltCallback+0x84>)
 80028d8:	4815      	ldr	r0, [pc, #84]	; (8002930 <HAL_UART_RxCpltCallback+0x8c>)
 80028da:	f004 fbb8 	bl	800704e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == UART4){
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_UART_RxCpltCallback+0x90>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d118      	bne.n	800291a <HAL_UART_RxCpltCallback+0x76>
		if(match_started == FALSE){
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_UART_RxCpltCallback+0x94>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d114      	bne.n	800291a <HAL_UART_RxCpltCallback+0x76>
			strcat(ihmRawData,&buff_ihm);
 80028f0:	4912      	ldr	r1, [pc, #72]	; (800293c <HAL_UART_RxCpltCallback+0x98>)
 80028f2:	4813      	ldr	r0, [pc, #76]	; (8002940 <HAL_UART_RxCpltCallback+0x9c>)
 80028f4:	f005 ff24 	bl	8008740 <strcat>
			if(buff_ihm == '\n'){
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_UART_RxCpltCallback+0x98>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b0a      	cmp	r3, #10
 80028fe:	d107      	bne.n	8002910 <HAL_UART_RxCpltCallback+0x6c>
				decodeMsgIHM(ihmRawData);
 8002900:	480f      	ldr	r0, [pc, #60]	; (8002940 <HAL_UART_RxCpltCallback+0x9c>)
 8002902:	f7ff fd49 	bl	8002398 <decodeMsgIHM>
				memset(ihmRawData,0,sizeof(ihmRawData));
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	2100      	movs	r1, #0
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <HAL_UART_RxCpltCallback+0x9c>)
 800290c:	f005 f952 	bl	8007bb4 <memset>
			}
			HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 8002910:	2201      	movs	r2, #1
 8002912:	490a      	ldr	r1, [pc, #40]	; (800293c <HAL_UART_RxCpltCallback+0x98>)
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <HAL_UART_RxCpltCallback+0xa0>)
 8002916:	f004 fb9a 	bl	800704e <HAL_UART_Receive_IT>
		}
	}
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40005000 	.word	0x40005000
 8002928:	200003cc 	.word	0x200003cc
 800292c:	2000033c 	.word	0x2000033c
 8002930:	2000077c 	.word	0x2000077c
 8002934:	40004c00 	.word	0x40004c00
 8002938:	200002ec 	.word	0x200002ec
 800293c:	200004b0 	.word	0x200004b0
 8002940:	200004b4 	.word	0x200004b4
 8002944:	20000804 	.word	0x20000804

08002948 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_1)
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d13b      	bne.n	80029d0 <HAL_GPIO_EXTI_Callback+0x88>
  {
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8002958:	2102      	movs	r1, #2
 800295a:	4883      	ldr	r0, [pc, #524]	; (8002b68 <HAL_GPIO_EXTI_Callback+0x220>)
 800295c:	f002 fa38 	bl	8004dd0 <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_GPIO_EXTI_Callback+0x28>
    	time_rising[0] = cpt_shared;
 8002966:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a81      	ldr	r2, [pc, #516]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e02f      	b.n	80029d0 <HAL_GPIO_EXTI_Callback+0x88>
    	//printf("time_rising : %ld\r\n", time_rising);
    } else{
    	us_distance[0] = ((float)(cpt_shared - time_rising[0]) * 0.034) / 2.0;
 8002970:	4b7e      	ldr	r3, [pc, #504]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b7e      	ldr	r3, [pc, #504]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	ee17 0a90 	vmov	r0, s15
 8002986:	f7fd fdff 	bl	8000588 <__aeabi_f2d>
 800298a:	a375      	add	r3, pc, #468	; (adr r3, 8002b60 <HAL_GPIO_EXTI_Callback+0x218>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fe52 	bl	8000638 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a4:	f7fd ff72 	bl	800088c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4971      	ldr	r1, [pc, #452]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x22c>)
 80029ae:	e9c1 2300 	strd	r2, r3, [r1]
    	//printf("time_diff : %ld\r\n", time_rising - cpt_shared);

    	us_done++;
 80029b2:	4b71      	ldr	r3, [pc, #452]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a6f      	ldr	r2, [pc, #444]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 80029ba:	6013      	str	r3, [r2, #0]
    	if (us_done >= 3){
 80029bc:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	dd05      	ble.n	80029d0 <HAL_GPIO_EXTI_Callback+0x88>
        	cpt_shared = 0;
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
        	cpt_trigger = 0;
 80029ca:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x234>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
    	}

    }
  }

  if(GPIO_Pin == GPIO_PIN_15)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d6:	d13c      	bne.n	8002a52 <HAL_GPIO_EXTI_Callback+0x10a>
  {
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	4862      	ldr	r0, [pc, #392]	; (8002b68 <HAL_GPIO_EXTI_Callback+0x220>)
 80029de:	f002 f9f7 	bl	8004dd0 <HAL_GPIO_ReadPin>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_GPIO_EXTI_Callback+0xaa>
    	time_rising[1] = cpt_shared;
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 80029ee:	6053      	str	r3, [r2, #4]
 80029f0:	e02f      	b.n	8002a52 <HAL_GPIO_EXTI_Callback+0x10a>
    	//printf("time_rising : %ld\r\n", time_rising);
    } else{
    	us_distance[1] = ((float)(cpt_shared - time_rising[1]) * 0.034) / 2.0;
 80029f2:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b5e      	ldr	r3, [pc, #376]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a04:	ee17 0a90 	vmov	r0, s15
 8002a08:	f7fd fdbe 	bl	8000588 <__aeabi_f2d>
 8002a0c:	a354      	add	r3, pc, #336	; (adr r3, 8002b60 <HAL_GPIO_EXTI_Callback+0x218>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fd fe11 	bl	8000638 <__aeabi_dmul>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a26:	f7fd ff31 	bl	800088c <__aeabi_ddiv>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4951      	ldr	r1, [pc, #324]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002a30:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	//printf("time_diff : %ld\r\n", time_rising - cpt_shared);

    	us_done++;
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	4a4f      	ldr	r2, [pc, #316]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002a3c:	6013      	str	r3, [r2, #0]
    	if (us_done >= 3){
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	dd05      	ble.n	8002a52 <HAL_GPIO_EXTI_Callback+0x10a>
        	cpt_shared = 0;
 8002a46:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
        	cpt_trigger = 0;
 8002a4c:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x234>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    	}
    }
  }

  if(GPIO_Pin == GPIO_PIN_14)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a58:	d13c      	bne.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x18c>
  {
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)){
 8002a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a5e:	4842      	ldr	r0, [pc, #264]	; (8002b68 <HAL_GPIO_EXTI_Callback+0x220>)
 8002a60:	f002 f9b6 	bl	8004dd0 <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_GPIO_EXTI_Callback+0x12c>
    	time_rising[2] = cpt_shared;
 8002a6a:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 8002a70:	6093      	str	r3, [r2, #8]
 8002a72:	e02f      	b.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x18c>
    	//printf("time_rising : %ld\r\n", time_rising);
    } else{
    	us_distance[2] = ((float)(cpt_shared - time_rising[2]) * 0.034) / 2.0;
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	ee17 0a90 	vmov	r0, s15
 8002a8a:	f7fd fd7d 	bl	8000588 <__aeabi_f2d>
 8002a8e:	a334      	add	r3, pc, #208	; (adr r3, 8002b60 <HAL_GPIO_EXTI_Callback+0x218>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f7fd fdd0 	bl	8000638 <__aeabi_dmul>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aa8:	f7fd fef0 	bl	800088c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4930      	ldr	r1, [pc, #192]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002ab2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    	//printf("time_diff : %ld\r\n", time_rising - cpt_shared);

    	us_done++;
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002abe:	6013      	str	r3, [r2, #0]
    	if (us_done >= 3){
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	dd05      	ble.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x18c>
        	cpt_shared = 0;
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
        	cpt_trigger = 0;
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x234>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    	}
    }
  }

  if(GPIO_Pin == GPIO_PIN_13)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ada:	d13c      	bne.n	8002b56 <HAL_GPIO_EXTI_Callback+0x20e>
  {
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)){
 8002adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae0:	4821      	ldr	r0, [pc, #132]	; (8002b68 <HAL_GPIO_EXTI_Callback+0x220>)
 8002ae2:	f002 f975 	bl	8004dd0 <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <HAL_GPIO_EXTI_Callback+0x1ae>
    	time_rising[3] = cpt_shared;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 8002af2:	60d3      	str	r3, [r2, #12]
        	cpt_shared = 0;
        	cpt_trigger = 0;
    	}
    }
  }
}
 8002af4:	e02f      	b.n	8002b56 <HAL_GPIO_EXTI_Callback+0x20e>
    	us_distance[3] = ((float)(cpt_shared - time_rising[2]) * 0.034) / 2.0;
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x228>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b08:	ee17 0a90 	vmov	r0, s15
 8002b0c:	f7fd fd3c 	bl	8000588 <__aeabi_f2d>
 8002b10:	a313      	add	r3, pc, #76	; (adr r3, 8002b60 <HAL_GPIO_EXTI_Callback+0x218>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fd8f 	bl	8000638 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2a:	f7fd feaf 	bl	800088c <__aeabi_ddiv>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4910      	ldr	r1, [pc, #64]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002b34:	e9c1 2306 	strd	r2, r3, [r1, #24]
    	us_done++;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002b40:	6013      	str	r3, [r2, #0]
    	if (us_done >= 3){
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x230>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	dd05      	ble.n	8002b56 <HAL_GPIO_EXTI_Callback+0x20e>
        	cpt_shared = 0;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_GPIO_EXTI_Callback+0x224>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
        	cpt_trigger = 0;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x234>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	b020c49c 	.word	0xb020c49c
 8002b64:	3fa16872 	.word	0x3fa16872
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	200003c8 	.word	0x200003c8
 8002b70:	200003b8 	.word	0x200003b8
 8002b74:	200002f8 	.word	0x200002f8
 8002b78:	200002f0 	.word	0x200002f0
 8002b7c:	200002f4 	.word	0x200002f4

08002b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <Motor_Init>:
#include <moteurs.h>

uint8_t Motor_Init(void){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af04      	add	r7, sp, #16
	DRV8825_init(&moteur_D, EN_D_Pin, EN_D_GPIO_Port, Dir_D_Pin, Dir_D_GPIO_Port, &STEP_D, TIM_CHANNEL_4);
 8002b96:	230c      	movs	r3, #12
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <Motor_Init+0x44>)
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <Motor_Init+0x48>)
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <Motor_Init+0x48>)
 8002ba8:	2102      	movs	r1, #2
 8002baa:	480c      	ldr	r0, [pc, #48]	; (8002bdc <Motor_Init+0x4c>)
 8002bac:	f7fe fc32 	bl	8001414 <DRV8825_init>
	DRV8825_init(&moteur_G, EN_G_Pin, EN_G_GPIO_Port, Dir_G_Pin, Dir_G_GPIO_Port, &STEP_G, TIM_CHANNEL_1);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <Motor_Init+0x50>)
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <Motor_Init+0x48>)
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <Motor_Init+0x48>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4808      	ldr	r0, [pc, #32]	; (8002be4 <Motor_Init+0x54>)
 8002bc4:	f7fe fc26 	bl	8001414 <DRV8825_init>

	//Motor_Disable();
	Motor_Enable();
 8002bc8:	f000 f80e 	bl	8002be8 <Motor_Enable>
	return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200004f8 	.word	0x200004f8
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	20000468 	.word	0x20000468
 8002be0:	200005d0 	.word	0x200005d0
 8002be4:	20000480 	.word	0x20000480

08002be8 <Motor_Enable>:

uint8_t Motor_Enable(){
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, START);
 8002bec:	2100      	movs	r1, #0
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <Motor_Enable+0x1c>)
 8002bf0:	f7fe fc45 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, START);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <Motor_Enable+0x20>)
 8002bf8:	f7fe fc41 	bl	800147e <DRV8825_setStart>
	return 0;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000468 	.word	0x20000468
 8002c08:	20000480 	.word	0x20000480

08002c0c <Motor_Disable>:

uint8_t Motor_Disable(){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, STOP);
 8002c10:	2101      	movs	r1, #1
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <Motor_Disable+0x1c>)
 8002c14:	f7fe fc33 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4804      	ldr	r0, [pc, #16]	; (8002c2c <Motor_Disable+0x20>)
 8002c1c:	f7fe fc2f 	bl	800147e <DRV8825_setStart>
	return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000468 	.word	0x20000468
 8002c2c:	20000480 	.word	0x20000480

08002c30 <Motor_setSpeedLeft>:

uint8_t Motor_setSpeedLeft(float RPM){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	ed87 0a01 	vstr	s0, [r7, #4]
    if (RPM > MOV_RPM_MAX){
 8002c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c3e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002c7c <Motor_setSpeedLeft+0x4c>
 8002c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	dd02      	ble.n	8002c52 <Motor_setSpeedLeft+0x22>
        RPM = MOV_RPM_MAX;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <Motor_setSpeedLeft+0x50>)
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	e009      	b.n	8002c66 <Motor_setSpeedLeft+0x36>
    }
    else if(RPM < 0){
 8002c52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d502      	bpl.n	8002c66 <Motor_setSpeedLeft+0x36>
        RPM = 0;
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
    }

    DRV8825_moveMotorRPM(&moteur_G, RPM);
 8002c66:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c6a:	4806      	ldr	r0, [pc, #24]	; (8002c84 <Motor_setSpeedLeft+0x54>)
 8002c6c:	f7fe fc1a 	bl	80014a4 <DRV8825_moveMotorRPM>
    return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	42480000 	.word	0x42480000
 8002c80:	42480000 	.word	0x42480000
 8002c84:	20000480 	.word	0x20000480

08002c88 <Motor_setSpeedRight>:

uint8_t Motor_setSpeedRight(float RPM){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (RPM > MOV_RPM_MAX){
 8002c92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c96:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002cd4 <Motor_setSpeedRight+0x4c>
 8002c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	dd02      	ble.n	8002caa <Motor_setSpeedRight+0x22>
        RPM = MOV_RPM_MAX;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <Motor_setSpeedRight+0x50>)
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	e009      	b.n	8002cbe <Motor_setSpeedRight+0x36>
    }
    else if(RPM < 0){
 8002caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	d502      	bpl.n	8002cbe <Motor_setSpeedRight+0x36>
        RPM = 0;
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
    }

    DRV8825_moveMotorRPM(&moteur_D, RPM);
 8002cbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <Motor_setSpeedRight+0x54>)
 8002cc4:	f7fe fbee 	bl	80014a4 <DRV8825_moveMotorRPM>
    return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	42480000 	.word	0x42480000
 8002cd8:	42480000 	.word	0x42480000
 8002cdc:	20000468 	.word	0x20000468

08002ce0 <Motor_setSpeed>:

uint8_t Motor_setSpeed(float RPM){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	ed87 0a01 	vstr	s0, [r7, #4]
    Motor_setSpeedLeft(RPM);
 8002cea:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cee:	f7ff ff9f 	bl	8002c30 <Motor_setSpeedLeft>
    Motor_setSpeedRight(RPM);
 8002cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cf6:	f7ff ffc7 	bl	8002c88 <Motor_setSpeedRight>

    return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <Motor_robotForward>:

uint8_t Motor_robotForward(){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
    DRV8825_setDir(&moteur_G, FORWARD);
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <Motor_robotForward+0x1c>)
 8002d0c:	f7fe fba5 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, FORWARD);
 8002d10:	2101      	movs	r1, #1
 8002d12:	4804      	ldr	r0, [pc, #16]	; (8002d24 <Motor_robotForward+0x20>)
 8002d14:	f7fe fba1 	bl	800145a <DRV8825_setDir>
    return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000480 	.word	0x20000480
 8002d24:	20000468 	.word	0x20000468

08002d28 <Motor_robotRotLeft>:
    DRV8825_setDir(&moteur_G, BACKWARD);
    DRV8825_setDir(&moteur_D, BACKWARD);
    return 0;
}

uint8_t Motor_robotRotLeft(){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
    DRV8825_setDir(&moteur_G, FORWARD);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <Motor_robotRotLeft+0x1c>)
 8002d30:	f7fe fb93 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, BACKWARD);
 8002d34:	2100      	movs	r1, #0
 8002d36:	4804      	ldr	r0, [pc, #16]	; (8002d48 <Motor_robotRotLeft+0x20>)
 8002d38:	f7fe fb8f 	bl	800145a <DRV8825_setDir>
    return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000480 	.word	0x20000480
 8002d48:	20000468 	.word	0x20000468

08002d4c <Motor_robotRotRight>:

uint8_t Motor_robotRotRight(){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
    DRV8825_setDir(&moteur_G, BACKWARD);
 8002d50:	2100      	movs	r1, #0
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <Motor_robotRotRight+0x1c>)
 8002d54:	f7fe fb81 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, FORWARD);
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4804      	ldr	r0, [pc, #16]	; (8002d6c <Motor_robotRotRight+0x20>)
 8002d5c:	f7fe fb7d 	bl	800145a <DRV8825_setDir>
    return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000480 	.word	0x20000480
 8002d6c:	20000468 	.word	0x20000468

08002d70 <getTickRight>:
#include <odometrie.h>

int16_t getTickRight(){
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
	return (int16_t)(CODEUR_D.Instance->CNT);
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <getTickRight+0x18>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	b21b      	sxth	r3, r3
	//return (int16_t)(~CODEUR_D.Instance->CNT + 1);
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000660 	.word	0x20000660

08002d8c <getTickLeft>:

int16_t getTickLeft(){
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
	//return (int16_t)(CODEUR_G.Instance->CNT);
	return (int16_t)(~CODEUR_G.Instance->CNT + 1);
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <getTickLeft+0x1c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	425b      	negs	r3, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	b21b      	sxth	r3, r3
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	20000588 	.word	0x20000588

08002dac <resetTickRight>:

void resetTickRight(){
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
	CODEUR_D.Instance->CNT = 0;
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <resetTickRight+0x18>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000660 	.word	0x20000660

08002dc8 <resetTickLeft>:
void resetTickLeft(){
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
	CODEUR_G.Instance->CNT = 0;
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <resetTickLeft+0x18>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000588 	.word	0x20000588
 8002de4:	00000000 	.word	0x00000000

08002de8 <ODO_odometrie>:

void ODO_odometrie(){
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
			"y : %lf \n\r"
			"o : %lf \n\n\r",g_x, g_y, g_angle);
#endif


	int valCodG = getTickLeft();
 8002dee:	f7ff ffcd 	bl	8002d8c <getTickLeft>
 8002df2:	4603      	mov	r3, r0
 8002df4:	607b      	str	r3, [r7, #4]
	int valCodD = getTickRight();
 8002df6:	f7ff ffbb 	bl	8002d70 <getTickRight>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	603b      	str	r3, [r7, #0]

	dDistance =  (valCodG * COEFF_CODEUR_L + valCodD*COEFF_CODEUR_R)/2;
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fbb0 	bl	8000564 <__aeabi_i2d>
 8002e04:	a36a      	add	r3, pc, #424	; (adr r3, 8002fb0 <ODO_odometrie+0x1c8>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fc15 	bl	8000638 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4614      	mov	r4, r2
 8002e14:	461d      	mov	r5, r3
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f7fd fba4 	bl	8000564 <__aeabi_i2d>
 8002e1c:	a362      	add	r3, pc, #392	; (adr r3, 8002fa8 <ODO_odometrie+0x1c0>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fc09 	bl	8000638 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fa4d 	bl	80002cc <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e42:	f7fd fd23 	bl	800088c <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4963      	ldr	r1, [pc, #396]	; (8002fd8 <ODO_odometrie+0x1f0>)
 8002e4c:	e9c1 2300 	strd	r2, r3, [r1]
	dAngle = (valCodD*COEFF_CODEUR_R - valCodG*COEFF_CODEUR_L)/ENTRAXE;
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	f7fd fb87 	bl	8000564 <__aeabi_i2d>
 8002e56:	a354      	add	r3, pc, #336	; (adr r3, 8002fa8 <ODO_odometrie+0x1c0>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fbec 	bl	8000638 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fb7b 	bl	8000564 <__aeabi_i2d>
 8002e6e:	a350      	add	r3, pc, #320	; (adr r3, 8002fb0 <ODO_odometrie+0x1c8>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbe0 	bl	8000638 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd fa22 	bl	80002c8 <__aeabi_dsub>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	a34a      	add	r3, pc, #296	; (adr r3, 8002fb8 <ODO_odometrie+0x1d0>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fcfb 	bl	800088c <__aeabi_ddiv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4950      	ldr	r1, [pc, #320]	; (8002fdc <ODO_odometrie+0x1f4>)
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]

	g_x += dDistance * cos(g_angle);
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002ea2:	ed93 7b00 	vldr	d7, [r3]
 8002ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eaa:	eef0 0a67 	vmov.f32	s1, s15
 8002eae:	f007 fe5f 	bl	800ab70 <cos>
 8002eb2:	ec51 0b10 	vmov	r0, r1, d0
 8002eb6:	4b48      	ldr	r3, [pc, #288]	; (8002fd8 <ODO_odometrie+0x1f0>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fbbc 	bl	8000638 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <ODO_odometrie+0x1fc>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f7fd f9fd 	bl	80002cc <__adddf3>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4943      	ldr	r1, [pc, #268]	; (8002fe4 <ODO_odometrie+0x1fc>)
 8002ed8:	e9c1 2300 	strd	r2, r3, [r1]
	g_y += dDistance * sin(g_angle);
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002ede:	ed93 7b00 	vldr	d7, [r3]
 8002ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ee6:	eef0 0a67 	vmov.f32	s1, s15
 8002eea:	f007 fe9d 	bl	800ac28 <sin>
 8002eee:	ec51 0b10 	vmov	r0, r1, d0
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <ODO_odometrie+0x1f0>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fb9e 	bl	8000638 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <ODO_odometrie+0x200>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd f9df 	bl	80002cc <__adddf3>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4935      	ldr	r1, [pc, #212]	; (8002fe8 <ODO_odometrie+0x200>)
 8002f14:	e9c1 2300 	strd	r2, r3, [r1]
	g_angle += dAngle;
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <ODO_odometrie+0x1f4>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd f9d2 	bl	80002cc <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	492c      	ldr	r1, [pc, #176]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f2e:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle > M_PI)
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f38:	a321      	add	r3, pc, #132	; (adr r3, 8002fc0 <ODO_odometrie+0x1d8>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd fe0b 	bl	8000b58 <__aeabi_dcmpgt>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <ODO_odometrie+0x17a>
		g_angle = g_angle - (M_PI * 2.0f);
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4e:	a31e      	add	r3, pc, #120	; (adr r3, 8002fc8 <ODO_odometrie+0x1e0>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd f9b8 	bl	80002c8 <__aeabi_dsub>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4920      	ldr	r1, [pc, #128]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f5e:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle < (-1) * M_PI)
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f68:	a319      	add	r3, pc, #100	; (adr r3, 8002fd0 <ODO_odometrie+0x1e8>)
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f7fd fdd5 	bl	8000b1c <__aeabi_dcmplt>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00c      	beq.n	8002f92 <ODO_odometrie+0x1aa>
		g_angle = g_angle + (M_PI * 2.0f);
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7e:	a312      	add	r3, pc, #72	; (adr r3, 8002fc8 <ODO_odometrie+0x1e0>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f7fd f9a2 	bl	80002cc <__adddf3>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4914      	ldr	r1, [pc, #80]	; (8002fe0 <ODO_odometrie+0x1f8>)
 8002f8e:	e9c1 2300 	strd	r2, r3, [r1]

	resetTickRight();
 8002f92:	f7ff ff0b 	bl	8002dac <resetTickRight>
	resetTickLeft();
 8002f96:	f7ff ff17 	bl	8002dc8 <resetTickLeft>

}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	0f6c27c8 	.word	0x0f6c27c8
 8002fac:	3fa4ad97 	.word	0x3fa4ad97
 8002fb0:	0fa743d0 	.word	0x0fa743d0
 8002fb4:	3fa4c5ef 	.word	0x3fa4c5ef
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	406f6000 	.word	0x406f6000
 8002fc0:	54442d18 	.word	0x54442d18
 8002fc4:	400921fb 	.word	0x400921fb
 8002fc8:	54442d18 	.word	0x54442d18
 8002fcc:	401921fb 	.word	0x401921fb
 8002fd0:	54442d18 	.word	0x54442d18
 8002fd4:	c00921fb 	.word	0xc00921fb
 8002fd8:	200004a8 	.word	0x200004a8
 8002fdc:	20000460 	.word	0x20000460
 8002fe0:	20000458 	.word	0x20000458
 8002fe4:	20000450 	.word	0x20000450
 8002fe8:	200004a0 	.word	0x200004a0

08002fec <ODO_setX>:

void ODO_setX(double x){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	ed87 0b00 	vstr	d0, [r7]
	g_x =x;
 8002ff6:	4905      	ldr	r1, [pc, #20]	; (800300c <ODO_setX+0x20>)
 8002ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ffc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20000450 	.word	0x20000450

08003010 <ODO_setY>:

void ODO_setY(double y){
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0b00 	vstr	d0, [r7]
	g_y = y;
 800301a:	4905      	ldr	r1, [pc, #20]	; (8003030 <ODO_setY+0x20>)
 800301c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200004a0 	.word	0x200004a0

08003034 <ODO_setAngle>:
void ODO_setPosition(double x, double y){
	g_x = x;g_y = y;
}
void ODO_setAngle(double angle){
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	ed87 0b00 	vstr	d0, [r7]
	g_angle = angle;
 800303e:	4905      	ldr	r1, [pc, #20]	; (8003054 <ODO_setAngle+0x20>)
 8003040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003044:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	20000458 	.word	0x20000458

08003058 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003060:	4a07      	ldr	r2, [pc, #28]	; (8003080 <RetargetInit+0x28>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <RetargetInit+0x2c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6898      	ldr	r0, [r3, #8]
 800306c:	2300      	movs	r3, #0
 800306e:	2202      	movs	r2, #2
 8003070:	2100      	movs	r1, #0
 8003072:	f005 fa9f 	bl	80085b4 <setvbuf>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200004f4 	.word	0x200004f4
 8003084:	200000d4 	.word	0x200000d4

08003088 <_isatty>:

int _isatty(int fd) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db04      	blt.n	80030a0 <_isatty+0x18>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b02      	cmp	r3, #2
 800309a:	dc01      	bgt.n	80030a0 <_isatty+0x18>
    return 1;
 800309c:	2301      	movs	r3, #1
 800309e:	e005      	b.n	80030ac <_isatty+0x24>

  errno = EBADF;
 80030a0:	f004 fd5e 	bl	8007b60 <__errno>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2209      	movs	r2, #9
 80030a8:	601a      	str	r2, [r3, #0]
  return 0;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_write>:

int _write(int fd, char* ptr, int len) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d002      	beq.n	80030cc <_write+0x18>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d111      	bne.n	80030f0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <_write+0x54>)
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	f003 fe84 	bl	8006de6 <HAL_UART_Transmit>
 80030de:	4603      	mov	r3, r0
 80030e0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <_write+0x38>
      return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	e008      	b.n	80030fe <_write+0x4a>
    else
      return EIO;
 80030ec:	2305      	movs	r3, #5
 80030ee:	e006      	b.n	80030fe <_write+0x4a>
  }
  errno = EBADF;
 80030f0:	f004 fd36 	bl	8007b60 <__errno>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2209      	movs	r2, #9
 80030f8:	601a      	str	r2, [r3, #0]
  return -1;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200004f4 	.word	0x200004f4

0800310c <_close>:

int _close(int fd) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db04      	blt.n	8003124 <_close+0x18>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b02      	cmp	r3, #2
 800311e:	dc01      	bgt.n	8003124 <_close+0x18>
    return 0;
 8003120:	2300      	movs	r3, #0
 8003122:	e006      	b.n	8003132 <_close+0x26>

  errno = EBADF;
 8003124:	f004 fd1c 	bl	8007b60 <__errno>
 8003128:	4603      	mov	r3, r0
 800312a:	2209      	movs	r2, #9
 800312c:	601a      	str	r2, [r3, #0]
  return -1;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003146:	f004 fd0b 	bl	8007b60 <__errno>
 800314a:	4603      	mov	r3, r0
 800314c:	2209      	movs	r2, #9
 800314e:	601a      	str	r2, [r3, #0]
  return -1;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_read>:

int _read(int fd, char* ptr, int len) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d110      	bne.n	8003190 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <_read+0x4c>)
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	2201      	movs	r2, #1
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	f003 fec6 	bl	8006f0a <HAL_UART_Receive>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <_read+0x30>
      return 1;
 8003188:	2301      	movs	r3, #1
 800318a:	e008      	b.n	800319e <_read+0x42>
    else
      return EIO;
 800318c:	2305      	movs	r3, #5
 800318e:	e006      	b.n	800319e <_read+0x42>
  }
  errno = EBADF;
 8003190:	f004 fce6 	bl	8007b60 <__errno>
 8003194:	4603      	mov	r3, r0
 8003196:	2209      	movs	r2, #9
 8003198:	601a      	str	r2, [r3, #0]
  return -1;
 800319a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200004f4 	.word	0x200004f4

080031ac <_fstat>:

int _fstat(int fd, struct stat* st) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db08      	blt.n	80031ce <_fstat+0x22>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	dc05      	bgt.n	80031ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c8:	605a      	str	r2, [r3, #4]
    return 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e005      	b.n	80031da <_fstat+0x2e>
  }

  errno = EBADF;
 80031ce:	f004 fcc7 	bl	8007b60 <__errno>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2209      	movs	r2, #9
 80031d6:	601a      	str	r2, [r3, #0]
  return 0;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_MspInit+0x4c>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_MspInit+0x4c>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_MspInit+0x4c>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_MspInit+0x4c>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <HAL_MspInit+0x4c>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800

08003234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
#if DEBUG_G == 1 && DEBUG_FAULT
	printf("Bug !");
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003246:	e7fe      	b.n	8003246 <HardFault_Handler+0x4>

08003248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800324c:	e7fe      	b.n	800324c <MemManage_Handler+0x4>

0800324e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003252:	e7fe      	b.n	8003252 <BusFault_Handler+0x4>

08003254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <UsageFault_Handler+0x4>

0800325a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003288:	f000 ffb4 	bl	80041f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003294:	2002      	movs	r0, #2
 8003296:	f001 fdcd 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <TIM2_IRQHandler+0x10>)
 80032a6:	f002 fead 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200006a8 	.word	0x200006a8

080032b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <TIM4_IRQHandler+0x10>)
 80032ba:	f002 fea3 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000540 	.word	0x20000540

080032c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <USART2_IRQHandler+0x10>)
 80032ce:	f003 feef 	bl	80070b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000848 	.word	0x20000848

080032dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80032e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032e4:	f001 fda6 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80032e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032ec:	f001 fda2 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80032f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80032f4:	f001 fd9e 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <UART4_IRQHandler+0x10>)
 8003302:	f003 fed5 	bl	80070b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000804 	.word	0x20000804

08003310 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <UART5_IRQHandler+0x10>)
 8003316:	f003 fecb 	bl	80070b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000077c 	.word	0x2000077c

08003324 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <TIM6_DAC_IRQHandler+0x10>)
 800332a:	f002 fe6b 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000618 	.word	0x20000618

08003338 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <TIM7_IRQHandler+0x10>)
 800333e:	f002 fe61 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200006f0 	.word	0x200006f0

0800334c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <_sbrk+0x50>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_sbrk+0x16>
		heap_end = &end;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <_sbrk+0x50>)
 800335e:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <_sbrk+0x54>)
 8003360:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <_sbrk+0x50>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <_sbrk+0x50>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	466a      	mov	r2, sp
 8003372:	4293      	cmp	r3, r2
 8003374:	d907      	bls.n	8003386 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003376:	f004 fbf3 	bl	8007b60 <__errno>
 800337a:	4603      	mov	r3, r0
 800337c:	220c      	movs	r2, #12
 800337e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
 8003384:	e006      	b.n	8003394 <_sbrk+0x48>
	}

	heap_end += incr;
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <_sbrk+0x50>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	4a03      	ldr	r2, [pc, #12]	; (800339c <_sbrk+0x50>)
 8003390:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200002dc 	.word	0x200002dc
 80033a0:	200008a0 	.word	0x200008a0

080033a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <SystemInit+0x28>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <SystemInit+0x28>)
 80033b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <SystemInit+0x28>)
 80033ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033be:	609a      	str	r2, [r3, #8]
#endif
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08c      	sub	sp, #48	; 0x30
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fbe8 	bl	8007bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <MX_TIM1_Init+0xa8>)
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <MX_TIM1_Init+0xac>)
 80033f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <MX_TIM1_Init+0xa8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f8:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <MX_TIM1_Init+0xa8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <MX_TIM1_Init+0xa8>)
 8003400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <MX_TIM1_Init+0xa8>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_TIM1_Init+0xa8>)
 800340e:	2200      	movs	r2, #0
 8003410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <MX_TIM1_Init+0xa8>)
 8003414:	2200      	movs	r2, #0
 8003416:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003418:	2303      	movs	r3, #3
 800341a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003420:	2301      	movs	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003428:	230a      	movs	r3, #10
 800342a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	4619      	mov	r1, r3
 8003442:	480d      	ldr	r0, [pc, #52]	; (8003478 <MX_TIM1_Init+0xa8>)
 8003444:	f002 fcaa 	bl	8005d9c <HAL_TIM_Encoder_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800344e:	f7ff fb97 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4806      	ldr	r0, [pc, #24]	; (8003478 <MX_TIM1_Init+0xa8>)
 8003460:	f003 fb92 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800346a:	f7ff fb89 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	3730      	adds	r7, #48	; 0x30
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000660 	.word	0x20000660
 800347c:	40010000 	.word	0x40010000

08003480 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003494:	463b      	mov	r3, r7
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800349c:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <MX_TIM2_Init+0x98>)
 800349e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <MX_TIM2_Init+0x98>)
 80034a6:	f640 227e 	movw	r2, #2686	; 0xa7e
 80034aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <MX_TIM2_Init+0x98>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <MX_TIM2_Init+0x98>)
 80034b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <MX_TIM2_Init+0x98>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <MX_TIM2_Init+0x98>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034c6:	4814      	ldr	r0, [pc, #80]	; (8003518 <MX_TIM2_Init+0x98>)
 80034c8:	f002 fa86 	bl	80059d8 <HAL_TIM_Base_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80034d2:	f7ff fb55 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034dc:	f107 0308 	add.w	r3, r7, #8
 80034e0:	4619      	mov	r1, r3
 80034e2:	480d      	ldr	r0, [pc, #52]	; (8003518 <MX_TIM2_Init+0x98>)
 80034e4:	f002 ff54 	bl	8006390 <HAL_TIM_ConfigClockSource>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80034ee:	f7ff fb47 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034fa:	463b      	mov	r3, r7
 80034fc:	4619      	mov	r1, r3
 80034fe:	4806      	ldr	r0, [pc, #24]	; (8003518 <MX_TIM2_Init+0x98>)
 8003500:	f003 fb42 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800350a:	f7ff fb39 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200006a8 	.word	0x200006a8

0800351c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003522:	f107 030c 	add.w	r3, r7, #12
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f004 fb42 	bl	8007bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <MX_TIM3_Init+0xa0>)
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <MX_TIM3_Init+0xa4>)
 800353c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800353e:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <MX_TIM3_Init+0xa0>)
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <MX_TIM3_Init+0xa0>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <MX_TIM3_Init+0xa0>)
 800354c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003550:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <MX_TIM3_Init+0xa0>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <MX_TIM3_Init+0xa0>)
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800355e:	2303      	movs	r3, #3
 8003560:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003566:	2301      	movs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003576:	2301      	movs	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800357a:	2300      	movs	r3, #0
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	4619      	mov	r1, r3
 8003588:	480c      	ldr	r0, [pc, #48]	; (80035bc <MX_TIM3_Init+0xa0>)
 800358a:	f002 fc07 	bl	8005d9c <HAL_TIM_Encoder_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003594:	f7ff faf4 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003598:	2300      	movs	r3, #0
 800359a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4805      	ldr	r0, [pc, #20]	; (80035bc <MX_TIM3_Init+0xa0>)
 80035a6:	f003 faef 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80035b0:	f7ff fae6 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035b4:	bf00      	nop
 80035b6:	3730      	adds	r7, #48	; 0x30
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000588 	.word	0x20000588
 80035c0:	40000400 	.word	0x40000400

080035c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d8:	463b      	mov	r3, r7
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <MX_TIM4_Init+0x90>)
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <MX_TIM4_Init+0x94>)
 80035e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <MX_TIM4_Init+0x90>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <MX_TIM4_Init+0x90>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <MX_TIM4_Init+0x90>)
 80035f4:	225a      	movs	r2, #90	; 0x5a
 80035f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <MX_TIM4_Init+0x90>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <MX_TIM4_Init+0x90>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003604:	4813      	ldr	r0, [pc, #76]	; (8003654 <MX_TIM4_Init+0x90>)
 8003606:	f002 f9e7 	bl	80059d8 <HAL_TIM_Base_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003610:	f7ff fab6 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4619      	mov	r1, r3
 8003620:	480c      	ldr	r0, [pc, #48]	; (8003654 <MX_TIM4_Init+0x90>)
 8003622:	f002 feb5 	bl	8006390 <HAL_TIM_ConfigClockSource>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800362c:	f7ff faa8 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003630:	2300      	movs	r3, #0
 8003632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003638:	463b      	mov	r3, r7
 800363a:	4619      	mov	r1, r3
 800363c:	4805      	ldr	r0, [pc, #20]	; (8003654 <MX_TIM4_Init+0x90>)
 800363e:	f003 faa3 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003648:	f7ff fa9a 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000540 	.word	0x20000540
 8003658:	40000800 	.word	0x40000800

0800365c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003662:	463b      	mov	r3, r7
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <MX_TIM6_Init+0x64>)
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <MX_TIM6_Init+0x68>)
 800366e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <MX_TIM6_Init+0x64>)
 8003672:	f242 3227 	movw	r2, #8999	; 0x2327
 8003676:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <MX_TIM6_Init+0x64>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <MX_TIM6_Init+0x64>)
 8003680:	2263      	movs	r2, #99	; 0x63
 8003682:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <MX_TIM6_Init+0x64>)
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800368a:	480d      	ldr	r0, [pc, #52]	; (80036c0 <MX_TIM6_Init+0x64>)
 800368c:	f002 f9a4 	bl	80059d8 <HAL_TIM_Base_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003696:	f7ff fa73 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036a2:	463b      	mov	r3, r7
 80036a4:	4619      	mov	r1, r3
 80036a6:	4806      	ldr	r0, [pc, #24]	; (80036c0 <MX_TIM6_Init+0x64>)
 80036a8:	f003 fa6e 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80036b2:	f7ff fa65 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000618 	.word	0x20000618
 80036c4:	40001000 	.word	0x40001000

080036c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ce:	463b      	mov	r3, r7
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <MX_TIM7_Init+0x64>)
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <MX_TIM7_Init+0x68>)
 80036da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 80036dc:	4b13      	ldr	r3, [pc, #76]	; (800372c <MX_TIM7_Init+0x64>)
 80036de:	f242 3227 	movw	r2, #8999	; 0x2327
 80036e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <MX_TIM7_Init+0x64>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <MX_TIM7_Init+0x64>)
 80036ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80036f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <MX_TIM7_Init+0x64>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <MX_TIM7_Init+0x64>)
 80036fa:	f002 f96d 	bl	80059d8 <HAL_TIM_Base_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003704:	f7ff fa3c 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003710:	463b      	mov	r3, r7
 8003712:	4619      	mov	r1, r3
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <MX_TIM7_Init+0x64>)
 8003716:	f003 fa37 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003720:	f7ff fa2e 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200006f0 	.word	0x200006f0
 8003730:	40001400 	.word	0x40001400

08003734 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b096      	sub	sp, #88	; 0x58
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	611a      	str	r2, [r3, #16]
 8003762:	615a      	str	r2, [r3, #20]
 8003764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2220      	movs	r2, #32
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f004 fa21 	bl	8007bb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <MX_TIM8_Init+0x138>)
 8003774:	4a3e      	ldr	r2, [pc, #248]	; (8003870 <MX_TIM8_Init+0x13c>)
 8003776:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8003778:	4b3c      	ldr	r3, [pc, #240]	; (800386c <MX_TIM8_Init+0x138>)
 800377a:	22b3      	movs	r2, #179	; 0xb3
 800377c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <MX_TIM8_Init+0x138>)
 8003780:	2200      	movs	r2, #0
 8003782:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8003784:	4b39      	ldr	r3, [pc, #228]	; (800386c <MX_TIM8_Init+0x138>)
 8003786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800378a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800378c:	4b37      	ldr	r3, [pc, #220]	; (800386c <MX_TIM8_Init+0x138>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <MX_TIM8_Init+0x138>)
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <MX_TIM8_Init+0x138>)
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800379e:	4833      	ldr	r0, [pc, #204]	; (800386c <MX_TIM8_Init+0x138>)
 80037a0:	f002 f91a 	bl	80059d8 <HAL_TIM_Base_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80037aa:	f7ff f9e9 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80037b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037b8:	4619      	mov	r1, r3
 80037ba:	482c      	ldr	r0, [pc, #176]	; (800386c <MX_TIM8_Init+0x138>)
 80037bc:	f002 fde8 	bl	8006390 <HAL_TIM_ConfigClockSource>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80037c6:	f7ff f9db 	bl	8002b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80037ca:	4828      	ldr	r0, [pc, #160]	; (800386c <MX_TIM8_Init+0x138>)
 80037cc:	f002 f9c4 	bl	8005b58 <HAL_TIM_PWM_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80037d6:	f7ff f9d3 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80037e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e6:	4619      	mov	r1, r3
 80037e8:	4820      	ldr	r0, [pc, #128]	; (800386c <MX_TIM8_Init+0x138>)
 80037ea:	f003 f9cd 	bl	8006b88 <HAL_TIMEx_MasterConfigSynchronization>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80037f4:	f7ff f9c4 	bl	8002b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037f8:	2360      	movs	r3, #96	; 0x60
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80037fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003802:	2300      	movs	r3, #0
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003816:	220c      	movs	r2, #12
 8003818:	4619      	mov	r1, r3
 800381a:	4814      	ldr	r0, [pc, #80]	; (800386c <MX_TIM8_Init+0x138>)
 800381c:	f002 fcfa 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003826:	f7ff f9ab 	bl	8002b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800383e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4807      	ldr	r0, [pc, #28]	; (800386c <MX_TIM8_Init+0x138>)
 800384e:	f003 fa17 	bl	8006c80 <HAL_TIMEx_ConfigBreakDeadTime>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003858:	f7ff f992 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800385c:	4803      	ldr	r0, [pc, #12]	; (800386c <MX_TIM8_Init+0x138>)
 800385e:	f000 f97f 	bl	8003b60 <HAL_TIM_MspPostInit>

}
 8003862:	bf00      	nop
 8003864:	3758      	adds	r7, #88	; 0x58
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200004f8 	.word	0x200004f8
 8003870:	40010400 	.word	0x40010400

08003874 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
 8003888:	615a      	str	r2, [r3, #20]
 800388a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <MX_TIM11_Init+0x94>)
 800388e:	4a1f      	ldr	r2, [pc, #124]	; (800390c <MX_TIM11_Init+0x98>)
 8003890:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <MX_TIM11_Init+0x94>)
 8003894:	22b3      	movs	r2, #179	; 0xb3
 8003896:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <MX_TIM11_Init+0x94>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <MX_TIM11_Init+0x94>)
 80038a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <MX_TIM11_Init+0x94>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_TIM11_Init+0x94>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80038b2:	4815      	ldr	r0, [pc, #84]	; (8003908 <MX_TIM11_Init+0x94>)
 80038b4:	f002 f890 	bl	80059d8 <HAL_TIM_Base_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80038be:	f7ff f95f 	bl	8002b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80038c2:	4811      	ldr	r0, [pc, #68]	; (8003908 <MX_TIM11_Init+0x94>)
 80038c4:	f002 f948 	bl	8005b58 <HAL_TIM_PWM_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80038ce:	f7ff f957 	bl	8002b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d2:	2360      	movs	r3, #96	; 0x60
 80038d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2200      	movs	r2, #0
 80038e6:	4619      	mov	r1, r3
 80038e8:	4807      	ldr	r0, [pc, #28]	; (8003908 <MX_TIM11_Init+0x94>)
 80038ea:	f002 fc93 	bl	8006214 <HAL_TIM_PWM_ConfigChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80038f4:	f7ff f944 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80038f8:	4803      	ldr	r0, [pc, #12]	; (8003908 <MX_TIM11_Init+0x94>)
 80038fa:	f000 f931 	bl	8003b60 <HAL_TIM_MspPostInit>

}
 80038fe:	bf00      	nop
 8003900:	3720      	adds	r7, #32
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200005d0 	.word	0x200005d0
 800390c:	40014800 	.word	0x40014800

08003910 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08c      	sub	sp, #48	; 0x30
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12d      	bne.n	800398e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	4a30      	ldr	r2, [pc, #192]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6453      	str	r3, [r2, #68]	; 0x44
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a29      	ldr	r2, [pc, #164]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800396a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800396e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800397c:	2301      	movs	r3, #1
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	4619      	mov	r1, r3
 8003986:	481e      	ldr	r0, [pc, #120]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003988:	f001 f88e 	bl	8004aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800398c:	e030      	b.n	80039f0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d12b      	bne.n	80039f0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	6413      	str	r3, [r2, #64]	; 0x40
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6313      	str	r3, [r2, #48]	; 0x30
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_TIM_Encoder_MspInit+0xec>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039d0:	23c0      	movs	r3, #192	; 0xc0
 80039d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039e0:	2302      	movs	r3, #2
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 031c 	add.w	r3, r7, #28
 80039e8:	4619      	mov	r1, r3
 80039ea:	4805      	ldr	r0, [pc, #20]	; (8003a00 <HAL_TIM_Encoder_MspInit+0xf0>)
 80039ec:	f001 f85c 	bl	8004aa8 <HAL_GPIO_Init>
}
 80039f0:	bf00      	nop
 80039f2:	3730      	adds	r7, #48	; 0x30
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40000400 	.word	0x40000400

08003a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d116      	bne.n	8003a48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	4a49      	ldr	r2, [pc, #292]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	201c      	movs	r0, #28
 8003a3c:	f000 ff6b 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a40:	201c      	movs	r0, #28
 8003a42:	f000 ff84 	bl	800494e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a46:	e07a      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3f      	ldr	r2, [pc, #252]	; (8003b4c <HAL_TIM_Base_MspInit+0x144>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d116      	bne.n	8003a80 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a3b      	ldr	r2, [pc, #236]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	201e      	movs	r0, #30
 8003a74:	f000 ff4f 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a78:	201e      	movs	r0, #30
 8003a7a:	f000 ff68 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 8003a7e:	e05e      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM6)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a32      	ldr	r2, [pc, #200]	; (8003b50 <HAL_TIM_Base_MspInit+0x148>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d116      	bne.n	8003ab8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	2036      	movs	r0, #54	; 0x36
 8003aac:	f000 ff33 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ab0:	2036      	movs	r0, #54	; 0x36
 8003ab2:	f000 ff4c 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 8003ab6:	e042      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <HAL_TIM_Base_MspInit+0x14c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d116      	bne.n	8003af0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003acc:	f043 0320 	orr.w	r3, r3, #32
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	2037      	movs	r0, #55	; 0x37
 8003ae4:	f000 ff17 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ae8:	2037      	movs	r0, #55	; 0x37
 8003aea:	f000 ff30 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 8003aee:	e026      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM8)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_TIM_Base_MspInit+0x150>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	e012      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <HAL_TIM_Base_MspInit+0x154>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10d      	bne.n	8003b3e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b30:	6453      	str	r3, [r2, #68]	; 0x44
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_TIM_Base_MspInit+0x140>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
}
 8003b3e:	bf00      	nop
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40001000 	.word	0x40001000
 8003b54:	40001400 	.word	0x40001400
 8003b58:	40010400 	.word	0x40010400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_TIM_MspPostInit+0xb4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d11f      	bne.n	8003bc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_TIM_MspPostInit+0xb8>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <HAL_TIM_MspPostInit+0xb8>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_TIM_MspPostInit+0xb8>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4818      	ldr	r0, [pc, #96]	; (8003c1c <HAL_TIM_MspPostInit+0xbc>)
 8003bbc:	f000 ff74 	bl	8004aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003bc0:	e023      	b.n	8003c0a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_TIM_MspPostInit+0xc0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d11e      	bne.n	8003c0a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_TIM_MspPostInit+0xb8>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <HAL_TIM_MspPostInit+0xb8>)
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	6313      	str	r3, [r2, #48]	; 0x30
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_TIM_MspPostInit+0xb8>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 0314 	add.w	r3, r7, #20
 8003c02:	4619      	mov	r1, r3
 8003c04:	4807      	ldr	r0, [pc, #28]	; (8003c24 <HAL_TIM_MspPostInit+0xc4>)
 8003c06:	f000 ff4f 	bl	8004aa8 <HAL_GPIO_Init>
}
 8003c0a:	bf00      	nop
 8003c0c:	3728      	adds	r7, #40	; 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40010400 	.word	0x40010400
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40014800 	.word	0x40014800
 8003c24:	40020400 	.word	0x40020400

08003c28 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <MX_UART4_Init+0x50>)
 8003c30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c4e:	220c      	movs	r2, #12
 8003c50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003c5e:	4805      	ldr	r0, [pc, #20]	; (8003c74 <MX_UART4_Init+0x4c>)
 8003c60:	f003 f874 	bl	8006d4c <HAL_UART_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003c6a:	f7fe ff89 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000804 	.word	0x20000804
 8003c78:	40004c00 	.word	0x40004c00

08003c7c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <MX_UART5_Init+0x50>)
 8003c84:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c8c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <MX_UART5_Init+0x4c>)
 8003cb4:	f003 f84a 	bl	8006d4c <HAL_UART_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003cbe:	f7fe ff5f 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000077c 	.word	0x2000077c
 8003ccc:	40005000 	.word	0x40005000

08003cd0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <MX_USART1_UART_Init+0x50>)
 8003cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <MX_USART1_UART_Init+0x4c>)
 8003d08:	f003 f820 	bl	8006d4c <HAL_UART_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d12:	f7fe ff35 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200007c0 	.word	0x200007c0
 8003d20:	40011000 	.word	0x40011000

08003d24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <MX_USART2_UART_Init+0x50>)
 8003d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <MX_USART2_UART_Init+0x4c>)
 8003d5c:	f002 fff6 	bl	8006d4c <HAL_UART_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d66:	f7fe ff0b 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000848 	.word	0x20000848
 8003d74:	40004400 	.word	0x40004400

08003d78 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d7c:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003d7e:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <MX_USART3_UART_Init+0x4c>)
 8003d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003d84:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <MX_USART3_UART_Init+0x50>)
 8003d86:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003dac:	4804      	ldr	r0, [pc, #16]	; (8003dc0 <MX_USART3_UART_Init+0x48>)
 8003dae:	f002 ffcd 	bl	8006d4c <HAL_UART_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003db8:	f7fe fee2 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000738 	.word	0x20000738
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	0003d090 	.word	0x0003d090

08003dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b094      	sub	sp, #80	; 0x50
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a8d      	ldr	r2, [pc, #564]	; (8004020 <HAL_UART_MspInit+0x254>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d134      	bne.n	8003e58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df2:	4b8c      	ldr	r3, [pc, #560]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a8b      	ldr	r2, [pc, #556]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b89      	ldr	r3, [pc, #548]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	4b85      	ldr	r3, [pc, #532]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a84      	ldr	r2, [pc, #528]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b82      	ldr	r3, [pc, #520]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e26:	2303      	movs	r3, #3
 8003e28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e32:	2303      	movs	r3, #3
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003e36:	2308      	movs	r3, #8
 8003e38:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4879      	ldr	r0, [pc, #484]	; (8004028 <HAL_UART_MspInit+0x25c>)
 8003e42:	f000 fe31 	bl	8004aa8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	2034      	movs	r0, #52	; 0x34
 8003e4c:	f000 fd63 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e50:	2034      	movs	r0, #52	; 0x34
 8003e52:	f000 fd7c 	bl	800494e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003e56:	e145      	b.n	80040e4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART5)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a73      	ldr	r2, [pc, #460]	; (800402c <HAL_UART_MspInit+0x260>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d153      	bne.n	8003f0a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a6e      	ldr	r2, [pc, #440]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b6c      	ldr	r3, [pc, #432]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e82:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a67      	ldr	r2, [pc, #412]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	4a60      	ldr	r2, [pc, #384]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003ea4:	f043 0308 	orr.w	r3, r3, #8
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ec8:	2308      	movs	r3, #8
 8003eca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ecc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4857      	ldr	r0, [pc, #348]	; (8004030 <HAL_UART_MspInit+0x264>)
 8003ed4:	f000 fde8 	bl	8004aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003ee8:	2308      	movs	r3, #8
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4850      	ldr	r0, [pc, #320]	; (8004034 <HAL_UART_MspInit+0x268>)
 8003ef4:	f000 fdd8 	bl	8004aa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2100      	movs	r1, #0
 8003efc:	2035      	movs	r0, #53	; 0x35
 8003efe:	f000 fd0a 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003f02:	2035      	movs	r0, #53	; 0x35
 8003f04:	f000 fd23 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 8003f08:	e0ec      	b.n	80040e4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <HAL_UART_MspInit+0x26c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d14b      	bne.n	8003fac <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	4a41      	ldr	r2, [pc, #260]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f1e:	f043 0310 	orr.w	r3, r3, #16
 8003f22:	6453      	str	r3, [r2, #68]	; 0x44
 8003f24:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a3a      	ldr	r2, [pc, #232]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f40:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	4b34      	ldr	r3, [pc, #208]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4a33      	ldr	r2, [pc, #204]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f56:	f043 0302 	orr.w	r3, r3, #2
 8003f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5c:	4b31      	ldr	r3, [pc, #196]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f7a:	2307      	movs	r3, #7
 8003f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f82:	4619      	mov	r1, r3
 8003f84:	4828      	ldr	r0, [pc, #160]	; (8004028 <HAL_UART_MspInit+0x25c>)
 8003f86:	f000 fd8f 	bl	8004aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f96:	2303      	movs	r3, #3
 8003f98:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f9a:	2307      	movs	r3, #7
 8003f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4825      	ldr	r0, [pc, #148]	; (800403c <HAL_UART_MspInit+0x270>)
 8003fa6:	f000 fd7f 	bl	8004aa8 <HAL_GPIO_Init>
}
 8003faa:	e09b      	b.n	80040e4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <HAL_UART_MspInit+0x274>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d146      	bne.n	8004044 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_UART_MspInit+0x258>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003fee:	230c      	movs	r3, #12
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ffe:	2307      	movs	r3, #7
 8004000:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004006:	4619      	mov	r1, r3
 8004008:	4807      	ldr	r0, [pc, #28]	; (8004028 <HAL_UART_MspInit+0x25c>)
 800400a:	f000 fd4d 	bl	8004aa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2105      	movs	r1, #5
 8004012:	2026      	movs	r0, #38	; 0x26
 8004014:	f000 fc7f 	bl	8004916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004018:	2026      	movs	r0, #38	; 0x26
 800401a:	f000 fc98 	bl	800494e <HAL_NVIC_EnableIRQ>
}
 800401e:	e061      	b.n	80040e4 <HAL_UART_MspInit+0x318>
 8004020:	40004c00 	.word	0x40004c00
 8004024:	40023800 	.word	0x40023800
 8004028:	40020000 	.word	0x40020000
 800402c:	40005000 	.word	0x40005000
 8004030:	40020800 	.word	0x40020800
 8004034:	40020c00 	.word	0x40020c00
 8004038:	40011000 	.word	0x40011000
 800403c:	40020400 	.word	0x40020400
 8004040:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_UART_MspInit+0x320>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d14a      	bne.n	80040e4 <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART3_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_UART_MspInit+0x324>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_UART_MspInit+0x324>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_UART_MspInit+0x324>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80040a2:	2320      	movs	r3, #32
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040b2:	2307      	movs	r3, #7
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040ba:	4619      	mov	r1, r3
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <HAL_UART_MspInit+0x328>)
 80040be:	f000 fcf3 	bl	8004aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040d4:	2307      	movs	r3, #7
 80040d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040dc:	4619      	mov	r1, r3
 80040de:	4806      	ldr	r0, [pc, #24]	; (80040f8 <HAL_UART_MspInit+0x32c>)
 80040e0:	f000 fce2 	bl	8004aa8 <HAL_GPIO_Init>
}
 80040e4:	bf00      	nop
 80040e6:	3750      	adds	r7, #80	; 0x50
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40004800 	.word	0x40004800
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40020800 	.word	0x40020800
 80040f8:	40020400 	.word	0x40020400

080040fc <Reset_Handler>:
 80040fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004134 <LoopFillZerobss+0x14>
 8004100:	2100      	movs	r1, #0
 8004102:	e003      	b.n	800410c <LoopCopyDataInit>

08004104 <CopyDataInit>:
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <LoopFillZerobss+0x18>)
 8004106:	585b      	ldr	r3, [r3, r1]
 8004108:	5043      	str	r3, [r0, r1]
 800410a:	3104      	adds	r1, #4

0800410c <LoopCopyDataInit>:
 800410c:	480b      	ldr	r0, [pc, #44]	; (800413c <LoopFillZerobss+0x1c>)
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <LoopFillZerobss+0x20>)
 8004110:	1842      	adds	r2, r0, r1
 8004112:	429a      	cmp	r2, r3
 8004114:	d3f6      	bcc.n	8004104 <CopyDataInit>
 8004116:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <LoopFillZerobss+0x24>)
 8004118:	e002      	b.n	8004120 <LoopFillZerobss>

0800411a <FillZerobss>:
 800411a:	2300      	movs	r3, #0
 800411c:	f842 3b04 	str.w	r3, [r2], #4

08004120 <LoopFillZerobss>:
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <LoopFillZerobss+0x28>)
 8004122:	429a      	cmp	r2, r3
 8004124:	d3f9      	bcc.n	800411a <FillZerobss>
 8004126:	f7ff f93d 	bl	80033a4 <SystemInit>
 800412a:	f003 fd1f 	bl	8007b6c <__libc_init_array>
 800412e:	f7fe f999 	bl	8002464 <main>
 8004132:	4770      	bx	lr
 8004134:	20020000 	.word	0x20020000
 8004138:	0800d708 	.word	0x0800d708
 800413c:	20000000 	.word	0x20000000
 8004140:	200002a8 	.word	0x200002a8
 8004144:	200002a8 	.word	0x200002a8
 8004148:	200008a0 	.word	0x200008a0

0800414c <ADC_IRQHandler>:
 800414c:	e7fe      	b.n	800414c <ADC_IRQHandler>
	...

08004150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_Init+0x40>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <HAL_Init+0x40>)
 800415a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_Init+0x40>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_Init+0x40>)
 8004166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_Init+0x40>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a07      	ldr	r2, [pc, #28]	; (8004190 <HAL_Init+0x40>)
 8004172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004178:	2003      	movs	r0, #3
 800417a:	f000 fbc1 	bl	8004900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800417e:	2000      	movs	r0, #0
 8004180:	f000 f808 	bl	8004194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004184:	f7ff f82e 	bl	80031e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023c00 	.word	0x40023c00

08004194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_InitTick+0x54>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_InitTick+0x58>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fbd9 	bl	800496a <HAL_SYSTICK_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e00e      	b.n	80041e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b0f      	cmp	r3, #15
 80041c6:	d80a      	bhi.n	80041de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041c8:	2200      	movs	r2, #0
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	f000 fba1 	bl	8004916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041d4:	4a06      	ldr	r2, [pc, #24]	; (80041f0 <HAL_InitTick+0x5c>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200000c8 	.word	0x200000c8
 80041ec:	200000d0 	.word	0x200000d0
 80041f0:	200000cc 	.word	0x200000cc

080041f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x20>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_IncTick+0x24>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4413      	add	r3, r2
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_IncTick+0x24>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	200000d0 	.word	0x200000d0
 8004218:	2000088c 	.word	0x2000088c

0800421c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return uwTick;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_GetTick+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	2000088c 	.word	0x2000088c

08004234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800423c:	f7ff ffee 	bl	800421c <HAL_GetTick>
 8004240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d005      	beq.n	800425a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_Delay+0x44>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800425a:	bf00      	nop
 800425c:	f7ff ffde 	bl	800421c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	429a      	cmp	r2, r3
 800426a:	d8f7      	bhi.n	800425c <HAL_Delay+0x28>
  {
  }
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200000d0 	.word	0x200000d0

0800427c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e033      	b.n	80042fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fd fba0 	bl	80019e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042c2:	f023 0302 	bic.w	r3, r3, #2
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f94a 	bl	8004568 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
 80042ea:	e001      	b.n	80042f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1c>
 800431c:	2302      	movs	r3, #2
 800431e:	e113      	b.n	8004548 <HAL_ADC_ConfigChannel+0x244>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b09      	cmp	r3, #9
 800432e:	d925      	bls.n	800437c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	3b1e      	subs	r3, #30
 8004346:	2207      	movs	r2, #7
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43da      	mvns	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	400a      	ands	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68d9      	ldr	r1, [r3, #12]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	4618      	mov	r0, r3
 8004368:	4603      	mov	r3, r0
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4403      	add	r3, r0
 800436e:	3b1e      	subs	r3, #30
 8004370:	409a      	lsls	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	e022      	b.n	80043c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	2207      	movs	r2, #7
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	400a      	ands	r2, r1
 800439e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4618      	mov	r0, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4403      	add	r3, r0
 80043b8:	409a      	lsls	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d824      	bhi.n	8004414 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	3b05      	subs	r3, #5
 80043dc:	221f      	movs	r2, #31
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	400a      	ands	r2, r1
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b05      	subs	r3, #5
 8004406:	fa00 f203 	lsl.w	r2, r0, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	635a      	str	r2, [r3, #52]	; 0x34
 8004412:	e04c      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d824      	bhi.n	8004466 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	3b23      	subs	r3, #35	; 0x23
 800442e:	221f      	movs	r2, #31
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43da      	mvns	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	400a      	ands	r2, r1
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	4618      	mov	r0, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	3b23      	subs	r3, #35	; 0x23
 8004458:	fa00 f203 	lsl.w	r2, r0, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
 8004464:	e023      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	3b41      	subs	r3, #65	; 0x41
 8004478:	221f      	movs	r2, #31
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	400a      	ands	r2, r1
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	4618      	mov	r0, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b41      	subs	r3, #65	; 0x41
 80044a2:	fa00 f203 	lsl.w	r2, r0, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_ADC_ConfigChannel+0x250>)
 80044b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <HAL_ADC_ConfigChannel+0x254>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10f      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1d8>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b12      	cmp	r3, #18
 80044c2:	d10b      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_ADC_ConfigChannel+0x254>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d12b      	bne.n	800453e <HAL_ADC_ConfigChannel+0x23a>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1c      	ldr	r2, [pc, #112]	; (800455c <HAL_ADC_ConfigChannel+0x258>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <HAL_ADC_ConfigChannel+0x1f4>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b11      	cmp	r3, #17
 80044f6:	d122      	bne.n	800453e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a11      	ldr	r2, [pc, #68]	; (800455c <HAL_ADC_ConfigChannel+0x258>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_ADC_ConfigChannel+0x25c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a11      	ldr	r2, [pc, #68]	; (8004564 <HAL_ADC_ConfigChannel+0x260>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	0c9a      	lsrs	r2, r3, #18
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004530:	e002      	b.n	8004538 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3b01      	subs	r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f9      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40012300 	.word	0x40012300
 8004558:	40012000 	.word	0x40012000
 800455c:	10000012 	.word	0x10000012
 8004560:	200000c8 	.word	0x200000c8
 8004564:	431bde83 	.word	0x431bde83

08004568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004570:	4b79      	ldr	r3, [pc, #484]	; (8004758 <ADC_Init+0x1f0>)
 8004572:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	4a58      	ldr	r2, [pc, #352]	; (800475c <ADC_Init+0x1f4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d022      	beq.n	8004646 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800460e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	e00f      	b.n	8004666 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004664:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0202 	bic.w	r2, r2, #2
 8004674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7e1b      	ldrb	r3, [r3, #24]
 8004680:	005a      	lsls	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	3b01      	subs	r3, #1
 80046c0:	035a      	lsls	r2, r3, #13
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	e007      	b.n	80046dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	051a      	lsls	r2, r3, #20
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800471e:	025a      	lsls	r2, r3, #9
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6899      	ldr	r1, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	029a      	lsls	r2, r3, #10
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40012300 	.word	0x40012300
 800475c:	0f000001 	.word	0x0f000001

08004760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800478c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	60d3      	str	r3, [r2, #12]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0307 	and.w	r3, r3, #7
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	db0b      	blt.n	80047ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	f003 021f 	and.w	r2, r3, #31
 80047dc:	4907      	ldr	r1, [pc, #28]	; (80047fc <__NVIC_EnableIRQ+0x38>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2001      	movs	r0, #1
 80047e6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	e000e100 	.word	0xe000e100

08004800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	db0a      	blt.n	800482a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	490c      	ldr	r1, [pc, #48]	; (800484c <__NVIC_SetPriority+0x4c>)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	0112      	lsls	r2, r2, #4
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	440b      	add	r3, r1
 8004824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004828:	e00a      	b.n	8004840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4908      	ldr	r1, [pc, #32]	; (8004850 <__NVIC_SetPriority+0x50>)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	3b04      	subs	r3, #4
 8004838:	0112      	lsls	r2, r2, #4
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	440b      	add	r3, r1
 800483e:	761a      	strb	r2, [r3, #24]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000e100 	.word	0xe000e100
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	; 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f1c3 0307 	rsb	r3, r3, #7
 800486e:	2b04      	cmp	r3, #4
 8004870:	bf28      	it	cs
 8004872:	2304      	movcs	r3, #4
 8004874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3304      	adds	r3, #4
 800487a:	2b06      	cmp	r3, #6
 800487c:	d902      	bls.n	8004884 <NVIC_EncodePriority+0x30>
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3b03      	subs	r3, #3
 8004882:	e000      	b.n	8004886 <NVIC_EncodePriority+0x32>
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	401a      	ands	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800489c:	f04f 31ff 	mov.w	r1, #4294967295
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	43d9      	mvns	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	4313      	orrs	r3, r2
         );
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3724      	adds	r7, #36	; 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048cc:	d301      	bcc.n	80048d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ce:	2301      	movs	r3, #1
 80048d0:	e00f      	b.n	80048f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <SysTick_Config+0x40>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048da:	210f      	movs	r1, #15
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	f7ff ff8e 	bl	8004800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <SysTick_Config+0x40>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <SysTick_Config+0x40>)
 80048ec:	2207      	movs	r2, #7
 80048ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	e000e010 	.word	0xe000e010

08004900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff ff29 	bl	8004760 <__NVIC_SetPriorityGrouping>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	4603      	mov	r3, r0
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004928:	f7ff ff3e 	bl	80047a8 <__NVIC_GetPriorityGrouping>
 800492c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff8e 	bl	8004854 <NVIC_EncodePriority>
 8004938:	4602      	mov	r2, r0
 800493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff ff5d 	bl	8004800 <__NVIC_SetPriority>
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	4603      	mov	r3, r0
 8004956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff ff31 	bl	80047c4 <__NVIC_EnableIRQ>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff ffa2 	bl	80048bc <SysTick_Config>
 8004978:	4603      	mov	r3, r0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004990:	f7ff fc44 	bl	800421c <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d008      	beq.n	80049b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2280      	movs	r2, #128	; 0x80
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e052      	b.n	8004a5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0216 	bic.w	r2, r2, #22
 80049c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d103      	bne.n	80049e4 <HAL_DMA_Abort+0x62>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0208 	bic.w	r2, r2, #8
 80049f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a04:	e013      	b.n	8004a2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a06:	f7ff fc09 	bl	800421c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d90c      	bls.n	8004a2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e015      	b.n	8004a5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e4      	bne.n	8004a06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	223f      	movs	r2, #63	; 0x3f
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2280      	movs	r2, #128	; 0x80
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e00c      	b.n	8004a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2205      	movs	r2, #5
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e165      	b.n	8004d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	f040 8154 	bne.w	8004d8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d005      	beq.n	8004afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d130      	bne.n	8004b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b30:	2201      	movs	r2, #1
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 0201 	and.w	r2, r3, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d017      	beq.n	8004b98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2203      	movs	r2, #3
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d123      	bne.n	8004bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	08da      	lsrs	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3208      	adds	r2, #8
 8004bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	220f      	movs	r2, #15
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	08da      	lsrs	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3208      	adds	r2, #8
 8004be6:	69b9      	ldr	r1, [r7, #24]
 8004be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0203 	and.w	r2, r3, #3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80ae 	beq.w	8004d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	4b5d      	ldr	r3, [pc, #372]	; (8004da8 <HAL_GPIO_Init+0x300>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	4a5c      	ldr	r2, [pc, #368]	; (8004da8 <HAL_GPIO_Init+0x300>)
 8004c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c3e:	4b5a      	ldr	r3, [pc, #360]	; (8004da8 <HAL_GPIO_Init+0x300>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c4a:	4a58      	ldr	r2, [pc, #352]	; (8004dac <HAL_GPIO_Init+0x304>)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	3302      	adds	r3, #2
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4f      	ldr	r2, [pc, #316]	; (8004db0 <HAL_GPIO_Init+0x308>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d025      	beq.n	8004cc2 <HAL_GPIO_Init+0x21a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4e      	ldr	r2, [pc, #312]	; (8004db4 <HAL_GPIO_Init+0x30c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01f      	beq.n	8004cbe <HAL_GPIO_Init+0x216>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <HAL_GPIO_Init+0x310>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d019      	beq.n	8004cba <HAL_GPIO_Init+0x212>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4c      	ldr	r2, [pc, #304]	; (8004dbc <HAL_GPIO_Init+0x314>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_GPIO_Init+0x20e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4b      	ldr	r2, [pc, #300]	; (8004dc0 <HAL_GPIO_Init+0x318>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00d      	beq.n	8004cb2 <HAL_GPIO_Init+0x20a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <HAL_GPIO_Init+0x31c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <HAL_GPIO_Init+0x206>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a49      	ldr	r2, [pc, #292]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_GPIO_Init+0x202>
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	e00c      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004caa:	2307      	movs	r3, #7
 8004cac:	e00a      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004cae:	2305      	movs	r3, #5
 8004cb0:	e008      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	e006      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e004      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e002      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_GPIO_Init+0x21c>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	f002 0203 	and.w	r2, r2, #3
 8004cca:	0092      	lsls	r2, r2, #2
 8004ccc:	4093      	lsls	r3, r2
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cd4:	4935      	ldr	r1, [pc, #212]	; (8004dac <HAL_GPIO_Init+0x304>)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	089b      	lsrs	r3, r3, #2
 8004cda:	3302      	adds	r3, #2
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ce2:	4b3a      	ldr	r3, [pc, #232]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d06:	4a31      	ldr	r2, [pc, #196]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d30:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d36:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b0f      	cmp	r3, #15
 8004d94:	f67f ae96 	bls.w	8004ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	3724      	adds	r7, #36	; 0x24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40013800 	.word	0x40013800
 8004db0:	40020000 	.word	0x40020000
 8004db4:	40020400 	.word	0x40020400
 8004db8:	40020800 	.word	0x40020800
 8004dbc:	40020c00 	.word	0x40020c00
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40021400 	.word	0x40021400
 8004dc8:	40021800 	.word	0x40021800
 8004dcc:	40013c00 	.word	0x40013c00

08004dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	887b      	ldrh	r3, [r7, #2]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e001      	b.n	8004df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e10:	787b      	ldrb	r3, [r7, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e1c:	e003      	b.n	8004e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	041a      	lsls	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd fd78 	bl	8002948 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40013c00 	.word	0x40013c00

08004e64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e90:	f7ff f9c4 	bl	800421c <HAL_GetTick>
 8004e94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e96:	e009      	b.n	8004eac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e98:	f7ff f9c0 	bl	800421c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea6:	d901      	bls.n	8004eac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e01f      	b.n	8004eec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_PWREx_EnableOverDrive+0x98>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d1ee      	bne.n	8004e98 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec0:	f7ff f9ac 	bl	800421c <HAL_GetTick>
 8004ec4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ec6:	e009      	b.n	8004edc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec8:	f7ff f9a8 	bl	800421c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed6:	d901      	bls.n	8004edc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e007      	b.n	8004eec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004edc:	4b07      	ldr	r3, [pc, #28]	; (8004efc <HAL_PWREx_EnableOverDrive+0x98>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee8:	d1ee      	bne.n	8004ec8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	420e0040 	.word	0x420e0040
 8004efc:	40007000 	.word	0x40007000
 8004f00:	420e0044 	.word	0x420e0044

08004f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0cc      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b68      	ldr	r3, [pc, #416]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90c      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d044      	beq.n	8005024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d119      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e067      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b37      	ldr	r3, [pc, #220]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4934      	ldr	r1, [pc, #208]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7ff f912 	bl	800421c <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7ff f90e 	bl	800421c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e04f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 020c 	and.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d1eb      	bne.n	8004ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d20c      	bcs.n	800504c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b22      	ldr	r3, [pc, #136]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f855 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f872 	bl	8004194 <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800d060 	.word	0x0800d060
 80050c8:	200000c8 	.word	0x200000c8
 80050cc:	200000cc 	.word	0x200000cc

080050d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	200000c8 	.word	0x200000c8

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	0800d070 	.word	0x0800d070

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005114:	f7ff ffdc 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	0800d070 	.word	0x0800d070

08005138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800513c:	b088      	sub	sp, #32
 800513e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005154:	4bce      	ldr	r3, [pc, #824]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 030c 	and.w	r3, r3, #12
 800515c:	2b0c      	cmp	r3, #12
 800515e:	f200 818d 	bhi.w	800547c <HAL_RCC_GetSysClockFreq+0x344>
 8005162:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_RCC_GetSysClockFreq+0x30>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	0800519d 	.word	0x0800519d
 800516c:	0800547d 	.word	0x0800547d
 8005170:	0800547d 	.word	0x0800547d
 8005174:	0800547d 	.word	0x0800547d
 8005178:	080051a3 	.word	0x080051a3
 800517c:	0800547d 	.word	0x0800547d
 8005180:	0800547d 	.word	0x0800547d
 8005184:	0800547d 	.word	0x0800547d
 8005188:	080051a9 	.word	0x080051a9
 800518c:	0800547d 	.word	0x0800547d
 8005190:	0800547d 	.word	0x0800547d
 8005194:	0800547d 	.word	0x0800547d
 8005198:	0800531d 	.word	0x0800531d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4bbd      	ldr	r3, [pc, #756]	; (8005494 <HAL_RCC_GetSysClockFreq+0x35c>)
 800519e:	61bb      	str	r3, [r7, #24]
       break;
 80051a0:	e16f      	b.n	8005482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a2:	4bbd      	ldr	r3, [pc, #756]	; (8005498 <HAL_RCC_GetSysClockFreq+0x360>)
 80051a4:	61bb      	str	r3, [r7, #24]
      break;
 80051a6:	e16c      	b.n	8005482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a8:	4bb9      	ldr	r3, [pc, #740]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b2:	4bb7      	ldr	r3, [pc, #732]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d053      	beq.n	8005266 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051be:	4bb4      	ldr	r3, [pc, #720]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	461a      	mov	r2, r3
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	ea02 0400 	and.w	r4, r2, r0
 80051d6:	603c      	str	r4, [r7, #0]
 80051d8:	400b      	ands	r3, r1
 80051da:	607b      	str	r3, [r7, #4]
 80051dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051e0:	4620      	mov	r0, r4
 80051e2:	4629      	mov	r1, r5
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	014b      	lsls	r3, r1, #5
 80051ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051f2:	0142      	lsls	r2, r0, #5
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	4623      	mov	r3, r4
 80051fa:	1ac0      	subs	r0, r0, r3
 80051fc:	462b      	mov	r3, r5
 80051fe:	eb61 0103 	sbc.w	r1, r1, r3
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	018b      	lsls	r3, r1, #6
 800520c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005210:	0182      	lsls	r2, r0, #6
 8005212:	1a12      	subs	r2, r2, r0
 8005214:	eb63 0301 	sbc.w	r3, r3, r1
 8005218:	f04f 0000 	mov.w	r0, #0
 800521c:	f04f 0100 	mov.w	r1, #0
 8005220:	00d9      	lsls	r1, r3, #3
 8005222:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005226:	00d0      	lsls	r0, r2, #3
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4621      	mov	r1, r4
 800522e:	1852      	adds	r2, r2, r1
 8005230:	4629      	mov	r1, r5
 8005232:	eb43 0101 	adc.w	r1, r3, r1
 8005236:	460b      	mov	r3, r1
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	0259      	lsls	r1, r3, #9
 8005242:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005246:	0250      	lsls	r0, r2, #9
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	461a      	mov	r2, r3
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	f7fb fd36 	bl	8000cc8 <__aeabi_uldivmod>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4613      	mov	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	e04c      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005266:	4b8a      	ldr	r3, [pc, #552]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	461a      	mov	r2, r3
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	ea02 0a00 	and.w	sl, r2, r0
 800527e:	ea03 0b01 	and.w	fp, r3, r1
 8005282:	4650      	mov	r0, sl
 8005284:	4659      	mov	r1, fp
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	014b      	lsls	r3, r1, #5
 8005290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005294:	0142      	lsls	r2, r0, #5
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	ebb0 000a 	subs.w	r0, r0, sl
 800529e:	eb61 010b 	sbc.w	r1, r1, fp
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	018b      	lsls	r3, r1, #6
 80052ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052b0:	0182      	lsls	r2, r0, #6
 80052b2:	1a12      	subs	r2, r2, r0
 80052b4:	eb63 0301 	sbc.w	r3, r3, r1
 80052b8:	f04f 0000 	mov.w	r0, #0
 80052bc:	f04f 0100 	mov.w	r1, #0
 80052c0:	00d9      	lsls	r1, r3, #3
 80052c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c6:	00d0      	lsls	r0, r2, #3
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	eb12 020a 	adds.w	r2, r2, sl
 80052d0:	eb43 030b 	adc.w	r3, r3, fp
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	0299      	lsls	r1, r3, #10
 80052de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052e2:	0290      	lsls	r0, r2, #10
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f7fb fce8 	bl	8000cc8 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005300:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	61bb      	str	r3, [r7, #24]
      break;
 800531a:	e0b2      	b.n	8005482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800531c:	4b5c      	ldr	r3, [pc, #368]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005324:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005326:	4b5a      	ldr	r3, [pc, #360]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005332:	4b57      	ldr	r3, [pc, #348]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	ea02 0800 	and.w	r8, r2, r0
 800534a:	ea03 0901 	and.w	r9, r3, r1
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	014b      	lsls	r3, r1, #5
 800535c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005360:	0142      	lsls	r2, r0, #5
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	ebb0 0008 	subs.w	r0, r0, r8
 800536a:	eb61 0109 	sbc.w	r1, r1, r9
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	018b      	lsls	r3, r1, #6
 8005378:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800537c:	0182      	lsls	r2, r0, #6
 800537e:	1a12      	subs	r2, r2, r0
 8005380:	eb63 0301 	sbc.w	r3, r3, r1
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	00d9      	lsls	r1, r3, #3
 800538e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005392:	00d0      	lsls	r0, r2, #3
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	eb12 0208 	adds.w	r2, r2, r8
 800539c:	eb43 0309 	adc.w	r3, r3, r9
 80053a0:	f04f 0000 	mov.w	r0, #0
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	0259      	lsls	r1, r3, #9
 80053aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053ae:	0250      	lsls	r0, r2, #9
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4610      	mov	r0, r2
 80053b6:	4619      	mov	r1, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	f7fb fc82 	bl	8000cc8 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4613      	mov	r3, r2
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e04a      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ce:	4b30      	ldr	r3, [pc, #192]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	099b      	lsrs	r3, r3, #6
 80053d4:	461a      	mov	r2, r3
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053de:	f04f 0100 	mov.w	r1, #0
 80053e2:	ea02 0400 	and.w	r4, r2, r0
 80053e6:	ea03 0501 	and.w	r5, r3, r1
 80053ea:	4620      	mov	r0, r4
 80053ec:	4629      	mov	r1, r5
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	014b      	lsls	r3, r1, #5
 80053f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053fc:	0142      	lsls	r2, r0, #5
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	1b00      	subs	r0, r0, r4
 8005404:	eb61 0105 	sbc.w	r1, r1, r5
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	018b      	lsls	r3, r1, #6
 8005412:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005416:	0182      	lsls	r2, r0, #6
 8005418:	1a12      	subs	r2, r2, r0
 800541a:	eb63 0301 	sbc.w	r3, r3, r1
 800541e:	f04f 0000 	mov.w	r0, #0
 8005422:	f04f 0100 	mov.w	r1, #0
 8005426:	00d9      	lsls	r1, r3, #3
 8005428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800542c:	00d0      	lsls	r0, r2, #3
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	1912      	adds	r2, r2, r4
 8005434:	eb45 0303 	adc.w	r3, r5, r3
 8005438:	f04f 0000 	mov.w	r0, #0
 800543c:	f04f 0100 	mov.w	r1, #0
 8005440:	0299      	lsls	r1, r3, #10
 8005442:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005446:	0290      	lsls	r0, r2, #10
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	461a      	mov	r2, r3
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	f7fb fc36 	bl	8000cc8 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCC_GetSysClockFreq+0x358>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	0f1b      	lsrs	r3, r3, #28
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	61bb      	str	r3, [r7, #24]
      break;
 800547a:	e002      	b.n	8005482 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCC_GetSysClockFreq+0x35c>)
 800547e:	61bb      	str	r3, [r7, #24]
      break;
 8005480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005482:	69bb      	ldr	r3, [r7, #24]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548e:	bf00      	nop
 8005490:	40023800 	.word	0x40023800
 8005494:	00f42400 	.word	0x00f42400
 8005498:	007a1200 	.word	0x007a1200

0800549c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e28d      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8083 	beq.w	80055c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054bc:	4b94      	ldr	r3, [pc, #592]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d019      	beq.n	80054fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054c8:	4b91      	ldr	r3, [pc, #580]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054d4:	4b8e      	ldr	r3, [pc, #568]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e0:	d00c      	beq.n	80054fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e2:	4b8b      	ldr	r3, [pc, #556]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d112      	bne.n	8005514 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ee:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054fa:	d10b      	bne.n	8005514 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	4b84      	ldr	r3, [pc, #528]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05b      	beq.n	80055c0 <HAL_RCC_OscConfig+0x124>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d157      	bne.n	80055c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e25a      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d106      	bne.n	800552c <HAL_RCC_OscConfig+0x90>
 800551e:	4b7c      	ldr	r3, [pc, #496]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a7b      	ldr	r2, [pc, #492]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	e01d      	b.n	8005568 <HAL_RCC_OscConfig+0xcc>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005534:	d10c      	bne.n	8005550 <HAL_RCC_OscConfig+0xb4>
 8005536:	4b76      	ldr	r3, [pc, #472]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a75      	ldr	r2, [pc, #468]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 800553c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	4b73      	ldr	r3, [pc, #460]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a72      	ldr	r2, [pc, #456]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e00b      	b.n	8005568 <HAL_RCC_OscConfig+0xcc>
 8005550:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6e      	ldr	r2, [pc, #440]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	4b6c      	ldr	r3, [pc, #432]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a6b      	ldr	r2, [pc, #428]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d013      	beq.n	8005598 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fe fe54 	bl	800421c <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005578:	f7fe fe50 	bl	800421c <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	; 0x64
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e21f      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b61      	ldr	r3, [pc, #388]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0xdc>
 8005596:	e014      	b.n	80055c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fe fe40 	bl	800421c <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a0:	f7fe fe3c 	bl	800421c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	; 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e20b      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055b2:	4b57      	ldr	r3, [pc, #348]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x104>
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d06f      	beq.n	80056ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055ce:	4b50      	ldr	r3, [pc, #320]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055da:	4b4d      	ldr	r3, [pc, #308]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d105      	bne.n	80055f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055e6:	4b4a      	ldr	r3, [pc, #296]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d11c      	bne.n	8005638 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fe:	4b44      	ldr	r3, [pc, #272]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d116      	bne.n	8005638 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_RCC_OscConfig+0x186>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e1d3      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005622:	4b3b      	ldr	r3, [pc, #236]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4937      	ldr	r1, [pc, #220]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005632:	4313      	orrs	r3, r2
 8005634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005636:	e03a      	b.n	80056ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d020      	beq.n	8005682 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005640:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_OscConfig+0x278>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fe fde9 	bl	800421c <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564e:	f7fe fde5 	bl	800421c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1b4      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005660:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566c:	4b28      	ldr	r3, [pc, #160]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4925      	ldr	r1, [pc, #148]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
 8005680:	e015      	b.n	80056ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005682:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_RCC_OscConfig+0x278>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fe fdc8 	bl	800421c <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005690:	f7fe fdc4 	bl	800421c <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e193      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a2:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d036      	beq.n	8005728 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <HAL_RCC_OscConfig+0x27c>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fe fda8 	bl	800421c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fe fda4 	bl	800421c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e173      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <HAL_RCC_OscConfig+0x274>)
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0x234>
 80056ee:	e01b      	b.n	8005728 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <HAL_RCC_OscConfig+0x27c>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f6:	f7fe fd91 	bl	800421c <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	e00e      	b.n	800571c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fe:	f7fe fd8d 	bl	800421c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d907      	bls.n	800571c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e15c      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
 8005710:	40023800 	.word	0x40023800
 8005714:	42470000 	.word	0x42470000
 8005718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	4b8a      	ldr	r3, [pc, #552]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ea      	bne.n	80056fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8097 	beq.w	8005864 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573a:	4b83      	ldr	r3, [pc, #524]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	4b7f      	ldr	r3, [pc, #508]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	4a7e      	ldr	r2, [pc, #504]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005754:	6413      	str	r3, [r2, #64]	; 0x40
 8005756:	4b7c      	ldr	r3, [pc, #496]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005766:	4b79      	ldr	r3, [pc, #484]	; (800594c <HAL_RCC_OscConfig+0x4b0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d118      	bne.n	80057a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005772:	4b76      	ldr	r3, [pc, #472]	; (800594c <HAL_RCC_OscConfig+0x4b0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a75      	ldr	r2, [pc, #468]	; (800594c <HAL_RCC_OscConfig+0x4b0>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577e:	f7fe fd4d 	bl	800421c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fe fd49 	bl	800421c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e118      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	4b6c      	ldr	r3, [pc, #432]	; (800594c <HAL_RCC_OscConfig+0x4b0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d106      	bne.n	80057ba <HAL_RCC_OscConfig+0x31e>
 80057ac:	4b66      	ldr	r3, [pc, #408]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	4a65      	ldr	r2, [pc, #404]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6713      	str	r3, [r2, #112]	; 0x70
 80057b8:	e01c      	b.n	80057f4 <HAL_RCC_OscConfig+0x358>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d10c      	bne.n	80057dc <HAL_RCC_OscConfig+0x340>
 80057c2:	4b61      	ldr	r3, [pc, #388]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a60      	ldr	r2, [pc, #384]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70
 80057ce:	4b5e      	ldr	r3, [pc, #376]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6713      	str	r3, [r2, #112]	; 0x70
 80057da:	e00b      	b.n	80057f4 <HAL_RCC_OscConfig+0x358>
 80057dc:	4b5a      	ldr	r3, [pc, #360]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a59      	ldr	r2, [pc, #356]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
 80057e8:	4b57      	ldr	r3, [pc, #348]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a56      	ldr	r2, [pc, #344]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80057ee:	f023 0304 	bic.w	r3, r3, #4
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d015      	beq.n	8005828 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fe fd0e 	bl	800421c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005802:	e00a      	b.n	800581a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005804:	f7fe fd0a 	bl	800421c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0d7      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ee      	beq.n	8005804 <HAL_RCC_OscConfig+0x368>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fe fcf8 	bl	800421c <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582e:	e00a      	b.n	8005846 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005830:	f7fe fcf4 	bl	800421c <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0c1      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ee      	bne.n	8005830 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d105      	bne.n	8005864 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005858:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	4a3a      	ldr	r2, [pc, #232]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 800585e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005862:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80ad 	beq.w	80059c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800586e:	4b36      	ldr	r3, [pc, #216]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	2b08      	cmp	r3, #8
 8005878:	d060      	beq.n	800593c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d145      	bne.n	800590e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_RCC_OscConfig+0x4b4>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fe fcc8 	bl	800421c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005890:	f7fe fcc4 	bl	800421c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e093      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	061b      	lsls	r3, r3, #24
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	071b      	lsls	r3, r3, #28
 80058da:	491b      	ldr	r1, [pc, #108]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e0:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCC_OscConfig+0x4b4>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e6:	f7fe fc99 	bl	800421c <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fe fc95 	bl	800421c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e064      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCC_OscConfig+0x452>
 800590c:	e05c      	b.n	80059c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <HAL_RCC_OscConfig+0x4b4>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fe fc82 	bl	800421c <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591c:	f7fe fc7e 	bl	800421c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e04d      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <HAL_RCC_OscConfig+0x4ac>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x480>
 800593a:	e045      	b.n	80059c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e040      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
 8005948:	40023800 	.word	0x40023800
 800594c:	40007000 	.word	0x40007000
 8005950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005954:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <HAL_RCC_OscConfig+0x538>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d030      	beq.n	80059c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d129      	bne.n	80059c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d122      	bne.n	80059c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800598a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800598c:	4293      	cmp	r3, r2
 800598e:	d119      	bne.n	80059c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	3b01      	subs	r3, #1
 800599e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d10f      	bne.n	80059c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800

080059d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e041      	b.n	8005a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fe f802 	bl	8003a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fda6 	bl	8006568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e04e      	b.n	8005b2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a23      	ldr	r2, [pc, #140]	; (8005b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d022      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aba:	d01d      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1e      	ldr	r2, [pc, #120]	; (8005b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x80>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d111      	bne.n	8005b1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d010      	beq.n	8005b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	e007      	b.n	8005b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40001800 	.word	0x40001800

08005b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e041      	b.n	8005bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f839 	bl	8005bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f000 fce6 	bl	8006568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x24>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e022      	b.n	8005c76 <HAL_TIM_PWM_Start+0x6a>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d109      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x3e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	bf14      	ite	ne
 8005c42:	2301      	movne	r3, #1
 8005c44:	2300      	moveq	r3, #0
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	e015      	b.n	8005c76 <HAL_TIM_PWM_Start+0x6a>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d109      	bne.n	8005c64 <HAL_TIM_PWM_Start+0x58>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	bf14      	ite	ne
 8005c5c:	2301      	movne	r3, #1
 8005c5e:	2300      	moveq	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e008      	b.n	8005c76 <HAL_TIM_PWM_Start+0x6a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07c      	b.n	8005d78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0x82>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c8c:	e013      	b.n	8005cb6 <HAL_TIM_PWM_Start+0xaa>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0x92>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	e00b      	b.n	8005cb6 <HAL_TIM_PWM_Start+0xaa>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cac:	e003      	b.n	8005cb6 <HAL_TIM_PWM_Start+0xaa>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 ff3c 	bl	8006b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	; (8005d80 <HAL_TIM_PWM_Start+0x174>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0xcc>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <HAL_TIM_PWM_Start+0x178>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Start+0xd0>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_TIM_PWM_Start+0xd2>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <HAL_TIM_PWM_Start+0x174>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d022      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <HAL_TIM_PWM_Start+0x17c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <HAL_TIM_PWM_Start+0x180>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <HAL_TIM_PWM_Start+0x184>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_TIM_PWM_Start+0x178>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIM_PWM_Start+0x188>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x136>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a16      	ldr	r2, [pc, #88]	; (8005d98 <HAL_TIM_PWM_Start+0x18c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d111      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d010      	beq.n	8005d76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d64:	e007      	b.n	8005d76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40000400 	.word	0x40000400
 8005d8c:	40000800 	.word	0x40000800
 8005d90:	40000c00 	.word	0x40000c00
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40001800 	.word	0x40001800

08005d9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e097      	b.n	8005ee0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7fd fda3 	bl	8003910 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f000 fbb9 	bl	8006568 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e3c:	f023 030c 	bic.w	r3, r3, #12
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	011a      	lsls	r2, r3, #4
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	031b      	lsls	r3, r3, #12
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d102      	bne.n	8005f24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f1e:	7b7b      	ldrb	r3, [r7, #13]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d001      	beq.n	8005f28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e069      	b.n	8005ffc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f38:	e031      	b.n	8005f9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d110      	bne.n	8005f62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d102      	bne.n	8005f4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f46:	7b3b      	ldrb	r3, [r7, #12]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d001      	beq.n	8005f50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e055      	b.n	8005ffc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f60:	e01d      	b.n	8005f9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d108      	bne.n	8005f7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d105      	bne.n	8005f7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6e:	7b7b      	ldrb	r3, [r7, #13]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d102      	bne.n	8005f7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f74:	7b3b      	ldrb	r3, [r7, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d001      	beq.n	8005f7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e03e      	b.n	8005ffc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_TIM_Encoder_Start+0xc4>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d008      	beq.n	8005fbc <HAL_TIM_Encoder_Start+0xd4>
 8005faa:	e00f      	b.n	8005fcc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fdc1 	bl	8006b3c <TIM_CCxChannelCmd>
      break;
 8005fba:	e016      	b.n	8005fea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	2104      	movs	r1, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fdb9 	bl	8006b3c <TIM_CCxChannelCmd>
      break;
 8005fca:	e00e      	b.n	8005fea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fdb1 	bl	8006b3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fdaa 	bl	8006b3c <TIM_CCxChannelCmd>
      break;
 8005fe8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d122      	bne.n	8006060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b02      	cmp	r3, #2
 8006026:	d11b      	bne.n	8006060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0202 	mvn.w	r2, #2
 8006030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa70 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa62 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa73 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b04      	cmp	r3, #4
 800606c:	d122      	bne.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d11b      	bne.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0204 	mvn.w	r2, #4
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa46 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa38 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa49 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d122      	bne.n	8006108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d11b      	bne.n	8006108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0208 	mvn.w	r2, #8
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2204      	movs	r2, #4
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa1c 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa0e 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa1f 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b10      	cmp	r3, #16
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0210 	mvn.w	r2, #16
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2208      	movs	r2, #8
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9f2 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9e4 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9f5 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b01      	cmp	r3, #1
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0201 	mvn.w	r2, #1
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc fac4 	bl	8002710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a0:	2b80      	cmp	r3, #128	; 0x80
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fdc2 	bl	8006d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d10e      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d107      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f9ba 	bl	8006554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d10e      	bne.n	800620c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d107      	bne.n	800620c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0220 	mvn.w	r2, #32
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fd8c 	bl	8006d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800622a:	2302      	movs	r3, #2
 800622c:	e0ac      	b.n	8006388 <HAL_TIM_PWM_ConfigChannel+0x174>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	f200 809f 	bhi.w	800637c <HAL_TIM_PWM_ConfigChannel+0x168>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	0800637d 	.word	0x0800637d
 800624c:	0800637d 	.word	0x0800637d
 8006250:	0800637d 	.word	0x0800637d
 8006254:	080062b9 	.word	0x080062b9
 8006258:	0800637d 	.word	0x0800637d
 800625c:	0800637d 	.word	0x0800637d
 8006260:	0800637d 	.word	0x0800637d
 8006264:	080062fb 	.word	0x080062fb
 8006268:	0800637d 	.word	0x0800637d
 800626c:	0800637d 	.word	0x0800637d
 8006270:	0800637d 	.word	0x0800637d
 8006274:	0800633b 	.word	0x0800633b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fa12 	bl	80066a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	619a      	str	r2, [r3, #24]
      break;
 80062b6:	e062      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa62 	bl	8006788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	619a      	str	r2, [r3, #24]
      break;
 80062f8:	e041      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fab7 	bl	8006874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0204 	bic.w	r2, r2, #4
 8006324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69d9      	ldr	r1, [r3, #28]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
      break;
 8006338:	e021      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fb0b 	bl	800695c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	61da      	str	r2, [r3, #28]
      break;
 800637a:	e000      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800637c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIM_ConfigClockSource+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0b3      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x180>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d03e      	beq.n	8006460 <HAL_TIM_ConfigClockSource+0xd0>
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	f200 8087 	bhi.w	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ee:	f000 8085 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x16c>
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f6:	d87f      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 80063f8:	2b70      	cmp	r3, #112	; 0x70
 80063fa:	d01a      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0xa2>
 80063fc:	2b70      	cmp	r3, #112	; 0x70
 80063fe:	d87b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006400:	2b60      	cmp	r3, #96	; 0x60
 8006402:	d050      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x116>
 8006404:	2b60      	cmp	r3, #96	; 0x60
 8006406:	d877      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d03c      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0xf6>
 800640c:	2b50      	cmp	r3, #80	; 0x50
 800640e:	d873      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d058      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x136>
 8006414:	2b40      	cmp	r3, #64	; 0x40
 8006416:	d86f      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d064      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
 800641c:	2b30      	cmp	r3, #48	; 0x30
 800641e:	d86b      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d060      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d867      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05c      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d05a      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006430:	e062      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6899      	ldr	r1, [r3, #8]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f000 fb5b 	bl	8006afc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006454:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	609a      	str	r2, [r3, #8]
      break;
 800645e:	e04e      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f000 fb44 	bl	8006afc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006482:	609a      	str	r2, [r3, #8]
      break;
 8006484:	e03b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 fab8 	bl	8006a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2150      	movs	r1, #80	; 0x50
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fb11 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 80064a4:	e02b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 fad7 	bl	8006a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2160      	movs	r1, #96	; 0x60
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fb01 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 80064c4:	e01b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 fa98 	bl	8006a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 faf1 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 80064e4:	e00b      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f000 fae8 	bl	8006ac6 <TIM_ITRx_SetConfig>
        break;
 80064f6:	e002      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a40      	ldr	r2, [pc, #256]	; (800667c <TIM_Base_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006586:	d00f      	beq.n	80065a8 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <TIM_Base_SetConfig+0x118>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00b      	beq.n	80065a8 <TIM_Base_SetConfig+0x40>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a3c      	ldr	r2, [pc, #240]	; (8006684 <TIM_Base_SetConfig+0x11c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <TIM_Base_SetConfig+0x40>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a3b      	ldr	r2, [pc, #236]	; (8006688 <TIM_Base_SetConfig+0x120>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_Base_SetConfig+0x40>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a3a      	ldr	r2, [pc, #232]	; (800668c <TIM_Base_SetConfig+0x124>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d108      	bne.n	80065ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2f      	ldr	r2, [pc, #188]	; (800667c <TIM_Base_SetConfig+0x114>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d02b      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d027      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2c      	ldr	r2, [pc, #176]	; (8006680 <TIM_Base_SetConfig+0x118>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d023      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2b      	ldr	r2, [pc, #172]	; (8006684 <TIM_Base_SetConfig+0x11c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01f      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2a      	ldr	r2, [pc, #168]	; (8006688 <TIM_Base_SetConfig+0x120>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01b      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a29      	ldr	r2, [pc, #164]	; (800668c <TIM_Base_SetConfig+0x124>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d017      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a28      	ldr	r2, [pc, #160]	; (8006690 <TIM_Base_SetConfig+0x128>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a27      	ldr	r2, [pc, #156]	; (8006694 <TIM_Base_SetConfig+0x12c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a26      	ldr	r2, [pc, #152]	; (8006698 <TIM_Base_SetConfig+0x130>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00b      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a25      	ldr	r2, [pc, #148]	; (800669c <TIM_Base_SetConfig+0x134>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d007      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a24      	ldr	r2, [pc, #144]	; (80066a0 <TIM_Base_SetConfig+0x138>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a23      	ldr	r2, [pc, #140]	; (80066a4 <TIM_Base_SetConfig+0x13c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d108      	bne.n	800662c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a0a      	ldr	r2, [pc, #40]	; (800667c <TIM_Base_SetConfig+0x114>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_Base_SetConfig+0xf8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a0c      	ldr	r2, [pc, #48]	; (800668c <TIM_Base_SetConfig+0x124>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d103      	bne.n	8006668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	615a      	str	r2, [r3, #20]
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40001800 	.word	0x40001800
 80066a0:	40001c00 	.word	0x40001c00
 80066a4:	40002000 	.word	0x40002000

080066a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 0302 	bic.w	r3, r3, #2
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a20      	ldr	r2, [pc, #128]	; (8006780 <TIM_OC1_SetConfig+0xd8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC1_SetConfig+0x64>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a1f      	ldr	r2, [pc, #124]	; (8006784 <TIM_OC1_SetConfig+0xdc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10c      	bne.n	8006726 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0308 	bic.w	r3, r3, #8
 8006712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 0304 	bic.w	r3, r3, #4
 8006724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a15      	ldr	r2, [pc, #84]	; (8006780 <TIM_OC1_SetConfig+0xd8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d003      	beq.n	8006736 <TIM_OC1_SetConfig+0x8e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a14      	ldr	r2, [pc, #80]	; (8006784 <TIM_OC1_SetConfig+0xdc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d111      	bne.n	800675a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800673c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40010000 	.word	0x40010000
 8006784:	40010400 	.word	0x40010400

08006788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0210 	bic.w	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0320 	bic.w	r3, r3, #32
 80067d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a22      	ldr	r2, [pc, #136]	; (800686c <TIM_OC2_SetConfig+0xe4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC2_SetConfig+0x68>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <TIM_OC2_SetConfig+0xe8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10d      	bne.n	800680c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a17      	ldr	r2, [pc, #92]	; (800686c <TIM_OC2_SetConfig+0xe4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_OC2_SetConfig+0x94>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a16      	ldr	r2, [pc, #88]	; (8006870 <TIM_OC2_SetConfig+0xe8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d113      	bne.n	8006844 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800682a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	621a      	str	r2, [r3, #32]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400

08006874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a21      	ldr	r2, [pc, #132]	; (8006954 <TIM_OC3_SetConfig+0xe0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC3_SetConfig+0x66>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <TIM_OC3_SetConfig+0xe4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d10d      	bne.n	80068f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a16      	ldr	r2, [pc, #88]	; (8006954 <TIM_OC3_SetConfig+0xe0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_OC3_SetConfig+0x92>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a15      	ldr	r2, [pc, #84]	; (8006958 <TIM_OC3_SetConfig+0xe4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d113      	bne.n	800692e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	621a      	str	r2, [r3, #32]
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	40010000 	.word	0x40010000
 8006958:	40010400 	.word	0x40010400

0800695c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a12      	ldr	r2, [pc, #72]	; (8006a00 <TIM_OC4_SetConfig+0xa4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC4_SetConfig+0x68>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a11      	ldr	r2, [pc, #68]	; (8006a04 <TIM_OC4_SetConfig+0xa8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d109      	bne.n	80069d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40010400 	.word	0x40010400

08006a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0201 	bic.w	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 030a 	bic.w	r3, r3, #10
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b087      	sub	sp, #28
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f023 0210 	bic.w	r2, r3, #16
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	031b      	lsls	r3, r3, #12
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f043 0307 	orr.w	r3, r3, #7
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	021a      	lsls	r2, r3, #8
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	609a      	str	r2, [r3, #8]
}
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2201      	movs	r2, #1
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1a      	ldr	r2, [r3, #32]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	401a      	ands	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a1a      	ldr	r2, [r3, #32]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	fa01 f303 	lsl.w	r3, r1, r3
 8006b74:	431a      	orrs	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e05a      	b.n	8006c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a21      	ldr	r2, [pc, #132]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d022      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d01d      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1d      	ldr	r2, [pc, #116]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1a      	ldr	r2, [pc, #104]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a18      	ldr	r2, [pc, #96]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d10c      	bne.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40010000 	.word	0x40010000
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40010400 	.word	0x40010400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40001800 	.word	0x40001800

08006c80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e03d      	b.n	8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e03f      	b.n	8006dde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fd f82a 	bl	8003dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2224      	movs	r2, #36	; 0x24
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fd1d 	bl	80077d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	; 0x28
 8006dea:	af02      	add	r7, sp, #8
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	603b      	str	r3, [r7, #0]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d17c      	bne.n	8006f00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_UART_Transmit+0x2c>
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e075      	b.n	8006f02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Transmit+0x3e>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e06e      	b.n	8006f02 <HAL_UART_Transmit+0x11c>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e3a:	f7fd f9ef 	bl	800421c <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	88fa      	ldrh	r2, [r7, #6]
 8006e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d108      	bne.n	8006e68 <HAL_UART_Transmit+0x82>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	e003      	b.n	8006e70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e78:	e02a      	b.n	8006ed0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	2180      	movs	r1, #128	; 0x80
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fadf 	bl	8007448 <UART_WaitOnFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e036      	b.n	8006f02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	3302      	adds	r3, #2
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e007      	b.n	8006ec2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1cf      	bne.n	8006e7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2140      	movs	r1, #64	; 0x40
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 faaf 	bl	8007448 <UART_WaitOnFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e006      	b.n	8006f02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	e000      	b.n	8006f02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f00:	2302      	movs	r3, #2
  }
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b08a      	sub	sp, #40	; 0x28
 8006f0e:	af02      	add	r7, sp, #8
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	f040 808c 	bne.w	8007044 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Receive+0x2e>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e084      	b.n	8007046 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Receive+0x40>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e07d      	b.n	8007046 <HAL_UART_Receive+0x13c>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2222      	movs	r2, #34	; 0x22
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f66:	f7fd f959 	bl	800421c <HAL_GetTick>
 8006f6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d108      	bne.n	8006f94 <HAL_UART_Receive+0x8a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e003      	b.n	8006f9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006fa4:	e043      	b.n	800702e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2120      	movs	r1, #32
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fa49 	bl	8007448 <UART_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e042      	b.n	8007046 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	3302      	adds	r3, #2
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	e01f      	b.n	8007020 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe8:	d007      	beq.n	8006ffa <HAL_UART_Receive+0xf0>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <HAL_UART_Receive+0xfe>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	b2da      	uxtb	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e008      	b.n	800701a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007014:	b2da      	uxtb	r2, r3
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	3301      	adds	r3, #1
 800701e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1b6      	bne.n	8006fa6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007044:	2302      	movs	r3, #2
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	4613      	mov	r3, r2
 800705a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b20      	cmp	r3, #32
 8007066:	d11d      	bne.n	80070a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_UART_Receive_IT+0x26>
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e016      	b.n	80070a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_UART_Receive_IT+0x38>
 8007082:	2302      	movs	r3, #2
 8007084:	e00f      	b.n	80070a6 <HAL_UART_Receive_IT+0x58>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	461a      	mov	r2, r3
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fa1e 	bl	80074dc <UART_Start_Receive_IT>
 80070a0:	4603      	mov	r3, r0
 80070a2:	e000      	b.n	80070a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070a4:	2302      	movs	r3, #2
  }
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	; 0x28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_UART_IRQHandler+0x52>
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fad1 	bl	80076a2 <UART_Receive_IT>
      return;
 8007100:	e17c      	b.n	80073fc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80b1 	beq.w	800726c <HAL_UART_IRQHandler+0x1bc>
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <HAL_UART_IRQHandler+0x70>
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80a6 	beq.w	800726c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_UART_IRQHandler+0x90>
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	f043 0201 	orr.w	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_UART_IRQHandler+0xb0>
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	f043 0202 	orr.w	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_UART_IRQHandler+0xd0>
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f043 0204 	orr.w	r2, r3, #4
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00f      	beq.n	80071aa <HAL_UART_IRQHandler+0xfa>
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d104      	bne.n	800719e <HAL_UART_IRQHandler+0xee>
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f043 0208 	orr.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 811f 	beq.w	80073f2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <HAL_UART_IRQHandler+0x11e>
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fa6a 	bl	80076a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <HAL_UART_IRQHandler+0x146>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d031      	beq.n	800725a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9aa 	bl	8007550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d123      	bne.n	8007252 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007218:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	2b00      	cmp	r3, #0
 8007220:	d013      	beq.n	800724a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	4a77      	ldr	r2, [pc, #476]	; (8007404 <HAL_UART_IRQHandler+0x354>)
 8007228:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd fc17 	bl	8004a62 <HAL_DMA_Abort_IT>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d016      	beq.n	8007268 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	e00e      	b.n	8007268 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8e6 	bl	800741c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	e00a      	b.n	8007268 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f8e2 	bl	800741c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	e006      	b.n	8007268 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8de 	bl	800741c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007266:	e0c4      	b.n	80073f2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	bf00      	nop
    return;
 800726a:	e0c2      	b.n	80073f2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	2b01      	cmp	r3, #1
 8007272:	f040 80a2 	bne.w	80073ba <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	f003 0310 	and.w	r3, r3, #16
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 809c 	beq.w	80073ba <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8096 	beq.w	80073ba <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d14f      	bne.n	8007352 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80072bc:	8a3b      	ldrh	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8099 	beq.w	80073f6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072c8:	8a3a      	ldrh	r2, [r7, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	f080 8093 	bcs.w	80073f6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8a3a      	ldrh	r2, [r7, #16]
 80072d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e0:	d02b      	beq.n	800733a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072f0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695a      	ldr	r2, [r3, #20]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 0201 	bic.w	r2, r2, #1
 8007300:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695a      	ldr	r2, [r3, #20]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007310:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0210 	bic.w	r2, r2, #16
 800732e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	4618      	mov	r0, r3
 8007336:	f7fd fb24 	bl	8004982 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007342:	b29b      	uxth	r3, r3
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	b29b      	uxth	r3, r3
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f870 	bl	8007430 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007350:	e051      	b.n	80073f6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800735a:	b29b      	uxth	r3, r3
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d047      	beq.n	80073fa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800736a:	8a7b      	ldrh	r3, [r7, #18]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d044      	beq.n	80073fa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800737e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695a      	ldr	r2, [r3, #20]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0201 	bic.w	r2, r2, #1
 800738e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2220      	movs	r2, #32
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0210 	bic.w	r2, r2, #16
 80073ac:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073ae:	8a7b      	ldrh	r3, [r7, #18]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f83c 	bl	8007430 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80073b8:	e01f      	b.n	80073fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_UART_IRQHandler+0x326>
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8ff 	bl	80075d2 <UART_Transmit_IT>
    return;
 80073d4:	e012      	b.n	80073fc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00d      	beq.n	80073fc <HAL_UART_IRQHandler+0x34c>
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f941 	bl	8007672 <UART_EndTransmit_IT>
    return;
 80073f0:	e004      	b.n	80073fc <HAL_UART_IRQHandler+0x34c>
    return;
 80073f2:	bf00      	nop
 80073f4:	e002      	b.n	80073fc <HAL_UART_IRQHandler+0x34c>
      return;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <HAL_UART_IRQHandler+0x34c>
      return;
 80073fa:	bf00      	nop
  }
}
 80073fc:	3728      	adds	r7, #40	; 0x28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	080075ab 	.word	0x080075ab

08007408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007458:	e02c      	b.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d028      	beq.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <UART_WaitOnFlagUntilTimeout+0x30>
 8007468:	f7fc fed8 	bl	800421c <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	429a      	cmp	r2, r3
 8007476:	d21d      	bcs.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007486:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695a      	ldr	r2, [r3, #20]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e00f      	b.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	4013      	ands	r3, r2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d0c3      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	88fa      	ldrh	r2, [r7, #6]
 80074fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2222      	movs	r2, #34	; 0x22
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007520:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0201 	orr.w	r2, r2, #1
 8007530:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0220 	orr.w	r2, r2, #32
 8007540:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007566:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0210 	bic.w	r2, r2, #16
 800758e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff ff29 	bl	800741c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ca:	bf00      	nop
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b21      	cmp	r3, #33	; 0x21
 80075e4:	d13e      	bne.n	8007664 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ee:	d114      	bne.n	800761a <UART_Transmit_IT+0x48>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d110      	bne.n	800761a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800760c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	1c9a      	adds	r2, r3, #2
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	621a      	str	r2, [r3, #32]
 8007618:	e008      	b.n	800762c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	1c59      	adds	r1, r3, #1
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6211      	str	r1, [r2, #32]
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29b      	uxth	r3, r3
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4619      	mov	r1, r3
 800763a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10f      	bne.n	8007660 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800764e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007688:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff feb8 	bl	8007408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b22      	cmp	r3, #34	; 0x22
 80076b4:	f040 8087 	bne.w	80077c6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c0:	d117      	bne.n	80076f2 <UART_Receive_IT+0x50>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d113      	bne.n	80076f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	1c9a      	adds	r2, r3, #2
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28
 80076f0:	e026      	b.n	8007740 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007704:	d007      	beq.n	8007716 <UART_Receive_IT+0x74>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <UART_Receive_IT+0x82>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	e008      	b.n	8007736 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29b      	uxth	r3, r3
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	4619      	mov	r1, r3
 800774e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007750:	2b00      	cmp	r3, #0
 8007752:	d136      	bne.n	80077c2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0220 	bic.w	r2, r2, #32
 8007762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10e      	bne.n	80077b2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0210 	bic.w	r2, r2, #16
 80077a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fe40 	bl	8007430 <HAL_UARTEx_RxEventCallback>
 80077b0:	e002      	b.n	80077b8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fb f876 	bl	80028a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e002      	b.n	80077c8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e000      	b.n	80077c8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80077c6:	2302      	movs	r3, #2
  }
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	b09f      	sub	sp, #124	; 0x7c
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	68d9      	ldr	r1, [r3, #12]
 80077e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	ea40 0301 	orr.w	r3, r0, r1
 80077f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	431a      	orrs	r2, r3
 8007802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	4313      	orrs	r3, r2
 8007808:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800780a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007814:	f021 010c 	bic.w	r1, r1, #12
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781e:	430b      	orrs	r3, r1
 8007820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800782c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782e:	6999      	ldr	r1, [r3, #24]
 8007830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	ea40 0301 	orr.w	r3, r0, r1
 8007838:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800783a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4bc5      	ldr	r3, [pc, #788]	; (8007b54 <UART_SetConfig+0x384>)
 8007840:	429a      	cmp	r2, r3
 8007842:	d004      	beq.n	800784e <UART_SetConfig+0x7e>
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4bc3      	ldr	r3, [pc, #780]	; (8007b58 <UART_SetConfig+0x388>)
 800784a:	429a      	cmp	r2, r3
 800784c:	d103      	bne.n	8007856 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800784e:	f7fd fc5f 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8007852:	6778      	str	r0, [r7, #116]	; 0x74
 8007854:	e002      	b.n	800785c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007856:	f7fd fc47 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 800785a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800785c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007864:	f040 80b6 	bne.w	80079d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786a:	461c      	mov	r4, r3
 800786c:	f04f 0500 	mov.w	r5, #0
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	1891      	adds	r1, r2, r2
 8007876:	6439      	str	r1, [r7, #64]	; 0x40
 8007878:	415b      	adcs	r3, r3
 800787a:	647b      	str	r3, [r7, #68]	; 0x44
 800787c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007880:	1912      	adds	r2, r2, r4
 8007882:	eb45 0303 	adc.w	r3, r5, r3
 8007886:	f04f 0000 	mov.w	r0, #0
 800788a:	f04f 0100 	mov.w	r1, #0
 800788e:	00d9      	lsls	r1, r3, #3
 8007890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007894:	00d0      	lsls	r0, r2, #3
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	1911      	adds	r1, r2, r4
 800789c:	6639      	str	r1, [r7, #96]	; 0x60
 800789e:	416b      	adcs	r3, r5
 80078a0:	667b      	str	r3, [r7, #100]	; 0x64
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	1891      	adds	r1, r2, r2
 80078ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80078b0:	415b      	adcs	r3, r3
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078bc:	f7f9 fa04 	bl	8000cc8 <__aeabi_uldivmod>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4ba5      	ldr	r3, [pc, #660]	; (8007b5c <UART_SetConfig+0x38c>)
 80078c6:	fba3 2302 	umull	r2, r3, r3, r2
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	011e      	lsls	r6, r3, #4
 80078ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d0:	461c      	mov	r4, r3
 80078d2:	f04f 0500 	mov.w	r5, #0
 80078d6:	4622      	mov	r2, r4
 80078d8:	462b      	mov	r3, r5
 80078da:	1891      	adds	r1, r2, r2
 80078dc:	6339      	str	r1, [r7, #48]	; 0x30
 80078de:	415b      	adcs	r3, r3
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078e6:	1912      	adds	r2, r2, r4
 80078e8:	eb45 0303 	adc.w	r3, r5, r3
 80078ec:	f04f 0000 	mov.w	r0, #0
 80078f0:	f04f 0100 	mov.w	r1, #0
 80078f4:	00d9      	lsls	r1, r3, #3
 80078f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078fa:	00d0      	lsls	r0, r2, #3
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	1911      	adds	r1, r2, r4
 8007902:	65b9      	str	r1, [r7, #88]	; 0x58
 8007904:	416b      	adcs	r3, r5
 8007906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	461a      	mov	r2, r3
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	1891      	adds	r1, r2, r2
 8007914:	62b9      	str	r1, [r7, #40]	; 0x28
 8007916:	415b      	adcs	r3, r3
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800791a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800791e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007922:	f7f9 f9d1 	bl	8000cc8 <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4b8c      	ldr	r3, [pc, #560]	; (8007b5c <UART_SetConfig+0x38c>)
 800792c:	fba3 1302 	umull	r1, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	2164      	movs	r1, #100	; 0x64
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	3332      	adds	r3, #50	; 0x32
 800793e:	4a87      	ldr	r2, [pc, #540]	; (8007b5c <UART_SetConfig+0x38c>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800794c:	441e      	add	r6, r3
 800794e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007950:	4618      	mov	r0, r3
 8007952:	f04f 0100 	mov.w	r1, #0
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	1894      	adds	r4, r2, r2
 800795c:	623c      	str	r4, [r7, #32]
 800795e:	415b      	adcs	r3, r3
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007966:	1812      	adds	r2, r2, r0
 8007968:	eb41 0303 	adc.w	r3, r1, r3
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	f04f 0500 	mov.w	r5, #0
 8007974:	00dd      	lsls	r5, r3, #3
 8007976:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800797a:	00d4      	lsls	r4, r2, #3
 800797c:	4622      	mov	r2, r4
 800797e:	462b      	mov	r3, r5
 8007980:	1814      	adds	r4, r2, r0
 8007982:	653c      	str	r4, [r7, #80]	; 0x50
 8007984:	414b      	adcs	r3, r1
 8007986:	657b      	str	r3, [r7, #84]	; 0x54
 8007988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	461a      	mov	r2, r3
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	1891      	adds	r1, r2, r2
 8007994:	61b9      	str	r1, [r7, #24]
 8007996:	415b      	adcs	r3, r3
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800799e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80079a2:	f7f9 f991 	bl	8000cc8 <__aeabi_uldivmod>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4b6c      	ldr	r3, [pc, #432]	; (8007b5c <UART_SetConfig+0x38c>)
 80079ac:	fba3 1302 	umull	r1, r3, r3, r2
 80079b0:	095b      	lsrs	r3, r3, #5
 80079b2:	2164      	movs	r1, #100	; 0x64
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	3332      	adds	r3, #50	; 0x32
 80079be:	4a67      	ldr	r2, [pc, #412]	; (8007b5c <UART_SetConfig+0x38c>)
 80079c0:	fba2 2303 	umull	r2, r3, r2, r3
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	f003 0207 	and.w	r2, r3, #7
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4432      	add	r2, r6
 80079d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079d2:	e0b9      	b.n	8007b48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d6:	461c      	mov	r4, r3
 80079d8:	f04f 0500 	mov.w	r5, #0
 80079dc:	4622      	mov	r2, r4
 80079de:	462b      	mov	r3, r5
 80079e0:	1891      	adds	r1, r2, r2
 80079e2:	6139      	str	r1, [r7, #16]
 80079e4:	415b      	adcs	r3, r3
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079ec:	1912      	adds	r2, r2, r4
 80079ee:	eb45 0303 	adc.w	r3, r5, r3
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	00d9      	lsls	r1, r3, #3
 80079fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a00:	00d0      	lsls	r0, r2, #3
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	eb12 0804 	adds.w	r8, r2, r4
 8007a0a:	eb43 0905 	adc.w	r9, r3, r5
 8007a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f04f 0100 	mov.w	r1, #0
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	008b      	lsls	r3, r1, #2
 8007a22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a26:	0082      	lsls	r2, r0, #2
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f9 f94c 	bl	8000cc8 <__aeabi_uldivmod>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4b49      	ldr	r3, [pc, #292]	; (8007b5c <UART_SetConfig+0x38c>)
 8007a36:	fba3 2302 	umull	r2, r3, r3, r2
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	011e      	lsls	r6, r3, #4
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a40:	4618      	mov	r0, r3
 8007a42:	f04f 0100 	mov.w	r1, #0
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	1894      	adds	r4, r2, r2
 8007a4c:	60bc      	str	r4, [r7, #8]
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a56:	1812      	adds	r2, r2, r0
 8007a58:	eb41 0303 	adc.w	r3, r1, r3
 8007a5c:	f04f 0400 	mov.w	r4, #0
 8007a60:	f04f 0500 	mov.w	r5, #0
 8007a64:	00dd      	lsls	r5, r3, #3
 8007a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a6a:	00d4      	lsls	r4, r2, #3
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	462b      	mov	r3, r5
 8007a70:	1814      	adds	r4, r2, r0
 8007a72:	64bc      	str	r4, [r7, #72]	; 0x48
 8007a74:	414b      	adcs	r3, r1
 8007a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	008b      	lsls	r3, r1, #2
 8007a8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a90:	0082      	lsls	r2, r0, #2
 8007a92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a96:	f7f9 f917 	bl	8000cc8 <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <UART_SetConfig+0x38c>)
 8007aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	2164      	movs	r1, #100	; 0x64
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	3332      	adds	r3, #50	; 0x32
 8007ab2:	4a2a      	ldr	r2, [pc, #168]	; (8007b5c <UART_SetConfig+0x38c>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007abe:	441e      	add	r6, r3
 8007ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f04f 0100 	mov.w	r1, #0
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	1894      	adds	r4, r2, r2
 8007ace:	603c      	str	r4, [r7, #0]
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	607b      	str	r3, [r7, #4]
 8007ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad8:	1812      	adds	r2, r2, r0
 8007ada:	eb41 0303 	adc.w	r3, r1, r3
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	f04f 0500 	mov.w	r5, #0
 8007ae6:	00dd      	lsls	r5, r3, #3
 8007ae8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007aec:	00d4      	lsls	r4, r2, #3
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	eb12 0a00 	adds.w	sl, r2, r0
 8007af6:	eb43 0b01 	adc.w	fp, r3, r1
 8007afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	008b      	lsls	r3, r1, #2
 8007b0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b12:	0082      	lsls	r2, r0, #2
 8007b14:	4650      	mov	r0, sl
 8007b16:	4659      	mov	r1, fp
 8007b18:	f7f9 f8d6 	bl	8000cc8 <__aeabi_uldivmod>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4b0e      	ldr	r3, [pc, #56]	; (8007b5c <UART_SetConfig+0x38c>)
 8007b22:	fba3 1302 	umull	r1, r3, r3, r2
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	2164      	movs	r1, #100	; 0x64
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	3332      	adds	r3, #50	; 0x32
 8007b34:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <UART_SetConfig+0x38c>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	f003 020f 	and.w	r2, r3, #15
 8007b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4432      	add	r2, r6
 8007b46:	609a      	str	r2, [r3, #8]
}
 8007b48:	bf00      	nop
 8007b4a:	377c      	adds	r7, #124	; 0x7c
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b52:	bf00      	nop
 8007b54:	40011000 	.word	0x40011000
 8007b58:	40011400 	.word	0x40011400
 8007b5c:	51eb851f 	.word	0x51eb851f

08007b60 <__errno>:
 8007b60:	4b01      	ldr	r3, [pc, #4]	; (8007b68 <__errno+0x8>)
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	200000d4 	.word	0x200000d4

08007b6c <__libc_init_array>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ba4 <__libc_init_array+0x38>)
 8007b70:	4c0d      	ldr	r4, [pc, #52]	; (8007ba8 <__libc_init_array+0x3c>)
 8007b72:	1b64      	subs	r4, r4, r5
 8007b74:	10a4      	asrs	r4, r4, #2
 8007b76:	2600      	movs	r6, #0
 8007b78:	42a6      	cmp	r6, r4
 8007b7a:	d109      	bne.n	8007b90 <__libc_init_array+0x24>
 8007b7c:	4d0b      	ldr	r5, [pc, #44]	; (8007bac <__libc_init_array+0x40>)
 8007b7e:	4c0c      	ldr	r4, [pc, #48]	; (8007bb0 <__libc_init_array+0x44>)
 8007b80:	f005 fa06 	bl	800cf90 <_init>
 8007b84:	1b64      	subs	r4, r4, r5
 8007b86:	10a4      	asrs	r4, r4, #2
 8007b88:	2600      	movs	r6, #0
 8007b8a:	42a6      	cmp	r6, r4
 8007b8c:	d105      	bne.n	8007b9a <__libc_init_array+0x2e>
 8007b8e:	bd70      	pop	{r4, r5, r6, pc}
 8007b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b94:	4798      	blx	r3
 8007b96:	3601      	adds	r6, #1
 8007b98:	e7ee      	b.n	8007b78 <__libc_init_array+0xc>
 8007b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b9e:	4798      	blx	r3
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	e7f2      	b.n	8007b8a <__libc_init_array+0x1e>
 8007ba4:	0800d700 	.word	0x0800d700
 8007ba8:	0800d700 	.word	0x0800d700
 8007bac:	0800d700 	.word	0x0800d700
 8007bb0:	0800d704 	.word	0x0800d704

08007bb4 <memset>:
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d100      	bne.n	8007bbe <memset+0xa>
 8007bbc:	4770      	bx	lr
 8007bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc2:	e7f9      	b.n	8007bb8 <memset+0x4>

08007bc4 <__cvt>:
 8007bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	ec55 4b10 	vmov	r4, r5, d0
 8007bcc:	2d00      	cmp	r5, #0
 8007bce:	460e      	mov	r6, r1
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	462b      	mov	r3, r5
 8007bd4:	bfbb      	ittet	lt
 8007bd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bda:	461d      	movlt	r5, r3
 8007bdc:	2300      	movge	r3, #0
 8007bde:	232d      	movlt	r3, #45	; 0x2d
 8007be0:	700b      	strb	r3, [r1, #0]
 8007be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007be8:	4691      	mov	r9, r2
 8007bea:	f023 0820 	bic.w	r8, r3, #32
 8007bee:	bfbc      	itt	lt
 8007bf0:	4622      	movlt	r2, r4
 8007bf2:	4614      	movlt	r4, r2
 8007bf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bf8:	d005      	beq.n	8007c06 <__cvt+0x42>
 8007bfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bfe:	d100      	bne.n	8007c02 <__cvt+0x3e>
 8007c00:	3601      	adds	r6, #1
 8007c02:	2102      	movs	r1, #2
 8007c04:	e000      	b.n	8007c08 <__cvt+0x44>
 8007c06:	2103      	movs	r1, #3
 8007c08:	ab03      	add	r3, sp, #12
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	ab02      	add	r3, sp, #8
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	ec45 4b10 	vmov	d0, r4, r5
 8007c14:	4653      	mov	r3, sl
 8007c16:	4632      	mov	r2, r6
 8007c18:	f000 feee 	bl	80089f8 <_dtoa_r>
 8007c1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c20:	4607      	mov	r7, r0
 8007c22:	d102      	bne.n	8007c2a <__cvt+0x66>
 8007c24:	f019 0f01 	tst.w	r9, #1
 8007c28:	d022      	beq.n	8007c70 <__cvt+0xac>
 8007c2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c2e:	eb07 0906 	add.w	r9, r7, r6
 8007c32:	d110      	bne.n	8007c56 <__cvt+0x92>
 8007c34:	783b      	ldrb	r3, [r7, #0]
 8007c36:	2b30      	cmp	r3, #48	; 0x30
 8007c38:	d10a      	bne.n	8007c50 <__cvt+0x8c>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 ff61 	bl	8000b08 <__aeabi_dcmpeq>
 8007c46:	b918      	cbnz	r0, 8007c50 <__cvt+0x8c>
 8007c48:	f1c6 0601 	rsb	r6, r6, #1
 8007c4c:	f8ca 6000 	str.w	r6, [sl]
 8007c50:	f8da 3000 	ldr.w	r3, [sl]
 8007c54:	4499      	add	r9, r3
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8007c62:	b108      	cbz	r0, 8007c68 <__cvt+0xa4>
 8007c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c68:	2230      	movs	r2, #48	; 0x30
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	454b      	cmp	r3, r9
 8007c6e:	d307      	bcc.n	8007c80 <__cvt+0xbc>
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c74:	1bdb      	subs	r3, r3, r7
 8007c76:	4638      	mov	r0, r7
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	b004      	add	sp, #16
 8007c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c80:	1c59      	adds	r1, r3, #1
 8007c82:	9103      	str	r1, [sp, #12]
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	e7f0      	b.n	8007c6a <__cvt+0xa6>

08007c88 <__exponent>:
 8007c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2900      	cmp	r1, #0
 8007c8e:	bfb8      	it	lt
 8007c90:	4249      	neglt	r1, r1
 8007c92:	f803 2b02 	strb.w	r2, [r3], #2
 8007c96:	bfb4      	ite	lt
 8007c98:	222d      	movlt	r2, #45	; 0x2d
 8007c9a:	222b      	movge	r2, #43	; 0x2b
 8007c9c:	2909      	cmp	r1, #9
 8007c9e:	7042      	strb	r2, [r0, #1]
 8007ca0:	dd2a      	ble.n	8007cf8 <__exponent+0x70>
 8007ca2:	f10d 0407 	add.w	r4, sp, #7
 8007ca6:	46a4      	mov	ip, r4
 8007ca8:	270a      	movs	r7, #10
 8007caa:	46a6      	mov	lr, r4
 8007cac:	460a      	mov	r2, r1
 8007cae:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cb2:	fb07 1516 	mls	r5, r7, r6, r1
 8007cb6:	3530      	adds	r5, #48	; 0x30
 8007cb8:	2a63      	cmp	r2, #99	; 0x63
 8007cba:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	dcf1      	bgt.n	8007caa <__exponent+0x22>
 8007cc6:	3130      	adds	r1, #48	; 0x30
 8007cc8:	f1ae 0502 	sub.w	r5, lr, #2
 8007ccc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cd0:	1c44      	adds	r4, r0, #1
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	4561      	cmp	r1, ip
 8007cd6:	d30a      	bcc.n	8007cee <__exponent+0x66>
 8007cd8:	f10d 0209 	add.w	r2, sp, #9
 8007cdc:	eba2 020e 	sub.w	r2, r2, lr
 8007ce0:	4565      	cmp	r5, ip
 8007ce2:	bf88      	it	hi
 8007ce4:	2200      	movhi	r2, #0
 8007ce6:	4413      	add	r3, r2
 8007ce8:	1a18      	subs	r0, r3, r0
 8007cea:	b003      	add	sp, #12
 8007cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cf6:	e7ed      	b.n	8007cd4 <__exponent+0x4c>
 8007cf8:	2330      	movs	r3, #48	; 0x30
 8007cfa:	3130      	adds	r1, #48	; 0x30
 8007cfc:	7083      	strb	r3, [r0, #2]
 8007cfe:	70c1      	strb	r1, [r0, #3]
 8007d00:	1d03      	adds	r3, r0, #4
 8007d02:	e7f1      	b.n	8007ce8 <__exponent+0x60>

08007d04 <_printf_float>:
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	ed2d 8b02 	vpush	{d8}
 8007d0c:	b08d      	sub	sp, #52	; 0x34
 8007d0e:	460c      	mov	r4, r1
 8007d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d14:	4616      	mov	r6, r2
 8007d16:	461f      	mov	r7, r3
 8007d18:	4605      	mov	r5, r0
 8007d1a:	f001 fe11 	bl	8009940 <_localeconv_r>
 8007d1e:	f8d0 a000 	ldr.w	sl, [r0]
 8007d22:	4650      	mov	r0, sl
 8007d24:	f7f8 fa74 	bl	8000210 <strlen>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	f8d8 3000 	ldr.w	r3, [r8]
 8007d34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d38:	3307      	adds	r3, #7
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	f103 0208 	add.w	r2, r3, #8
 8007d42:	f8c8 2000 	str.w	r2, [r8]
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d5c:	ee08 0a10 	vmov	s16, r0
 8007d60:	4b9f      	ldr	r3, [pc, #636]	; (8007fe0 <_printf_float+0x2dc>)
 8007d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6a:	f7f8 feff 	bl	8000b6c <__aeabi_dcmpun>
 8007d6e:	bb88      	cbnz	r0, 8007dd4 <_printf_float+0xd0>
 8007d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d74:	4b9a      	ldr	r3, [pc, #616]	; (8007fe0 <_printf_float+0x2dc>)
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	f7f8 fed9 	bl	8000b30 <__aeabi_dcmple>
 8007d7e:	bb48      	cbnz	r0, 8007dd4 <_printf_float+0xd0>
 8007d80:	2200      	movs	r2, #0
 8007d82:	2300      	movs	r3, #0
 8007d84:	4640      	mov	r0, r8
 8007d86:	4649      	mov	r1, r9
 8007d88:	f7f8 fec8 	bl	8000b1c <__aeabi_dcmplt>
 8007d8c:	b110      	cbz	r0, 8007d94 <_printf_float+0x90>
 8007d8e:	232d      	movs	r3, #45	; 0x2d
 8007d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d94:	4b93      	ldr	r3, [pc, #588]	; (8007fe4 <_printf_float+0x2e0>)
 8007d96:	4894      	ldr	r0, [pc, #592]	; (8007fe8 <_printf_float+0x2e4>)
 8007d98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d9c:	bf94      	ite	ls
 8007d9e:	4698      	movls	r8, r3
 8007da0:	4680      	movhi	r8, r0
 8007da2:	2303      	movs	r3, #3
 8007da4:	6123      	str	r3, [r4, #16]
 8007da6:	9b05      	ldr	r3, [sp, #20]
 8007da8:	f023 0204 	bic.w	r2, r3, #4
 8007dac:	6022      	str	r2, [r4, #0]
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	9700      	str	r7, [sp, #0]
 8007db4:	4633      	mov	r3, r6
 8007db6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f9d8 	bl	8008170 <_printf_common>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f040 8090 	bne.w	8007ee6 <_printf_float+0x1e2>
 8007dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dca:	b00d      	add	sp, #52	; 0x34
 8007dcc:	ecbd 8b02 	vpop	{d8}
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fec6 	bl	8000b6c <__aeabi_dcmpun>
 8007de0:	b140      	cbz	r0, 8007df4 <_printf_float+0xf0>
 8007de2:	464b      	mov	r3, r9
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bfbc      	itt	lt
 8007de8:	232d      	movlt	r3, #45	; 0x2d
 8007dea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dee:	487f      	ldr	r0, [pc, #508]	; (8007fec <_printf_float+0x2e8>)
 8007df0:	4b7f      	ldr	r3, [pc, #508]	; (8007ff0 <_printf_float+0x2ec>)
 8007df2:	e7d1      	b.n	8007d98 <_printf_float+0x94>
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007dfa:	9206      	str	r2, [sp, #24]
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	d13f      	bne.n	8007e80 <_printf_float+0x17c>
 8007e00:	2306      	movs	r3, #6
 8007e02:	6063      	str	r3, [r4, #4]
 8007e04:	9b05      	ldr	r3, [sp, #20]
 8007e06:	6861      	ldr	r1, [r4, #4]
 8007e08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	ab0a      	add	r3, sp, #40	; 0x28
 8007e12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e16:	ab09      	add	r3, sp, #36	; 0x24
 8007e18:	ec49 8b10 	vmov	d0, r8, r9
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	6022      	str	r2, [r4, #0]
 8007e20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e24:	4628      	mov	r0, r5
 8007e26:	f7ff fecd 	bl	8007bc4 <__cvt>
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e2e:	2b47      	cmp	r3, #71	; 0x47
 8007e30:	4680      	mov	r8, r0
 8007e32:	d108      	bne.n	8007e46 <_printf_float+0x142>
 8007e34:	1cc8      	adds	r0, r1, #3
 8007e36:	db02      	blt.n	8007e3e <_printf_float+0x13a>
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	4299      	cmp	r1, r3
 8007e3c:	dd41      	ble.n	8007ec2 <_printf_float+0x1be>
 8007e3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e42:	fa5f fb8b 	uxtb.w	fp, fp
 8007e46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e4a:	d820      	bhi.n	8007e8e <_printf_float+0x18a>
 8007e4c:	3901      	subs	r1, #1
 8007e4e:	465a      	mov	r2, fp
 8007e50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e54:	9109      	str	r1, [sp, #36]	; 0x24
 8007e56:	f7ff ff17 	bl	8007c88 <__exponent>
 8007e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e5c:	1813      	adds	r3, r2, r0
 8007e5e:	2a01      	cmp	r2, #1
 8007e60:	4681      	mov	r9, r0
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	dc02      	bgt.n	8007e6c <_printf_float+0x168>
 8007e66:	6822      	ldr	r2, [r4, #0]
 8007e68:	07d2      	lsls	r2, r2, #31
 8007e6a:	d501      	bpl.n	8007e70 <_printf_float+0x16c>
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d09c      	beq.n	8007db2 <_printf_float+0xae>
 8007e78:	232d      	movs	r3, #45	; 0x2d
 8007e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e7e:	e798      	b.n	8007db2 <_printf_float+0xae>
 8007e80:	9a06      	ldr	r2, [sp, #24]
 8007e82:	2a47      	cmp	r2, #71	; 0x47
 8007e84:	d1be      	bne.n	8007e04 <_printf_float+0x100>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1bc      	bne.n	8007e04 <_printf_float+0x100>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7b9      	b.n	8007e02 <_printf_float+0xfe>
 8007e8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e92:	d118      	bne.n	8007ec6 <_printf_float+0x1c2>
 8007e94:	2900      	cmp	r1, #0
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	dd0b      	ble.n	8007eb2 <_printf_float+0x1ae>
 8007e9a:	6121      	str	r1, [r4, #16]
 8007e9c:	b913      	cbnz	r3, 8007ea4 <_printf_float+0x1a0>
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	07d0      	lsls	r0, r2, #31
 8007ea2:	d502      	bpl.n	8007eaa <_printf_float+0x1a6>
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	440b      	add	r3, r1
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8007eac:	f04f 0900 	mov.w	r9, #0
 8007eb0:	e7de      	b.n	8007e70 <_printf_float+0x16c>
 8007eb2:	b913      	cbnz	r3, 8007eba <_printf_float+0x1b6>
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	07d2      	lsls	r2, r2, #31
 8007eb8:	d501      	bpl.n	8007ebe <_printf_float+0x1ba>
 8007eba:	3302      	adds	r3, #2
 8007ebc:	e7f4      	b.n	8007ea8 <_printf_float+0x1a4>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e7f2      	b.n	8007ea8 <_printf_float+0x1a4>
 8007ec2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec8:	4299      	cmp	r1, r3
 8007eca:	db05      	blt.n	8007ed8 <_printf_float+0x1d4>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	6121      	str	r1, [r4, #16]
 8007ed0:	07d8      	lsls	r0, r3, #31
 8007ed2:	d5ea      	bpl.n	8007eaa <_printf_float+0x1a6>
 8007ed4:	1c4b      	adds	r3, r1, #1
 8007ed6:	e7e7      	b.n	8007ea8 <_printf_float+0x1a4>
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	bfd4      	ite	le
 8007edc:	f1c1 0202 	rsble	r2, r1, #2
 8007ee0:	2201      	movgt	r2, #1
 8007ee2:	4413      	add	r3, r2
 8007ee4:	e7e0      	b.n	8007ea8 <_printf_float+0x1a4>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	055a      	lsls	r2, r3, #21
 8007eea:	d407      	bmi.n	8007efc <_printf_float+0x1f8>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	4642      	mov	r2, r8
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d12c      	bne.n	8007f54 <_printf_float+0x250>
 8007efa:	e764      	b.n	8007dc6 <_printf_float+0xc2>
 8007efc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f00:	f240 80e0 	bls.w	80080c4 <_printf_float+0x3c0>
 8007f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f7f8 fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d034      	beq.n	8007f7e <_printf_float+0x27a>
 8007f14:	4a37      	ldr	r2, [pc, #220]	; (8007ff4 <_printf_float+0x2f0>)
 8007f16:	2301      	movs	r3, #1
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	f43f af51 	beq.w	8007dc6 <_printf_float+0xc2>
 8007f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	db02      	blt.n	8007f32 <_printf_float+0x22e>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	07d8      	lsls	r0, r3, #31
 8007f30:	d510      	bpl.n	8007f54 <_printf_float+0x250>
 8007f32:	ee18 3a10 	vmov	r3, s16
 8007f36:	4652      	mov	r2, sl
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	47b8      	blx	r7
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f43f af41 	beq.w	8007dc6 <_printf_float+0xc2>
 8007f44:	f04f 0800 	mov.w	r8, #0
 8007f48:	f104 091a 	add.w	r9, r4, #26
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	4543      	cmp	r3, r8
 8007f52:	dc09      	bgt.n	8007f68 <_printf_float+0x264>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	079b      	lsls	r3, r3, #30
 8007f58:	f100 8105 	bmi.w	8008166 <_printf_float+0x462>
 8007f5c:	68e0      	ldr	r0, [r4, #12]
 8007f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f60:	4298      	cmp	r0, r3
 8007f62:	bfb8      	it	lt
 8007f64:	4618      	movlt	r0, r3
 8007f66:	e730      	b.n	8007dca <_printf_float+0xc6>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	464a      	mov	r2, r9
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	47b8      	blx	r7
 8007f72:	3001      	adds	r0, #1
 8007f74:	f43f af27 	beq.w	8007dc6 <_printf_float+0xc2>
 8007f78:	f108 0801 	add.w	r8, r8, #1
 8007f7c:	e7e6      	b.n	8007f4c <_printf_float+0x248>
 8007f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dc39      	bgt.n	8007ff8 <_printf_float+0x2f4>
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <_printf_float+0x2f0>)
 8007f86:	2301      	movs	r3, #1
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af19 	beq.w	8007dc6 <_printf_float+0xc2>
 8007f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	d102      	bne.n	8007fa2 <_printf_float+0x29e>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	07d9      	lsls	r1, r3, #31
 8007fa0:	d5d8      	bpl.n	8007f54 <_printf_float+0x250>
 8007fa2:	ee18 3a10 	vmov	r3, s16
 8007fa6:	4652      	mov	r2, sl
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	f43f af09 	beq.w	8007dc6 <_printf_float+0xc2>
 8007fb4:	f04f 0900 	mov.w	r9, #0
 8007fb8:	f104 0a1a 	add.w	sl, r4, #26
 8007fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbe:	425b      	negs	r3, r3
 8007fc0:	454b      	cmp	r3, r9
 8007fc2:	dc01      	bgt.n	8007fc8 <_printf_float+0x2c4>
 8007fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc6:	e792      	b.n	8007eee <_printf_float+0x1ea>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4652      	mov	r2, sl
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	47b8      	blx	r7
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	f43f aef7 	beq.w	8007dc6 <_printf_float+0xc2>
 8007fd8:	f109 0901 	add.w	r9, r9, #1
 8007fdc:	e7ee      	b.n	8007fbc <_printf_float+0x2b8>
 8007fde:	bf00      	nop
 8007fe0:	7fefffff 	.word	0x7fefffff
 8007fe4:	0800d07c 	.word	0x0800d07c
 8007fe8:	0800d080 	.word	0x0800d080
 8007fec:	0800d088 	.word	0x0800d088
 8007ff0:	0800d084 	.word	0x0800d084
 8007ff4:	0800d08c 	.word	0x0800d08c
 8007ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	bfa8      	it	ge
 8008000:	461a      	movge	r2, r3
 8008002:	2a00      	cmp	r2, #0
 8008004:	4691      	mov	r9, r2
 8008006:	dc37      	bgt.n	8008078 <_printf_float+0x374>
 8008008:	f04f 0b00 	mov.w	fp, #0
 800800c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008010:	f104 021a 	add.w	r2, r4, #26
 8008014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008016:	9305      	str	r3, [sp, #20]
 8008018:	eba3 0309 	sub.w	r3, r3, r9
 800801c:	455b      	cmp	r3, fp
 800801e:	dc33      	bgt.n	8008088 <_printf_float+0x384>
 8008020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008024:	429a      	cmp	r2, r3
 8008026:	db3b      	blt.n	80080a0 <_printf_float+0x39c>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	07da      	lsls	r2, r3, #31
 800802c:	d438      	bmi.n	80080a0 <_printf_float+0x39c>
 800802e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	eba2 0901 	sub.w	r9, r2, r1
 800803a:	4599      	cmp	r9, r3
 800803c:	bfa8      	it	ge
 800803e:	4699      	movge	r9, r3
 8008040:	f1b9 0f00 	cmp.w	r9, #0
 8008044:	dc35      	bgt.n	80080b2 <_printf_float+0x3ae>
 8008046:	f04f 0800 	mov.w	r8, #0
 800804a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800804e:	f104 0a1a 	add.w	sl, r4, #26
 8008052:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	eba3 0309 	sub.w	r3, r3, r9
 800805c:	4543      	cmp	r3, r8
 800805e:	f77f af79 	ble.w	8007f54 <_printf_float+0x250>
 8008062:	2301      	movs	r3, #1
 8008064:	4652      	mov	r2, sl
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f aeaa 	beq.w	8007dc6 <_printf_float+0xc2>
 8008072:	f108 0801 	add.w	r8, r8, #1
 8008076:	e7ec      	b.n	8008052 <_printf_float+0x34e>
 8008078:	4613      	mov	r3, r2
 800807a:	4631      	mov	r1, r6
 800807c:	4642      	mov	r2, r8
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	d1c0      	bne.n	8008008 <_printf_float+0x304>
 8008086:	e69e      	b.n	8007dc6 <_printf_float+0xc2>
 8008088:	2301      	movs	r3, #1
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	9205      	str	r2, [sp, #20]
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	f43f ae97 	beq.w	8007dc6 <_printf_float+0xc2>
 8008098:	9a05      	ldr	r2, [sp, #20]
 800809a:	f10b 0b01 	add.w	fp, fp, #1
 800809e:	e7b9      	b.n	8008014 <_printf_float+0x310>
 80080a0:	ee18 3a10 	vmov	r3, s16
 80080a4:	4652      	mov	r2, sl
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	d1be      	bne.n	800802e <_printf_float+0x32a>
 80080b0:	e689      	b.n	8007dc6 <_printf_float+0xc2>
 80080b2:	9a05      	ldr	r2, [sp, #20]
 80080b4:	464b      	mov	r3, r9
 80080b6:	4442      	add	r2, r8
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	d1c1      	bne.n	8008046 <_printf_float+0x342>
 80080c2:	e680      	b.n	8007dc6 <_printf_float+0xc2>
 80080c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c6:	2a01      	cmp	r2, #1
 80080c8:	dc01      	bgt.n	80080ce <_printf_float+0x3ca>
 80080ca:	07db      	lsls	r3, r3, #31
 80080cc:	d538      	bpl.n	8008140 <_printf_float+0x43c>
 80080ce:	2301      	movs	r3, #1
 80080d0:	4642      	mov	r2, r8
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f ae74 	beq.w	8007dc6 <_printf_float+0xc2>
 80080de:	ee18 3a10 	vmov	r3, s16
 80080e2:	4652      	mov	r2, sl
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f ae6b 	beq.w	8007dc6 <_printf_float+0xc2>
 80080f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	f7f8 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 80080fc:	b9d8      	cbnz	r0, 8008136 <_printf_float+0x432>
 80080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008100:	f108 0201 	add.w	r2, r8, #1
 8008104:	3b01      	subs	r3, #1
 8008106:	4631      	mov	r1, r6
 8008108:	4628      	mov	r0, r5
 800810a:	47b8      	blx	r7
 800810c:	3001      	adds	r0, #1
 800810e:	d10e      	bne.n	800812e <_printf_float+0x42a>
 8008110:	e659      	b.n	8007dc6 <_printf_float+0xc2>
 8008112:	2301      	movs	r3, #1
 8008114:	4652      	mov	r2, sl
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	f43f ae52 	beq.w	8007dc6 <_printf_float+0xc2>
 8008122:	f108 0801 	add.w	r8, r8, #1
 8008126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008128:	3b01      	subs	r3, #1
 800812a:	4543      	cmp	r3, r8
 800812c:	dcf1      	bgt.n	8008112 <_printf_float+0x40e>
 800812e:	464b      	mov	r3, r9
 8008130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008134:	e6dc      	b.n	8007ef0 <_printf_float+0x1ec>
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	f104 0a1a 	add.w	sl, r4, #26
 800813e:	e7f2      	b.n	8008126 <_printf_float+0x422>
 8008140:	2301      	movs	r3, #1
 8008142:	4642      	mov	r2, r8
 8008144:	e7df      	b.n	8008106 <_printf_float+0x402>
 8008146:	2301      	movs	r3, #1
 8008148:	464a      	mov	r2, r9
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae38 	beq.w	8007dc6 <_printf_float+0xc2>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	4543      	cmp	r3, r8
 8008162:	dcf0      	bgt.n	8008146 <_printf_float+0x442>
 8008164:	e6fa      	b.n	8007f5c <_printf_float+0x258>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	f104 0919 	add.w	r9, r4, #25
 800816e:	e7f4      	b.n	800815a <_printf_float+0x456>

08008170 <_printf_common>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	4616      	mov	r6, r2
 8008176:	4699      	mov	r9, r3
 8008178:	688a      	ldr	r2, [r1, #8]
 800817a:	690b      	ldr	r3, [r1, #16]
 800817c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008180:	4293      	cmp	r3, r2
 8008182:	bfb8      	it	lt
 8008184:	4613      	movlt	r3, r2
 8008186:	6033      	str	r3, [r6, #0]
 8008188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800818c:	4607      	mov	r7, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b10a      	cbz	r2, 8008196 <_printf_common+0x26>
 8008192:	3301      	adds	r3, #1
 8008194:	6033      	str	r3, [r6, #0]
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	0699      	lsls	r1, r3, #26
 800819a:	bf42      	ittt	mi
 800819c:	6833      	ldrmi	r3, [r6, #0]
 800819e:	3302      	addmi	r3, #2
 80081a0:	6033      	strmi	r3, [r6, #0]
 80081a2:	6825      	ldr	r5, [r4, #0]
 80081a4:	f015 0506 	ands.w	r5, r5, #6
 80081a8:	d106      	bne.n	80081b8 <_printf_common+0x48>
 80081aa:	f104 0a19 	add.w	sl, r4, #25
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	6832      	ldr	r2, [r6, #0]
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dc26      	bgt.n	8008206 <_printf_common+0x96>
 80081b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081bc:	1e13      	subs	r3, r2, #0
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	bf18      	it	ne
 80081c2:	2301      	movne	r3, #1
 80081c4:	0692      	lsls	r2, r2, #26
 80081c6:	d42b      	bmi.n	8008220 <_printf_common+0xb0>
 80081c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081cc:	4649      	mov	r1, r9
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c0      	blx	r8
 80081d2:	3001      	adds	r0, #1
 80081d4:	d01e      	beq.n	8008214 <_printf_common+0xa4>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	68e5      	ldr	r5, [r4, #12]
 80081da:	6832      	ldr	r2, [r6, #0]
 80081dc:	f003 0306 	and.w	r3, r3, #6
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	bf08      	it	eq
 80081e4:	1aad      	subeq	r5, r5, r2
 80081e6:	68a3      	ldr	r3, [r4, #8]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	bf0c      	ite	eq
 80081ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f0:	2500      	movne	r5, #0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	bfc4      	itt	gt
 80081f6:	1a9b      	subgt	r3, r3, r2
 80081f8:	18ed      	addgt	r5, r5, r3
 80081fa:	2600      	movs	r6, #0
 80081fc:	341a      	adds	r4, #26
 80081fe:	42b5      	cmp	r5, r6
 8008200:	d11a      	bne.n	8008238 <_printf_common+0xc8>
 8008202:	2000      	movs	r0, #0
 8008204:	e008      	b.n	8008218 <_printf_common+0xa8>
 8008206:	2301      	movs	r3, #1
 8008208:	4652      	mov	r2, sl
 800820a:	4649      	mov	r1, r9
 800820c:	4638      	mov	r0, r7
 800820e:	47c0      	blx	r8
 8008210:	3001      	adds	r0, #1
 8008212:	d103      	bne.n	800821c <_printf_common+0xac>
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821c:	3501      	adds	r5, #1
 800821e:	e7c6      	b.n	80081ae <_printf_common+0x3e>
 8008220:	18e1      	adds	r1, r4, r3
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	2030      	movs	r0, #48	; 0x30
 8008226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800822a:	4422      	add	r2, r4
 800822c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008234:	3302      	adds	r3, #2
 8008236:	e7c7      	b.n	80081c8 <_printf_common+0x58>
 8008238:	2301      	movs	r3, #1
 800823a:	4622      	mov	r2, r4
 800823c:	4649      	mov	r1, r9
 800823e:	4638      	mov	r0, r7
 8008240:	47c0      	blx	r8
 8008242:	3001      	adds	r0, #1
 8008244:	d0e6      	beq.n	8008214 <_printf_common+0xa4>
 8008246:	3601      	adds	r6, #1
 8008248:	e7d9      	b.n	80081fe <_printf_common+0x8e>
	...

0800824c <_printf_i>:
 800824c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008250:	460c      	mov	r4, r1
 8008252:	4691      	mov	r9, r2
 8008254:	7e27      	ldrb	r7, [r4, #24]
 8008256:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008258:	2f78      	cmp	r7, #120	; 0x78
 800825a:	4680      	mov	r8, r0
 800825c:	469a      	mov	sl, r3
 800825e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008262:	d807      	bhi.n	8008274 <_printf_i+0x28>
 8008264:	2f62      	cmp	r7, #98	; 0x62
 8008266:	d80a      	bhi.n	800827e <_printf_i+0x32>
 8008268:	2f00      	cmp	r7, #0
 800826a:	f000 80d8 	beq.w	800841e <_printf_i+0x1d2>
 800826e:	2f58      	cmp	r7, #88	; 0x58
 8008270:	f000 80a3 	beq.w	80083ba <_printf_i+0x16e>
 8008274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800827c:	e03a      	b.n	80082f4 <_printf_i+0xa8>
 800827e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008282:	2b15      	cmp	r3, #21
 8008284:	d8f6      	bhi.n	8008274 <_printf_i+0x28>
 8008286:	a001      	add	r0, pc, #4	; (adr r0, 800828c <_printf_i+0x40>)
 8008288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082f9 	.word	0x080082f9
 8008294:	08008275 	.word	0x08008275
 8008298:	08008275 	.word	0x08008275
 800829c:	08008275 	.word	0x08008275
 80082a0:	08008275 	.word	0x08008275
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	08008275 	.word	0x08008275
 80082ac:	08008275 	.word	0x08008275
 80082b0:	08008275 	.word	0x08008275
 80082b4:	08008275 	.word	0x08008275
 80082b8:	08008405 	.word	0x08008405
 80082bc:	08008329 	.word	0x08008329
 80082c0:	080083e7 	.word	0x080083e7
 80082c4:	08008275 	.word	0x08008275
 80082c8:	08008275 	.word	0x08008275
 80082cc:	08008427 	.word	0x08008427
 80082d0:	08008275 	.word	0x08008275
 80082d4:	08008329 	.word	0x08008329
 80082d8:	08008275 	.word	0x08008275
 80082dc:	08008275 	.word	0x08008275
 80082e0:	080083ef 	.word	0x080083ef
 80082e4:	680b      	ldr	r3, [r1, #0]
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	600a      	str	r2, [r1, #0]
 80082ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0a3      	b.n	8008440 <_printf_i+0x1f4>
 80082f8:	6825      	ldr	r5, [r4, #0]
 80082fa:	6808      	ldr	r0, [r1, #0]
 80082fc:	062e      	lsls	r6, r5, #24
 80082fe:	f100 0304 	add.w	r3, r0, #4
 8008302:	d50a      	bpl.n	800831a <_printf_i+0xce>
 8008304:	6805      	ldr	r5, [r0, #0]
 8008306:	600b      	str	r3, [r1, #0]
 8008308:	2d00      	cmp	r5, #0
 800830a:	da03      	bge.n	8008314 <_printf_i+0xc8>
 800830c:	232d      	movs	r3, #45	; 0x2d
 800830e:	426d      	negs	r5, r5
 8008310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008314:	485e      	ldr	r0, [pc, #376]	; (8008490 <_printf_i+0x244>)
 8008316:	230a      	movs	r3, #10
 8008318:	e019      	b.n	800834e <_printf_i+0x102>
 800831a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800831e:	6805      	ldr	r5, [r0, #0]
 8008320:	600b      	str	r3, [r1, #0]
 8008322:	bf18      	it	ne
 8008324:	b22d      	sxthne	r5, r5
 8008326:	e7ef      	b.n	8008308 <_printf_i+0xbc>
 8008328:	680b      	ldr	r3, [r1, #0]
 800832a:	6825      	ldr	r5, [r4, #0]
 800832c:	1d18      	adds	r0, r3, #4
 800832e:	6008      	str	r0, [r1, #0]
 8008330:	0628      	lsls	r0, r5, #24
 8008332:	d501      	bpl.n	8008338 <_printf_i+0xec>
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	e002      	b.n	800833e <_printf_i+0xf2>
 8008338:	0669      	lsls	r1, r5, #25
 800833a:	d5fb      	bpl.n	8008334 <_printf_i+0xe8>
 800833c:	881d      	ldrh	r5, [r3, #0]
 800833e:	4854      	ldr	r0, [pc, #336]	; (8008490 <_printf_i+0x244>)
 8008340:	2f6f      	cmp	r7, #111	; 0x6f
 8008342:	bf0c      	ite	eq
 8008344:	2308      	moveq	r3, #8
 8008346:	230a      	movne	r3, #10
 8008348:	2100      	movs	r1, #0
 800834a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800834e:	6866      	ldr	r6, [r4, #4]
 8008350:	60a6      	str	r6, [r4, #8]
 8008352:	2e00      	cmp	r6, #0
 8008354:	bfa2      	ittt	ge
 8008356:	6821      	ldrge	r1, [r4, #0]
 8008358:	f021 0104 	bicge.w	r1, r1, #4
 800835c:	6021      	strge	r1, [r4, #0]
 800835e:	b90d      	cbnz	r5, 8008364 <_printf_i+0x118>
 8008360:	2e00      	cmp	r6, #0
 8008362:	d04d      	beq.n	8008400 <_printf_i+0x1b4>
 8008364:	4616      	mov	r6, r2
 8008366:	fbb5 f1f3 	udiv	r1, r5, r3
 800836a:	fb03 5711 	mls	r7, r3, r1, r5
 800836e:	5dc7      	ldrb	r7, [r0, r7]
 8008370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008374:	462f      	mov	r7, r5
 8008376:	42bb      	cmp	r3, r7
 8008378:	460d      	mov	r5, r1
 800837a:	d9f4      	bls.n	8008366 <_printf_i+0x11a>
 800837c:	2b08      	cmp	r3, #8
 800837e:	d10b      	bne.n	8008398 <_printf_i+0x14c>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	07df      	lsls	r7, r3, #31
 8008384:	d508      	bpl.n	8008398 <_printf_i+0x14c>
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	6861      	ldr	r1, [r4, #4]
 800838a:	4299      	cmp	r1, r3
 800838c:	bfde      	ittt	le
 800838e:	2330      	movle	r3, #48	; 0x30
 8008390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008394:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008398:	1b92      	subs	r2, r2, r6
 800839a:	6122      	str	r2, [r4, #16]
 800839c:	f8cd a000 	str.w	sl, [sp]
 80083a0:	464b      	mov	r3, r9
 80083a2:	aa03      	add	r2, sp, #12
 80083a4:	4621      	mov	r1, r4
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7ff fee2 	bl	8008170 <_printf_common>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d14c      	bne.n	800844a <_printf_i+0x1fe>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	b004      	add	sp, #16
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ba:	4835      	ldr	r0, [pc, #212]	; (8008490 <_printf_i+0x244>)
 80083bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	680e      	ldr	r6, [r1, #0]
 80083c4:	061f      	lsls	r7, r3, #24
 80083c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80083ca:	600e      	str	r6, [r1, #0]
 80083cc:	d514      	bpl.n	80083f8 <_printf_i+0x1ac>
 80083ce:	07d9      	lsls	r1, r3, #31
 80083d0:	bf44      	itt	mi
 80083d2:	f043 0320 	orrmi.w	r3, r3, #32
 80083d6:	6023      	strmi	r3, [r4, #0]
 80083d8:	b91d      	cbnz	r5, 80083e2 <_printf_i+0x196>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	f023 0320 	bic.w	r3, r3, #32
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	2310      	movs	r3, #16
 80083e4:	e7b0      	b.n	8008348 <_printf_i+0xfc>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f043 0320 	orr.w	r3, r3, #32
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	2378      	movs	r3, #120	; 0x78
 80083f0:	4828      	ldr	r0, [pc, #160]	; (8008494 <_printf_i+0x248>)
 80083f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083f6:	e7e3      	b.n	80083c0 <_printf_i+0x174>
 80083f8:	065e      	lsls	r6, r3, #25
 80083fa:	bf48      	it	mi
 80083fc:	b2ad      	uxthmi	r5, r5
 80083fe:	e7e6      	b.n	80083ce <_printf_i+0x182>
 8008400:	4616      	mov	r6, r2
 8008402:	e7bb      	b.n	800837c <_printf_i+0x130>
 8008404:	680b      	ldr	r3, [r1, #0]
 8008406:	6826      	ldr	r6, [r4, #0]
 8008408:	6960      	ldr	r0, [r4, #20]
 800840a:	1d1d      	adds	r5, r3, #4
 800840c:	600d      	str	r5, [r1, #0]
 800840e:	0635      	lsls	r5, r6, #24
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	d501      	bpl.n	8008418 <_printf_i+0x1cc>
 8008414:	6018      	str	r0, [r3, #0]
 8008416:	e002      	b.n	800841e <_printf_i+0x1d2>
 8008418:	0671      	lsls	r1, r6, #25
 800841a:	d5fb      	bpl.n	8008414 <_printf_i+0x1c8>
 800841c:	8018      	strh	r0, [r3, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	4616      	mov	r6, r2
 8008424:	e7ba      	b.n	800839c <_printf_i+0x150>
 8008426:	680b      	ldr	r3, [r1, #0]
 8008428:	1d1a      	adds	r2, r3, #4
 800842a:	600a      	str	r2, [r1, #0]
 800842c:	681e      	ldr	r6, [r3, #0]
 800842e:	6862      	ldr	r2, [r4, #4]
 8008430:	2100      	movs	r1, #0
 8008432:	4630      	mov	r0, r6
 8008434:	f7f7 fef4 	bl	8000220 <memchr>
 8008438:	b108      	cbz	r0, 800843e <_printf_i+0x1f2>
 800843a:	1b80      	subs	r0, r0, r6
 800843c:	6060      	str	r0, [r4, #4]
 800843e:	6863      	ldr	r3, [r4, #4]
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	2300      	movs	r3, #0
 8008444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008448:	e7a8      	b.n	800839c <_printf_i+0x150>
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	4632      	mov	r2, r6
 800844e:	4649      	mov	r1, r9
 8008450:	4640      	mov	r0, r8
 8008452:	47d0      	blx	sl
 8008454:	3001      	adds	r0, #1
 8008456:	d0ab      	beq.n	80083b0 <_printf_i+0x164>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	079b      	lsls	r3, r3, #30
 800845c:	d413      	bmi.n	8008486 <_printf_i+0x23a>
 800845e:	68e0      	ldr	r0, [r4, #12]
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	4298      	cmp	r0, r3
 8008464:	bfb8      	it	lt
 8008466:	4618      	movlt	r0, r3
 8008468:	e7a4      	b.n	80083b4 <_printf_i+0x168>
 800846a:	2301      	movs	r3, #1
 800846c:	4632      	mov	r2, r6
 800846e:	4649      	mov	r1, r9
 8008470:	4640      	mov	r0, r8
 8008472:	47d0      	blx	sl
 8008474:	3001      	adds	r0, #1
 8008476:	d09b      	beq.n	80083b0 <_printf_i+0x164>
 8008478:	3501      	adds	r5, #1
 800847a:	68e3      	ldr	r3, [r4, #12]
 800847c:	9903      	ldr	r1, [sp, #12]
 800847e:	1a5b      	subs	r3, r3, r1
 8008480:	42ab      	cmp	r3, r5
 8008482:	dcf2      	bgt.n	800846a <_printf_i+0x21e>
 8008484:	e7eb      	b.n	800845e <_printf_i+0x212>
 8008486:	2500      	movs	r5, #0
 8008488:	f104 0619 	add.w	r6, r4, #25
 800848c:	e7f5      	b.n	800847a <_printf_i+0x22e>
 800848e:	bf00      	nop
 8008490:	0800d08e 	.word	0x0800d08e
 8008494:	0800d09f 	.word	0x0800d09f

08008498 <iprintf>:
 8008498:	b40f      	push	{r0, r1, r2, r3}
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <iprintf+0x2c>)
 800849c:	b513      	push	{r0, r1, r4, lr}
 800849e:	681c      	ldr	r4, [r3, #0]
 80084a0:	b124      	cbz	r4, 80084ac <iprintf+0x14>
 80084a2:	69a3      	ldr	r3, [r4, #24]
 80084a4:	b913      	cbnz	r3, 80084ac <iprintf+0x14>
 80084a6:	4620      	mov	r0, r4
 80084a8:	f001 f9ac 	bl	8009804 <__sinit>
 80084ac:	ab05      	add	r3, sp, #20
 80084ae:	9a04      	ldr	r2, [sp, #16]
 80084b0:	68a1      	ldr	r1, [r4, #8]
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	4620      	mov	r0, r4
 80084b6:	f001 ff27 	bl	800a308 <_vfiprintf_r>
 80084ba:	b002      	add	sp, #8
 80084bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c0:	b004      	add	sp, #16
 80084c2:	4770      	bx	lr
 80084c4:	200000d4 	.word	0x200000d4

080084c8 <_puts_r>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	460e      	mov	r6, r1
 80084cc:	4605      	mov	r5, r0
 80084ce:	b118      	cbz	r0, 80084d8 <_puts_r+0x10>
 80084d0:	6983      	ldr	r3, [r0, #24]
 80084d2:	b90b      	cbnz	r3, 80084d8 <_puts_r+0x10>
 80084d4:	f001 f996 	bl	8009804 <__sinit>
 80084d8:	69ab      	ldr	r3, [r5, #24]
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	b913      	cbnz	r3, 80084e4 <_puts_r+0x1c>
 80084de:	4628      	mov	r0, r5
 80084e0:	f001 f990 	bl	8009804 <__sinit>
 80084e4:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <_puts_r+0xd0>)
 80084e6:	429c      	cmp	r4, r3
 80084e8:	d120      	bne.n	800852c <_puts_r+0x64>
 80084ea:	686c      	ldr	r4, [r5, #4]
 80084ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084ee:	07db      	lsls	r3, r3, #31
 80084f0:	d405      	bmi.n	80084fe <_puts_r+0x36>
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	0598      	lsls	r0, r3, #22
 80084f6:	d402      	bmi.n	80084fe <_puts_r+0x36>
 80084f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084fa:	f001 fa26 	bl	800994a <__retarget_lock_acquire_recursive>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	0719      	lsls	r1, r3, #28
 8008502:	d51d      	bpl.n	8008540 <_puts_r+0x78>
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	b1db      	cbz	r3, 8008540 <_puts_r+0x78>
 8008508:	3e01      	subs	r6, #1
 800850a:	68a3      	ldr	r3, [r4, #8]
 800850c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008510:	3b01      	subs	r3, #1
 8008512:	60a3      	str	r3, [r4, #8]
 8008514:	bb39      	cbnz	r1, 8008566 <_puts_r+0x9e>
 8008516:	2b00      	cmp	r3, #0
 8008518:	da38      	bge.n	800858c <_puts_r+0xc4>
 800851a:	4622      	mov	r2, r4
 800851c:	210a      	movs	r1, #10
 800851e:	4628      	mov	r0, r5
 8008520:	f000 f91e 	bl	8008760 <__swbuf_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d011      	beq.n	800854c <_puts_r+0x84>
 8008528:	250a      	movs	r5, #10
 800852a:	e011      	b.n	8008550 <_puts_r+0x88>
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <_puts_r+0xd4>)
 800852e:	429c      	cmp	r4, r3
 8008530:	d101      	bne.n	8008536 <_puts_r+0x6e>
 8008532:	68ac      	ldr	r4, [r5, #8]
 8008534:	e7da      	b.n	80084ec <_puts_r+0x24>
 8008536:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <_puts_r+0xd8>)
 8008538:	429c      	cmp	r4, r3
 800853a:	bf08      	it	eq
 800853c:	68ec      	ldreq	r4, [r5, #12]
 800853e:	e7d5      	b.n	80084ec <_puts_r+0x24>
 8008540:	4621      	mov	r1, r4
 8008542:	4628      	mov	r0, r5
 8008544:	f000 f95e 	bl	8008804 <__swsetup_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	d0dd      	beq.n	8008508 <_puts_r+0x40>
 800854c:	f04f 35ff 	mov.w	r5, #4294967295
 8008550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d405      	bmi.n	8008562 <_puts_r+0x9a>
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	059b      	lsls	r3, r3, #22
 800855a:	d402      	bmi.n	8008562 <_puts_r+0x9a>
 800855c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800855e:	f001 f9f5 	bl	800994c <__retarget_lock_release_recursive>
 8008562:	4628      	mov	r0, r5
 8008564:	bd70      	pop	{r4, r5, r6, pc}
 8008566:	2b00      	cmp	r3, #0
 8008568:	da04      	bge.n	8008574 <_puts_r+0xac>
 800856a:	69a2      	ldr	r2, [r4, #24]
 800856c:	429a      	cmp	r2, r3
 800856e:	dc06      	bgt.n	800857e <_puts_r+0xb6>
 8008570:	290a      	cmp	r1, #10
 8008572:	d004      	beq.n	800857e <_puts_r+0xb6>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	6022      	str	r2, [r4, #0]
 800857a:	7019      	strb	r1, [r3, #0]
 800857c:	e7c5      	b.n	800850a <_puts_r+0x42>
 800857e:	4622      	mov	r2, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 f8ed 	bl	8008760 <__swbuf_r>
 8008586:	3001      	adds	r0, #1
 8008588:	d1bf      	bne.n	800850a <_puts_r+0x42>
 800858a:	e7df      	b.n	800854c <_puts_r+0x84>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	250a      	movs	r5, #10
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	6022      	str	r2, [r4, #0]
 8008594:	701d      	strb	r5, [r3, #0]
 8008596:	e7db      	b.n	8008550 <_puts_r+0x88>
 8008598:	0800d268 	.word	0x0800d268
 800859c:	0800d288 	.word	0x0800d288
 80085a0:	0800d248 	.word	0x0800d248

080085a4 <puts>:
 80085a4:	4b02      	ldr	r3, [pc, #8]	; (80085b0 <puts+0xc>)
 80085a6:	4601      	mov	r1, r0
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	f7ff bf8d 	b.w	80084c8 <_puts_r>
 80085ae:	bf00      	nop
 80085b0:	200000d4 	.word	0x200000d4

080085b4 <setvbuf>:
 80085b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	461d      	mov	r5, r3
 80085ba:	4b5d      	ldr	r3, [pc, #372]	; (8008730 <setvbuf+0x17c>)
 80085bc:	681f      	ldr	r7, [r3, #0]
 80085be:	4604      	mov	r4, r0
 80085c0:	460e      	mov	r6, r1
 80085c2:	4690      	mov	r8, r2
 80085c4:	b127      	cbz	r7, 80085d0 <setvbuf+0x1c>
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	b913      	cbnz	r3, 80085d0 <setvbuf+0x1c>
 80085ca:	4638      	mov	r0, r7
 80085cc:	f001 f91a 	bl	8009804 <__sinit>
 80085d0:	4b58      	ldr	r3, [pc, #352]	; (8008734 <setvbuf+0x180>)
 80085d2:	429c      	cmp	r4, r3
 80085d4:	d167      	bne.n	80086a6 <setvbuf+0xf2>
 80085d6:	687c      	ldr	r4, [r7, #4]
 80085d8:	f1b8 0f02 	cmp.w	r8, #2
 80085dc:	d006      	beq.n	80085ec <setvbuf+0x38>
 80085de:	f1b8 0f01 	cmp.w	r8, #1
 80085e2:	f200 809f 	bhi.w	8008724 <setvbuf+0x170>
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	f2c0 809c 	blt.w	8008724 <setvbuf+0x170>
 80085ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ee:	07db      	lsls	r3, r3, #31
 80085f0:	d405      	bmi.n	80085fe <setvbuf+0x4a>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	0598      	lsls	r0, r3, #22
 80085f6:	d402      	bmi.n	80085fe <setvbuf+0x4a>
 80085f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085fa:	f001 f9a6 	bl	800994a <__retarget_lock_acquire_recursive>
 80085fe:	4621      	mov	r1, r4
 8008600:	4638      	mov	r0, r7
 8008602:	f001 f86b 	bl	80096dc <_fflush_r>
 8008606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008608:	b141      	cbz	r1, 800861c <setvbuf+0x68>
 800860a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800860e:	4299      	cmp	r1, r3
 8008610:	d002      	beq.n	8008618 <setvbuf+0x64>
 8008612:	4638      	mov	r0, r7
 8008614:	f001 fda4 	bl	800a160 <_free_r>
 8008618:	2300      	movs	r3, #0
 800861a:	6363      	str	r3, [r4, #52]	; 0x34
 800861c:	2300      	movs	r3, #0
 800861e:	61a3      	str	r3, [r4, #24]
 8008620:	6063      	str	r3, [r4, #4]
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	0619      	lsls	r1, r3, #24
 8008626:	d503      	bpl.n	8008630 <setvbuf+0x7c>
 8008628:	6921      	ldr	r1, [r4, #16]
 800862a:	4638      	mov	r0, r7
 800862c:	f001 fd98 	bl	800a160 <_free_r>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	f1b8 0f02 	cmp.w	r8, #2
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	d06c      	beq.n	800871c <setvbuf+0x168>
 8008642:	ab01      	add	r3, sp, #4
 8008644:	466a      	mov	r2, sp
 8008646:	4621      	mov	r1, r4
 8008648:	4638      	mov	r0, r7
 800864a:	f001 f980 	bl	800994e <__swhatbuf_r>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	4318      	orrs	r0, r3
 8008652:	81a0      	strh	r0, [r4, #12]
 8008654:	2d00      	cmp	r5, #0
 8008656:	d130      	bne.n	80086ba <setvbuf+0x106>
 8008658:	9d00      	ldr	r5, [sp, #0]
 800865a:	4628      	mov	r0, r5
 800865c:	f001 f9dc 	bl	8009a18 <malloc>
 8008660:	4606      	mov	r6, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d155      	bne.n	8008712 <setvbuf+0x15e>
 8008666:	f8dd 9000 	ldr.w	r9, [sp]
 800866a:	45a9      	cmp	r9, r5
 800866c:	d14a      	bne.n	8008704 <setvbuf+0x150>
 800866e:	f04f 35ff 	mov.w	r5, #4294967295
 8008672:	2200      	movs	r2, #0
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	6122      	str	r2, [r4, #16]
 800867e:	2201      	movs	r2, #1
 8008680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008684:	6162      	str	r2, [r4, #20]
 8008686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008688:	f043 0302 	orr.w	r3, r3, #2
 800868c:	07d2      	lsls	r2, r2, #31
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	d405      	bmi.n	800869e <setvbuf+0xea>
 8008692:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008696:	d102      	bne.n	800869e <setvbuf+0xea>
 8008698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800869a:	f001 f957 	bl	800994c <__retarget_lock_release_recursive>
 800869e:	4628      	mov	r0, r5
 80086a0:	b003      	add	sp, #12
 80086a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a6:	4b24      	ldr	r3, [pc, #144]	; (8008738 <setvbuf+0x184>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d101      	bne.n	80086b0 <setvbuf+0xfc>
 80086ac:	68bc      	ldr	r4, [r7, #8]
 80086ae:	e793      	b.n	80085d8 <setvbuf+0x24>
 80086b0:	4b22      	ldr	r3, [pc, #136]	; (800873c <setvbuf+0x188>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	bf08      	it	eq
 80086b6:	68fc      	ldreq	r4, [r7, #12]
 80086b8:	e78e      	b.n	80085d8 <setvbuf+0x24>
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d0cd      	beq.n	800865a <setvbuf+0xa6>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	b913      	cbnz	r3, 80086c8 <setvbuf+0x114>
 80086c2:	4638      	mov	r0, r7
 80086c4:	f001 f89e 	bl	8009804 <__sinit>
 80086c8:	f1b8 0f01 	cmp.w	r8, #1
 80086cc:	bf08      	it	eq
 80086ce:	89a3      	ldrheq	r3, [r4, #12]
 80086d0:	6026      	str	r6, [r4, #0]
 80086d2:	bf04      	itt	eq
 80086d4:	f043 0301 	orreq.w	r3, r3, #1
 80086d8:	81a3      	strheq	r3, [r4, #12]
 80086da:	89a2      	ldrh	r2, [r4, #12]
 80086dc:	f012 0308 	ands.w	r3, r2, #8
 80086e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80086e4:	d01c      	beq.n	8008720 <setvbuf+0x16c>
 80086e6:	07d3      	lsls	r3, r2, #31
 80086e8:	bf41      	itttt	mi
 80086ea:	2300      	movmi	r3, #0
 80086ec:	426d      	negmi	r5, r5
 80086ee:	60a3      	strmi	r3, [r4, #8]
 80086f0:	61a5      	strmi	r5, [r4, #24]
 80086f2:	bf58      	it	pl
 80086f4:	60a5      	strpl	r5, [r4, #8]
 80086f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80086f8:	f015 0501 	ands.w	r5, r5, #1
 80086fc:	d115      	bne.n	800872a <setvbuf+0x176>
 80086fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008702:	e7c8      	b.n	8008696 <setvbuf+0xe2>
 8008704:	4648      	mov	r0, r9
 8008706:	f001 f987 	bl	8009a18 <malloc>
 800870a:	4606      	mov	r6, r0
 800870c:	2800      	cmp	r0, #0
 800870e:	d0ae      	beq.n	800866e <setvbuf+0xba>
 8008710:	464d      	mov	r5, r9
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	e7d0      	b.n	80086be <setvbuf+0x10a>
 800871c:	2500      	movs	r5, #0
 800871e:	e7a8      	b.n	8008672 <setvbuf+0xbe>
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	e7e8      	b.n	80086f6 <setvbuf+0x142>
 8008724:	f04f 35ff 	mov.w	r5, #4294967295
 8008728:	e7b9      	b.n	800869e <setvbuf+0xea>
 800872a:	2500      	movs	r5, #0
 800872c:	e7b7      	b.n	800869e <setvbuf+0xea>
 800872e:	bf00      	nop
 8008730:	200000d4 	.word	0x200000d4
 8008734:	0800d268 	.word	0x0800d268
 8008738:	0800d288 	.word	0x0800d288
 800873c:	0800d248 	.word	0x0800d248

08008740 <strcat>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4602      	mov	r2, r0
 8008744:	7814      	ldrb	r4, [r2, #0]
 8008746:	4613      	mov	r3, r2
 8008748:	3201      	adds	r2, #1
 800874a:	2c00      	cmp	r4, #0
 800874c:	d1fa      	bne.n	8008744 <strcat+0x4>
 800874e:	3b01      	subs	r3, #1
 8008750:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008754:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008758:	2a00      	cmp	r2, #0
 800875a:	d1f9      	bne.n	8008750 <strcat+0x10>
 800875c:	bd10      	pop	{r4, pc}
	...

08008760 <__swbuf_r>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	460e      	mov	r6, r1
 8008764:	4614      	mov	r4, r2
 8008766:	4605      	mov	r5, r0
 8008768:	b118      	cbz	r0, 8008772 <__swbuf_r+0x12>
 800876a:	6983      	ldr	r3, [r0, #24]
 800876c:	b90b      	cbnz	r3, 8008772 <__swbuf_r+0x12>
 800876e:	f001 f849 	bl	8009804 <__sinit>
 8008772:	4b21      	ldr	r3, [pc, #132]	; (80087f8 <__swbuf_r+0x98>)
 8008774:	429c      	cmp	r4, r3
 8008776:	d12b      	bne.n	80087d0 <__swbuf_r+0x70>
 8008778:	686c      	ldr	r4, [r5, #4]
 800877a:	69a3      	ldr	r3, [r4, #24]
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	071a      	lsls	r2, r3, #28
 8008782:	d52f      	bpl.n	80087e4 <__swbuf_r+0x84>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	b36b      	cbz	r3, 80087e4 <__swbuf_r+0x84>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	1ac0      	subs	r0, r0, r3
 800878e:	6963      	ldr	r3, [r4, #20]
 8008790:	b2f6      	uxtb	r6, r6
 8008792:	4283      	cmp	r3, r0
 8008794:	4637      	mov	r7, r6
 8008796:	dc04      	bgt.n	80087a2 <__swbuf_r+0x42>
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f000 ff9e 	bl	80096dc <_fflush_r>
 80087a0:	bb30      	cbnz	r0, 80087f0 <__swbuf_r+0x90>
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	60a3      	str	r3, [r4, #8]
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	6022      	str	r2, [r4, #0]
 80087ae:	701e      	strb	r6, [r3, #0]
 80087b0:	6963      	ldr	r3, [r4, #20]
 80087b2:	3001      	adds	r0, #1
 80087b4:	4283      	cmp	r3, r0
 80087b6:	d004      	beq.n	80087c2 <__swbuf_r+0x62>
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	07db      	lsls	r3, r3, #31
 80087bc:	d506      	bpl.n	80087cc <__swbuf_r+0x6c>
 80087be:	2e0a      	cmp	r6, #10
 80087c0:	d104      	bne.n	80087cc <__swbuf_r+0x6c>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 ff89 	bl	80096dc <_fflush_r>
 80087ca:	b988      	cbnz	r0, 80087f0 <__swbuf_r+0x90>
 80087cc:	4638      	mov	r0, r7
 80087ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <__swbuf_r+0x9c>)
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d101      	bne.n	80087da <__swbuf_r+0x7a>
 80087d6:	68ac      	ldr	r4, [r5, #8]
 80087d8:	e7cf      	b.n	800877a <__swbuf_r+0x1a>
 80087da:	4b09      	ldr	r3, [pc, #36]	; (8008800 <__swbuf_r+0xa0>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	bf08      	it	eq
 80087e0:	68ec      	ldreq	r4, [r5, #12]
 80087e2:	e7ca      	b.n	800877a <__swbuf_r+0x1a>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 f80c 	bl	8008804 <__swsetup_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d0cb      	beq.n	8008788 <__swbuf_r+0x28>
 80087f0:	f04f 37ff 	mov.w	r7, #4294967295
 80087f4:	e7ea      	b.n	80087cc <__swbuf_r+0x6c>
 80087f6:	bf00      	nop
 80087f8:	0800d268 	.word	0x0800d268
 80087fc:	0800d288 	.word	0x0800d288
 8008800:	0800d248 	.word	0x0800d248

08008804 <__swsetup_r>:
 8008804:	4b32      	ldr	r3, [pc, #200]	; (80088d0 <__swsetup_r+0xcc>)
 8008806:	b570      	push	{r4, r5, r6, lr}
 8008808:	681d      	ldr	r5, [r3, #0]
 800880a:	4606      	mov	r6, r0
 800880c:	460c      	mov	r4, r1
 800880e:	b125      	cbz	r5, 800881a <__swsetup_r+0x16>
 8008810:	69ab      	ldr	r3, [r5, #24]
 8008812:	b913      	cbnz	r3, 800881a <__swsetup_r+0x16>
 8008814:	4628      	mov	r0, r5
 8008816:	f000 fff5 	bl	8009804 <__sinit>
 800881a:	4b2e      	ldr	r3, [pc, #184]	; (80088d4 <__swsetup_r+0xd0>)
 800881c:	429c      	cmp	r4, r3
 800881e:	d10f      	bne.n	8008840 <__swsetup_r+0x3c>
 8008820:	686c      	ldr	r4, [r5, #4]
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008828:	0719      	lsls	r1, r3, #28
 800882a:	d42c      	bmi.n	8008886 <__swsetup_r+0x82>
 800882c:	06dd      	lsls	r5, r3, #27
 800882e:	d411      	bmi.n	8008854 <__swsetup_r+0x50>
 8008830:	2309      	movs	r3, #9
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	e03e      	b.n	80088be <__swsetup_r+0xba>
 8008840:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <__swsetup_r+0xd4>)
 8008842:	429c      	cmp	r4, r3
 8008844:	d101      	bne.n	800884a <__swsetup_r+0x46>
 8008846:	68ac      	ldr	r4, [r5, #8]
 8008848:	e7eb      	b.n	8008822 <__swsetup_r+0x1e>
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <__swsetup_r+0xd8>)
 800884c:	429c      	cmp	r4, r3
 800884e:	bf08      	it	eq
 8008850:	68ec      	ldreq	r4, [r5, #12]
 8008852:	e7e6      	b.n	8008822 <__swsetup_r+0x1e>
 8008854:	0758      	lsls	r0, r3, #29
 8008856:	d512      	bpl.n	800887e <__swsetup_r+0x7a>
 8008858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800885a:	b141      	cbz	r1, 800886e <__swsetup_r+0x6a>
 800885c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008860:	4299      	cmp	r1, r3
 8008862:	d002      	beq.n	800886a <__swsetup_r+0x66>
 8008864:	4630      	mov	r0, r6
 8008866:	f001 fc7b 	bl	800a160 <_free_r>
 800886a:	2300      	movs	r3, #0
 800886c:	6363      	str	r3, [r4, #52]	; 0x34
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	2300      	movs	r3, #0
 8008878:	6063      	str	r3, [r4, #4]
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	f043 0308 	orr.w	r3, r3, #8
 8008884:	81a3      	strh	r3, [r4, #12]
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	b94b      	cbnz	r3, 800889e <__swsetup_r+0x9a>
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008894:	d003      	beq.n	800889e <__swsetup_r+0x9a>
 8008896:	4621      	mov	r1, r4
 8008898:	4630      	mov	r0, r6
 800889a:	f001 f87d 	bl	8009998 <__smakebuf_r>
 800889e:	89a0      	ldrh	r0, [r4, #12]
 80088a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a4:	f010 0301 	ands.w	r3, r0, #1
 80088a8:	d00a      	beq.n	80088c0 <__swsetup_r+0xbc>
 80088aa:	2300      	movs	r3, #0
 80088ac:	60a3      	str	r3, [r4, #8]
 80088ae:	6963      	ldr	r3, [r4, #20]
 80088b0:	425b      	negs	r3, r3
 80088b2:	61a3      	str	r3, [r4, #24]
 80088b4:	6923      	ldr	r3, [r4, #16]
 80088b6:	b943      	cbnz	r3, 80088ca <__swsetup_r+0xc6>
 80088b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088bc:	d1ba      	bne.n	8008834 <__swsetup_r+0x30>
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	0781      	lsls	r1, r0, #30
 80088c2:	bf58      	it	pl
 80088c4:	6963      	ldrpl	r3, [r4, #20]
 80088c6:	60a3      	str	r3, [r4, #8]
 80088c8:	e7f4      	b.n	80088b4 <__swsetup_r+0xb0>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e7f7      	b.n	80088be <__swsetup_r+0xba>
 80088ce:	bf00      	nop
 80088d0:	200000d4 	.word	0x200000d4
 80088d4:	0800d268 	.word	0x0800d268
 80088d8:	0800d288 	.word	0x0800d288
 80088dc:	0800d248 	.word	0x0800d248

080088e0 <quorem>:
 80088e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	6903      	ldr	r3, [r0, #16]
 80088e6:	690c      	ldr	r4, [r1, #16]
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	4607      	mov	r7, r0
 80088ec:	f2c0 8081 	blt.w	80089f2 <quorem+0x112>
 80088f0:	3c01      	subs	r4, #1
 80088f2:	f101 0814 	add.w	r8, r1, #20
 80088f6:	f100 0514 	add.w	r5, r0, #20
 80088fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008908:	3301      	adds	r3, #1
 800890a:	429a      	cmp	r2, r3
 800890c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008914:	fbb2 f6f3 	udiv	r6, r2, r3
 8008918:	d331      	bcc.n	800897e <quorem+0x9e>
 800891a:	f04f 0e00 	mov.w	lr, #0
 800891e:	4640      	mov	r0, r8
 8008920:	46ac      	mov	ip, r5
 8008922:	46f2      	mov	sl, lr
 8008924:	f850 2b04 	ldr.w	r2, [r0], #4
 8008928:	b293      	uxth	r3, r2
 800892a:	fb06 e303 	mla	r3, r6, r3, lr
 800892e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008932:	b29b      	uxth	r3, r3
 8008934:	ebaa 0303 	sub.w	r3, sl, r3
 8008938:	0c12      	lsrs	r2, r2, #16
 800893a:	f8dc a000 	ldr.w	sl, [ip]
 800893e:	fb06 e202 	mla	r2, r6, r2, lr
 8008942:	fa13 f38a 	uxtah	r3, r3, sl
 8008946:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800894a:	fa1f fa82 	uxth.w	sl, r2
 800894e:	f8dc 2000 	ldr.w	r2, [ip]
 8008952:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008956:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800895a:	b29b      	uxth	r3, r3
 800895c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008960:	4581      	cmp	r9, r0
 8008962:	f84c 3b04 	str.w	r3, [ip], #4
 8008966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800896a:	d2db      	bcs.n	8008924 <quorem+0x44>
 800896c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008970:	b92b      	cbnz	r3, 800897e <quorem+0x9e>
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	3b04      	subs	r3, #4
 8008976:	429d      	cmp	r5, r3
 8008978:	461a      	mov	r2, r3
 800897a:	d32e      	bcc.n	80089da <quorem+0xfa>
 800897c:	613c      	str	r4, [r7, #16]
 800897e:	4638      	mov	r0, r7
 8008980:	f001 fade 	bl	8009f40 <__mcmp>
 8008984:	2800      	cmp	r0, #0
 8008986:	db24      	blt.n	80089d2 <quorem+0xf2>
 8008988:	3601      	adds	r6, #1
 800898a:	4628      	mov	r0, r5
 800898c:	f04f 0c00 	mov.w	ip, #0
 8008990:	f858 2b04 	ldr.w	r2, [r8], #4
 8008994:	f8d0 e000 	ldr.w	lr, [r0]
 8008998:	b293      	uxth	r3, r2
 800899a:	ebac 0303 	sub.w	r3, ip, r3
 800899e:	0c12      	lsrs	r2, r2, #16
 80089a0:	fa13 f38e 	uxtah	r3, r3, lr
 80089a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b2:	45c1      	cmp	r9, r8
 80089b4:	f840 3b04 	str.w	r3, [r0], #4
 80089b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089bc:	d2e8      	bcs.n	8008990 <quorem+0xb0>
 80089be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c6:	b922      	cbnz	r2, 80089d2 <quorem+0xf2>
 80089c8:	3b04      	subs	r3, #4
 80089ca:	429d      	cmp	r5, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	d30a      	bcc.n	80089e6 <quorem+0x106>
 80089d0:	613c      	str	r4, [r7, #16]
 80089d2:	4630      	mov	r0, r6
 80089d4:	b003      	add	sp, #12
 80089d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	3b04      	subs	r3, #4
 80089de:	2a00      	cmp	r2, #0
 80089e0:	d1cc      	bne.n	800897c <quorem+0x9c>
 80089e2:	3c01      	subs	r4, #1
 80089e4:	e7c7      	b.n	8008976 <quorem+0x96>
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	d1f0      	bne.n	80089d0 <quorem+0xf0>
 80089ee:	3c01      	subs	r4, #1
 80089f0:	e7eb      	b.n	80089ca <quorem+0xea>
 80089f2:	2000      	movs	r0, #0
 80089f4:	e7ee      	b.n	80089d4 <quorem+0xf4>
	...

080089f8 <_dtoa_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	ed2d 8b02 	vpush	{d8}
 8008a00:	ec57 6b10 	vmov	r6, r7, d0
 8008a04:	b095      	sub	sp, #84	; 0x54
 8008a06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008a12:	4604      	mov	r4, r0
 8008a14:	9209      	str	r2, [sp, #36]	; 0x24
 8008a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a18:	b975      	cbnz	r5, 8008a38 <_dtoa_r+0x40>
 8008a1a:	2010      	movs	r0, #16
 8008a1c:	f000 fffc 	bl	8009a18 <malloc>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6260      	str	r0, [r4, #36]	; 0x24
 8008a24:	b920      	cbnz	r0, 8008a30 <_dtoa_r+0x38>
 8008a26:	4bb2      	ldr	r3, [pc, #712]	; (8008cf0 <_dtoa_r+0x2f8>)
 8008a28:	21ea      	movs	r1, #234	; 0xea
 8008a2a:	48b2      	ldr	r0, [pc, #712]	; (8008cf4 <_dtoa_r+0x2fc>)
 8008a2c:	f001 fe02 	bl	800a634 <__assert_func>
 8008a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a34:	6005      	str	r5, [r0, #0]
 8008a36:	60c5      	str	r5, [r0, #12]
 8008a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a3a:	6819      	ldr	r1, [r3, #0]
 8008a3c:	b151      	cbz	r1, 8008a54 <_dtoa_r+0x5c>
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	604a      	str	r2, [r1, #4]
 8008a42:	2301      	movs	r3, #1
 8008a44:	4093      	lsls	r3, r2
 8008a46:	608b      	str	r3, [r1, #8]
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f001 f83b 	bl	8009ac4 <_Bfree>
 8008a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	1e3b      	subs	r3, r7, #0
 8008a56:	bfb9      	ittee	lt
 8008a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a5c:	9303      	strlt	r3, [sp, #12]
 8008a5e:	2300      	movge	r3, #0
 8008a60:	f8c8 3000 	strge.w	r3, [r8]
 8008a64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008a68:	4ba3      	ldr	r3, [pc, #652]	; (8008cf8 <_dtoa_r+0x300>)
 8008a6a:	bfbc      	itt	lt
 8008a6c:	2201      	movlt	r2, #1
 8008a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8008a72:	ea33 0309 	bics.w	r3, r3, r9
 8008a76:	d11b      	bne.n	8008ab0 <_dtoa_r+0xb8>
 8008a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a84:	4333      	orrs	r3, r6
 8008a86:	f000 857a 	beq.w	800957e <_dtoa_r+0xb86>
 8008a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a8c:	b963      	cbnz	r3, 8008aa8 <_dtoa_r+0xb0>
 8008a8e:	4b9b      	ldr	r3, [pc, #620]	; (8008cfc <_dtoa_r+0x304>)
 8008a90:	e024      	b.n	8008adc <_dtoa_r+0xe4>
 8008a92:	4b9b      	ldr	r3, [pc, #620]	; (8008d00 <_dtoa_r+0x308>)
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	9800      	ldr	r0, [sp, #0]
 8008a9e:	b015      	add	sp, #84	; 0x54
 8008aa0:	ecbd 8b02 	vpop	{d8}
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa8:	4b94      	ldr	r3, [pc, #592]	; (8008cfc <_dtoa_r+0x304>)
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	3303      	adds	r3, #3
 8008aae:	e7f3      	b.n	8008a98 <_dtoa_r+0xa0>
 8008ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	ec51 0b17 	vmov	r0, r1, d7
 8008aba:	2300      	movs	r3, #0
 8008abc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008ac0:	f7f8 f822 	bl	8000b08 <__aeabi_dcmpeq>
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	b158      	cbz	r0, 8008ae0 <_dtoa_r+0xe8>
 8008ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aca:	2301      	movs	r3, #1
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8551 	beq.w	8009578 <_dtoa_r+0xb80>
 8008ad6:	488b      	ldr	r0, [pc, #556]	; (8008d04 <_dtoa_r+0x30c>)
 8008ad8:	6018      	str	r0, [r3, #0]
 8008ada:	1e43      	subs	r3, r0, #1
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	e7dd      	b.n	8008a9c <_dtoa_r+0xa4>
 8008ae0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ae4:	aa12      	add	r2, sp, #72	; 0x48
 8008ae6:	a913      	add	r1, sp, #76	; 0x4c
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f001 facd 	bl	800a088 <__d2b>
 8008aee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008af2:	4683      	mov	fp, r0
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	d07c      	beq.n	8008bf2 <_dtoa_r+0x1fa>
 8008af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008b06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b12:	4b7d      	ldr	r3, [pc, #500]	; (8008d08 <_dtoa_r+0x310>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f7 fbd5 	bl	80002c8 <__aeabi_dsub>
 8008b1e:	a36e      	add	r3, pc, #440	; (adr r3, 8008cd8 <_dtoa_r+0x2e0>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fd88 	bl	8000638 <__aeabi_dmul>
 8008b28:	a36d      	add	r3, pc, #436	; (adr r3, 8008ce0 <_dtoa_r+0x2e8>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fbcd 	bl	80002cc <__adddf3>
 8008b32:	4606      	mov	r6, r0
 8008b34:	4628      	mov	r0, r5
 8008b36:	460f      	mov	r7, r1
 8008b38:	f7f7 fd14 	bl	8000564 <__aeabi_i2d>
 8008b3c:	a36a      	add	r3, pc, #424	; (adr r3, 8008ce8 <_dtoa_r+0x2f0>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fd79 	bl	8000638 <__aeabi_dmul>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	f7f7 fbbd 	bl	80002cc <__adddf3>
 8008b52:	4606      	mov	r6, r0
 8008b54:	460f      	mov	r7, r1
 8008b56:	f7f8 f81f 	bl	8000b98 <__aeabi_d2iz>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4682      	mov	sl, r0
 8008b5e:	2300      	movs	r3, #0
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 ffda 	bl	8000b1c <__aeabi_dcmplt>
 8008b68:	b148      	cbz	r0, 8008b7e <_dtoa_r+0x186>
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	f7f7 fcfa 	bl	8000564 <__aeabi_i2d>
 8008b70:	4632      	mov	r2, r6
 8008b72:	463b      	mov	r3, r7
 8008b74:	f7f7 ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b78:	b908      	cbnz	r0, 8008b7e <_dtoa_r+0x186>
 8008b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b7e:	f1ba 0f16 	cmp.w	sl, #22
 8008b82:	d854      	bhi.n	8008c2e <_dtoa_r+0x236>
 8008b84:	4b61      	ldr	r3, [pc, #388]	; (8008d0c <_dtoa_r+0x314>)
 8008b86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b92:	f7f7 ffc3 	bl	8000b1c <__aeabi_dcmplt>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d04b      	beq.n	8008c32 <_dtoa_r+0x23a>
 8008b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ba4:	1b5d      	subs	r5, r3, r5
 8008ba6:	1e6b      	subs	r3, r5, #1
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	bf43      	ittte	mi
 8008bac:	2300      	movmi	r3, #0
 8008bae:	f1c5 0801 	rsbmi	r8, r5, #1
 8008bb2:	9304      	strmi	r3, [sp, #16]
 8008bb4:	f04f 0800 	movpl.w	r8, #0
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	db3b      	blt.n	8008c36 <_dtoa_r+0x23e>
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008bc4:	4453      	add	r3, sl
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9306      	str	r3, [sp, #24]
 8008bcc:	9b05      	ldr	r3, [sp, #20]
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d869      	bhi.n	8008ca6 <_dtoa_r+0x2ae>
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	bfc4      	itt	gt
 8008bd6:	3b04      	subgt	r3, #4
 8008bd8:	9305      	strgt	r3, [sp, #20]
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	f1a3 0302 	sub.w	r3, r3, #2
 8008be0:	bfcc      	ite	gt
 8008be2:	2500      	movgt	r5, #0
 8008be4:	2501      	movle	r5, #1
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d869      	bhi.n	8008cbe <_dtoa_r+0x2c6>
 8008bea:	e8df f003 	tbb	[pc, r3]
 8008bee:	4e2c      	.short	0x4e2c
 8008bf0:	5a4c      	.short	0x5a4c
 8008bf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008bf6:	441d      	add	r5, r3
 8008bf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	bfc1      	itttt	gt
 8008c00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c08:	fa09 f303 	lslgt.w	r3, r9, r3
 8008c0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c10:	bfda      	itte	le
 8008c12:	f1c3 0320 	rsble	r3, r3, #32
 8008c16:	fa06 f003 	lslle.w	r0, r6, r3
 8008c1a:	4318      	orrgt	r0, r3
 8008c1c:	f7f7 fc92 	bl	8000544 <__aeabi_ui2d>
 8008c20:	2301      	movs	r3, #1
 8008c22:	4606      	mov	r6, r0
 8008c24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c28:	3d01      	subs	r5, #1
 8008c2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008c2c:	e771      	b.n	8008b12 <_dtoa_r+0x11a>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e7b6      	b.n	8008ba0 <_dtoa_r+0x1a8>
 8008c32:	900e      	str	r0, [sp, #56]	; 0x38
 8008c34:	e7b5      	b.n	8008ba2 <_dtoa_r+0x1aa>
 8008c36:	f1ca 0300 	rsb	r3, sl, #0
 8008c3a:	9306      	str	r3, [sp, #24]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	eba8 080a 	sub.w	r8, r8, sl
 8008c42:	930d      	str	r3, [sp, #52]	; 0x34
 8008c44:	e7c2      	b.n	8008bcc <_dtoa_r+0x1d4>
 8008c46:	2300      	movs	r3, #0
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dc39      	bgt.n	8008cc4 <_dtoa_r+0x2cc>
 8008c50:	f04f 0901 	mov.w	r9, #1
 8008c54:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c58:	464b      	mov	r3, r9
 8008c5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008c5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c60:	2200      	movs	r2, #0
 8008c62:	6042      	str	r2, [r0, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	f102 0614 	add.w	r6, r2, #20
 8008c6a:	429e      	cmp	r6, r3
 8008c6c:	6841      	ldr	r1, [r0, #4]
 8008c6e:	d92f      	bls.n	8008cd0 <_dtoa_r+0x2d8>
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fee7 	bl	8009a44 <_Balloc>
 8008c76:	9000      	str	r0, [sp, #0]
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d14b      	bne.n	8008d14 <_dtoa_r+0x31c>
 8008c7c:	4b24      	ldr	r3, [pc, #144]	; (8008d10 <_dtoa_r+0x318>)
 8008c7e:	4602      	mov	r2, r0
 8008c80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c84:	e6d1      	b.n	8008a2a <_dtoa_r+0x32>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e7de      	b.n	8008c48 <_dtoa_r+0x250>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	9308      	str	r3, [sp, #32]
 8008c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c90:	eb0a 0903 	add.w	r9, sl, r3
 8008c94:	f109 0301 	add.w	r3, r9, #1
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	bfb8      	it	lt
 8008c9e:	2301      	movlt	r3, #1
 8008ca0:	e7dd      	b.n	8008c5e <_dtoa_r+0x266>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e7f2      	b.n	8008c8c <_dtoa_r+0x294>
 8008ca6:	2501      	movs	r5, #1
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	9508      	str	r5, [sp, #32]
 8008cae:	f04f 39ff 	mov.w	r9, #4294967295
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cb8:	2312      	movs	r3, #18
 8008cba:	9209      	str	r2, [sp, #36]	; 0x24
 8008cbc:	e7cf      	b.n	8008c5e <_dtoa_r+0x266>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	9308      	str	r3, [sp, #32]
 8008cc2:	e7f4      	b.n	8008cae <_dtoa_r+0x2b6>
 8008cc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008cc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ccc:	464b      	mov	r3, r9
 8008cce:	e7c6      	b.n	8008c5e <_dtoa_r+0x266>
 8008cd0:	3101      	adds	r1, #1
 8008cd2:	6041      	str	r1, [r0, #4]
 8008cd4:	0052      	lsls	r2, r2, #1
 8008cd6:	e7c6      	b.n	8008c66 <_dtoa_r+0x26e>
 8008cd8:	636f4361 	.word	0x636f4361
 8008cdc:	3fd287a7 	.word	0x3fd287a7
 8008ce0:	8b60c8b3 	.word	0x8b60c8b3
 8008ce4:	3fc68a28 	.word	0x3fc68a28
 8008ce8:	509f79fb 	.word	0x509f79fb
 8008cec:	3fd34413 	.word	0x3fd34413
 8008cf0:	0800d1be 	.word	0x0800d1be
 8008cf4:	0800d1d5 	.word	0x0800d1d5
 8008cf8:	7ff00000 	.word	0x7ff00000
 8008cfc:	0800d1ba 	.word	0x0800d1ba
 8008d00:	0800d1b1 	.word	0x0800d1b1
 8008d04:	0800d08d 	.word	0x0800d08d
 8008d08:	3ff80000 	.word	0x3ff80000
 8008d0c:	0800d330 	.word	0x0800d330
 8008d10:	0800d234 	.word	0x0800d234
 8008d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d16:	9a00      	ldr	r2, [sp, #0]
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	9b01      	ldr	r3, [sp, #4]
 8008d1c:	2b0e      	cmp	r3, #14
 8008d1e:	f200 80ad 	bhi.w	8008e7c <_dtoa_r+0x484>
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	f000 80aa 	beq.w	8008e7c <_dtoa_r+0x484>
 8008d28:	f1ba 0f00 	cmp.w	sl, #0
 8008d2c:	dd36      	ble.n	8008d9c <_dtoa_r+0x3a4>
 8008d2e:	4ac3      	ldr	r2, [pc, #780]	; (800903c <_dtoa_r+0x644>)
 8008d30:	f00a 030f 	and.w	r3, sl, #15
 8008d34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d38:	ed93 7b00 	vldr	d7, [r3]
 8008d3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008d40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008d44:	eeb0 8a47 	vmov.f32	s16, s14
 8008d48:	eef0 8a67 	vmov.f32	s17, s15
 8008d4c:	d016      	beq.n	8008d7c <_dtoa_r+0x384>
 8008d4e:	4bbc      	ldr	r3, [pc, #752]	; (8009040 <_dtoa_r+0x648>)
 8008d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d58:	f7f7 fd98 	bl	800088c <__aeabi_ddiv>
 8008d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d60:	f007 070f 	and.w	r7, r7, #15
 8008d64:	2503      	movs	r5, #3
 8008d66:	4eb6      	ldr	r6, [pc, #728]	; (8009040 <_dtoa_r+0x648>)
 8008d68:	b957      	cbnz	r7, 8008d80 <_dtoa_r+0x388>
 8008d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d6e:	ec53 2b18 	vmov	r2, r3, d8
 8008d72:	f7f7 fd8b 	bl	800088c <__aeabi_ddiv>
 8008d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d7a:	e029      	b.n	8008dd0 <_dtoa_r+0x3d8>
 8008d7c:	2502      	movs	r5, #2
 8008d7e:	e7f2      	b.n	8008d66 <_dtoa_r+0x36e>
 8008d80:	07f9      	lsls	r1, r7, #31
 8008d82:	d508      	bpl.n	8008d96 <_dtoa_r+0x39e>
 8008d84:	ec51 0b18 	vmov	r0, r1, d8
 8008d88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d8c:	f7f7 fc54 	bl	8000638 <__aeabi_dmul>
 8008d90:	ec41 0b18 	vmov	d8, r0, r1
 8008d94:	3501      	adds	r5, #1
 8008d96:	107f      	asrs	r7, r7, #1
 8008d98:	3608      	adds	r6, #8
 8008d9a:	e7e5      	b.n	8008d68 <_dtoa_r+0x370>
 8008d9c:	f000 80a6 	beq.w	8008eec <_dtoa_r+0x4f4>
 8008da0:	f1ca 0600 	rsb	r6, sl, #0
 8008da4:	4ba5      	ldr	r3, [pc, #660]	; (800903c <_dtoa_r+0x644>)
 8008da6:	4fa6      	ldr	r7, [pc, #664]	; (8009040 <_dtoa_r+0x648>)
 8008da8:	f006 020f 	and.w	r2, r6, #15
 8008dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008db8:	f7f7 fc3e 	bl	8000638 <__aeabi_dmul>
 8008dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc0:	1136      	asrs	r6, r6, #4
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2502      	movs	r5, #2
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	f040 8085 	bne.w	8008ed6 <_dtoa_r+0x4de>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1d2      	bne.n	8008d76 <_dtoa_r+0x37e>
 8008dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 808c 	beq.w	8008ef0 <_dtoa_r+0x4f8>
 8008dd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ddc:	4b99      	ldr	r3, [pc, #612]	; (8009044 <_dtoa_r+0x64c>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 fe9a 	bl	8000b1c <__aeabi_dcmplt>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f000 8081 	beq.w	8008ef0 <_dtoa_r+0x4f8>
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d07d      	beq.n	8008ef0 <_dtoa_r+0x4f8>
 8008df4:	f1b9 0f00 	cmp.w	r9, #0
 8008df8:	dd3c      	ble.n	8008e74 <_dtoa_r+0x47c>
 8008dfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008dfe:	9307      	str	r3, [sp, #28]
 8008e00:	2200      	movs	r2, #0
 8008e02:	4b91      	ldr	r3, [pc, #580]	; (8009048 <_dtoa_r+0x650>)
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fc16 	bl	8000638 <__aeabi_dmul>
 8008e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e10:	3501      	adds	r5, #1
 8008e12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008e16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f7f7 fba2 	bl	8000564 <__aeabi_i2d>
 8008e20:	4632      	mov	r2, r6
 8008e22:	463b      	mov	r3, r7
 8008e24:	f7f7 fc08 	bl	8000638 <__aeabi_dmul>
 8008e28:	4b88      	ldr	r3, [pc, #544]	; (800904c <_dtoa_r+0x654>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f7f7 fa4e 	bl	80002cc <__adddf3>
 8008e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d15c      	bne.n	8008efa <_dtoa_r+0x502>
 8008e40:	4b83      	ldr	r3, [pc, #524]	; (8009050 <_dtoa_r+0x658>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fa3e 	bl	80002c8 <__aeabi_dsub>
 8008e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e50:	4606      	mov	r6, r0
 8008e52:	460f      	mov	r7, r1
 8008e54:	f7f7 fe80 	bl	8000b58 <__aeabi_dcmpgt>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f040 8296 	bne.w	800938a <_dtoa_r+0x992>
 8008e5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e62:	4630      	mov	r0, r6
 8008e64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fe57 	bl	8000b1c <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f040 8288 	bne.w	8009384 <_dtoa_r+0x98c>
 8008e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f2c0 8158 	blt.w	8009134 <_dtoa_r+0x73c>
 8008e84:	f1ba 0f0e 	cmp.w	sl, #14
 8008e88:	f300 8154 	bgt.w	8009134 <_dtoa_r+0x73c>
 8008e8c:	4b6b      	ldr	r3, [pc, #428]	; (800903c <_dtoa_r+0x644>)
 8008e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f280 80e3 	bge.w	8009064 <_dtoa_r+0x66c>
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f300 80df 	bgt.w	8009064 <_dtoa_r+0x66c>
 8008ea6:	f040 826d 	bne.w	8009384 <_dtoa_r+0x98c>
 8008eaa:	4b69      	ldr	r3, [pc, #420]	; (8009050 <_dtoa_r+0x658>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fbc1 	bl	8000638 <__aeabi_dmul>
 8008eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eba:	f7f7 fe43 	bl	8000b44 <__aeabi_dcmpge>
 8008ebe:	9e01      	ldr	r6, [sp, #4]
 8008ec0:	4637      	mov	r7, r6
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f040 8243 	bne.w	800934e <_dtoa_r+0x956>
 8008ec8:	9d00      	ldr	r5, [sp, #0]
 8008eca:	2331      	movs	r3, #49	; 0x31
 8008ecc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ed0:	f10a 0a01 	add.w	sl, sl, #1
 8008ed4:	e23f      	b.n	8009356 <_dtoa_r+0x95e>
 8008ed6:	07f2      	lsls	r2, r6, #31
 8008ed8:	d505      	bpl.n	8008ee6 <_dtoa_r+0x4ee>
 8008eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ede:	f7f7 fbab 	bl	8000638 <__aeabi_dmul>
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	1076      	asrs	r6, r6, #1
 8008ee8:	3708      	adds	r7, #8
 8008eea:	e76c      	b.n	8008dc6 <_dtoa_r+0x3ce>
 8008eec:	2502      	movs	r5, #2
 8008eee:	e76f      	b.n	8008dd0 <_dtoa_r+0x3d8>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ef8:	e78d      	b.n	8008e16 <_dtoa_r+0x41e>
 8008efa:	9900      	ldr	r1, [sp, #0]
 8008efc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f00:	4b4e      	ldr	r3, [pc, #312]	; (800903c <_dtoa_r+0x644>)
 8008f02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f06:	4401      	add	r1, r0
 8008f08:	9102      	str	r1, [sp, #8]
 8008f0a:	9908      	ldr	r1, [sp, #32]
 8008f0c:	eeb0 8a47 	vmov.f32	s16, s14
 8008f10:	eef0 8a67 	vmov.f32	s17, s15
 8008f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d045      	beq.n	8008fac <_dtoa_r+0x5b4>
 8008f20:	494c      	ldr	r1, [pc, #304]	; (8009054 <_dtoa_r+0x65c>)
 8008f22:	2000      	movs	r0, #0
 8008f24:	f7f7 fcb2 	bl	800088c <__aeabi_ddiv>
 8008f28:	ec53 2b18 	vmov	r2, r3, d8
 8008f2c:	f7f7 f9cc 	bl	80002c8 <__aeabi_dsub>
 8008f30:	9d00      	ldr	r5, [sp, #0]
 8008f32:	ec41 0b18 	vmov	d8, r0, r1
 8008f36:	4639      	mov	r1, r7
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7f7 fe2d 	bl	8000b98 <__aeabi_d2iz>
 8008f3e:	900c      	str	r0, [sp, #48]	; 0x30
 8008f40:	f7f7 fb10 	bl	8000564 <__aeabi_i2d>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4630      	mov	r0, r6
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	f7f7 f9bc 	bl	80002c8 <__aeabi_dsub>
 8008f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f52:	3330      	adds	r3, #48	; 0x30
 8008f54:	f805 3b01 	strb.w	r3, [r5], #1
 8008f58:	ec53 2b18 	vmov	r2, r3, d8
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460f      	mov	r7, r1
 8008f60:	f7f7 fddc 	bl	8000b1c <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d165      	bne.n	8009034 <_dtoa_r+0x63c>
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	4935      	ldr	r1, [pc, #212]	; (8009044 <_dtoa_r+0x64c>)
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f7f7 f9aa 	bl	80002c8 <__aeabi_dsub>
 8008f74:	ec53 2b18 	vmov	r2, r3, d8
 8008f78:	f7f7 fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f040 80b9 	bne.w	80090f4 <_dtoa_r+0x6fc>
 8008f82:	9b02      	ldr	r3, [sp, #8]
 8008f84:	429d      	cmp	r5, r3
 8008f86:	f43f af75 	beq.w	8008e74 <_dtoa_r+0x47c>
 8008f8a:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <_dtoa_r+0x650>)
 8008f8c:	ec51 0b18 	vmov	r0, r1, d8
 8008f90:	2200      	movs	r2, #0
 8008f92:	f7f7 fb51 	bl	8000638 <__aeabi_dmul>
 8008f96:	4b2c      	ldr	r3, [pc, #176]	; (8009048 <_dtoa_r+0x650>)
 8008f98:	ec41 0b18 	vmov	d8, r0, r1
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	f7f7 fb49 	bl	8000638 <__aeabi_dmul>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	460f      	mov	r7, r1
 8008faa:	e7c4      	b.n	8008f36 <_dtoa_r+0x53e>
 8008fac:	ec51 0b17 	vmov	r0, r1, d7
 8008fb0:	f7f7 fb42 	bl	8000638 <__aeabi_dmul>
 8008fb4:	9b02      	ldr	r3, [sp, #8]
 8008fb6:	9d00      	ldr	r5, [sp, #0]
 8008fb8:	930c      	str	r3, [sp, #48]	; 0x30
 8008fba:	ec41 0b18 	vmov	d8, r0, r1
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7f7 fde9 	bl	8000b98 <__aeabi_d2iz>
 8008fc6:	9011      	str	r0, [sp, #68]	; 0x44
 8008fc8:	f7f7 facc 	bl	8000564 <__aeabi_i2d>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 f978 	bl	80002c8 <__aeabi_dsub>
 8008fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fda:	3330      	adds	r3, #48	; 0x30
 8008fdc:	f805 3b01 	strb.w	r3, [r5], #1
 8008fe0:	9b02      	ldr	r3, [sp, #8]
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	d134      	bne.n	8009058 <_dtoa_r+0x660>
 8008fee:	4b19      	ldr	r3, [pc, #100]	; (8009054 <_dtoa_r+0x65c>)
 8008ff0:	ec51 0b18 	vmov	r0, r1, d8
 8008ff4:	f7f7 f96a 	bl	80002cc <__adddf3>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	4639      	mov	r1, r7
 8009000:	f7f7 fdaa 	bl	8000b58 <__aeabi_dcmpgt>
 8009004:	2800      	cmp	r0, #0
 8009006:	d175      	bne.n	80090f4 <_dtoa_r+0x6fc>
 8009008:	ec53 2b18 	vmov	r2, r3, d8
 800900c:	4911      	ldr	r1, [pc, #68]	; (8009054 <_dtoa_r+0x65c>)
 800900e:	2000      	movs	r0, #0
 8009010:	f7f7 f95a 	bl	80002c8 <__aeabi_dsub>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 fd7e 	bl	8000b1c <__aeabi_dcmplt>
 8009020:	2800      	cmp	r0, #0
 8009022:	f43f af27 	beq.w	8008e74 <_dtoa_r+0x47c>
 8009026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009028:	1e6b      	subs	r3, r5, #1
 800902a:	930c      	str	r3, [sp, #48]	; 0x30
 800902c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009030:	2b30      	cmp	r3, #48	; 0x30
 8009032:	d0f8      	beq.n	8009026 <_dtoa_r+0x62e>
 8009034:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009038:	e04a      	b.n	80090d0 <_dtoa_r+0x6d8>
 800903a:	bf00      	nop
 800903c:	0800d330 	.word	0x0800d330
 8009040:	0800d308 	.word	0x0800d308
 8009044:	3ff00000 	.word	0x3ff00000
 8009048:	40240000 	.word	0x40240000
 800904c:	401c0000 	.word	0x401c0000
 8009050:	40140000 	.word	0x40140000
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	4baf      	ldr	r3, [pc, #700]	; (8009318 <_dtoa_r+0x920>)
 800905a:	f7f7 faed 	bl	8000638 <__aeabi_dmul>
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	e7ac      	b.n	8008fbe <_dtoa_r+0x5c6>
 8009064:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009068:	9d00      	ldr	r5, [sp, #0]
 800906a:	4642      	mov	r2, r8
 800906c:	464b      	mov	r3, r9
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 fc0b 	bl	800088c <__aeabi_ddiv>
 8009076:	f7f7 fd8f 	bl	8000b98 <__aeabi_d2iz>
 800907a:	9002      	str	r0, [sp, #8]
 800907c:	f7f7 fa72 	bl	8000564 <__aeabi_i2d>
 8009080:	4642      	mov	r2, r8
 8009082:	464b      	mov	r3, r9
 8009084:	f7f7 fad8 	bl	8000638 <__aeabi_dmul>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4630      	mov	r0, r6
 800908e:	4639      	mov	r1, r7
 8009090:	f7f7 f91a 	bl	80002c8 <__aeabi_dsub>
 8009094:	9e02      	ldr	r6, [sp, #8]
 8009096:	9f01      	ldr	r7, [sp, #4]
 8009098:	3630      	adds	r6, #48	; 0x30
 800909a:	f805 6b01 	strb.w	r6, [r5], #1
 800909e:	9e00      	ldr	r6, [sp, #0]
 80090a0:	1bae      	subs	r6, r5, r6
 80090a2:	42b7      	cmp	r7, r6
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	d137      	bne.n	800911a <_dtoa_r+0x722>
 80090aa:	f7f7 f90f 	bl	80002cc <__adddf3>
 80090ae:	4642      	mov	r2, r8
 80090b0:	464b      	mov	r3, r9
 80090b2:	4606      	mov	r6, r0
 80090b4:	460f      	mov	r7, r1
 80090b6:	f7f7 fd4f 	bl	8000b58 <__aeabi_dcmpgt>
 80090ba:	b9c8      	cbnz	r0, 80090f0 <_dtoa_r+0x6f8>
 80090bc:	4642      	mov	r2, r8
 80090be:	464b      	mov	r3, r9
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fd20 	bl	8000b08 <__aeabi_dcmpeq>
 80090c8:	b110      	cbz	r0, 80090d0 <_dtoa_r+0x6d8>
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	07d9      	lsls	r1, r3, #31
 80090ce:	d40f      	bmi.n	80090f0 <_dtoa_r+0x6f8>
 80090d0:	4620      	mov	r0, r4
 80090d2:	4659      	mov	r1, fp
 80090d4:	f000 fcf6 	bl	8009ac4 <_Bfree>
 80090d8:	2300      	movs	r3, #0
 80090da:	702b      	strb	r3, [r5, #0]
 80090dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090de:	f10a 0001 	add.w	r0, sl, #1
 80090e2:	6018      	str	r0, [r3, #0]
 80090e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f43f acd8 	beq.w	8008a9c <_dtoa_r+0xa4>
 80090ec:	601d      	str	r5, [r3, #0]
 80090ee:	e4d5      	b.n	8008a9c <_dtoa_r+0xa4>
 80090f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80090f4:	462b      	mov	r3, r5
 80090f6:	461d      	mov	r5, r3
 80090f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090fc:	2a39      	cmp	r2, #57	; 0x39
 80090fe:	d108      	bne.n	8009112 <_dtoa_r+0x71a>
 8009100:	9a00      	ldr	r2, [sp, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d1f7      	bne.n	80090f6 <_dtoa_r+0x6fe>
 8009106:	9a07      	ldr	r2, [sp, #28]
 8009108:	9900      	ldr	r1, [sp, #0]
 800910a:	3201      	adds	r2, #1
 800910c:	9207      	str	r2, [sp, #28]
 800910e:	2230      	movs	r2, #48	; 0x30
 8009110:	700a      	strb	r2, [r1, #0]
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	3201      	adds	r2, #1
 8009116:	701a      	strb	r2, [r3, #0]
 8009118:	e78c      	b.n	8009034 <_dtoa_r+0x63c>
 800911a:	4b7f      	ldr	r3, [pc, #508]	; (8009318 <_dtoa_r+0x920>)
 800911c:	2200      	movs	r2, #0
 800911e:	f7f7 fa8b 	bl	8000638 <__aeabi_dmul>
 8009122:	2200      	movs	r2, #0
 8009124:	2300      	movs	r3, #0
 8009126:	4606      	mov	r6, r0
 8009128:	460f      	mov	r7, r1
 800912a:	f7f7 fced 	bl	8000b08 <__aeabi_dcmpeq>
 800912e:	2800      	cmp	r0, #0
 8009130:	d09b      	beq.n	800906a <_dtoa_r+0x672>
 8009132:	e7cd      	b.n	80090d0 <_dtoa_r+0x6d8>
 8009134:	9a08      	ldr	r2, [sp, #32]
 8009136:	2a00      	cmp	r2, #0
 8009138:	f000 80c4 	beq.w	80092c4 <_dtoa_r+0x8cc>
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	2a01      	cmp	r2, #1
 8009140:	f300 80a8 	bgt.w	8009294 <_dtoa_r+0x89c>
 8009144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009146:	2a00      	cmp	r2, #0
 8009148:	f000 80a0 	beq.w	800928c <_dtoa_r+0x894>
 800914c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009150:	9e06      	ldr	r6, [sp, #24]
 8009152:	4645      	mov	r5, r8
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	2101      	movs	r1, #1
 8009158:	441a      	add	r2, r3
 800915a:	4620      	mov	r0, r4
 800915c:	4498      	add	r8, r3
 800915e:	9204      	str	r2, [sp, #16]
 8009160:	f000 fd6c 	bl	8009c3c <__i2b>
 8009164:	4607      	mov	r7, r0
 8009166:	2d00      	cmp	r5, #0
 8009168:	dd0b      	ble.n	8009182 <_dtoa_r+0x78a>
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dd08      	ble.n	8009182 <_dtoa_r+0x78a>
 8009170:	42ab      	cmp	r3, r5
 8009172:	9a04      	ldr	r2, [sp, #16]
 8009174:	bfa8      	it	ge
 8009176:	462b      	movge	r3, r5
 8009178:	eba8 0803 	sub.w	r8, r8, r3
 800917c:	1aed      	subs	r5, r5, r3
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	9b06      	ldr	r3, [sp, #24]
 8009184:	b1fb      	cbz	r3, 80091c6 <_dtoa_r+0x7ce>
 8009186:	9b08      	ldr	r3, [sp, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 809f 	beq.w	80092cc <_dtoa_r+0x8d4>
 800918e:	2e00      	cmp	r6, #0
 8009190:	dd11      	ble.n	80091b6 <_dtoa_r+0x7be>
 8009192:	4639      	mov	r1, r7
 8009194:	4632      	mov	r2, r6
 8009196:	4620      	mov	r0, r4
 8009198:	f000 fe0c 	bl	8009db4 <__pow5mult>
 800919c:	465a      	mov	r2, fp
 800919e:	4601      	mov	r1, r0
 80091a0:	4607      	mov	r7, r0
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 fd60 	bl	8009c68 <__multiply>
 80091a8:	4659      	mov	r1, fp
 80091aa:	9007      	str	r0, [sp, #28]
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 fc89 	bl	8009ac4 <_Bfree>
 80091b2:	9b07      	ldr	r3, [sp, #28]
 80091b4:	469b      	mov	fp, r3
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	1b9a      	subs	r2, r3, r6
 80091ba:	d004      	beq.n	80091c6 <_dtoa_r+0x7ce>
 80091bc:	4659      	mov	r1, fp
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fdf8 	bl	8009db4 <__pow5mult>
 80091c4:	4683      	mov	fp, r0
 80091c6:	2101      	movs	r1, #1
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fd37 	bl	8009c3c <__i2b>
 80091ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	4606      	mov	r6, r0
 80091d4:	dd7c      	ble.n	80092d0 <_dtoa_r+0x8d8>
 80091d6:	461a      	mov	r2, r3
 80091d8:	4601      	mov	r1, r0
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 fdea 	bl	8009db4 <__pow5mult>
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	4606      	mov	r6, r0
 80091e6:	dd76      	ble.n	80092d6 <_dtoa_r+0x8de>
 80091e8:	2300      	movs	r3, #0
 80091ea:	9306      	str	r3, [sp, #24]
 80091ec:	6933      	ldr	r3, [r6, #16]
 80091ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091f2:	6918      	ldr	r0, [r3, #16]
 80091f4:	f000 fcd2 	bl	8009b9c <__hi0bits>
 80091f8:	f1c0 0020 	rsb	r0, r0, #32
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	4418      	add	r0, r3
 8009200:	f010 001f 	ands.w	r0, r0, #31
 8009204:	f000 8086 	beq.w	8009314 <_dtoa_r+0x91c>
 8009208:	f1c0 0320 	rsb	r3, r0, #32
 800920c:	2b04      	cmp	r3, #4
 800920e:	dd7f      	ble.n	8009310 <_dtoa_r+0x918>
 8009210:	f1c0 001c 	rsb	r0, r0, #28
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	4403      	add	r3, r0
 8009218:	4480      	add	r8, r0
 800921a:	4405      	add	r5, r0
 800921c:	9304      	str	r3, [sp, #16]
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	dd05      	ble.n	8009230 <_dtoa_r+0x838>
 8009224:	4659      	mov	r1, fp
 8009226:	4642      	mov	r2, r8
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fe1d 	bl	8009e68 <__lshift>
 800922e:	4683      	mov	fp, r0
 8009230:	9b04      	ldr	r3, [sp, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	dd05      	ble.n	8009242 <_dtoa_r+0x84a>
 8009236:	4631      	mov	r1, r6
 8009238:	461a      	mov	r2, r3
 800923a:	4620      	mov	r0, r4
 800923c:	f000 fe14 	bl	8009e68 <__lshift>
 8009240:	4606      	mov	r6, r0
 8009242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009244:	2b00      	cmp	r3, #0
 8009246:	d069      	beq.n	800931c <_dtoa_r+0x924>
 8009248:	4631      	mov	r1, r6
 800924a:	4658      	mov	r0, fp
 800924c:	f000 fe78 	bl	8009f40 <__mcmp>
 8009250:	2800      	cmp	r0, #0
 8009252:	da63      	bge.n	800931c <_dtoa_r+0x924>
 8009254:	2300      	movs	r3, #0
 8009256:	4659      	mov	r1, fp
 8009258:	220a      	movs	r2, #10
 800925a:	4620      	mov	r0, r4
 800925c:	f000 fc54 	bl	8009b08 <__multadd>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009266:	4683      	mov	fp, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 818f 	beq.w	800958c <_dtoa_r+0xb94>
 800926e:	4639      	mov	r1, r7
 8009270:	2300      	movs	r3, #0
 8009272:	220a      	movs	r2, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fc47 	bl	8009b08 <__multadd>
 800927a:	f1b9 0f00 	cmp.w	r9, #0
 800927e:	4607      	mov	r7, r0
 8009280:	f300 808e 	bgt.w	80093a0 <_dtoa_r+0x9a8>
 8009284:	9b05      	ldr	r3, [sp, #20]
 8009286:	2b02      	cmp	r3, #2
 8009288:	dc50      	bgt.n	800932c <_dtoa_r+0x934>
 800928a:	e089      	b.n	80093a0 <_dtoa_r+0x9a8>
 800928c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800928e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009292:	e75d      	b.n	8009150 <_dtoa_r+0x758>
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	1e5e      	subs	r6, r3, #1
 8009298:	9b06      	ldr	r3, [sp, #24]
 800929a:	42b3      	cmp	r3, r6
 800929c:	bfbf      	itttt	lt
 800929e:	9b06      	ldrlt	r3, [sp, #24]
 80092a0:	9606      	strlt	r6, [sp, #24]
 80092a2:	1af2      	sublt	r2, r6, r3
 80092a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80092a6:	bfb6      	itet	lt
 80092a8:	189b      	addlt	r3, r3, r2
 80092aa:	1b9e      	subge	r6, r3, r6
 80092ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	bfb8      	it	lt
 80092b2:	2600      	movlt	r6, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfb5      	itete	lt
 80092b8:	eba8 0503 	sublt.w	r5, r8, r3
 80092bc:	9b01      	ldrge	r3, [sp, #4]
 80092be:	2300      	movlt	r3, #0
 80092c0:	4645      	movge	r5, r8
 80092c2:	e747      	b.n	8009154 <_dtoa_r+0x75c>
 80092c4:	9e06      	ldr	r6, [sp, #24]
 80092c6:	9f08      	ldr	r7, [sp, #32]
 80092c8:	4645      	mov	r5, r8
 80092ca:	e74c      	b.n	8009166 <_dtoa_r+0x76e>
 80092cc:	9a06      	ldr	r2, [sp, #24]
 80092ce:	e775      	b.n	80091bc <_dtoa_r+0x7c4>
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	dc18      	bgt.n	8009308 <_dtoa_r+0x910>
 80092d6:	9b02      	ldr	r3, [sp, #8]
 80092d8:	b9b3      	cbnz	r3, 8009308 <_dtoa_r+0x910>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092e0:	b9a3      	cbnz	r3, 800930c <_dtoa_r+0x914>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e8:	0d1b      	lsrs	r3, r3, #20
 80092ea:	051b      	lsls	r3, r3, #20
 80092ec:	b12b      	cbz	r3, 80092fa <_dtoa_r+0x902>
 80092ee:	9b04      	ldr	r3, [sp, #16]
 80092f0:	3301      	adds	r3, #1
 80092f2:	9304      	str	r3, [sp, #16]
 80092f4:	f108 0801 	add.w	r8, r8, #1
 80092f8:	2301      	movs	r3, #1
 80092fa:	9306      	str	r3, [sp, #24]
 80092fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f47f af74 	bne.w	80091ec <_dtoa_r+0x7f4>
 8009304:	2001      	movs	r0, #1
 8009306:	e779      	b.n	80091fc <_dtoa_r+0x804>
 8009308:	2300      	movs	r3, #0
 800930a:	e7f6      	b.n	80092fa <_dtoa_r+0x902>
 800930c:	9b02      	ldr	r3, [sp, #8]
 800930e:	e7f4      	b.n	80092fa <_dtoa_r+0x902>
 8009310:	d085      	beq.n	800921e <_dtoa_r+0x826>
 8009312:	4618      	mov	r0, r3
 8009314:	301c      	adds	r0, #28
 8009316:	e77d      	b.n	8009214 <_dtoa_r+0x81c>
 8009318:	40240000 	.word	0x40240000
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dc38      	bgt.n	8009394 <_dtoa_r+0x99c>
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	2b02      	cmp	r3, #2
 8009326:	dd35      	ble.n	8009394 <_dtoa_r+0x99c>
 8009328:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800932c:	f1b9 0f00 	cmp.w	r9, #0
 8009330:	d10d      	bne.n	800934e <_dtoa_r+0x956>
 8009332:	4631      	mov	r1, r6
 8009334:	464b      	mov	r3, r9
 8009336:	2205      	movs	r2, #5
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fbe5 	bl	8009b08 <__multadd>
 800933e:	4601      	mov	r1, r0
 8009340:	4606      	mov	r6, r0
 8009342:	4658      	mov	r0, fp
 8009344:	f000 fdfc 	bl	8009f40 <__mcmp>
 8009348:	2800      	cmp	r0, #0
 800934a:	f73f adbd 	bgt.w	8008ec8 <_dtoa_r+0x4d0>
 800934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009350:	9d00      	ldr	r5, [sp, #0]
 8009352:	ea6f 0a03 	mvn.w	sl, r3
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	4631      	mov	r1, r6
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fbb1 	bl	8009ac4 <_Bfree>
 8009362:	2f00      	cmp	r7, #0
 8009364:	f43f aeb4 	beq.w	80090d0 <_dtoa_r+0x6d8>
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	d005      	beq.n	800937a <_dtoa_r+0x982>
 800936e:	45b8      	cmp	r8, r7
 8009370:	d003      	beq.n	800937a <_dtoa_r+0x982>
 8009372:	4641      	mov	r1, r8
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fba5 	bl	8009ac4 <_Bfree>
 800937a:	4639      	mov	r1, r7
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fba1 	bl	8009ac4 <_Bfree>
 8009382:	e6a5      	b.n	80090d0 <_dtoa_r+0x6d8>
 8009384:	2600      	movs	r6, #0
 8009386:	4637      	mov	r7, r6
 8009388:	e7e1      	b.n	800934e <_dtoa_r+0x956>
 800938a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800938c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009390:	4637      	mov	r7, r6
 8009392:	e599      	b.n	8008ec8 <_dtoa_r+0x4d0>
 8009394:	9b08      	ldr	r3, [sp, #32]
 8009396:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 80fd 	beq.w	800959a <_dtoa_r+0xba2>
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	dd05      	ble.n	80093b0 <_dtoa_r+0x9b8>
 80093a4:	4639      	mov	r1, r7
 80093a6:	462a      	mov	r2, r5
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fd5d 	bl	8009e68 <__lshift>
 80093ae:	4607      	mov	r7, r0
 80093b0:	9b06      	ldr	r3, [sp, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d05c      	beq.n	8009470 <_dtoa_r+0xa78>
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fb43 	bl	8009a44 <_Balloc>
 80093be:	4605      	mov	r5, r0
 80093c0:	b928      	cbnz	r0, 80093ce <_dtoa_r+0x9d6>
 80093c2:	4b80      	ldr	r3, [pc, #512]	; (80095c4 <_dtoa_r+0xbcc>)
 80093c4:	4602      	mov	r2, r0
 80093c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093ca:	f7ff bb2e 	b.w	8008a2a <_dtoa_r+0x32>
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	3202      	adds	r2, #2
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	f107 010c 	add.w	r1, r7, #12
 80093d8:	300c      	adds	r0, #12
 80093da:	f000 fb25 	bl	8009a28 <memcpy>
 80093de:	2201      	movs	r2, #1
 80093e0:	4629      	mov	r1, r5
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fd40 	bl	8009e68 <__lshift>
 80093e8:	9b00      	ldr	r3, [sp, #0]
 80093ea:	3301      	adds	r3, #1
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	444b      	add	r3, r9
 80093f2:	9307      	str	r3, [sp, #28]
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	46b8      	mov	r8, r7
 80093fc:	9306      	str	r3, [sp, #24]
 80093fe:	4607      	mov	r7, r0
 8009400:	9b01      	ldr	r3, [sp, #4]
 8009402:	4631      	mov	r1, r6
 8009404:	3b01      	subs	r3, #1
 8009406:	4658      	mov	r0, fp
 8009408:	9302      	str	r3, [sp, #8]
 800940a:	f7ff fa69 	bl	80088e0 <quorem>
 800940e:	4603      	mov	r3, r0
 8009410:	3330      	adds	r3, #48	; 0x30
 8009412:	9004      	str	r0, [sp, #16]
 8009414:	4641      	mov	r1, r8
 8009416:	4658      	mov	r0, fp
 8009418:	9308      	str	r3, [sp, #32]
 800941a:	f000 fd91 	bl	8009f40 <__mcmp>
 800941e:	463a      	mov	r2, r7
 8009420:	4681      	mov	r9, r0
 8009422:	4631      	mov	r1, r6
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fda7 	bl	8009f78 <__mdiff>
 800942a:	68c2      	ldr	r2, [r0, #12]
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	4605      	mov	r5, r0
 8009430:	bb02      	cbnz	r2, 8009474 <_dtoa_r+0xa7c>
 8009432:	4601      	mov	r1, r0
 8009434:	4658      	mov	r0, fp
 8009436:	f000 fd83 	bl	8009f40 <__mcmp>
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	4602      	mov	r2, r0
 800943e:	4629      	mov	r1, r5
 8009440:	4620      	mov	r0, r4
 8009442:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009446:	f000 fb3d 	bl	8009ac4 <_Bfree>
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800944e:	9d01      	ldr	r5, [sp, #4]
 8009450:	ea43 0102 	orr.w	r1, r3, r2
 8009454:	9b06      	ldr	r3, [sp, #24]
 8009456:	430b      	orrs	r3, r1
 8009458:	9b08      	ldr	r3, [sp, #32]
 800945a:	d10d      	bne.n	8009478 <_dtoa_r+0xa80>
 800945c:	2b39      	cmp	r3, #57	; 0x39
 800945e:	d029      	beq.n	80094b4 <_dtoa_r+0xabc>
 8009460:	f1b9 0f00 	cmp.w	r9, #0
 8009464:	dd01      	ble.n	800946a <_dtoa_r+0xa72>
 8009466:	9b04      	ldr	r3, [sp, #16]
 8009468:	3331      	adds	r3, #49	; 0x31
 800946a:	9a02      	ldr	r2, [sp, #8]
 800946c:	7013      	strb	r3, [r2, #0]
 800946e:	e774      	b.n	800935a <_dtoa_r+0x962>
 8009470:	4638      	mov	r0, r7
 8009472:	e7b9      	b.n	80093e8 <_dtoa_r+0x9f0>
 8009474:	2201      	movs	r2, #1
 8009476:	e7e2      	b.n	800943e <_dtoa_r+0xa46>
 8009478:	f1b9 0f00 	cmp.w	r9, #0
 800947c:	db06      	blt.n	800948c <_dtoa_r+0xa94>
 800947e:	9905      	ldr	r1, [sp, #20]
 8009480:	ea41 0909 	orr.w	r9, r1, r9
 8009484:	9906      	ldr	r1, [sp, #24]
 8009486:	ea59 0101 	orrs.w	r1, r9, r1
 800948a:	d120      	bne.n	80094ce <_dtoa_r+0xad6>
 800948c:	2a00      	cmp	r2, #0
 800948e:	ddec      	ble.n	800946a <_dtoa_r+0xa72>
 8009490:	4659      	mov	r1, fp
 8009492:	2201      	movs	r2, #1
 8009494:	4620      	mov	r0, r4
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	f000 fce6 	bl	8009e68 <__lshift>
 800949c:	4631      	mov	r1, r6
 800949e:	4683      	mov	fp, r0
 80094a0:	f000 fd4e 	bl	8009f40 <__mcmp>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	dc02      	bgt.n	80094b0 <_dtoa_r+0xab8>
 80094aa:	d1de      	bne.n	800946a <_dtoa_r+0xa72>
 80094ac:	07da      	lsls	r2, r3, #31
 80094ae:	d5dc      	bpl.n	800946a <_dtoa_r+0xa72>
 80094b0:	2b39      	cmp	r3, #57	; 0x39
 80094b2:	d1d8      	bne.n	8009466 <_dtoa_r+0xa6e>
 80094b4:	9a02      	ldr	r2, [sp, #8]
 80094b6:	2339      	movs	r3, #57	; 0x39
 80094b8:	7013      	strb	r3, [r2, #0]
 80094ba:	462b      	mov	r3, r5
 80094bc:	461d      	mov	r5, r3
 80094be:	3b01      	subs	r3, #1
 80094c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094c4:	2a39      	cmp	r2, #57	; 0x39
 80094c6:	d050      	beq.n	800956a <_dtoa_r+0xb72>
 80094c8:	3201      	adds	r2, #1
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	e745      	b.n	800935a <_dtoa_r+0x962>
 80094ce:	2a00      	cmp	r2, #0
 80094d0:	dd03      	ble.n	80094da <_dtoa_r+0xae2>
 80094d2:	2b39      	cmp	r3, #57	; 0x39
 80094d4:	d0ee      	beq.n	80094b4 <_dtoa_r+0xabc>
 80094d6:	3301      	adds	r3, #1
 80094d8:	e7c7      	b.n	800946a <_dtoa_r+0xa72>
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	9907      	ldr	r1, [sp, #28]
 80094de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80094e2:	428a      	cmp	r2, r1
 80094e4:	d02a      	beq.n	800953c <_dtoa_r+0xb44>
 80094e6:	4659      	mov	r1, fp
 80094e8:	2300      	movs	r3, #0
 80094ea:	220a      	movs	r2, #10
 80094ec:	4620      	mov	r0, r4
 80094ee:	f000 fb0b 	bl	8009b08 <__multadd>
 80094f2:	45b8      	cmp	r8, r7
 80094f4:	4683      	mov	fp, r0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	f04f 020a 	mov.w	r2, #10
 80094fe:	4641      	mov	r1, r8
 8009500:	4620      	mov	r0, r4
 8009502:	d107      	bne.n	8009514 <_dtoa_r+0xb1c>
 8009504:	f000 fb00 	bl	8009b08 <__multadd>
 8009508:	4680      	mov	r8, r0
 800950a:	4607      	mov	r7, r0
 800950c:	9b01      	ldr	r3, [sp, #4]
 800950e:	3301      	adds	r3, #1
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	e775      	b.n	8009400 <_dtoa_r+0xa08>
 8009514:	f000 faf8 	bl	8009b08 <__multadd>
 8009518:	4639      	mov	r1, r7
 800951a:	4680      	mov	r8, r0
 800951c:	2300      	movs	r3, #0
 800951e:	220a      	movs	r2, #10
 8009520:	4620      	mov	r0, r4
 8009522:	f000 faf1 	bl	8009b08 <__multadd>
 8009526:	4607      	mov	r7, r0
 8009528:	e7f0      	b.n	800950c <_dtoa_r+0xb14>
 800952a:	f1b9 0f00 	cmp.w	r9, #0
 800952e:	9a00      	ldr	r2, [sp, #0]
 8009530:	bfcc      	ite	gt
 8009532:	464d      	movgt	r5, r9
 8009534:	2501      	movle	r5, #1
 8009536:	4415      	add	r5, r2
 8009538:	f04f 0800 	mov.w	r8, #0
 800953c:	4659      	mov	r1, fp
 800953e:	2201      	movs	r2, #1
 8009540:	4620      	mov	r0, r4
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	f000 fc90 	bl	8009e68 <__lshift>
 8009548:	4631      	mov	r1, r6
 800954a:	4683      	mov	fp, r0
 800954c:	f000 fcf8 	bl	8009f40 <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	dcb2      	bgt.n	80094ba <_dtoa_r+0xac2>
 8009554:	d102      	bne.n	800955c <_dtoa_r+0xb64>
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	07db      	lsls	r3, r3, #31
 800955a:	d4ae      	bmi.n	80094ba <_dtoa_r+0xac2>
 800955c:	462b      	mov	r3, r5
 800955e:	461d      	mov	r5, r3
 8009560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009564:	2a30      	cmp	r2, #48	; 0x30
 8009566:	d0fa      	beq.n	800955e <_dtoa_r+0xb66>
 8009568:	e6f7      	b.n	800935a <_dtoa_r+0x962>
 800956a:	9a00      	ldr	r2, [sp, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d1a5      	bne.n	80094bc <_dtoa_r+0xac4>
 8009570:	f10a 0a01 	add.w	sl, sl, #1
 8009574:	2331      	movs	r3, #49	; 0x31
 8009576:	e779      	b.n	800946c <_dtoa_r+0xa74>
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <_dtoa_r+0xbd0>)
 800957a:	f7ff baaf 	b.w	8008adc <_dtoa_r+0xe4>
 800957e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009580:	2b00      	cmp	r3, #0
 8009582:	f47f aa86 	bne.w	8008a92 <_dtoa_r+0x9a>
 8009586:	4b11      	ldr	r3, [pc, #68]	; (80095cc <_dtoa_r+0xbd4>)
 8009588:	f7ff baa8 	b.w	8008adc <_dtoa_r+0xe4>
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	dc03      	bgt.n	800959a <_dtoa_r+0xba2>
 8009592:	9b05      	ldr	r3, [sp, #20]
 8009594:	2b02      	cmp	r3, #2
 8009596:	f73f aec9 	bgt.w	800932c <_dtoa_r+0x934>
 800959a:	9d00      	ldr	r5, [sp, #0]
 800959c:	4631      	mov	r1, r6
 800959e:	4658      	mov	r0, fp
 80095a0:	f7ff f99e 	bl	80088e0 <quorem>
 80095a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80095a8:	f805 3b01 	strb.w	r3, [r5], #1
 80095ac:	9a00      	ldr	r2, [sp, #0]
 80095ae:	1aaa      	subs	r2, r5, r2
 80095b0:	4591      	cmp	r9, r2
 80095b2:	ddba      	ble.n	800952a <_dtoa_r+0xb32>
 80095b4:	4659      	mov	r1, fp
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 faa4 	bl	8009b08 <__multadd>
 80095c0:	4683      	mov	fp, r0
 80095c2:	e7eb      	b.n	800959c <_dtoa_r+0xba4>
 80095c4:	0800d234 	.word	0x0800d234
 80095c8:	0800d08c 	.word	0x0800d08c
 80095cc:	0800d1b1 	.word	0x0800d1b1

080095d0 <__sflush_r>:
 80095d0:	898a      	ldrh	r2, [r1, #12]
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	4605      	mov	r5, r0
 80095d8:	0710      	lsls	r0, r2, #28
 80095da:	460c      	mov	r4, r1
 80095dc:	d458      	bmi.n	8009690 <__sflush_r+0xc0>
 80095de:	684b      	ldr	r3, [r1, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	dc05      	bgt.n	80095f0 <__sflush_r+0x20>
 80095e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dc02      	bgt.n	80095f0 <__sflush_r+0x20>
 80095ea:	2000      	movs	r0, #0
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f2:	2e00      	cmp	r6, #0
 80095f4:	d0f9      	beq.n	80095ea <__sflush_r+0x1a>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095fc:	682f      	ldr	r7, [r5, #0]
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	d032      	beq.n	8009668 <__sflush_r+0x98>
 8009602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	075a      	lsls	r2, r3, #29
 8009608:	d505      	bpl.n	8009616 <__sflush_r+0x46>
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	1ac0      	subs	r0, r0, r3
 800960e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009610:	b10b      	cbz	r3, 8009616 <__sflush_r+0x46>
 8009612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009614:	1ac0      	subs	r0, r0, r3
 8009616:	2300      	movs	r3, #0
 8009618:	4602      	mov	r2, r0
 800961a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	4628      	mov	r0, r5
 8009620:	47b0      	blx	r6
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	d106      	bne.n	8009636 <__sflush_r+0x66>
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	291d      	cmp	r1, #29
 800962c:	d82c      	bhi.n	8009688 <__sflush_r+0xb8>
 800962e:	4a2a      	ldr	r2, [pc, #168]	; (80096d8 <__sflush_r+0x108>)
 8009630:	40ca      	lsrs	r2, r1
 8009632:	07d6      	lsls	r6, r2, #31
 8009634:	d528      	bpl.n	8009688 <__sflush_r+0xb8>
 8009636:	2200      	movs	r2, #0
 8009638:	6062      	str	r2, [r4, #4]
 800963a:	04d9      	lsls	r1, r3, #19
 800963c:	6922      	ldr	r2, [r4, #16]
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	d504      	bpl.n	800964c <__sflush_r+0x7c>
 8009642:	1c42      	adds	r2, r0, #1
 8009644:	d101      	bne.n	800964a <__sflush_r+0x7a>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	b903      	cbnz	r3, 800964c <__sflush_r+0x7c>
 800964a:	6560      	str	r0, [r4, #84]	; 0x54
 800964c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800964e:	602f      	str	r7, [r5, #0]
 8009650:	2900      	cmp	r1, #0
 8009652:	d0ca      	beq.n	80095ea <__sflush_r+0x1a>
 8009654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009658:	4299      	cmp	r1, r3
 800965a:	d002      	beq.n	8009662 <__sflush_r+0x92>
 800965c:	4628      	mov	r0, r5
 800965e:	f000 fd7f 	bl	800a160 <_free_r>
 8009662:	2000      	movs	r0, #0
 8009664:	6360      	str	r0, [r4, #52]	; 0x34
 8009666:	e7c1      	b.n	80095ec <__sflush_r+0x1c>
 8009668:	6a21      	ldr	r1, [r4, #32]
 800966a:	2301      	movs	r3, #1
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	1c41      	adds	r1, r0, #1
 8009672:	d1c7      	bne.n	8009604 <__sflush_r+0x34>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c4      	beq.n	8009604 <__sflush_r+0x34>
 800967a:	2b1d      	cmp	r3, #29
 800967c:	d001      	beq.n	8009682 <__sflush_r+0xb2>
 800967e:	2b16      	cmp	r3, #22
 8009680:	d101      	bne.n	8009686 <__sflush_r+0xb6>
 8009682:	602f      	str	r7, [r5, #0]
 8009684:	e7b1      	b.n	80095ea <__sflush_r+0x1a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e7ad      	b.n	80095ec <__sflush_r+0x1c>
 8009690:	690f      	ldr	r7, [r1, #16]
 8009692:	2f00      	cmp	r7, #0
 8009694:	d0a9      	beq.n	80095ea <__sflush_r+0x1a>
 8009696:	0793      	lsls	r3, r2, #30
 8009698:	680e      	ldr	r6, [r1, #0]
 800969a:	bf08      	it	eq
 800969c:	694b      	ldreq	r3, [r1, #20]
 800969e:	600f      	str	r7, [r1, #0]
 80096a0:	bf18      	it	ne
 80096a2:	2300      	movne	r3, #0
 80096a4:	eba6 0807 	sub.w	r8, r6, r7
 80096a8:	608b      	str	r3, [r1, #8]
 80096aa:	f1b8 0f00 	cmp.w	r8, #0
 80096ae:	dd9c      	ble.n	80095ea <__sflush_r+0x1a>
 80096b0:	6a21      	ldr	r1, [r4, #32]
 80096b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096b4:	4643      	mov	r3, r8
 80096b6:	463a      	mov	r2, r7
 80096b8:	4628      	mov	r0, r5
 80096ba:	47b0      	blx	r6
 80096bc:	2800      	cmp	r0, #0
 80096be:	dc06      	bgt.n	80096ce <__sflush_r+0xfe>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	e78e      	b.n	80095ec <__sflush_r+0x1c>
 80096ce:	4407      	add	r7, r0
 80096d0:	eba8 0800 	sub.w	r8, r8, r0
 80096d4:	e7e9      	b.n	80096aa <__sflush_r+0xda>
 80096d6:	bf00      	nop
 80096d8:	20400001 	.word	0x20400001

080096dc <_fflush_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	4605      	mov	r5, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	b913      	cbnz	r3, 80096ec <_fflush_r+0x10>
 80096e6:	2500      	movs	r5, #0
 80096e8:	4628      	mov	r0, r5
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	b118      	cbz	r0, 80096f6 <_fflush_r+0x1a>
 80096ee:	6983      	ldr	r3, [r0, #24]
 80096f0:	b90b      	cbnz	r3, 80096f6 <_fflush_r+0x1a>
 80096f2:	f000 f887 	bl	8009804 <__sinit>
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <_fflush_r+0x6c>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d11b      	bne.n	8009734 <_fflush_r+0x58>
 80096fc:	686c      	ldr	r4, [r5, #4]
 80096fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0ef      	beq.n	80096e6 <_fflush_r+0xa>
 8009706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009708:	07d0      	lsls	r0, r2, #31
 800970a:	d404      	bmi.n	8009716 <_fflush_r+0x3a>
 800970c:	0599      	lsls	r1, r3, #22
 800970e:	d402      	bmi.n	8009716 <_fflush_r+0x3a>
 8009710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009712:	f000 f91a 	bl	800994a <__retarget_lock_acquire_recursive>
 8009716:	4628      	mov	r0, r5
 8009718:	4621      	mov	r1, r4
 800971a:	f7ff ff59 	bl	80095d0 <__sflush_r>
 800971e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009720:	07da      	lsls	r2, r3, #31
 8009722:	4605      	mov	r5, r0
 8009724:	d4e0      	bmi.n	80096e8 <_fflush_r+0xc>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	059b      	lsls	r3, r3, #22
 800972a:	d4dd      	bmi.n	80096e8 <_fflush_r+0xc>
 800972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972e:	f000 f90d 	bl	800994c <__retarget_lock_release_recursive>
 8009732:	e7d9      	b.n	80096e8 <_fflush_r+0xc>
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <_fflush_r+0x70>)
 8009736:	429c      	cmp	r4, r3
 8009738:	d101      	bne.n	800973e <_fflush_r+0x62>
 800973a:	68ac      	ldr	r4, [r5, #8]
 800973c:	e7df      	b.n	80096fe <_fflush_r+0x22>
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <_fflush_r+0x74>)
 8009740:	429c      	cmp	r4, r3
 8009742:	bf08      	it	eq
 8009744:	68ec      	ldreq	r4, [r5, #12]
 8009746:	e7da      	b.n	80096fe <_fflush_r+0x22>
 8009748:	0800d268 	.word	0x0800d268
 800974c:	0800d288 	.word	0x0800d288
 8009750:	0800d248 	.word	0x0800d248

08009754 <std>:
 8009754:	2300      	movs	r3, #0
 8009756:	b510      	push	{r4, lr}
 8009758:	4604      	mov	r4, r0
 800975a:	e9c0 3300 	strd	r3, r3, [r0]
 800975e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009762:	6083      	str	r3, [r0, #8]
 8009764:	8181      	strh	r1, [r0, #12]
 8009766:	6643      	str	r3, [r0, #100]	; 0x64
 8009768:	81c2      	strh	r2, [r0, #14]
 800976a:	6183      	str	r3, [r0, #24]
 800976c:	4619      	mov	r1, r3
 800976e:	2208      	movs	r2, #8
 8009770:	305c      	adds	r0, #92	; 0x5c
 8009772:	f7fe fa1f 	bl	8007bb4 <memset>
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <std+0x38>)
 8009778:	6263      	str	r3, [r4, #36]	; 0x24
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <std+0x3c>)
 800977c:	62a3      	str	r3, [r4, #40]	; 0x28
 800977e:	4b05      	ldr	r3, [pc, #20]	; (8009794 <std+0x40>)
 8009780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <std+0x44>)
 8009784:	6224      	str	r4, [r4, #32]
 8009786:	6323      	str	r3, [r4, #48]	; 0x30
 8009788:	bd10      	pop	{r4, pc}
 800978a:	bf00      	nop
 800978c:	0800a589 	.word	0x0800a589
 8009790:	0800a5ab 	.word	0x0800a5ab
 8009794:	0800a5e3 	.word	0x0800a5e3
 8009798:	0800a607 	.word	0x0800a607

0800979c <_cleanup_r>:
 800979c:	4901      	ldr	r1, [pc, #4]	; (80097a4 <_cleanup_r+0x8>)
 800979e:	f000 b8af 	b.w	8009900 <_fwalk_reent>
 80097a2:	bf00      	nop
 80097a4:	080096dd 	.word	0x080096dd

080097a8 <__sfmoreglue>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	1e4a      	subs	r2, r1, #1
 80097ac:	2568      	movs	r5, #104	; 0x68
 80097ae:	4355      	muls	r5, r2
 80097b0:	460e      	mov	r6, r1
 80097b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097b6:	f000 fd23 	bl	800a200 <_malloc_r>
 80097ba:	4604      	mov	r4, r0
 80097bc:	b140      	cbz	r0, 80097d0 <__sfmoreglue+0x28>
 80097be:	2100      	movs	r1, #0
 80097c0:	e9c0 1600 	strd	r1, r6, [r0]
 80097c4:	300c      	adds	r0, #12
 80097c6:	60a0      	str	r0, [r4, #8]
 80097c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097cc:	f7fe f9f2 	bl	8007bb4 <memset>
 80097d0:	4620      	mov	r0, r4
 80097d2:	bd70      	pop	{r4, r5, r6, pc}

080097d4 <__sfp_lock_acquire>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sfp_lock_acquire+0x8>)
 80097d6:	f000 b8b8 	b.w	800994a <__retarget_lock_acquire_recursive>
 80097da:	bf00      	nop
 80097dc:	20000898 	.word	0x20000898

080097e0 <__sfp_lock_release>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__sfp_lock_release+0x8>)
 80097e2:	f000 b8b3 	b.w	800994c <__retarget_lock_release_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000898 	.word	0x20000898

080097ec <__sinit_lock_acquire>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__sinit_lock_acquire+0x8>)
 80097ee:	f000 b8ac 	b.w	800994a <__retarget_lock_acquire_recursive>
 80097f2:	bf00      	nop
 80097f4:	20000893 	.word	0x20000893

080097f8 <__sinit_lock_release>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sinit_lock_release+0x8>)
 80097fa:	f000 b8a7 	b.w	800994c <__retarget_lock_release_recursive>
 80097fe:	bf00      	nop
 8009800:	20000893 	.word	0x20000893

08009804 <__sinit>:
 8009804:	b510      	push	{r4, lr}
 8009806:	4604      	mov	r4, r0
 8009808:	f7ff fff0 	bl	80097ec <__sinit_lock_acquire>
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	b11b      	cbz	r3, 8009818 <__sinit+0x14>
 8009810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009814:	f7ff bff0 	b.w	80097f8 <__sinit_lock_release>
 8009818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800981c:	6523      	str	r3, [r4, #80]	; 0x50
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <__sinit+0x68>)
 8009820:	4a13      	ldr	r2, [pc, #76]	; (8009870 <__sinit+0x6c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	62a2      	str	r2, [r4, #40]	; 0x28
 8009826:	42a3      	cmp	r3, r4
 8009828:	bf04      	itt	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	61a3      	streq	r3, [r4, #24]
 800982e:	4620      	mov	r0, r4
 8009830:	f000 f820 	bl	8009874 <__sfp>
 8009834:	6060      	str	r0, [r4, #4]
 8009836:	4620      	mov	r0, r4
 8009838:	f000 f81c 	bl	8009874 <__sfp>
 800983c:	60a0      	str	r0, [r4, #8]
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f818 	bl	8009874 <__sfp>
 8009844:	2200      	movs	r2, #0
 8009846:	60e0      	str	r0, [r4, #12]
 8009848:	2104      	movs	r1, #4
 800984a:	6860      	ldr	r0, [r4, #4]
 800984c:	f7ff ff82 	bl	8009754 <std>
 8009850:	68a0      	ldr	r0, [r4, #8]
 8009852:	2201      	movs	r2, #1
 8009854:	2109      	movs	r1, #9
 8009856:	f7ff ff7d 	bl	8009754 <std>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	2202      	movs	r2, #2
 800985e:	2112      	movs	r1, #18
 8009860:	f7ff ff78 	bl	8009754 <std>
 8009864:	2301      	movs	r3, #1
 8009866:	61a3      	str	r3, [r4, #24]
 8009868:	e7d2      	b.n	8009810 <__sinit+0xc>
 800986a:	bf00      	nop
 800986c:	0800d078 	.word	0x0800d078
 8009870:	0800979d 	.word	0x0800979d

08009874 <__sfp>:
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	4607      	mov	r7, r0
 8009878:	f7ff ffac 	bl	80097d4 <__sfp_lock_acquire>
 800987c:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <__sfp+0x84>)
 800987e:	681e      	ldr	r6, [r3, #0]
 8009880:	69b3      	ldr	r3, [r6, #24]
 8009882:	b913      	cbnz	r3, 800988a <__sfp+0x16>
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff ffbd 	bl	8009804 <__sinit>
 800988a:	3648      	adds	r6, #72	; 0x48
 800988c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	d503      	bpl.n	800989c <__sfp+0x28>
 8009894:	6833      	ldr	r3, [r6, #0]
 8009896:	b30b      	cbz	r3, 80098dc <__sfp+0x68>
 8009898:	6836      	ldr	r6, [r6, #0]
 800989a:	e7f7      	b.n	800988c <__sfp+0x18>
 800989c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098a0:	b9d5      	cbnz	r5, 80098d8 <__sfp+0x64>
 80098a2:	4b16      	ldr	r3, [pc, #88]	; (80098fc <__sfp+0x88>)
 80098a4:	60e3      	str	r3, [r4, #12]
 80098a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098aa:	6665      	str	r5, [r4, #100]	; 0x64
 80098ac:	f000 f84c 	bl	8009948 <__retarget_lock_init_recursive>
 80098b0:	f7ff ff96 	bl	80097e0 <__sfp_lock_release>
 80098b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098bc:	6025      	str	r5, [r4, #0]
 80098be:	61a5      	str	r5, [r4, #24]
 80098c0:	2208      	movs	r2, #8
 80098c2:	4629      	mov	r1, r5
 80098c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098c8:	f7fe f974 	bl	8007bb4 <memset>
 80098cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098d4:	4620      	mov	r0, r4
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d8:	3468      	adds	r4, #104	; 0x68
 80098da:	e7d9      	b.n	8009890 <__sfp+0x1c>
 80098dc:	2104      	movs	r1, #4
 80098de:	4638      	mov	r0, r7
 80098e0:	f7ff ff62 	bl	80097a8 <__sfmoreglue>
 80098e4:	4604      	mov	r4, r0
 80098e6:	6030      	str	r0, [r6, #0]
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1d5      	bne.n	8009898 <__sfp+0x24>
 80098ec:	f7ff ff78 	bl	80097e0 <__sfp_lock_release>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	e7ee      	b.n	80098d4 <__sfp+0x60>
 80098f6:	bf00      	nop
 80098f8:	0800d078 	.word	0x0800d078
 80098fc:	ffff0001 	.word	0xffff0001

08009900 <_fwalk_reent>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	4606      	mov	r6, r0
 8009906:	4688      	mov	r8, r1
 8009908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800990c:	2700      	movs	r7, #0
 800990e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009912:	f1b9 0901 	subs.w	r9, r9, #1
 8009916:	d505      	bpl.n	8009924 <_fwalk_reent+0x24>
 8009918:	6824      	ldr	r4, [r4, #0]
 800991a:	2c00      	cmp	r4, #0
 800991c:	d1f7      	bne.n	800990e <_fwalk_reent+0xe>
 800991e:	4638      	mov	r0, r7
 8009920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009924:	89ab      	ldrh	r3, [r5, #12]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d907      	bls.n	800993a <_fwalk_reent+0x3a>
 800992a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800992e:	3301      	adds	r3, #1
 8009930:	d003      	beq.n	800993a <_fwalk_reent+0x3a>
 8009932:	4629      	mov	r1, r5
 8009934:	4630      	mov	r0, r6
 8009936:	47c0      	blx	r8
 8009938:	4307      	orrs	r7, r0
 800993a:	3568      	adds	r5, #104	; 0x68
 800993c:	e7e9      	b.n	8009912 <_fwalk_reent+0x12>
	...

08009940 <_localeconv_r>:
 8009940:	4800      	ldr	r0, [pc, #0]	; (8009944 <_localeconv_r+0x4>)
 8009942:	4770      	bx	lr
 8009944:	20000228 	.word	0x20000228

08009948 <__retarget_lock_init_recursive>:
 8009948:	4770      	bx	lr

0800994a <__retarget_lock_acquire_recursive>:
 800994a:	4770      	bx	lr

0800994c <__retarget_lock_release_recursive>:
 800994c:	4770      	bx	lr

0800994e <__swhatbuf_r>:
 800994e:	b570      	push	{r4, r5, r6, lr}
 8009950:	460e      	mov	r6, r1
 8009952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009956:	2900      	cmp	r1, #0
 8009958:	b096      	sub	sp, #88	; 0x58
 800995a:	4614      	mov	r4, r2
 800995c:	461d      	mov	r5, r3
 800995e:	da07      	bge.n	8009970 <__swhatbuf_r+0x22>
 8009960:	2300      	movs	r3, #0
 8009962:	602b      	str	r3, [r5, #0]
 8009964:	89b3      	ldrh	r3, [r6, #12]
 8009966:	061a      	lsls	r2, r3, #24
 8009968:	d410      	bmi.n	800998c <__swhatbuf_r+0x3e>
 800996a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996e:	e00e      	b.n	800998e <__swhatbuf_r+0x40>
 8009970:	466a      	mov	r2, sp
 8009972:	f000 fe9f 	bl	800a6b4 <_fstat_r>
 8009976:	2800      	cmp	r0, #0
 8009978:	dbf2      	blt.n	8009960 <__swhatbuf_r+0x12>
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009984:	425a      	negs	r2, r3
 8009986:	415a      	adcs	r2, r3
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	e7ee      	b.n	800996a <__swhatbuf_r+0x1c>
 800998c:	2340      	movs	r3, #64	; 0x40
 800998e:	2000      	movs	r0, #0
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	b016      	add	sp, #88	; 0x58
 8009994:	bd70      	pop	{r4, r5, r6, pc}
	...

08009998 <__smakebuf_r>:
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800999c:	079d      	lsls	r5, r3, #30
 800999e:	4606      	mov	r6, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	d507      	bpl.n	80099b4 <__smakebuf_r+0x1c>
 80099a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	6123      	str	r3, [r4, #16]
 80099ac:	2301      	movs	r3, #1
 80099ae:	6163      	str	r3, [r4, #20]
 80099b0:	b002      	add	sp, #8
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	ab01      	add	r3, sp, #4
 80099b6:	466a      	mov	r2, sp
 80099b8:	f7ff ffc9 	bl	800994e <__swhatbuf_r>
 80099bc:	9900      	ldr	r1, [sp, #0]
 80099be:	4605      	mov	r5, r0
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 fc1d 	bl	800a200 <_malloc_r>
 80099c6:	b948      	cbnz	r0, 80099dc <__smakebuf_r+0x44>
 80099c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099cc:	059a      	lsls	r2, r3, #22
 80099ce:	d4ef      	bmi.n	80099b0 <__smakebuf_r+0x18>
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	f043 0302 	orr.w	r3, r3, #2
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	e7e3      	b.n	80099a4 <__smakebuf_r+0xc>
 80099dc:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <__smakebuf_r+0x7c>)
 80099de:	62b3      	str	r3, [r6, #40]	; 0x28
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	6020      	str	r0, [r4, #0]
 80099e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	6163      	str	r3, [r4, #20]
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	6120      	str	r0, [r4, #16]
 80099f2:	b15b      	cbz	r3, 8009a0c <__smakebuf_r+0x74>
 80099f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 fe6d 	bl	800a6d8 <_isatty_r>
 80099fe:	b128      	cbz	r0, 8009a0c <__smakebuf_r+0x74>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	f043 0301 	orr.w	r3, r3, #1
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	89a0      	ldrh	r0, [r4, #12]
 8009a0e:	4305      	orrs	r5, r0
 8009a10:	81a5      	strh	r5, [r4, #12]
 8009a12:	e7cd      	b.n	80099b0 <__smakebuf_r+0x18>
 8009a14:	0800979d 	.word	0x0800979d

08009a18 <malloc>:
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <malloc+0xc>)
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	f000 bbef 	b.w	800a200 <_malloc_r>
 8009a22:	bf00      	nop
 8009a24:	200000d4 	.word	0x200000d4

08009a28 <memcpy>:
 8009a28:	440a      	add	r2, r1
 8009a2a:	4291      	cmp	r1, r2
 8009a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a30:	d100      	bne.n	8009a34 <memcpy+0xc>
 8009a32:	4770      	bx	lr
 8009a34:	b510      	push	{r4, lr}
 8009a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a3e:	4291      	cmp	r1, r2
 8009a40:	d1f9      	bne.n	8009a36 <memcpy+0xe>
 8009a42:	bd10      	pop	{r4, pc}

08009a44 <_Balloc>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a48:	4604      	mov	r4, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	b976      	cbnz	r6, 8009a6c <_Balloc+0x28>
 8009a4e:	2010      	movs	r0, #16
 8009a50:	f7ff ffe2 	bl	8009a18 <malloc>
 8009a54:	4602      	mov	r2, r0
 8009a56:	6260      	str	r0, [r4, #36]	; 0x24
 8009a58:	b920      	cbnz	r0, 8009a64 <_Balloc+0x20>
 8009a5a:	4b18      	ldr	r3, [pc, #96]	; (8009abc <_Balloc+0x78>)
 8009a5c:	4818      	ldr	r0, [pc, #96]	; (8009ac0 <_Balloc+0x7c>)
 8009a5e:	2166      	movs	r1, #102	; 0x66
 8009a60:	f000 fde8 	bl	800a634 <__assert_func>
 8009a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a68:	6006      	str	r6, [r0, #0]
 8009a6a:	60c6      	str	r6, [r0, #12]
 8009a6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a6e:	68f3      	ldr	r3, [r6, #12]
 8009a70:	b183      	cbz	r3, 8009a94 <_Balloc+0x50>
 8009a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a7a:	b9b8      	cbnz	r0, 8009aac <_Balloc+0x68>
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a82:	1d72      	adds	r2, r6, #5
 8009a84:	0092      	lsls	r2, r2, #2
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 fb5a 	bl	800a140 <_calloc_r>
 8009a8c:	b160      	cbz	r0, 8009aa8 <_Balloc+0x64>
 8009a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a92:	e00e      	b.n	8009ab2 <_Balloc+0x6e>
 8009a94:	2221      	movs	r2, #33	; 0x21
 8009a96:	2104      	movs	r1, #4
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fb51 	bl	800a140 <_calloc_r>
 8009a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa0:	60f0      	str	r0, [r6, #12]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e4      	bne.n	8009a72 <_Balloc+0x2e>
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	6802      	ldr	r2, [r0, #0]
 8009aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ab8:	e7f7      	b.n	8009aaa <_Balloc+0x66>
 8009aba:	bf00      	nop
 8009abc:	0800d1be 	.word	0x0800d1be
 8009ac0:	0800d2a8 	.word	0x0800d2a8

08009ac4 <_Bfree>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ac8:	4605      	mov	r5, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	b976      	cbnz	r6, 8009aec <_Bfree+0x28>
 8009ace:	2010      	movs	r0, #16
 8009ad0:	f7ff ffa2 	bl	8009a18 <malloc>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ad8:	b920      	cbnz	r0, 8009ae4 <_Bfree+0x20>
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <_Bfree+0x3c>)
 8009adc:	4809      	ldr	r0, [pc, #36]	; (8009b04 <_Bfree+0x40>)
 8009ade:	218a      	movs	r1, #138	; 0x8a
 8009ae0:	f000 fda8 	bl	800a634 <__assert_func>
 8009ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ae8:	6006      	str	r6, [r0, #0]
 8009aea:	60c6      	str	r6, [r0, #12]
 8009aec:	b13c      	cbz	r4, 8009afe <_Bfree+0x3a>
 8009aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009af0:	6862      	ldr	r2, [r4, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009af8:	6021      	str	r1, [r4, #0]
 8009afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	0800d1be 	.word	0x0800d1be
 8009b04:	0800d2a8 	.word	0x0800d2a8

08009b08 <__multadd>:
 8009b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	690e      	ldr	r6, [r1, #16]
 8009b0e:	4607      	mov	r7, r0
 8009b10:	4698      	mov	r8, r3
 8009b12:	460c      	mov	r4, r1
 8009b14:	f101 0014 	add.w	r0, r1, #20
 8009b18:	2300      	movs	r3, #0
 8009b1a:	6805      	ldr	r5, [r0, #0]
 8009b1c:	b2a9      	uxth	r1, r5
 8009b1e:	fb02 8101 	mla	r1, r2, r1, r8
 8009b22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009b26:	0c2d      	lsrs	r5, r5, #16
 8009b28:	fb02 c505 	mla	r5, r2, r5, ip
 8009b2c:	b289      	uxth	r1, r1
 8009b2e:	3301      	adds	r3, #1
 8009b30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009b34:	429e      	cmp	r6, r3
 8009b36:	f840 1b04 	str.w	r1, [r0], #4
 8009b3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009b3e:	dcec      	bgt.n	8009b1a <__multadd+0x12>
 8009b40:	f1b8 0f00 	cmp.w	r8, #0
 8009b44:	d022      	beq.n	8009b8c <__multadd+0x84>
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	dc19      	bgt.n	8009b80 <__multadd+0x78>
 8009b4c:	6861      	ldr	r1, [r4, #4]
 8009b4e:	4638      	mov	r0, r7
 8009b50:	3101      	adds	r1, #1
 8009b52:	f7ff ff77 	bl	8009a44 <_Balloc>
 8009b56:	4605      	mov	r5, r0
 8009b58:	b928      	cbnz	r0, 8009b66 <__multadd+0x5e>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <__multadd+0x8c>)
 8009b5e:	480e      	ldr	r0, [pc, #56]	; (8009b98 <__multadd+0x90>)
 8009b60:	21b5      	movs	r1, #181	; 0xb5
 8009b62:	f000 fd67 	bl	800a634 <__assert_func>
 8009b66:	6922      	ldr	r2, [r4, #16]
 8009b68:	3202      	adds	r2, #2
 8009b6a:	f104 010c 	add.w	r1, r4, #12
 8009b6e:	0092      	lsls	r2, r2, #2
 8009b70:	300c      	adds	r0, #12
 8009b72:	f7ff ff59 	bl	8009a28 <memcpy>
 8009b76:	4621      	mov	r1, r4
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f7ff ffa3 	bl	8009ac4 <_Bfree>
 8009b7e:	462c      	mov	r4, r5
 8009b80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009b84:	3601      	adds	r6, #1
 8009b86:	f8c3 8014 	str.w	r8, [r3, #20]
 8009b8a:	6126      	str	r6, [r4, #16]
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b92:	bf00      	nop
 8009b94:	0800d234 	.word	0x0800d234
 8009b98:	0800d2a8 	.word	0x0800d2a8

08009b9c <__hi0bits>:
 8009b9c:	0c03      	lsrs	r3, r0, #16
 8009b9e:	041b      	lsls	r3, r3, #16
 8009ba0:	b9d3      	cbnz	r3, 8009bd8 <__hi0bits+0x3c>
 8009ba2:	0400      	lsls	r0, r0, #16
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009baa:	bf04      	itt	eq
 8009bac:	0200      	lsleq	r0, r0, #8
 8009bae:	3308      	addeq	r3, #8
 8009bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bb4:	bf04      	itt	eq
 8009bb6:	0100      	lsleq	r0, r0, #4
 8009bb8:	3304      	addeq	r3, #4
 8009bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009bbe:	bf04      	itt	eq
 8009bc0:	0080      	lsleq	r0, r0, #2
 8009bc2:	3302      	addeq	r3, #2
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	db05      	blt.n	8009bd4 <__hi0bits+0x38>
 8009bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bcc:	f103 0301 	add.w	r3, r3, #1
 8009bd0:	bf08      	it	eq
 8009bd2:	2320      	moveq	r3, #32
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	4770      	bx	lr
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e7e4      	b.n	8009ba6 <__hi0bits+0xa>

08009bdc <__lo0bits>:
 8009bdc:	6803      	ldr	r3, [r0, #0]
 8009bde:	f013 0207 	ands.w	r2, r3, #7
 8009be2:	4601      	mov	r1, r0
 8009be4:	d00b      	beq.n	8009bfe <__lo0bits+0x22>
 8009be6:	07da      	lsls	r2, r3, #31
 8009be8:	d424      	bmi.n	8009c34 <__lo0bits+0x58>
 8009bea:	0798      	lsls	r0, r3, #30
 8009bec:	bf49      	itett	mi
 8009bee:	085b      	lsrmi	r3, r3, #1
 8009bf0:	089b      	lsrpl	r3, r3, #2
 8009bf2:	2001      	movmi	r0, #1
 8009bf4:	600b      	strmi	r3, [r1, #0]
 8009bf6:	bf5c      	itt	pl
 8009bf8:	600b      	strpl	r3, [r1, #0]
 8009bfa:	2002      	movpl	r0, #2
 8009bfc:	4770      	bx	lr
 8009bfe:	b298      	uxth	r0, r3
 8009c00:	b9b0      	cbnz	r0, 8009c30 <__lo0bits+0x54>
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	2010      	movs	r0, #16
 8009c06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c0a:	bf04      	itt	eq
 8009c0c:	0a1b      	lsreq	r3, r3, #8
 8009c0e:	3008      	addeq	r0, #8
 8009c10:	071a      	lsls	r2, r3, #28
 8009c12:	bf04      	itt	eq
 8009c14:	091b      	lsreq	r3, r3, #4
 8009c16:	3004      	addeq	r0, #4
 8009c18:	079a      	lsls	r2, r3, #30
 8009c1a:	bf04      	itt	eq
 8009c1c:	089b      	lsreq	r3, r3, #2
 8009c1e:	3002      	addeq	r0, #2
 8009c20:	07da      	lsls	r2, r3, #31
 8009c22:	d403      	bmi.n	8009c2c <__lo0bits+0x50>
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	f100 0001 	add.w	r0, r0, #1
 8009c2a:	d005      	beq.n	8009c38 <__lo0bits+0x5c>
 8009c2c:	600b      	str	r3, [r1, #0]
 8009c2e:	4770      	bx	lr
 8009c30:	4610      	mov	r0, r2
 8009c32:	e7e8      	b.n	8009c06 <__lo0bits+0x2a>
 8009c34:	2000      	movs	r0, #0
 8009c36:	4770      	bx	lr
 8009c38:	2020      	movs	r0, #32
 8009c3a:	4770      	bx	lr

08009c3c <__i2b>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	460c      	mov	r4, r1
 8009c40:	2101      	movs	r1, #1
 8009c42:	f7ff feff 	bl	8009a44 <_Balloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	b928      	cbnz	r0, 8009c56 <__i2b+0x1a>
 8009c4a:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <__i2b+0x24>)
 8009c4c:	4805      	ldr	r0, [pc, #20]	; (8009c64 <__i2b+0x28>)
 8009c4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c52:	f000 fcef 	bl	800a634 <__assert_func>
 8009c56:	2301      	movs	r3, #1
 8009c58:	6144      	str	r4, [r0, #20]
 8009c5a:	6103      	str	r3, [r0, #16]
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800d234 	.word	0x0800d234
 8009c64:	0800d2a8 	.word	0x0800d2a8

08009c68 <__multiply>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	690a      	ldr	r2, [r1, #16]
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	bfb8      	it	lt
 8009c76:	460b      	movlt	r3, r1
 8009c78:	460d      	mov	r5, r1
 8009c7a:	bfbc      	itt	lt
 8009c7c:	4625      	movlt	r5, r4
 8009c7e:	461c      	movlt	r4, r3
 8009c80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009c84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c88:	68ab      	ldr	r3, [r5, #8]
 8009c8a:	6869      	ldr	r1, [r5, #4]
 8009c8c:	eb0a 0709 	add.w	r7, sl, r9
 8009c90:	42bb      	cmp	r3, r7
 8009c92:	b085      	sub	sp, #20
 8009c94:	bfb8      	it	lt
 8009c96:	3101      	addlt	r1, #1
 8009c98:	f7ff fed4 	bl	8009a44 <_Balloc>
 8009c9c:	b930      	cbnz	r0, 8009cac <__multiply+0x44>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4b42      	ldr	r3, [pc, #264]	; (8009dac <__multiply+0x144>)
 8009ca2:	4843      	ldr	r0, [pc, #268]	; (8009db0 <__multiply+0x148>)
 8009ca4:	f240 115d 	movw	r1, #349	; 0x15d
 8009ca8:	f000 fcc4 	bl	800a634 <__assert_func>
 8009cac:	f100 0614 	add.w	r6, r0, #20
 8009cb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009cb4:	4633      	mov	r3, r6
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4543      	cmp	r3, r8
 8009cba:	d31e      	bcc.n	8009cfa <__multiply+0x92>
 8009cbc:	f105 0c14 	add.w	ip, r5, #20
 8009cc0:	f104 0314 	add.w	r3, r4, #20
 8009cc4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009cc8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009ccc:	9202      	str	r2, [sp, #8]
 8009cce:	ebac 0205 	sub.w	r2, ip, r5
 8009cd2:	3a15      	subs	r2, #21
 8009cd4:	f022 0203 	bic.w	r2, r2, #3
 8009cd8:	3204      	adds	r2, #4
 8009cda:	f105 0115 	add.w	r1, r5, #21
 8009cde:	458c      	cmp	ip, r1
 8009ce0:	bf38      	it	cc
 8009ce2:	2204      	movcc	r2, #4
 8009ce4:	9201      	str	r2, [sp, #4]
 8009ce6:	9a02      	ldr	r2, [sp, #8]
 8009ce8:	9303      	str	r3, [sp, #12]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d808      	bhi.n	8009d00 <__multiply+0x98>
 8009cee:	2f00      	cmp	r7, #0
 8009cf0:	dc55      	bgt.n	8009d9e <__multiply+0x136>
 8009cf2:	6107      	str	r7, [r0, #16]
 8009cf4:	b005      	add	sp, #20
 8009cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfa:	f843 2b04 	str.w	r2, [r3], #4
 8009cfe:	e7db      	b.n	8009cb8 <__multiply+0x50>
 8009d00:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d04:	f1ba 0f00 	cmp.w	sl, #0
 8009d08:	d020      	beq.n	8009d4c <__multiply+0xe4>
 8009d0a:	f105 0e14 	add.w	lr, r5, #20
 8009d0e:	46b1      	mov	r9, r6
 8009d10:	2200      	movs	r2, #0
 8009d12:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009d16:	f8d9 b000 	ldr.w	fp, [r9]
 8009d1a:	b2a1      	uxth	r1, r4
 8009d1c:	fa1f fb8b 	uxth.w	fp, fp
 8009d20:	fb0a b101 	mla	r1, sl, r1, fp
 8009d24:	4411      	add	r1, r2
 8009d26:	f8d9 2000 	ldr.w	r2, [r9]
 8009d2a:	0c24      	lsrs	r4, r4, #16
 8009d2c:	0c12      	lsrs	r2, r2, #16
 8009d2e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009d32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009d36:	b289      	uxth	r1, r1
 8009d38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009d3c:	45f4      	cmp	ip, lr
 8009d3e:	f849 1b04 	str.w	r1, [r9], #4
 8009d42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009d46:	d8e4      	bhi.n	8009d12 <__multiply+0xaa>
 8009d48:	9901      	ldr	r1, [sp, #4]
 8009d4a:	5072      	str	r2, [r6, r1]
 8009d4c:	9a03      	ldr	r2, [sp, #12]
 8009d4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d52:	3304      	adds	r3, #4
 8009d54:	f1b9 0f00 	cmp.w	r9, #0
 8009d58:	d01f      	beq.n	8009d9a <__multiply+0x132>
 8009d5a:	6834      	ldr	r4, [r6, #0]
 8009d5c:	f105 0114 	add.w	r1, r5, #20
 8009d60:	46b6      	mov	lr, r6
 8009d62:	f04f 0a00 	mov.w	sl, #0
 8009d66:	880a      	ldrh	r2, [r1, #0]
 8009d68:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009d6c:	fb09 b202 	mla	r2, r9, r2, fp
 8009d70:	4492      	add	sl, r2
 8009d72:	b2a4      	uxth	r4, r4
 8009d74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009d78:	f84e 4b04 	str.w	r4, [lr], #4
 8009d7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009d80:	f8be 2000 	ldrh.w	r2, [lr]
 8009d84:	0c24      	lsrs	r4, r4, #16
 8009d86:	fb09 2404 	mla	r4, r9, r4, r2
 8009d8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009d8e:	458c      	cmp	ip, r1
 8009d90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d94:	d8e7      	bhi.n	8009d66 <__multiply+0xfe>
 8009d96:	9a01      	ldr	r2, [sp, #4]
 8009d98:	50b4      	str	r4, [r6, r2]
 8009d9a:	3604      	adds	r6, #4
 8009d9c:	e7a3      	b.n	8009ce6 <__multiply+0x7e>
 8009d9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1a5      	bne.n	8009cf2 <__multiply+0x8a>
 8009da6:	3f01      	subs	r7, #1
 8009da8:	e7a1      	b.n	8009cee <__multiply+0x86>
 8009daa:	bf00      	nop
 8009dac:	0800d234 	.word	0x0800d234
 8009db0:	0800d2a8 	.word	0x0800d2a8

08009db4 <__pow5mult>:
 8009db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db8:	4615      	mov	r5, r2
 8009dba:	f012 0203 	ands.w	r2, r2, #3
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460f      	mov	r7, r1
 8009dc2:	d007      	beq.n	8009dd4 <__pow5mult+0x20>
 8009dc4:	4c25      	ldr	r4, [pc, #148]	; (8009e5c <__pow5mult+0xa8>)
 8009dc6:	3a01      	subs	r2, #1
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dce:	f7ff fe9b 	bl	8009b08 <__multadd>
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	10ad      	asrs	r5, r5, #2
 8009dd6:	d03d      	beq.n	8009e54 <__pow5mult+0xa0>
 8009dd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dda:	b97c      	cbnz	r4, 8009dfc <__pow5mult+0x48>
 8009ddc:	2010      	movs	r0, #16
 8009dde:	f7ff fe1b 	bl	8009a18 <malloc>
 8009de2:	4602      	mov	r2, r0
 8009de4:	6270      	str	r0, [r6, #36]	; 0x24
 8009de6:	b928      	cbnz	r0, 8009df4 <__pow5mult+0x40>
 8009de8:	4b1d      	ldr	r3, [pc, #116]	; (8009e60 <__pow5mult+0xac>)
 8009dea:	481e      	ldr	r0, [pc, #120]	; (8009e64 <__pow5mult+0xb0>)
 8009dec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009df0:	f000 fc20 	bl	800a634 <__assert_func>
 8009df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009df8:	6004      	str	r4, [r0, #0]
 8009dfa:	60c4      	str	r4, [r0, #12]
 8009dfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e04:	b94c      	cbnz	r4, 8009e1a <__pow5mult+0x66>
 8009e06:	f240 2171 	movw	r1, #625	; 0x271
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff ff16 	bl	8009c3c <__i2b>
 8009e10:	2300      	movs	r3, #0
 8009e12:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e16:	4604      	mov	r4, r0
 8009e18:	6003      	str	r3, [r0, #0]
 8009e1a:	f04f 0900 	mov.w	r9, #0
 8009e1e:	07eb      	lsls	r3, r5, #31
 8009e20:	d50a      	bpl.n	8009e38 <__pow5mult+0x84>
 8009e22:	4639      	mov	r1, r7
 8009e24:	4622      	mov	r2, r4
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ff1e 	bl	8009c68 <__multiply>
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	4680      	mov	r8, r0
 8009e30:	4630      	mov	r0, r6
 8009e32:	f7ff fe47 	bl	8009ac4 <_Bfree>
 8009e36:	4647      	mov	r7, r8
 8009e38:	106d      	asrs	r5, r5, #1
 8009e3a:	d00b      	beq.n	8009e54 <__pow5mult+0xa0>
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	b938      	cbnz	r0, 8009e50 <__pow5mult+0x9c>
 8009e40:	4622      	mov	r2, r4
 8009e42:	4621      	mov	r1, r4
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff ff0f 	bl	8009c68 <__multiply>
 8009e4a:	6020      	str	r0, [r4, #0]
 8009e4c:	f8c0 9000 	str.w	r9, [r0]
 8009e50:	4604      	mov	r4, r0
 8009e52:	e7e4      	b.n	8009e1e <__pow5mult+0x6a>
 8009e54:	4638      	mov	r0, r7
 8009e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5a:	bf00      	nop
 8009e5c:	0800d3f8 	.word	0x0800d3f8
 8009e60:	0800d1be 	.word	0x0800d1be
 8009e64:	0800d2a8 	.word	0x0800d2a8

08009e68 <__lshift>:
 8009e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	6849      	ldr	r1, [r1, #4]
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	4607      	mov	r7, r0
 8009e7a:	4691      	mov	r9, r2
 8009e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e80:	f108 0601 	add.w	r6, r8, #1
 8009e84:	42b3      	cmp	r3, r6
 8009e86:	db0b      	blt.n	8009ea0 <__lshift+0x38>
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff fddb 	bl	8009a44 <_Balloc>
 8009e8e:	4605      	mov	r5, r0
 8009e90:	b948      	cbnz	r0, 8009ea6 <__lshift+0x3e>
 8009e92:	4602      	mov	r2, r0
 8009e94:	4b28      	ldr	r3, [pc, #160]	; (8009f38 <__lshift+0xd0>)
 8009e96:	4829      	ldr	r0, [pc, #164]	; (8009f3c <__lshift+0xd4>)
 8009e98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e9c:	f000 fbca 	bl	800a634 <__assert_func>
 8009ea0:	3101      	adds	r1, #1
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	e7ee      	b.n	8009e84 <__lshift+0x1c>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f100 0114 	add.w	r1, r0, #20
 8009eac:	f100 0210 	add.w	r2, r0, #16
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	4553      	cmp	r3, sl
 8009eb4:	db33      	blt.n	8009f1e <__lshift+0xb6>
 8009eb6:	6920      	ldr	r0, [r4, #16]
 8009eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ebc:	f104 0314 	add.w	r3, r4, #20
 8009ec0:	f019 091f 	ands.w	r9, r9, #31
 8009ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ecc:	d02b      	beq.n	8009f26 <__lshift+0xbe>
 8009ece:	f1c9 0e20 	rsb	lr, r9, #32
 8009ed2:	468a      	mov	sl, r1
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	fa00 f009 	lsl.w	r0, r0, r9
 8009edc:	4302      	orrs	r2, r0
 8009ede:	f84a 2b04 	str.w	r2, [sl], #4
 8009ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee6:	459c      	cmp	ip, r3
 8009ee8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009eec:	d8f3      	bhi.n	8009ed6 <__lshift+0x6e>
 8009eee:	ebac 0304 	sub.w	r3, ip, r4
 8009ef2:	3b15      	subs	r3, #21
 8009ef4:	f023 0303 	bic.w	r3, r3, #3
 8009ef8:	3304      	adds	r3, #4
 8009efa:	f104 0015 	add.w	r0, r4, #21
 8009efe:	4584      	cmp	ip, r0
 8009f00:	bf38      	it	cc
 8009f02:	2304      	movcc	r3, #4
 8009f04:	50ca      	str	r2, [r1, r3]
 8009f06:	b10a      	cbz	r2, 8009f0c <__lshift+0xa4>
 8009f08:	f108 0602 	add.w	r6, r8, #2
 8009f0c:	3e01      	subs	r6, #1
 8009f0e:	4638      	mov	r0, r7
 8009f10:	612e      	str	r6, [r5, #16]
 8009f12:	4621      	mov	r1, r4
 8009f14:	f7ff fdd6 	bl	8009ac4 <_Bfree>
 8009f18:	4628      	mov	r0, r5
 8009f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f22:	3301      	adds	r3, #1
 8009f24:	e7c5      	b.n	8009eb2 <__lshift+0x4a>
 8009f26:	3904      	subs	r1, #4
 8009f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f30:	459c      	cmp	ip, r3
 8009f32:	d8f9      	bhi.n	8009f28 <__lshift+0xc0>
 8009f34:	e7ea      	b.n	8009f0c <__lshift+0xa4>
 8009f36:	bf00      	nop
 8009f38:	0800d234 	.word	0x0800d234
 8009f3c:	0800d2a8 	.word	0x0800d2a8

08009f40 <__mcmp>:
 8009f40:	b530      	push	{r4, r5, lr}
 8009f42:	6902      	ldr	r2, [r0, #16]
 8009f44:	690c      	ldr	r4, [r1, #16]
 8009f46:	1b12      	subs	r2, r2, r4
 8009f48:	d10e      	bne.n	8009f68 <__mcmp+0x28>
 8009f4a:	f100 0314 	add.w	r3, r0, #20
 8009f4e:	3114      	adds	r1, #20
 8009f50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f60:	42a5      	cmp	r5, r4
 8009f62:	d003      	beq.n	8009f6c <__mcmp+0x2c>
 8009f64:	d305      	bcc.n	8009f72 <__mcmp+0x32>
 8009f66:	2201      	movs	r2, #1
 8009f68:	4610      	mov	r0, r2
 8009f6a:	bd30      	pop	{r4, r5, pc}
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	d3f3      	bcc.n	8009f58 <__mcmp+0x18>
 8009f70:	e7fa      	b.n	8009f68 <__mcmp+0x28>
 8009f72:	f04f 32ff 	mov.w	r2, #4294967295
 8009f76:	e7f7      	b.n	8009f68 <__mcmp+0x28>

08009f78 <__mdiff>:
 8009f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	4606      	mov	r6, r0
 8009f80:	4611      	mov	r1, r2
 8009f82:	4620      	mov	r0, r4
 8009f84:	4617      	mov	r7, r2
 8009f86:	f7ff ffdb 	bl	8009f40 <__mcmp>
 8009f8a:	1e05      	subs	r5, r0, #0
 8009f8c:	d110      	bne.n	8009fb0 <__mdiff+0x38>
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7ff fd57 	bl	8009a44 <_Balloc>
 8009f96:	b930      	cbnz	r0, 8009fa6 <__mdiff+0x2e>
 8009f98:	4b39      	ldr	r3, [pc, #228]	; (800a080 <__mdiff+0x108>)
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	f240 2132 	movw	r1, #562	; 0x232
 8009fa0:	4838      	ldr	r0, [pc, #224]	; (800a084 <__mdiff+0x10c>)
 8009fa2:	f000 fb47 	bl	800a634 <__assert_func>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	bfa4      	itt	ge
 8009fb2:	463b      	movge	r3, r7
 8009fb4:	4627      	movge	r7, r4
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	bfa6      	itte	ge
 8009fbc:	461c      	movge	r4, r3
 8009fbe:	2500      	movge	r5, #0
 8009fc0:	2501      	movlt	r5, #1
 8009fc2:	f7ff fd3f 	bl	8009a44 <_Balloc>
 8009fc6:	b920      	cbnz	r0, 8009fd2 <__mdiff+0x5a>
 8009fc8:	4b2d      	ldr	r3, [pc, #180]	; (800a080 <__mdiff+0x108>)
 8009fca:	4602      	mov	r2, r0
 8009fcc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009fd0:	e7e6      	b.n	8009fa0 <__mdiff+0x28>
 8009fd2:	693e      	ldr	r6, [r7, #16]
 8009fd4:	60c5      	str	r5, [r0, #12]
 8009fd6:	6925      	ldr	r5, [r4, #16]
 8009fd8:	f107 0114 	add.w	r1, r7, #20
 8009fdc:	f104 0914 	add.w	r9, r4, #20
 8009fe0:	f100 0e14 	add.w	lr, r0, #20
 8009fe4:	f107 0210 	add.w	r2, r7, #16
 8009fe8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009fec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ff0:	46f2      	mov	sl, lr
 8009ff2:	2700      	movs	r7, #0
 8009ff4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ffc:	fa1f f883 	uxth.w	r8, r3
 800a000:	fa17 f78b 	uxtah	r7, r7, fp
 800a004:	0c1b      	lsrs	r3, r3, #16
 800a006:	eba7 0808 	sub.w	r8, r7, r8
 800a00a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a00e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a012:	fa1f f888 	uxth.w	r8, r8
 800a016:	141f      	asrs	r7, r3, #16
 800a018:	454d      	cmp	r5, r9
 800a01a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a01e:	f84a 3b04 	str.w	r3, [sl], #4
 800a022:	d8e7      	bhi.n	8009ff4 <__mdiff+0x7c>
 800a024:	1b2b      	subs	r3, r5, r4
 800a026:	3b15      	subs	r3, #21
 800a028:	f023 0303 	bic.w	r3, r3, #3
 800a02c:	3304      	adds	r3, #4
 800a02e:	3415      	adds	r4, #21
 800a030:	42a5      	cmp	r5, r4
 800a032:	bf38      	it	cc
 800a034:	2304      	movcc	r3, #4
 800a036:	4419      	add	r1, r3
 800a038:	4473      	add	r3, lr
 800a03a:	469e      	mov	lr, r3
 800a03c:	460d      	mov	r5, r1
 800a03e:	4565      	cmp	r5, ip
 800a040:	d30e      	bcc.n	800a060 <__mdiff+0xe8>
 800a042:	f10c 0203 	add.w	r2, ip, #3
 800a046:	1a52      	subs	r2, r2, r1
 800a048:	f022 0203 	bic.w	r2, r2, #3
 800a04c:	3903      	subs	r1, #3
 800a04e:	458c      	cmp	ip, r1
 800a050:	bf38      	it	cc
 800a052:	2200      	movcc	r2, #0
 800a054:	441a      	add	r2, r3
 800a056:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a05a:	b17b      	cbz	r3, 800a07c <__mdiff+0x104>
 800a05c:	6106      	str	r6, [r0, #16]
 800a05e:	e7a5      	b.n	8009fac <__mdiff+0x34>
 800a060:	f855 8b04 	ldr.w	r8, [r5], #4
 800a064:	fa17 f488 	uxtah	r4, r7, r8
 800a068:	1422      	asrs	r2, r4, #16
 800a06a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a06e:	b2a4      	uxth	r4, r4
 800a070:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a074:	f84e 4b04 	str.w	r4, [lr], #4
 800a078:	1417      	asrs	r7, r2, #16
 800a07a:	e7e0      	b.n	800a03e <__mdiff+0xc6>
 800a07c:	3e01      	subs	r6, #1
 800a07e:	e7ea      	b.n	800a056 <__mdiff+0xde>
 800a080:	0800d234 	.word	0x0800d234
 800a084:	0800d2a8 	.word	0x0800d2a8

0800a088 <__d2b>:
 800a088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a08c:	4689      	mov	r9, r1
 800a08e:	2101      	movs	r1, #1
 800a090:	ec57 6b10 	vmov	r6, r7, d0
 800a094:	4690      	mov	r8, r2
 800a096:	f7ff fcd5 	bl	8009a44 <_Balloc>
 800a09a:	4604      	mov	r4, r0
 800a09c:	b930      	cbnz	r0, 800a0ac <__d2b+0x24>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	4b25      	ldr	r3, [pc, #148]	; (800a138 <__d2b+0xb0>)
 800a0a2:	4826      	ldr	r0, [pc, #152]	; (800a13c <__d2b+0xb4>)
 800a0a4:	f240 310a 	movw	r1, #778	; 0x30a
 800a0a8:	f000 fac4 	bl	800a634 <__assert_func>
 800a0ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0b4:	bb35      	cbnz	r5, 800a104 <__d2b+0x7c>
 800a0b6:	2e00      	cmp	r6, #0
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	d028      	beq.n	800a10e <__d2b+0x86>
 800a0bc:	4668      	mov	r0, sp
 800a0be:	9600      	str	r6, [sp, #0]
 800a0c0:	f7ff fd8c 	bl	8009bdc <__lo0bits>
 800a0c4:	9900      	ldr	r1, [sp, #0]
 800a0c6:	b300      	cbz	r0, 800a10a <__d2b+0x82>
 800a0c8:	9a01      	ldr	r2, [sp, #4]
 800a0ca:	f1c0 0320 	rsb	r3, r0, #32
 800a0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	40c2      	lsrs	r2, r0
 800a0d6:	6163      	str	r3, [r4, #20]
 800a0d8:	9201      	str	r2, [sp, #4]
 800a0da:	9b01      	ldr	r3, [sp, #4]
 800a0dc:	61a3      	str	r3, [r4, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	bf14      	ite	ne
 800a0e2:	2202      	movne	r2, #2
 800a0e4:	2201      	moveq	r2, #1
 800a0e6:	6122      	str	r2, [r4, #16]
 800a0e8:	b1d5      	cbz	r5, 800a120 <__d2b+0x98>
 800a0ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0ee:	4405      	add	r5, r0
 800a0f0:	f8c9 5000 	str.w	r5, [r9]
 800a0f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0f8:	f8c8 0000 	str.w	r0, [r8]
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	b003      	add	sp, #12
 800a100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a108:	e7d5      	b.n	800a0b6 <__d2b+0x2e>
 800a10a:	6161      	str	r1, [r4, #20]
 800a10c:	e7e5      	b.n	800a0da <__d2b+0x52>
 800a10e:	a801      	add	r0, sp, #4
 800a110:	f7ff fd64 	bl	8009bdc <__lo0bits>
 800a114:	9b01      	ldr	r3, [sp, #4]
 800a116:	6163      	str	r3, [r4, #20]
 800a118:	2201      	movs	r2, #1
 800a11a:	6122      	str	r2, [r4, #16]
 800a11c:	3020      	adds	r0, #32
 800a11e:	e7e3      	b.n	800a0e8 <__d2b+0x60>
 800a120:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a124:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a128:	f8c9 0000 	str.w	r0, [r9]
 800a12c:	6918      	ldr	r0, [r3, #16]
 800a12e:	f7ff fd35 	bl	8009b9c <__hi0bits>
 800a132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a136:	e7df      	b.n	800a0f8 <__d2b+0x70>
 800a138:	0800d234 	.word	0x0800d234
 800a13c:	0800d2a8 	.word	0x0800d2a8

0800a140 <_calloc_r>:
 800a140:	b513      	push	{r0, r1, r4, lr}
 800a142:	434a      	muls	r2, r1
 800a144:	4611      	mov	r1, r2
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	f000 f85a 	bl	800a200 <_malloc_r>
 800a14c:	4604      	mov	r4, r0
 800a14e:	b118      	cbz	r0, 800a158 <_calloc_r+0x18>
 800a150:	9a01      	ldr	r2, [sp, #4]
 800a152:	2100      	movs	r1, #0
 800a154:	f7fd fd2e 	bl	8007bb4 <memset>
 800a158:	4620      	mov	r0, r4
 800a15a:	b002      	add	sp, #8
 800a15c:	bd10      	pop	{r4, pc}
	...

0800a160 <_free_r>:
 800a160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a162:	2900      	cmp	r1, #0
 800a164:	d048      	beq.n	800a1f8 <_free_r+0x98>
 800a166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16a:	9001      	str	r0, [sp, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f1a1 0404 	sub.w	r4, r1, #4
 800a172:	bfb8      	it	lt
 800a174:	18e4      	addlt	r4, r4, r3
 800a176:	f000 fae3 	bl	800a740 <__malloc_lock>
 800a17a:	4a20      	ldr	r2, [pc, #128]	; (800a1fc <_free_r+0x9c>)
 800a17c:	9801      	ldr	r0, [sp, #4]
 800a17e:	6813      	ldr	r3, [r2, #0]
 800a180:	4615      	mov	r5, r2
 800a182:	b933      	cbnz	r3, 800a192 <_free_r+0x32>
 800a184:	6063      	str	r3, [r4, #4]
 800a186:	6014      	str	r4, [r2, #0]
 800a188:	b003      	add	sp, #12
 800a18a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a18e:	f000 badd 	b.w	800a74c <__malloc_unlock>
 800a192:	42a3      	cmp	r3, r4
 800a194:	d90b      	bls.n	800a1ae <_free_r+0x4e>
 800a196:	6821      	ldr	r1, [r4, #0]
 800a198:	1862      	adds	r2, r4, r1
 800a19a:	4293      	cmp	r3, r2
 800a19c:	bf04      	itt	eq
 800a19e:	681a      	ldreq	r2, [r3, #0]
 800a1a0:	685b      	ldreq	r3, [r3, #4]
 800a1a2:	6063      	str	r3, [r4, #4]
 800a1a4:	bf04      	itt	eq
 800a1a6:	1852      	addeq	r2, r2, r1
 800a1a8:	6022      	streq	r2, [r4, #0]
 800a1aa:	602c      	str	r4, [r5, #0]
 800a1ac:	e7ec      	b.n	800a188 <_free_r+0x28>
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	b10b      	cbz	r3, 800a1b8 <_free_r+0x58>
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	d9fa      	bls.n	800a1ae <_free_r+0x4e>
 800a1b8:	6811      	ldr	r1, [r2, #0]
 800a1ba:	1855      	adds	r5, r2, r1
 800a1bc:	42a5      	cmp	r5, r4
 800a1be:	d10b      	bne.n	800a1d8 <_free_r+0x78>
 800a1c0:	6824      	ldr	r4, [r4, #0]
 800a1c2:	4421      	add	r1, r4
 800a1c4:	1854      	adds	r4, r2, r1
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	6011      	str	r1, [r2, #0]
 800a1ca:	d1dd      	bne.n	800a188 <_free_r+0x28>
 800a1cc:	681c      	ldr	r4, [r3, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	6053      	str	r3, [r2, #4]
 800a1d2:	4421      	add	r1, r4
 800a1d4:	6011      	str	r1, [r2, #0]
 800a1d6:	e7d7      	b.n	800a188 <_free_r+0x28>
 800a1d8:	d902      	bls.n	800a1e0 <_free_r+0x80>
 800a1da:	230c      	movs	r3, #12
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	e7d3      	b.n	800a188 <_free_r+0x28>
 800a1e0:	6825      	ldr	r5, [r4, #0]
 800a1e2:	1961      	adds	r1, r4, r5
 800a1e4:	428b      	cmp	r3, r1
 800a1e6:	bf04      	itt	eq
 800a1e8:	6819      	ldreq	r1, [r3, #0]
 800a1ea:	685b      	ldreq	r3, [r3, #4]
 800a1ec:	6063      	str	r3, [r4, #4]
 800a1ee:	bf04      	itt	eq
 800a1f0:	1949      	addeq	r1, r1, r5
 800a1f2:	6021      	streq	r1, [r4, #0]
 800a1f4:	6054      	str	r4, [r2, #4]
 800a1f6:	e7c7      	b.n	800a188 <_free_r+0x28>
 800a1f8:	b003      	add	sp, #12
 800a1fa:	bd30      	pop	{r4, r5, pc}
 800a1fc:	200002e0 	.word	0x200002e0

0800a200 <_malloc_r>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	1ccd      	adds	r5, r1, #3
 800a204:	f025 0503 	bic.w	r5, r5, #3
 800a208:	3508      	adds	r5, #8
 800a20a:	2d0c      	cmp	r5, #12
 800a20c:	bf38      	it	cc
 800a20e:	250c      	movcc	r5, #12
 800a210:	2d00      	cmp	r5, #0
 800a212:	4606      	mov	r6, r0
 800a214:	db01      	blt.n	800a21a <_malloc_r+0x1a>
 800a216:	42a9      	cmp	r1, r5
 800a218:	d903      	bls.n	800a222 <_malloc_r+0x22>
 800a21a:	230c      	movs	r3, #12
 800a21c:	6033      	str	r3, [r6, #0]
 800a21e:	2000      	movs	r0, #0
 800a220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a222:	f000 fa8d 	bl	800a740 <__malloc_lock>
 800a226:	4921      	ldr	r1, [pc, #132]	; (800a2ac <_malloc_r+0xac>)
 800a228:	680a      	ldr	r2, [r1, #0]
 800a22a:	4614      	mov	r4, r2
 800a22c:	b99c      	cbnz	r4, 800a256 <_malloc_r+0x56>
 800a22e:	4f20      	ldr	r7, [pc, #128]	; (800a2b0 <_malloc_r+0xb0>)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	b923      	cbnz	r3, 800a23e <_malloc_r+0x3e>
 800a234:	4621      	mov	r1, r4
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f996 	bl	800a568 <_sbrk_r>
 800a23c:	6038      	str	r0, [r7, #0]
 800a23e:	4629      	mov	r1, r5
 800a240:	4630      	mov	r0, r6
 800a242:	f000 f991 	bl	800a568 <_sbrk_r>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d123      	bne.n	800a292 <_malloc_r+0x92>
 800a24a:	230c      	movs	r3, #12
 800a24c:	6033      	str	r3, [r6, #0]
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 fa7c 	bl	800a74c <__malloc_unlock>
 800a254:	e7e3      	b.n	800a21e <_malloc_r+0x1e>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	1b5b      	subs	r3, r3, r5
 800a25a:	d417      	bmi.n	800a28c <_malloc_r+0x8c>
 800a25c:	2b0b      	cmp	r3, #11
 800a25e:	d903      	bls.n	800a268 <_malloc_r+0x68>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	441c      	add	r4, r3
 800a264:	6025      	str	r5, [r4, #0]
 800a266:	e004      	b.n	800a272 <_malloc_r+0x72>
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	42a2      	cmp	r2, r4
 800a26c:	bf0c      	ite	eq
 800a26e:	600b      	streq	r3, [r1, #0]
 800a270:	6053      	strne	r3, [r2, #4]
 800a272:	4630      	mov	r0, r6
 800a274:	f000 fa6a 	bl	800a74c <__malloc_unlock>
 800a278:	f104 000b 	add.w	r0, r4, #11
 800a27c:	1d23      	adds	r3, r4, #4
 800a27e:	f020 0007 	bic.w	r0, r0, #7
 800a282:	1ac2      	subs	r2, r0, r3
 800a284:	d0cc      	beq.n	800a220 <_malloc_r+0x20>
 800a286:	1a1b      	subs	r3, r3, r0
 800a288:	50a3      	str	r3, [r4, r2]
 800a28a:	e7c9      	b.n	800a220 <_malloc_r+0x20>
 800a28c:	4622      	mov	r2, r4
 800a28e:	6864      	ldr	r4, [r4, #4]
 800a290:	e7cc      	b.n	800a22c <_malloc_r+0x2c>
 800a292:	1cc4      	adds	r4, r0, #3
 800a294:	f024 0403 	bic.w	r4, r4, #3
 800a298:	42a0      	cmp	r0, r4
 800a29a:	d0e3      	beq.n	800a264 <_malloc_r+0x64>
 800a29c:	1a21      	subs	r1, r4, r0
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f000 f962 	bl	800a568 <_sbrk_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d1dd      	bne.n	800a264 <_malloc_r+0x64>
 800a2a8:	e7cf      	b.n	800a24a <_malloc_r+0x4a>
 800a2aa:	bf00      	nop
 800a2ac:	200002e0 	.word	0x200002e0
 800a2b0:	200002e4 	.word	0x200002e4

0800a2b4 <__sfputc_r>:
 800a2b4:	6893      	ldr	r3, [r2, #8]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	b410      	push	{r4}
 800a2bc:	6093      	str	r3, [r2, #8]
 800a2be:	da08      	bge.n	800a2d2 <__sfputc_r+0x1e>
 800a2c0:	6994      	ldr	r4, [r2, #24]
 800a2c2:	42a3      	cmp	r3, r4
 800a2c4:	db01      	blt.n	800a2ca <__sfputc_r+0x16>
 800a2c6:	290a      	cmp	r1, #10
 800a2c8:	d103      	bne.n	800a2d2 <__sfputc_r+0x1e>
 800a2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ce:	f7fe ba47 	b.w	8008760 <__swbuf_r>
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	1c58      	adds	r0, r3, #1
 800a2d6:	6010      	str	r0, [r2, #0]
 800a2d8:	7019      	strb	r1, [r3, #0]
 800a2da:	4608      	mov	r0, r1
 800a2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <__sfputs_r>:
 800a2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460f      	mov	r7, r1
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	18d5      	adds	r5, r2, r3
 800a2ec:	42ac      	cmp	r4, r5
 800a2ee:	d101      	bne.n	800a2f4 <__sfputs_r+0x12>
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	e007      	b.n	800a304 <__sfputs_r+0x22>
 800a2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f8:	463a      	mov	r2, r7
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f7ff ffda 	bl	800a2b4 <__sfputc_r>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d1f3      	bne.n	800a2ec <__sfputs_r+0xa>
 800a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a308 <_vfiprintf_r>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	460d      	mov	r5, r1
 800a30e:	b09d      	sub	sp, #116	; 0x74
 800a310:	4614      	mov	r4, r2
 800a312:	4698      	mov	r8, r3
 800a314:	4606      	mov	r6, r0
 800a316:	b118      	cbz	r0, 800a320 <_vfiprintf_r+0x18>
 800a318:	6983      	ldr	r3, [r0, #24]
 800a31a:	b90b      	cbnz	r3, 800a320 <_vfiprintf_r+0x18>
 800a31c:	f7ff fa72 	bl	8009804 <__sinit>
 800a320:	4b89      	ldr	r3, [pc, #548]	; (800a548 <_vfiprintf_r+0x240>)
 800a322:	429d      	cmp	r5, r3
 800a324:	d11b      	bne.n	800a35e <_vfiprintf_r+0x56>
 800a326:	6875      	ldr	r5, [r6, #4]
 800a328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a32a:	07d9      	lsls	r1, r3, #31
 800a32c:	d405      	bmi.n	800a33a <_vfiprintf_r+0x32>
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	059a      	lsls	r2, r3, #22
 800a332:	d402      	bmi.n	800a33a <_vfiprintf_r+0x32>
 800a334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a336:	f7ff fb08 	bl	800994a <__retarget_lock_acquire_recursive>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	071b      	lsls	r3, r3, #28
 800a33e:	d501      	bpl.n	800a344 <_vfiprintf_r+0x3c>
 800a340:	692b      	ldr	r3, [r5, #16]
 800a342:	b9eb      	cbnz	r3, 800a380 <_vfiprintf_r+0x78>
 800a344:	4629      	mov	r1, r5
 800a346:	4630      	mov	r0, r6
 800a348:	f7fe fa5c 	bl	8008804 <__swsetup_r>
 800a34c:	b1c0      	cbz	r0, 800a380 <_vfiprintf_r+0x78>
 800a34e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a350:	07dc      	lsls	r4, r3, #31
 800a352:	d50e      	bpl.n	800a372 <_vfiprintf_r+0x6a>
 800a354:	f04f 30ff 	mov.w	r0, #4294967295
 800a358:	b01d      	add	sp, #116	; 0x74
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35e:	4b7b      	ldr	r3, [pc, #492]	; (800a54c <_vfiprintf_r+0x244>)
 800a360:	429d      	cmp	r5, r3
 800a362:	d101      	bne.n	800a368 <_vfiprintf_r+0x60>
 800a364:	68b5      	ldr	r5, [r6, #8]
 800a366:	e7df      	b.n	800a328 <_vfiprintf_r+0x20>
 800a368:	4b79      	ldr	r3, [pc, #484]	; (800a550 <_vfiprintf_r+0x248>)
 800a36a:	429d      	cmp	r5, r3
 800a36c:	bf08      	it	eq
 800a36e:	68f5      	ldreq	r5, [r6, #12]
 800a370:	e7da      	b.n	800a328 <_vfiprintf_r+0x20>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	0598      	lsls	r0, r3, #22
 800a376:	d4ed      	bmi.n	800a354 <_vfiprintf_r+0x4c>
 800a378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a37a:	f7ff fae7 	bl	800994c <__retarget_lock_release_recursive>
 800a37e:	e7e9      	b.n	800a354 <_vfiprintf_r+0x4c>
 800a380:	2300      	movs	r3, #0
 800a382:	9309      	str	r3, [sp, #36]	; 0x24
 800a384:	2320      	movs	r3, #32
 800a386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a38a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38e:	2330      	movs	r3, #48	; 0x30
 800a390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a554 <_vfiprintf_r+0x24c>
 800a394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a398:	f04f 0901 	mov.w	r9, #1
 800a39c:	4623      	mov	r3, r4
 800a39e:	469a      	mov	sl, r3
 800a3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a4:	b10a      	cbz	r2, 800a3aa <_vfiprintf_r+0xa2>
 800a3a6:	2a25      	cmp	r2, #37	; 0x25
 800a3a8:	d1f9      	bne.n	800a39e <_vfiprintf_r+0x96>
 800a3aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ae:	d00b      	beq.n	800a3c8 <_vfiprintf_r+0xc0>
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ff93 	bl	800a2e2 <__sfputs_r>
 800a3bc:	3001      	adds	r0, #1
 800a3be:	f000 80aa 	beq.w	800a516 <_vfiprintf_r+0x20e>
 800a3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c4:	445a      	add	r2, fp
 800a3c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80a2 	beq.w	800a516 <_vfiprintf_r+0x20e>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3dc:	f10a 0a01 	add.w	sl, sl, #1
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	9307      	str	r3, [sp, #28]
 800a3e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ea:	4654      	mov	r4, sl
 800a3ec:	2205      	movs	r2, #5
 800a3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f2:	4858      	ldr	r0, [pc, #352]	; (800a554 <_vfiprintf_r+0x24c>)
 800a3f4:	f7f5 ff14 	bl	8000220 <memchr>
 800a3f8:	9a04      	ldr	r2, [sp, #16]
 800a3fa:	b9d8      	cbnz	r0, 800a434 <_vfiprintf_r+0x12c>
 800a3fc:	06d1      	lsls	r1, r2, #27
 800a3fe:	bf44      	itt	mi
 800a400:	2320      	movmi	r3, #32
 800a402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a406:	0713      	lsls	r3, r2, #28
 800a408:	bf44      	itt	mi
 800a40a:	232b      	movmi	r3, #43	; 0x2b
 800a40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a410:	f89a 3000 	ldrb.w	r3, [sl]
 800a414:	2b2a      	cmp	r3, #42	; 0x2a
 800a416:	d015      	beq.n	800a444 <_vfiprintf_r+0x13c>
 800a418:	9a07      	ldr	r2, [sp, #28]
 800a41a:	4654      	mov	r4, sl
 800a41c:	2000      	movs	r0, #0
 800a41e:	f04f 0c0a 	mov.w	ip, #10
 800a422:	4621      	mov	r1, r4
 800a424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a428:	3b30      	subs	r3, #48	; 0x30
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	d94e      	bls.n	800a4cc <_vfiprintf_r+0x1c4>
 800a42e:	b1b0      	cbz	r0, 800a45e <_vfiprintf_r+0x156>
 800a430:	9207      	str	r2, [sp, #28]
 800a432:	e014      	b.n	800a45e <_vfiprintf_r+0x156>
 800a434:	eba0 0308 	sub.w	r3, r0, r8
 800a438:	fa09 f303 	lsl.w	r3, r9, r3
 800a43c:	4313      	orrs	r3, r2
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	46a2      	mov	sl, r4
 800a442:	e7d2      	b.n	800a3ea <_vfiprintf_r+0xe2>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	1d19      	adds	r1, r3, #4
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	9103      	str	r1, [sp, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bfbb      	ittet	lt
 800a450:	425b      	neglt	r3, r3
 800a452:	f042 0202 	orrlt.w	r2, r2, #2
 800a456:	9307      	strge	r3, [sp, #28]
 800a458:	9307      	strlt	r3, [sp, #28]
 800a45a:	bfb8      	it	lt
 800a45c:	9204      	strlt	r2, [sp, #16]
 800a45e:	7823      	ldrb	r3, [r4, #0]
 800a460:	2b2e      	cmp	r3, #46	; 0x2e
 800a462:	d10c      	bne.n	800a47e <_vfiprintf_r+0x176>
 800a464:	7863      	ldrb	r3, [r4, #1]
 800a466:	2b2a      	cmp	r3, #42	; 0x2a
 800a468:	d135      	bne.n	800a4d6 <_vfiprintf_r+0x1ce>
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	1d1a      	adds	r2, r3, #4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	9203      	str	r2, [sp, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	bfb8      	it	lt
 800a476:	f04f 33ff 	movlt.w	r3, #4294967295
 800a47a:	3402      	adds	r4, #2
 800a47c:	9305      	str	r3, [sp, #20]
 800a47e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a564 <_vfiprintf_r+0x25c>
 800a482:	7821      	ldrb	r1, [r4, #0]
 800a484:	2203      	movs	r2, #3
 800a486:	4650      	mov	r0, sl
 800a488:	f7f5 feca 	bl	8000220 <memchr>
 800a48c:	b140      	cbz	r0, 800a4a0 <_vfiprintf_r+0x198>
 800a48e:	2340      	movs	r3, #64	; 0x40
 800a490:	eba0 000a 	sub.w	r0, r0, sl
 800a494:	fa03 f000 	lsl.w	r0, r3, r0
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	4303      	orrs	r3, r0
 800a49c:	3401      	adds	r4, #1
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a4:	482c      	ldr	r0, [pc, #176]	; (800a558 <_vfiprintf_r+0x250>)
 800a4a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4aa:	2206      	movs	r2, #6
 800a4ac:	f7f5 feb8 	bl	8000220 <memchr>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d03f      	beq.n	800a534 <_vfiprintf_r+0x22c>
 800a4b4:	4b29      	ldr	r3, [pc, #164]	; (800a55c <_vfiprintf_r+0x254>)
 800a4b6:	bb1b      	cbnz	r3, 800a500 <_vfiprintf_r+0x1f8>
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	3307      	adds	r3, #7
 800a4bc:	f023 0307 	bic.w	r3, r3, #7
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c6:	443b      	add	r3, r7
 800a4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ca:	e767      	b.n	800a39c <_vfiprintf_r+0x94>
 800a4cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	e7a5      	b.n	800a422 <_vfiprintf_r+0x11a>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	3401      	adds	r4, #1
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f04f 0c0a 	mov.w	ip, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e8:	3a30      	subs	r2, #48	; 0x30
 800a4ea:	2a09      	cmp	r2, #9
 800a4ec:	d903      	bls.n	800a4f6 <_vfiprintf_r+0x1ee>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0c5      	beq.n	800a47e <_vfiprintf_r+0x176>
 800a4f2:	9105      	str	r1, [sp, #20]
 800a4f4:	e7c3      	b.n	800a47e <_vfiprintf_r+0x176>
 800a4f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e7f0      	b.n	800a4e2 <_vfiprintf_r+0x1da>
 800a500:	ab03      	add	r3, sp, #12
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	462a      	mov	r2, r5
 800a506:	4b16      	ldr	r3, [pc, #88]	; (800a560 <_vfiprintf_r+0x258>)
 800a508:	a904      	add	r1, sp, #16
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7fd fbfa 	bl	8007d04 <_printf_float>
 800a510:	4607      	mov	r7, r0
 800a512:	1c78      	adds	r0, r7, #1
 800a514:	d1d6      	bne.n	800a4c4 <_vfiprintf_r+0x1bc>
 800a516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a518:	07d9      	lsls	r1, r3, #31
 800a51a:	d405      	bmi.n	800a528 <_vfiprintf_r+0x220>
 800a51c:	89ab      	ldrh	r3, [r5, #12]
 800a51e:	059a      	lsls	r2, r3, #22
 800a520:	d402      	bmi.n	800a528 <_vfiprintf_r+0x220>
 800a522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a524:	f7ff fa12 	bl	800994c <__retarget_lock_release_recursive>
 800a528:	89ab      	ldrh	r3, [r5, #12]
 800a52a:	065b      	lsls	r3, r3, #25
 800a52c:	f53f af12 	bmi.w	800a354 <_vfiprintf_r+0x4c>
 800a530:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a532:	e711      	b.n	800a358 <_vfiprintf_r+0x50>
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	462a      	mov	r2, r5
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <_vfiprintf_r+0x258>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4630      	mov	r0, r6
 800a540:	f7fd fe84 	bl	800824c <_printf_i>
 800a544:	e7e4      	b.n	800a510 <_vfiprintf_r+0x208>
 800a546:	bf00      	nop
 800a548:	0800d268 	.word	0x0800d268
 800a54c:	0800d288 	.word	0x0800d288
 800a550:	0800d248 	.word	0x0800d248
 800a554:	0800d404 	.word	0x0800d404
 800a558:	0800d40e 	.word	0x0800d40e
 800a55c:	08007d05 	.word	0x08007d05
 800a560:	0800a2e3 	.word	0x0800a2e3
 800a564:	0800d40a 	.word	0x0800d40a

0800a568 <_sbrk_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d06      	ldr	r5, [pc, #24]	; (800a584 <_sbrk_r+0x1c>)
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	f7f8 feea 	bl	800334c <_sbrk>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_sbrk_r+0x1a>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_sbrk_r+0x1a>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	2000089c 	.word	0x2000089c

0800a588 <__sread>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	460c      	mov	r4, r1
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	f000 f8e2 	bl	800a758 <_read_r>
 800a594:	2800      	cmp	r0, #0
 800a596:	bfab      	itete	ge
 800a598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a59a:	89a3      	ldrhlt	r3, [r4, #12]
 800a59c:	181b      	addge	r3, r3, r0
 800a59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5a2:	bfac      	ite	ge
 800a5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5a6:	81a3      	strhlt	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__swrite>:
 800a5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	898b      	ldrh	r3, [r1, #12]
 800a5b2:	05db      	lsls	r3, r3, #23
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	4616      	mov	r6, r2
 800a5ba:	d505      	bpl.n	800a5c8 <__swrite+0x1e>
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f000 f898 	bl	800a6f8 <_lseek_r>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5de:	f000 b817 	b.w	800a610 <_write_r>

0800a5e2 <__sseek>:
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	f000 f885 	bl	800a6f8 <_lseek_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	bf15      	itete	ne
 800a5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5fe:	81a3      	strheq	r3, [r4, #12]
 800a600:	bf18      	it	ne
 800a602:	81a3      	strhne	r3, [r4, #12]
 800a604:	bd10      	pop	{r4, pc}

0800a606 <__sclose>:
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 b831 	b.w	800a670 <_close_r>
	...

0800a610 <_write_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	; (800a630 <_write_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f8 fd48 	bl	80030b4 <_write>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_write_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_write_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	2000089c 	.word	0x2000089c

0800a634 <__assert_func>:
 800a634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a636:	4614      	mov	r4, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	4b09      	ldr	r3, [pc, #36]	; (800a660 <__assert_func+0x2c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4605      	mov	r5, r0
 800a640:	68d8      	ldr	r0, [r3, #12]
 800a642:	b14c      	cbz	r4, 800a658 <__assert_func+0x24>
 800a644:	4b07      	ldr	r3, [pc, #28]	; (800a664 <__assert_func+0x30>)
 800a646:	9100      	str	r1, [sp, #0]
 800a648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a64c:	4906      	ldr	r1, [pc, #24]	; (800a668 <__assert_func+0x34>)
 800a64e:	462b      	mov	r3, r5
 800a650:	f000 f81e 	bl	800a690 <fiprintf>
 800a654:	f000 f89f 	bl	800a796 <abort>
 800a658:	4b04      	ldr	r3, [pc, #16]	; (800a66c <__assert_func+0x38>)
 800a65a:	461c      	mov	r4, r3
 800a65c:	e7f3      	b.n	800a646 <__assert_func+0x12>
 800a65e:	bf00      	nop
 800a660:	200000d4 	.word	0x200000d4
 800a664:	0800d415 	.word	0x0800d415
 800a668:	0800d422 	.word	0x0800d422
 800a66c:	0800d450 	.word	0x0800d450

0800a670 <_close_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4d06      	ldr	r5, [pc, #24]	; (800a68c <_close_r+0x1c>)
 800a674:	2300      	movs	r3, #0
 800a676:	4604      	mov	r4, r0
 800a678:	4608      	mov	r0, r1
 800a67a:	602b      	str	r3, [r5, #0]
 800a67c:	f7f8 fd46 	bl	800310c <_close>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_close_r+0x1a>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_close_r+0x1a>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	2000089c 	.word	0x2000089c

0800a690 <fiprintf>:
 800a690:	b40e      	push	{r1, r2, r3}
 800a692:	b503      	push	{r0, r1, lr}
 800a694:	4601      	mov	r1, r0
 800a696:	ab03      	add	r3, sp, #12
 800a698:	4805      	ldr	r0, [pc, #20]	; (800a6b0 <fiprintf+0x20>)
 800a69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	f7ff fe31 	bl	800a308 <_vfiprintf_r>
 800a6a6:	b002      	add	sp, #8
 800a6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6ac:	b003      	add	sp, #12
 800a6ae:	4770      	bx	lr
 800a6b0:	200000d4 	.word	0x200000d4

0800a6b4 <_fstat_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_fstat_r+0x20>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	4611      	mov	r1, r2
 800a6c0:	602b      	str	r3, [r5, #0]
 800a6c2:	f7f8 fd73 	bl	80031ac <_fstat>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	d102      	bne.n	800a6d0 <_fstat_r+0x1c>
 800a6ca:	682b      	ldr	r3, [r5, #0]
 800a6cc:	b103      	cbz	r3, 800a6d0 <_fstat_r+0x1c>
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	bd38      	pop	{r3, r4, r5, pc}
 800a6d2:	bf00      	nop
 800a6d4:	2000089c 	.word	0x2000089c

0800a6d8 <_isatty_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	; (800a6f4 <_isatty_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f8 fcd0 	bl	8003088 <_isatty>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_isatty_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_isatty_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	2000089c 	.word	0x2000089c

0800a6f8 <_lseek_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_lseek_r+0x20>)
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	4608      	mov	r0, r1
 800a700:	4611      	mov	r1, r2
 800a702:	2200      	movs	r2, #0
 800a704:	602a      	str	r2, [r5, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	f7f8 fd17 	bl	800313a <_lseek>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_lseek_r+0x1e>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_lseek_r+0x1e>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	2000089c 	.word	0x2000089c

0800a71c <__ascii_mbtowc>:
 800a71c:	b082      	sub	sp, #8
 800a71e:	b901      	cbnz	r1, 800a722 <__ascii_mbtowc+0x6>
 800a720:	a901      	add	r1, sp, #4
 800a722:	b142      	cbz	r2, 800a736 <__ascii_mbtowc+0x1a>
 800a724:	b14b      	cbz	r3, 800a73a <__ascii_mbtowc+0x1e>
 800a726:	7813      	ldrb	r3, [r2, #0]
 800a728:	600b      	str	r3, [r1, #0]
 800a72a:	7812      	ldrb	r2, [r2, #0]
 800a72c:	1e10      	subs	r0, r2, #0
 800a72e:	bf18      	it	ne
 800a730:	2001      	movne	r0, #1
 800a732:	b002      	add	sp, #8
 800a734:	4770      	bx	lr
 800a736:	4610      	mov	r0, r2
 800a738:	e7fb      	b.n	800a732 <__ascii_mbtowc+0x16>
 800a73a:	f06f 0001 	mvn.w	r0, #1
 800a73e:	e7f8      	b.n	800a732 <__ascii_mbtowc+0x16>

0800a740 <__malloc_lock>:
 800a740:	4801      	ldr	r0, [pc, #4]	; (800a748 <__malloc_lock+0x8>)
 800a742:	f7ff b902 	b.w	800994a <__retarget_lock_acquire_recursive>
 800a746:	bf00      	nop
 800a748:	20000894 	.word	0x20000894

0800a74c <__malloc_unlock>:
 800a74c:	4801      	ldr	r0, [pc, #4]	; (800a754 <__malloc_unlock+0x8>)
 800a74e:	f7ff b8fd 	b.w	800994c <__retarget_lock_release_recursive>
 800a752:	bf00      	nop
 800a754:	20000894 	.word	0x20000894

0800a758 <_read_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	; (800a778 <_read_r+0x20>)
 800a75c:	4604      	mov	r4, r0
 800a75e:	4608      	mov	r0, r1
 800a760:	4611      	mov	r1, r2
 800a762:	2200      	movs	r2, #0
 800a764:	602a      	str	r2, [r5, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f7f8 fcf8 	bl	800315c <_read>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_read_r+0x1e>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_read_r+0x1e>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	2000089c 	.word	0x2000089c

0800a77c <__ascii_wctomb>:
 800a77c:	b149      	cbz	r1, 800a792 <__ascii_wctomb+0x16>
 800a77e:	2aff      	cmp	r2, #255	; 0xff
 800a780:	bf85      	ittet	hi
 800a782:	238a      	movhi	r3, #138	; 0x8a
 800a784:	6003      	strhi	r3, [r0, #0]
 800a786:	700a      	strbls	r2, [r1, #0]
 800a788:	f04f 30ff 	movhi.w	r0, #4294967295
 800a78c:	bf98      	it	ls
 800a78e:	2001      	movls	r0, #1
 800a790:	4770      	bx	lr
 800a792:	4608      	mov	r0, r1
 800a794:	4770      	bx	lr

0800a796 <abort>:
 800a796:	b508      	push	{r3, lr}
 800a798:	2006      	movs	r0, #6
 800a79a:	f000 f82b 	bl	800a7f4 <raise>
 800a79e:	2001      	movs	r0, #1
 800a7a0:	f002 fbf4 	bl	800cf8c <_exit>

0800a7a4 <_raise_r>:
 800a7a4:	291f      	cmp	r1, #31
 800a7a6:	b538      	push	{r3, r4, r5, lr}
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	d904      	bls.n	800a7b8 <_raise_r+0x14>
 800a7ae:	2316      	movs	r3, #22
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7ba:	b112      	cbz	r2, 800a7c2 <_raise_r+0x1e>
 800a7bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7c0:	b94b      	cbnz	r3, 800a7d6 <_raise_r+0x32>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f830 	bl	800a828 <_getpid_r>
 800a7c8:	462a      	mov	r2, r5
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7d2:	f000 b817 	b.w	800a804 <_kill_r>
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d00a      	beq.n	800a7f0 <_raise_r+0x4c>
 800a7da:	1c59      	adds	r1, r3, #1
 800a7dc:	d103      	bne.n	800a7e6 <_raise_r+0x42>
 800a7de:	2316      	movs	r3, #22
 800a7e0:	6003      	str	r3, [r0, #0]
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	e7e7      	b.n	800a7b6 <_raise_r+0x12>
 800a7e6:	2400      	movs	r4, #0
 800a7e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	4798      	blx	r3
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e7e0      	b.n	800a7b6 <_raise_r+0x12>

0800a7f4 <raise>:
 800a7f4:	4b02      	ldr	r3, [pc, #8]	; (800a800 <raise+0xc>)
 800a7f6:	4601      	mov	r1, r0
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f7ff bfd3 	b.w	800a7a4 <_raise_r>
 800a7fe:	bf00      	nop
 800a800:	200000d4 	.word	0x200000d4

0800a804 <_kill_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d07      	ldr	r5, [pc, #28]	; (800a824 <_kill_r+0x20>)
 800a808:	2300      	movs	r3, #0
 800a80a:	4604      	mov	r4, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	4611      	mov	r1, r2
 800a810:	602b      	str	r3, [r5, #0]
 800a812:	f002 fbb3 	bl	800cf7c <_kill>
 800a816:	1c43      	adds	r3, r0, #1
 800a818:	d102      	bne.n	800a820 <_kill_r+0x1c>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	b103      	cbz	r3, 800a820 <_kill_r+0x1c>
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	bd38      	pop	{r3, r4, r5, pc}
 800a822:	bf00      	nop
 800a824:	2000089c 	.word	0x2000089c

0800a828 <_getpid_r>:
 800a828:	f002 bba0 	b.w	800cf6c <_getpid>
 800a82c:	0000      	movs	r0, r0
	...

0800a830 <atan>:
 800a830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	ec55 4b10 	vmov	r4, r5, d0
 800a838:	4bc3      	ldr	r3, [pc, #780]	; (800ab48 <atan+0x318>)
 800a83a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a83e:	429e      	cmp	r6, r3
 800a840:	46ab      	mov	fp, r5
 800a842:	dd18      	ble.n	800a876 <atan+0x46>
 800a844:	4bc1      	ldr	r3, [pc, #772]	; (800ab4c <atan+0x31c>)
 800a846:	429e      	cmp	r6, r3
 800a848:	dc01      	bgt.n	800a84e <atan+0x1e>
 800a84a:	d109      	bne.n	800a860 <atan+0x30>
 800a84c:	b144      	cbz	r4, 800a860 <atan+0x30>
 800a84e:	4622      	mov	r2, r4
 800a850:	462b      	mov	r3, r5
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f5 fd39 	bl	80002cc <__adddf3>
 800a85a:	4604      	mov	r4, r0
 800a85c:	460d      	mov	r5, r1
 800a85e:	e006      	b.n	800a86e <atan+0x3e>
 800a860:	f1bb 0f00 	cmp.w	fp, #0
 800a864:	f300 8131 	bgt.w	800aaca <atan+0x29a>
 800a868:	a59b      	add	r5, pc, #620	; (adr r5, 800aad8 <atan+0x2a8>)
 800a86a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a86e:	ec45 4b10 	vmov	d0, r4, r5
 800a872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a876:	4bb6      	ldr	r3, [pc, #728]	; (800ab50 <atan+0x320>)
 800a878:	429e      	cmp	r6, r3
 800a87a:	dc14      	bgt.n	800a8a6 <atan+0x76>
 800a87c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a880:	429e      	cmp	r6, r3
 800a882:	dc0d      	bgt.n	800a8a0 <atan+0x70>
 800a884:	a396      	add	r3, pc, #600	; (adr r3, 800aae0 <atan+0x2b0>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 fd1c 	bl	80002cc <__adddf3>
 800a894:	4baf      	ldr	r3, [pc, #700]	; (800ab54 <atan+0x324>)
 800a896:	2200      	movs	r2, #0
 800a898:	f7f6 f95e 	bl	8000b58 <__aeabi_dcmpgt>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d1e6      	bne.n	800a86e <atan+0x3e>
 800a8a0:	f04f 3aff 	mov.w	sl, #4294967295
 800a8a4:	e02b      	b.n	800a8fe <atan+0xce>
 800a8a6:	f000 f9b3 	bl	800ac10 <fabs>
 800a8aa:	4bab      	ldr	r3, [pc, #684]	; (800ab58 <atan+0x328>)
 800a8ac:	429e      	cmp	r6, r3
 800a8ae:	ec55 4b10 	vmov	r4, r5, d0
 800a8b2:	f300 80bf 	bgt.w	800aa34 <atan+0x204>
 800a8b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a8ba:	429e      	cmp	r6, r3
 800a8bc:	f300 80a0 	bgt.w	800aa00 <atan+0x1d0>
 800a8c0:	ee10 2a10 	vmov	r2, s0
 800a8c4:	ee10 0a10 	vmov	r0, s0
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f5 fcfe 	bl	80002cc <__adddf3>
 800a8d0:	4ba0      	ldr	r3, [pc, #640]	; (800ab54 <atan+0x324>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f5 fcf8 	bl	80002c8 <__aeabi_dsub>
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460f      	mov	r7, r1
 800a8de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	f7f5 fcf1 	bl	80002cc <__adddf3>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	f7f5 ffcb 	bl	800088c <__aeabi_ddiv>
 800a8f6:	f04f 0a00 	mov.w	sl, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	460d      	mov	r5, r1
 800a8fe:	4622      	mov	r2, r4
 800a900:	462b      	mov	r3, r5
 800a902:	4620      	mov	r0, r4
 800a904:	4629      	mov	r1, r5
 800a906:	f7f5 fe97 	bl	8000638 <__aeabi_dmul>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4680      	mov	r8, r0
 800a910:	4689      	mov	r9, r1
 800a912:	f7f5 fe91 	bl	8000638 <__aeabi_dmul>
 800a916:	a374      	add	r3, pc, #464	; (adr r3, 800aae8 <atan+0x2b8>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	4606      	mov	r6, r0
 800a91e:	460f      	mov	r7, r1
 800a920:	f7f5 fe8a 	bl	8000638 <__aeabi_dmul>
 800a924:	a372      	add	r3, pc, #456	; (adr r3, 800aaf0 <atan+0x2c0>)
 800a926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92a:	f7f5 fccf 	bl	80002cc <__adddf3>
 800a92e:	4632      	mov	r2, r6
 800a930:	463b      	mov	r3, r7
 800a932:	f7f5 fe81 	bl	8000638 <__aeabi_dmul>
 800a936:	a370      	add	r3, pc, #448	; (adr r3, 800aaf8 <atan+0x2c8>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fcc6 	bl	80002cc <__adddf3>
 800a940:	4632      	mov	r2, r6
 800a942:	463b      	mov	r3, r7
 800a944:	f7f5 fe78 	bl	8000638 <__aeabi_dmul>
 800a948:	a36d      	add	r3, pc, #436	; (adr r3, 800ab00 <atan+0x2d0>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fcbd 	bl	80002cc <__adddf3>
 800a952:	4632      	mov	r2, r6
 800a954:	463b      	mov	r3, r7
 800a956:	f7f5 fe6f 	bl	8000638 <__aeabi_dmul>
 800a95a:	a36b      	add	r3, pc, #428	; (adr r3, 800ab08 <atan+0x2d8>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fcb4 	bl	80002cc <__adddf3>
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	f7f5 fe66 	bl	8000638 <__aeabi_dmul>
 800a96c:	a368      	add	r3, pc, #416	; (adr r3, 800ab10 <atan+0x2e0>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fcab 	bl	80002cc <__adddf3>
 800a976:	4642      	mov	r2, r8
 800a978:	464b      	mov	r3, r9
 800a97a:	f7f5 fe5d 	bl	8000638 <__aeabi_dmul>
 800a97e:	a366      	add	r3, pc, #408	; (adr r3, 800ab18 <atan+0x2e8>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	4680      	mov	r8, r0
 800a986:	4689      	mov	r9, r1
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f5 fe54 	bl	8000638 <__aeabi_dmul>
 800a990:	a363      	add	r3, pc, #396	; (adr r3, 800ab20 <atan+0x2f0>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fc97 	bl	80002c8 <__aeabi_dsub>
 800a99a:	4632      	mov	r2, r6
 800a99c:	463b      	mov	r3, r7
 800a99e:	f7f5 fe4b 	bl	8000638 <__aeabi_dmul>
 800a9a2:	a361      	add	r3, pc, #388	; (adr r3, 800ab28 <atan+0x2f8>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fc8e 	bl	80002c8 <__aeabi_dsub>
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	f7f5 fe42 	bl	8000638 <__aeabi_dmul>
 800a9b4:	a35e      	add	r3, pc, #376	; (adr r3, 800ab30 <atan+0x300>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc85 	bl	80002c8 <__aeabi_dsub>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	f7f5 fe39 	bl	8000638 <__aeabi_dmul>
 800a9c6:	a35c      	add	r3, pc, #368	; (adr r3, 800ab38 <atan+0x308>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	f7f5 fc7c 	bl	80002c8 <__aeabi_dsub>
 800a9d0:	4632      	mov	r2, r6
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	f7f5 fe30 	bl	8000638 <__aeabi_dmul>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4649      	mov	r1, r9
 800a9e0:	f7f5 fc74 	bl	80002cc <__adddf3>
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	462b      	mov	r3, r5
 800a9e8:	f7f5 fe26 	bl	8000638 <__aeabi_dmul>
 800a9ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	d14b      	bne.n	800aa8e <atan+0x25e>
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f5 fc65 	bl	80002c8 <__aeabi_dsub>
 800a9fe:	e72c      	b.n	800a85a <atan+0x2a>
 800aa00:	ee10 0a10 	vmov	r0, s0
 800aa04:	4b53      	ldr	r3, [pc, #332]	; (800ab54 <atan+0x324>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	4629      	mov	r1, r5
 800aa0a:	f7f5 fc5d 	bl	80002c8 <__aeabi_dsub>
 800aa0e:	4b51      	ldr	r3, [pc, #324]	; (800ab54 <atan+0x324>)
 800aa10:	4606      	mov	r6, r0
 800aa12:	460f      	mov	r7, r1
 800aa14:	2200      	movs	r2, #0
 800aa16:	4620      	mov	r0, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f7f5 fc57 	bl	80002cc <__adddf3>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f5 ff31 	bl	800088c <__aeabi_ddiv>
 800aa2a:	f04f 0a01 	mov.w	sl, #1
 800aa2e:	4604      	mov	r4, r0
 800aa30:	460d      	mov	r5, r1
 800aa32:	e764      	b.n	800a8fe <atan+0xce>
 800aa34:	4b49      	ldr	r3, [pc, #292]	; (800ab5c <atan+0x32c>)
 800aa36:	429e      	cmp	r6, r3
 800aa38:	da1d      	bge.n	800aa76 <atan+0x246>
 800aa3a:	ee10 0a10 	vmov	r0, s0
 800aa3e:	4b48      	ldr	r3, [pc, #288]	; (800ab60 <atan+0x330>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	4629      	mov	r1, r5
 800aa44:	f7f5 fc40 	bl	80002c8 <__aeabi_dsub>
 800aa48:	4b45      	ldr	r3, [pc, #276]	; (800ab60 <atan+0x330>)
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fdf0 	bl	8000638 <__aeabi_dmul>
 800aa58:	4b3e      	ldr	r3, [pc, #248]	; (800ab54 <atan+0x324>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f7f5 fc36 	bl	80002cc <__adddf3>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	4630      	mov	r0, r6
 800aa66:	4639      	mov	r1, r7
 800aa68:	f7f5 ff10 	bl	800088c <__aeabi_ddiv>
 800aa6c:	f04f 0a02 	mov.w	sl, #2
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	e743      	b.n	800a8fe <atan+0xce>
 800aa76:	462b      	mov	r3, r5
 800aa78:	ee10 2a10 	vmov	r2, s0
 800aa7c:	4939      	ldr	r1, [pc, #228]	; (800ab64 <atan+0x334>)
 800aa7e:	2000      	movs	r0, #0
 800aa80:	f7f5 ff04 	bl	800088c <__aeabi_ddiv>
 800aa84:	f04f 0a03 	mov.w	sl, #3
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	e737      	b.n	800a8fe <atan+0xce>
 800aa8e:	4b36      	ldr	r3, [pc, #216]	; (800ab68 <atan+0x338>)
 800aa90:	4e36      	ldr	r6, [pc, #216]	; (800ab6c <atan+0x33c>)
 800aa92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aa96:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800aa9a:	e9da 2300 	ldrd	r2, r3, [sl]
 800aa9e:	f7f5 fc13 	bl	80002c8 <__aeabi_dsub>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	f7f5 fc0f 	bl	80002c8 <__aeabi_dsub>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aab2:	f7f5 fc09 	bl	80002c8 <__aeabi_dsub>
 800aab6:	f1bb 0f00 	cmp.w	fp, #0
 800aaba:	4604      	mov	r4, r0
 800aabc:	460d      	mov	r5, r1
 800aabe:	f6bf aed6 	bge.w	800a86e <atan+0x3e>
 800aac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aac6:	461d      	mov	r5, r3
 800aac8:	e6d1      	b.n	800a86e <atan+0x3e>
 800aaca:	a51d      	add	r5, pc, #116	; (adr r5, 800ab40 <atan+0x310>)
 800aacc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aad0:	e6cd      	b.n	800a86e <atan+0x3e>
 800aad2:	bf00      	nop
 800aad4:	f3af 8000 	nop.w
 800aad8:	54442d18 	.word	0x54442d18
 800aadc:	bff921fb 	.word	0xbff921fb
 800aae0:	8800759c 	.word	0x8800759c
 800aae4:	7e37e43c 	.word	0x7e37e43c
 800aae8:	e322da11 	.word	0xe322da11
 800aaec:	3f90ad3a 	.word	0x3f90ad3a
 800aaf0:	24760deb 	.word	0x24760deb
 800aaf4:	3fa97b4b 	.word	0x3fa97b4b
 800aaf8:	a0d03d51 	.word	0xa0d03d51
 800aafc:	3fb10d66 	.word	0x3fb10d66
 800ab00:	c54c206e 	.word	0xc54c206e
 800ab04:	3fb745cd 	.word	0x3fb745cd
 800ab08:	920083ff 	.word	0x920083ff
 800ab0c:	3fc24924 	.word	0x3fc24924
 800ab10:	5555550d 	.word	0x5555550d
 800ab14:	3fd55555 	.word	0x3fd55555
 800ab18:	2c6a6c2f 	.word	0x2c6a6c2f
 800ab1c:	bfa2b444 	.word	0xbfa2b444
 800ab20:	52defd9a 	.word	0x52defd9a
 800ab24:	3fadde2d 	.word	0x3fadde2d
 800ab28:	af749a6d 	.word	0xaf749a6d
 800ab2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ab30:	fe231671 	.word	0xfe231671
 800ab34:	3fbc71c6 	.word	0x3fbc71c6
 800ab38:	9998ebc4 	.word	0x9998ebc4
 800ab3c:	3fc99999 	.word	0x3fc99999
 800ab40:	54442d18 	.word	0x54442d18
 800ab44:	3ff921fb 	.word	0x3ff921fb
 800ab48:	440fffff 	.word	0x440fffff
 800ab4c:	7ff00000 	.word	0x7ff00000
 800ab50:	3fdbffff 	.word	0x3fdbffff
 800ab54:	3ff00000 	.word	0x3ff00000
 800ab58:	3ff2ffff 	.word	0x3ff2ffff
 800ab5c:	40038000 	.word	0x40038000
 800ab60:	3ff80000 	.word	0x3ff80000
 800ab64:	bff00000 	.word	0xbff00000
 800ab68:	0800d480 	.word	0x0800d480
 800ab6c:	0800d460 	.word	0x0800d460

0800ab70 <cos>:
 800ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab72:	ec53 2b10 	vmov	r2, r3, d0
 800ab76:	4824      	ldr	r0, [pc, #144]	; (800ac08 <cos+0x98>)
 800ab78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab7c:	4281      	cmp	r1, r0
 800ab7e:	dc06      	bgt.n	800ab8e <cos+0x1e>
 800ab80:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800ac00 <cos+0x90>
 800ab84:	f001 fb84 	bl	800c290 <__kernel_cos>
 800ab88:	ec51 0b10 	vmov	r0, r1, d0
 800ab8c:	e007      	b.n	800ab9e <cos+0x2e>
 800ab8e:	481f      	ldr	r0, [pc, #124]	; (800ac0c <cos+0x9c>)
 800ab90:	4281      	cmp	r1, r0
 800ab92:	dd09      	ble.n	800aba8 <cos+0x38>
 800ab94:	ee10 0a10 	vmov	r0, s0
 800ab98:	4619      	mov	r1, r3
 800ab9a:	f7f5 fb95 	bl	80002c8 <__aeabi_dsub>
 800ab9e:	ec41 0b10 	vmov	d0, r0, r1
 800aba2:	b005      	add	sp, #20
 800aba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aba8:	4668      	mov	r0, sp
 800abaa:	f001 f8b1 	bl	800bd10 <__ieee754_rem_pio2>
 800abae:	f000 0003 	and.w	r0, r0, #3
 800abb2:	2801      	cmp	r0, #1
 800abb4:	d007      	beq.n	800abc6 <cos+0x56>
 800abb6:	2802      	cmp	r0, #2
 800abb8:	d012      	beq.n	800abe0 <cos+0x70>
 800abba:	b9c0      	cbnz	r0, 800abee <cos+0x7e>
 800abbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abc0:	ed9d 0b00 	vldr	d0, [sp]
 800abc4:	e7de      	b.n	800ab84 <cos+0x14>
 800abc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abca:	ed9d 0b00 	vldr	d0, [sp]
 800abce:	f001 ff67 	bl	800caa0 <__kernel_sin>
 800abd2:	ec53 2b10 	vmov	r2, r3, d0
 800abd6:	ee10 0a10 	vmov	r0, s0
 800abda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800abde:	e7de      	b.n	800ab9e <cos+0x2e>
 800abe0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abe4:	ed9d 0b00 	vldr	d0, [sp]
 800abe8:	f001 fb52 	bl	800c290 <__kernel_cos>
 800abec:	e7f1      	b.n	800abd2 <cos+0x62>
 800abee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abf2:	ed9d 0b00 	vldr	d0, [sp]
 800abf6:	2001      	movs	r0, #1
 800abf8:	f001 ff52 	bl	800caa0 <__kernel_sin>
 800abfc:	e7c4      	b.n	800ab88 <cos+0x18>
 800abfe:	bf00      	nop
	...
 800ac08:	3fe921fb 	.word	0x3fe921fb
 800ac0c:	7fefffff 	.word	0x7fefffff

0800ac10 <fabs>:
 800ac10:	ec51 0b10 	vmov	r0, r1, d0
 800ac14:	ee10 2a10 	vmov	r2, s0
 800ac18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac1c:	ec43 2b10 	vmov	d0, r2, r3
 800ac20:	4770      	bx	lr
 800ac22:	0000      	movs	r0, r0
 800ac24:	0000      	movs	r0, r0
	...

0800ac28 <sin>:
 800ac28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac2a:	ec53 2b10 	vmov	r2, r3, d0
 800ac2e:	4826      	ldr	r0, [pc, #152]	; (800acc8 <sin+0xa0>)
 800ac30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac34:	4281      	cmp	r1, r0
 800ac36:	dc07      	bgt.n	800ac48 <sin+0x20>
 800ac38:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800acc0 <sin+0x98>
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f001 ff2f 	bl	800caa0 <__kernel_sin>
 800ac42:	ec51 0b10 	vmov	r0, r1, d0
 800ac46:	e007      	b.n	800ac58 <sin+0x30>
 800ac48:	4820      	ldr	r0, [pc, #128]	; (800accc <sin+0xa4>)
 800ac4a:	4281      	cmp	r1, r0
 800ac4c:	dd09      	ble.n	800ac62 <sin+0x3a>
 800ac4e:	ee10 0a10 	vmov	r0, s0
 800ac52:	4619      	mov	r1, r3
 800ac54:	f7f5 fb38 	bl	80002c8 <__aeabi_dsub>
 800ac58:	ec41 0b10 	vmov	d0, r0, r1
 800ac5c:	b005      	add	sp, #20
 800ac5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac62:	4668      	mov	r0, sp
 800ac64:	f001 f854 	bl	800bd10 <__ieee754_rem_pio2>
 800ac68:	f000 0003 	and.w	r0, r0, #3
 800ac6c:	2801      	cmp	r0, #1
 800ac6e:	d008      	beq.n	800ac82 <sin+0x5a>
 800ac70:	2802      	cmp	r0, #2
 800ac72:	d00d      	beq.n	800ac90 <sin+0x68>
 800ac74:	b9d0      	cbnz	r0, 800acac <sin+0x84>
 800ac76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac7a:	ed9d 0b00 	vldr	d0, [sp]
 800ac7e:	2001      	movs	r0, #1
 800ac80:	e7dd      	b.n	800ac3e <sin+0x16>
 800ac82:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac86:	ed9d 0b00 	vldr	d0, [sp]
 800ac8a:	f001 fb01 	bl	800c290 <__kernel_cos>
 800ac8e:	e7d8      	b.n	800ac42 <sin+0x1a>
 800ac90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac94:	ed9d 0b00 	vldr	d0, [sp]
 800ac98:	2001      	movs	r0, #1
 800ac9a:	f001 ff01 	bl	800caa0 <__kernel_sin>
 800ac9e:	ec53 2b10 	vmov	r2, r3, d0
 800aca2:	ee10 0a10 	vmov	r0, s0
 800aca6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acaa:	e7d5      	b.n	800ac58 <sin+0x30>
 800acac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800acb0:	ed9d 0b00 	vldr	d0, [sp]
 800acb4:	f001 faec 	bl	800c290 <__kernel_cos>
 800acb8:	e7f1      	b.n	800ac9e <sin+0x76>
 800acba:	bf00      	nop
 800acbc:	f3af 8000 	nop.w
	...
 800acc8:	3fe921fb 	.word	0x3fe921fb
 800accc:	7fefffff 	.word	0x7fefffff

0800acd0 <atan2>:
 800acd0:	f000 b91e 	b.w	800af10 <__ieee754_atan2>

0800acd4 <fmod>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	ed2d 8b02 	vpush	{d8}
 800acda:	ec57 6b10 	vmov	r6, r7, d0
 800acde:	ec55 4b11 	vmov	r4, r5, d1
 800ace2:	f000 f9df 	bl	800b0a4 <__ieee754_fmod>
 800ace6:	4b18      	ldr	r3, [pc, #96]	; (800ad48 <fmod+0x74>)
 800ace8:	eeb0 8a40 	vmov.f32	s16, s0
 800acec:	eef0 8a60 	vmov.f32	s17, s1
 800acf0:	f993 3000 	ldrsb.w	r3, [r3]
 800acf4:	3301      	adds	r3, #1
 800acf6:	d020      	beq.n	800ad3a <fmod+0x66>
 800acf8:	4622      	mov	r2, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	4620      	mov	r0, r4
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7f5 ff34 	bl	8000b6c <__aeabi_dcmpun>
 800ad04:	b9c8      	cbnz	r0, 800ad3a <fmod+0x66>
 800ad06:	4632      	mov	r2, r6
 800ad08:	463b      	mov	r3, r7
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	f7f5 ff2d 	bl	8000b6c <__aeabi_dcmpun>
 800ad12:	b990      	cbnz	r0, 800ad3a <fmod+0x66>
 800ad14:	2200      	movs	r2, #0
 800ad16:	2300      	movs	r3, #0
 800ad18:	4620      	mov	r0, r4
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	f7f5 fef4 	bl	8000b08 <__aeabi_dcmpeq>
 800ad20:	b158      	cbz	r0, 800ad3a <fmod+0x66>
 800ad22:	f7fc ff1d 	bl	8007b60 <__errno>
 800ad26:	2321      	movs	r3, #33	; 0x21
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4610      	mov	r0, r2
 800ad30:	4619      	mov	r1, r3
 800ad32:	f7f5 fdab 	bl	800088c <__aeabi_ddiv>
 800ad36:	ec41 0b18 	vmov	d8, r0, r1
 800ad3a:	eeb0 0a48 	vmov.f32	s0, s16
 800ad3e:	eef0 0a68 	vmov.f32	s1, s17
 800ad42:	ecbd 8b02 	vpop	{d8}
 800ad46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad48:	200002a4 	.word	0x200002a4

0800ad4c <pow>:
 800ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad50:	ec59 8b10 	vmov	r8, r9, d0
 800ad54:	ec57 6b11 	vmov	r6, r7, d1
 800ad58:	f000 fab6 	bl	800b2c8 <__ieee754_pow>
 800ad5c:	4b4e      	ldr	r3, [pc, #312]	; (800ae98 <pow+0x14c>)
 800ad5e:	f993 3000 	ldrsb.w	r3, [r3]
 800ad62:	3301      	adds	r3, #1
 800ad64:	ec55 4b10 	vmov	r4, r5, d0
 800ad68:	d015      	beq.n	800ad96 <pow+0x4a>
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f7f5 fefb 	bl	8000b6c <__aeabi_dcmpun>
 800ad76:	b970      	cbnz	r0, 800ad96 <pow+0x4a>
 800ad78:	4642      	mov	r2, r8
 800ad7a:	464b      	mov	r3, r9
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 fef4 	bl	8000b6c <__aeabi_dcmpun>
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	b148      	cbz	r0, 800ad9e <pow+0x52>
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 febb 	bl	8000b08 <__aeabi_dcmpeq>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d17d      	bne.n	800ae92 <pow+0x146>
 800ad96:	ec45 4b10 	vmov	d0, r4, r5
 800ad9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4649      	mov	r1, r9
 800ada2:	f7f5 feb1 	bl	8000b08 <__aeabi_dcmpeq>
 800ada6:	b1e0      	cbz	r0, 800ade2 <pow+0x96>
 800ada8:	2200      	movs	r2, #0
 800adaa:	2300      	movs	r3, #0
 800adac:	4630      	mov	r0, r6
 800adae:	4639      	mov	r1, r7
 800adb0:	f7f5 feaa 	bl	8000b08 <__aeabi_dcmpeq>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d16c      	bne.n	800ae92 <pow+0x146>
 800adb8:	ec47 6b10 	vmov	d0, r6, r7
 800adbc:	f001 ff2e 	bl	800cc1c <finite>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d0e8      	beq.n	800ad96 <pow+0x4a>
 800adc4:	2200      	movs	r2, #0
 800adc6:	2300      	movs	r3, #0
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fea6 	bl	8000b1c <__aeabi_dcmplt>
 800add0:	2800      	cmp	r0, #0
 800add2:	d0e0      	beq.n	800ad96 <pow+0x4a>
 800add4:	f7fc fec4 	bl	8007b60 <__errno>
 800add8:	2321      	movs	r3, #33	; 0x21
 800adda:	6003      	str	r3, [r0, #0]
 800addc:	2400      	movs	r4, #0
 800adde:	4d2f      	ldr	r5, [pc, #188]	; (800ae9c <pow+0x150>)
 800ade0:	e7d9      	b.n	800ad96 <pow+0x4a>
 800ade2:	ec45 4b10 	vmov	d0, r4, r5
 800ade6:	f001 ff19 	bl	800cc1c <finite>
 800adea:	bbb8      	cbnz	r0, 800ae5c <pow+0x110>
 800adec:	ec49 8b10 	vmov	d0, r8, r9
 800adf0:	f001 ff14 	bl	800cc1c <finite>
 800adf4:	b390      	cbz	r0, 800ae5c <pow+0x110>
 800adf6:	ec47 6b10 	vmov	d0, r6, r7
 800adfa:	f001 ff0f 	bl	800cc1c <finite>
 800adfe:	b368      	cbz	r0, 800ae5c <pow+0x110>
 800ae00:	4622      	mov	r2, r4
 800ae02:	462b      	mov	r3, r5
 800ae04:	4620      	mov	r0, r4
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7f5 feb0 	bl	8000b6c <__aeabi_dcmpun>
 800ae0c:	b160      	cbz	r0, 800ae28 <pow+0xdc>
 800ae0e:	f7fc fea7 	bl	8007b60 <__errno>
 800ae12:	2321      	movs	r3, #33	; 0x21
 800ae14:	6003      	str	r3, [r0, #0]
 800ae16:	2200      	movs	r2, #0
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	f7f5 fd35 	bl	800088c <__aeabi_ddiv>
 800ae22:	4604      	mov	r4, r0
 800ae24:	460d      	mov	r5, r1
 800ae26:	e7b6      	b.n	800ad96 <pow+0x4a>
 800ae28:	f7fc fe9a 	bl	8007b60 <__errno>
 800ae2c:	2322      	movs	r3, #34	; 0x22
 800ae2e:	6003      	str	r3, [r0, #0]
 800ae30:	2200      	movs	r2, #0
 800ae32:	2300      	movs	r3, #0
 800ae34:	4640      	mov	r0, r8
 800ae36:	4649      	mov	r1, r9
 800ae38:	f7f5 fe70 	bl	8000b1c <__aeabi_dcmplt>
 800ae3c:	2400      	movs	r4, #0
 800ae3e:	b158      	cbz	r0, 800ae58 <pow+0x10c>
 800ae40:	ec47 6b10 	vmov	d0, r6, r7
 800ae44:	f001 ff80 	bl	800cd48 <rint>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	ec51 0b10 	vmov	r0, r1, d0
 800ae4e:	463b      	mov	r3, r7
 800ae50:	f7f5 fe5a 	bl	8000b08 <__aeabi_dcmpeq>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d0c2      	beq.n	800adde <pow+0x92>
 800ae58:	4d11      	ldr	r5, [pc, #68]	; (800aea0 <pow+0x154>)
 800ae5a:	e79c      	b.n	800ad96 <pow+0x4a>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2300      	movs	r3, #0
 800ae60:	4620      	mov	r0, r4
 800ae62:	4629      	mov	r1, r5
 800ae64:	f7f5 fe50 	bl	8000b08 <__aeabi_dcmpeq>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d094      	beq.n	800ad96 <pow+0x4a>
 800ae6c:	ec49 8b10 	vmov	d0, r8, r9
 800ae70:	f001 fed4 	bl	800cc1c <finite>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d08e      	beq.n	800ad96 <pow+0x4a>
 800ae78:	ec47 6b10 	vmov	d0, r6, r7
 800ae7c:	f001 fece 	bl	800cc1c <finite>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d088      	beq.n	800ad96 <pow+0x4a>
 800ae84:	f7fc fe6c 	bl	8007b60 <__errno>
 800ae88:	2322      	movs	r3, #34	; 0x22
 800ae8a:	6003      	str	r3, [r0, #0]
 800ae8c:	2400      	movs	r4, #0
 800ae8e:	2500      	movs	r5, #0
 800ae90:	e781      	b.n	800ad96 <pow+0x4a>
 800ae92:	4d04      	ldr	r5, [pc, #16]	; (800aea4 <pow+0x158>)
 800ae94:	2400      	movs	r4, #0
 800ae96:	e77e      	b.n	800ad96 <pow+0x4a>
 800ae98:	200002a4 	.word	0x200002a4
 800ae9c:	fff00000 	.word	0xfff00000
 800aea0:	7ff00000 	.word	0x7ff00000
 800aea4:	3ff00000 	.word	0x3ff00000

0800aea8 <sqrt>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	ed2d 8b02 	vpush	{d8}
 800aeae:	ec55 4b10 	vmov	r4, r5, d0
 800aeb2:	f001 f937 	bl	800c124 <__ieee754_sqrt>
 800aeb6:	4b15      	ldr	r3, [pc, #84]	; (800af0c <sqrt+0x64>)
 800aeb8:	eeb0 8a40 	vmov.f32	s16, s0
 800aebc:	eef0 8a60 	vmov.f32	s17, s1
 800aec0:	f993 3000 	ldrsb.w	r3, [r3]
 800aec4:	3301      	adds	r3, #1
 800aec6:	d019      	beq.n	800aefc <sqrt+0x54>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fe4c 	bl	8000b6c <__aeabi_dcmpun>
 800aed4:	b990      	cbnz	r0, 800aefc <sqrt+0x54>
 800aed6:	2200      	movs	r2, #0
 800aed8:	2300      	movs	r3, #0
 800aeda:	4620      	mov	r0, r4
 800aedc:	4629      	mov	r1, r5
 800aede:	f7f5 fe1d 	bl	8000b1c <__aeabi_dcmplt>
 800aee2:	b158      	cbz	r0, 800aefc <sqrt+0x54>
 800aee4:	f7fc fe3c 	bl	8007b60 <__errno>
 800aee8:	2321      	movs	r3, #33	; 0x21
 800aeea:	6003      	str	r3, [r0, #0]
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	4610      	mov	r0, r2
 800aef2:	4619      	mov	r1, r3
 800aef4:	f7f5 fcca 	bl	800088c <__aeabi_ddiv>
 800aef8:	ec41 0b18 	vmov	d8, r0, r1
 800aefc:	eeb0 0a48 	vmov.f32	s0, s16
 800af00:	eef0 0a68 	vmov.f32	s1, s17
 800af04:	ecbd 8b02 	vpop	{d8}
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	bf00      	nop
 800af0c:	200002a4 	.word	0x200002a4

0800af10 <__ieee754_atan2>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	ec57 6b11 	vmov	r6, r7, d1
 800af18:	4273      	negs	r3, r6
 800af1a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b0a0 <__ieee754_atan2+0x190>
 800af1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800af22:	4333      	orrs	r3, r6
 800af24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800af28:	4573      	cmp	r3, lr
 800af2a:	ec51 0b10 	vmov	r0, r1, d0
 800af2e:	ee11 8a10 	vmov	r8, s2
 800af32:	d80a      	bhi.n	800af4a <__ieee754_atan2+0x3a>
 800af34:	4244      	negs	r4, r0
 800af36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af3a:	4304      	orrs	r4, r0
 800af3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800af40:	4574      	cmp	r4, lr
 800af42:	ee10 9a10 	vmov	r9, s0
 800af46:	468c      	mov	ip, r1
 800af48:	d907      	bls.n	800af5a <__ieee754_atan2+0x4a>
 800af4a:	4632      	mov	r2, r6
 800af4c:	463b      	mov	r3, r7
 800af4e:	f7f5 f9bd 	bl	80002cc <__adddf3>
 800af52:	ec41 0b10 	vmov	d0, r0, r1
 800af56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800af5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af62:	4334      	orrs	r4, r6
 800af64:	d103      	bne.n	800af6e <__ieee754_atan2+0x5e>
 800af66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af6a:	f7ff bc61 	b.w	800a830 <atan>
 800af6e:	17bc      	asrs	r4, r7, #30
 800af70:	f004 0402 	and.w	r4, r4, #2
 800af74:	ea53 0909 	orrs.w	r9, r3, r9
 800af78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800af7c:	d107      	bne.n	800af8e <__ieee754_atan2+0x7e>
 800af7e:	2c02      	cmp	r4, #2
 800af80:	d060      	beq.n	800b044 <__ieee754_atan2+0x134>
 800af82:	2c03      	cmp	r4, #3
 800af84:	d1e5      	bne.n	800af52 <__ieee754_atan2+0x42>
 800af86:	a142      	add	r1, pc, #264	; (adr r1, 800b090 <__ieee754_atan2+0x180>)
 800af88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af8c:	e7e1      	b.n	800af52 <__ieee754_atan2+0x42>
 800af8e:	ea52 0808 	orrs.w	r8, r2, r8
 800af92:	d106      	bne.n	800afa2 <__ieee754_atan2+0x92>
 800af94:	f1bc 0f00 	cmp.w	ip, #0
 800af98:	da5f      	bge.n	800b05a <__ieee754_atan2+0x14a>
 800af9a:	a13f      	add	r1, pc, #252	; (adr r1, 800b098 <__ieee754_atan2+0x188>)
 800af9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa0:	e7d7      	b.n	800af52 <__ieee754_atan2+0x42>
 800afa2:	4572      	cmp	r2, lr
 800afa4:	d10f      	bne.n	800afc6 <__ieee754_atan2+0xb6>
 800afa6:	4293      	cmp	r3, r2
 800afa8:	f104 34ff 	add.w	r4, r4, #4294967295
 800afac:	d107      	bne.n	800afbe <__ieee754_atan2+0xae>
 800afae:	2c02      	cmp	r4, #2
 800afb0:	d84c      	bhi.n	800b04c <__ieee754_atan2+0x13c>
 800afb2:	4b35      	ldr	r3, [pc, #212]	; (800b088 <__ieee754_atan2+0x178>)
 800afb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800afb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800afbc:	e7c9      	b.n	800af52 <__ieee754_atan2+0x42>
 800afbe:	2c02      	cmp	r4, #2
 800afc0:	d848      	bhi.n	800b054 <__ieee754_atan2+0x144>
 800afc2:	4b32      	ldr	r3, [pc, #200]	; (800b08c <__ieee754_atan2+0x17c>)
 800afc4:	e7f6      	b.n	800afb4 <__ieee754_atan2+0xa4>
 800afc6:	4573      	cmp	r3, lr
 800afc8:	d0e4      	beq.n	800af94 <__ieee754_atan2+0x84>
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800afd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afd4:	da1e      	bge.n	800b014 <__ieee754_atan2+0x104>
 800afd6:	2f00      	cmp	r7, #0
 800afd8:	da01      	bge.n	800afde <__ieee754_atan2+0xce>
 800afda:	323c      	adds	r2, #60	; 0x3c
 800afdc:	db1e      	blt.n	800b01c <__ieee754_atan2+0x10c>
 800afde:	4632      	mov	r2, r6
 800afe0:	463b      	mov	r3, r7
 800afe2:	f7f5 fc53 	bl	800088c <__aeabi_ddiv>
 800afe6:	ec41 0b10 	vmov	d0, r0, r1
 800afea:	f7ff fe11 	bl	800ac10 <fabs>
 800afee:	f7ff fc1f 	bl	800a830 <atan>
 800aff2:	ec51 0b10 	vmov	r0, r1, d0
 800aff6:	2c01      	cmp	r4, #1
 800aff8:	d013      	beq.n	800b022 <__ieee754_atan2+0x112>
 800affa:	2c02      	cmp	r4, #2
 800affc:	d015      	beq.n	800b02a <__ieee754_atan2+0x11a>
 800affe:	2c00      	cmp	r4, #0
 800b000:	d0a7      	beq.n	800af52 <__ieee754_atan2+0x42>
 800b002:	a319      	add	r3, pc, #100	; (adr r3, 800b068 <__ieee754_atan2+0x158>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 f95e 	bl	80002c8 <__aeabi_dsub>
 800b00c:	a318      	add	r3, pc, #96	; (adr r3, 800b070 <__ieee754_atan2+0x160>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	e014      	b.n	800b03e <__ieee754_atan2+0x12e>
 800b014:	a118      	add	r1, pc, #96	; (adr r1, 800b078 <__ieee754_atan2+0x168>)
 800b016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b01a:	e7ec      	b.n	800aff6 <__ieee754_atan2+0xe6>
 800b01c:	2000      	movs	r0, #0
 800b01e:	2100      	movs	r1, #0
 800b020:	e7e9      	b.n	800aff6 <__ieee754_atan2+0xe6>
 800b022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b026:	4619      	mov	r1, r3
 800b028:	e793      	b.n	800af52 <__ieee754_atan2+0x42>
 800b02a:	a30f      	add	r3, pc, #60	; (adr r3, 800b068 <__ieee754_atan2+0x158>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f7f5 f94a 	bl	80002c8 <__aeabi_dsub>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	a10d      	add	r1, pc, #52	; (adr r1, 800b070 <__ieee754_atan2+0x160>)
 800b03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03e:	f7f5 f943 	bl	80002c8 <__aeabi_dsub>
 800b042:	e786      	b.n	800af52 <__ieee754_atan2+0x42>
 800b044:	a10a      	add	r1, pc, #40	; (adr r1, 800b070 <__ieee754_atan2+0x160>)
 800b046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b04a:	e782      	b.n	800af52 <__ieee754_atan2+0x42>
 800b04c:	a10c      	add	r1, pc, #48	; (adr r1, 800b080 <__ieee754_atan2+0x170>)
 800b04e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b052:	e77e      	b.n	800af52 <__ieee754_atan2+0x42>
 800b054:	2000      	movs	r0, #0
 800b056:	2100      	movs	r1, #0
 800b058:	e77b      	b.n	800af52 <__ieee754_atan2+0x42>
 800b05a:	a107      	add	r1, pc, #28	; (adr r1, 800b078 <__ieee754_atan2+0x168>)
 800b05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b060:	e777      	b.n	800af52 <__ieee754_atan2+0x42>
 800b062:	bf00      	nop
 800b064:	f3af 8000 	nop.w
 800b068:	33145c07 	.word	0x33145c07
 800b06c:	3ca1a626 	.word	0x3ca1a626
 800b070:	54442d18 	.word	0x54442d18
 800b074:	400921fb 	.word	0x400921fb
 800b078:	54442d18 	.word	0x54442d18
 800b07c:	3ff921fb 	.word	0x3ff921fb
 800b080:	54442d18 	.word	0x54442d18
 800b084:	3fe921fb 	.word	0x3fe921fb
 800b088:	0800d4a0 	.word	0x0800d4a0
 800b08c:	0800d4b8 	.word	0x0800d4b8
 800b090:	54442d18 	.word	0x54442d18
 800b094:	c00921fb 	.word	0xc00921fb
 800b098:	54442d18 	.word	0x54442d18
 800b09c:	bff921fb 	.word	0xbff921fb
 800b0a0:	7ff00000 	.word	0x7ff00000

0800b0a4 <__ieee754_fmod>:
 800b0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	ec53 2b11 	vmov	r2, r3, d1
 800b0ac:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b0b0:	ea5e 0402 	orrs.w	r4, lr, r2
 800b0b4:	ec51 0b10 	vmov	r0, r1, d0
 800b0b8:	ee11 7a10 	vmov	r7, s2
 800b0bc:	ee11 ca10 	vmov	ip, s2
 800b0c0:	461e      	mov	r6, r3
 800b0c2:	d00d      	beq.n	800b0e0 <__ieee754_fmod+0x3c>
 800b0c4:	4c7a      	ldr	r4, [pc, #488]	; (800b2b0 <__ieee754_fmod+0x20c>)
 800b0c6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b0ca:	45a0      	cmp	r8, r4
 800b0cc:	4689      	mov	r9, r1
 800b0ce:	dc07      	bgt.n	800b0e0 <__ieee754_fmod+0x3c>
 800b0d0:	4254      	negs	r4, r2
 800b0d2:	4d78      	ldr	r5, [pc, #480]	; (800b2b4 <__ieee754_fmod+0x210>)
 800b0d4:	4314      	orrs	r4, r2
 800b0d6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b0da:	42ac      	cmp	r4, r5
 800b0dc:	46ab      	mov	fp, r5
 800b0de:	d909      	bls.n	800b0f4 <__ieee754_fmod+0x50>
 800b0e0:	f7f5 faaa 	bl	8000638 <__aeabi_dmul>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	f7f5 fbd0 	bl	800088c <__aeabi_ddiv>
 800b0ec:	ec41 0b10 	vmov	d0, r0, r1
 800b0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f4:	45f0      	cmp	r8, lr
 800b0f6:	ee10 aa10 	vmov	sl, s0
 800b0fa:	ee10 4a10 	vmov	r4, s0
 800b0fe:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b102:	dc0a      	bgt.n	800b11a <__ieee754_fmod+0x76>
 800b104:	dbf2      	blt.n	800b0ec <__ieee754_fmod+0x48>
 800b106:	4290      	cmp	r0, r2
 800b108:	d3f0      	bcc.n	800b0ec <__ieee754_fmod+0x48>
 800b10a:	d106      	bne.n	800b11a <__ieee754_fmod+0x76>
 800b10c:	4a6a      	ldr	r2, [pc, #424]	; (800b2b8 <__ieee754_fmod+0x214>)
 800b10e:	0fed      	lsrs	r5, r5, #31
 800b110:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b114:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b118:	e7e8      	b.n	800b0ec <__ieee754_fmod+0x48>
 800b11a:	ea19 0f0b 	tst.w	r9, fp
 800b11e:	d14a      	bne.n	800b1b6 <__ieee754_fmod+0x112>
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	d13f      	bne.n	800b1a6 <__ieee754_fmod+0x102>
 800b126:	4965      	ldr	r1, [pc, #404]	; (800b2bc <__ieee754_fmod+0x218>)
 800b128:	4653      	mov	r3, sl
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dc38      	bgt.n	800b1a0 <__ieee754_fmod+0xfc>
 800b12e:	4b61      	ldr	r3, [pc, #388]	; (800b2b4 <__ieee754_fmod+0x210>)
 800b130:	4033      	ands	r3, r6
 800b132:	2b00      	cmp	r3, #0
 800b134:	d14f      	bne.n	800b1d6 <__ieee754_fmod+0x132>
 800b136:	f1be 0f00 	cmp.w	lr, #0
 800b13a:	d144      	bne.n	800b1c6 <__ieee754_fmod+0x122>
 800b13c:	4a5f      	ldr	r2, [pc, #380]	; (800b2bc <__ieee754_fmod+0x218>)
 800b13e:	463b      	mov	r3, r7
 800b140:	2b00      	cmp	r3, #0
 800b142:	dc3d      	bgt.n	800b1c0 <__ieee754_fmod+0x11c>
 800b144:	4b5e      	ldr	r3, [pc, #376]	; (800b2c0 <__ieee754_fmod+0x21c>)
 800b146:	4299      	cmp	r1, r3
 800b148:	db4a      	blt.n	800b1e0 <__ieee754_fmod+0x13c>
 800b14a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b14e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b152:	485b      	ldr	r0, [pc, #364]	; (800b2c0 <__ieee754_fmod+0x21c>)
 800b154:	4282      	cmp	r2, r0
 800b156:	db57      	blt.n	800b208 <__ieee754_fmod+0x164>
 800b158:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b15c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b160:	1a89      	subs	r1, r1, r2
 800b162:	1b98      	subs	r0, r3, r6
 800b164:	eba4 070c 	sub.w	r7, r4, ip
 800b168:	2900      	cmp	r1, #0
 800b16a:	d164      	bne.n	800b236 <__ieee754_fmod+0x192>
 800b16c:	4564      	cmp	r4, ip
 800b16e:	bf38      	it	cc
 800b170:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b174:	2800      	cmp	r0, #0
 800b176:	bfa4      	itt	ge
 800b178:	463c      	movge	r4, r7
 800b17a:	4603      	movge	r3, r0
 800b17c:	ea53 0104 	orrs.w	r1, r3, r4
 800b180:	d0c4      	beq.n	800b10c <__ieee754_fmod+0x68>
 800b182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b186:	db6b      	blt.n	800b260 <__ieee754_fmod+0x1bc>
 800b188:	494d      	ldr	r1, [pc, #308]	; (800b2c0 <__ieee754_fmod+0x21c>)
 800b18a:	428a      	cmp	r2, r1
 800b18c:	db6e      	blt.n	800b26c <__ieee754_fmod+0x1c8>
 800b18e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b192:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b196:	431d      	orrs	r5, r3
 800b198:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b19c:	4620      	mov	r0, r4
 800b19e:	e7a5      	b.n	800b0ec <__ieee754_fmod+0x48>
 800b1a0:	3901      	subs	r1, #1
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	e7c1      	b.n	800b12a <__ieee754_fmod+0x86>
 800b1a6:	4946      	ldr	r1, [pc, #280]	; (800b2c0 <__ieee754_fmod+0x21c>)
 800b1a8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	ddbe      	ble.n	800b12e <__ieee754_fmod+0x8a>
 800b1b0:	3901      	subs	r1, #1
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	e7fa      	b.n	800b1ac <__ieee754_fmod+0x108>
 800b1b6:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b1ba:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b1be:	e7b6      	b.n	800b12e <__ieee754_fmod+0x8a>
 800b1c0:	3a01      	subs	r2, #1
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	e7bc      	b.n	800b140 <__ieee754_fmod+0x9c>
 800b1c6:	4a3e      	ldr	r2, [pc, #248]	; (800b2c0 <__ieee754_fmod+0x21c>)
 800b1c8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	ddb9      	ble.n	800b144 <__ieee754_fmod+0xa0>
 800b1d0:	3a01      	subs	r2, #1
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	e7fa      	b.n	800b1cc <__ieee754_fmod+0x128>
 800b1d6:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b1da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b1de:	e7b1      	b.n	800b144 <__ieee754_fmod+0xa0>
 800b1e0:	1a5c      	subs	r4, r3, r1
 800b1e2:	2c1f      	cmp	r4, #31
 800b1e4:	dc0a      	bgt.n	800b1fc <__ieee754_fmod+0x158>
 800b1e6:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b1ea:	fa08 f804 	lsl.w	r8, r8, r4
 800b1ee:	fa2a f303 	lsr.w	r3, sl, r3
 800b1f2:	ea43 0308 	orr.w	r3, r3, r8
 800b1f6:	fa0a f404 	lsl.w	r4, sl, r4
 800b1fa:	e7aa      	b.n	800b152 <__ieee754_fmod+0xae>
 800b1fc:	4b31      	ldr	r3, [pc, #196]	; (800b2c4 <__ieee754_fmod+0x220>)
 800b1fe:	1a5b      	subs	r3, r3, r1
 800b200:	fa0a f303 	lsl.w	r3, sl, r3
 800b204:	2400      	movs	r4, #0
 800b206:	e7a4      	b.n	800b152 <__ieee754_fmod+0xae>
 800b208:	eba0 0c02 	sub.w	ip, r0, r2
 800b20c:	f1bc 0f1f 	cmp.w	ip, #31
 800b210:	dc0a      	bgt.n	800b228 <__ieee754_fmod+0x184>
 800b212:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b216:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b21a:	fa27 f606 	lsr.w	r6, r7, r6
 800b21e:	ea46 060e 	orr.w	r6, r6, lr
 800b222:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b226:	e79b      	b.n	800b160 <__ieee754_fmod+0xbc>
 800b228:	4e26      	ldr	r6, [pc, #152]	; (800b2c4 <__ieee754_fmod+0x220>)
 800b22a:	1ab6      	subs	r6, r6, r2
 800b22c:	fa07 f606 	lsl.w	r6, r7, r6
 800b230:	f04f 0c00 	mov.w	ip, #0
 800b234:	e794      	b.n	800b160 <__ieee754_fmod+0xbc>
 800b236:	4564      	cmp	r4, ip
 800b238:	bf38      	it	cc
 800b23a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b23e:	2800      	cmp	r0, #0
 800b240:	da05      	bge.n	800b24e <__ieee754_fmod+0x1aa>
 800b242:	0fe0      	lsrs	r0, r4, #31
 800b244:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b248:	0064      	lsls	r4, r4, #1
 800b24a:	3901      	subs	r1, #1
 800b24c:	e789      	b.n	800b162 <__ieee754_fmod+0xbe>
 800b24e:	ea50 0307 	orrs.w	r3, r0, r7
 800b252:	f43f af5b 	beq.w	800b10c <__ieee754_fmod+0x68>
 800b256:	0ffb      	lsrs	r3, r7, #31
 800b258:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b25c:	007c      	lsls	r4, r7, #1
 800b25e:	e7f4      	b.n	800b24a <__ieee754_fmod+0x1a6>
 800b260:	0fe1      	lsrs	r1, r4, #31
 800b262:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b266:	0064      	lsls	r4, r4, #1
 800b268:	3a01      	subs	r2, #1
 800b26a:	e78a      	b.n	800b182 <__ieee754_fmod+0xde>
 800b26c:	1a89      	subs	r1, r1, r2
 800b26e:	2914      	cmp	r1, #20
 800b270:	dc0a      	bgt.n	800b288 <__ieee754_fmod+0x1e4>
 800b272:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b276:	fa03 f202 	lsl.w	r2, r3, r2
 800b27a:	40cc      	lsrs	r4, r1
 800b27c:	4322      	orrs	r2, r4
 800b27e:	410b      	asrs	r3, r1
 800b280:	ea43 0105 	orr.w	r1, r3, r5
 800b284:	4610      	mov	r0, r2
 800b286:	e731      	b.n	800b0ec <__ieee754_fmod+0x48>
 800b288:	291f      	cmp	r1, #31
 800b28a:	dc07      	bgt.n	800b29c <__ieee754_fmod+0x1f8>
 800b28c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b290:	40cc      	lsrs	r4, r1
 800b292:	fa03 f202 	lsl.w	r2, r3, r2
 800b296:	4322      	orrs	r2, r4
 800b298:	462b      	mov	r3, r5
 800b29a:	e7f1      	b.n	800b280 <__ieee754_fmod+0x1dc>
 800b29c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b2a0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2a4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b2a8:	32e2      	adds	r2, #226	; 0xe2
 800b2aa:	fa43 f202 	asr.w	r2, r3, r2
 800b2ae:	e7f3      	b.n	800b298 <__ieee754_fmod+0x1f4>
 800b2b0:	7fefffff 	.word	0x7fefffff
 800b2b4:	7ff00000 	.word	0x7ff00000
 800b2b8:	0800d4d0 	.word	0x0800d4d0
 800b2bc:	fffffbed 	.word	0xfffffbed
 800b2c0:	fffffc02 	.word	0xfffffc02
 800b2c4:	fffffbe2 	.word	0xfffffbe2

0800b2c8 <__ieee754_pow>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	ed2d 8b06 	vpush	{d8-d10}
 800b2d0:	b08d      	sub	sp, #52	; 0x34
 800b2d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b2d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b2da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b2de:	ea56 0100 	orrs.w	r1, r6, r0
 800b2e2:	ec53 2b10 	vmov	r2, r3, d0
 800b2e6:	f000 84d1 	beq.w	800bc8c <__ieee754_pow+0x9c4>
 800b2ea:	497f      	ldr	r1, [pc, #508]	; (800b4e8 <__ieee754_pow+0x220>)
 800b2ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b2f0:	428c      	cmp	r4, r1
 800b2f2:	ee10 8a10 	vmov	r8, s0
 800b2f6:	4699      	mov	r9, r3
 800b2f8:	dc09      	bgt.n	800b30e <__ieee754_pow+0x46>
 800b2fa:	d103      	bne.n	800b304 <__ieee754_pow+0x3c>
 800b2fc:	b97a      	cbnz	r2, 800b31e <__ieee754_pow+0x56>
 800b2fe:	42a6      	cmp	r6, r4
 800b300:	dd02      	ble.n	800b308 <__ieee754_pow+0x40>
 800b302:	e00c      	b.n	800b31e <__ieee754_pow+0x56>
 800b304:	428e      	cmp	r6, r1
 800b306:	dc02      	bgt.n	800b30e <__ieee754_pow+0x46>
 800b308:	428e      	cmp	r6, r1
 800b30a:	d110      	bne.n	800b32e <__ieee754_pow+0x66>
 800b30c:	b178      	cbz	r0, 800b32e <__ieee754_pow+0x66>
 800b30e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b312:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b316:	ea54 0308 	orrs.w	r3, r4, r8
 800b31a:	f000 84b7 	beq.w	800bc8c <__ieee754_pow+0x9c4>
 800b31e:	4873      	ldr	r0, [pc, #460]	; (800b4ec <__ieee754_pow+0x224>)
 800b320:	b00d      	add	sp, #52	; 0x34
 800b322:	ecbd 8b06 	vpop	{d8-d10}
 800b326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	f001 bd05 	b.w	800cd38 <nan>
 800b32e:	f1b9 0f00 	cmp.w	r9, #0
 800b332:	da36      	bge.n	800b3a2 <__ieee754_pow+0xda>
 800b334:	496e      	ldr	r1, [pc, #440]	; (800b4f0 <__ieee754_pow+0x228>)
 800b336:	428e      	cmp	r6, r1
 800b338:	dc51      	bgt.n	800b3de <__ieee754_pow+0x116>
 800b33a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b33e:	428e      	cmp	r6, r1
 800b340:	f340 84af 	ble.w	800bca2 <__ieee754_pow+0x9da>
 800b344:	1531      	asrs	r1, r6, #20
 800b346:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b34a:	2914      	cmp	r1, #20
 800b34c:	dd0f      	ble.n	800b36e <__ieee754_pow+0xa6>
 800b34e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b352:	fa20 fc01 	lsr.w	ip, r0, r1
 800b356:	fa0c f101 	lsl.w	r1, ip, r1
 800b35a:	4281      	cmp	r1, r0
 800b35c:	f040 84a1 	bne.w	800bca2 <__ieee754_pow+0x9da>
 800b360:	f00c 0c01 	and.w	ip, ip, #1
 800b364:	f1cc 0102 	rsb	r1, ip, #2
 800b368:	9100      	str	r1, [sp, #0]
 800b36a:	b180      	cbz	r0, 800b38e <__ieee754_pow+0xc6>
 800b36c:	e059      	b.n	800b422 <__ieee754_pow+0x15a>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d155      	bne.n	800b41e <__ieee754_pow+0x156>
 800b372:	f1c1 0114 	rsb	r1, r1, #20
 800b376:	fa46 fc01 	asr.w	ip, r6, r1
 800b37a:	fa0c f101 	lsl.w	r1, ip, r1
 800b37e:	42b1      	cmp	r1, r6
 800b380:	f040 848c 	bne.w	800bc9c <__ieee754_pow+0x9d4>
 800b384:	f00c 0c01 	and.w	ip, ip, #1
 800b388:	f1cc 0102 	rsb	r1, ip, #2
 800b38c:	9100      	str	r1, [sp, #0]
 800b38e:	4959      	ldr	r1, [pc, #356]	; (800b4f4 <__ieee754_pow+0x22c>)
 800b390:	428e      	cmp	r6, r1
 800b392:	d12d      	bne.n	800b3f0 <__ieee754_pow+0x128>
 800b394:	2f00      	cmp	r7, #0
 800b396:	da79      	bge.n	800b48c <__ieee754_pow+0x1c4>
 800b398:	4956      	ldr	r1, [pc, #344]	; (800b4f4 <__ieee754_pow+0x22c>)
 800b39a:	2000      	movs	r0, #0
 800b39c:	f7f5 fa76 	bl	800088c <__aeabi_ddiv>
 800b3a0:	e016      	b.n	800b3d0 <__ieee754_pow+0x108>
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	9100      	str	r1, [sp, #0]
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d13b      	bne.n	800b422 <__ieee754_pow+0x15a>
 800b3aa:	494f      	ldr	r1, [pc, #316]	; (800b4e8 <__ieee754_pow+0x220>)
 800b3ac:	428e      	cmp	r6, r1
 800b3ae:	d1ee      	bne.n	800b38e <__ieee754_pow+0xc6>
 800b3b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b3b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b3b8:	ea53 0308 	orrs.w	r3, r3, r8
 800b3bc:	f000 8466 	beq.w	800bc8c <__ieee754_pow+0x9c4>
 800b3c0:	4b4d      	ldr	r3, [pc, #308]	; (800b4f8 <__ieee754_pow+0x230>)
 800b3c2:	429c      	cmp	r4, r3
 800b3c4:	dd0d      	ble.n	800b3e2 <__ieee754_pow+0x11a>
 800b3c6:	2f00      	cmp	r7, #0
 800b3c8:	f280 8464 	bge.w	800bc94 <__ieee754_pow+0x9cc>
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	ec41 0b10 	vmov	d0, r0, r1
 800b3d4:	b00d      	add	sp, #52	; 0x34
 800b3d6:	ecbd 8b06 	vpop	{d8-d10}
 800b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3de:	2102      	movs	r1, #2
 800b3e0:	e7e0      	b.n	800b3a4 <__ieee754_pow+0xdc>
 800b3e2:	2f00      	cmp	r7, #0
 800b3e4:	daf2      	bge.n	800b3cc <__ieee754_pow+0x104>
 800b3e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b3ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3ee:	e7ef      	b.n	800b3d0 <__ieee754_pow+0x108>
 800b3f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b3f4:	d104      	bne.n	800b400 <__ieee754_pow+0x138>
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	f7f5 f91d 	bl	8000638 <__aeabi_dmul>
 800b3fe:	e7e7      	b.n	800b3d0 <__ieee754_pow+0x108>
 800b400:	493e      	ldr	r1, [pc, #248]	; (800b4fc <__ieee754_pow+0x234>)
 800b402:	428f      	cmp	r7, r1
 800b404:	d10d      	bne.n	800b422 <__ieee754_pow+0x15a>
 800b406:	f1b9 0f00 	cmp.w	r9, #0
 800b40a:	db0a      	blt.n	800b422 <__ieee754_pow+0x15a>
 800b40c:	ec43 2b10 	vmov	d0, r2, r3
 800b410:	b00d      	add	sp, #52	; 0x34
 800b412:	ecbd 8b06 	vpop	{d8-d10}
 800b416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41a:	f000 be83 	b.w	800c124 <__ieee754_sqrt>
 800b41e:	2100      	movs	r1, #0
 800b420:	9100      	str	r1, [sp, #0]
 800b422:	ec43 2b10 	vmov	d0, r2, r3
 800b426:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b42a:	f7ff fbf1 	bl	800ac10 <fabs>
 800b42e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b432:	ec51 0b10 	vmov	r0, r1, d0
 800b436:	f1b8 0f00 	cmp.w	r8, #0
 800b43a:	d12a      	bne.n	800b492 <__ieee754_pow+0x1ca>
 800b43c:	b12c      	cbz	r4, 800b44a <__ieee754_pow+0x182>
 800b43e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b4f4 <__ieee754_pow+0x22c>
 800b442:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b446:	45e6      	cmp	lr, ip
 800b448:	d123      	bne.n	800b492 <__ieee754_pow+0x1ca>
 800b44a:	2f00      	cmp	r7, #0
 800b44c:	da05      	bge.n	800b45a <__ieee754_pow+0x192>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	2000      	movs	r0, #0
 800b454:	4927      	ldr	r1, [pc, #156]	; (800b4f4 <__ieee754_pow+0x22c>)
 800b456:	f7f5 fa19 	bl	800088c <__aeabi_ddiv>
 800b45a:	f1b9 0f00 	cmp.w	r9, #0
 800b45e:	dab7      	bge.n	800b3d0 <__ieee754_pow+0x108>
 800b460:	9b00      	ldr	r3, [sp, #0]
 800b462:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b466:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b46a:	4323      	orrs	r3, r4
 800b46c:	d108      	bne.n	800b480 <__ieee754_pow+0x1b8>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4610      	mov	r0, r2
 800b474:	4619      	mov	r1, r3
 800b476:	f7f4 ff27 	bl	80002c8 <__aeabi_dsub>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	e78d      	b.n	800b39c <__ieee754_pow+0xd4>
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d1a4      	bne.n	800b3d0 <__ieee754_pow+0x108>
 800b486:	4602      	mov	r2, r0
 800b488:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b48c:	4610      	mov	r0, r2
 800b48e:	4619      	mov	r1, r3
 800b490:	e79e      	b.n	800b3d0 <__ieee754_pow+0x108>
 800b492:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b496:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b49a:	950a      	str	r5, [sp, #40]	; 0x28
 800b49c:	9d00      	ldr	r5, [sp, #0]
 800b49e:	46ac      	mov	ip, r5
 800b4a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b4a2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b4a6:	d0e4      	beq.n	800b472 <__ieee754_pow+0x1aa>
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <__ieee754_pow+0x238>)
 800b4aa:	429e      	cmp	r6, r3
 800b4ac:	f340 80fc 	ble.w	800b6a8 <__ieee754_pow+0x3e0>
 800b4b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b4b4:	429e      	cmp	r6, r3
 800b4b6:	4b10      	ldr	r3, [pc, #64]	; (800b4f8 <__ieee754_pow+0x230>)
 800b4b8:	dd07      	ble.n	800b4ca <__ieee754_pow+0x202>
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	dc0a      	bgt.n	800b4d4 <__ieee754_pow+0x20c>
 800b4be:	2f00      	cmp	r7, #0
 800b4c0:	da84      	bge.n	800b3cc <__ieee754_pow+0x104>
 800b4c2:	a307      	add	r3, pc, #28	; (adr r3, 800b4e0 <__ieee754_pow+0x218>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	e795      	b.n	800b3f6 <__ieee754_pow+0x12e>
 800b4ca:	429c      	cmp	r4, r3
 800b4cc:	dbf7      	blt.n	800b4be <__ieee754_pow+0x1f6>
 800b4ce:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <__ieee754_pow+0x22c>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	dd17      	ble.n	800b504 <__ieee754_pow+0x23c>
 800b4d4:	2f00      	cmp	r7, #0
 800b4d6:	dcf4      	bgt.n	800b4c2 <__ieee754_pow+0x1fa>
 800b4d8:	e778      	b.n	800b3cc <__ieee754_pow+0x104>
 800b4da:	bf00      	nop
 800b4dc:	f3af 8000 	nop.w
 800b4e0:	8800759c 	.word	0x8800759c
 800b4e4:	7e37e43c 	.word	0x7e37e43c
 800b4e8:	7ff00000 	.word	0x7ff00000
 800b4ec:	0800d450 	.word	0x0800d450
 800b4f0:	433fffff 	.word	0x433fffff
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	3fefffff 	.word	0x3fefffff
 800b4fc:	3fe00000 	.word	0x3fe00000
 800b500:	41e00000 	.word	0x41e00000
 800b504:	4b64      	ldr	r3, [pc, #400]	; (800b698 <__ieee754_pow+0x3d0>)
 800b506:	2200      	movs	r2, #0
 800b508:	f7f4 fede 	bl	80002c8 <__aeabi_dsub>
 800b50c:	a356      	add	r3, pc, #344	; (adr r3, 800b668 <__ieee754_pow+0x3a0>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	4604      	mov	r4, r0
 800b514:	460d      	mov	r5, r1
 800b516:	f7f5 f88f 	bl	8000638 <__aeabi_dmul>
 800b51a:	a355      	add	r3, pc, #340	; (adr r3, 800b670 <__ieee754_pow+0x3a8>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	4606      	mov	r6, r0
 800b522:	460f      	mov	r7, r1
 800b524:	4620      	mov	r0, r4
 800b526:	4629      	mov	r1, r5
 800b528:	f7f5 f886 	bl	8000638 <__aeabi_dmul>
 800b52c:	4b5b      	ldr	r3, [pc, #364]	; (800b69c <__ieee754_pow+0x3d4>)
 800b52e:	4682      	mov	sl, r0
 800b530:	468b      	mov	fp, r1
 800b532:	2200      	movs	r2, #0
 800b534:	4620      	mov	r0, r4
 800b536:	4629      	mov	r1, r5
 800b538:	f7f5 f87e 	bl	8000638 <__aeabi_dmul>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	a14d      	add	r1, pc, #308	; (adr r1, 800b678 <__ieee754_pow+0x3b0>)
 800b542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b546:	f7f4 febf 	bl	80002c8 <__aeabi_dsub>
 800b54a:	4622      	mov	r2, r4
 800b54c:	462b      	mov	r3, r5
 800b54e:	f7f5 f873 	bl	8000638 <__aeabi_dmul>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	2000      	movs	r0, #0
 800b558:	4951      	ldr	r1, [pc, #324]	; (800b6a0 <__ieee754_pow+0x3d8>)
 800b55a:	f7f4 feb5 	bl	80002c8 <__aeabi_dsub>
 800b55e:	4622      	mov	r2, r4
 800b560:	4680      	mov	r8, r0
 800b562:	4689      	mov	r9, r1
 800b564:	462b      	mov	r3, r5
 800b566:	4620      	mov	r0, r4
 800b568:	4629      	mov	r1, r5
 800b56a:	f7f5 f865 	bl	8000638 <__aeabi_dmul>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	4640      	mov	r0, r8
 800b574:	4649      	mov	r1, r9
 800b576:	f7f5 f85f 	bl	8000638 <__aeabi_dmul>
 800b57a:	a341      	add	r3, pc, #260	; (adr r3, 800b680 <__ieee754_pow+0x3b8>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f5 f85a 	bl	8000638 <__aeabi_dmul>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4650      	mov	r0, sl
 800b58a:	4659      	mov	r1, fp
 800b58c:	f7f4 fe9c 	bl	80002c8 <__aeabi_dsub>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4680      	mov	r8, r0
 800b596:	4689      	mov	r9, r1
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f4 fe96 	bl	80002cc <__adddf3>
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	460d      	mov	r5, r1
 800b5aa:	f7f4 fe8d 	bl	80002c8 <__aeabi_dsub>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f4 fe87 	bl	80002c8 <__aeabi_dsub>
 800b5ba:	9b00      	ldr	r3, [sp, #0]
 800b5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	4682      	mov	sl, r0
 800b5c4:	468b      	mov	fp, r1
 800b5c6:	f040 81f1 	bne.w	800b9ac <__ieee754_pow+0x6e4>
 800b5ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b688 <__ieee754_pow+0x3c0>
 800b5ce:	eeb0 8a47 	vmov.f32	s16, s14
 800b5d2:	eef0 8a67 	vmov.f32	s17, s15
 800b5d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5da:	2600      	movs	r6, #0
 800b5dc:	4632      	mov	r2, r6
 800b5de:	463b      	mov	r3, r7
 800b5e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5e4:	f7f4 fe70 	bl	80002c8 <__aeabi_dsub>
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	462b      	mov	r3, r5
 800b5ec:	f7f5 f824 	bl	8000638 <__aeabi_dmul>
 800b5f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	4689      	mov	r9, r1
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	4659      	mov	r1, fp
 800b5fc:	f7f5 f81c 	bl	8000638 <__aeabi_dmul>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4640      	mov	r0, r8
 800b606:	4649      	mov	r1, r9
 800b608:	f7f4 fe60 	bl	80002cc <__adddf3>
 800b60c:	4632      	mov	r2, r6
 800b60e:	463b      	mov	r3, r7
 800b610:	4680      	mov	r8, r0
 800b612:	4689      	mov	r9, r1
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f5 f80e 	bl	8000638 <__aeabi_dmul>
 800b61c:	460b      	mov	r3, r1
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	4602      	mov	r2, r0
 800b624:	4649      	mov	r1, r9
 800b626:	4640      	mov	r0, r8
 800b628:	f7f4 fe50 	bl	80002cc <__adddf3>
 800b62c:	4b1d      	ldr	r3, [pc, #116]	; (800b6a4 <__ieee754_pow+0x3dc>)
 800b62e:	4299      	cmp	r1, r3
 800b630:	ec45 4b19 	vmov	d9, r4, r5
 800b634:	4606      	mov	r6, r0
 800b636:	460f      	mov	r7, r1
 800b638:	468b      	mov	fp, r1
 800b63a:	f340 82fe 	ble.w	800bc3a <__ieee754_pow+0x972>
 800b63e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b642:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b646:	4303      	orrs	r3, r0
 800b648:	f000 81f0 	beq.w	800ba2c <__ieee754_pow+0x764>
 800b64c:	a310      	add	r3, pc, #64	; (adr r3, 800b690 <__ieee754_pow+0x3c8>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	ec51 0b18 	vmov	r0, r1, d8
 800b656:	f7f4 ffef 	bl	8000638 <__aeabi_dmul>
 800b65a:	a30d      	add	r3, pc, #52	; (adr r3, 800b690 <__ieee754_pow+0x3c8>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	e6cb      	b.n	800b3fa <__ieee754_pow+0x132>
 800b662:	bf00      	nop
 800b664:	f3af 8000 	nop.w
 800b668:	60000000 	.word	0x60000000
 800b66c:	3ff71547 	.word	0x3ff71547
 800b670:	f85ddf44 	.word	0xf85ddf44
 800b674:	3e54ae0b 	.word	0x3e54ae0b
 800b678:	55555555 	.word	0x55555555
 800b67c:	3fd55555 	.word	0x3fd55555
 800b680:	652b82fe 	.word	0x652b82fe
 800b684:	3ff71547 	.word	0x3ff71547
 800b688:	00000000 	.word	0x00000000
 800b68c:	bff00000 	.word	0xbff00000
 800b690:	8800759c 	.word	0x8800759c
 800b694:	7e37e43c 	.word	0x7e37e43c
 800b698:	3ff00000 	.word	0x3ff00000
 800b69c:	3fd00000 	.word	0x3fd00000
 800b6a0:	3fe00000 	.word	0x3fe00000
 800b6a4:	408fffff 	.word	0x408fffff
 800b6a8:	4bd7      	ldr	r3, [pc, #860]	; (800ba08 <__ieee754_pow+0x740>)
 800b6aa:	ea03 0309 	and.w	r3, r3, r9
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	b92b      	cbnz	r3, 800b6be <__ieee754_pow+0x3f6>
 800b6b2:	4bd6      	ldr	r3, [pc, #856]	; (800ba0c <__ieee754_pow+0x744>)
 800b6b4:	f7f4 ffc0 	bl	8000638 <__aeabi_dmul>
 800b6b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b6bc:	460c      	mov	r4, r1
 800b6be:	1523      	asrs	r3, r4, #20
 800b6c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b6c4:	4413      	add	r3, r2
 800b6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c8:	4bd1      	ldr	r3, [pc, #836]	; (800ba10 <__ieee754_pow+0x748>)
 800b6ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b6ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b6d2:	429c      	cmp	r4, r3
 800b6d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b6d8:	dd08      	ble.n	800b6ec <__ieee754_pow+0x424>
 800b6da:	4bce      	ldr	r3, [pc, #824]	; (800ba14 <__ieee754_pow+0x74c>)
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	f340 8163 	ble.w	800b9a8 <__ieee754_pow+0x6e0>
 800b6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b6ec:	2400      	movs	r4, #0
 800b6ee:	00e3      	lsls	r3, r4, #3
 800b6f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6f2:	4bc9      	ldr	r3, [pc, #804]	; (800ba18 <__ieee754_pow+0x750>)
 800b6f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6f8:	ed93 7b00 	vldr	d7, [r3]
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	ec53 2b17 	vmov	r2, r3, d7
 800b702:	eeb0 8a47 	vmov.f32	s16, s14
 800b706:	eef0 8a67 	vmov.f32	s17, s15
 800b70a:	4682      	mov	sl, r0
 800b70c:	f7f4 fddc 	bl	80002c8 <__aeabi_dsub>
 800b710:	4652      	mov	r2, sl
 800b712:	4606      	mov	r6, r0
 800b714:	460f      	mov	r7, r1
 800b716:	462b      	mov	r3, r5
 800b718:	ec51 0b18 	vmov	r0, r1, d8
 800b71c:	f7f4 fdd6 	bl	80002cc <__adddf3>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	2000      	movs	r0, #0
 800b726:	49bd      	ldr	r1, [pc, #756]	; (800ba1c <__ieee754_pow+0x754>)
 800b728:	f7f5 f8b0 	bl	800088c <__aeabi_ddiv>
 800b72c:	ec41 0b19 	vmov	d9, r0, r1
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4630      	mov	r0, r6
 800b736:	4639      	mov	r1, r7
 800b738:	f7f4 ff7e 	bl	8000638 <__aeabi_dmul>
 800b73c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b744:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b748:	2300      	movs	r3, #0
 800b74a:	9304      	str	r3, [sp, #16]
 800b74c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b750:	46ab      	mov	fp, r5
 800b752:	106d      	asrs	r5, r5, #1
 800b754:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b758:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b75c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b760:	2200      	movs	r2, #0
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	4614      	mov	r4, r2
 800b768:	461d      	mov	r5, r3
 800b76a:	f7f4 ff65 	bl	8000638 <__aeabi_dmul>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4630      	mov	r0, r6
 800b774:	4639      	mov	r1, r7
 800b776:	f7f4 fda7 	bl	80002c8 <__aeabi_dsub>
 800b77a:	ec53 2b18 	vmov	r2, r3, d8
 800b77e:	4606      	mov	r6, r0
 800b780:	460f      	mov	r7, r1
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f4 fd9f 	bl	80002c8 <__aeabi_dsub>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4650      	mov	r0, sl
 800b790:	4659      	mov	r1, fp
 800b792:	f7f4 fd99 	bl	80002c8 <__aeabi_dsub>
 800b796:	4642      	mov	r2, r8
 800b798:	464b      	mov	r3, r9
 800b79a:	f7f4 ff4d 	bl	8000638 <__aeabi_dmul>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f4 fd8f 	bl	80002c8 <__aeabi_dsub>
 800b7aa:	ec53 2b19 	vmov	r2, r3, d9
 800b7ae:	f7f4 ff43 	bl	8000638 <__aeabi_dmul>
 800b7b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7b6:	ec41 0b18 	vmov	d8, r0, r1
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	4619      	mov	r1, r3
 800b7be:	f7f4 ff3b 	bl	8000638 <__aeabi_dmul>
 800b7c2:	a37d      	add	r3, pc, #500	; (adr r3, 800b9b8 <__ieee754_pow+0x6f0>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	f7f4 ff34 	bl	8000638 <__aeabi_dmul>
 800b7d0:	a37b      	add	r3, pc, #492	; (adr r3, 800b9c0 <__ieee754_pow+0x6f8>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fd79 	bl	80002cc <__adddf3>
 800b7da:	4622      	mov	r2, r4
 800b7dc:	462b      	mov	r3, r5
 800b7de:	f7f4 ff2b 	bl	8000638 <__aeabi_dmul>
 800b7e2:	a379      	add	r3, pc, #484	; (adr r3, 800b9c8 <__ieee754_pow+0x700>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fd70 	bl	80002cc <__adddf3>
 800b7ec:	4622      	mov	r2, r4
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	f7f4 ff22 	bl	8000638 <__aeabi_dmul>
 800b7f4:	a376      	add	r3, pc, #472	; (adr r3, 800b9d0 <__ieee754_pow+0x708>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fd67 	bl	80002cc <__adddf3>
 800b7fe:	4622      	mov	r2, r4
 800b800:	462b      	mov	r3, r5
 800b802:	f7f4 ff19 	bl	8000638 <__aeabi_dmul>
 800b806:	a374      	add	r3, pc, #464	; (adr r3, 800b9d8 <__ieee754_pow+0x710>)
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f7f4 fd5e 	bl	80002cc <__adddf3>
 800b810:	4622      	mov	r2, r4
 800b812:	462b      	mov	r3, r5
 800b814:	f7f4 ff10 	bl	8000638 <__aeabi_dmul>
 800b818:	a371      	add	r3, pc, #452	; (adr r3, 800b9e0 <__ieee754_pow+0x718>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	f7f4 fd55 	bl	80002cc <__adddf3>
 800b822:	4622      	mov	r2, r4
 800b824:	4606      	mov	r6, r0
 800b826:	460f      	mov	r7, r1
 800b828:	462b      	mov	r3, r5
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f4 ff03 	bl	8000638 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4630      	mov	r0, r6
 800b838:	4639      	mov	r1, r7
 800b83a:	f7f4 fefd 	bl	8000638 <__aeabi_dmul>
 800b83e:	4642      	mov	r2, r8
 800b840:	4604      	mov	r4, r0
 800b842:	460d      	mov	r5, r1
 800b844:	464b      	mov	r3, r9
 800b846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b84a:	f7f4 fd3f 	bl	80002cc <__adddf3>
 800b84e:	ec53 2b18 	vmov	r2, r3, d8
 800b852:	f7f4 fef1 	bl	8000638 <__aeabi_dmul>
 800b856:	4622      	mov	r2, r4
 800b858:	462b      	mov	r3, r5
 800b85a:	f7f4 fd37 	bl	80002cc <__adddf3>
 800b85e:	4642      	mov	r2, r8
 800b860:	4682      	mov	sl, r0
 800b862:	468b      	mov	fp, r1
 800b864:	464b      	mov	r3, r9
 800b866:	4640      	mov	r0, r8
 800b868:	4649      	mov	r1, r9
 800b86a:	f7f4 fee5 	bl	8000638 <__aeabi_dmul>
 800b86e:	4b6c      	ldr	r3, [pc, #432]	; (800ba20 <__ieee754_pow+0x758>)
 800b870:	2200      	movs	r2, #0
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	f7f4 fd29 	bl	80002cc <__adddf3>
 800b87a:	4652      	mov	r2, sl
 800b87c:	465b      	mov	r3, fp
 800b87e:	f7f4 fd25 	bl	80002cc <__adddf3>
 800b882:	9c04      	ldr	r4, [sp, #16]
 800b884:	460d      	mov	r5, r1
 800b886:	4622      	mov	r2, r4
 800b888:	460b      	mov	r3, r1
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f7f4 fed3 	bl	8000638 <__aeabi_dmul>
 800b892:	4b63      	ldr	r3, [pc, #396]	; (800ba20 <__ieee754_pow+0x758>)
 800b894:	4680      	mov	r8, r0
 800b896:	4689      	mov	r9, r1
 800b898:	2200      	movs	r2, #0
 800b89a:	4620      	mov	r0, r4
 800b89c:	4629      	mov	r1, r5
 800b89e:	f7f4 fd13 	bl	80002c8 <__aeabi_dsub>
 800b8a2:	4632      	mov	r2, r6
 800b8a4:	463b      	mov	r3, r7
 800b8a6:	f7f4 fd0f 	bl	80002c8 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	f7f4 fd09 	bl	80002c8 <__aeabi_dsub>
 800b8b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8ba:	f7f4 febd 	bl	8000638 <__aeabi_dmul>
 800b8be:	4622      	mov	r2, r4
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	460f      	mov	r7, r1
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	ec51 0b18 	vmov	r0, r1, d8
 800b8ca:	f7f4 feb5 	bl	8000638 <__aeabi_dmul>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fcf9 	bl	80002cc <__adddf3>
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460f      	mov	r7, r1
 800b8de:	4602      	mov	r2, r0
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	f7f4 fcf1 	bl	80002cc <__adddf3>
 800b8ea:	9c04      	ldr	r4, [sp, #16]
 800b8ec:	a33e      	add	r3, pc, #248	; (adr r3, 800b9e8 <__ieee754_pow+0x720>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	f7f4 fe9f 	bl	8000638 <__aeabi_dmul>
 800b8fa:	4642      	mov	r2, r8
 800b8fc:	ec41 0b18 	vmov	d8, r0, r1
 800b900:	464b      	mov	r3, r9
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f7f4 fcdf 	bl	80002c8 <__aeabi_dsub>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	4630      	mov	r0, r6
 800b910:	4639      	mov	r1, r7
 800b912:	f7f4 fcd9 	bl	80002c8 <__aeabi_dsub>
 800b916:	a336      	add	r3, pc, #216	; (adr r3, 800b9f0 <__ieee754_pow+0x728>)
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f7f4 fe8c 	bl	8000638 <__aeabi_dmul>
 800b920:	a335      	add	r3, pc, #212	; (adr r3, 800b9f8 <__ieee754_pow+0x730>)
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	4606      	mov	r6, r0
 800b928:	460f      	mov	r7, r1
 800b92a:	4620      	mov	r0, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f4 fe83 	bl	8000638 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 fcc7 	bl	80002cc <__adddf3>
 800b93e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b940:	4b38      	ldr	r3, [pc, #224]	; (800ba24 <__ieee754_pow+0x75c>)
 800b942:	4413      	add	r3, r2
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fcc0 	bl	80002cc <__adddf3>
 800b94c:	4682      	mov	sl, r0
 800b94e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b950:	468b      	mov	fp, r1
 800b952:	f7f4 fe07 	bl	8000564 <__aeabi_i2d>
 800b956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b958:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <__ieee754_pow+0x760>)
 800b95a:	4413      	add	r3, r2
 800b95c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b960:	4606      	mov	r6, r0
 800b962:	460f      	mov	r7, r1
 800b964:	4652      	mov	r2, sl
 800b966:	465b      	mov	r3, fp
 800b968:	ec51 0b18 	vmov	r0, r1, d8
 800b96c:	f7f4 fcae 	bl	80002cc <__adddf3>
 800b970:	4642      	mov	r2, r8
 800b972:	464b      	mov	r3, r9
 800b974:	f7f4 fcaa 	bl	80002cc <__adddf3>
 800b978:	4632      	mov	r2, r6
 800b97a:	463b      	mov	r3, r7
 800b97c:	f7f4 fca6 	bl	80002cc <__adddf3>
 800b980:	9c04      	ldr	r4, [sp, #16]
 800b982:	4632      	mov	r2, r6
 800b984:	463b      	mov	r3, r7
 800b986:	4620      	mov	r0, r4
 800b988:	460d      	mov	r5, r1
 800b98a:	f7f4 fc9d 	bl	80002c8 <__aeabi_dsub>
 800b98e:	4642      	mov	r2, r8
 800b990:	464b      	mov	r3, r9
 800b992:	f7f4 fc99 	bl	80002c8 <__aeabi_dsub>
 800b996:	ec53 2b18 	vmov	r2, r3, d8
 800b99a:	f7f4 fc95 	bl	80002c8 <__aeabi_dsub>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4650      	mov	r0, sl
 800b9a4:	4659      	mov	r1, fp
 800b9a6:	e606      	b.n	800b5b6 <__ieee754_pow+0x2ee>
 800b9a8:	2401      	movs	r4, #1
 800b9aa:	e6a0      	b.n	800b6ee <__ieee754_pow+0x426>
 800b9ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ba00 <__ieee754_pow+0x738>
 800b9b0:	e60d      	b.n	800b5ce <__ieee754_pow+0x306>
 800b9b2:	bf00      	nop
 800b9b4:	f3af 8000 	nop.w
 800b9b8:	4a454eef 	.word	0x4a454eef
 800b9bc:	3fca7e28 	.word	0x3fca7e28
 800b9c0:	93c9db65 	.word	0x93c9db65
 800b9c4:	3fcd864a 	.word	0x3fcd864a
 800b9c8:	a91d4101 	.word	0xa91d4101
 800b9cc:	3fd17460 	.word	0x3fd17460
 800b9d0:	518f264d 	.word	0x518f264d
 800b9d4:	3fd55555 	.word	0x3fd55555
 800b9d8:	db6fabff 	.word	0xdb6fabff
 800b9dc:	3fdb6db6 	.word	0x3fdb6db6
 800b9e0:	33333303 	.word	0x33333303
 800b9e4:	3fe33333 	.word	0x3fe33333
 800b9e8:	e0000000 	.word	0xe0000000
 800b9ec:	3feec709 	.word	0x3feec709
 800b9f0:	dc3a03fd 	.word	0xdc3a03fd
 800b9f4:	3feec709 	.word	0x3feec709
 800b9f8:	145b01f5 	.word	0x145b01f5
 800b9fc:	be3e2fe0 	.word	0xbe3e2fe0
 800ba00:	00000000 	.word	0x00000000
 800ba04:	3ff00000 	.word	0x3ff00000
 800ba08:	7ff00000 	.word	0x7ff00000
 800ba0c:	43400000 	.word	0x43400000
 800ba10:	0003988e 	.word	0x0003988e
 800ba14:	000bb679 	.word	0x000bb679
 800ba18:	0800d4e0 	.word	0x0800d4e0
 800ba1c:	3ff00000 	.word	0x3ff00000
 800ba20:	40080000 	.word	0x40080000
 800ba24:	0800d500 	.word	0x0800d500
 800ba28:	0800d4f0 	.word	0x0800d4f0
 800ba2c:	a3b5      	add	r3, pc, #724	; (adr r3, 800bd04 <__ieee754_pow+0xa3c>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f4 fc49 	bl	80002cc <__adddf3>
 800ba3a:	4622      	mov	r2, r4
 800ba3c:	ec41 0b1a 	vmov	d10, r0, r1
 800ba40:	462b      	mov	r3, r5
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fc3f 	bl	80002c8 <__aeabi_dsub>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	ec51 0b1a 	vmov	r0, r1, d10
 800ba52:	f7f5 f881 	bl	8000b58 <__aeabi_dcmpgt>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	f47f adf8 	bne.w	800b64c <__ieee754_pow+0x384>
 800ba5c:	4aa4      	ldr	r2, [pc, #656]	; (800bcf0 <__ieee754_pow+0xa28>)
 800ba5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba62:	4293      	cmp	r3, r2
 800ba64:	f340 810b 	ble.w	800bc7e <__ieee754_pow+0x9b6>
 800ba68:	151b      	asrs	r3, r3, #20
 800ba6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ba6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ba72:	fa4a f303 	asr.w	r3, sl, r3
 800ba76:	445b      	add	r3, fp
 800ba78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ba7c:	4e9d      	ldr	r6, [pc, #628]	; (800bcf4 <__ieee754_pow+0xa2c>)
 800ba7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ba82:	4116      	asrs	r6, r2
 800ba84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ba88:	2000      	movs	r0, #0
 800ba8a:	ea23 0106 	bic.w	r1, r3, r6
 800ba8e:	f1c2 0214 	rsb	r2, r2, #20
 800ba92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ba96:	fa4a fa02 	asr.w	sl, sl, r2
 800ba9a:	f1bb 0f00 	cmp.w	fp, #0
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4620      	mov	r0, r4
 800baa4:	4629      	mov	r1, r5
 800baa6:	bfb8      	it	lt
 800baa8:	f1ca 0a00 	rsblt	sl, sl, #0
 800baac:	f7f4 fc0c 	bl	80002c8 <__aeabi_dsub>
 800bab0:	ec41 0b19 	vmov	d9, r0, r1
 800bab4:	4642      	mov	r2, r8
 800bab6:	464b      	mov	r3, r9
 800bab8:	ec51 0b19 	vmov	r0, r1, d9
 800babc:	f7f4 fc06 	bl	80002cc <__adddf3>
 800bac0:	2400      	movs	r4, #0
 800bac2:	a379      	add	r3, pc, #484	; (adr r3, 800bca8 <__ieee754_pow+0x9e0>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4620      	mov	r0, r4
 800baca:	460d      	mov	r5, r1
 800bacc:	f7f4 fdb4 	bl	8000638 <__aeabi_dmul>
 800bad0:	ec53 2b19 	vmov	r2, r3, d9
 800bad4:	4606      	mov	r6, r0
 800bad6:	460f      	mov	r7, r1
 800bad8:	4620      	mov	r0, r4
 800bada:	4629      	mov	r1, r5
 800badc:	f7f4 fbf4 	bl	80002c8 <__aeabi_dsub>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4640      	mov	r0, r8
 800bae6:	4649      	mov	r1, r9
 800bae8:	f7f4 fbee 	bl	80002c8 <__aeabi_dsub>
 800baec:	a370      	add	r3, pc, #448	; (adr r3, 800bcb0 <__ieee754_pow+0x9e8>)
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fda1 	bl	8000638 <__aeabi_dmul>
 800baf6:	a370      	add	r3, pc, #448	; (adr r3, 800bcb8 <__ieee754_pow+0x9f0>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	4680      	mov	r8, r0
 800bafe:	4689      	mov	r9, r1
 800bb00:	4620      	mov	r0, r4
 800bb02:	4629      	mov	r1, r5
 800bb04:	f7f4 fd98 	bl	8000638 <__aeabi_dmul>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	4649      	mov	r1, r9
 800bb10:	f7f4 fbdc 	bl	80002cc <__adddf3>
 800bb14:	4604      	mov	r4, r0
 800bb16:	460d      	mov	r5, r1
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	4639      	mov	r1, r7
 800bb20:	f7f4 fbd4 	bl	80002cc <__adddf3>
 800bb24:	4632      	mov	r2, r6
 800bb26:	463b      	mov	r3, r7
 800bb28:	4680      	mov	r8, r0
 800bb2a:	4689      	mov	r9, r1
 800bb2c:	f7f4 fbcc 	bl	80002c8 <__aeabi_dsub>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4620      	mov	r0, r4
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f4 fbc6 	bl	80002c8 <__aeabi_dsub>
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	464b      	mov	r3, r9
 800bb44:	4640      	mov	r0, r8
 800bb46:	4649      	mov	r1, r9
 800bb48:	f7f4 fd76 	bl	8000638 <__aeabi_dmul>
 800bb4c:	a35c      	add	r3, pc, #368	; (adr r3, 800bcc0 <__ieee754_pow+0x9f8>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	4604      	mov	r4, r0
 800bb54:	460d      	mov	r5, r1
 800bb56:	f7f4 fd6f 	bl	8000638 <__aeabi_dmul>
 800bb5a:	a35b      	add	r3, pc, #364	; (adr r3, 800bcc8 <__ieee754_pow+0xa00>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f7f4 fbb2 	bl	80002c8 <__aeabi_dsub>
 800bb64:	4622      	mov	r2, r4
 800bb66:	462b      	mov	r3, r5
 800bb68:	f7f4 fd66 	bl	8000638 <__aeabi_dmul>
 800bb6c:	a358      	add	r3, pc, #352	; (adr r3, 800bcd0 <__ieee754_pow+0xa08>)
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f7f4 fbab 	bl	80002cc <__adddf3>
 800bb76:	4622      	mov	r2, r4
 800bb78:	462b      	mov	r3, r5
 800bb7a:	f7f4 fd5d 	bl	8000638 <__aeabi_dmul>
 800bb7e:	a356      	add	r3, pc, #344	; (adr r3, 800bcd8 <__ieee754_pow+0xa10>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fba0 	bl	80002c8 <__aeabi_dsub>
 800bb88:	4622      	mov	r2, r4
 800bb8a:	462b      	mov	r3, r5
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	a353      	add	r3, pc, #332	; (adr r3, 800bce0 <__ieee754_pow+0xa18>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fb99 	bl	80002cc <__adddf3>
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	f7f4 fd4b 	bl	8000638 <__aeabi_dmul>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4640      	mov	r0, r8
 800bba8:	4649      	mov	r1, r9
 800bbaa:	f7f4 fb8d 	bl	80002c8 <__aeabi_dsub>
 800bbae:	4604      	mov	r4, r0
 800bbb0:	460d      	mov	r5, r1
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 fd3d 	bl	8000638 <__aeabi_dmul>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	ec41 0b19 	vmov	d9, r0, r1
 800bbc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bbc8:	4620      	mov	r0, r4
 800bbca:	4629      	mov	r1, r5
 800bbcc:	f7f4 fb7c 	bl	80002c8 <__aeabi_dsub>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	ec51 0b19 	vmov	r0, r1, d9
 800bbd8:	f7f4 fe58 	bl	800088c <__aeabi_ddiv>
 800bbdc:	4632      	mov	r2, r6
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	463b      	mov	r3, r7
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f7f4 fd26 	bl	8000638 <__aeabi_dmul>
 800bbec:	4632      	mov	r2, r6
 800bbee:	463b      	mov	r3, r7
 800bbf0:	f7f4 fb6c 	bl	80002cc <__adddf3>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f7f4 fb64 	bl	80002c8 <__aeabi_dsub>
 800bc00:	4642      	mov	r2, r8
 800bc02:	464b      	mov	r3, r9
 800bc04:	f7f4 fb60 	bl	80002c8 <__aeabi_dsub>
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	493a      	ldr	r1, [pc, #232]	; (800bcf8 <__ieee754_pow+0xa30>)
 800bc0e:	2000      	movs	r0, #0
 800bc10:	f7f4 fb5a 	bl	80002c8 <__aeabi_dsub>
 800bc14:	e9cd 0100 	strd	r0, r1, [sp]
 800bc18:	9b01      	ldr	r3, [sp, #4]
 800bc1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bc1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc22:	da2f      	bge.n	800bc84 <__ieee754_pow+0x9bc>
 800bc24:	4650      	mov	r0, sl
 800bc26:	ed9d 0b00 	vldr	d0, [sp]
 800bc2a:	f001 f919 	bl	800ce60 <scalbn>
 800bc2e:	ec51 0b10 	vmov	r0, r1, d0
 800bc32:	ec53 2b18 	vmov	r2, r3, d8
 800bc36:	f7ff bbe0 	b.w	800b3fa <__ieee754_pow+0x132>
 800bc3a:	4b30      	ldr	r3, [pc, #192]	; (800bcfc <__ieee754_pow+0xa34>)
 800bc3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bc40:	429e      	cmp	r6, r3
 800bc42:	f77f af0b 	ble.w	800ba5c <__ieee754_pow+0x794>
 800bc46:	4b2e      	ldr	r3, [pc, #184]	; (800bd00 <__ieee754_pow+0xa38>)
 800bc48:	440b      	add	r3, r1
 800bc4a:	4303      	orrs	r3, r0
 800bc4c:	d00b      	beq.n	800bc66 <__ieee754_pow+0x99e>
 800bc4e:	a326      	add	r3, pc, #152	; (adr r3, 800bce8 <__ieee754_pow+0xa20>)
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	ec51 0b18 	vmov	r0, r1, d8
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	a322      	add	r3, pc, #136	; (adr r3, 800bce8 <__ieee754_pow+0xa20>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f7ff bbca 	b.w	800b3fa <__ieee754_pow+0x132>
 800bc66:	4622      	mov	r2, r4
 800bc68:	462b      	mov	r3, r5
 800bc6a:	f7f4 fb2d 	bl	80002c8 <__aeabi_dsub>
 800bc6e:	4642      	mov	r2, r8
 800bc70:	464b      	mov	r3, r9
 800bc72:	f7f4 ff67 	bl	8000b44 <__aeabi_dcmpge>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	f43f aef0 	beq.w	800ba5c <__ieee754_pow+0x794>
 800bc7c:	e7e7      	b.n	800bc4e <__ieee754_pow+0x986>
 800bc7e:	f04f 0a00 	mov.w	sl, #0
 800bc82:	e717      	b.n	800bab4 <__ieee754_pow+0x7ec>
 800bc84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	e7d2      	b.n	800bc32 <__ieee754_pow+0x96a>
 800bc8c:	491a      	ldr	r1, [pc, #104]	; (800bcf8 <__ieee754_pow+0xa30>)
 800bc8e:	2000      	movs	r0, #0
 800bc90:	f7ff bb9e 	b.w	800b3d0 <__ieee754_pow+0x108>
 800bc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc98:	f7ff bb9a 	b.w	800b3d0 <__ieee754_pow+0x108>
 800bc9c:	9000      	str	r0, [sp, #0]
 800bc9e:	f7ff bb76 	b.w	800b38e <__ieee754_pow+0xc6>
 800bca2:	2100      	movs	r1, #0
 800bca4:	f7ff bb60 	b.w	800b368 <__ieee754_pow+0xa0>
 800bca8:	00000000 	.word	0x00000000
 800bcac:	3fe62e43 	.word	0x3fe62e43
 800bcb0:	fefa39ef 	.word	0xfefa39ef
 800bcb4:	3fe62e42 	.word	0x3fe62e42
 800bcb8:	0ca86c39 	.word	0x0ca86c39
 800bcbc:	be205c61 	.word	0xbe205c61
 800bcc0:	72bea4d0 	.word	0x72bea4d0
 800bcc4:	3e663769 	.word	0x3e663769
 800bcc8:	c5d26bf1 	.word	0xc5d26bf1
 800bccc:	3ebbbd41 	.word	0x3ebbbd41
 800bcd0:	af25de2c 	.word	0xaf25de2c
 800bcd4:	3f11566a 	.word	0x3f11566a
 800bcd8:	16bebd93 	.word	0x16bebd93
 800bcdc:	3f66c16c 	.word	0x3f66c16c
 800bce0:	5555553e 	.word	0x5555553e
 800bce4:	3fc55555 	.word	0x3fc55555
 800bce8:	c2f8f359 	.word	0xc2f8f359
 800bcec:	01a56e1f 	.word	0x01a56e1f
 800bcf0:	3fe00000 	.word	0x3fe00000
 800bcf4:	000fffff 	.word	0x000fffff
 800bcf8:	3ff00000 	.word	0x3ff00000
 800bcfc:	4090cbff 	.word	0x4090cbff
 800bd00:	3f6f3400 	.word	0x3f6f3400
 800bd04:	652b82fe 	.word	0x652b82fe
 800bd08:	3c971547 	.word	0x3c971547
 800bd0c:	00000000 	.word	0x00000000

0800bd10 <__ieee754_rem_pio2>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	ed2d 8b02 	vpush	{d8}
 800bd18:	ec55 4b10 	vmov	r4, r5, d0
 800bd1c:	4bca      	ldr	r3, [pc, #808]	; (800c048 <__ieee754_rem_pio2+0x338>)
 800bd1e:	b08b      	sub	sp, #44	; 0x2c
 800bd20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bd24:	4598      	cmp	r8, r3
 800bd26:	4682      	mov	sl, r0
 800bd28:	9502      	str	r5, [sp, #8]
 800bd2a:	dc08      	bgt.n	800bd3e <__ieee754_rem_pio2+0x2e>
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2300      	movs	r3, #0
 800bd30:	ed80 0b00 	vstr	d0, [r0]
 800bd34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bd38:	f04f 0b00 	mov.w	fp, #0
 800bd3c:	e028      	b.n	800bd90 <__ieee754_rem_pio2+0x80>
 800bd3e:	4bc3      	ldr	r3, [pc, #780]	; (800c04c <__ieee754_rem_pio2+0x33c>)
 800bd40:	4598      	cmp	r8, r3
 800bd42:	dc78      	bgt.n	800be36 <__ieee754_rem_pio2+0x126>
 800bd44:	9b02      	ldr	r3, [sp, #8]
 800bd46:	4ec2      	ldr	r6, [pc, #776]	; (800c050 <__ieee754_rem_pio2+0x340>)
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	ee10 0a10 	vmov	r0, s0
 800bd4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c010 <__ieee754_rem_pio2+0x300>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	4629      	mov	r1, r5
 800bd56:	dd39      	ble.n	800bdcc <__ieee754_rem_pio2+0xbc>
 800bd58:	f7f4 fab6 	bl	80002c8 <__aeabi_dsub>
 800bd5c:	45b0      	cmp	r8, r6
 800bd5e:	4604      	mov	r4, r0
 800bd60:	460d      	mov	r5, r1
 800bd62:	d01b      	beq.n	800bd9c <__ieee754_rem_pio2+0x8c>
 800bd64:	a3ac      	add	r3, pc, #688	; (adr r3, 800c018 <__ieee754_rem_pio2+0x308>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f7f4 faad 	bl	80002c8 <__aeabi_dsub>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	e9ca 2300 	strd	r2, r3, [sl]
 800bd76:	4620      	mov	r0, r4
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f7f4 faa5 	bl	80002c8 <__aeabi_dsub>
 800bd7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c018 <__ieee754_rem_pio2+0x308>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	f7f4 faa0 	bl	80002c8 <__aeabi_dsub>
 800bd88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd8c:	f04f 0b01 	mov.w	fp, #1
 800bd90:	4658      	mov	r0, fp
 800bd92:	b00b      	add	sp, #44	; 0x2c
 800bd94:	ecbd 8b02 	vpop	{d8}
 800bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c020 <__ieee754_rem_pio2+0x310>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fa91 	bl	80002c8 <__aeabi_dsub>
 800bda6:	a3a0      	add	r3, pc, #640	; (adr r3, 800c028 <__ieee754_rem_pio2+0x318>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	4604      	mov	r4, r0
 800bdae:	460d      	mov	r5, r1
 800bdb0:	f7f4 fa8a 	bl	80002c8 <__aeabi_dsub>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	e9ca 2300 	strd	r2, r3, [sl]
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	f7f4 fa82 	bl	80002c8 <__aeabi_dsub>
 800bdc4:	a398      	add	r3, pc, #608	; (adr r3, 800c028 <__ieee754_rem_pio2+0x318>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	e7db      	b.n	800bd84 <__ieee754_rem_pio2+0x74>
 800bdcc:	f7f4 fa7e 	bl	80002cc <__adddf3>
 800bdd0:	45b0      	cmp	r8, r6
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	d016      	beq.n	800be06 <__ieee754_rem_pio2+0xf6>
 800bdd8:	a38f      	add	r3, pc, #572	; (adr r3, 800c018 <__ieee754_rem_pio2+0x308>)
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f7f4 fa75 	bl	80002cc <__adddf3>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	e9ca 2300 	strd	r2, r3, [sl]
 800bdea:	4620      	mov	r0, r4
 800bdec:	4629      	mov	r1, r5
 800bdee:	f7f4 fa6b 	bl	80002c8 <__aeabi_dsub>
 800bdf2:	a389      	add	r3, pc, #548	; (adr r3, 800c018 <__ieee754_rem_pio2+0x308>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 fa68 	bl	80002cc <__adddf3>
 800bdfc:	f04f 3bff 	mov.w	fp, #4294967295
 800be00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be04:	e7c4      	b.n	800bd90 <__ieee754_rem_pio2+0x80>
 800be06:	a386      	add	r3, pc, #536	; (adr r3, 800c020 <__ieee754_rem_pio2+0x310>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f7f4 fa5e 	bl	80002cc <__adddf3>
 800be10:	a385      	add	r3, pc, #532	; (adr r3, 800c028 <__ieee754_rem_pio2+0x318>)
 800be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be16:	4604      	mov	r4, r0
 800be18:	460d      	mov	r5, r1
 800be1a:	f7f4 fa57 	bl	80002cc <__adddf3>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	e9ca 2300 	strd	r2, r3, [sl]
 800be26:	4620      	mov	r0, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fa4d 	bl	80002c8 <__aeabi_dsub>
 800be2e:	a37e      	add	r3, pc, #504	; (adr r3, 800c028 <__ieee754_rem_pio2+0x318>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	e7e0      	b.n	800bdf8 <__ieee754_rem_pio2+0xe8>
 800be36:	4b87      	ldr	r3, [pc, #540]	; (800c054 <__ieee754_rem_pio2+0x344>)
 800be38:	4598      	cmp	r8, r3
 800be3a:	f300 80d9 	bgt.w	800bff0 <__ieee754_rem_pio2+0x2e0>
 800be3e:	f7fe fee7 	bl	800ac10 <fabs>
 800be42:	ec55 4b10 	vmov	r4, r5, d0
 800be46:	ee10 0a10 	vmov	r0, s0
 800be4a:	a379      	add	r3, pc, #484	; (adr r3, 800c030 <__ieee754_rem_pio2+0x320>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	4629      	mov	r1, r5
 800be52:	f7f4 fbf1 	bl	8000638 <__aeabi_dmul>
 800be56:	4b80      	ldr	r3, [pc, #512]	; (800c058 <__ieee754_rem_pio2+0x348>)
 800be58:	2200      	movs	r2, #0
 800be5a:	f7f4 fa37 	bl	80002cc <__adddf3>
 800be5e:	f7f4 fe9b 	bl	8000b98 <__aeabi_d2iz>
 800be62:	4683      	mov	fp, r0
 800be64:	f7f4 fb7e 	bl	8000564 <__aeabi_i2d>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	ec43 2b18 	vmov	d8, r2, r3
 800be70:	a367      	add	r3, pc, #412	; (adr r3, 800c010 <__ieee754_rem_pio2+0x300>)
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f7f4 fbdf 	bl	8000638 <__aeabi_dmul>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4620      	mov	r0, r4
 800be80:	4629      	mov	r1, r5
 800be82:	f7f4 fa21 	bl	80002c8 <__aeabi_dsub>
 800be86:	a364      	add	r3, pc, #400	; (adr r3, 800c018 <__ieee754_rem_pio2+0x308>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	4606      	mov	r6, r0
 800be8e:	460f      	mov	r7, r1
 800be90:	ec51 0b18 	vmov	r0, r1, d8
 800be94:	f7f4 fbd0 	bl	8000638 <__aeabi_dmul>
 800be98:	f1bb 0f1f 	cmp.w	fp, #31
 800be9c:	4604      	mov	r4, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	dc0d      	bgt.n	800bebe <__ieee754_rem_pio2+0x1ae>
 800bea2:	4b6e      	ldr	r3, [pc, #440]	; (800c05c <__ieee754_rem_pio2+0x34c>)
 800bea4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beac:	4543      	cmp	r3, r8
 800beae:	d006      	beq.n	800bebe <__ieee754_rem_pio2+0x1ae>
 800beb0:	4622      	mov	r2, r4
 800beb2:	462b      	mov	r3, r5
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fa06 	bl	80002c8 <__aeabi_dsub>
 800bebc:	e00f      	b.n	800bede <__ieee754_rem_pio2+0x1ce>
 800bebe:	462b      	mov	r3, r5
 800bec0:	4622      	mov	r2, r4
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	f7f4 f9ff 	bl	80002c8 <__aeabi_dsub>
 800beca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bece:	9303      	str	r3, [sp, #12]
 800bed0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bed4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bed8:	f1b8 0f10 	cmp.w	r8, #16
 800bedc:	dc02      	bgt.n	800bee4 <__ieee754_rem_pio2+0x1d4>
 800bede:	e9ca 0100 	strd	r0, r1, [sl]
 800bee2:	e039      	b.n	800bf58 <__ieee754_rem_pio2+0x248>
 800bee4:	a34e      	add	r3, pc, #312	; (adr r3, 800c020 <__ieee754_rem_pio2+0x310>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	ec51 0b18 	vmov	r0, r1, d8
 800beee:	f7f4 fba3 	bl	8000638 <__aeabi_dmul>
 800bef2:	4604      	mov	r4, r0
 800bef4:	460d      	mov	r5, r1
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9e3 	bl	80002c8 <__aeabi_dsub>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4680      	mov	r8, r0
 800bf08:	4689      	mov	r9, r1
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	f7f4 f9db 	bl	80002c8 <__aeabi_dsub>
 800bf12:	4622      	mov	r2, r4
 800bf14:	462b      	mov	r3, r5
 800bf16:	f7f4 f9d7 	bl	80002c8 <__aeabi_dsub>
 800bf1a:	a343      	add	r3, pc, #268	; (adr r3, 800c028 <__ieee754_rem_pio2+0x318>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	4604      	mov	r4, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	ec51 0b18 	vmov	r0, r1, d8
 800bf28:	f7f4 fb86 	bl	8000638 <__aeabi_dmul>
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	462b      	mov	r3, r5
 800bf30:	f7f4 f9ca 	bl	80002c8 <__aeabi_dsub>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4604      	mov	r4, r0
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f7f4 f9c2 	bl	80002c8 <__aeabi_dsub>
 800bf44:	9a03      	ldr	r2, [sp, #12]
 800bf46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	2b31      	cmp	r3, #49	; 0x31
 800bf4e:	dc24      	bgt.n	800bf9a <__ieee754_rem_pio2+0x28a>
 800bf50:	e9ca 0100 	strd	r0, r1, [sl]
 800bf54:	4646      	mov	r6, r8
 800bf56:	464f      	mov	r7, r9
 800bf58:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4642      	mov	r2, r8
 800bf60:	464b      	mov	r3, r9
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 f9b0 	bl	80002c8 <__aeabi_dsub>
 800bf68:	462b      	mov	r3, r5
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	f7f4 f9ac 	bl	80002c8 <__aeabi_dsub>
 800bf70:	9b02      	ldr	r3, [sp, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf78:	f6bf af0a 	bge.w	800bd90 <__ieee754_rem_pio2+0x80>
 800bf7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf80:	f8ca 3004 	str.w	r3, [sl, #4]
 800bf84:	f8ca 8000 	str.w	r8, [sl]
 800bf88:	f8ca 0008 	str.w	r0, [sl, #8]
 800bf8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf90:	f8ca 300c 	str.w	r3, [sl, #12]
 800bf94:	f1cb 0b00 	rsb	fp, fp, #0
 800bf98:	e6fa      	b.n	800bd90 <__ieee754_rem_pio2+0x80>
 800bf9a:	a327      	add	r3, pc, #156	; (adr r3, 800c038 <__ieee754_rem_pio2+0x328>)
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	ec51 0b18 	vmov	r0, r1, d8
 800bfa4:	f7f4 fb48 	bl	8000638 <__aeabi_dmul>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	f7f4 f988 	bl	80002c8 <__aeabi_dsub>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	f7f4 f980 	bl	80002c8 <__aeabi_dsub>
 800bfc8:	4622      	mov	r2, r4
 800bfca:	462b      	mov	r3, r5
 800bfcc:	f7f4 f97c 	bl	80002c8 <__aeabi_dsub>
 800bfd0:	a31b      	add	r3, pc, #108	; (adr r3, 800c040 <__ieee754_rem_pio2+0x330>)
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460d      	mov	r5, r1
 800bfda:	ec51 0b18 	vmov	r0, r1, d8
 800bfde:	f7f4 fb2b 	bl	8000638 <__aeabi_dmul>
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	f7f4 f96f 	bl	80002c8 <__aeabi_dsub>
 800bfea:	4604      	mov	r4, r0
 800bfec:	460d      	mov	r5, r1
 800bfee:	e75f      	b.n	800beb0 <__ieee754_rem_pio2+0x1a0>
 800bff0:	4b1b      	ldr	r3, [pc, #108]	; (800c060 <__ieee754_rem_pio2+0x350>)
 800bff2:	4598      	cmp	r8, r3
 800bff4:	dd36      	ble.n	800c064 <__ieee754_rem_pio2+0x354>
 800bff6:	ee10 2a10 	vmov	r2, s0
 800bffa:	462b      	mov	r3, r5
 800bffc:	4620      	mov	r0, r4
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 f962 	bl	80002c8 <__aeabi_dsub>
 800c004:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c008:	e9ca 0100 	strd	r0, r1, [sl]
 800c00c:	e694      	b.n	800bd38 <__ieee754_rem_pio2+0x28>
 800c00e:	bf00      	nop
 800c010:	54400000 	.word	0x54400000
 800c014:	3ff921fb 	.word	0x3ff921fb
 800c018:	1a626331 	.word	0x1a626331
 800c01c:	3dd0b461 	.word	0x3dd0b461
 800c020:	1a600000 	.word	0x1a600000
 800c024:	3dd0b461 	.word	0x3dd0b461
 800c028:	2e037073 	.word	0x2e037073
 800c02c:	3ba3198a 	.word	0x3ba3198a
 800c030:	6dc9c883 	.word	0x6dc9c883
 800c034:	3fe45f30 	.word	0x3fe45f30
 800c038:	2e000000 	.word	0x2e000000
 800c03c:	3ba3198a 	.word	0x3ba3198a
 800c040:	252049c1 	.word	0x252049c1
 800c044:	397b839a 	.word	0x397b839a
 800c048:	3fe921fb 	.word	0x3fe921fb
 800c04c:	4002d97b 	.word	0x4002d97b
 800c050:	3ff921fb 	.word	0x3ff921fb
 800c054:	413921fb 	.word	0x413921fb
 800c058:	3fe00000 	.word	0x3fe00000
 800c05c:	0800d510 	.word	0x0800d510
 800c060:	7fefffff 	.word	0x7fefffff
 800c064:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c068:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c06c:	ee10 0a10 	vmov	r0, s0
 800c070:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c074:	ee10 6a10 	vmov	r6, s0
 800c078:	460f      	mov	r7, r1
 800c07a:	f7f4 fd8d 	bl	8000b98 <__aeabi_d2iz>
 800c07e:	f7f4 fa71 	bl	8000564 <__aeabi_i2d>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4630      	mov	r0, r6
 800c088:	4639      	mov	r1, r7
 800c08a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c08e:	f7f4 f91b 	bl	80002c8 <__aeabi_dsub>
 800c092:	4b22      	ldr	r3, [pc, #136]	; (800c11c <__ieee754_rem_pio2+0x40c>)
 800c094:	2200      	movs	r2, #0
 800c096:	f7f4 facf 	bl	8000638 <__aeabi_dmul>
 800c09a:	460f      	mov	r7, r1
 800c09c:	4606      	mov	r6, r0
 800c09e:	f7f4 fd7b 	bl	8000b98 <__aeabi_d2iz>
 800c0a2:	f7f4 fa5f 	bl	8000564 <__aeabi_i2d>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	4639      	mov	r1, r7
 800c0ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0b2:	f7f4 f909 	bl	80002c8 <__aeabi_dsub>
 800c0b6:	4b19      	ldr	r3, [pc, #100]	; (800c11c <__ieee754_rem_pio2+0x40c>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f7f4 fabd 	bl	8000638 <__aeabi_dmul>
 800c0be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0c2:	ad04      	add	r5, sp, #16
 800c0c4:	f04f 0803 	mov.w	r8, #3
 800c0c8:	46a9      	mov	r9, r5
 800c0ca:	2600      	movs	r6, #0
 800c0cc:	2700      	movs	r7, #0
 800c0ce:	4632      	mov	r2, r6
 800c0d0:	463b      	mov	r3, r7
 800c0d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c0d6:	46c3      	mov	fp, r8
 800c0d8:	3d08      	subs	r5, #8
 800c0da:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0de:	f7f4 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d1f3      	bne.n	800c0ce <__ieee754_rem_pio2+0x3be>
 800c0e6:	4b0e      	ldr	r3, [pc, #56]	; (800c120 <__ieee754_rem_pio2+0x410>)
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	465b      	mov	r3, fp
 800c0f2:	4651      	mov	r1, sl
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f000 f993 	bl	800c420 <__kernel_rem_pio2>
 800c0fa:	9b02      	ldr	r3, [sp, #8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	4683      	mov	fp, r0
 800c100:	f6bf ae46 	bge.w	800bd90 <__ieee754_rem_pio2+0x80>
 800c104:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c108:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c10c:	f8ca 3004 	str.w	r3, [sl, #4]
 800c110:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c118:	e73a      	b.n	800bf90 <__ieee754_rem_pio2+0x280>
 800c11a:	bf00      	nop
 800c11c:	41700000 	.word	0x41700000
 800c120:	0800d590 	.word	0x0800d590

0800c124 <__ieee754_sqrt>:
 800c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c128:	ec55 4b10 	vmov	r4, r5, d0
 800c12c:	4e56      	ldr	r6, [pc, #344]	; (800c288 <__ieee754_sqrt+0x164>)
 800c12e:	43ae      	bics	r6, r5
 800c130:	ee10 0a10 	vmov	r0, s0
 800c134:	ee10 3a10 	vmov	r3, s0
 800c138:	4629      	mov	r1, r5
 800c13a:	462a      	mov	r2, r5
 800c13c:	d110      	bne.n	800c160 <__ieee754_sqrt+0x3c>
 800c13e:	ee10 2a10 	vmov	r2, s0
 800c142:	462b      	mov	r3, r5
 800c144:	f7f4 fa78 	bl	8000638 <__aeabi_dmul>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4620      	mov	r0, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 f8bc 	bl	80002cc <__adddf3>
 800c154:	4604      	mov	r4, r0
 800c156:	460d      	mov	r5, r1
 800c158:	ec45 4b10 	vmov	d0, r4, r5
 800c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c160:	2d00      	cmp	r5, #0
 800c162:	dc10      	bgt.n	800c186 <__ieee754_sqrt+0x62>
 800c164:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c168:	4330      	orrs	r0, r6
 800c16a:	d0f5      	beq.n	800c158 <__ieee754_sqrt+0x34>
 800c16c:	b15d      	cbz	r5, 800c186 <__ieee754_sqrt+0x62>
 800c16e:	ee10 2a10 	vmov	r2, s0
 800c172:	462b      	mov	r3, r5
 800c174:	ee10 0a10 	vmov	r0, s0
 800c178:	f7f4 f8a6 	bl	80002c8 <__aeabi_dsub>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	f7f4 fb84 	bl	800088c <__aeabi_ddiv>
 800c184:	e7e6      	b.n	800c154 <__ieee754_sqrt+0x30>
 800c186:	1509      	asrs	r1, r1, #20
 800c188:	d076      	beq.n	800c278 <__ieee754_sqrt+0x154>
 800c18a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c18e:	07ce      	lsls	r6, r1, #31
 800c190:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c194:	bf5e      	ittt	pl
 800c196:	0fda      	lsrpl	r2, r3, #31
 800c198:	005b      	lslpl	r3, r3, #1
 800c19a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c19e:	0fda      	lsrs	r2, r3, #31
 800c1a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c1a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	106d      	asrs	r5, r5, #1
 800c1ac:	005b      	lsls	r3, r3, #1
 800c1ae:	f04f 0e16 	mov.w	lr, #22
 800c1b2:	4684      	mov	ip, r0
 800c1b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1b8:	eb0c 0401 	add.w	r4, ip, r1
 800c1bc:	4294      	cmp	r4, r2
 800c1be:	bfde      	ittt	le
 800c1c0:	1b12      	suble	r2, r2, r4
 800c1c2:	eb04 0c01 	addle.w	ip, r4, r1
 800c1c6:	1840      	addle	r0, r0, r1
 800c1c8:	0052      	lsls	r2, r2, #1
 800c1ca:	f1be 0e01 	subs.w	lr, lr, #1
 800c1ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c1d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c1d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1da:	d1ed      	bne.n	800c1b8 <__ieee754_sqrt+0x94>
 800c1dc:	4671      	mov	r1, lr
 800c1de:	2720      	movs	r7, #32
 800c1e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c1e4:	4562      	cmp	r2, ip
 800c1e6:	eb04 060e 	add.w	r6, r4, lr
 800c1ea:	dc02      	bgt.n	800c1f2 <__ieee754_sqrt+0xce>
 800c1ec:	d113      	bne.n	800c216 <__ieee754_sqrt+0xf2>
 800c1ee:	429e      	cmp	r6, r3
 800c1f0:	d811      	bhi.n	800c216 <__ieee754_sqrt+0xf2>
 800c1f2:	2e00      	cmp	r6, #0
 800c1f4:	eb06 0e04 	add.w	lr, r6, r4
 800c1f8:	da43      	bge.n	800c282 <__ieee754_sqrt+0x15e>
 800c1fa:	f1be 0f00 	cmp.w	lr, #0
 800c1fe:	db40      	blt.n	800c282 <__ieee754_sqrt+0x15e>
 800c200:	f10c 0801 	add.w	r8, ip, #1
 800c204:	eba2 020c 	sub.w	r2, r2, ip
 800c208:	429e      	cmp	r6, r3
 800c20a:	bf88      	it	hi
 800c20c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c210:	1b9b      	subs	r3, r3, r6
 800c212:	4421      	add	r1, r4
 800c214:	46c4      	mov	ip, r8
 800c216:	0052      	lsls	r2, r2, #1
 800c218:	3f01      	subs	r7, #1
 800c21a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c21e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c222:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c226:	d1dd      	bne.n	800c1e4 <__ieee754_sqrt+0xc0>
 800c228:	4313      	orrs	r3, r2
 800c22a:	d006      	beq.n	800c23a <__ieee754_sqrt+0x116>
 800c22c:	1c4c      	adds	r4, r1, #1
 800c22e:	bf13      	iteet	ne
 800c230:	3101      	addne	r1, #1
 800c232:	3001      	addeq	r0, #1
 800c234:	4639      	moveq	r1, r7
 800c236:	f021 0101 	bicne.w	r1, r1, #1
 800c23a:	1043      	asrs	r3, r0, #1
 800c23c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c240:	0849      	lsrs	r1, r1, #1
 800c242:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c246:	07c2      	lsls	r2, r0, #31
 800c248:	bf48      	it	mi
 800c24a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c24e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c252:	460c      	mov	r4, r1
 800c254:	463d      	mov	r5, r7
 800c256:	e77f      	b.n	800c158 <__ieee754_sqrt+0x34>
 800c258:	0ada      	lsrs	r2, r3, #11
 800c25a:	3815      	subs	r0, #21
 800c25c:	055b      	lsls	r3, r3, #21
 800c25e:	2a00      	cmp	r2, #0
 800c260:	d0fa      	beq.n	800c258 <__ieee754_sqrt+0x134>
 800c262:	02d7      	lsls	r7, r2, #11
 800c264:	d50a      	bpl.n	800c27c <__ieee754_sqrt+0x158>
 800c266:	f1c1 0420 	rsb	r4, r1, #32
 800c26a:	fa23 f404 	lsr.w	r4, r3, r4
 800c26e:	1e4d      	subs	r5, r1, #1
 800c270:	408b      	lsls	r3, r1
 800c272:	4322      	orrs	r2, r4
 800c274:	1b41      	subs	r1, r0, r5
 800c276:	e788      	b.n	800c18a <__ieee754_sqrt+0x66>
 800c278:	4608      	mov	r0, r1
 800c27a:	e7f0      	b.n	800c25e <__ieee754_sqrt+0x13a>
 800c27c:	0052      	lsls	r2, r2, #1
 800c27e:	3101      	adds	r1, #1
 800c280:	e7ef      	b.n	800c262 <__ieee754_sqrt+0x13e>
 800c282:	46e0      	mov	r8, ip
 800c284:	e7be      	b.n	800c204 <__ieee754_sqrt+0xe0>
 800c286:	bf00      	nop
 800c288:	7ff00000 	.word	0x7ff00000
 800c28c:	00000000 	.word	0x00000000

0800c290 <__kernel_cos>:
 800c290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	ec57 6b10 	vmov	r6, r7, d0
 800c298:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c29c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c2a0:	ed8d 1b00 	vstr	d1, [sp]
 800c2a4:	da07      	bge.n	800c2b6 <__kernel_cos+0x26>
 800c2a6:	ee10 0a10 	vmov	r0, s0
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 fc74 	bl	8000b98 <__aeabi_d2iz>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	f000 8088 	beq.w	800c3c6 <__kernel_cos+0x136>
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	4639      	mov	r1, r7
 800c2be:	f7f4 f9bb 	bl	8000638 <__aeabi_dmul>
 800c2c2:	4b51      	ldr	r3, [pc, #324]	; (800c408 <__kernel_cos+0x178>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	f7f4 f9b5 	bl	8000638 <__aeabi_dmul>
 800c2ce:	a340      	add	r3, pc, #256	; (adr r3, 800c3d0 <__kernel_cos+0x140>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	4682      	mov	sl, r0
 800c2d6:	468b      	mov	fp, r1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7f4 f9ac 	bl	8000638 <__aeabi_dmul>
 800c2e0:	a33d      	add	r3, pc, #244	; (adr r3, 800c3d8 <__kernel_cos+0x148>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f7f3 fff1 	bl	80002cc <__adddf3>
 800c2ea:	4622      	mov	r2, r4
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	f7f4 f9a3 	bl	8000638 <__aeabi_dmul>
 800c2f2:	a33b      	add	r3, pc, #236	; (adr r3, 800c3e0 <__kernel_cos+0x150>)
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	f7f3 ffe6 	bl	80002c8 <__aeabi_dsub>
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	f7f4 f99a 	bl	8000638 <__aeabi_dmul>
 800c304:	a338      	add	r3, pc, #224	; (adr r3, 800c3e8 <__kernel_cos+0x158>)
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	f7f3 ffdf 	bl	80002cc <__adddf3>
 800c30e:	4622      	mov	r2, r4
 800c310:	462b      	mov	r3, r5
 800c312:	f7f4 f991 	bl	8000638 <__aeabi_dmul>
 800c316:	a336      	add	r3, pc, #216	; (adr r3, 800c3f0 <__kernel_cos+0x160>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	f7f3 ffd4 	bl	80002c8 <__aeabi_dsub>
 800c320:	4622      	mov	r2, r4
 800c322:	462b      	mov	r3, r5
 800c324:	f7f4 f988 	bl	8000638 <__aeabi_dmul>
 800c328:	a333      	add	r3, pc, #204	; (adr r3, 800c3f8 <__kernel_cos+0x168>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f3 ffcd 	bl	80002cc <__adddf3>
 800c332:	4622      	mov	r2, r4
 800c334:	462b      	mov	r3, r5
 800c336:	f7f4 f97f 	bl	8000638 <__aeabi_dmul>
 800c33a:	4622      	mov	r2, r4
 800c33c:	462b      	mov	r3, r5
 800c33e:	f7f4 f97b 	bl	8000638 <__aeabi_dmul>
 800c342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c346:	4604      	mov	r4, r0
 800c348:	460d      	mov	r5, r1
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	f7f4 f973 	bl	8000638 <__aeabi_dmul>
 800c352:	460b      	mov	r3, r1
 800c354:	4602      	mov	r2, r0
 800c356:	4629      	mov	r1, r5
 800c358:	4620      	mov	r0, r4
 800c35a:	f7f3 ffb5 	bl	80002c8 <__aeabi_dsub>
 800c35e:	4b2b      	ldr	r3, [pc, #172]	; (800c40c <__kernel_cos+0x17c>)
 800c360:	4598      	cmp	r8, r3
 800c362:	4606      	mov	r6, r0
 800c364:	460f      	mov	r7, r1
 800c366:	dc10      	bgt.n	800c38a <__kernel_cos+0xfa>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	4650      	mov	r0, sl
 800c36e:	4659      	mov	r1, fp
 800c370:	f7f3 ffaa 	bl	80002c8 <__aeabi_dsub>
 800c374:	460b      	mov	r3, r1
 800c376:	4926      	ldr	r1, [pc, #152]	; (800c410 <__kernel_cos+0x180>)
 800c378:	4602      	mov	r2, r0
 800c37a:	2000      	movs	r0, #0
 800c37c:	f7f3 ffa4 	bl	80002c8 <__aeabi_dsub>
 800c380:	ec41 0b10 	vmov	d0, r0, r1
 800c384:	b003      	add	sp, #12
 800c386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38a:	4b22      	ldr	r3, [pc, #136]	; (800c414 <__kernel_cos+0x184>)
 800c38c:	4920      	ldr	r1, [pc, #128]	; (800c410 <__kernel_cos+0x180>)
 800c38e:	4598      	cmp	r8, r3
 800c390:	bfcc      	ite	gt
 800c392:	4d21      	ldrgt	r5, [pc, #132]	; (800c418 <__kernel_cos+0x188>)
 800c394:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c398:	2400      	movs	r4, #0
 800c39a:	4622      	mov	r2, r4
 800c39c:	462b      	mov	r3, r5
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f7f3 ff92 	bl	80002c8 <__aeabi_dsub>
 800c3a4:	4622      	mov	r2, r4
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	4689      	mov	r9, r1
 800c3aa:	462b      	mov	r3, r5
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	f7f3 ff8a 	bl	80002c8 <__aeabi_dsub>
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	463b      	mov	r3, r7
 800c3b8:	f7f3 ff86 	bl	80002c8 <__aeabi_dsub>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	460b      	mov	r3, r1
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	4649      	mov	r1, r9
 800c3c4:	e7da      	b.n	800c37c <__kernel_cos+0xec>
 800c3c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c400 <__kernel_cos+0x170>
 800c3ca:	e7db      	b.n	800c384 <__kernel_cos+0xf4>
 800c3cc:	f3af 8000 	nop.w
 800c3d0:	be8838d4 	.word	0xbe8838d4
 800c3d4:	bda8fae9 	.word	0xbda8fae9
 800c3d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c3dc:	3e21ee9e 	.word	0x3e21ee9e
 800c3e0:	809c52ad 	.word	0x809c52ad
 800c3e4:	3e927e4f 	.word	0x3e927e4f
 800c3e8:	19cb1590 	.word	0x19cb1590
 800c3ec:	3efa01a0 	.word	0x3efa01a0
 800c3f0:	16c15177 	.word	0x16c15177
 800c3f4:	3f56c16c 	.word	0x3f56c16c
 800c3f8:	5555554c 	.word	0x5555554c
 800c3fc:	3fa55555 	.word	0x3fa55555
 800c400:	00000000 	.word	0x00000000
 800c404:	3ff00000 	.word	0x3ff00000
 800c408:	3fe00000 	.word	0x3fe00000
 800c40c:	3fd33332 	.word	0x3fd33332
 800c410:	3ff00000 	.word	0x3ff00000
 800c414:	3fe90000 	.word	0x3fe90000
 800c418:	3fd20000 	.word	0x3fd20000
 800c41c:	00000000 	.word	0x00000000

0800c420 <__kernel_rem_pio2>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	ed2d 8b02 	vpush	{d8}
 800c428:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c42c:	f112 0f14 	cmn.w	r2, #20
 800c430:	9308      	str	r3, [sp, #32]
 800c432:	9101      	str	r1, [sp, #4]
 800c434:	4bc6      	ldr	r3, [pc, #792]	; (800c750 <__kernel_rem_pio2+0x330>)
 800c436:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c438:	9009      	str	r0, [sp, #36]	; 0x24
 800c43a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	9b08      	ldr	r3, [sp, #32]
 800c442:	f103 33ff 	add.w	r3, r3, #4294967295
 800c446:	bfa8      	it	ge
 800c448:	1ed4      	subge	r4, r2, #3
 800c44a:	9306      	str	r3, [sp, #24]
 800c44c:	bfb2      	itee	lt
 800c44e:	2400      	movlt	r4, #0
 800c450:	2318      	movge	r3, #24
 800c452:	fb94 f4f3 	sdivge	r4, r4, r3
 800c456:	f06f 0317 	mvn.w	r3, #23
 800c45a:	fb04 3303 	mla	r3, r4, r3, r3
 800c45e:	eb03 0a02 	add.w	sl, r3, r2
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c740 <__kernel_rem_pio2+0x320>
 800c46a:	eb03 0802 	add.w	r8, r3, r2
 800c46e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c470:	1aa7      	subs	r7, r4, r2
 800c472:	ae20      	add	r6, sp, #128	; 0x80
 800c474:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c478:	2500      	movs	r5, #0
 800c47a:	4545      	cmp	r5, r8
 800c47c:	dd18      	ble.n	800c4b0 <__kernel_rem_pio2+0x90>
 800c47e:	9b08      	ldr	r3, [sp, #32]
 800c480:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c484:	aa20      	add	r2, sp, #128	; 0x80
 800c486:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c740 <__kernel_rem_pio2+0x320>
 800c48a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c48e:	f1c3 0301 	rsb	r3, r3, #1
 800c492:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c496:	9307      	str	r3, [sp, #28]
 800c498:	9b07      	ldr	r3, [sp, #28]
 800c49a:	9a04      	ldr	r2, [sp, #16]
 800c49c:	4443      	add	r3, r8
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	db2f      	blt.n	800c502 <__kernel_rem_pio2+0xe2>
 800c4a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c4aa:	462f      	mov	r7, r5
 800c4ac:	2600      	movs	r6, #0
 800c4ae:	e01b      	b.n	800c4e8 <__kernel_rem_pio2+0xc8>
 800c4b0:	42ef      	cmn	r7, r5
 800c4b2:	d407      	bmi.n	800c4c4 <__kernel_rem_pio2+0xa4>
 800c4b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c4b8:	f7f4 f854 	bl	8000564 <__aeabi_i2d>
 800c4bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	e7da      	b.n	800c47a <__kernel_rem_pio2+0x5a>
 800c4c4:	ec51 0b18 	vmov	r0, r1, d8
 800c4c8:	e7f8      	b.n	800c4bc <__kernel_rem_pio2+0x9c>
 800c4ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c4d2:	f7f4 f8b1 	bl	8000638 <__aeabi_dmul>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4de:	f7f3 fef5 	bl	80002cc <__adddf3>
 800c4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e6:	3601      	adds	r6, #1
 800c4e8:	9b06      	ldr	r3, [sp, #24]
 800c4ea:	429e      	cmp	r6, r3
 800c4ec:	f1a7 0708 	sub.w	r7, r7, #8
 800c4f0:	ddeb      	ble.n	800c4ca <__kernel_rem_pio2+0xaa>
 800c4f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4f6:	3508      	adds	r5, #8
 800c4f8:	ecab 7b02 	vstmia	fp!, {d7}
 800c4fc:	f108 0801 	add.w	r8, r8, #1
 800c500:	e7ca      	b.n	800c498 <__kernel_rem_pio2+0x78>
 800c502:	9b04      	ldr	r3, [sp, #16]
 800c504:	aa0c      	add	r2, sp, #48	; 0x30
 800c506:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c50a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c50c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c50e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c512:	9c04      	ldr	r4, [sp, #16]
 800c514:	930a      	str	r3, [sp, #40]	; 0x28
 800c516:	ab98      	add	r3, sp, #608	; 0x260
 800c518:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c51c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c520:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c524:	f8cd b008 	str.w	fp, [sp, #8]
 800c528:	4625      	mov	r5, r4
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	dc78      	bgt.n	800c620 <__kernel_rem_pio2+0x200>
 800c52e:	ec47 6b10 	vmov	d0, r6, r7
 800c532:	4650      	mov	r0, sl
 800c534:	f000 fc94 	bl	800ce60 <scalbn>
 800c538:	ec57 6b10 	vmov	r6, r7, d0
 800c53c:	2200      	movs	r2, #0
 800c53e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c542:	ee10 0a10 	vmov	r0, s0
 800c546:	4639      	mov	r1, r7
 800c548:	f7f4 f876 	bl	8000638 <__aeabi_dmul>
 800c54c:	ec41 0b10 	vmov	d0, r0, r1
 800c550:	f000 fb72 	bl	800cc38 <floor>
 800c554:	4b7f      	ldr	r3, [pc, #508]	; (800c754 <__kernel_rem_pio2+0x334>)
 800c556:	ec51 0b10 	vmov	r0, r1, d0
 800c55a:	2200      	movs	r2, #0
 800c55c:	f7f4 f86c 	bl	8000638 <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4630      	mov	r0, r6
 800c566:	4639      	mov	r1, r7
 800c568:	f7f3 feae 	bl	80002c8 <__aeabi_dsub>
 800c56c:	460f      	mov	r7, r1
 800c56e:	4606      	mov	r6, r0
 800c570:	f7f4 fb12 	bl	8000b98 <__aeabi_d2iz>
 800c574:	9007      	str	r0, [sp, #28]
 800c576:	f7f3 fff5 	bl	8000564 <__aeabi_i2d>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4630      	mov	r0, r6
 800c580:	4639      	mov	r1, r7
 800c582:	f7f3 fea1 	bl	80002c8 <__aeabi_dsub>
 800c586:	f1ba 0f00 	cmp.w	sl, #0
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	dd70      	ble.n	800c672 <__kernel_rem_pio2+0x252>
 800c590:	1e62      	subs	r2, r4, #1
 800c592:	ab0c      	add	r3, sp, #48	; 0x30
 800c594:	9d07      	ldr	r5, [sp, #28]
 800c596:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c59a:	f1ca 0118 	rsb	r1, sl, #24
 800c59e:	fa40 f301 	asr.w	r3, r0, r1
 800c5a2:	441d      	add	r5, r3
 800c5a4:	408b      	lsls	r3, r1
 800c5a6:	1ac0      	subs	r0, r0, r3
 800c5a8:	ab0c      	add	r3, sp, #48	; 0x30
 800c5aa:	9507      	str	r5, [sp, #28]
 800c5ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c5b0:	f1ca 0317 	rsb	r3, sl, #23
 800c5b4:	fa40 f303 	asr.w	r3, r0, r3
 800c5b8:	9302      	str	r3, [sp, #8]
 800c5ba:	9b02      	ldr	r3, [sp, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	dd66      	ble.n	800c68e <__kernel_rem_pio2+0x26e>
 800c5c0:	9b07      	ldr	r3, [sp, #28]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	4615      	mov	r5, r2
 800c5ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c5ce:	4294      	cmp	r4, r2
 800c5d0:	f300 8099 	bgt.w	800c706 <__kernel_rem_pio2+0x2e6>
 800c5d4:	f1ba 0f00 	cmp.w	sl, #0
 800c5d8:	dd07      	ble.n	800c5ea <__kernel_rem_pio2+0x1ca>
 800c5da:	f1ba 0f01 	cmp.w	sl, #1
 800c5de:	f000 80a5 	beq.w	800c72c <__kernel_rem_pio2+0x30c>
 800c5e2:	f1ba 0f02 	cmp.w	sl, #2
 800c5e6:	f000 80c1 	beq.w	800c76c <__kernel_rem_pio2+0x34c>
 800c5ea:	9b02      	ldr	r3, [sp, #8]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d14e      	bne.n	800c68e <__kernel_rem_pio2+0x26e>
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	4958      	ldr	r1, [pc, #352]	; (800c758 <__kernel_rem_pio2+0x338>)
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	f7f3 fe66 	bl	80002c8 <__aeabi_dsub>
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	460f      	mov	r7, r1
 800c600:	2d00      	cmp	r5, #0
 800c602:	d044      	beq.n	800c68e <__kernel_rem_pio2+0x26e>
 800c604:	4650      	mov	r0, sl
 800c606:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c748 <__kernel_rem_pio2+0x328>
 800c60a:	f000 fc29 	bl	800ce60 <scalbn>
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
 800c612:	ec53 2b10 	vmov	r2, r3, d0
 800c616:	f7f3 fe57 	bl	80002c8 <__aeabi_dsub>
 800c61a:	4606      	mov	r6, r0
 800c61c:	460f      	mov	r7, r1
 800c61e:	e036      	b.n	800c68e <__kernel_rem_pio2+0x26e>
 800c620:	4b4e      	ldr	r3, [pc, #312]	; (800c75c <__kernel_rem_pio2+0x33c>)
 800c622:	2200      	movs	r2, #0
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 f806 	bl	8000638 <__aeabi_dmul>
 800c62c:	f7f4 fab4 	bl	8000b98 <__aeabi_d2iz>
 800c630:	f7f3 ff98 	bl	8000564 <__aeabi_i2d>
 800c634:	4b4a      	ldr	r3, [pc, #296]	; (800c760 <__kernel_rem_pio2+0x340>)
 800c636:	2200      	movs	r2, #0
 800c638:	4680      	mov	r8, r0
 800c63a:	4689      	mov	r9, r1
 800c63c:	f7f3 fffc 	bl	8000638 <__aeabi_dmul>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 fe3e 	bl	80002c8 <__aeabi_dsub>
 800c64c:	f7f4 faa4 	bl	8000b98 <__aeabi_d2iz>
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	f843 0b04 	str.w	r0, [r3], #4
 800c656:	3d01      	subs	r5, #1
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c65c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	4640      	mov	r0, r8
 800c666:	4649      	mov	r1, r9
 800c668:	f7f3 fe30 	bl	80002cc <__adddf3>
 800c66c:	4606      	mov	r6, r0
 800c66e:	460f      	mov	r7, r1
 800c670:	e75b      	b.n	800c52a <__kernel_rem_pio2+0x10a>
 800c672:	d105      	bne.n	800c680 <__kernel_rem_pio2+0x260>
 800c674:	1e63      	subs	r3, r4, #1
 800c676:	aa0c      	add	r2, sp, #48	; 0x30
 800c678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c67c:	15c3      	asrs	r3, r0, #23
 800c67e:	e79b      	b.n	800c5b8 <__kernel_rem_pio2+0x198>
 800c680:	4b38      	ldr	r3, [pc, #224]	; (800c764 <__kernel_rem_pio2+0x344>)
 800c682:	2200      	movs	r2, #0
 800c684:	f7f4 fa5e 	bl	8000b44 <__aeabi_dcmpge>
 800c688:	2800      	cmp	r0, #0
 800c68a:	d139      	bne.n	800c700 <__kernel_rem_pio2+0x2e0>
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	2200      	movs	r2, #0
 800c690:	2300      	movs	r3, #0
 800c692:	4630      	mov	r0, r6
 800c694:	4639      	mov	r1, r7
 800c696:	f7f4 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f000 80b4 	beq.w	800c808 <__kernel_rem_pio2+0x3e8>
 800c6a0:	f104 3bff 	add.w	fp, r4, #4294967295
 800c6a4:	465b      	mov	r3, fp
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	9904      	ldr	r1, [sp, #16]
 800c6aa:	428b      	cmp	r3, r1
 800c6ac:	da65      	bge.n	800c77a <__kernel_rem_pio2+0x35a>
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	d07b      	beq.n	800c7aa <__kernel_rem_pio2+0x38a>
 800c6b2:	ab0c      	add	r3, sp, #48	; 0x30
 800c6b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c6b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80a0 	beq.w	800c802 <__kernel_rem_pio2+0x3e2>
 800c6c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c748 <__kernel_rem_pio2+0x328>
 800c6c6:	4650      	mov	r0, sl
 800c6c8:	f000 fbca 	bl	800ce60 <scalbn>
 800c6cc:	4f23      	ldr	r7, [pc, #140]	; (800c75c <__kernel_rem_pio2+0x33c>)
 800c6ce:	ec55 4b10 	vmov	r4, r5, d0
 800c6d2:	46d8      	mov	r8, fp
 800c6d4:	2600      	movs	r6, #0
 800c6d6:	f1b8 0f00 	cmp.w	r8, #0
 800c6da:	f280 80cf 	bge.w	800c87c <__kernel_rem_pio2+0x45c>
 800c6de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c740 <__kernel_rem_pio2+0x320>
 800c6e2:	465f      	mov	r7, fp
 800c6e4:	f04f 0800 	mov.w	r8, #0
 800c6e8:	2f00      	cmp	r7, #0
 800c6ea:	f2c0 80fd 	blt.w	800c8e8 <__kernel_rem_pio2+0x4c8>
 800c6ee:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c768 <__kernel_rem_pio2+0x348>
 800c6f4:	ec55 4b18 	vmov	r4, r5, d8
 800c6f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c6fc:	2600      	movs	r6, #0
 800c6fe:	e0e5      	b.n	800c8cc <__kernel_rem_pio2+0x4ac>
 800c700:	2302      	movs	r3, #2
 800c702:	9302      	str	r3, [sp, #8]
 800c704:	e75c      	b.n	800c5c0 <__kernel_rem_pio2+0x1a0>
 800c706:	f8db 3000 	ldr.w	r3, [fp]
 800c70a:	b955      	cbnz	r5, 800c722 <__kernel_rem_pio2+0x302>
 800c70c:	b123      	cbz	r3, 800c718 <__kernel_rem_pio2+0x2f8>
 800c70e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c712:	f8cb 3000 	str.w	r3, [fp]
 800c716:	2301      	movs	r3, #1
 800c718:	3201      	adds	r2, #1
 800c71a:	f10b 0b04 	add.w	fp, fp, #4
 800c71e:	461d      	mov	r5, r3
 800c720:	e755      	b.n	800c5ce <__kernel_rem_pio2+0x1ae>
 800c722:	1acb      	subs	r3, r1, r3
 800c724:	f8cb 3000 	str.w	r3, [fp]
 800c728:	462b      	mov	r3, r5
 800c72a:	e7f5      	b.n	800c718 <__kernel_rem_pio2+0x2f8>
 800c72c:	1e62      	subs	r2, r4, #1
 800c72e:	ab0c      	add	r3, sp, #48	; 0x30
 800c730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c734:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c738:	a90c      	add	r1, sp, #48	; 0x30
 800c73a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c73e:	e754      	b.n	800c5ea <__kernel_rem_pio2+0x1ca>
	...
 800c74c:	3ff00000 	.word	0x3ff00000
 800c750:	0800d6d8 	.word	0x0800d6d8
 800c754:	40200000 	.word	0x40200000
 800c758:	3ff00000 	.word	0x3ff00000
 800c75c:	3e700000 	.word	0x3e700000
 800c760:	41700000 	.word	0x41700000
 800c764:	3fe00000 	.word	0x3fe00000
 800c768:	0800d698 	.word	0x0800d698
 800c76c:	1e62      	subs	r2, r4, #1
 800c76e:	ab0c      	add	r3, sp, #48	; 0x30
 800c770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c774:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c778:	e7de      	b.n	800c738 <__kernel_rem_pio2+0x318>
 800c77a:	a90c      	add	r1, sp, #48	; 0x30
 800c77c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c780:	3b01      	subs	r3, #1
 800c782:	430a      	orrs	r2, r1
 800c784:	e790      	b.n	800c6a8 <__kernel_rem_pio2+0x288>
 800c786:	3301      	adds	r3, #1
 800c788:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d0fa      	beq.n	800c786 <__kernel_rem_pio2+0x366>
 800c790:	9a08      	ldr	r2, [sp, #32]
 800c792:	18e3      	adds	r3, r4, r3
 800c794:	18a6      	adds	r6, r4, r2
 800c796:	aa20      	add	r2, sp, #128	; 0x80
 800c798:	1c65      	adds	r5, r4, #1
 800c79a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c79e:	9302      	str	r3, [sp, #8]
 800c7a0:	9b02      	ldr	r3, [sp, #8]
 800c7a2:	42ab      	cmp	r3, r5
 800c7a4:	da04      	bge.n	800c7b0 <__kernel_rem_pio2+0x390>
 800c7a6:	461c      	mov	r4, r3
 800c7a8:	e6b5      	b.n	800c516 <__kernel_rem_pio2+0xf6>
 800c7aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e7eb      	b.n	800c788 <__kernel_rem_pio2+0x368>
 800c7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7b6:	f7f3 fed5 	bl	8000564 <__aeabi_i2d>
 800c7ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	46b3      	mov	fp, r6
 800c7c2:	461c      	mov	r4, r3
 800c7c4:	2700      	movs	r7, #0
 800c7c6:	f04f 0800 	mov.w	r8, #0
 800c7ca:	f04f 0900 	mov.w	r9, #0
 800c7ce:	9b06      	ldr	r3, [sp, #24]
 800c7d0:	429f      	cmp	r7, r3
 800c7d2:	dd06      	ble.n	800c7e2 <__kernel_rem_pio2+0x3c2>
 800c7d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c7d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c7da:	e9c3 8900 	strd	r8, r9, [r3]
 800c7de:	3501      	adds	r5, #1
 800c7e0:	e7de      	b.n	800c7a0 <__kernel_rem_pio2+0x380>
 800c7e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c7e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c7ea:	f7f3 ff25 	bl	8000638 <__aeabi_dmul>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	f7f3 fd69 	bl	80002cc <__adddf3>
 800c7fa:	3701      	adds	r7, #1
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	4689      	mov	r9, r1
 800c800:	e7e5      	b.n	800c7ce <__kernel_rem_pio2+0x3ae>
 800c802:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c806:	e754      	b.n	800c6b2 <__kernel_rem_pio2+0x292>
 800c808:	ec47 6b10 	vmov	d0, r6, r7
 800c80c:	f1ca 0000 	rsb	r0, sl, #0
 800c810:	f000 fb26 	bl	800ce60 <scalbn>
 800c814:	ec57 6b10 	vmov	r6, r7, d0
 800c818:	4b9f      	ldr	r3, [pc, #636]	; (800ca98 <__kernel_rem_pio2+0x678>)
 800c81a:	ee10 0a10 	vmov	r0, s0
 800c81e:	2200      	movs	r2, #0
 800c820:	4639      	mov	r1, r7
 800c822:	f7f4 f98f 	bl	8000b44 <__aeabi_dcmpge>
 800c826:	b300      	cbz	r0, 800c86a <__kernel_rem_pio2+0x44a>
 800c828:	4b9c      	ldr	r3, [pc, #624]	; (800ca9c <__kernel_rem_pio2+0x67c>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	4630      	mov	r0, r6
 800c82e:	4639      	mov	r1, r7
 800c830:	f7f3 ff02 	bl	8000638 <__aeabi_dmul>
 800c834:	f7f4 f9b0 	bl	8000b98 <__aeabi_d2iz>
 800c838:	4605      	mov	r5, r0
 800c83a:	f7f3 fe93 	bl	8000564 <__aeabi_i2d>
 800c83e:	4b96      	ldr	r3, [pc, #600]	; (800ca98 <__kernel_rem_pio2+0x678>)
 800c840:	2200      	movs	r2, #0
 800c842:	f7f3 fef9 	bl	8000638 <__aeabi_dmul>
 800c846:	460b      	mov	r3, r1
 800c848:	4602      	mov	r2, r0
 800c84a:	4639      	mov	r1, r7
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7f3 fd3b 	bl	80002c8 <__aeabi_dsub>
 800c852:	f7f4 f9a1 	bl	8000b98 <__aeabi_d2iz>
 800c856:	f104 0b01 	add.w	fp, r4, #1
 800c85a:	ab0c      	add	r3, sp, #48	; 0x30
 800c85c:	f10a 0a18 	add.w	sl, sl, #24
 800c860:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c864:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c868:	e72b      	b.n	800c6c2 <__kernel_rem_pio2+0x2a2>
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f4 f993 	bl	8000b98 <__aeabi_d2iz>
 800c872:	ab0c      	add	r3, sp, #48	; 0x30
 800c874:	46a3      	mov	fp, r4
 800c876:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c87a:	e722      	b.n	800c6c2 <__kernel_rem_pio2+0x2a2>
 800c87c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c87e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c882:	ab0c      	add	r3, sp, #48	; 0x30
 800c884:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c888:	f7f3 fe6c 	bl	8000564 <__aeabi_i2d>
 800c88c:	4622      	mov	r2, r4
 800c88e:	462b      	mov	r3, r5
 800c890:	f7f3 fed2 	bl	8000638 <__aeabi_dmul>
 800c894:	4632      	mov	r2, r6
 800c896:	e9c9 0100 	strd	r0, r1, [r9]
 800c89a:	463b      	mov	r3, r7
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 feca 	bl	8000638 <__aeabi_dmul>
 800c8a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	e713      	b.n	800c6d6 <__kernel_rem_pio2+0x2b6>
 800c8ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c8b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c8b6:	f7f3 febf 	bl	8000638 <__aeabi_dmul>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f7f3 fd03 	bl	80002cc <__adddf3>
 800c8c6:	3601      	adds	r6, #1
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	9b04      	ldr	r3, [sp, #16]
 800c8ce:	429e      	cmp	r6, r3
 800c8d0:	dc01      	bgt.n	800c8d6 <__kernel_rem_pio2+0x4b6>
 800c8d2:	45b0      	cmp	r8, r6
 800c8d4:	daeb      	bge.n	800c8ae <__kernel_rem_pio2+0x48e>
 800c8d6:	ab48      	add	r3, sp, #288	; 0x120
 800c8d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c8dc:	e9c3 4500 	strd	r4, r5, [r3]
 800c8e0:	3f01      	subs	r7, #1
 800c8e2:	f108 0801 	add.w	r8, r8, #1
 800c8e6:	e6ff      	b.n	800c6e8 <__kernel_rem_pio2+0x2c8>
 800c8e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	dc0b      	bgt.n	800c906 <__kernel_rem_pio2+0x4e6>
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	dc6e      	bgt.n	800c9d0 <__kernel_rem_pio2+0x5b0>
 800c8f2:	d045      	beq.n	800c980 <__kernel_rem_pio2+0x560>
 800c8f4:	9b07      	ldr	r3, [sp, #28]
 800c8f6:	f003 0007 	and.w	r0, r3, #7
 800c8fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c8fe:	ecbd 8b02 	vpop	{d8}
 800c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d1f3      	bne.n	800c8f4 <__kernel_rem_pio2+0x4d4>
 800c90c:	ab48      	add	r3, sp, #288	; 0x120
 800c90e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c912:	46d0      	mov	r8, sl
 800c914:	46d9      	mov	r9, fp
 800c916:	f1b9 0f00 	cmp.w	r9, #0
 800c91a:	f1a8 0808 	sub.w	r8, r8, #8
 800c91e:	dc64      	bgt.n	800c9ea <__kernel_rem_pio2+0x5ca>
 800c920:	465c      	mov	r4, fp
 800c922:	2c01      	cmp	r4, #1
 800c924:	f1aa 0a08 	sub.w	sl, sl, #8
 800c928:	dc7e      	bgt.n	800ca28 <__kernel_rem_pio2+0x608>
 800c92a:	2000      	movs	r0, #0
 800c92c:	2100      	movs	r1, #0
 800c92e:	f1bb 0f01 	cmp.w	fp, #1
 800c932:	f300 8097 	bgt.w	800ca64 <__kernel_rem_pio2+0x644>
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c93c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c940:	2b00      	cmp	r3, #0
 800c942:	f040 8099 	bne.w	800ca78 <__kernel_rem_pio2+0x658>
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	e9c3 5600 	strd	r5, r6, [r3]
 800c94c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c950:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c954:	e7ce      	b.n	800c8f4 <__kernel_rem_pio2+0x4d4>
 800c956:	ab48      	add	r3, sp, #288	; 0x120
 800c958:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	f7f3 fcb4 	bl	80002cc <__adddf3>
 800c964:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c968:	f1bb 0f00 	cmp.w	fp, #0
 800c96c:	daf3      	bge.n	800c956 <__kernel_rem_pio2+0x536>
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	b113      	cbz	r3, 800c978 <__kernel_rem_pio2+0x558>
 800c972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c976:	4619      	mov	r1, r3
 800c978:	9b01      	ldr	r3, [sp, #4]
 800c97a:	e9c3 0100 	strd	r0, r1, [r3]
 800c97e:	e7b9      	b.n	800c8f4 <__kernel_rem_pio2+0x4d4>
 800c980:	2000      	movs	r0, #0
 800c982:	2100      	movs	r1, #0
 800c984:	e7f0      	b.n	800c968 <__kernel_rem_pio2+0x548>
 800c986:	ab48      	add	r3, sp, #288	; 0x120
 800c988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fc9c 	bl	80002cc <__adddf3>
 800c994:	3c01      	subs	r4, #1
 800c996:	2c00      	cmp	r4, #0
 800c998:	daf5      	bge.n	800c986 <__kernel_rem_pio2+0x566>
 800c99a:	9b02      	ldr	r3, [sp, #8]
 800c99c:	b1e3      	cbz	r3, 800c9d8 <__kernel_rem_pio2+0x5b8>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9a4:	9c01      	ldr	r4, [sp, #4]
 800c9a6:	e9c4 2300 	strd	r2, r3, [r4]
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c9b2:	f7f3 fc89 	bl	80002c8 <__aeabi_dsub>
 800c9b6:	ad4a      	add	r5, sp, #296	; 0x128
 800c9b8:	2401      	movs	r4, #1
 800c9ba:	45a3      	cmp	fp, r4
 800c9bc:	da0f      	bge.n	800c9de <__kernel_rem_pio2+0x5be>
 800c9be:	9b02      	ldr	r3, [sp, #8]
 800c9c0:	b113      	cbz	r3, 800c9c8 <__kernel_rem_pio2+0x5a8>
 800c9c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	9b01      	ldr	r3, [sp, #4]
 800c9ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c9ce:	e791      	b.n	800c8f4 <__kernel_rem_pio2+0x4d4>
 800c9d0:	465c      	mov	r4, fp
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	e7de      	b.n	800c996 <__kernel_rem_pio2+0x576>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	e7e2      	b.n	800c9a4 <__kernel_rem_pio2+0x584>
 800c9de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c9e2:	f7f3 fc73 	bl	80002cc <__adddf3>
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	e7e7      	b.n	800c9ba <__kernel_rem_pio2+0x59a>
 800c9ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c9ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	463b      	mov	r3, r7
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	f7f3 fc67 	bl	80002cc <__adddf3>
 800c9fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4620      	mov	r0, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	f7f3 fc5d 	bl	80002c8 <__aeabi_dsub>
 800ca0e:	4632      	mov	r2, r6
 800ca10:	463b      	mov	r3, r7
 800ca12:	f7f3 fc5b 	bl	80002cc <__adddf3>
 800ca16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ca1a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ca1e:	ed88 7b00 	vstr	d7, [r8]
 800ca22:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca26:	e776      	b.n	800c916 <__kernel_rem_pio2+0x4f6>
 800ca28:	e9da 8900 	ldrd	r8, r9, [sl]
 800ca2c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ca30:	4640      	mov	r0, r8
 800ca32:	4632      	mov	r2, r6
 800ca34:	463b      	mov	r3, r7
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fc48 	bl	80002cc <__adddf3>
 800ca3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4640      	mov	r0, r8
 800ca46:	4649      	mov	r1, r9
 800ca48:	f7f3 fc3e 	bl	80002c8 <__aeabi_dsub>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	f7f3 fc3c 	bl	80002cc <__adddf3>
 800ca54:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ca58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca5c:	ed8a 7b00 	vstr	d7, [sl]
 800ca60:	3c01      	subs	r4, #1
 800ca62:	e75e      	b.n	800c922 <__kernel_rem_pio2+0x502>
 800ca64:	ab48      	add	r3, sp, #288	; 0x120
 800ca66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f7f3 fc2d 	bl	80002cc <__adddf3>
 800ca72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ca76:	e75a      	b.n	800c92e <__kernel_rem_pio2+0x50e>
 800ca78:	9b01      	ldr	r3, [sp, #4]
 800ca7a:	9a01      	ldr	r2, [sp, #4]
 800ca7c:	601d      	str	r5, [r3, #0]
 800ca7e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ca82:	605c      	str	r4, [r3, #4]
 800ca84:	609f      	str	r7, [r3, #8]
 800ca86:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ca8a:	60d3      	str	r3, [r2, #12]
 800ca8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca90:	6110      	str	r0, [r2, #16]
 800ca92:	6153      	str	r3, [r2, #20]
 800ca94:	e72e      	b.n	800c8f4 <__kernel_rem_pio2+0x4d4>
 800ca96:	bf00      	nop
 800ca98:	41700000 	.word	0x41700000
 800ca9c:	3e700000 	.word	0x3e700000

0800caa0 <__kernel_sin>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	ed2d 8b04 	vpush	{d8-d9}
 800caa8:	eeb0 8a41 	vmov.f32	s16, s2
 800caac:	eef0 8a61 	vmov.f32	s17, s3
 800cab0:	ec55 4b10 	vmov	r4, r5, d0
 800cab4:	b083      	sub	sp, #12
 800cab6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800caba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cabe:	9001      	str	r0, [sp, #4]
 800cac0:	da06      	bge.n	800cad0 <__kernel_sin+0x30>
 800cac2:	ee10 0a10 	vmov	r0, s0
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f4 f866 	bl	8000b98 <__aeabi_d2iz>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d051      	beq.n	800cb74 <__kernel_sin+0xd4>
 800cad0:	4622      	mov	r2, r4
 800cad2:	462b      	mov	r3, r5
 800cad4:	4620      	mov	r0, r4
 800cad6:	4629      	mov	r1, r5
 800cad8:	f7f3 fdae 	bl	8000638 <__aeabi_dmul>
 800cadc:	4682      	mov	sl, r0
 800cade:	468b      	mov	fp, r1
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4620      	mov	r0, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	f7f3 fda6 	bl	8000638 <__aeabi_dmul>
 800caec:	a341      	add	r3, pc, #260	; (adr r3, 800cbf4 <__kernel_sin+0x154>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	4680      	mov	r8, r0
 800caf4:	4689      	mov	r9, r1
 800caf6:	4650      	mov	r0, sl
 800caf8:	4659      	mov	r1, fp
 800cafa:	f7f3 fd9d 	bl	8000638 <__aeabi_dmul>
 800cafe:	a33f      	add	r3, pc, #252	; (adr r3, 800cbfc <__kernel_sin+0x15c>)
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	f7f3 fbe0 	bl	80002c8 <__aeabi_dsub>
 800cb08:	4652      	mov	r2, sl
 800cb0a:	465b      	mov	r3, fp
 800cb0c:	f7f3 fd94 	bl	8000638 <__aeabi_dmul>
 800cb10:	a33c      	add	r3, pc, #240	; (adr r3, 800cc04 <__kernel_sin+0x164>)
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	f7f3 fbd9 	bl	80002cc <__adddf3>
 800cb1a:	4652      	mov	r2, sl
 800cb1c:	465b      	mov	r3, fp
 800cb1e:	f7f3 fd8b 	bl	8000638 <__aeabi_dmul>
 800cb22:	a33a      	add	r3, pc, #232	; (adr r3, 800cc0c <__kernel_sin+0x16c>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	f7f3 fbce 	bl	80002c8 <__aeabi_dsub>
 800cb2c:	4652      	mov	r2, sl
 800cb2e:	465b      	mov	r3, fp
 800cb30:	f7f3 fd82 	bl	8000638 <__aeabi_dmul>
 800cb34:	a337      	add	r3, pc, #220	; (adr r3, 800cc14 <__kernel_sin+0x174>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	f7f3 fbc7 	bl	80002cc <__adddf3>
 800cb3e:	9b01      	ldr	r3, [sp, #4]
 800cb40:	4606      	mov	r6, r0
 800cb42:	460f      	mov	r7, r1
 800cb44:	b9eb      	cbnz	r3, 800cb82 <__kernel_sin+0xe2>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4650      	mov	r0, sl
 800cb4c:	4659      	mov	r1, fp
 800cb4e:	f7f3 fd73 	bl	8000638 <__aeabi_dmul>
 800cb52:	a325      	add	r3, pc, #148	; (adr r3, 800cbe8 <__kernel_sin+0x148>)
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	f7f3 fbb6 	bl	80002c8 <__aeabi_dsub>
 800cb5c:	4642      	mov	r2, r8
 800cb5e:	464b      	mov	r3, r9
 800cb60:	f7f3 fd6a 	bl	8000638 <__aeabi_dmul>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4620      	mov	r0, r4
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f7f3 fbae 	bl	80002cc <__adddf3>
 800cb70:	4604      	mov	r4, r0
 800cb72:	460d      	mov	r5, r1
 800cb74:	ec45 4b10 	vmov	d0, r4, r5
 800cb78:	b003      	add	sp, #12
 800cb7a:	ecbd 8b04 	vpop	{d8-d9}
 800cb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb82:	4b1b      	ldr	r3, [pc, #108]	; (800cbf0 <__kernel_sin+0x150>)
 800cb84:	ec51 0b18 	vmov	r0, r1, d8
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f7f3 fd55 	bl	8000638 <__aeabi_dmul>
 800cb8e:	4632      	mov	r2, r6
 800cb90:	ec41 0b19 	vmov	d9, r0, r1
 800cb94:	463b      	mov	r3, r7
 800cb96:	4640      	mov	r0, r8
 800cb98:	4649      	mov	r1, r9
 800cb9a:	f7f3 fd4d 	bl	8000638 <__aeabi_dmul>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	ec51 0b19 	vmov	r0, r1, d9
 800cba6:	f7f3 fb8f 	bl	80002c8 <__aeabi_dsub>
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	f7f3 fd43 	bl	8000638 <__aeabi_dmul>
 800cbb2:	ec53 2b18 	vmov	r2, r3, d8
 800cbb6:	f7f3 fb87 	bl	80002c8 <__aeabi_dsub>
 800cbba:	a30b      	add	r3, pc, #44	; (adr r3, 800cbe8 <__kernel_sin+0x148>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	4606      	mov	r6, r0
 800cbc2:	460f      	mov	r7, r1
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	f7f3 fd36 	bl	8000638 <__aeabi_dmul>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f7f3 fb7a 	bl	80002cc <__adddf3>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f7f3 fb72 	bl	80002c8 <__aeabi_dsub>
 800cbe4:	e7c4      	b.n	800cb70 <__kernel_sin+0xd0>
 800cbe6:	bf00      	nop
 800cbe8:	55555549 	.word	0x55555549
 800cbec:	3fc55555 	.word	0x3fc55555
 800cbf0:	3fe00000 	.word	0x3fe00000
 800cbf4:	5acfd57c 	.word	0x5acfd57c
 800cbf8:	3de5d93a 	.word	0x3de5d93a
 800cbfc:	8a2b9ceb 	.word	0x8a2b9ceb
 800cc00:	3e5ae5e6 	.word	0x3e5ae5e6
 800cc04:	57b1fe7d 	.word	0x57b1fe7d
 800cc08:	3ec71de3 	.word	0x3ec71de3
 800cc0c:	19c161d5 	.word	0x19c161d5
 800cc10:	3f2a01a0 	.word	0x3f2a01a0
 800cc14:	1110f8a6 	.word	0x1110f8a6
 800cc18:	3f811111 	.word	0x3f811111

0800cc1c <finite>:
 800cc1c:	b082      	sub	sp, #8
 800cc1e:	ed8d 0b00 	vstr	d0, [sp]
 800cc22:	9801      	ldr	r0, [sp, #4]
 800cc24:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cc28:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cc2c:	0fc0      	lsrs	r0, r0, #31
 800cc2e:	b002      	add	sp, #8
 800cc30:	4770      	bx	lr
 800cc32:	0000      	movs	r0, r0
 800cc34:	0000      	movs	r0, r0
	...

0800cc38 <floor>:
 800cc38:	ec51 0b10 	vmov	r0, r1, d0
 800cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cc44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cc48:	2e13      	cmp	r6, #19
 800cc4a:	ee10 5a10 	vmov	r5, s0
 800cc4e:	ee10 8a10 	vmov	r8, s0
 800cc52:	460c      	mov	r4, r1
 800cc54:	dc32      	bgt.n	800ccbc <floor+0x84>
 800cc56:	2e00      	cmp	r6, #0
 800cc58:	da14      	bge.n	800cc84 <floor+0x4c>
 800cc5a:	a333      	add	r3, pc, #204	; (adr r3, 800cd28 <floor+0xf0>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fb34 	bl	80002cc <__adddf3>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	f7f3 ff76 	bl	8000b58 <__aeabi_dcmpgt>
 800cc6c:	b138      	cbz	r0, 800cc7e <floor+0x46>
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	da57      	bge.n	800cd22 <floor+0xea>
 800cc72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cc76:	431d      	orrs	r5, r3
 800cc78:	d001      	beq.n	800cc7e <floor+0x46>
 800cc7a:	4c2d      	ldr	r4, [pc, #180]	; (800cd30 <floor+0xf8>)
 800cc7c:	2500      	movs	r5, #0
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4628      	mov	r0, r5
 800cc82:	e025      	b.n	800ccd0 <floor+0x98>
 800cc84:	4f2b      	ldr	r7, [pc, #172]	; (800cd34 <floor+0xfc>)
 800cc86:	4137      	asrs	r7, r6
 800cc88:	ea01 0307 	and.w	r3, r1, r7
 800cc8c:	4303      	orrs	r3, r0
 800cc8e:	d01f      	beq.n	800ccd0 <floor+0x98>
 800cc90:	a325      	add	r3, pc, #148	; (adr r3, 800cd28 <floor+0xf0>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 fb19 	bl	80002cc <__adddf3>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f7f3 ff5b 	bl	8000b58 <__aeabi_dcmpgt>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d0eb      	beq.n	800cc7e <floor+0x46>
 800cca6:	2c00      	cmp	r4, #0
 800cca8:	bfbe      	ittt	lt
 800ccaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ccae:	fa43 f606 	asrlt.w	r6, r3, r6
 800ccb2:	19a4      	addlt	r4, r4, r6
 800ccb4:	ea24 0407 	bic.w	r4, r4, r7
 800ccb8:	2500      	movs	r5, #0
 800ccba:	e7e0      	b.n	800cc7e <floor+0x46>
 800ccbc:	2e33      	cmp	r6, #51	; 0x33
 800ccbe:	dd0b      	ble.n	800ccd8 <floor+0xa0>
 800ccc0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ccc4:	d104      	bne.n	800ccd0 <floor+0x98>
 800ccc6:	ee10 2a10 	vmov	r2, s0
 800ccca:	460b      	mov	r3, r1
 800cccc:	f7f3 fafe 	bl	80002cc <__adddf3>
 800ccd0:	ec41 0b10 	vmov	d0, r0, r1
 800ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ccdc:	f04f 33ff 	mov.w	r3, #4294967295
 800cce0:	fa23 f707 	lsr.w	r7, r3, r7
 800cce4:	4207      	tst	r7, r0
 800cce6:	d0f3      	beq.n	800ccd0 <floor+0x98>
 800cce8:	a30f      	add	r3, pc, #60	; (adr r3, 800cd28 <floor+0xf0>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7f3 faed 	bl	80002cc <__adddf3>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f7f3 ff2f 	bl	8000b58 <__aeabi_dcmpgt>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d0bf      	beq.n	800cc7e <floor+0x46>
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	da02      	bge.n	800cd08 <floor+0xd0>
 800cd02:	2e14      	cmp	r6, #20
 800cd04:	d103      	bne.n	800cd0e <floor+0xd6>
 800cd06:	3401      	adds	r4, #1
 800cd08:	ea25 0507 	bic.w	r5, r5, r7
 800cd0c:	e7b7      	b.n	800cc7e <floor+0x46>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd14:	fa03 f606 	lsl.w	r6, r3, r6
 800cd18:	4435      	add	r5, r6
 800cd1a:	4545      	cmp	r5, r8
 800cd1c:	bf38      	it	cc
 800cd1e:	18e4      	addcc	r4, r4, r3
 800cd20:	e7f2      	b.n	800cd08 <floor+0xd0>
 800cd22:	2500      	movs	r5, #0
 800cd24:	462c      	mov	r4, r5
 800cd26:	e7aa      	b.n	800cc7e <floor+0x46>
 800cd28:	8800759c 	.word	0x8800759c
 800cd2c:	7e37e43c 	.word	0x7e37e43c
 800cd30:	bff00000 	.word	0xbff00000
 800cd34:	000fffff 	.word	0x000fffff

0800cd38 <nan>:
 800cd38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd40 <nan+0x8>
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	00000000 	.word	0x00000000
 800cd44:	7ff80000 	.word	0x7ff80000

0800cd48 <rint>:
 800cd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd4a:	ec51 0b10 	vmov	r0, r1, d0
 800cd4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cd56:	2e13      	cmp	r6, #19
 800cd58:	ee10 4a10 	vmov	r4, s0
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cd62:	dc58      	bgt.n	800ce16 <rint+0xce>
 800cd64:	2e00      	cmp	r6, #0
 800cd66:	da2b      	bge.n	800cdc0 <rint+0x78>
 800cd68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cd6c:	4302      	orrs	r2, r0
 800cd6e:	d023      	beq.n	800cdb8 <rint+0x70>
 800cd70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cd74:	4302      	orrs	r2, r0
 800cd76:	4254      	negs	r4, r2
 800cd78:	4314      	orrs	r4, r2
 800cd7a:	0c4b      	lsrs	r3, r1, #17
 800cd7c:	0b24      	lsrs	r4, r4, #12
 800cd7e:	045b      	lsls	r3, r3, #17
 800cd80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cd84:	ea44 0103 	orr.w	r1, r4, r3
 800cd88:	4b32      	ldr	r3, [pc, #200]	; (800ce54 <rint+0x10c>)
 800cd8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fa97 	bl	80002cc <__adddf3>
 800cd9e:	e9cd 0100 	strd	r0, r1, [sp]
 800cda2:	463b      	mov	r3, r7
 800cda4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cda8:	4632      	mov	r2, r6
 800cdaa:	f7f3 fa8d 	bl	80002c8 <__aeabi_dsub>
 800cdae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	ec41 0b10 	vmov	d0, r0, r1
 800cdbc:	b003      	add	sp, #12
 800cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc0:	4a25      	ldr	r2, [pc, #148]	; (800ce58 <rint+0x110>)
 800cdc2:	4132      	asrs	r2, r6
 800cdc4:	ea01 0702 	and.w	r7, r1, r2
 800cdc8:	4307      	orrs	r7, r0
 800cdca:	d0f5      	beq.n	800cdb8 <rint+0x70>
 800cdcc:	0851      	lsrs	r1, r2, #1
 800cdce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cdd2:	4314      	orrs	r4, r2
 800cdd4:	d00c      	beq.n	800cdf0 <rint+0xa8>
 800cdd6:	ea23 0201 	bic.w	r2, r3, r1
 800cdda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cdde:	2e13      	cmp	r6, #19
 800cde0:	fa43 f606 	asr.w	r6, r3, r6
 800cde4:	bf0c      	ite	eq
 800cde6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cdea:	2400      	movne	r4, #0
 800cdec:	ea42 0306 	orr.w	r3, r2, r6
 800cdf0:	4918      	ldr	r1, [pc, #96]	; (800ce54 <rint+0x10c>)
 800cdf2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f7f3 fa64 	bl	80002cc <__adddf3>
 800ce04:	e9cd 0100 	strd	r0, r1, [sp]
 800ce08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f7f3 fa5a 	bl	80002c8 <__aeabi_dsub>
 800ce14:	e7d0      	b.n	800cdb8 <rint+0x70>
 800ce16:	2e33      	cmp	r6, #51	; 0x33
 800ce18:	dd07      	ble.n	800ce2a <rint+0xe2>
 800ce1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ce1e:	d1cb      	bne.n	800cdb8 <rint+0x70>
 800ce20:	ee10 2a10 	vmov	r2, s0
 800ce24:	f7f3 fa52 	bl	80002cc <__adddf3>
 800ce28:	e7c6      	b.n	800cdb8 <rint+0x70>
 800ce2a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ce2e:	f04f 36ff 	mov.w	r6, #4294967295
 800ce32:	40d6      	lsrs	r6, r2
 800ce34:	4230      	tst	r0, r6
 800ce36:	d0bf      	beq.n	800cdb8 <rint+0x70>
 800ce38:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ce3c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ce40:	bf1f      	itttt	ne
 800ce42:	ea24 0101 	bicne.w	r1, r4, r1
 800ce46:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ce4a:	fa44 f202 	asrne.w	r2, r4, r2
 800ce4e:	ea41 0402 	orrne.w	r4, r1, r2
 800ce52:	e7cd      	b.n	800cdf0 <rint+0xa8>
 800ce54:	0800d6e8 	.word	0x0800d6e8
 800ce58:	000fffff 	.word	0x000fffff
 800ce5c:	00000000 	.word	0x00000000

0800ce60 <scalbn>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	ec55 4b10 	vmov	r4, r5, d0
 800ce66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	462b      	mov	r3, r5
 800ce6e:	b99a      	cbnz	r2, 800ce98 <scalbn+0x38>
 800ce70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce74:	4323      	orrs	r3, r4
 800ce76:	d036      	beq.n	800cee6 <scalbn+0x86>
 800ce78:	4b39      	ldr	r3, [pc, #228]	; (800cf60 <scalbn+0x100>)
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	ee10 0a10 	vmov	r0, s0
 800ce80:	2200      	movs	r2, #0
 800ce82:	f7f3 fbd9 	bl	8000638 <__aeabi_dmul>
 800ce86:	4b37      	ldr	r3, [pc, #220]	; (800cf64 <scalbn+0x104>)
 800ce88:	429e      	cmp	r6, r3
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	da10      	bge.n	800ceb2 <scalbn+0x52>
 800ce90:	a32b      	add	r3, pc, #172	; (adr r3, 800cf40 <scalbn+0xe0>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	e03a      	b.n	800cf0e <scalbn+0xae>
 800ce98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ce9c:	428a      	cmp	r2, r1
 800ce9e:	d10c      	bne.n	800ceba <scalbn+0x5a>
 800cea0:	ee10 2a10 	vmov	r2, s0
 800cea4:	4620      	mov	r0, r4
 800cea6:	4629      	mov	r1, r5
 800cea8:	f7f3 fa10 	bl	80002cc <__adddf3>
 800ceac:	4604      	mov	r4, r0
 800ceae:	460d      	mov	r5, r1
 800ceb0:	e019      	b.n	800cee6 <scalbn+0x86>
 800ceb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	3a36      	subs	r2, #54	; 0x36
 800ceba:	4432      	add	r2, r6
 800cebc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cec0:	428a      	cmp	r2, r1
 800cec2:	dd08      	ble.n	800ced6 <scalbn+0x76>
 800cec4:	2d00      	cmp	r5, #0
 800cec6:	a120      	add	r1, pc, #128	; (adr r1, 800cf48 <scalbn+0xe8>)
 800cec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cecc:	da1c      	bge.n	800cf08 <scalbn+0xa8>
 800cece:	a120      	add	r1, pc, #128	; (adr r1, 800cf50 <scalbn+0xf0>)
 800ced0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced4:	e018      	b.n	800cf08 <scalbn+0xa8>
 800ced6:	2a00      	cmp	r2, #0
 800ced8:	dd08      	ble.n	800ceec <scalbn+0x8c>
 800ceda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cee2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cee6:	ec45 4b10 	vmov	d0, r4, r5
 800ceea:	bd70      	pop	{r4, r5, r6, pc}
 800ceec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cef0:	da19      	bge.n	800cf26 <scalbn+0xc6>
 800cef2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cef6:	429e      	cmp	r6, r3
 800cef8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cefc:	dd0a      	ble.n	800cf14 <scalbn+0xb4>
 800cefe:	a112      	add	r1, pc, #72	; (adr r1, 800cf48 <scalbn+0xe8>)
 800cf00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e2      	bne.n	800cece <scalbn+0x6e>
 800cf08:	a30f      	add	r3, pc, #60	; (adr r3, 800cf48 <scalbn+0xe8>)
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	f7f3 fb93 	bl	8000638 <__aeabi_dmul>
 800cf12:	e7cb      	b.n	800ceac <scalbn+0x4c>
 800cf14:	a10a      	add	r1, pc, #40	; (adr r1, 800cf40 <scalbn+0xe0>)
 800cf16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d0b8      	beq.n	800ce90 <scalbn+0x30>
 800cf1e:	a10e      	add	r1, pc, #56	; (adr r1, 800cf58 <scalbn+0xf8>)
 800cf20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf24:	e7b4      	b.n	800ce90 <scalbn+0x30>
 800cf26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf2a:	3236      	adds	r2, #54	; 0x36
 800cf2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cf34:	4620      	mov	r0, r4
 800cf36:	4b0c      	ldr	r3, [pc, #48]	; (800cf68 <scalbn+0x108>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	e7e8      	b.n	800cf0e <scalbn+0xae>
 800cf3c:	f3af 8000 	nop.w
 800cf40:	c2f8f359 	.word	0xc2f8f359
 800cf44:	01a56e1f 	.word	0x01a56e1f
 800cf48:	8800759c 	.word	0x8800759c
 800cf4c:	7e37e43c 	.word	0x7e37e43c
 800cf50:	8800759c 	.word	0x8800759c
 800cf54:	fe37e43c 	.word	0xfe37e43c
 800cf58:	c2f8f359 	.word	0xc2f8f359
 800cf5c:	81a56e1f 	.word	0x81a56e1f
 800cf60:	43500000 	.word	0x43500000
 800cf64:	ffff3cb0 	.word	0xffff3cb0
 800cf68:	3c900000 	.word	0x3c900000

0800cf6c <_getpid>:
 800cf6c:	4b02      	ldr	r3, [pc, #8]	; (800cf78 <_getpid+0xc>)
 800cf6e:	2258      	movs	r2, #88	; 0x58
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	f04f 30ff 	mov.w	r0, #4294967295
 800cf76:	4770      	bx	lr
 800cf78:	2000089c 	.word	0x2000089c

0800cf7c <_kill>:
 800cf7c:	4b02      	ldr	r3, [pc, #8]	; (800cf88 <_kill+0xc>)
 800cf7e:	2258      	movs	r2, #88	; 0x58
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	f04f 30ff 	mov.w	r0, #4294967295
 800cf86:	4770      	bx	lr
 800cf88:	2000089c 	.word	0x2000089c

0800cf8c <_exit>:
 800cf8c:	e7fe      	b.n	800cf8c <_exit>
	...

0800cf90 <_init>:
 800cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf92:	bf00      	nop
 800cf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf96:	bc08      	pop	{r3}
 800cf98:	469e      	mov	lr, r3
 800cf9a:	4770      	bx	lr

0800cf9c <_fini>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	bf00      	nop
 800cfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfa2:	bc08      	pop	{r3}
 800cfa4:	469e      	mov	lr, r3
 800cfa6:	4770      	bx	lr
