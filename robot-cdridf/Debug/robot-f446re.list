
robot-f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800d380  0800d380  0001d380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da80  0800da80  000202a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800da80  0800da80  0001da80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da88  0800da88  000202a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da88  0800da88  0001da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da8c  0800da8c  0001da8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  0800da90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200002a8  0800dd38  000202a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  0800dd38  00020880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020aca  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004444  00000000  00000000  00040da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000451e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00046480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d4d  00000000  00000000  00047548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019932  00000000  00000000  0006f295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b10  00000000  00000000  00088bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001696d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  0016972c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016f7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a8 	.word	0x200002a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d368 	.word	0x0800d368

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002ac 	.word	0x200002ac
 800020c:	0800d368 	.word	0x0800d368

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AX12_Init>:
#include <AX12.h>


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	715a      	strb	r2, [r3, #5]

}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fc3a 	bl	800088c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fde2 	bl	8000be8 <__aeabi_d2uiz>
 8001024:	4603      	mov	r3, r0
 8001026:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff faad 	bl	8000588 <__aeabi_f2d>
 800102e:	a30e      	add	r3, pc, #56	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdd2 	bl	8000be8 <__aeabi_d2uiz>
 8001044:	4603      	mov	r3, r0
 8001046:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	461a      	mov	r2, r3
 800104c:	2106      	movs	r1, #6
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f9c2 	bl	80013d8 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001054:	8abb      	ldrh	r3, [r7, #20]
 8001056:	461a      	mov	r2, r3
 8001058:	2108      	movs	r1, #8
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f9bc 	bl	80013d8 <AX12_sendTram2Byte>

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2c54bf16 	.word	0x2c54bf16
 800106c:	3fd2c4b1 	.word	0x3fd2c4b1

08001070 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 800107c:	edd7 7a00 	vldr	s15, [r7]
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 3a90 	vmov	r3, s15
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa6a 	bl	8000564 <__aeabi_i2d>
 8001090:	a30b      	add	r3, pc, #44	; (adr r3, 80010c0 <AX12_setMaxTorque+0x50>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fbf9 	bl	800088c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fda1 	bl	8000be8 <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	461a      	mov	r2, r3
 80010ae:	210e      	movs	r1, #14
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f991 	bl	80013d8 <AX12_sendTram2Byte>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	905eab89 	.word	0x905eab89
 80010c4:	3fb90641 	.word	0x3fb90641

080010c8 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2118      	movs	r1, #24
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f966 	bl	80013ac <AX12_sendTram1Byte>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa2e 	bl	8000564 <__aeabi_i2d>
 8001108:	a30b      	add	r3, pc, #44	; (adr r3, 8001138 <AX12_setPosition+0x50>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbbd 	bl	800088c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd65 	bl	8000be8 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	461a      	mov	r2, r3
 8001126:	211e      	movs	r1, #30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f955 	bl	80013d8 <AX12_sendTram2Byte>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2c54bf16 	.word	0x2c54bf16
 800113c:	3fd2c4b1 	.word	0x3fd2c4b1

08001140 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 800114c:	edd7 7a00 	vldr	s15, [r7]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa02 	bl	8000564 <__aeabi_i2d>
 8001160:	a30b      	add	r3, pc, #44	; (adr r3, 8001190 <AX12_setMovingSpeed+0x50>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb91 	bl	800088c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd39 	bl	8000be8 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	461a      	mov	r2, r3
 800117e:	2120      	movs	r1, #32
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f929 	bl	80013d8 <AX12_sendTram2Byte>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	c83ed809 	.word	0xc83ed809
 8001194:	3fbc8721 	.word	0x3fbc8721

08001198 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001198:	b408      	push	{r3}
 800119a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
 80011ac:	466b      	mov	r3, sp
 80011ae:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 80011b6:	78fc      	ldrb	r4, [r7, #3]
 80011b8:	4623      	mov	r3, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	b2e0      	uxtb	r0, r4
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	00cb      	lsls	r3, r1, #3
 80011ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011d2:	00c2      	lsls	r2, r0, #3
 80011d4:	b2e0      	uxtb	r0, r4
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	00cb      	lsls	r3, r1, #3
 80011e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011e8:	00c2      	lsls	r2, r0, #3
 80011ea:	4623      	mov	r3, r4
 80011ec:	3307      	adds	r3, #7
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	ebad 0d03 	sub.w	sp, sp, r3
 80011f6:	ab02      	add	r3, sp, #8
 80011f8:	3300      	adds	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791a      	ldrb	r2, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001210:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001214:	3302      	adds	r3, #2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	e00b      	b.n	8001240 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3305      	adds	r3, #5
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	3301      	adds	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	7dfa      	ldrb	r2, [r7, #23]
 8001242:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001246:	429a      	cmp	r2, r3
 8001248:	d3ee      	bcc.n	8001228 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 800124a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800124e:	2b03      	cmp	r3, #3
 8001250:	d867      	bhi.n	8001322 <AX12_sendData+0x18a>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <AX12_sendData+0xc0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001291 	.word	0x08001291
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012ed 	.word	0x080012ed
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7898      	ldrb	r0, [r3, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	78d9      	ldrb	r1, [r3, #3]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	791a      	ldrb	r2, [r3, #4]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	1e5c      	subs	r4, r3, #1
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	f000 f861 	bl	8001348 <AX12_calculChecksum>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	551a      	strb	r2, [r3, r4]
 800128e:	e049      	b.n	8001324 <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7898      	ldrb	r0, [r3, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	78d9      	ldrb	r1, [r3, #3]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	791a      	ldrb	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	795d      	ldrb	r5, [r3, #5]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	1e5c      	subs	r4, r3, #1
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	f000 f84b 	bl	8001348 <AX12_calculChecksum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	551a      	strb	r2, [r3, r4]
 80012ba:	e033      	b.n	8001324 <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7898      	ldrb	r0, [r3, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	78d9      	ldrb	r1, [r3, #3]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	791d      	ldrb	r5, [r3, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	795e      	ldrb	r6, [r3, #5]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	1e54      	subs	r4, r2, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4633      	mov	r3, r6
 80012dc:	462a      	mov	r2, r5
 80012de:	f000 f833 	bl	8001348 <AX12_calculChecksum>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	551a      	strb	r2, [r3, r4]
 80012ea:	e01b      	b.n	8001324 <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	7898      	ldrb	r0, [r3, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	78dd      	ldrb	r5, [r3, #3]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	791e      	ldrb	r6, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 c005 	ldrb.w	ip, [r3, #5]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	79d2      	ldrb	r2, [r2, #7]
 8001306:	78f9      	ldrb	r1, [r7, #3]
 8001308:	1e4c      	subs	r4, r1, #1
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4663      	mov	r3, ip
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	f000 f818 	bl	8001348 <AX12_calculChecksum>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	551a      	strb	r2, [r3, r4]
 8001320:	e000      	b.n	8001324 <AX12_sendData+0x18c>
	default : break;
 8001322:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	b29a      	uxth	r2, r3
 800132e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001332:	f005 ff48 	bl	80071c6 <HAL_UART_Transmit>
 8001336:	46c5      	mov	sp, r8
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b001      	add	sp, #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	b29a      	uxth	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	7e3b      	ldrb	r3, [r7, #24]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	7f3b      	ldrb	r3, [r7, #28]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	43db      	mvns	r3, r3
 8001396:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr

080013ac <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2203      	movs	r2, #3
 80013c8:	2108      	movs	r1, #8
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fee4 	bl	8001198 <AX12_sendData>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 80013e8:	883b      	ldrh	r3, [r7, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bf9      	ldrb	r1, [r7, #15]
 80013fa:	9102      	str	r1, [sp, #8]
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	2203      	movs	r2, #3
 8001404:	2109      	movs	r1, #9
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fec6 	bl	8001198 <AX12_sendData>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <DRV8825_init>:
#include "DRV8825.h"

void DRV8825_init(Moteur *drv8825,uint16_t PIN_EN, GPIO_TypeDef * GPIO_EN, uint16_t PIN_DIR, GPIO_TypeDef * GPIO_DIR,TIM_HandleTypeDef* timer, uint8_t chanel){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
	/*****************************************
	 * nous récupérons les numéros des pins  *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->pin_EN = PIN_EN;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	897a      	ldrh	r2, [r7, #10]
 800142c:	815a      	strh	r2, [r3, #10]
	drv8825->pin_DIR = PIN_DIR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	801a      	strh	r2, [r3, #0]
	/*****************************************
	 * nous récupérons les GPIO des pins     *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->gpio_EN= GPIO_EN;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
	drv8825->gpio_DIR= GPIO_DIR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]

	/**********************************************
	 * nous initialisatons le timer et récupérons *
	 * à quelle chanel il est racroché 			  *
	 **********************************************/
	drv8825->timer = timer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
	drv8825->chanel = chanel;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f897 2020 	ldrb.w	r2, [r7, #32]
 800144c:	751a      	strb	r2, [r3, #20]

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DRV8825_setDir>:

void DRV8825_setDir(Moteur* drv8825,uint8_t dir){
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(drv8825->gpio_DIR,drv8825->pin_DIR,dir);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6858      	ldr	r0, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	f003 feb5 	bl	80051e0 <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <DRV8825_setStart>:

void DRV8825_setStart(Moteur* drv8825,uint8_t enable){
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(drv8825->gpio_EN,drv8825->pin_EN,enable);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68d8      	ldr	r0, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	895b      	ldrh	r3, [r3, #10]
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	f003 fea3 	bl	80051e0 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	0000      	movs	r0, r0
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <DRV8825_moveMotorLineSpeed>:
	rpm = rpm/M_TO_S;
	uint16_t f = PAS*rpm;
	DRV8825_setFrequency(drv8825, f);
}

void DRV8825_moveMotorLineSpeed(Moteur* drv8825,float vitesse){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	ed87 0a00 	vstr	s0, [r7]
	vitesse= vitesse*1000;
 80014b4:	edd7 7a00 	vldr	s15, [r7]
 80014b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001510 <DRV8825_moveMotorLineSpeed+0x68>
 80014bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c0:	edc7 7a00 	vstr	s15, [r7]
	uint16_t f = (PAS*vitesse)/(2*M_PI*RAYON);
 80014c4:	edd7 7a00 	vldr	s15, [r7]
 80014c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001514 <DRV8825_moveMotorLineSpeed+0x6c>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f7ff f858 	bl	8000588 <__aeabi_f2d>
 80014d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001508 <DRV8825_moveMotorLineSpeed+0x60>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9d5 	bl	800088c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb7d 	bl	8000be8 <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
	DRV8825_setFrequency(drv8825, f);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f80e 	bl	8001518 <DRV8825_setFrequency>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	71f1350d 	.word	0x71f1350d
 800150c:	40643451 	.word	0x40643451
 8001510:	447a0000 	.word	0x447a0000
 8001514:	43480000 	.word	0x43480000

08001518 <DRV8825_setFrequency>:

void DRV8825_setFrequency(Moteur* drv8825, uint16_t freq){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if(freq != 0){
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <DRV8825_setFrequency+0x2a>
	drv8825->timer->Init.Prescaler = 179;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	22b3      	movs	r2, #179	; 0xb3
 8001530:	605a      	str	r2, [r3, #4]
	drv8825->timer->Init.Period = (uint32_t)1000000/freq;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4945      	ldr	r1, [pc, #276]	; (8001650 <DRV8825_setFrequency+0x138>)
 800153a:	fbb1 f2f2 	udiv	r2, r1, r2
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	e009      	b.n	8001556 <DRV8825_setFrequency+0x3e>
	}
	else{
		drv8825->timer->Init.Prescaler = 0xFFFE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800154a:	605a      	str	r2, [r3, #4]
		drv8825->timer->Init.Period = 0xFFFE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001554:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(drv8825->timer) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fc2c 	bl	8005db8 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <DRV8825_setFrequency+0x52>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001566:	f001 fbda 	bl	8002d1e <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(drv8825->timer) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fce2 	bl	8005f38 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <DRV8825_setFrequency+0x66>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 800157a:	f001 fbd0 	bl	8002d1e <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(drv8825->timer, drv8825->chanel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7d1b      	ldrb	r3, [r3, #20]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f004 fd2f 	bl	8005fec <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch(drv8825->chanel){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7d1b      	ldrb	r3, [r3, #20]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d858      	bhi.n	8001648 <DRV8825_setFrequency+0x130>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DRV8825_setFrequency+0x84>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	08001649 	.word	0x08001649
 80015a4:	08001649 	.word	0x08001649
 80015a8:	08001649 	.word	0x08001649
 80015ac:	080015ef 	.word	0x080015ef
 80015b0:	08001649 	.word	0x08001649
 80015b4:	08001649 	.word	0x08001649
 80015b8:	08001649 	.word	0x08001649
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	08001649 	.word	0x08001649
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	0800162b 	.word	0x0800162b
	case(TIM_CHANNEL_1):drv8825->timer->Instance->CCR1 = (50*drv8825->timer->Init.Period)/100;break;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2232      	movs	r2, #50	; 0x32
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	491c      	ldr	r1, [pc, #112]	; (8001654 <DRV8825_setFrequency+0x13c>)
 80015e4:	fba1 1202 	umull	r1, r2, r1, r2
 80015e8:	0952      	lsrs	r2, r2, #5
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e02c      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_2):drv8825->timer->Instance->CCR2 = (50*drv8825->timer->Init.Period)/100;break;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2232      	movs	r2, #50	; 0x32
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001602:	fba1 1202 	umull	r1, r2, r1, r2
 8001606:	0952      	lsrs	r2, r2, #5
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
 800160a:	e01d      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_3):drv8825->timer->Instance->CCR3 = (50*drv8825->timer->Init.Period)/100;break;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2232      	movs	r2, #50	; 0x32
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001620:	fba1 1202 	umull	r1, r2, r1, r2
 8001624:	0952      	lsrs	r2, r2, #5
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
 8001628:	e00e      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_4):drv8825->timer->Instance->CCR4 = (50*drv8825->timer->Init.Period)/100;break;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2232      	movs	r2, #50	; 0x32
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4905      	ldr	r1, [pc, #20]	; (8001654 <DRV8825_setFrequency+0x13c>)
 800163e:	fba1 1202 	umull	r1, r2, r1, r2
 8001642:	0952      	lsrs	r2, r2, #5
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	bf00      	nop
	}
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	000f4240 	.word	0x000f4240
 8001654:	51eb851f 	.word	0x51eb851f

08001658 <initUltrasons>:
				//.Trigger_GPIO_Port = GPIOB, .Trigger_GPIO_Pin = GPIO_PIN_12,
				.Echo_GPIO_Port = GPIOB, .Echo_GPIO_Pin = GPIO_PIN_13
		}
};

uint8_t initUltrasons(void){
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
	save_cpt_rising = 0;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <initUltrasons+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	801a      	strh	r2, [r3, #0]
	cpt_us_global = 0;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <initUltrasons+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]
	indexUS = 0;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <initUltrasons+0x54>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	stepUS = STEP_RESET;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <initUltrasons+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	e008      	b.n	800168e <initUltrasons+0x36>
		distUS[i] = 999;
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <initUltrasons+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <initUltrasons+0x60>)
 8001686:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3301      	adds	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b03      	cmp	r3, #3
 8001692:	ddf3      	ble.n	800167c <initUltrasons+0x24>
	}

	return 0;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200003b0 	.word	0x200003b0
 80016a8:	200003a8 	.word	0x200003a8
 80016ac:	2000039c 	.word	0x2000039c
 80016b0:	20000368 	.word	0x20000368
 80016b4:	20000358 	.word	0x20000358
 80016b8:	4479c000 	.word	0x4479c000

080016bc <debugUltrasons>:
	}

	return 0;
}

uint8_t debugUltrasons(void){
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
#if DEBUG_ULTRASONS
	//printf("dist us %.3f\t%.3f\t%.3f\t%.3f\r\n", distUS[0], distUS[1], distUS[2], distUS[3]);
	printf("dist us %d\t%d\r\n", StopFront, StopBack);
	//HAL_Delay(100);
#endif
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <actionneursUpdate>:
#include "actionneurs.h"

void actionneursUpdate(CONSIGNE strategie){
 80016cc:	b084      	sub	sp, #16
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	f107 0c10 	add.w	ip, r7, #16
 80016d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Bras
	if(strategie.bras == FALSE){
 80016dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <actionneursUpdate+0x1e>
		raiseBras(&bras);
 80016e2:	481e      	ldr	r0, [pc, #120]	; (800175c <actionneursUpdate+0x90>)
 80016e4:	f000 f92a 	bl	800193c <raiseBras>
 80016e8:	e005      	b.n	80016f6 <actionneursUpdate+0x2a>
	}
	else if (strategie.bras == TRUE){
 80016ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d102      	bne.n	80016f6 <actionneursUpdate+0x2a>
		deployBras(&bras);
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <actionneursUpdate+0x90>)
 80016f2:	f000 f931 	bl	8001958 <deployBras>
	}

	// Pinces
	for(int i=0; i<NB_AX12_BRAS; i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	e023      	b.n	8001744 <actionneursUpdate+0x78>
		if(strategie.pinces[i] == FALSE){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3304      	adds	r3, #4
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	f107 0210 	add.w	r2, r7, #16
 8001706:	4413      	add	r3, r2
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <actionneursUpdate+0x52>
			releasObject(&pinces[i]);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <actionneursUpdate+0x94>)
 8001714:	4413      	add	r3, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f88d 	bl	8001836 <releasObject>
 800171c:	e00f      	b.n	800173e <actionneursUpdate+0x72>
		}
		else if (strategie.pinces[i] == TRUE){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	4413      	add	r3, r2
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <actionneursUpdate+0x72>
			catchObject(&pinces[i]);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <actionneursUpdate+0x94>)
 8001736:	4413      	add	r3, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f86f 	bl	800181c <catchObject>
	for(int i=0; i<NB_AX12_BRAS; i++){
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3301      	adds	r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b03      	cmp	r3, #3
 8001748:	ddd8      	ble.n	80016fc <actionneursUpdate+0x30>
		}
	}

}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001756:	b004      	add	sp, #16
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200003b4 	.word	0x200003b4
 8001760:	200003c4 	.word	0x200003c4

08001764 <initPinces>:

/* Pinces */

uint8_t id_pinces[4] = {3,7,1,2}; // 1,2,3,7
void initPinces(){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e03f      	b.n	80017f0 <initPinces+0x8c>
		AX12_Init(&pinces[i],&huart3,id_pinces[i],BR_250K);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4a23      	ldr	r2, [pc, #140]	; (8001804 <initPinces+0xa0>)
 8001776:	1898      	adds	r0, r3, r2
 8001778:	4a23      	ldr	r2, [pc, #140]	; (8001808 <initPinces+0xa4>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	2307      	movs	r3, #7
 8001782:	4922      	ldr	r1, [pc, #136]	; (800180c <initPinces+0xa8>)
 8001784:	f7ff fc1c 	bl	8000fc0 <AX12_Init>
		AX12_setMaxTorque(&pinces[i],100);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <initPinces+0xa0>)
 800178e:	4413      	add	r3, r2
 8001790:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001810 <initPinces+0xac>
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc6b 	bl	8001070 <AX12_setMaxTorque>
		AX12_setRangeAngle(&pinces[i], ANGLE_PINCE_CATCH,ANGLE_STARTUP);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4a19      	ldr	r2, [pc, #100]	; (8001804 <initPinces+0xa0>)
 80017a0:	4413      	add	r3, r2
 80017a2:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001814 <initPinces+0xb0>
 80017a6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fc24 	bl	8000ff8 <AX12_setRangeAngle>
		AX12_setMovingSpeed(&pinces[i], 80);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <initPinces+0xa0>)
 80017b6:	4413      	add	r3, r2
 80017b8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001818 <initPinces+0xb4>
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fcbf 	bl	8001140 <AX12_setMovingSpeed>
		AX12_TorqueE_D(&pinces[i],TRUE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <initPinces+0xa0>)
 80017c8:	4413      	add	r3, r2
 80017ca:	2101      	movs	r1, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fc7b 	bl	80010c8 <AX12_TorqueE_D>
		HAL_Delay(250);
 80017d2:	20fa      	movs	r0, #250	; 0xfa
 80017d4:	f002 fdcc 	bl	8004370 <HAL_Delay>
		AX12_setPosition(&pinces[i], ANGLE_STARTUP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <initPinces+0xa0>)
 80017de:	4413      	add	r3, r2
 80017e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001814 <initPinces+0xb0>
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc7f 	bl	80010e8 <AX12_setPosition>
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3301      	adds	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	ddbc      	ble.n	8001770 <initPinces+0xc>
	}
	HAL_Delay(250);
 80017f6:	20fa      	movs	r0, #250	; 0xfa
 80017f8:	f002 fdba 	bl	8004370 <HAL_Delay>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200003c4 	.word	0x200003c4
 8001808:	20000000 	.word	0x20000000
 800180c:	20000718 	.word	0x20000718
 8001810:	42c80000 	.word	0x42c80000
 8001814:	42dc0000 	.word	0x42dc0000
 8001818:	42a00000 	.word	0x42a00000

0800181c <catchObject>:

void catchObject(AX12 *ax12){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	AX12_setPosition(ax12, ANGLE_PINCE_CATCH);
 8001824:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fc5d 	bl	80010e8 <AX12_setPosition>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <releasObject>:
void releasObject(AX12* ax12){
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	AX12_setPosition(ax12, ANGLE_PINCE_RELEASE);
 800183e:	eeb3 0a06 	vmov.f32	s0, #54	; 0x41b00000  22.0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fc50 	bl	80010e8 <AX12_setPosition>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <initFlag>:

/* Pavillons */

void initFlag(){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	AX12_Init(&flag,&huart3,9,BR_250K); // 9
 8001854:	2307      	movs	r3, #7
 8001856:	2209      	movs	r2, #9
 8001858:	4912      	ldr	r1, [pc, #72]	; (80018a4 <initFlag+0x54>)
 800185a:	4813      	ldr	r0, [pc, #76]	; (80018a8 <initFlag+0x58>)
 800185c:	f7ff fbb0 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&flag,100);
 8001860:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80018ac <initFlag+0x5c>
 8001864:	4810      	ldr	r0, [pc, #64]	; (80018a8 <initFlag+0x58>)
 8001866:	f7ff fc03 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&flag, ANGLE_FLAG_DEPLOY,ANGLE_FLAG_REPOS);
 800186a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80018b0 <initFlag+0x60>
 800186e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <initFlag+0x58>)
 8001874:	f7ff fbc0 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&flag, 80);
 8001878:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80018b4 <initFlag+0x64>
 800187c:	480a      	ldr	r0, [pc, #40]	; (80018a8 <initFlag+0x58>)
 800187e:	f7ff fc5f 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&flag,TRUE);
 8001882:	2101      	movs	r1, #1
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <initFlag+0x58>)
 8001886:	f7ff fc1f 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 800188a:	20fa      	movs	r0, #250	; 0xfa
 800188c:	f002 fd70 	bl	8004370 <HAL_Delay>
	AX12_setPosition(&flag, ANGLE_FLAG_REPOS);
 8001890:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80018b0 <initFlag+0x60>
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <initFlag+0x58>)
 8001896:	f7ff fc27 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800189a:	20fa      	movs	r0, #250	; 0xfa
 800189c:	f002 fd68 	bl	8004370 <HAL_Delay>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000718 	.word	0x20000718
 80018a8:	200003bc 	.word	0x200003bc
 80018ac:	42c80000 	.word	0x42c80000
 80018b0:	42c00000 	.word	0x42c00000
 80018b4:	42a00000 	.word	0x42a00000

080018b8 <raiseFlag>:

void raiseFlag(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
 80018bc:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <raiseFlag+0x14>)
 80018c2:	f7ff fc11 	bl	80010e8 <AX12_setPosition>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200003bc 	.word	0x200003bc

080018d0 <initBras>:
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
}

/* Bras */

void initBras(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	AX12_Init(&bras,&huart3,4,BR_250K);
 80018d4:	2307      	movs	r3, #7
 80018d6:	2204      	movs	r2, #4
 80018d8:	4912      	ldr	r1, [pc, #72]	; (8001924 <initBras+0x54>)
 80018da:	4813      	ldr	r0, [pc, #76]	; (8001928 <initBras+0x58>)
 80018dc:	f7ff fb70 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&bras,100);
 80018e0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800192c <initBras+0x5c>
 80018e4:	4810      	ldr	r0, [pc, #64]	; (8001928 <initBras+0x58>)
 80018e6:	f7ff fbc3 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&bras, 0,ANGLE_STARTUP);
 80018ea:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001930 <initBras+0x60>
 80018ee:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001934 <initBras+0x64>
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <initBras+0x58>)
 80018f4:	f7ff fb80 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&bras, 80);
 80018f8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001938 <initBras+0x68>
 80018fc:	480a      	ldr	r0, [pc, #40]	; (8001928 <initBras+0x58>)
 80018fe:	f7ff fc1f 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&bras,TRUE);
 8001902:	2101      	movs	r1, #1
 8001904:	4808      	ldr	r0, [pc, #32]	; (8001928 <initBras+0x58>)
 8001906:	f7ff fbdf 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 800190a:	20fa      	movs	r0, #250	; 0xfa
 800190c:	f002 fd30 	bl	8004370 <HAL_Delay>
	AX12_setPosition(&bras, ANGLE_STARTUP);
 8001910:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001930 <initBras+0x60>
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <initBras+0x58>)
 8001916:	f7ff fbe7 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800191a:	20fa      	movs	r0, #250	; 0xfa
 800191c:	f002 fd28 	bl	8004370 <HAL_Delay>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000718 	.word	0x20000718
 8001928:	200003b4 	.word	0x200003b4
 800192c:	42c80000 	.word	0x42c80000
 8001930:	42dc0000 	.word	0x42dc0000
 8001934:	00000000 	.word	0x00000000
 8001938:	42a00000 	.word	0x42a00000

0800193c <raiseBras>:

void raiseBras(){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	AX12_setPosition(&bras, ANGLE_BRAS_RAISE);
 8001940:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001950 <raiseBras+0x14>
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <raiseBras+0x18>)
 8001946:	f7ff fbcf 	bl	80010e8 <AX12_setPosition>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	42dc0000 	.word	0x42dc0000
 8001954:	200003b4 	.word	0x200003b4

08001958 <deployBras>:

void deployBras(){
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	AX12_setPosition(&bras, ANGLE_BRAS_DEPLOY);
 800195c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800196c <deployBras+0x14>
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <deployBras+0x18>)
 8001962:	f7ff fbc1 	bl	80010e8 <AX12_setPosition>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	42480000 	.word	0x42480000
 8001970:	200003b4 	.word	0x200003b4

08001974 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <MX_ADC1_Init+0x98>)
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <MX_ADC1_Init+0x9c>)
 800198a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_ADC1_Init+0x98>)
 800198e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001992:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_ADC1_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <MX_ADC1_Init+0xa0>)
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019d6:	f002 fcef 	bl	80043b8 <HAL_ADC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019e0:	f001 f99d 	bl	8002d1e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019e4:	2304      	movs	r3, #4
 80019e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_ADC1_Init+0x98>)
 80019f6:	f002 fe8d 	bl	8004714 <HAL_ADC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a00:	f001 f98d 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200003e8 	.word	0x200003e8
 8001a10:	40012000 	.word	0x40012000
 8001a14:	0f000001 	.word	0x0f000001

08001a18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_ADC_MspInit+0x7c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d127      	bne.n	8001a8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_ADC_MspInit+0x80>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0x80>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0x80>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_ADC_MspInit+0x80>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_ADC_MspInit+0x80>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_ADC_MspInit+0x80>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Tirette_Alternative_Pin;
 8001a72:	2310      	movs	r3, #16
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a76:	2303      	movs	r3, #3
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Tirette_Alternative_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <HAL_ADC_MspInit+0x84>)
 8001a86:	f003 fa17 	bl	8004eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40012000 	.word	0x40012000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <toZeroOne>:
/**
 * Borne une valeur donnée dans [0, 1].
 * @param x La valeur à borner.
 * @return Si possible x, 0 ou 1 sinon.
 */
double toZeroOne(double x) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	ed87 0b00 	vstr	d0, [r7]
	if (x < 0) return 0;
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab6:	f7ff f831 	bl	8000b1c <__aeabi_dcmplt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <toZeroOne+0x2a>
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e00f      	b.n	8001aea <toZeroOne+0x4a>
	if (x > 1) return 1;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <toZeroOne+0x5c>)
 8001ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ad4:	f7ff f840 	bl	8000b58 <__aeabi_dcmpgt>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <toZeroOne+0x46>
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <toZeroOne+0x5c>)
 8001ae4:	e001      	b.n	8001aea <toZeroOne+0x4a>
	return x;
 8001ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aea:	ec43 2b17 	vmov	d7, r2, r3
}
 8001aee:	eeb0 0a47 	vmov.f32	s0, s14
 8001af2:	eef0 0a67 	vmov.f32	s1, s15
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	3ff00000 	.word	0x3ff00000

08001b00 <toZeroTwoPi>:
/**
 * Ramène un angle donné vers l'intervalle [0, 2PI].
 * @param angle L'angle.
 * @return L'angle ramené à [0, 2PI].
 */
double toZeroTwoPi(double angle) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0b00 	vstr	d0, [r7]
    return fmod(fmod(angle, M_TWOPI) + M_TWOPI, M_TWOPI);
 8001b0a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001b58 <toZeroTwoPi+0x58>
 8001b0e:	ed97 0b00 	vldr	d0, [r7]
 8001b12:	f009 f923 	bl	800ad5c <fmod>
 8001b16:	ec51 0b10 	vmov	r0, r1, d0
 8001b1a:	a30f      	add	r3, pc, #60	; (adr r3, 8001b58 <toZeroTwoPi+0x58>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fbd4 	bl	80002cc <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	ec43 2b17 	vmov	d7, r2, r3
 8001b2c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8001b58 <toZeroTwoPi+0x58>
 8001b30:	eeb0 0a47 	vmov.f32	s0, s14
 8001b34:	eef0 0a67 	vmov.f32	s1, s15
 8001b38:	f009 f910 	bl	800ad5c <fmod>
 8001b3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b40:	eef0 7a60 	vmov.f32	s15, s1
}
 8001b44:	eeb0 0a47 	vmov.f32	s0, s14
 8001b48:	eef0 0a67 	vmov.f32	s1, s15
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	54442d18 	.word	0x54442d18
 8001b5c:	401921fb 	.word	0x401921fb

08001b60 <optimalAngle>:
/**
 * Permet de calculer la plus petite rotation à effectuer pour une orientation donnée.
 * @param angle L'orientation voulue.
 * @return L'angle ramené à [-PI, PI].
 */
double optimalAngle(double angle) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	ed87 0b00 	vstr	d0, [r7]
    return toZeroTwoPi(angle + M_PI) - M_PI;
 8001b6a:	a311      	add	r3, pc, #68	; (adr r3, 8001bb0 <optimalAngle+0x50>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b74:	f7fe fbaa 	bl	80002cc <__adddf3>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	ec43 2b17 	vmov	d7, r2, r3
 8001b80:	eeb0 0a47 	vmov.f32	s0, s14
 8001b84:	eef0 0a67 	vmov.f32	s1, s15
 8001b88:	f7ff ffba 	bl	8001b00 <toZeroTwoPi>
 8001b8c:	ec51 0b10 	vmov	r0, r1, d0
 8001b90:	a307      	add	r3, pc, #28	; (adr r3, 8001bb0 <optimalAngle+0x50>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fb97 	bl	80002c8 <__aeabi_dsub>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba6:	eef0 0a67 	vmov.f32	s1, s15
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	54442d18 	.word	0x54442d18
 8001bb4:	400921fb 	.word	0x400921fb

08001bb8 <speedCurve1>:
/**
 * Courbe de vitesse parabolique.
 * @param progress Un flottant entre 0 et 1 qui indique où en est le mouvement.
 * @return Une vitesse normalisée entre 0 et 1.
 */
double speedCurve1(double progress) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	ed87 0b00 	vstr	d0, [r7]
    double speed = -4*progress*(progress-1);
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <speedCurve1+0x78>)
 8001bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bcc:	f7fe fd34 	bl	8000638 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <speedCurve1+0x7c>)
 8001bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be2:	f7fe fb71 	bl	80002c8 <__aeabi_dsub>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4620      	mov	r0, r4
 8001bec:	4629      	mov	r1, r5
 8001bee:	f7fe fd23 	bl	8000638 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (speed<0)?0:speed;
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c06:	f7fe ff89 	bl	8000b1c <__aeabi_dcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <speedCurve1+0x62>
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e001      	b.n	8001c1e <speedCurve1+0x66>
 8001c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c22:	eeb0 0a47 	vmov.f32	s0, s14
 8001c26:	eef0 0a67 	vmov.f32	s1, s15
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c30:	c0100000 	.word	0xc0100000
 8001c34:	3ff00000 	.word	0x3ff00000

08001c38 <ASSERV_update2>:
/**
 * Cette fonction est appelée à intervalles réguliers pour piloter le robot.
 * @param point Le point visé.
 * @param point Le point où le robot commence son déplacement.
 */
void ASSERV_update2(CONSIGNE point, CONSIGNE* previous) {
 8001c38:	b084      	sub	sp, #16
 8001c3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3e:	ed2d 8b02 	vpush	{d8}
 8001c42:	b0be      	sub	sp, #248	; 0xf8
 8001c44:	af08      	add	r7, sp, #32
 8001c46:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (indexStrategie >= nb_points || !match_started) {
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <ASSERV_update2+0x48>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <ASSERV_update2+0x4c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	da03      	bge.n	8001c62 <ASSERV_update2+0x2a>
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <ASSERV_update2+0x50>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d114      	bne.n	8001c8c <ASSERV_update2+0x54>
    	//stopMoteurs();
    	setMotors(0, 0);
 8001c62:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8001c78 <ASSERV_update2+0x40>
 8001c66:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001c78 <ASSERV_update2+0x40>
 8001c6a:	f001 f8b1 	bl	8002dd0 <setMotors>
 8001c6e:	f000 bc2b 	b.w	80024c8 <ASSERV_update2+0x890>
 8001c72:	bf00      	nop
 8001c74:	f3af 8000 	nop.w
	...
 8001c80:	20000478 	.word	0x20000478
 8001c84:	20000004 	.word	0x20000004
 8001c88:	200002ec 	.word	0x200002ec
    	return;
    }

    ODO_odometrie();
 8001c8c:	f001 f950 	bl	8002f30 <ODO_odometrie>

    // calculs préliminaires
    double pointDistance = sqrt(pow(point.x - g_x, 2) + pow(point.y - g_y, 2));
 8001c90:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001c94:	4bc2      	ldr	r3, [pc, #776]	; (8001fa0 <ASSERV_update2+0x368>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fb15 	bl	80002c8 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ec43 2b17 	vmov	d7, r2, r3
 8001ca6:	ed9f 1bb6 	vldr	d1, [pc, #728]	; 8001f80 <ASSERV_update2+0x348>
 8001caa:	eeb0 0a47 	vmov.f32	s0, s14
 8001cae:	eef0 0a67 	vmov.f32	s1, s15
 8001cb2:	f009 f88f 	bl	800add4 <pow>
 8001cb6:	ec55 4b10 	vmov	r4, r5, d0
 8001cba:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001cbe:	4bb9      	ldr	r3, [pc, #740]	; (8001fa4 <ASSERV_update2+0x36c>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fb00 	bl	80002c8 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	ec43 2b17 	vmov	d7, r2, r3
 8001cd0:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8001f80 <ASSERV_update2+0x348>
 8001cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd8:	eef0 0a67 	vmov.f32	s1, s15
 8001cdc:	f009 f87a 	bl	800add4 <pow>
 8001ce0:	ec53 2b10 	vmov	r2, r3, d0
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe faf0 	bl	80002cc <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	ec43 2b17 	vmov	d7, r2, r3
 8001cf4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf8:	eef0 0a67 	vmov.f32	s1, s15
 8001cfc:	f009 f918 	bl	800af30 <sqrt>
 8001d00:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0
    double previousDistance = sqrt(pow(previous->x - g_x, 2) + pow(previous->y - g_y, 2));
 8001d04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0c:	4ba4      	ldr	r3, [pc, #656]	; (8001fa0 <ASSERV_update2+0x368>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fad9 	bl	80002c8 <__aeabi_dsub>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ec43 2b17 	vmov	d7, r2, r3
 8001d1e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8001f80 <ASSERV_update2+0x348>
 8001d22:	eeb0 0a47 	vmov.f32	s0, s14
 8001d26:	eef0 0a67 	vmov.f32	s1, s15
 8001d2a:	f009 f853 	bl	800add4 <pow>
 8001d2e:	ec55 4b10 	vmov	r4, r5, d0
 8001d32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d3a:	4b9a      	ldr	r3, [pc, #616]	; (8001fa4 <ASSERV_update2+0x36c>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fac2 	bl	80002c8 <__aeabi_dsub>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	ec43 2b17 	vmov	d7, r2, r3
 8001d4c:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8001f80 <ASSERV_update2+0x348>
 8001d50:	eeb0 0a47 	vmov.f32	s0, s14
 8001d54:	eef0 0a67 	vmov.f32	s1, s15
 8001d58:	f009 f83c 	bl	800add4 <pow>
 8001d5c:	ec53 2b10 	vmov	r2, r3, d0
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fab2 	bl	80002cc <__adddf3>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	ec43 2b17 	vmov	d7, r2, r3
 8001d70:	eeb0 0a47 	vmov.f32	s0, s14
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	f009 f8da 	bl	800af30 <sqrt>
 8001d7c:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
    double segmentLength = sqrt(pow(point.x - previous->x, 2) + pow(point.y - previous->y, 2));
 8001d80:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001d84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fa9c 	bl	80002c8 <__aeabi_dsub>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	ec43 2b17 	vmov	d7, r2, r3
 8001d98:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001f80 <ASSERV_update2+0x348>
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	eef0 0a67 	vmov.f32	s1, s15
 8001da4:	f009 f816 	bl	800add4 <pow>
 8001da8:	ec55 4b10 	vmov	r4, r5, d0
 8001dac:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001db4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001db8:	f7fe fa86 	bl	80002c8 <__aeabi_dsub>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	ec43 2b17 	vmov	d7, r2, r3
 8001dc4:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8001f80 <ASSERV_update2+0x348>
 8001dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dcc:	eef0 0a67 	vmov.f32	s1, s15
 8001dd0:	f009 f800 	bl	800add4 <pow>
 8001dd4:	ec53 2b10 	vmov	r2, r3, d0
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe fa76 	bl	80002cc <__adddf3>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	ec43 2b17 	vmov	d7, r2, r3
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	f009 f89e 	bl	800af30 <sqrt>
 8001df4:	ed87 0b28 	vstr	d0, [r7, #160]	; 0xa0
    double moveProgress = toZeroOne(previousDistance/segmentLength);
 8001df8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001dfc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001e00:	f7fe fd44 	bl	800088c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	ec43 2b17 	vmov	d7, r2, r3
 8001e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e10:	eef0 0a67 	vmov.f32	s1, s15
 8001e14:	f7ff fe44 	bl	8001aa0 <toZeroOne>
 8001e18:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0
    if (segmentLength == 0) moveProgress = 1; // pour éviter NaN en cas de divison par zéro
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001e28:	f7fe fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <ASSERV_update2+0x204>
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <ASSERV_update2+0x370>)
 8001e38:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

    //printf("%f %f %f\r\n",previousDistance, previous->x, moveProgress);

    // point à viser (je peux t'expliquer IRL, en commentaire ça passe pas mdr)
    double t = 1.1 - (1 - moveProgress)*0.6;
 8001e3c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001e40:	f04f 0000 	mov.w	r0, #0
 8001e44:	4958      	ldr	r1, [pc, #352]	; (8001fa8 <ASSERV_update2+0x370>)
 8001e46:	f7fe fa3f 	bl	80002c8 <__aeabi_dsub>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	a34d      	add	r3, pc, #308	; (adr r3, 8001f88 <ASSERV_update2+0x350>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fbee 	bl	8000638 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	a14b      	add	r1, pc, #300	; (adr r1, 8001f90 <ASSERV_update2+0x358>)
 8001e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e66:	f7fe fa2f 	bl	80002c8 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    CONSIGNE subAimPoint = {
 8001e72:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001e76:	2330      	movs	r3, #48	; 0x30
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f006 f88a 	bl	8007f94 <memset>
    	x: (1-t)*previous->x + t*point.x,
 8001e80:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	4947      	ldr	r1, [pc, #284]	; (8001fa8 <ASSERV_update2+0x370>)
 8001e8a:	f7fe fa1d 	bl	80002c8 <__aeabi_dsub>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbcb 	bl	8000638 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4614      	mov	r4, r2
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001eae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001eb2:	f7fe fbc1 	bl	8000638 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fa05 	bl	80002cc <__adddf3>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
    CONSIGNE subAimPoint = {
 8001ec6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		y: (1-t)*previous->y + t*point.y
 8001eca:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	4935      	ldr	r1, [pc, #212]	; (8001fa8 <ASSERV_update2+0x370>)
 8001ed4:	f7fe f9f8 	bl	80002c8 <__aeabi_dsub>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ee4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ee8:	f7fe fba6 	bl	8000638 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4614      	mov	r4, r2
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001ef8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001efc:	f7fe fb9c 	bl	8000638 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe f9e0 	bl	80002cc <__adddf3>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
    CONSIGNE subAimPoint = {
 8001f10:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    };

    double pointDirection = atan2(subAimPoint.y - g_y, subAimPoint.x - g_x);
 8001f14:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <ASSERV_update2+0x36c>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe f9d3 	bl	80002c8 <__aeabi_dsub>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b18 	vmov	d8, r2, r3
 8001f2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <ASSERV_update2+0x368>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe f9c8 	bl	80002c8 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ec43 2b17 	vmov	d7, r2, r3
 8001f40:	eeb0 1a47 	vmov.f32	s2, s14
 8001f44:	eef0 1a67 	vmov.f32	s3, s15
 8001f48:	eeb0 0a48 	vmov.f32	s0, s16
 8001f4c:	eef0 0a68 	vmov.f32	s1, s17
 8001f50:	f008 ff02 	bl	800ad58 <atan2>
 8001f54:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
    double angleError = optimalAngle( pointDirection - g_angle - ((point.dir==BACKWARD)?M_PI:0) );
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <ASSERV_update2+0x374>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001f62:	f7fe f9b1 	bl	80002c8 <__aeabi_dsub>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11c      	bne.n	8001fb0 <ASSERV_update2+0x378>
 8001f76:	a308      	add	r3, pc, #32	; (adr r3, 8001f98 <ASSERV_update2+0x360>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	e01c      	b.n	8001fb8 <ASSERV_update2+0x380>
 8001f7e:	bf00      	nop
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40000000 	.word	0x40000000
 8001f88:	33333333 	.word	0x33333333
 8001f8c:	3fe33333 	.word	0x3fe33333
 8001f90:	9999999a 	.word	0x9999999a
 8001f94:	3ff19999 	.word	0x3ff19999
 8001f98:	54442d18 	.word	0x54442d18
 8001f9c:	400921fb 	.word	0x400921fb
 8001fa0:	20000430 	.word	0x20000430
 8001fa4:	20000480 	.word	0x20000480
 8001fa8:	3ff00000 	.word	0x3ff00000
 8001fac:	20000438 	.word	0x20000438
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f7fe f986 	bl	80002c8 <__aeabi_dsub>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	ec43 2b17 	vmov	d7, r2, r3
 8001fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fc8:	eef0 0a67 	vmov.f32	s1, s15
 8001fcc:	f7ff fdc8 	bl	8001b60 <optimalAngle>
 8001fd0:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
    if (isnan(initialAngleError)) initialAngleError = angleError; // analogue à segmentLength
 8001fd4:	4bba      	ldr	r3, [pc, #744]	; (80022c0 <ASSERV_update2+0x688>)
 8001fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	f7fe fdc5 	bl	8000b6c <__aeabi_dcmpun>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <ASSERV_update2+0x3ba>
 8001fe8:	49b5      	ldr	r1, [pc, #724]	; (80022c0 <ASSERV_update2+0x688>)
 8001fea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fee:	e9c1 2300 	strd	r2, r3, [r1]
    double rotateProgress = toZeroOne(1 - angleError/initialAngleError);
 8001ff2:	4bb3      	ldr	r3, [pc, #716]	; (80022c0 <ASSERV_update2+0x688>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001ffc:	f7fe fc46 	bl	800088c <__aeabi_ddiv>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	49ae      	ldr	r1, [pc, #696]	; (80022c4 <ASSERV_update2+0x68c>)
 800200a:	f7fe f95d 	bl	80002c8 <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	ec43 2b17 	vmov	d7, r2, r3
 8002016:	eeb0 0a47 	vmov.f32	s0, s14
 800201a:	eef0 0a67 	vmov.f32	s1, s15
 800201e:	f7ff fd3f 	bl	8001aa0 <toZeroOne>
 8002022:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
    if (fabs(initialAngleError) < 0.001) rotateProgress = 1; // pour éviter NaN en cas de divison par zéro
 8002026:	4ba6      	ldr	r3, [pc, #664]	; (80022c0 <ASSERV_update2+0x688>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	4690      	mov	r8, r2
 800202e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002032:	a399      	add	r3, pc, #612	; (adr r3, 8002298 <ASSERV_update2+0x660>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	4640      	mov	r0, r8
 800203a:	4649      	mov	r1, r9
 800203c:	f7fe fd6e 	bl	8000b1c <__aeabi_dcmplt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <ASSERV_update2+0x418>
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b9e      	ldr	r3, [pc, #632]	; (80022c4 <ASSERV_update2+0x68c>)
 800204c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

    // si le robot est très mal orienté, lancer la séquence de rotation pure
    if (fabs(angleError) > VALID_ANGLE*10)
 8002050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002054:	64bb      	str	r3, [r7, #72]	; 0x48
 8002056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800205a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	a38f      	add	r3, pc, #572	; (adr r3, 80022a0 <ASSERV_update2+0x668>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800206a:	f7fe fd75 	bl	8000b58 <__aeabi_dcmpgt>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <ASSERV_update2+0x442>
    	isRotating = 1;
 8002074:	4a94      	ldr	r2, [pc, #592]	; (80022c8 <ASSERV_update2+0x690>)
 8002076:	2301      	movs	r3, #1
 8002078:	6013      	str	r3, [r2, #0]

    // si le robot est bien orienté, arreter la séquence de rotation pure
    if (fabs(angleError) < VALID_ANGLE)
 800207a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800207e:	643b      	str	r3, [r7, #64]	; 0x40
 8002080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002088:	647b      	str	r3, [r7, #68]	; 0x44
 800208a:	a387      	add	r3, pc, #540	; (adr r3, 80022a8 <ASSERV_update2+0x670>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002094:	f7fe fd42 	bl	8000b1c <__aeabi_dcmplt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <ASSERV_update2+0x46c>
    	isRotating = 0;
 800209e:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <ASSERV_update2+0x690>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	6013      	str	r3, [r2, #0]

    // (le cas entre VALID_ANGLE et VALID_ANGLE*10 est géré par l'asservissement
    // en distance qui corrige aussi l'angle en permanance)

    if (isRotating) { // le robot est mal orienté
 80020a4:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <ASSERV_update2+0x690>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d078      	beq.n	800219e <ASSERV_update2+0x566>
    	double spin = VMAX_ROTATION*speedCurve1(rotateProgress)/2;
 80020ac:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 80020b0:	f7ff fd82 	bl	8001bb8 <speedCurve1>
 80020b4:	ec51 0b10 	vmov	r0, r1, d0
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	4b83      	ldr	r3, [pc, #524]	; (80022cc <ASSERV_update2+0x694>)
 80020be:	f7fe fabb 	bl	8000638 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d2:	f7fe fbdb 	bl	800088c <__aeabi_ddiv>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	// aller plus vite sur les rotations longues
    	spin *= fabs(initialAngleError)/M_PI;
 80020de:	4b78      	ldr	r3, [pc, #480]	; (80022c0 <ASSERV_update2+0x688>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	4692      	mov	sl, r2
 80020e6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80020ea:	a371      	add	r3, pc, #452	; (adr r3, 80022b0 <ASSERV_update2+0x678>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	4650      	mov	r0, sl
 80020f2:	4659      	mov	r1, fp
 80020f4:	f7fe fbca 	bl	800088c <__aeabi_ddiv>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002100:	f7fe fa9a 	bl	8000638 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	// imposer une vitesse min au début de la rotation
    	spin += VMIN_ROTATION*(1-rotateProgress);
 800210c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002110:	f04f 0000 	mov.w	r0, #0
 8002114:	496b      	ldr	r1, [pc, #428]	; (80022c4 <ASSERV_update2+0x68c>)
 8002116:	f7fe f8d7 	bl	80002c8 <__aeabi_dsub>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	a35f      	add	r3, pc, #380	; (adr r3, 80022a0 <ASSERV_update2+0x668>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa86 	bl	8000638 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002134:	f7fe f8ca 	bl	80002cc <__adddf3>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	// imposer un sens de rotation
    	spin *= -angleError/fabs(angleError);
 8002140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
 8002146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800214a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
 8002156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
 8002160:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002164:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002168:	f7fe fb90 	bl	800088c <__aeabi_ddiv>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002174:	f7fe fa60 	bl	8000638 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	setMotors(-spin, spin);
 8002180:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
 8002186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800218a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	ed97 1b20 	vldr	d1, [r7, #128]	; 0x80
 8002194:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8002198:	f000 fe1a 	bl	8002dd0 <setMotors>
 800219c:	e194      	b.n	80024c8 <ASSERV_update2+0x890>
    } else if (moveProgress < 1) { // le robot est loin
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <ASSERV_update2+0x68c>)
 80021a4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80021a8:	f7fe fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 816f 	beq.w	8002492 <ASSERV_update2+0x85a>
    	double speed = VMAX_RECT*speedCurve1(moveProgress);
 80021b4:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 80021b8:	f7ff fcfe 	bl	8001bb8 <speedCurve1>
 80021bc:	ec51 0b10 	vmov	r0, r1, d0
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <ASSERV_update2+0x698>)
 80021c6:	f7fe fa37 	bl	8000638 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// aller plus vite sur les longs segments
    	speed *= toZeroOne(segmentLength/1000);
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <ASSERV_update2+0x69c>)
 80021d8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80021dc:	f7fe fb56 	bl	800088c <__aeabi_ddiv>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	ec43 2b17 	vmov	d7, r2, r3
 80021e8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ec:	eef0 0a67 	vmov.f32	s1, s15
 80021f0:	f7ff fc56 	bl	8001aa0 <toZeroOne>
 80021f4:	ec53 2b10 	vmov	r2, r3, d0
 80021f8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80021fc:	f7fe fa1c 	bl	8000638 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// ralentir si l'angle est mauvais
    	speed *= 1/(1+pow(fabs(angleError/VALID_ANGLE/5), 2));
 8002208:	a327      	add	r3, pc, #156	; (adr r3, 80022a8 <ASSERV_update2+0x670>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002212:	f7fe fb3b 	bl	800088c <__aeabi_ddiv>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <ASSERV_update2+0x694>)
 8002224:	f7fe fb32 	bl	800088c <__aeabi_ddiv>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	623a      	str	r2, [r7, #32]
 800222e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80022b8 <ASSERV_update2+0x680>
 8002238:	ed97 0b08 	vldr	d0, [r7, #32]
 800223c:	f008 fdca 	bl	800add4 <pow>
 8002240:	ec51 0b10 	vmov	r0, r1, d0
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <ASSERV_update2+0x68c>)
 800224a:	f7fe f83f 	bl	80002cc <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	491b      	ldr	r1, [pc, #108]	; (80022c4 <ASSERV_update2+0x68c>)
 8002258:	f7fe fb18 	bl	800088c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002264:	f7fe f9e8 	bl	8000638 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// imposer une vitesse min
    	speed += VMIN_DISTANCE;
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <ASSERV_update2+0x6a0>)
 8002276:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800227a:	f7fe f827 	bl	80002cc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// imposer le sens
    	speed *= (point.dir==FORWARD)?1:-1;
 8002286:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800228a:	2b01      	cmp	r3, #1
 800228c:	d126      	bne.n	80022dc <ASSERV_update2+0x6a4>
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <ASSERV_update2+0x68c>)
 8002294:	e025      	b.n	80022e2 <ASSERV_update2+0x6aa>
 8002296:	bf00      	nop
 8002298:	d2f1a9fc 	.word	0xd2f1a9fc
 800229c:	3f50624d 	.word	0x3f50624d
 80022a0:	9999999a 	.word	0x9999999a
 80022a4:	3fb99999 	.word	0x3fb99999
 80022a8:	47ae147b 	.word	0x47ae147b
 80022ac:	3f847ae1 	.word	0x3f847ae1
 80022b0:	54442d18 	.word	0x54442d18
 80022b4:	400921fb 	.word	0x400921fb
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40000000 	.word	0x40000000
 80022c0:	200002c8 	.word	0x200002c8
 80022c4:	3ff00000 	.word	0x3ff00000
 80022c8:	200002d0 	.word	0x200002d0
 80022cc:	40140000 	.word	0x40140000
 80022d0:	40240000 	.word	0x40240000
 80022d4:	408f4000 	.word	0x408f4000
 80022d8:	3fe00000 	.word	0x3fe00000
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <ASSERV_update2+0x8b0>)
 80022e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80022e6:	f7fe f9a7 	bl	8000638 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	double spin = VMAX_ROTATION*(speedCurve1(rotateProgress)*fabs(initialAngleError)/M_PI + speedCurve1(moveProgress)*fabs(angleError))/2;
 80022f2:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 80022f6:	f7ff fc5f 	bl	8001bb8 <speedCurve1>
 80022fa:	ec51 0b10 	vmov	r0, r1, d0
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <ASSERV_update2+0x8b4>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	61ba      	str	r2, [r7, #24]
 8002306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002310:	f7fe f992 	bl	8000638 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	a36e      	add	r3, pc, #440	; (adr r3, 80024d8 <ASSERV_update2+0x8a0>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe fab3 	bl	800088c <__aeabi_ddiv>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4614      	mov	r4, r2
 800232c:	461d      	mov	r5, r3
 800232e:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 8002332:	f7ff fc41 	bl	8001bb8 <speedCurve1>
 8002336:	ec51 0b10 	vmov	r0, r1, d0
 800233a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800234e:	f7fe f973 	bl	8000638 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4620      	mov	r0, r4
 8002358:	4629      	mov	r1, r5
 800235a:	f7fd ffb7 	bl	80002cc <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <ASSERV_update2+0x8b8>)
 800236c:	f7fe f964 	bl	8000638 <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002380:	f7fe fa84 	bl	800088c <__aeabi_ddiv>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

    	// imposer une vitesse min au début de la rotation
    	spin += VMIN_ROTATION*(1-rotateProgress);
 800238c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	4957      	ldr	r1, [pc, #348]	; (80024f4 <ASSERV_update2+0x8bc>)
 8002396:	f7fd ff97 	bl	80002c8 <__aeabi_dsub>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	a34f      	add	r3, pc, #316	; (adr r3, 80024e0 <ASSERV_update2+0x8a8>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f946 	bl	8000638 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80023b4:	f7fd ff8a 	bl	80002cc <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

    	// imposer un sens de rotation
    	spin *= -angleError/fabs(angleError);
 80023c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e8:	f7fe fa50 	bl	800088c <__aeabi_ddiv>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80023f4:	f7fe f920 	bl	8000638 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

        if((StopFront == TRUE && point.dir == FORWARD) || (StopBack == TRUE && point.dir == BACKWARD)){
 8002400:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <ASSERV_update2+0x8c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d103      	bne.n	8002410 <ASSERV_update2+0x7d8>
 8002408:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800240c:	2b01      	cmp	r3, #1
 800240e:	d007      	beq.n	8002420 <ASSERV_update2+0x7e8>
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <ASSERV_update2+0x8c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d11d      	bne.n	8002454 <ASSERV_update2+0x81c>
 8002418:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800241c:	2b00      	cmp	r3, #0
 800241e:	d119      	bne.n	8002454 <ASSERV_update2+0x81c>
        	speed = 0;
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
        	spin = 0;
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
        	previous->x = g_x; previous->y = g_y;
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <ASSERV_update2+0x8c8>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002442:	e9c1 2300 	strd	r2, r3, [r1]
 8002446:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <ASSERV_update2+0x8cc>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002450:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

    	setMotors(speed - spin, speed + spin);
 8002454:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002458:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800245c:	f7fd ff34 	bl	80002c8 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	ec43 2b18 	vmov	d8, r2, r3
 8002468:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800246c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002470:	f7fd ff2c 	bl	80002cc <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	ec43 2b17 	vmov	d7, r2, r3
 800247c:	eeb0 1a47 	vmov.f32	s2, s14
 8002480:	eef0 1a67 	vmov.f32	s3, s15
 8002484:	eeb0 0a48 	vmov.f32	s0, s16
 8002488:	eef0 0a68 	vmov.f32	s1, s17
 800248c:	f000 fca0 	bl	8002dd0 <setMotors>
 8002490:	e01a      	b.n	80024c8 <ASSERV_update2+0x890>
    } else {
        // le robot est arrivé au point visé
    	actionneursUpdate(point);
 8002492:	466d      	mov	r5, sp
 8002494:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8002498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024aa:	f7ff f90f 	bl	80016cc <actionneursUpdate>
    	indexStrategie++;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <ASSERV_update2+0x8d0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <ASSERV_update2+0x8d0>)
 80024b6:	6013      	str	r3, [r2, #0]
    	initialAngleError = NAN;
 80024b8:	490c      	ldr	r1, [pc, #48]	; (80024ec <ASSERV_update2+0x8b4>)
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <ASSERV_update2+0x8d4>)
 80024c0:	e9c1 2300 	strd	r2, r3, [r1]
    	stopMoteurs();
 80024c4:	f000 fc64 	bl	8002d90 <stopMoteurs>
    }
}
 80024c8:	37d8      	adds	r7, #216	; 0xd8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	ecbd 8b02 	vpop	{d8}
 80024d0:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b004      	add	sp, #16
 80024d6:	4770      	bx	lr
 80024d8:	54442d18 	.word	0x54442d18
 80024dc:	400921fb 	.word	0x400921fb
 80024e0:	9999999a 	.word	0x9999999a
 80024e4:	3fb99999 	.word	0x3fb99999
 80024e8:	bff00000 	.word	0xbff00000
 80024ec:	200002c8 	.word	0x200002c8
 80024f0:	40140000 	.word	0x40140000
 80024f4:	3ff00000 	.word	0x3ff00000
 80024f8:	200003a0 	.word	0x200003a0
 80024fc:	200003ac 	.word	0x200003ac
 8002500:	20000430 	.word	0x20000430
 8002504:	20000480 	.word	0x20000480
 8002508:	20000478 	.word	0x20000478
 800250c:	7ff80000 	.word	0x7ff80000

08002510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b56      	ldr	r3, [pc, #344]	; (8002684 <MX_GPIO_Init+0x174>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a55      	ldr	r2, [pc, #340]	; (8002684 <MX_GPIO_Init+0x174>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b53      	ldr	r3, [pc, #332]	; (8002684 <MX_GPIO_Init+0x174>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <MX_GPIO_Init+0x174>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a4e      	ldr	r2, [pc, #312]	; (8002684 <MX_GPIO_Init+0x174>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <MX_GPIO_Init+0x174>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b48      	ldr	r3, [pc, #288]	; (8002684 <MX_GPIO_Init+0x174>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a47      	ldr	r2, [pc, #284]	; (8002684 <MX_GPIO_Init+0x174>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b45      	ldr	r3, [pc, #276]	; (8002684 <MX_GPIO_Init+0x174>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <MX_GPIO_Init+0x174>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a40      	ldr	r2, [pc, #256]	; (8002684 <MX_GPIO_Init+0x174>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <MX_GPIO_Init+0x174>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <MX_GPIO_Init+0x174>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a39      	ldr	r2, [pc, #228]	; (8002684 <MX_GPIO_Init+0x174>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <MX_GPIO_Init+0x174>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f640 0107 	movw	r1, #2055	; 0x807
 80025b8:	4833      	ldr	r0, [pc, #204]	; (8002688 <MX_GPIO_Init+0x178>)
 80025ba:	f002 fe11 	bl	80051e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	2120      	movs	r1, #32
 80025c2:	4832      	ldr	r0, [pc, #200]	; (800268c <MX_GPIO_Init+0x17c>)
 80025c4:	f002 fe0c 	bl	80051e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2104      	movs	r1, #4
 80025cc:	4830      	ldr	r0, [pc, #192]	; (8002690 <MX_GPIO_Init+0x180>)
 80025ce:	f002 fe07 	bl	80051e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin;
 80025d2:	f640 0307 	movw	r3, #2055	; 0x807
 80025d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d8:	2301      	movs	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	4827      	ldr	r0, [pc, #156]	; (8002688 <MX_GPIO_Init+0x178>)
 80025ec:	f002 fc64 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025f0:	2320      	movs	r3, #32
 80025f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4821      	ldr	r0, [pc, #132]	; (800268c <MX_GPIO_Init+0x17c>)
 8002608:	f002 fc56 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Echo1_Pin|Echo4_Pin|Echo3_Pin|Echo2_Pin;
 800260c:	f24e 0302 	movw	r3, #57346	; 0xe002
 8002610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <MX_GPIO_Init+0x184>)
 8002614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	481b      	ldr	r0, [pc, #108]	; (8002690 <MX_GPIO_Init+0x180>)
 8002622:	f002 fc49 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8002626:	2304      	movs	r3, #4
 8002628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262a:	2301      	movs	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	4814      	ldr	r0, [pc, #80]	; (8002690 <MX_GPIO_Init+0x180>)
 800263e:	f002 fc3b 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tirette_Pin;
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	480c      	ldr	r0, [pc, #48]	; (8002688 <MX_GPIO_Init+0x178>)
 8002658:	f002 fc2e 	bl	8004eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2007      	movs	r0, #7
 8002662:	f002 fb60 	bl	8004d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002666:	2007      	movs	r0, #7
 8002668:	f002 fb79 	bl	8004d5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	2028      	movs	r0, #40	; 0x28
 8002672:	f002 fb58 	bl	8004d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002676:	2028      	movs	r0, #40	; 0x28
 8002678:	f002 fb71 	bl	8004d5e <HAL_NVIC_EnableIRQ>

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	40020800 	.word	0x40020800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	10310000 	.word	0x10310000

08002698 <decodeMsgIHM>:
#include "ihm.h"

int decodeMsgIHM(char *trame){
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

	char header = trame[0];
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	73fb      	strb	r3, [r7, #15]

	switch(header){
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b4d      	cmp	r3, #77	; 0x4d
 80026aa:	d017      	beq.n	80026dc <decodeMsgIHM+0x44>
 80026ac:	2b4d      	cmp	r3, #77	; 0x4d
 80026ae:	dc1e      	bgt.n	80026ee <decodeMsgIHM+0x56>
 80026b0:	2b42      	cmp	r3, #66	; 0x42
 80026b2:	d00a      	beq.n	80026ca <decodeMsgIHM+0x32>
 80026b4:	2b4a      	cmp	r3, #74	; 0x4a
 80026b6:	d11a      	bne.n	80026ee <decodeMsgIHM+0x56>
		case 'J' :
			port_depart = JAUNE;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <decodeMsgIHM+0x64>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
			initStrategie();
 80026be:	f000 f9ab 	bl	8002a18 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Jaune\r\n");
 80026c2:	480f      	ldr	r0, [pc, #60]	; (8002700 <decodeMsgIHM+0x68>)
 80026c4:	f006 f95e 	bl	8008984 <puts>
			#endif
			break;
 80026c8:	e012      	b.n	80026f0 <decodeMsgIHM+0x58>

		case 'B' :
			port_depart = BLEU;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <decodeMsgIHM+0x64>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
			initStrategie();
 80026d0:	f000 f9a2 	bl	8002a18 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Bleu\r\n");
 80026d4:	480b      	ldr	r0, [pc, #44]	; (8002704 <decodeMsgIHM+0x6c>)
 80026d6:	f006 f955 	bl	8008984 <puts>
			#endif
			break;
 80026da:	e009      	b.n	80026f0 <decodeMsgIHM+0x58>

		case 'M' :
			initStrategie();
 80026dc:	f000 f99c 	bl	8002a18 <initStrategie>
			//HAL_TIM_Base_Start_IT(&htim2);
			match_started = TRUE;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <decodeMsgIHM+0x70>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
			#if MODULE_DEBUG == 1
				printf("Go!\r\n");
 80026e6:	4809      	ldr	r0, [pc, #36]	; (800270c <decodeMsgIHM+0x74>)
 80026e8:	f006 f94c 	bl	8008984 <puts>
			#endif
			break;
 80026ec:	e000      	b.n	80026f0 <decodeMsgIHM+0x58>

		default :
			break;
 80026ee:	bf00      	nop
	}

	return 0;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200002e8 	.word	0x200002e8
 8002700:	0800d380 	.word	0x0800d380
 8002704:	0800d3a0 	.word	0x0800d3a0
 8002708:	200002ec 	.word	0x200002ec
 800270c:	0800d3c0 	.word	0x0800d3c0

08002710 <getLidarData2>:
	#endif
	*/

}

void getLidarData2(){
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
	char header = lidarRawData[0];
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <getLidarData2+0x40>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	71fb      	strb	r3, [r7, #7]

	#if MODULE_DEBUG == 1 && DEBUG_LIDAR
	printf("header = %c\r\n", header);
	#endif

	switch(header){
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b42      	cmp	r3, #66	; 0x42
 8002720:	d002      	beq.n	8002728 <getLidarData2+0x18>
 8002722:	2b46      	cmp	r3, #70	; 0x46
 8002724:	d007      	beq.n	8002736 <getLidarData2+0x26>
			StopFront = 1;
			cpt_front = 0;
			break;

		default :
			break;
 8002726:	e00d      	b.n	8002744 <getLidarData2+0x34>
			StopBack = 1;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <getLidarData2+0x44>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
			cpt_back = 0;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <getLidarData2+0x48>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
			break;
 8002734:	e006      	b.n	8002744 <getLidarData2+0x34>
			StopFront = 1;
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <getLidarData2+0x4c>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
			cpt_front = 0;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <getLidarData2+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
			break;
 8002742:	bf00      	nop
	}
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	20000314 	.word	0x20000314
 8002754:	200003ac 	.word	0x200003ac
 8002758:	200003a4 	.word	0x200003a4
 800275c:	200003a0 	.word	0x200003a0
 8002760:	20000354 	.word	0x20000354
 8002764:	00000000 	.word	0x00000000

08002768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800276e:	f001 fd8d 	bl	800428c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002772:	f000 f8a3 	bl	80028bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002776:	f7ff fecb 	bl	8002510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800277a:	f001 fb71 	bl	8003e60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800277e:	f000 fec5 	bl	800350c <MX_TIM1_Init>
  MX_TIM8_Init();
 8002782:	f001 f875 	bl	8003870 <MX_TIM8_Init>
  MX_TIM11_Init();
 8002786:	f001 f913 	bl	80039b0 <MX_TIM11_Init>
  MX_UART4_Init();
 800278a:	f001 faeb 	bl	8003d64 <MX_UART4_Init>
  MX_UART5_Init();
 800278e:	f001 fb13 	bl	8003db8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8002792:	f001 fb8f 	bl	8003eb4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002796:	f000 ff5f 	bl	8003658 <MX_TIM3_Init>
  MX_TIM7_Init();
 800279a:	f001 f833 	bl	8003804 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800279e:	f001 fb35 	bl	8003e0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80027a2:	f000 ff0b 	bl	80035bc <MX_TIM2_Init>
  MX_ADC1_Init();
 80027a6:	f7ff f8e5 	bl	8001974 <MX_ADC1_Init>
  MX_TIM6_Init();
 80027aa:	f000 fff5 	bl	8003798 <MX_TIM6_Init>
  MX_TIM4_Init();
 80027ae:	f000 ffa7 	bl	8003700 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  initSerials();
 80027b2:	f000 f917 	bl	80029e4 <initSerials>

  port_depart = BLEU;
 80027b6:	4b36      	ldr	r3, [pc, #216]	; (8002890 <main+0x128>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  initStrategie();
 80027bc:	f000 f92c 	bl	8002a18 <initStrategie>

  initMoteurs();
 80027c0:	f000 fab4 	bl	8002d2c <initMoteurs>
  initPinces();
 80027c4:	f7fe ffce 	bl	8001764 <initPinces>
  initBras();
 80027c8:	f7ff f882 	bl	80018d0 <initBras>
  initFlag();
 80027cc:	f7ff f840 	bl	8001850 <initFlag>
  initUltrasons();
 80027d0:	f7fe ff42 	bl	8001658 <initUltrasons>

  indexStrategie = 1; // Variable parcourant le tableau de stratégie
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <main+0x12c>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
  initTimers();
 80027da:	f000 f8e3 	bl	80029a4 <initTimers>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	float voltage = 0;
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]

	do{
		#if MODULE_TIRETTE == TRUE
			HAL_ADC_Start(&hadc1);
 80027e4:	482c      	ldr	r0, [pc, #176]	; (8002898 <main+0x130>)
 80027e6:	f001 fe2b 	bl	8004440 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 80027ea:	492c      	ldr	r1, [pc, #176]	; (800289c <main+0x134>)
 80027ec:	482a      	ldr	r0, [pc, #168]	; (8002898 <main+0x130>)
 80027ee:	f001 fef9 	bl	80045e4 <HAL_ADC_PollForConversion>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d123      	bne.n	8002840 <main+0xd8>
			{
				g_ADCValue = HAL_ADC_GetValue(&hadc1);
 80027f8:	4827      	ldr	r0, [pc, #156]	; (8002898 <main+0x130>)
 80027fa:	f001 ff7e 	bl	80046fa <HAL_ADC_GetValue>
 80027fe:	ee07 0a90 	vmov	s15, r0
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <main+0x138>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
				voltage = g_ADCValue * (3.3 / 4096.0);
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <main+0x138>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd feb9 	bl	8000588 <__aeabi_f2d>
 8002816:	a31c      	add	r3, pc, #112	; (adr r3, 8002888 <main+0x120>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd ff0c 	bl	8000638 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f9fe 	bl	8000c28 <__aeabi_d2f>
 800282c:	4603      	mov	r3, r0
 800282e:	607b      	str	r3, [r7, #4]
				#if MODULE_DEBUG && DEBUG_TIRETTE
					printf("%f\r\n",voltage);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fd fea9 	bl	8000588 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	481a      	ldr	r0, [pc, #104]	; (80028a4 <main+0x13c>)
 800283c:	f006 f81c 	bl	8008878 <iprintf>
				#endif
			}

			if((voltage < (float)TIRETTE_SEUIL) == TRUE && match_started == FALSE){
 8002840:	edd7 7a01 	vldr	s15, [r7, #4]
 8002844:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80028a8 <main+0x140>
 8002848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002850:	d508      	bpl.n	8002864 <main+0xfc>
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <main+0x144>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d104      	bne.n	8002864 <main+0xfc>
				match_started = TRUE;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <main+0x144>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
				initStrategie();
 8002860:	f000 f8da 	bl	8002a18 <initStrategie>
		#else
			match_started = TRUE;

		#endif
	}
	while(match_started == FALSE);
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <main+0x144>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0bb      	beq.n	80027e4 <main+0x7c>

	#if MODULE_LIDAR
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 800286c:	2201      	movs	r2, #1
 800286e:	4910      	ldr	r1, [pc, #64]	; (80028b0 <main+0x148>)
 8002870:	4810      	ldr	r0, [pc, #64]	; (80028b4 <main+0x14c>)
 8002872:	f004 fddc 	bl	800742e <HAL_UART_Receive_IT>
	#endif

	cptTempsMatch = 0;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <main+0x150>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

	while (1)
	{
		#if MODULE_DEBUG
			  debugUltrasons();
 800287c:	f7fe ff1e 	bl	80016bc <debugUltrasons>
			  HAL_Delay(50);
 8002880:	2032      	movs	r0, #50	; 0x32
 8002882:	f001 fd75 	bl	8004370 <HAL_Delay>
			  debugUltrasons();
 8002886:	e7f9      	b.n	800287c <main+0x114>
 8002888:	66666666 	.word	0x66666666
 800288c:	3f4a6666 	.word	0x3f4a6666
 8002890:	200002e8 	.word	0x200002e8
 8002894:	20000478 	.word	0x20000478
 8002898:	200003e8 	.word	0x200003e8
 800289c:	000f4240 	.word	0x000f4240
 80028a0:	200002d8 	.word	0x200002d8
 80028a4:	0800d3c8 	.word	0x0800d3c8
 80028a8:	4039999a 	.word	0x4039999a
 80028ac:	200002ec 	.word	0x200002ec
 80028b0:	200003aa 	.word	0x200003aa
 80028b4:	2000075c 	.word	0x2000075c
 80028b8:	200002d4 	.word	0x200002d4

080028bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b094      	sub	sp, #80	; 0x50
 80028c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	2234      	movs	r2, #52	; 0x34
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f005 fb62 	bl	8007f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <SystemClock_Config+0xe0>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	4a2c      	ldr	r2, [pc, #176]	; (800299c <SystemClock_Config+0xe0>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	; 0x40
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <SystemClock_Config+0xe0>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fc:	2300      	movs	r3, #0
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <SystemClock_Config+0xe4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <SystemClock_Config+0xe4>)
 8002906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <SystemClock_Config+0xe4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002918:	2302      	movs	r3, #2
 800291a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002920:	2310      	movs	r3, #16
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002924:	2302      	movs	r3, #2
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002928:	2300      	movs	r3, #0
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800292c:	2310      	movs	r3, #16
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002930:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002936:	2302      	movs	r3, #2
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800293a:	2302      	movs	r3, #2
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800293e:	2302      	movs	r3, #2
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	4618      	mov	r0, r3
 8002948:	f002 ff98 	bl	800587c <HAL_RCC_OscConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002952:	f000 f9e4 	bl	8002d1e <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002956:	f002 fc75 	bl	8005244 <HAL_PWREx_EnableOverDrive>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002960:	f000 f9dd 	bl	8002d1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002964:	230f      	movs	r3, #15
 8002966:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002968:	2302      	movs	r3, #2
 800296a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	2105      	movs	r1, #5
 8002982:	4618      	mov	r0, r3
 8002984:	f002 fcae 	bl	80052e4 <HAL_RCC_ClockConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800298e:	f000 f9c6 	bl	8002d1e <Error_Handler>
  }
}
 8002992:	bf00      	nop
 8002994:	3750      	adds	r7, #80	; 0x50
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000

080029a4 <initTimers>:

/* USER CODE BEGIN 4 */

int initTimers(){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0

	#if MODULE_ODOMETRIE
		HAL_TIM_Encoder_Start(&CODEUR_D, TIM_CHANNEL_ALL); // htim1
 80029a8:	213c      	movs	r1, #60	; 0x3c
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <initTimers+0x2c>)
 80029ac:	f003 fc8c 	bl	80062c8 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&CODEUR_G, TIM_CHANNEL_ALL); // htim3
 80029b0:	213c      	movs	r1, #60	; 0x3c
 80029b2:	4808      	ldr	r0, [pc, #32]	; (80029d4 <initTimers+0x30>)
 80029b4:	f003 fc88 	bl	80062c8 <HAL_TIM_Encoder_Start>
	#endif

	#if MODULE_ASSERVISSEMENT
		HAL_TIM_Base_Start_IT(&htim2); // 15ms
 80029b8:	4807      	ldr	r0, [pc, #28]	; (80029d8 <initTimers+0x34>)
 80029ba:	f003 fa4d 	bl	8005e58 <HAL_TIM_Base_Start_IT>
	#if MODULE_ULTRASONS
		HAL_TIM_Base_Start_IT(&htim4); 	// Period : 1us
	#endif

	#if MODULE_COMPTEUR
		HAL_TIM_Base_Start_IT(&htim7); // 1sec
 80029be:	4807      	ldr	r0, [pc, #28]	; (80029dc <initTimers+0x38>)
 80029c0:	f003 fa4a 	bl	8005e58 <HAL_TIM_Base_Start_IT>
	#endif

	HAL_TIM_Base_Start_IT(&htim6); // 10ms
 80029c4:	4806      	ldr	r0, [pc, #24]	; (80029e0 <initTimers+0x3c>)
 80029c6:	f003 fa47 	bl	8005e58 <HAL_TIM_Base_Start_IT>

	return 0;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000640 	.word	0x20000640
 80029d4:	20000568 	.word	0x20000568
 80029d8:	20000688 	.word	0x20000688
 80029dc:	200006d0 	.word	0x200006d0
 80029e0:	200005f8 	.word	0x200005f8

080029e4 <initSerials>:

int initSerials(){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	#if MODULE_DEBUG == 1
		RetargetInit(&huart2);
 80029e8:	4806      	ldr	r0, [pc, #24]	; (8002a04 <initSerials+0x20>)
 80029ea:	f000 fbd3 	bl	8003194 <RetargetInit>
		printf("Mode debug actif\r\n");
 80029ee:	4806      	ldr	r0, [pc, #24]	; (8002a08 <initSerials+0x24>)
 80029f0:	f005 ffc8 	bl	8008984 <puts>
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
	#endif
	*/

	#if MODULE_IHM
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 80029f4:	2201      	movs	r2, #1
 80029f6:	4905      	ldr	r1, [pc, #20]	; (8002a0c <initSerials+0x28>)
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <initSerials+0x2c>)
 80029fa:	f004 fd18 	bl	800742e <HAL_UART_Receive_IT>
	#endif

	return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000828 	.word	0x20000828
 8002a08:	0800d3d0 	.word	0x0800d3d0
 8002a0c:	20000490 	.word	0x20000490
 8002a10:	200007e4 	.word	0x200007e4
 8002a14:	00000000 	.word	0x00000000

08002a18 <initStrategie>:

int initStrategie(){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	if(port_depart == BLEU){
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <initStrategie+0x88>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d119      	bne.n	8002a58 <initStrategie+0x40>
		ODO_setAngle(START_BLEU_ANGLE);
 8002a24:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a98 <initStrategie+0x80>
 8002a28:	f000 fba2 	bl	8003170 <ODO_setAngle>
		ODO_setX(consigneBleu[0].x);
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <initStrategie+0x8c>)
 8002a2e:	ed93 7b00 	vldr	d7, [r3]
 8002a32:	eeb0 0a47 	vmov.f32	s0, s14
 8002a36:	eef0 0a67 	vmov.f32	s1, s15
 8002a3a:	f000 fb75 	bl	8003128 <ODO_setX>
		ODO_setY(consigneBleu[0].y);
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <initStrategie+0x8c>)
 8002a40:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a44:	eeb0 0a47 	vmov.f32	s0, s14
 8002a48:	eef0 0a67 	vmov.f32	s1, s15
 8002a4c:	f000 fb7e 	bl	800314c <ODO_setY>
		consigne = consigneBleu;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <initStrategie+0x90>)
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <initStrategie+0x8c>)
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e01c      	b.n	8002a92 <initStrategie+0x7a>
	}
	else if(port_depart == JAUNE){
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <initStrategie+0x88>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d118      	bne.n	8002a92 <initStrategie+0x7a>
		ODO_setAngle(START_JAUNE_ANGLE);
 8002a60:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002a98 <initStrategie+0x80>
 8002a64:	f000 fb84 	bl	8003170 <ODO_setAngle>
		ODO_setX(consigneJaune[0].x);
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <initStrategie+0x94>)
 8002a6a:	ed93 7b00 	vldr	d7, [r3]
 8002a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a72:	eef0 0a67 	vmov.f32	s1, s15
 8002a76:	f000 fb57 	bl	8003128 <ODO_setX>
		ODO_setY(consigneJaune[0].y);
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <initStrategie+0x94>)
 8002a7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8002a80:	eeb0 0a47 	vmov.f32	s0, s14
 8002a84:	eef0 0a67 	vmov.f32	s1, s15
 8002a88:	f000 fb60 	bl	800314c <ODO_setY>
		consigne = consigneJaune;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <initStrategie+0x90>)
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <initStrategie+0x94>)
 8002a90:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
	...
 8002aa0:	200002e8 	.word	0x200002e8
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	200003e4 	.word	0x200003e4
 8002aac:	20000068 	.word	0x20000068

08002ab0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	b08d      	sub	sp, #52	; 0x34
 8002ab4:	af0a      	add	r7, sp, #40	; 0x28
 8002ab6:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac0:	d12c      	bne.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x6c>
		if(indexStrategie < nb_points && match_started == 1)
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	da26      	bge.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x6c>
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d122      	bne.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x6c>
			//ASSERV_update2(consigne[indexStrategie], consigne[indexStrategie-1]);
			ASSERV_update2(consigne[indexStrategie], &consigne[indexStrategie-1]);
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	440b      	add	r3, r1
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	18d6      	adds	r6, r2, r3
 8002aea:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4619      	mov	r1, r3
 8002af4:	460b      	mov	r3, r1
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	440b      	add	r3, r1
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	3b30      	subs	r3, #48	; 0x30
 8002afe:	4413      	add	r3, r2
 8002b00:	9308      	str	r3, [sp, #32]
 8002b02:	466d      	mov	r5, sp
 8002b04:	f106 0410 	add.w	r4, r6, #16
 8002b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b18:	f7ff f88e 	bl	8001c38 <ASSERV_update2>
	}

	if(htim->Instance == TIM4){
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a42      	ldr	r2, [pc, #264]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d138      	bne.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0xe8>
		cpt_us_global++;
 8002b26:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b30:	801a      	strh	r2, [r3, #0]

		if(cpt_us_global >= 0 && cpt_us_global < 10){ // && stepUS == STEP_RESET
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	d805      	bhi.n	8002b46 <HAL_TIM_PeriodElapsedCallback+0x96>
//			HAL_GPIO_WritePin(Sensors[indexUS].Trigger_GPIO_Port,
//					Sensors[indexUS].Trigger_GPIO_Port, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	483d      	ldr	r0, [pc, #244]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b40:	f002 fb4e 	bl	80051e0 <HAL_GPIO_WritePin>
 8002b44:	e00b      	b.n	8002b5e <HAL_TIM_PeriodElapsedCallback+0xae>
		}
		else {
//			HAL_GPIO_WritePin(Sensors[indexUS].Trigger_GPIO_Port,
//					Sensors[indexUS].Trigger_GPIO_Port, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2104      	movs	r1, #4
 8002b4a:	483a      	ldr	r0, [pc, #232]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b4c:	f002 fb48 	bl	80051e0 <HAL_GPIO_WritePin>

			if(stepUS == STEP_RESET) stepUS = STEP_TRIG;
 8002b50:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_TIM_PeriodElapsedCallback+0xae>
 8002b58:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
		}

		if(cpt_us_global >= 5000){
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d916      	bls.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0xe8>
			cpt_us_global = 0;
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	801a      	strh	r2, [r3, #0]
			distUS[indexUS]=999;
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002b7c:	601a      	str	r2, [r3, #0]
			indexUS++;
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b88:	701a      	strb	r2, [r3, #0]
			if(indexUS >= NB_OF_US_SENSORS) indexUS = 0;
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d902      	bls.n	8002b98 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM6){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d117      	bne.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x122>
		//printf("TIM6\r\n");
		cpt_back++;
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002baa:	6013      	str	r3, [r2, #0]
		cpt_front++;
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bb4:	6013      	str	r3, [r2, #0]
		//printf("cpt_front = %d\r\n",cpt_front);

		if (cpt_back > 150){
 8002bb6:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b96      	cmp	r3, #150	; 0x96
 8002bbc:	dd02      	ble.n	8002bc4 <HAL_TIM_PeriodElapsedCallback+0x114>
			StopBack = 0;
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
		}

		if (cpt_front > 150){
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b96      	cmp	r3, #150	; 0x96
 8002bca:	dd02      	ble.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x122>
			StopFront = 0;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM7){
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_PeriodElapsedCallback+0x164>
		if(match_started == TRUE){
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d117      	bne.n	8002c14 <HAL_TIM_PeriodElapsedCallback+0x164>
			cptTempsMatch++;
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bec:	6013      	str	r3, [r2, #0]

			if (cptTempsMatch >= TEMPS_PAVILLONS){
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b5f      	cmp	r3, #95	; 0x5f
 8002bf4:	dd01      	ble.n	8002bfa <HAL_TIM_PeriodElapsedCallback+0x14a>
				raiseFlag();
 8002bf6:	f7fe fe5f 	bl	80018b8 <raiseFlag>
			}

			if (cptTempsMatch >= 98){
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b61      	cmp	r3, #97	; 0x61
 8002c00:	dd08      	ble.n	8002c14 <HAL_TIM_PeriodElapsedCallback+0x164>
				stopMoteurs();
 8002c02:	f000 f8c5 	bl	8002d90 <stopMoteurs>
				initBras();
 8002c06:	f7fe fe63 	bl	80018d0 <initBras>
				initPinces();
 8002c0a:	f7fe fdab 	bl	8001764 <initPinces>
				match_started = 0;
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c1c:	20000478 	.word	0x20000478
 8002c20:	20000004 	.word	0x20000004
 8002c24:	200002ec 	.word	0x200002ec
 8002c28:	200003e4 	.word	0x200003e4
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	200003a8 	.word	0x200003a8
 8002c34:	40020400 	.word	0x40020400
 8002c38:	20000368 	.word	0x20000368
 8002c3c:	2000039c 	.word	0x2000039c
 8002c40:	20000358 	.word	0x20000358
 8002c44:	4479c000 	.word	0x4479c000
 8002c48:	40001000 	.word	0x40001000
 8002c4c:	200003a4 	.word	0x200003a4
 8002c50:	20000354 	.word	0x20000354
 8002c54:	200003ac 	.word	0x200003ac
 8002c58:	200003a0 	.word	0x200003a0
 8002c5c:	40001400 	.word	0x40001400
 8002c60:	200002d4 	.word	0x200002d4

08002c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5){
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_UART_RxCpltCallback+0x80>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d113      	bne.n	8002c9e <HAL_UART_RxCpltCallback+0x3a>
		strcat(lidarRawData,&buff_lidar);
 8002c76:	491c      	ldr	r1, [pc, #112]	; (8002ce8 <HAL_UART_RxCpltCallback+0x84>)
 8002c78:	481c      	ldr	r0, [pc, #112]	; (8002cec <HAL_UART_RxCpltCallback+0x88>)
 8002c7a:	f005 ff51 	bl	8008b20 <strcat>
		if(buff_lidar == '\n'){
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_UART_RxCpltCallback+0x84>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b0a      	cmp	r3, #10
 8002c84:	d106      	bne.n	8002c94 <HAL_UART_RxCpltCallback+0x30>
			//getLidarData();
			getLidarData2();
 8002c86:	f7ff fd43 	bl	8002710 <getLidarData2>
			memset(lidarRawData,0,sizeof(lidarRawData));
 8002c8a:	2240      	movs	r2, #64	; 0x40
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4817      	ldr	r0, [pc, #92]	; (8002cec <HAL_UART_RxCpltCallback+0x88>)
 8002c90:	f005 f980 	bl	8007f94 <memset>
		}
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 8002c94:	2201      	movs	r2, #1
 8002c96:	4914      	ldr	r1, [pc, #80]	; (8002ce8 <HAL_UART_RxCpltCallback+0x84>)
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <HAL_UART_RxCpltCallback+0x8c>)
 8002c9a:	f004 fbc8 	bl	800742e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == UART4){
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_UART_RxCpltCallback+0x90>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d118      	bne.n	8002cda <HAL_UART_RxCpltCallback+0x76>
		if(match_started == FALSE){
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_UART_RxCpltCallback+0x94>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d114      	bne.n	8002cda <HAL_UART_RxCpltCallback+0x76>
			strcat(ihmRawData,&buff_ihm);
 8002cb0:	4912      	ldr	r1, [pc, #72]	; (8002cfc <HAL_UART_RxCpltCallback+0x98>)
 8002cb2:	4813      	ldr	r0, [pc, #76]	; (8002d00 <HAL_UART_RxCpltCallback+0x9c>)
 8002cb4:	f005 ff34 	bl	8008b20 <strcat>
			if(buff_ihm == '\n'){
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_UART_RxCpltCallback+0x98>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b0a      	cmp	r3, #10
 8002cbe:	d107      	bne.n	8002cd0 <HAL_UART_RxCpltCallback+0x6c>
				decodeMsgIHM(ihmRawData);
 8002cc0:	480f      	ldr	r0, [pc, #60]	; (8002d00 <HAL_UART_RxCpltCallback+0x9c>)
 8002cc2:	f7ff fce9 	bl	8002698 <decodeMsgIHM>
				memset(ihmRawData,0,sizeof(ihmRawData));
 8002cc6:	2240      	movs	r2, #64	; 0x40
 8002cc8:	2100      	movs	r1, #0
 8002cca:	480d      	ldr	r0, [pc, #52]	; (8002d00 <HAL_UART_RxCpltCallback+0x9c>)
 8002ccc:	f005 f962 	bl	8007f94 <memset>
			}
			HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	490a      	ldr	r1, [pc, #40]	; (8002cfc <HAL_UART_RxCpltCallback+0x98>)
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <HAL_UART_RxCpltCallback+0xa0>)
 8002cd6:	f004 fbaa 	bl	800742e <HAL_UART_Receive_IT>
		}
	}
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40005000 	.word	0x40005000
 8002ce8:	200003aa 	.word	0x200003aa
 8002cec:	20000314 	.word	0x20000314
 8002cf0:	2000075c 	.word	0x2000075c
 8002cf4:	40004c00 	.word	0x40004c00
 8002cf8:	200002ec 	.word	0x200002ec
 8002cfc:	20000490 	.word	0x20000490
 8002d00:	20000494 	.word	0x20000494
 8002d04:	200007e4 	.word	0x200007e4

08002d08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13 && indexUS == US_BACK_RIGHT)
  {
	  processUltrasons(Sensors[US_BACK_RIGHT]);
  }
#endif
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <initMoteurs>:
#include <moteurs.h>

void initMoteurs(){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af04      	add	r7, sp, #16
	//DRV8825_moveMotorLineSpeed(&moteur_D, 0);
	//DRV8825_moveMotorLineSpeed(&moteur_G, 0);

	DRV8825_init(&moteur_D, EN_D_Pin, EN_D_GPIO_Port, Dir_D_Pin, Dir_D_GPIO_Port, &STEP_D, TIM_CHANNEL_4);
 8002d32:	230c      	movs	r3, #12
 8002d34:	9302      	str	r3, [sp, #8]
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <initMoteurs+0x50>)
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <initMoteurs+0x54>)
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <initMoteurs+0x54>)
 8002d44:	2102      	movs	r1, #2
 8002d46:	480f      	ldr	r0, [pc, #60]	; (8002d84 <initMoteurs+0x58>)
 8002d48:	f7fe fb64 	bl	8001414 <DRV8825_init>
	DRV8825_init(&moteur_G, EN_G_Pin, EN_G_GPIO_Port, Dir_G_Pin, Dir_G_GPIO_Port, &STEP_G, TIM_CHANNEL_1);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9302      	str	r3, [sp, #8]
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <initMoteurs+0x5c>)
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <initMoteurs+0x54>)
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2304      	movs	r3, #4
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <initMoteurs+0x54>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	480b      	ldr	r0, [pc, #44]	; (8002d8c <initMoteurs+0x60>)
 8002d60:	f7fe fb58 	bl	8001414 <DRV8825_init>

	DRV8825_setStart(&moteur_D, STOP);
 8002d64:	2101      	movs	r1, #1
 8002d66:	4807      	ldr	r0, [pc, #28]	; (8002d84 <initMoteurs+0x58>)
 8002d68:	f7fe fb89 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4807      	ldr	r0, [pc, #28]	; (8002d8c <initMoteurs+0x60>)
 8002d70:	f7fe fb85 	bl	800147e <DRV8825_setStart>

	//DRV8825_setStart(&moteur_D, START);
	//DRV8825_setStart(&moteur_G, START);

}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200004d8 	.word	0x200004d8
 8002d80:	40020800 	.word	0x40020800
 8002d84:	20000448 	.word	0x20000448
 8002d88:	200005b0 	.word	0x200005b0
 8002d8c:	20000460 	.word	0x20000460

08002d90 <stopMoteurs>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed);
}

void stopMoteurs(){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, STOP);
 8002d94:	2101      	movs	r1, #1
 8002d96:	4804      	ldr	r0, [pc, #16]	; (8002da8 <stopMoteurs+0x18>)
 8002d98:	f7fe fb71 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4803      	ldr	r0, [pc, #12]	; (8002dac <stopMoteurs+0x1c>)
 8002da0:	f7fe fb6d 	bl	800147e <DRV8825_setStart>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000448 	.word	0x20000448
 8002dac:	20000460 	.word	0x20000460

08002db0 <startMoteurs>:

void startMoteurs(){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, START);
 8002db4:	2100      	movs	r1, #0
 8002db6:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <startMoteurs+0x18>)
 8002db8:	f7fe fb61 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, START);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4803      	ldr	r0, [pc, #12]	; (8002dcc <startMoteurs+0x1c>)
 8002dc0:	f7fe fb5d 	bl	800147e <DRV8825_setStart>
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000448 	.word	0x20000448
 8002dcc:	20000460 	.word	0x20000460

08002dd0 <setMotors>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed_R);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed_L);
}

void setMotors(double left, double right) {
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	ed87 0b02 	vstr	d0, [r7, #8]
 8002dda:	ed87 1b00 	vstr	d1, [r7]
    // vitesses absolues
    DRV8825_moveMotorLineSpeed(&moteur_G, fabs(left));
 8002dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002de2:	f7fd ff21 	bl	8000c28 <__aeabi_d2f>
 8002de6:	ee07 0a90 	vmov	s15, r0
 8002dea:	eef0 7ae7 	vabs.f32	s15, s15
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	4830      	ldr	r0, [pc, #192]	; (8002eb4 <setMotors+0xe4>)
 8002df4:	f7fe fb58 	bl	80014a8 <DRV8825_moveMotorLineSpeed>
    DRV8825_moveMotorLineSpeed(&moteur_D, fabs(right));
 8002df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dfc:	f7fd ff14 	bl	8000c28 <__aeabi_d2f>
 8002e00:	ee07 0a90 	vmov	s15, r0
 8002e04:	eef0 7ae7 	vabs.f32	s15, s15
 8002e08:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0c:	482a      	ldr	r0, [pc, #168]	; (8002eb8 <setMotors+0xe8>)
 8002e0e:	f7fe fb4b 	bl	80014a8 <DRV8825_moveMotorLineSpeed>

    // directions
    DRV8825_setDir(&moteur_G, (left < 0)?BACKWARD:FORWARD);
 8002e12:	2301      	movs	r3, #1
 8002e14:	461c      	mov	r4, r3
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e22:	f7fd fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <setMotors+0x60>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	461c      	mov	r4, r3
 8002e30:	b2e3      	uxtb	r3, r4
 8002e32:	f083 0301 	eor.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	481d      	ldr	r0, [pc, #116]	; (8002eb4 <setMotors+0xe4>)
 8002e3e:	f7fe fb0c 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, (right < 0)?BACKWARD:FORWARD);
 8002e42:	2301      	movs	r3, #1
 8002e44:	461c      	mov	r4, r3
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e52:	f7fd fe63 	bl	8000b1c <__aeabi_dcmplt>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <setMotors+0x90>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	461c      	mov	r4, r3
 8002e60:	b2e3      	uxtb	r3, r4
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4812      	ldr	r0, [pc, #72]	; (8002eb8 <setMotors+0xe8>)
 8002e6e:	f7fe faf4 	bl	800145a <DRV8825_setDir>

    // activer ou non les moteurs
    if (left == 0 && right == 0)
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e7e:	f7fd fe43 	bl	8000b08 <__aeabi_dcmpeq>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <setMotors+0xd4>
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e94:	f7fd fe38 	bl	8000b08 <__aeabi_dcmpeq>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <setMotors+0xd4>
        stopMoteurs();
 8002e9e:	f7ff ff77 	bl	8002d90 <stopMoteurs>
 8002ea2:	e002      	b.n	8002eaa <setMotors+0xda>
    else
    	startMoteurs();
 8002ea4:	f7ff ff84 	bl	8002db0 <startMoteurs>
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000460 	.word	0x20000460
 8002eb8:	20000448 	.word	0x20000448

08002ebc <getTickRight>:
#include <asservissement.h>


int16_t getTickRight(){
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
	return (int16_t) CODEUR_D.Instance->CNT;
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <getTickRight+0x18>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b21b      	sxth	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000640 	.word	0x20000640

08002ed8 <getTickLeft>:

int16_t getTickLeft(){
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	return -1 * (int16_t) CODEUR_G.Instance->CNT;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <getTickLeft+0x1c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b21b      	sxth	r3, r3
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000568 	.word	0x20000568

08002ef8 <resetTickRight>:

void resetTickRight(){
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	CODEUR_D.Instance->CNT = 0;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <resetTickRight+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2200      	movs	r2, #0
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000640 	.word	0x20000640

08002f14 <resetTickLeft>:

void resetTickLeft(){
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	CODEUR_G.Instance->CNT = 0;
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <resetTickLeft+0x18>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000568 	.word	0x20000568

08002f30 <ODO_odometrie>:

void ODO_odometrie(){
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
			"x : %lf \n\r"
			"y : %lf \n\r"
			"o : %lf \n\n\r",g_x, g_y, g_angle);
#endif

	int valCodG = getTickLeft();
 8002f36:	f7ff ffcf 	bl	8002ed8 <getTickLeft>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	607b      	str	r3, [r7, #4]
	int valCodD = getTickRight();
 8002f3e:	f7ff ffbd 	bl	8002ebc <getTickRight>
 8002f42:	4603      	mov	r3, r0
 8002f44:	603b      	str	r3, [r7, #0]

	dDistance =  (valCodG*COEFF_CODEUR_L + valCodD*COEFF_CODEUR_R)/2;
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fb0c 	bl	8000564 <__aeabi_i2d>
 8002f4c:	a368      	add	r3, pc, #416	; (adr r3, 80030f0 <ODO_odometrie+0x1c0>)
 8002f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f52:	f7fd fb71 	bl	8000638 <__aeabi_dmul>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4614      	mov	r4, r2
 8002f5c:	461d      	mov	r5, r3
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f7fd fb00 	bl	8000564 <__aeabi_i2d>
 8002f64:	a362      	add	r3, pc, #392	; (adr r3, 80030f0 <ODO_odometrie+0x1c0>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f7fd fb65 	bl	8000638 <__aeabi_dmul>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4620      	mov	r0, r4
 8002f74:	4629      	mov	r1, r5
 8002f76:	f7fd f9a9 	bl	80002cc <__adddf3>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f8a:	f7fd fc7f 	bl	800088c <__aeabi_ddiv>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	495f      	ldr	r1, [pc, #380]	; (8003110 <ODO_odometrie+0x1e0>)
 8002f94:	e9c1 2300 	strd	r2, r3, [r1]
	dAngle = (valCodD*COEFF_CODEUR_R - valCodG*COEFF_CODEUR_L)/ENTRAXE;
 8002f98:	6838      	ldr	r0, [r7, #0]
 8002f9a:	f7fd fae3 	bl	8000564 <__aeabi_i2d>
 8002f9e:	a354      	add	r3, pc, #336	; (adr r3, 80030f0 <ODO_odometrie+0x1c0>)
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f7fd fb48 	bl	8000638 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fd fad7 	bl	8000564 <__aeabi_i2d>
 8002fb6:	a34e      	add	r3, pc, #312	; (adr r3, 80030f0 <ODO_odometrie+0x1c0>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd fb3c 	bl	8000638 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f7fd f97e 	bl	80002c8 <__aeabi_dsub>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <ODO_odometrie+0x1e4>)
 8002fda:	f7fd fc57 	bl	800088c <__aeabi_ddiv>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	494d      	ldr	r1, [pc, #308]	; (8003118 <ODO_odometrie+0x1e8>)
 8002fe4:	e9c1 2300 	strd	r2, r3, [r1]

	g_x += dDistance * cos(g_angle);
 8002fe8:	4b4c      	ldr	r3, [pc, #304]	; (800311c <ODO_odometrie+0x1ec>)
 8002fea:	ed93 7b00 	vldr	d7, [r3]
 8002fee:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff2:	eef0 0a67 	vmov.f32	s1, s15
 8002ff6:	f007 fe0b 	bl	800ac10 <cos>
 8002ffa:	ec51 0b10 	vmov	r0, r1, d0
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <ODO_odometrie+0x1e0>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f7fd fb18 	bl	8000638 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <ODO_odometrie+0x1f0>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7fd f959 	bl	80002cc <__adddf3>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4940      	ldr	r1, [pc, #256]	; (8003120 <ODO_odometrie+0x1f0>)
 8003020:	e9c1 2300 	strd	r2, r3, [r1]
	g_y += dDistance * sin(g_angle);
 8003024:	4b3d      	ldr	r3, [pc, #244]	; (800311c <ODO_odometrie+0x1ec>)
 8003026:	ed93 7b00 	vldr	d7, [r3]
 800302a:	eeb0 0a47 	vmov.f32	s0, s14
 800302e:	eef0 0a67 	vmov.f32	s1, s15
 8003032:	f007 fe3d 	bl	800acb0 <sin>
 8003036:	ec51 0b10 	vmov	r0, r1, d0
 800303a:	4b35      	ldr	r3, [pc, #212]	; (8003110 <ODO_odometrie+0x1e0>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd fafa 	bl	8000638 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <ODO_odometrie+0x1f4>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd f93b 	bl	80002cc <__adddf3>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4932      	ldr	r1, [pc, #200]	; (8003124 <ODO_odometrie+0x1f4>)
 800305c:	e9c1 2300 	strd	r2, r3, [r1]
	g_angle += dAngle;
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <ODO_odometrie+0x1ec>)
 8003062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <ODO_odometrie+0x1e8>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f7fd f92e 	bl	80002cc <__adddf3>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4929      	ldr	r1, [pc, #164]	; (800311c <ODO_odometrie+0x1ec>)
 8003076:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle > M_PI)
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <ODO_odometrie+0x1ec>)
 800307c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003080:	a31d      	add	r3, pc, #116	; (adr r3, 80030f8 <ODO_odometrie+0x1c8>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fd67 	bl	8000b58 <__aeabi_dcmpgt>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <ODO_odometrie+0x17a>
		g_angle = g_angle - M_TWOPI;
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <ODO_odometrie+0x1ec>)
 8003092:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003096:	a31a      	add	r3, pc, #104	; (adr r3, 8003100 <ODO_odometrie+0x1d0>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd f914 	bl	80002c8 <__aeabi_dsub>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	491d      	ldr	r1, [pc, #116]	; (800311c <ODO_odometrie+0x1ec>)
 80030a6:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle < -M_PI)
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <ODO_odometrie+0x1ec>)
 80030ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b0:	a315      	add	r3, pc, #84	; (adr r3, 8003108 <ODO_odometrie+0x1d8>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd fd31 	bl	8000b1c <__aeabi_dcmplt>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00c      	beq.n	80030da <ODO_odometrie+0x1aa>
		g_angle = g_angle + M_TWOPI;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <ODO_odometrie+0x1ec>)
 80030c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c6:	a30e      	add	r3, pc, #56	; (adr r3, 8003100 <ODO_odometrie+0x1d0>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd f8fe 	bl	80002cc <__adddf3>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4911      	ldr	r1, [pc, #68]	; (800311c <ODO_odometrie+0x1ec>)
 80030d6:	e9c1 2300 	strd	r2, r3, [r1]

	resetTickRight();
 80030da:	f7ff ff0d 	bl	8002ef8 <resetTickRight>
	resetTickLeft();
 80030de:	f7ff ff19 	bl	8002f14 <resetTickLeft>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	f3af 8000 	nop.w
 80030f0:	47c0d798 	.word	0x47c0d798
 80030f4:	3fa484bc 	.word	0x3fa484bc
 80030f8:	54442d18 	.word	0x54442d18
 80030fc:	400921fb 	.word	0x400921fb
 8003100:	54442d18 	.word	0x54442d18
 8003104:	401921fb 	.word	0x401921fb
 8003108:	54442d18 	.word	0x54442d18
 800310c:	c00921fb 	.word	0xc00921fb
 8003110:	20000488 	.word	0x20000488
 8003114:	40700000 	.word	0x40700000
 8003118:	20000440 	.word	0x20000440
 800311c:	20000438 	.word	0x20000438
 8003120:	20000430 	.word	0x20000430
 8003124:	20000480 	.word	0x20000480

08003128 <ODO_setX>:

void ODO_setX(double x){
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	ed87 0b00 	vstr	d0, [r7]
	g_x = x;
 8003132:	4905      	ldr	r1, [pc, #20]	; (8003148 <ODO_setX+0x20>)
 8003134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003138:	e9c1 2300 	strd	r2, r3, [r1]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	20000430 	.word	0x20000430

0800314c <ODO_setY>:

void ODO_setY(double y){
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	ed87 0b00 	vstr	d0, [r7]
	g_y = y;
 8003156:	4905      	ldr	r1, [pc, #20]	; (800316c <ODO_setY+0x20>)
 8003158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800315c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20000480 	.word	0x20000480

08003170 <ODO_setAngle>:
void ODO_setPosition(double x, double y){
	g_x = x;
	g_y = y;
}

void ODO_setAngle(double angle){
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	ed87 0b00 	vstr	d0, [r7]
	g_angle = angle;
 800317a:	4905      	ldr	r1, [pc, #20]	; (8003190 <ODO_setAngle+0x20>)
 800317c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003180:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	20000438 	.word	0x20000438

08003194 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <RetargetInit+0x28>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <RetargetInit+0x2c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6898      	ldr	r0, [r3, #8]
 80031a8:	2300      	movs	r3, #0
 80031aa:	2202      	movs	r2, #2
 80031ac:	2100      	movs	r1, #0
 80031ae:	f005 fbf1 	bl	8008994 <setvbuf>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200004d4 	.word	0x200004d4
 80031c0:	200000d4 	.word	0x200000d4

080031c4 <_isatty>:

int _isatty(int fd) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db04      	blt.n	80031dc <_isatty+0x18>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	dc01      	bgt.n	80031dc <_isatty+0x18>
    return 1;
 80031d8:	2301      	movs	r3, #1
 80031da:	e005      	b.n	80031e8 <_isatty+0x24>

  errno = EBADF;
 80031dc:	f004 feb0 	bl	8007f40 <__errno>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2209      	movs	r2, #9
 80031e4:	601a      	str	r2, [r3, #0]
  return 0;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_write>:

int _write(int fd, char* ptr, int len) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d002      	beq.n	8003208 <_write+0x18>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d111      	bne.n	800322c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <_write+0x54>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	b29a      	uxth	r2, r3
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	f003 ffd6 	bl	80071c6 <HAL_UART_Transmit>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <_write+0x38>
      return len;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	e008      	b.n	800323a <_write+0x4a>
    else
      return EIO;
 8003228:	2305      	movs	r3, #5
 800322a:	e006      	b.n	800323a <_write+0x4a>
  }
  errno = EBADF;
 800322c:	f004 fe88 	bl	8007f40 <__errno>
 8003230:	4603      	mov	r3, r0
 8003232:	2209      	movs	r2, #9
 8003234:	601a      	str	r2, [r3, #0]
  return -1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200004d4 	.word	0x200004d4

08003248 <_close>:

int _close(int fd) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db04      	blt.n	8003260 <_close+0x18>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	dc01      	bgt.n	8003260 <_close+0x18>
    return 0;
 800325c:	2300      	movs	r3, #0
 800325e:	e006      	b.n	800326e <_close+0x26>

  errno = EBADF;
 8003260:	f004 fe6e 	bl	8007f40 <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	2209      	movs	r2, #9
 8003268:	601a      	str	r2, [r3, #0]
  return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003282:	f004 fe5d 	bl	8007f40 <__errno>
 8003286:	4603      	mov	r3, r0
 8003288:	2209      	movs	r2, #9
 800328a:	601a      	str	r2, [r3, #0]
  return -1;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <_read>:

int _read(int fd, char* ptr, int len) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d110      	bne.n	80032cc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <_read+0x4c>)
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	2201      	movs	r2, #1
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	f004 f818 	bl	80072ea <HAL_UART_Receive>
 80032ba:	4603      	mov	r3, r0
 80032bc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <_read+0x30>
      return 1;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e008      	b.n	80032da <_read+0x42>
    else
      return EIO;
 80032c8:	2305      	movs	r3, #5
 80032ca:	e006      	b.n	80032da <_read+0x42>
  }
  errno = EBADF;
 80032cc:	f004 fe38 	bl	8007f40 <__errno>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2209      	movs	r2, #9
 80032d4:	601a      	str	r2, [r3, #0]
  return -1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200004d4 	.word	0x200004d4

080032e8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db08      	blt.n	800330a <_fstat+0x22>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	dc05      	bgt.n	800330a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003304:	605a      	str	r2, [r3, #4]
    return 0;
 8003306:	2300      	movs	r3, #0
 8003308:	e005      	b.n	8003316 <_fstat+0x2e>
  }

  errno = EBADF;
 800330a:	f004 fe19 	bl	8007f40 <__errno>
 800330e:	4603      	mov	r3, r0
 8003310:	2209      	movs	r2, #9
 8003312:	601a      	str	r2, [r3, #0]
  return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_MspInit+0x4c>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_MspInit+0x4c>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_MspInit+0x4c>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_MspInit+0x4c>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_MspInit+0x4c>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_MspInit+0x4c>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
#if DEBUG_G == 1 && DEBUG_FAULT
	printf("Bug !");
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <HardFault_Handler+0x4>

08003384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <MemManage_Handler+0x4>

0800338a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <BusFault_Handler+0x4>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <UsageFault_Handler+0x4>

08003396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c4:	f000 ffb4 	bl	8004330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}

080033cc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80033d0:	2002      	movs	r0, #2
 80033d2:	f001 ff1f 	bl	8005214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <TIM2_IRQHandler+0x10>)
 80033e2:	f002 ffff 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000688 	.word	0x20000688

080033f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <TIM4_IRQHandler+0x10>)
 80033f6:	f002 fff5 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000520 	.word	0x20000520

08003404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <USART2_IRQHandler+0x10>)
 800340a:	f004 f841 	bl	8007490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000828 	.word	0x20000828

08003418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800341c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003420:	f001 fef8 	bl	8005214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003424:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003428:	f001 fef4 	bl	8005214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800342c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003430:	f001 fef0 	bl	8005214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <UART4_IRQHandler+0x10>)
 800343e:	f004 f827 	bl	8007490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200007e4 	.word	0x200007e4

0800344c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <UART5_IRQHandler+0x10>)
 8003452:	f004 f81d 	bl	8007490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000075c 	.word	0x2000075c

08003460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <TIM6_DAC_IRQHandler+0x10>)
 8003466:	f002 ffbd 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200005f8 	.word	0x200005f8

08003474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <TIM7_IRQHandler+0x10>)
 800347a:	f002 ffb3 	bl	80063e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200006d0 	.word	0x200006d0

08003488 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <_sbrk+0x50>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <_sbrk+0x16>
		heap_end = &end;
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <_sbrk+0x50>)
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <_sbrk+0x54>)
 800349c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <_sbrk+0x50>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <_sbrk+0x50>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	466a      	mov	r2, sp
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d907      	bls.n	80034c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80034b2:	f004 fd45 	bl	8007f40 <__errno>
 80034b6:	4603      	mov	r3, r0
 80034b8:	220c      	movs	r2, #12
 80034ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	e006      	b.n	80034d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <_sbrk+0x50>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <_sbrk+0x50>)
 80034cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200002dc 	.word	0x200002dc
 80034dc:	20000880 	.word	0x20000880

080034e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <SystemInit+0x28>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <SystemInit+0x28>)
 80034ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SystemInit+0x28>)
 80034f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034fa:	609a      	str	r2, [r3, #8]
#endif
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08c      	sub	sp, #48	; 0x30
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fd3a 	bl	8007f94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <MX_TIM1_Init+0xa8>)
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <MX_TIM1_Init+0xac>)
 800352c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <MX_TIM1_Init+0xa8>)
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <MX_TIM1_Init+0xa8>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <MX_TIM1_Init+0xa8>)
 800353c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003540:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <MX_TIM1_Init+0xa8>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <MX_TIM1_Init+0xa8>)
 800354a:	2200      	movs	r2, #0
 800354c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <MX_TIM1_Init+0xa8>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003554:	2303      	movs	r3, #3
 8003556:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800355c:	2301      	movs	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003564:	230a      	movs	r3, #10
 8003566:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003570:	2300      	movs	r3, #0
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	4619      	mov	r1, r3
 800357e:	480d      	ldr	r0, [pc, #52]	; (80035b4 <MX_TIM1_Init+0xa8>)
 8003580:	f002 fdfc 	bl	800617c <HAL_TIM_Encoder_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800358a:	f7ff fbc8 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4806      	ldr	r0, [pc, #24]	; (80035b4 <MX_TIM1_Init+0xa8>)
 800359c:	f003 fce4 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80035a6:	f7ff fbba 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80035aa:	bf00      	nop
 80035ac:	3730      	adds	r7, #48	; 0x30
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000640 	.word	0x20000640
 80035b8:	40010000 	.word	0x40010000

080035bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d0:	463b      	mov	r3, r7
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <MX_TIM2_Init+0x98>)
 80035da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <MX_TIM2_Init+0x98>)
 80035e2:	f640 227e 	movw	r2, #2686	; 0xa7e
 80035e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <MX_TIM2_Init+0x98>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80035ee:	4b19      	ldr	r3, [pc, #100]	; (8003654 <MX_TIM2_Init+0x98>)
 80035f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <MX_TIM2_Init+0x98>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <MX_TIM2_Init+0x98>)
 80035fe:	2200      	movs	r2, #0
 8003600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003602:	4814      	ldr	r0, [pc, #80]	; (8003654 <MX_TIM2_Init+0x98>)
 8003604:	f002 fbd8 	bl	8005db8 <HAL_TIM_Base_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800360e:	f7ff fb86 	bl	8002d1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	4619      	mov	r1, r3
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <MX_TIM2_Init+0x98>)
 8003620:	f003 f8a6 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800362a:	f7ff fb78 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003636:	463b      	mov	r3, r7
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	; (8003654 <MX_TIM2_Init+0x98>)
 800363c:	f003 fc94 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003646:	f7ff fb6a 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000688 	.word	0x20000688

08003658 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fc94 	bl	8007f94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <MX_TIM3_Init+0xa0>)
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <MX_TIM3_Init+0xa4>)
 8003678:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <MX_TIM3_Init+0xa0>)
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <MX_TIM3_Init+0xa0>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <MX_TIM3_Init+0xa0>)
 8003688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <MX_TIM3_Init+0xa0>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <MX_TIM3_Init+0xa0>)
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800369a:	2303      	movs	r3, #3
 800369c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036a2:	2301      	movs	r3, #1
 80036a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036b2:	2301      	movs	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036b6:	2300      	movs	r3, #0
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4619      	mov	r1, r3
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <MX_TIM3_Init+0xa0>)
 80036c6:	f002 fd59 	bl	800617c <HAL_TIM_Encoder_Init>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80036d0:	f7ff fb25 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <MX_TIM3_Init+0xa0>)
 80036e2:	f003 fc41 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80036ec:	f7ff fb17 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	3730      	adds	r7, #48	; 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000568 	.word	0x20000568
 80036fc:	40000400 	.word	0x40000400

08003700 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	463b      	mov	r3, r7
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <MX_TIM4_Init+0x90>)
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <MX_TIM4_Init+0x94>)
 8003720:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <MX_TIM4_Init+0x90>)
 8003724:	2201      	movs	r2, #1
 8003726:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <MX_TIM4_Init+0x90>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <MX_TIM4_Init+0x90>)
 8003730:	225a      	movs	r2, #90	; 0x5a
 8003732:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <MX_TIM4_Init+0x90>)
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <MX_TIM4_Init+0x90>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003740:	4813      	ldr	r0, [pc, #76]	; (8003790 <MX_TIM4_Init+0x90>)
 8003742:	f002 fb39 	bl	8005db8 <HAL_TIM_Base_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800374c:	f7ff fae7 	bl	8002d1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003754:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003756:	f107 0308 	add.w	r3, r7, #8
 800375a:	4619      	mov	r1, r3
 800375c:	480c      	ldr	r0, [pc, #48]	; (8003790 <MX_TIM4_Init+0x90>)
 800375e:	f003 f807 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003768:	f7ff fad9 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376c:	2300      	movs	r3, #0
 800376e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003774:	463b      	mov	r3, r7
 8003776:	4619      	mov	r1, r3
 8003778:	4805      	ldr	r0, [pc, #20]	; (8003790 <MX_TIM4_Init+0x90>)
 800377a:	f003 fbf5 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003784:	f7ff facb 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000520 	.word	0x20000520
 8003794:	40000800 	.word	0x40000800

08003798 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379e:	463b      	mov	r3, r7
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <MX_TIM6_Init+0x64>)
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <MX_TIM6_Init+0x68>)
 80037aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <MX_TIM6_Init+0x64>)
 80037ae:	f242 3227 	movw	r2, #8999	; 0x2327
 80037b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <MX_TIM6_Init+0x64>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <MX_TIM6_Init+0x64>)
 80037bc:	2263      	movs	r2, #99	; 0x63
 80037be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_TIM6_Init+0x64>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037c6:	480d      	ldr	r0, [pc, #52]	; (80037fc <MX_TIM6_Init+0x64>)
 80037c8:	f002 faf6 	bl	8005db8 <HAL_TIM_Base_Init>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80037d2:	f7ff faa4 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037de:	463b      	mov	r3, r7
 80037e0:	4619      	mov	r1, r3
 80037e2:	4806      	ldr	r0, [pc, #24]	; (80037fc <MX_TIM6_Init+0x64>)
 80037e4:	f003 fbc0 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80037ee:	f7ff fa96 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200005f8 	.word	0x200005f8
 8003800:	40001000 	.word	0x40001000

08003804 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380a:	463b      	mov	r3, r7
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <MX_TIM7_Init+0x64>)
 8003814:	4a15      	ldr	r2, [pc, #84]	; (800386c <MX_TIM7_Init+0x68>)
 8003816:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <MX_TIM7_Init+0x64>)
 800381a:	f242 3227 	movw	r2, #8999	; 0x2327
 800381e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <MX_TIM7_Init+0x64>)
 8003822:	2200      	movs	r2, #0
 8003824:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <MX_TIM7_Init+0x64>)
 8003828:	f242 720f 	movw	r2, #9999	; 0x270f
 800382c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <MX_TIM7_Init+0x64>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <MX_TIM7_Init+0x64>)
 8003836:	f002 fabf 	bl	8005db8 <HAL_TIM_Base_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003840:	f7ff fa6d 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800384c:	463b      	mov	r3, r7
 800384e:	4619      	mov	r1, r3
 8003850:	4805      	ldr	r0, [pc, #20]	; (8003868 <MX_TIM7_Init+0x64>)
 8003852:	f003 fb89 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800385c:	f7ff fa5f 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200006d0 	.word	0x200006d0
 800386c:	40001400 	.word	0x40001400

08003870 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b096      	sub	sp, #88	; 0x58
 8003874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	615a      	str	r2, [r3, #20]
 80038a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	2220      	movs	r2, #32
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f004 fb73 	bl	8007f94 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038b0:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <MX_TIM8_Init+0x13c>)
 80038b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 80038b4:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038b6:	22b3      	movs	r2, #179	; 0xb3
 80038b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c8:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d4:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80038da:	4833      	ldr	r0, [pc, #204]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038dc:	f002 fa6c 	bl	8005db8 <HAL_TIM_Base_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80038e6:	f7ff fa1a 	bl	8002d1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80038f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f4:	4619      	mov	r1, r3
 80038f6:	482c      	ldr	r0, [pc, #176]	; (80039a8 <MX_TIM8_Init+0x138>)
 80038f8:	f002 ff3a 	bl	8006770 <HAL_TIM_ConfigClockSource>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003902:	f7ff fa0c 	bl	8002d1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003906:	4828      	ldr	r0, [pc, #160]	; (80039a8 <MX_TIM8_Init+0x138>)
 8003908:	f002 fb16 	bl	8005f38 <HAL_TIM_PWM_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003912:	f7ff fa04 	bl	8002d1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800391e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003922:	4619      	mov	r1, r3
 8003924:	4820      	ldr	r0, [pc, #128]	; (80039a8 <MX_TIM8_Init+0x138>)
 8003926:	f003 fb1f 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003930:	f7ff f9f5 	bl	8002d1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003934:	2360      	movs	r3, #96	; 0x60
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8003938:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800394e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003952:	220c      	movs	r2, #12
 8003954:	4619      	mov	r1, r3
 8003956:	4814      	ldr	r0, [pc, #80]	; (80039a8 <MX_TIM8_Init+0x138>)
 8003958:	f002 fe4c 	bl	80065f4 <HAL_TIM_PWM_ConfigChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003962:	f7ff f9dc 	bl	8002d1e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800397a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003980:	2300      	movs	r3, #0
 8003982:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	4619      	mov	r1, r3
 8003988:	4807      	ldr	r0, [pc, #28]	; (80039a8 <MX_TIM8_Init+0x138>)
 800398a:	f003 fb69 	bl	8007060 <HAL_TIMEx_ConfigBreakDeadTime>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003994:	f7ff f9c3 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003998:	4803      	ldr	r0, [pc, #12]	; (80039a8 <MX_TIM8_Init+0x138>)
 800399a:	f000 f97f 	bl	8003c9c <HAL_TIM_MspPostInit>

}
 800399e:	bf00      	nop
 80039a0:	3758      	adds	r7, #88	; 0x58
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200004d8 	.word	0x200004d8
 80039ac:	40010400 	.word	0x40010400

080039b0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
 80039c4:	615a      	str	r2, [r3, #20]
 80039c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039ca:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <MX_TIM11_Init+0x98>)
 80039cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039d0:	22b3      	movs	r2, #179	; 0xb3
 80039d2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e2:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e8:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80039ee:	4815      	ldr	r0, [pc, #84]	; (8003a44 <MX_TIM11_Init+0x94>)
 80039f0:	f002 f9e2 	bl	8005db8 <HAL_TIM_Base_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80039fa:	f7ff f990 	bl	8002d1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80039fe:	4811      	ldr	r0, [pc, #68]	; (8003a44 <MX_TIM11_Init+0x94>)
 8003a00:	f002 fa9a 	bl	8005f38 <HAL_TIM_PWM_Init>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003a0a:	f7ff f988 	bl	8002d1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a0e:	2360      	movs	r3, #96	; 0x60
 8003a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2200      	movs	r2, #0
 8003a22:	4619      	mov	r1, r3
 8003a24:	4807      	ldr	r0, [pc, #28]	; (8003a44 <MX_TIM11_Init+0x94>)
 8003a26:	f002 fde5 	bl	80065f4 <HAL_TIM_PWM_ConfigChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003a30:	f7ff f975 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003a34:	4803      	ldr	r0, [pc, #12]	; (8003a44 <MX_TIM11_Init+0x94>)
 8003a36:	f000 f931 	bl	8003c9c <HAL_TIM_MspPostInit>

}
 8003a3a:	bf00      	nop
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200005b0 	.word	0x200005b0
 8003a48:	40014800 	.word	0x40014800

08003a4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	; 0x30
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a32      	ldr	r2, [pc, #200]	; (8003b34 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d12d      	bne.n	8003aca <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	4a30      	ldr	r2, [pc, #192]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b2e      	ldr	r3, [pc, #184]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	481e      	ldr	r0, [pc, #120]	; (8003b3c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003ac4:	f001 f9f8 	bl	8004eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003ac8:	e030      	b.n	8003b2c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d12b      	bne.n	8003b2c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6313      	str	r3, [r2, #48]	; 0x30
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b0c:	23c0      	movs	r3, #192	; 0xc0
 8003b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	4805      	ldr	r0, [pc, #20]	; (8003b3c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003b28:	f001 f9c6 	bl	8004eb8 <HAL_GPIO_Init>
}
 8003b2c:	bf00      	nop
 8003b2e:	3730      	adds	r7, #48	; 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40000400 	.word	0x40000400

08003b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d116      	bne.n	8003b84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a49      	ldr	r2, [pc, #292]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	2101      	movs	r1, #1
 8003b76:	201c      	movs	r0, #28
 8003b78:	f001 f8d5 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b7c:	201c      	movs	r0, #28
 8003b7e:	f001 f8ee 	bl	8004d5e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003b82:	e07a      	b.n	8003c7a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <HAL_TIM_Base_MspInit+0x144>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d116      	bne.n	8003bbc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003b98:	f043 0304 	orr.w	r3, r3, #4
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2101      	movs	r1, #1
 8003bae:	201e      	movs	r0, #30
 8003bb0:	f001 f8b9 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003bb4:	201e      	movs	r0, #30
 8003bb6:	f001 f8d2 	bl	8004d5e <HAL_NVIC_EnableIRQ>
}
 8003bba:	e05e      	b.n	8003c7a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM6)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <HAL_TIM_Base_MspInit+0x148>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d116      	bne.n	8003bf4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a2d      	ldr	r2, [pc, #180]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003bd0:	f043 0310 	orr.w	r3, r3, #16
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2102      	movs	r1, #2
 8003be6:	2036      	movs	r0, #54	; 0x36
 8003be8:	f001 f89d 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bec:	2036      	movs	r0, #54	; 0x36
 8003bee:	f001 f8b6 	bl	8004d5e <HAL_NVIC_EnableIRQ>
}
 8003bf2:	e042      	b.n	8003c7a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <HAL_TIM_Base_MspInit+0x14c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d116      	bne.n	8003c2c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	2037      	movs	r0, #55	; 0x37
 8003c20:	f001 f881 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c24:	2037      	movs	r0, #55	; 0x37
 8003c26:	f001 f89a 	bl	8004d5e <HAL_NVIC_EnableIRQ>
}
 8003c2a:	e026      	b.n	8003c7a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM8)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIM_Base_MspInit+0x150>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a11      	ldr	r2, [pc, #68]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	e012      	b.n	8003c7a <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <HAL_TIM_Base_MspInit+0x154>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10d      	bne.n	8003c7a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_TIM_Base_MspInit+0x140>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
}
 8003c7a:	bf00      	nop
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40001000 	.word	0x40001000
 8003c90:	40001400 	.word	0x40001400
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014800 	.word	0x40014800

08003c9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <HAL_TIM_MspPostInit+0xb4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d11f      	bne.n	8003cfe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_TIM_MspPostInit+0xb8>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_TIM_MspPostInit+0xb8>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HAL_TIM_MspPostInit+0xb8>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cec:	2303      	movs	r3, #3
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4818      	ldr	r0, [pc, #96]	; (8003d58 <HAL_TIM_MspPostInit+0xbc>)
 8003cf8:	f001 f8de 	bl	8004eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003cfc:	e023      	b.n	8003d46 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <HAL_TIM_MspPostInit+0xc0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d11e      	bne.n	8003d46 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_TIM_MspPostInit+0xb8>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <HAL_TIM_MspPostInit+0xb8>)
 8003d12:	f043 0302 	orr.w	r3, r3, #2
 8003d16:	6313      	str	r3, [r2, #48]	; 0x30
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_TIM_MspPostInit+0xb8>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003d36:	2303      	movs	r3, #3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4807      	ldr	r0, [pc, #28]	; (8003d60 <HAL_TIM_MspPostInit+0xc4>)
 8003d42:	f001 f8b9 	bl	8004eb8 <HAL_GPIO_Init>
}
 8003d46:	bf00      	nop
 8003d48:	3728      	adds	r7, #40	; 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40020400 	.word	0x40020400

08003d64 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <MX_UART4_Init+0x50>)
 8003d6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d9a:	4805      	ldr	r0, [pc, #20]	; (8003db0 <MX_UART4_Init+0x4c>)
 8003d9c:	f003 f9c6 	bl	800712c <HAL_UART_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003da6:	f7fe ffba 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	200007e4 	.word	0x200007e4
 8003db4:	40004c00 	.word	0x40004c00

08003db8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <MX_UART5_Init+0x50>)
 8003dc0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dc8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003dca:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dde:	220c      	movs	r2, #12
 8003de0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003dee:	4805      	ldr	r0, [pc, #20]	; (8003e04 <MX_UART5_Init+0x4c>)
 8003df0:	f003 f99c 	bl	800712c <HAL_UART_Init>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003dfa:	f7fe ff90 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000075c 	.word	0x2000075c
 8003e08:	40005000 	.word	0x40005000

08003e0c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e12:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <MX_USART1_UART_Init+0x50>)
 8003e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e32:	220c      	movs	r2, #12
 8003e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <MX_USART1_UART_Init+0x4c>)
 8003e44:	f003 f972 	bl	800712c <HAL_UART_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e4e:	f7fe ff66 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200007a0 	.word	0x200007a0
 8003e5c:	40011000 	.word	0x40011000

08003e60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <MX_USART2_UART_Init+0x50>)
 8003e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e86:	220c      	movs	r2, #12
 8003e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e96:	4805      	ldr	r0, [pc, #20]	; (8003eac <MX_USART2_UART_Init+0x4c>)
 8003e98:	f003 f948 	bl	800712c <HAL_UART_Init>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ea2:	f7fe ff3c 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000828 	.word	0x20000828
 8003eb0:	40004400 	.word	0x40004400

08003eb4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <MX_USART3_UART_Init+0x4c>)
 8003ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <MX_USART3_UART_Init+0x50>)
 8003ec2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ed8:	220c      	movs	r2, #12
 8003eda:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ee8:	4804      	ldr	r0, [pc, #16]	; (8003efc <MX_USART3_UART_Init+0x48>)
 8003eea:	f003 f91f 	bl	800712c <HAL_UART_Init>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003ef4:	f7fe ff13 	bl	8002d1e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000718 	.word	0x20000718
 8003f00:	40004800 	.word	0x40004800
 8003f04:	0003d090 	.word	0x0003d090

08003f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b094      	sub	sp, #80	; 0x50
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a8d      	ldr	r2, [pc, #564]	; (800415c <HAL_UART_MspInit+0x254>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d134      	bne.n	8003f94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f2e:	4b8c      	ldr	r3, [pc, #560]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a8b      	ldr	r2, [pc, #556]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b89      	ldr	r3, [pc, #548]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	4b85      	ldr	r3, [pc, #532]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a84      	ldr	r2, [pc, #528]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b82      	ldr	r3, [pc, #520]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f62:	2303      	movs	r3, #3
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f72:	2308      	movs	r3, #8
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4879      	ldr	r0, [pc, #484]	; (8004164 <HAL_UART_MspInit+0x25c>)
 8003f7e:	f000 ff9b 	bl	8004eb8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2100      	movs	r1, #0
 8003f86:	2034      	movs	r0, #52	; 0x34
 8003f88:	f000 fecd 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003f8c:	2034      	movs	r0, #52	; 0x34
 8003f8e:	f000 fee6 	bl	8004d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003f92:	e145      	b.n	8004220 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART5)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a73      	ldr	r2, [pc, #460]	; (8004168 <HAL_UART_MspInit+0x260>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d153      	bne.n	8004046 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa2:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	4b68      	ldr	r3, [pc, #416]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a67      	ldr	r2, [pc, #412]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b65      	ldr	r3, [pc, #404]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fda:	4b61      	ldr	r3, [pc, #388]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a60      	ldr	r2, [pc, #384]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fe0:	f043 0308 	orr.w	r3, r3, #8
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b5e      	ldr	r3, [pc, #376]	; (8004160 <HAL_UART_MspInit+0x258>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004000:	2303      	movs	r3, #3
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004004:	2308      	movs	r3, #8
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800400c:	4619      	mov	r1, r3
 800400e:	4857      	ldr	r0, [pc, #348]	; (800416c <HAL_UART_MspInit+0x264>)
 8004010:	f000 ff52 	bl	8004eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004014:	2304      	movs	r3, #4
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800401c:	2301      	movs	r3, #1
 800401e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004020:	2303      	movs	r3, #3
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004024:	2308      	movs	r3, #8
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800402c:	4619      	mov	r1, r3
 800402e:	4850      	ldr	r0, [pc, #320]	; (8004170 <HAL_UART_MspInit+0x268>)
 8004030:	f000 ff42 	bl	8004eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	2035      	movs	r0, #53	; 0x35
 800403a:	f000 fe74 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800403e:	2035      	movs	r0, #53	; 0x35
 8004040:	f000 fe8d 	bl	8004d5e <HAL_NVIC_EnableIRQ>
}
 8004044:	e0ec      	b.n	8004220 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a4a      	ldr	r2, [pc, #296]	; (8004174 <HAL_UART_MspInit+0x26c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d14b      	bne.n	80040e8 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	4a41      	ldr	r2, [pc, #260]	; (8004160 <HAL_UART_MspInit+0x258>)
 800405a:	f043 0310 	orr.w	r3, r3, #16
 800405e:	6453      	str	r3, [r2, #68]	; 0x44
 8004060:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406c:	2300      	movs	r3, #0
 800406e:	623b      	str	r3, [r7, #32]
 8004070:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4a3a      	ldr	r2, [pc, #232]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6313      	str	r3, [r2, #48]	; 0x30
 800407c:	4b38      	ldr	r3, [pc, #224]	; (8004160 <HAL_UART_MspInit+0x258>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	623b      	str	r3, [r7, #32]
 8004086:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	4b34      	ldr	r3, [pc, #208]	; (8004160 <HAL_UART_MspInit+0x258>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	4a33      	ldr	r2, [pc, #204]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004092:	f043 0302 	orr.w	r3, r3, #2
 8004096:	6313      	str	r3, [r2, #48]	; 0x30
 8004098:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_UART_MspInit+0x258>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040aa:	2302      	movs	r3, #2
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b2:	2303      	movs	r3, #3
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040b6:	2307      	movs	r3, #7
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040be:	4619      	mov	r1, r3
 80040c0:	4828      	ldr	r0, [pc, #160]	; (8004164 <HAL_UART_MspInit+0x25c>)
 80040c2:	f000 fef9 	bl	8004eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d2:	2303      	movs	r3, #3
 80040d4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040d6:	2307      	movs	r3, #7
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040de:	4619      	mov	r1, r3
 80040e0:	4825      	ldr	r0, [pc, #148]	; (8004178 <HAL_UART_MspInit+0x270>)
 80040e2:	f000 fee9 	bl	8004eb8 <HAL_GPIO_Init>
}
 80040e6:	e09b      	b.n	8004220 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a23      	ldr	r2, [pc, #140]	; (800417c <HAL_UART_MspInit+0x274>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d146      	bne.n	8004180 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <HAL_UART_MspInit+0x258>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	4a19      	ldr	r2, [pc, #100]	; (8004160 <HAL_UART_MspInit+0x258>)
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	6413      	str	r3, [r2, #64]	; 0x40
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a12      	ldr	r2, [pc, #72]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
 800411e:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_UART_MspInit+0x258>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800412a:	230c      	movs	r3, #12
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2303      	movs	r3, #3
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800413a:	2307      	movs	r3, #7
 800413c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004142:	4619      	mov	r1, r3
 8004144:	4807      	ldr	r0, [pc, #28]	; (8004164 <HAL_UART_MspInit+0x25c>)
 8004146:	f000 feb7 	bl	8004eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800414a:	2200      	movs	r2, #0
 800414c:	2105      	movs	r1, #5
 800414e:	2026      	movs	r0, #38	; 0x26
 8004150:	f000 fde9 	bl	8004d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004154:	2026      	movs	r0, #38	; 0x26
 8004156:	f000 fe02 	bl	8004d5e <HAL_NVIC_EnableIRQ>
}
 800415a:	e061      	b.n	8004220 <HAL_UART_MspInit+0x318>
 800415c:	40004c00 	.word	0x40004c00
 8004160:	40023800 	.word	0x40023800
 8004164:	40020000 	.word	0x40020000
 8004168:	40005000 	.word	0x40005000
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00
 8004174:	40011000 	.word	0x40011000
 8004178:	40020400 	.word	0x40020400
 800417c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <HAL_UART_MspInit+0x320>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d14a      	bne.n	8004220 <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART3_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_UART_MspInit+0x324>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a26      	ldr	r2, [pc, #152]	; (800422c <HAL_UART_MspInit+0x324>)
 8004194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_UART_MspInit+0x324>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_UART_MspInit+0x324>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_UART_MspInit+0x324>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6313      	str	r3, [r2, #48]	; 0x30
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_UART_MspInit+0x324>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_UART_MspInit+0x324>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_UART_MspInit+0x324>)
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	6313      	str	r3, [r2, #48]	; 0x30
 80041d2:	4b16      	ldr	r3, [pc, #88]	; (800422c <HAL_UART_MspInit+0x324>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041de:	2320      	movs	r3, #32
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e2:	2302      	movs	r3, #2
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ea:	2303      	movs	r3, #3
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041ee:	2307      	movs	r3, #7
 80041f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041f6:	4619      	mov	r1, r3
 80041f8:	480d      	ldr	r0, [pc, #52]	; (8004230 <HAL_UART_MspInit+0x328>)
 80041fa:	f000 fe5d 	bl	8004eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004202:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2302      	movs	r3, #2
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420c:	2303      	movs	r3, #3
 800420e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004210:	2307      	movs	r3, #7
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004214:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004218:	4619      	mov	r1, r3
 800421a:	4806      	ldr	r0, [pc, #24]	; (8004234 <HAL_UART_MspInit+0x32c>)
 800421c:	f000 fe4c 	bl	8004eb8 <HAL_GPIO_Init>
}
 8004220:	bf00      	nop
 8004222:	3750      	adds	r7, #80	; 0x50
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40004800 	.word	0x40004800
 800422c:	40023800 	.word	0x40023800
 8004230:	40020800 	.word	0x40020800
 8004234:	40020400 	.word	0x40020400

08004238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800423c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800423e:	e003      	b.n	8004248 <LoopCopyDataInit>

08004240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004246:	3104      	adds	r1, #4

08004248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004248:	480b      	ldr	r0, [pc, #44]	; (8004278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800424c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800424e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004250:	d3f6      	bcc.n	8004240 <CopyDataInit>
  ldr  r2, =_sbss
 8004252:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004254:	e002      	b.n	800425c <LoopFillZerobss>

08004256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004258:	f842 3b04 	str.w	r3, [r2], #4

0800425c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800425e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004260:	d3f9      	bcc.n	8004256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004262:	f7ff f93d 	bl	80034e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004266:	f003 fe71 	bl	8007f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800426a:	f7fe fa7d 	bl	8002768 <main>
  bx  lr    
 800426e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004270:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004274:	0800da90 	.word	0x0800da90
  ldr  r0, =_sdata
 8004278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800427c:	200002a8 	.word	0x200002a8
  ldr  r2, =_sbss
 8004280:	200002a8 	.word	0x200002a8
  ldr  r3, = _ebss
 8004284:	20000880 	.word	0x20000880

08004288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004288:	e7fe      	b.n	8004288 <ADC_IRQHandler>
	...

0800428c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_Init+0x40>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <HAL_Init+0x40>)
 8004296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800429a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_Init+0x40>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <HAL_Init+0x40>)
 80042a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_Init+0x40>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a07      	ldr	r2, [pc, #28]	; (80042cc <HAL_Init+0x40>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b4:	2003      	movs	r0, #3
 80042b6:	f000 fd2b 	bl	8004d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f000 f808 	bl	80042d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042c0:	f7ff f82e 	bl	8003320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023c00 	.word	0x40023c00

080042d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_InitTick+0x54>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_InitTick+0x58>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4619      	mov	r1, r3
 80042e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fd43 	bl	8004d7a <HAL_SYSTICK_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00e      	b.n	800431c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d80a      	bhi.n	800431a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004304:	2200      	movs	r2, #0
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	f000 fd0b 	bl	8004d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <HAL_InitTick+0x5c>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	200000c8 	.word	0x200000c8
 8004328:	200000d0 	.word	0x200000d0
 800432c:	200000cc 	.word	0x200000cc

08004330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_IncTick+0x20>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_IncTick+0x24>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_IncTick+0x24>)
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	200000d0 	.word	0x200000d0
 8004354:	2000086c 	.word	0x2000086c

08004358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return uwTick;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_GetTick+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2000086c 	.word	0x2000086c

08004370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7ff ffee 	bl	8004358 <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d005      	beq.n	8004396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_Delay+0x44>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004396:	bf00      	nop
 8004398:	f7ff ffde 	bl	8004358 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d8f7      	bhi.n	8004398 <HAL_Delay+0x28>
  {
  }
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200000d0 	.word	0x200000d0

080043b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e033      	b.n	8004436 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fb1e 	bl	8001a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d118      	bne.n	8004428 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043fe:	f023 0302 	bic.w	r3, r3, #2
 8004402:	f043 0202 	orr.w	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fab4 	bl	8004978 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
 8004426:	e001      	b.n	800442c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_ADC_Start+0x1a>
 8004456:	2302      	movs	r3, #2
 8004458:	e0b2      	b.n	80045c0 <HAL_ADC_Start+0x180>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d018      	beq.n	80044a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004480:	4b52      	ldr	r3, [pc, #328]	; (80045cc <HAL_ADC_Start+0x18c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_ADC_Start+0x190>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0c9a      	lsrs	r2, r3, #18
 800448c:	4613      	mov	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4413      	add	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004494:	e002      	b.n	800449c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3b01      	subs	r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f9      	bne.n	8004496 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d17a      	bne.n	80045a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ee:	d106      	bne.n	80044fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	f023 0206 	bic.w	r2, r3, #6
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44
 80044fc:	e002      	b.n	8004504 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800450c:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <HAL_ADC_Start+0x194>)
 800450e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004518:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	2b00      	cmp	r3, #0
 8004524:	d12a      	bne.n	800457c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <HAL_ADC_Start+0x198>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d015      	beq.n	800455c <HAL_ADC_Start+0x11c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_ADC_Start+0x19c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d105      	bne.n	8004546 <HAL_ADC_Start+0x106>
 800453a:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <HAL_ADC_Start+0x194>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <HAL_ADC_Start+0x1a0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d136      	bne.n	80045be <HAL_ADC_Start+0x17e>
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_ADC_Start+0x194>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d130      	bne.n	80045be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d129      	bne.n	80045be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004578:	609a      	str	r2, [r3, #8]
 800457a:	e020      	b.n	80045be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_ADC_Start+0x198>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d11b      	bne.n	80045be <HAL_ADC_Start+0x17e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d114      	bne.n	80045be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	e00b      	b.n	80045be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f043 0210 	orr.w	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	200000c8 	.word	0x200000c8
 80045d0:	431bde83 	.word	0x431bde83
 80045d4:	40012300 	.word	0x40012300
 80045d8:	40012000 	.word	0x40012000
 80045dc:	40012100 	.word	0x40012100
 80045e0:	40012200 	.word	0x40012200

080045e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d113      	bne.n	800462a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800460c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004610:	d10b      	bne.n	800462a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e063      	b.n	80046f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800462a:	f7ff fe95 	bl	8004358 <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004630:	e021      	b.n	8004676 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d01d      	beq.n	8004676 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_ADC_PollForConversion+0x6c>
 8004640:	f7ff fe8a 	bl	8004358 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d212      	bcs.n	8004676 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d00b      	beq.n	8004676 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f043 0204 	orr.w	r2, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e03d      	b.n	80046f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d1d6      	bne.n	8004632 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0212 	mvn.w	r2, #18
 800468c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d123      	bne.n	80046f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11f      	bne.n	80046f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d111      	bne.n	80046f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x1c>
 800472c:	2302      	movs	r3, #2
 800472e:	e113      	b.n	8004958 <HAL_ADC_ConfigChannel+0x244>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b09      	cmp	r3, #9
 800473e:	d925      	bls.n	800478c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68d9      	ldr	r1, [r3, #12]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	3b1e      	subs	r3, #30
 8004756:	2207      	movs	r2, #7
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43da      	mvns	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	400a      	ands	r2, r1
 8004764:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68d9      	ldr	r1, [r3, #12]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	4618      	mov	r0, r3
 8004778:	4603      	mov	r3, r0
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4403      	add	r3, r0
 800477e:	3b1e      	subs	r3, #30
 8004780:	409a      	lsls	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	e022      	b.n	80047d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6919      	ldr	r1, [r3, #16]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	2207      	movs	r2, #7
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43da      	mvns	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	400a      	ands	r2, r1
 80047ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6919      	ldr	r1, [r3, #16]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	4618      	mov	r0, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4403      	add	r3, r0
 80047c8:	409a      	lsls	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d824      	bhi.n	8004824 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	3b05      	subs	r3, #5
 80047ec:	221f      	movs	r2, #31
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43da      	mvns	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	400a      	ands	r2, r1
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	4618      	mov	r0, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	3b05      	subs	r3, #5
 8004816:	fa00 f203 	lsl.w	r2, r0, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	635a      	str	r2, [r3, #52]	; 0x34
 8004822:	e04c      	b.n	80048be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d824      	bhi.n	8004876 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	3b23      	subs	r3, #35	; 0x23
 800483e:	221f      	movs	r2, #31
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43da      	mvns	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	400a      	ands	r2, r1
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	4618      	mov	r0, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	3b23      	subs	r3, #35	; 0x23
 8004868:	fa00 f203 	lsl.w	r2, r0, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
 8004874:	e023      	b.n	80048be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	3b41      	subs	r3, #65	; 0x41
 8004888:	221f      	movs	r2, #31
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43da      	mvns	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	400a      	ands	r2, r1
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4618      	mov	r0, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	3b41      	subs	r3, #65	; 0x41
 80048b2:	fa00 f203 	lsl.w	r2, r0, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_ADC_ConfigChannel+0x250>)
 80048c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a28      	ldr	r2, [pc, #160]	; (8004968 <HAL_ADC_ConfigChannel+0x254>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d10f      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x1d8>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b12      	cmp	r3, #18
 80048d2:	d10b      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_ADC_ConfigChannel+0x254>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d12b      	bne.n	800494e <HAL_ADC_ConfigChannel+0x23a>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	; (800496c <HAL_ADC_ConfigChannel+0x258>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <HAL_ADC_ConfigChannel+0x1f4>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b11      	cmp	r3, #17
 8004906:	d122      	bne.n	800494e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a11      	ldr	r2, [pc, #68]	; (800496c <HAL_ADC_ConfigChannel+0x258>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d111      	bne.n	800494e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_ADC_ConfigChannel+0x25c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a11      	ldr	r2, [pc, #68]	; (8004974 <HAL_ADC_ConfigChannel+0x260>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	0c9a      	lsrs	r2, r3, #18
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004940:	e002      	b.n	8004948 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3b01      	subs	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f9      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40012300 	.word	0x40012300
 8004968:	40012000 	.word	0x40012000
 800496c:	10000012 	.word	0x10000012
 8004970:	200000c8 	.word	0x200000c8
 8004974:	431bde83 	.word	0x431bde83

08004978 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004980:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <ADC_Init+0x1f0>)
 8004982:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	021a      	lsls	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <ADC_Init+0x1f4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	e00f      	b.n	8004a76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0202 	bic.w	r2, r2, #2
 8004a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7e1b      	ldrb	r3, [r3, #24]
 8004a90:	005a      	lsls	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ac2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	035a      	lsls	r2, r3, #13
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	e007      	b.n	8004aec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	051a      	lsls	r2, r3, #20
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6899      	ldr	r1, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b2e:	025a      	lsls	r2, r3, #9
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6899      	ldr	r1, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	029a      	lsls	r2, r3, #10
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40012300 	.word	0x40012300
 8004b6c:	0f000001 	.word	0x0f000001

08004b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	60d3      	str	r3, [r2, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	f003 0307 	and.w	r3, r3, #7
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	db0b      	blt.n	8004bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	f003 021f 	and.w	r2, r3, #31
 8004bec:	4907      	ldr	r1, [pc, #28]	; (8004c0c <__NVIC_EnableIRQ+0x38>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000e100 	.word	0xe000e100

08004c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	db0a      	blt.n	8004c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	490c      	ldr	r1, [pc, #48]	; (8004c5c <__NVIC_SetPriority+0x4c>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	440b      	add	r3, r1
 8004c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c38:	e00a      	b.n	8004c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4908      	ldr	r1, [pc, #32]	; (8004c60 <__NVIC_SetPriority+0x50>)
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	3b04      	subs	r3, #4
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	761a      	strb	r2, [r3, #24]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000e100 	.word	0xe000e100
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f1c3 0307 	rsb	r3, r3, #7
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	bf28      	it	cs
 8004c82:	2304      	movcs	r3, #4
 8004c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2b06      	cmp	r3, #6
 8004c8c:	d902      	bls.n	8004c94 <NVIC_EncodePriority+0x30>
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	3b03      	subs	r3, #3
 8004c92:	e000      	b.n	8004c96 <NVIC_EncodePriority+0x32>
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cac:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	43d9      	mvns	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	4313      	orrs	r3, r2
         );
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3724      	adds	r7, #36	; 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cdc:	d301      	bcc.n	8004ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e00f      	b.n	8004d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <SysTick_Config+0x40>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cea:	210f      	movs	r1, #15
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	f7ff ff8e 	bl	8004c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <SysTick_Config+0x40>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cfa:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <SysTick_Config+0x40>)
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000e010 	.word	0xe000e010

08004d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff29 	bl	8004b70 <__NVIC_SetPriorityGrouping>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d38:	f7ff ff3e 	bl	8004bb8 <__NVIC_GetPriorityGrouping>
 8004d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	6978      	ldr	r0, [r7, #20]
 8004d44:	f7ff ff8e 	bl	8004c64 <NVIC_EncodePriority>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff5d 	bl	8004c10 <__NVIC_SetPriority>
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	4603      	mov	r3, r0
 8004d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff ff31 	bl	8004bd4 <__NVIC_EnableIRQ>
}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ffa2 	bl	8004ccc <SysTick_Config>
 8004d88:	4603      	mov	r3, r0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004da0:	f7ff fada 	bl	8004358 <HAL_GetTick>
 8004da4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d008      	beq.n	8004dc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e052      	b.n	8004e6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0216 	bic.w	r2, r2, #22
 8004dd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <HAL_DMA_Abort+0x62>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0208 	bic.w	r2, r2, #8
 8004e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e14:	e013      	b.n	8004e3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e16:	f7ff fa9f 	bl	8004358 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d90c      	bls.n	8004e3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2203      	movs	r2, #3
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e015      	b.n	8004e6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e4      	bne.n	8004e16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e50:	223f      	movs	r2, #63	; 0x3f
 8004e52:	409a      	lsls	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d004      	beq.n	8004e90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2280      	movs	r2, #128	; 0x80
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e00c      	b.n	8004eaa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2205      	movs	r2, #5
 8004e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e165      	b.n	80051a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f040 8154 	bne.w	800519a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d005      	beq.n	8004f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d130      	bne.n	8004f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	2203      	movs	r2, #3
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f40:	2201      	movs	r2, #1
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 0201 	and.w	r2, r3, #1
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d017      	beq.n	8004fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	2203      	movs	r2, #3
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d123      	bne.n	8004ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	08da      	lsrs	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3208      	adds	r2, #8
 8004fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	220f      	movs	r2, #15
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	08da      	lsrs	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3208      	adds	r2, #8
 8004ff6:	69b9      	ldr	r1, [r7, #24]
 8004ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2203      	movs	r2, #3
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0203 	and.w	r2, r3, #3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80ae 	beq.w	800519a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b5d      	ldr	r3, [pc, #372]	; (80051b8 <HAL_GPIO_Init+0x300>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	4a5c      	ldr	r2, [pc, #368]	; (80051b8 <HAL_GPIO_Init+0x300>)
 8005048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504c:	6453      	str	r3, [r2, #68]	; 0x44
 800504e:	4b5a      	ldr	r3, [pc, #360]	; (80051b8 <HAL_GPIO_Init+0x300>)
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800505a:	4a58      	ldr	r2, [pc, #352]	; (80051bc <HAL_GPIO_Init+0x304>)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	3302      	adds	r3, #2
 8005062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	220f      	movs	r2, #15
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a4f      	ldr	r2, [pc, #316]	; (80051c0 <HAL_GPIO_Init+0x308>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d025      	beq.n	80050d2 <HAL_GPIO_Init+0x21a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a4e      	ldr	r2, [pc, #312]	; (80051c4 <HAL_GPIO_Init+0x30c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01f      	beq.n	80050ce <HAL_GPIO_Init+0x216>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a4d      	ldr	r2, [pc, #308]	; (80051c8 <HAL_GPIO_Init+0x310>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d019      	beq.n	80050ca <HAL_GPIO_Init+0x212>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a4c      	ldr	r2, [pc, #304]	; (80051cc <HAL_GPIO_Init+0x314>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_GPIO_Init+0x20e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a4b      	ldr	r2, [pc, #300]	; (80051d0 <HAL_GPIO_Init+0x318>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00d      	beq.n	80050c2 <HAL_GPIO_Init+0x20a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a4a      	ldr	r2, [pc, #296]	; (80051d4 <HAL_GPIO_Init+0x31c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <HAL_GPIO_Init+0x206>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a49      	ldr	r2, [pc, #292]	; (80051d8 <HAL_GPIO_Init+0x320>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_GPIO_Init+0x202>
 80050b6:	2306      	movs	r3, #6
 80050b8:	e00c      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050ba:	2307      	movs	r3, #7
 80050bc:	e00a      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050be:	2305      	movs	r3, #5
 80050c0:	e008      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050c2:	2304      	movs	r3, #4
 80050c4:	e006      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050c6:	2303      	movs	r3, #3
 80050c8:	e004      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e002      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_GPIO_Init+0x21c>
 80050d2:	2300      	movs	r3, #0
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	f002 0203 	and.w	r2, r2, #3
 80050da:	0092      	lsls	r2, r2, #2
 80050dc:	4093      	lsls	r3, r2
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e4:	4935      	ldr	r1, [pc, #212]	; (80051bc <HAL_GPIO_Init+0x304>)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	3302      	adds	r3, #2
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050f2:	4b3a      	ldr	r3, [pc, #232]	; (80051dc <HAL_GPIO_Init+0x324>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005116:	4a31      	ldr	r2, [pc, #196]	; (80051dc <HAL_GPIO_Init+0x324>)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800511c:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <HAL_GPIO_Init+0x324>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <HAL_GPIO_Init+0x324>)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005146:	4b25      	ldr	r3, [pc, #148]	; (80051dc <HAL_GPIO_Init+0x324>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_GPIO_Init+0x324>)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <HAL_GPIO_Init+0x324>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005194:	4a11      	ldr	r2, [pc, #68]	; (80051dc <HAL_GPIO_Init+0x324>)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	f67f ae96 	bls.w	8004ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	3724      	adds	r7, #36	; 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40020000 	.word	0x40020000
 80051c4:	40020400 	.word	0x40020400
 80051c8:	40020800 	.word	0x40020800
 80051cc:	40020c00 	.word	0x40020c00
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40021400 	.word	0x40021400
 80051d8:	40021800 	.word	0x40021800
 80051dc:	40013c00 	.word	0x40013c00

080051e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	807b      	strh	r3, [r7, #2]
 80051ec:	4613      	mov	r3, r2
 80051ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f0:	787b      	ldrb	r3, [r7, #1]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051f6:	887a      	ldrh	r2, [r7, #2]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051fc:	e003      	b.n	8005206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	041a      	lsls	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	619a      	str	r2, [r3, #24]
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800521e:	4b08      	ldr	r3, [pc, #32]	; (8005240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800522a:	4a05      	ldr	r2, [pc, #20]	; (8005240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fd68 	bl	8002d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40013c00 	.word	0x40013c00

08005244 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525c:	6413      	str	r3, [r2, #64]	; 0x40
 800525e:	4b1d      	ldr	r3, [pc, #116]	; (80052d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005270:	f7ff f872 	bl	8004358 <HAL_GetTick>
 8005274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005276:	e009      	b.n	800528c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005278:	f7ff f86e 	bl	8004358 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005286:	d901      	bls.n	800528c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e01f      	b.n	80052cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_PWREx_EnableOverDrive+0x98>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005298:	d1ee      	bne.n	8005278 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800529a:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a0:	f7ff f85a 	bl	8004358 <HAL_GetTick>
 80052a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052a6:	e009      	b.n	80052bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052a8:	f7ff f856 	bl	8004358 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b6:	d901      	bls.n	80052bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e007      	b.n	80052cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <HAL_PWREx_EnableOverDrive+0x98>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052c8:	d1ee      	bne.n	80052a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40023800 	.word	0x40023800
 80052d8:	420e0040 	.word	0x420e0040
 80052dc:	40007000 	.word	0x40007000
 80052e0:	420e0044 	.word	0x420e0044

080052e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0cc      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f8:	4b68      	ldr	r3, [pc, #416]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d90c      	bls.n	8005320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b65      	ldr	r3, [pc, #404]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b63      	ldr	r3, [pc, #396]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0b8      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d020      	beq.n	800536e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005338:	4b59      	ldr	r3, [pc, #356]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	4a58      	ldr	r2, [pc, #352]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005350:	4b53      	ldr	r3, [pc, #332]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4a52      	ldr	r2, [pc, #328]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800535a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800535c:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	494d      	ldr	r1, [pc, #308]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d044      	beq.n	8005404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005382:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d119      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e07f      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d003      	beq.n	80053a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a2:	4b3f      	ldr	r3, [pc, #252]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06f      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b2:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e067      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053c2:	4b37      	ldr	r3, [pc, #220]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f023 0203 	bic.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4934      	ldr	r1, [pc, #208]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d4:	f7fe ffc0 	bl	8004358 <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053dc:	f7fe ffbc 	bl	8004358 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e04f      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 020c 	and.w	r2, r3, #12
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	429a      	cmp	r2, r3
 8005402:	d1eb      	bne.n	80053dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005404:	4b25      	ldr	r3, [pc, #148]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d20c      	bcs.n	800542c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b20      	ldr	r3, [pc, #128]	; (800549c <HAL_RCC_ClockConfig+0x1b8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e032      	b.n	8005492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4916      	ldr	r1, [pc, #88]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	490e      	ldr	r1, [pc, #56]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800546a:	f000 f855 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 800546e:	4602      	mov	r2, r0
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	490a      	ldr	r1, [pc, #40]	; (80054a4 <HAL_RCC_ClockConfig+0x1c0>)
 800547c:	5ccb      	ldrb	r3, [r1, r3]
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_ClockConfig+0x1c8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe ff20 	bl	80042d0 <HAL_InitTick>

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40023c00 	.word	0x40023c00
 80054a0:	40023800 	.word	0x40023800
 80054a4:	0800d3e4 	.word	0x0800d3e4
 80054a8:	200000c8 	.word	0x200000c8
 80054ac:	200000cc 	.word	0x200000cc

080054b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b4:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	200000c8 	.word	0x200000c8

080054c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054cc:	f7ff fff0 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	0a9b      	lsrs	r3, r3, #10
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4903      	ldr	r1, [pc, #12]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40023800 	.word	0x40023800
 80054ec:	0800d3f4 	.word	0x0800d3f4

080054f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f4:	f7ff ffdc 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054f8:	4602      	mov	r2, r0
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	0b5b      	lsrs	r3, r3, #13
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	4903      	ldr	r1, [pc, #12]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005506:	5ccb      	ldrb	r3, [r1, r3]
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40023800 	.word	0x40023800
 8005514:	0800d3f4 	.word	0x0800d3f4

08005518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551c:	b088      	sub	sp, #32
 800551e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005534:	4bce      	ldr	r3, [pc, #824]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b0c      	cmp	r3, #12
 800553e:	f200 818d 	bhi.w	800585c <HAL_RCC_GetSysClockFreq+0x344>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <HAL_RCC_GetSysClockFreq+0x30>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	0800557d 	.word	0x0800557d
 800554c:	0800585d 	.word	0x0800585d
 8005550:	0800585d 	.word	0x0800585d
 8005554:	0800585d 	.word	0x0800585d
 8005558:	08005583 	.word	0x08005583
 800555c:	0800585d 	.word	0x0800585d
 8005560:	0800585d 	.word	0x0800585d
 8005564:	0800585d 	.word	0x0800585d
 8005568:	08005589 	.word	0x08005589
 800556c:	0800585d 	.word	0x0800585d
 8005570:	0800585d 	.word	0x0800585d
 8005574:	0800585d 	.word	0x0800585d
 8005578:	080056fd 	.word	0x080056fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800557c:	4bbd      	ldr	r3, [pc, #756]	; (8005874 <HAL_RCC_GetSysClockFreq+0x35c>)
 800557e:	61bb      	str	r3, [r7, #24]
       break;
 8005580:	e16f      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005582:	4bbd      	ldr	r3, [pc, #756]	; (8005878 <HAL_RCC_GetSysClockFreq+0x360>)
 8005584:	61bb      	str	r3, [r7, #24]
      break;
 8005586:	e16c      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005588:	4bb9      	ldr	r3, [pc, #740]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005590:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005592:	4bb7      	ldr	r3, [pc, #732]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d053      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559e:	4bb4      	ldr	r3, [pc, #720]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	099b      	lsrs	r3, r3, #6
 80055a4:	461a      	mov	r2, r3
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ae:	f04f 0100 	mov.w	r1, #0
 80055b2:	ea02 0400 	and.w	r4, r2, r0
 80055b6:	603c      	str	r4, [r7, #0]
 80055b8:	400b      	ands	r3, r1
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	014b      	lsls	r3, r1, #5
 80055ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055d2:	0142      	lsls	r2, r0, #5
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	4623      	mov	r3, r4
 80055da:	1ac0      	subs	r0, r0, r3
 80055dc:	462b      	mov	r3, r5
 80055de:	eb61 0103 	sbc.w	r1, r1, r3
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	018b      	lsls	r3, r1, #6
 80055ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055f0:	0182      	lsls	r2, r0, #6
 80055f2:	1a12      	subs	r2, r2, r0
 80055f4:	eb63 0301 	sbc.w	r3, r3, r1
 80055f8:	f04f 0000 	mov.w	r0, #0
 80055fc:	f04f 0100 	mov.w	r1, #0
 8005600:	00d9      	lsls	r1, r3, #3
 8005602:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005606:	00d0      	lsls	r0, r2, #3
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4621      	mov	r1, r4
 800560e:	1852      	adds	r2, r2, r1
 8005610:	4629      	mov	r1, r5
 8005612:	eb43 0101 	adc.w	r1, r3, r1
 8005616:	460b      	mov	r3, r1
 8005618:	f04f 0000 	mov.w	r0, #0
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	0259      	lsls	r1, r3, #9
 8005622:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005626:	0250      	lsls	r0, r2, #9
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	461a      	mov	r2, r3
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	f7fb fb46 	bl	8000cc8 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4613      	mov	r3, r2
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	e04c      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005646:	4b8a      	ldr	r3, [pc, #552]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	461a      	mov	r2, r3
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	ea02 0a00 	and.w	sl, r2, r0
 800565e:	ea03 0b01 	and.w	fp, r3, r1
 8005662:	4650      	mov	r0, sl
 8005664:	4659      	mov	r1, fp
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	014b      	lsls	r3, r1, #5
 8005670:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005674:	0142      	lsls	r2, r0, #5
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	ebb0 000a 	subs.w	r0, r0, sl
 800567e:	eb61 010b 	sbc.w	r1, r1, fp
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	018b      	lsls	r3, r1, #6
 800568c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005690:	0182      	lsls	r2, r0, #6
 8005692:	1a12      	subs	r2, r2, r0
 8005694:	eb63 0301 	sbc.w	r3, r3, r1
 8005698:	f04f 0000 	mov.w	r0, #0
 800569c:	f04f 0100 	mov.w	r1, #0
 80056a0:	00d9      	lsls	r1, r3, #3
 80056a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056a6:	00d0      	lsls	r0, r2, #3
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	eb12 020a 	adds.w	r2, r2, sl
 80056b0:	eb43 030b 	adc.w	r3, r3, fp
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f04f 0100 	mov.w	r1, #0
 80056bc:	0299      	lsls	r1, r3, #10
 80056be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056c2:	0290      	lsls	r0, r2, #10
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	f7fb faf8 	bl	8000cc8 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4613      	mov	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056e0:	4b63      	ldr	r3, [pc, #396]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	3301      	adds	r3, #1
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	61bb      	str	r3, [r7, #24]
      break;
 80056fa:	e0b2      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056fc:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005704:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005706:	4b5a      	ldr	r3, [pc, #360]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04d      	beq.n	80057ae <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005712:	4b57      	ldr	r3, [pc, #348]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	461a      	mov	r2, r3
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005722:	f04f 0100 	mov.w	r1, #0
 8005726:	ea02 0800 	and.w	r8, r2, r0
 800572a:	ea03 0901 	and.w	r9, r3, r1
 800572e:	4640      	mov	r0, r8
 8005730:	4649      	mov	r1, r9
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	014b      	lsls	r3, r1, #5
 800573c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005740:	0142      	lsls	r2, r0, #5
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	ebb0 0008 	subs.w	r0, r0, r8
 800574a:	eb61 0109 	sbc.w	r1, r1, r9
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	018b      	lsls	r3, r1, #6
 8005758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800575c:	0182      	lsls	r2, r0, #6
 800575e:	1a12      	subs	r2, r2, r0
 8005760:	eb63 0301 	sbc.w	r3, r3, r1
 8005764:	f04f 0000 	mov.w	r0, #0
 8005768:	f04f 0100 	mov.w	r1, #0
 800576c:	00d9      	lsls	r1, r3, #3
 800576e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005772:	00d0      	lsls	r0, r2, #3
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	eb12 0208 	adds.w	r2, r2, r8
 800577c:	eb43 0309 	adc.w	r3, r3, r9
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	0259      	lsls	r1, r3, #9
 800578a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800578e:	0250      	lsls	r0, r2, #9
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	f7fb fa92 	bl	8000cc8 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4613      	mov	r3, r2
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	e04a      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ae:	4b30      	ldr	r3, [pc, #192]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	099b      	lsrs	r3, r3, #6
 80057b4:	461a      	mov	r2, r3
 80057b6:	f04f 0300 	mov.w	r3, #0
 80057ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057be:	f04f 0100 	mov.w	r1, #0
 80057c2:	ea02 0400 	and.w	r4, r2, r0
 80057c6:	ea03 0501 	and.w	r5, r3, r1
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	014b      	lsls	r3, r1, #5
 80057d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057dc:	0142      	lsls	r2, r0, #5
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	1b00      	subs	r0, r0, r4
 80057e4:	eb61 0105 	sbc.w	r1, r1, r5
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	018b      	lsls	r3, r1, #6
 80057f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057f6:	0182      	lsls	r2, r0, #6
 80057f8:	1a12      	subs	r2, r2, r0
 80057fa:	eb63 0301 	sbc.w	r3, r3, r1
 80057fe:	f04f 0000 	mov.w	r0, #0
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	00d9      	lsls	r1, r3, #3
 8005808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800580c:	00d0      	lsls	r0, r2, #3
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	1912      	adds	r2, r2, r4
 8005814:	eb45 0303 	adc.w	r3, r5, r3
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	0299      	lsls	r1, r3, #10
 8005822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005826:	0290      	lsls	r0, r2, #10
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	461a      	mov	r2, r3
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	f7fb fa46 	bl	8000cc8 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_RCC_GetSysClockFreq+0x358>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0f1b      	lsrs	r3, r3, #28
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	61bb      	str	r3, [r7, #24]
      break;
 800585a:	e002      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCC_GetSysClockFreq+0x35c>)
 800585e:	61bb      	str	r3, [r7, #24]
      break;
 8005860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005862:	69bb      	ldr	r3, [r7, #24]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800586e:	bf00      	nop
 8005870:	40023800 	.word	0x40023800
 8005874:	00f42400 	.word	0x00f42400
 8005878:	007a1200 	.word	0x007a1200

0800587c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e28d      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8083 	beq.w	80059a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800589c:	4b94      	ldr	r3, [pc, #592]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d019      	beq.n	80058dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058a8:	4b91      	ldr	r3, [pc, #580]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d106      	bne.n	80058c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058b4:	4b8e      	ldr	r3, [pc, #568]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058c0:	d00c      	beq.n	80058dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058c2:	4b8b      	ldr	r3, [pc, #556]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d112      	bne.n	80058f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058da:	d10b      	bne.n	80058f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4b84      	ldr	r3, [pc, #528]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05b      	beq.n	80059a0 <HAL_RCC_OscConfig+0x124>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d157      	bne.n	80059a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e25a      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058fc:	d106      	bne.n	800590c <HAL_RCC_OscConfig+0x90>
 80058fe:	4b7c      	ldr	r3, [pc, #496]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a7b      	ldr	r2, [pc, #492]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e01d      	b.n	8005948 <HAL_RCC_OscConfig+0xcc>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005914:	d10c      	bne.n	8005930 <HAL_RCC_OscConfig+0xb4>
 8005916:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a75      	ldr	r2, [pc, #468]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 800591c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a72      	ldr	r2, [pc, #456]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e00b      	b.n	8005948 <HAL_RCC_OscConfig+0xcc>
 8005930:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6e      	ldr	r2, [pc, #440]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a6b      	ldr	r2, [pc, #428]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d013      	beq.n	8005978 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fe fd02 	bl	8004358 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005958:	f7fe fcfe 	bl	8004358 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b64      	cmp	r3, #100	; 0x64
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e21f      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0xdc>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fe fcee 	bl	8004358 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005980:	f7fe fcea 	bl	8004358 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	; 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e20b      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005992:	4b57      	ldr	r3, [pc, #348]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1f0      	bne.n	8005980 <HAL_RCC_OscConfig+0x104>
 800599e:	e000      	b.n	80059a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d06f      	beq.n	8005a8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059ae:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d017      	beq.n	80059ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059ba:	4b4d      	ldr	r3, [pc, #308]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d105      	bne.n	80059d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059c6:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80059da:	2b0c      	cmp	r3, #12
 80059dc:	d11c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059de:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ea:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCC_OscConfig+0x186>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1d3      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4937      	ldr	r1, [pc, #220]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a16:	e03a      	b.n	8005a8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a20:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <HAL_RCC_OscConfig+0x278>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fe fc97 	bl	8004358 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2e:	f7fe fc93 	bl	8004358 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1b4      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4925      	ldr	r1, [pc, #148]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a62:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_RCC_OscConfig+0x278>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fe fc76 	bl	8004358 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a70:	f7fe fc72 	bl	8004358 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e193      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d036      	beq.n	8005b08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <HAL_RCC_OscConfig+0x27c>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa8:	f7fe fc56 	bl	8004358 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab0:	f7fe fc52 	bl	8004358 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e173      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x234>
 8005ace:	e01b      	b.n	8005b08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCC_OscConfig+0x27c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad6:	f7fe fc3f 	bl	8004358 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005adc:	e00e      	b.n	8005afc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ade:	f7fe fc3b 	bl	8004358 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d907      	bls.n	8005afc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e15c      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
 8005af0:	40023800 	.word	0x40023800
 8005af4:	42470000 	.word	0x42470000
 8005af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	4b8a      	ldr	r3, [pc, #552]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ea      	bne.n	8005ade <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8097 	beq.w	8005c44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b1a:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10f      	bne.n	8005b46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	4b7f      	ldr	r3, [pc, #508]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a7e      	ldr	r2, [pc, #504]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b34:	6413      	str	r3, [r2, #64]	; 0x40
 8005b36:	4b7c      	ldr	r3, [pc, #496]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b46:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <HAL_RCC_OscConfig+0x4b0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d118      	bne.n	8005b84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b52:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <HAL_RCC_OscConfig+0x4b0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a75      	ldr	r2, [pc, #468]	; (8005d2c <HAL_RCC_OscConfig+0x4b0>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5e:	f7fe fbfb 	bl	8004358 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b66:	f7fe fbf7 	bl	8004358 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e118      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	4b6c      	ldr	r3, [pc, #432]	; (8005d2c <HAL_RCC_OscConfig+0x4b0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <HAL_RCC_OscConfig+0x31e>
 8005b8c:	4b66      	ldr	r3, [pc, #408]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a65      	ldr	r2, [pc, #404]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
 8005b98:	e01c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x358>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x340>
 8005ba2:	4b61      	ldr	r3, [pc, #388]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	4a60      	ldr	r2, [pc, #384]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	6713      	str	r3, [r2, #112]	; 0x70
 8005bae:	4b5e      	ldr	r3, [pc, #376]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	4a5d      	ldr	r2, [pc, #372]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x358>
 8005bbc:	4b5a      	ldr	r3, [pc, #360]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a59      	ldr	r2, [pc, #356]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc8:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bce:	f023 0304 	bic.w	r3, r3, #4
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fe fbbc 	bl	8004358 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be4:	f7fe fbb8 	bl	8004358 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0d7      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ee      	beq.n	8005be4 <HAL_RCC_OscConfig+0x368>
 8005c06:	e014      	b.n	8005c32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fe fba6 	bl	8004358 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c10:	f7fe fba2 	bl	8004358 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0c1      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c26:	4b40      	ldr	r3, [pc, #256]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ee      	bne.n	8005c10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d105      	bne.n	8005c44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c38:	4b3b      	ldr	r3, [pc, #236]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	4a3a      	ldr	r2, [pc, #232]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80ad 	beq.w	8005da8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4e:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d060      	beq.n	8005d1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d145      	bne.n	8005cee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c62:	4b33      	ldr	r3, [pc, #204]	; (8005d30 <HAL_RCC_OscConfig+0x4b4>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fe fb76 	bl	8004358 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fe fb72 	bl	8004358 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e093      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	4b29      	ldr	r3, [pc, #164]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	061b      	lsls	r3, r3, #24
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	071b      	lsls	r3, r3, #28
 8005cba:	491b      	ldr	r1, [pc, #108]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	; (8005d30 <HAL_RCC_OscConfig+0x4b4>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fe fb47 	bl	8004358 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fe fb43 	bl	8004358 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e064      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x452>
 8005cec:	e05c      	b.n	8005da8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <HAL_RCC_OscConfig+0x4b4>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fe fb30 	bl	8004358 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfc:	f7fe fb2c 	bl	8004358 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e04d      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCC_OscConfig+0x4ac>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x480>
 8005d1a:	e045      	b.n	8005da8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e040      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d34:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <HAL_RCC_OscConfig+0x538>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d030      	beq.n	8005da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d129      	bne.n	8005da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d122      	bne.n	8005da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d119      	bne.n	8005da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d10f      	bne.n	8005da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800

08005db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e041      	b.n	8005e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fd feb0 	bl	8003b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 fda6 	bl	8006948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e04e      	b.n	8005f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a23      	ldr	r2, [pc, #140]	; (8005f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d022      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9a:	d01d      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d018      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d013      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d009      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x80>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d111      	bne.n	8005efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d010      	beq.n	8005f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	e007      	b.n	8005f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40001800 	.word	0x40001800

08005f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e041      	b.n	8005fce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f839 	bl	8005fd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f000 fce6 	bl	8006948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <HAL_TIM_PWM_Start+0x24>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e022      	b.n	8006056 <HAL_TIM_PWM_Start+0x6a>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d109      	bne.n	800602a <HAL_TIM_PWM_Start+0x3e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	bf14      	ite	ne
 8006022:	2301      	movne	r3, #1
 8006024:	2300      	moveq	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	e015      	b.n	8006056 <HAL_TIM_PWM_Start+0x6a>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d109      	bne.n	8006044 <HAL_TIM_PWM_Start+0x58>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	e008      	b.n	8006056 <HAL_TIM_PWM_Start+0x6a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e07c      	b.n	8006158 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_TIM_PWM_Start+0x82>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800606c:	e013      	b.n	8006096 <HAL_TIM_PWM_Start+0xaa>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Start+0x92>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	e00b      	b.n	8006096 <HAL_TIM_PWM_Start+0xaa>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d104      	bne.n	800608e <HAL_TIM_PWM_Start+0xa2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608c:	e003      	b.n	8006096 <HAL_TIM_PWM_Start+0xaa>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2201      	movs	r2, #1
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 ff3c 	bl	8006f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_TIM_PWM_Start+0x174>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_TIM_PWM_Start+0xcc>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <HAL_TIM_PWM_Start+0x178>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d101      	bne.n	80060bc <HAL_TIM_PWM_Start+0xd0>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <HAL_TIM_PWM_Start+0xd2>
 80060bc:	2300      	movs	r3, #0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_TIM_PWM_Start+0x174>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d01d      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <HAL_TIM_PWM_Start+0x17c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_TIM_PWM_Start+0x180>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1c      	ldr	r2, [pc, #112]	; (8006170 <HAL_TIM_PWM_Start+0x184>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_TIM_PWM_Start+0x178>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_TIM_PWM_Start+0x188>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIM_PWM_Start+0x136>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a16      	ldr	r2, [pc, #88]	; (8006178 <HAL_TIM_PWM_Start+0x18c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d111      	bne.n	8006146 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d010      	beq.n	8006156 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	e007      	b.n	8006156 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40000c00 	.word	0x40000c00
 8006174:	40014000 	.word	0x40014000
 8006178:	40001800 	.word	0x40001800

0800617c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e097      	b.n	80062c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fd fc51 	bl	8003a4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f000 fbb9 	bl	8006948 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	f023 0303 	bic.w	r3, r3, #3
 8006202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	4313      	orrs	r3, r2
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800621c:	f023 030c 	bic.w	r3, r3, #12
 8006220:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	4313      	orrs	r3, r2
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	011a      	lsls	r2, r3, #4
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	031b      	lsls	r3, r3, #12
 800624c:	4313      	orrs	r3, r2
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	4313      	orrs	r3, r2
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062fe:	7b7b      	ldrb	r3, [r7, #13]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d001      	beq.n	8006308 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e069      	b.n	80063dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006318:	e031      	b.n	800637e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d110      	bne.n	8006342 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d102      	bne.n	800632c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006326:	7b3b      	ldrb	r3, [r7, #12]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e055      	b.n	80063dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006340:	e01d      	b.n	800637e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d108      	bne.n	800635a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800634e:	7b7b      	ldrb	r3, [r7, #13]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d102      	bne.n	800635a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006354:	7b3b      	ldrb	r3, [r7, #12]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d001      	beq.n	800635e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e03e      	b.n	80063dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_TIM_Encoder_Start+0xc4>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b04      	cmp	r3, #4
 8006388:	d008      	beq.n	800639c <HAL_TIM_Encoder_Start+0xd4>
 800638a:	e00f      	b.n	80063ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2201      	movs	r2, #1
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fdc1 	bl	8006f1c <TIM_CCxChannelCmd>
      break;
 800639a:	e016      	b.n	80063ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2201      	movs	r2, #1
 80063a2:	2104      	movs	r1, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fdb9 	bl	8006f1c <TIM_CCxChannelCmd>
      break;
 80063aa:	e00e      	b.n	80063ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2201      	movs	r2, #1
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fdb1 	bl	8006f1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2201      	movs	r2, #1
 80063c0:	2104      	movs	r1, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fdaa 	bl	8006f1c <TIM_CCxChannelCmd>
      break;
 80063c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d122      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d11b      	bne.n	8006440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0202 	mvn.w	r2, #2
 8006410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa70 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 800642c:	e005      	b.n	800643a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa62 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fa73 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d122      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d11b      	bne.n	8006494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f06f 0204 	mvn.w	r2, #4
 8006464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa46 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 8006480:	e005      	b.n	800648e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa38 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fa49 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0208 	mvn.w	r2, #8
 80064b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa1c 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa0e 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa1f 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	2b10      	cmp	r3, #16
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0210 	mvn.w	r2, #16
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2208      	movs	r2, #8
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9f2 	bl	800690c <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9e4 	bl	80068f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f9f5 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0201 	mvn.w	r2, #1
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc faa4 	bl	8002ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d10e      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b80      	cmp	r3, #128	; 0x80
 8006582:	d107      	bne.n	8006594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800658c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fdc2 	bl	8007118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d10e      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9ba 	bl	8006934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0220 	mvn.w	r2, #32
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fd8c 	bl	8007104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800660a:	2302      	movs	r3, #2
 800660c:	e0ac      	b.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x174>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b0c      	cmp	r3, #12
 800661a:	f200 809f 	bhi.w	800675c <HAL_TIM_PWM_ConfigChannel+0x168>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006659 	.word	0x08006659
 8006628:	0800675d 	.word	0x0800675d
 800662c:	0800675d 	.word	0x0800675d
 8006630:	0800675d 	.word	0x0800675d
 8006634:	08006699 	.word	0x08006699
 8006638:	0800675d 	.word	0x0800675d
 800663c:	0800675d 	.word	0x0800675d
 8006640:	0800675d 	.word	0x0800675d
 8006644:	080066db 	.word	0x080066db
 8006648:	0800675d 	.word	0x0800675d
 800664c:	0800675d 	.word	0x0800675d
 8006650:	0800675d 	.word	0x0800675d
 8006654:	0800671b 	.word	0x0800671b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fa12 	bl	8006a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0208 	orr.w	r2, r2, #8
 8006672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0204 	bic.w	r2, r2, #4
 8006682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6999      	ldr	r1, [r3, #24]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	619a      	str	r2, [r3, #24]
      break;
 8006696:	e062      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa62 	bl	8006b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	021a      	lsls	r2, r3, #8
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	619a      	str	r2, [r3, #24]
      break;
 80066d8:	e041      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fab7 	bl	8006c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0208 	orr.w	r2, r2, #8
 80066f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0204 	bic.w	r2, r2, #4
 8006704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	61da      	str	r2, [r3, #28]
      break;
 8006718:	e021      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fb0b 	bl	8006d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	021a      	lsls	r2, r3, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	61da      	str	r2, [r3, #28]
      break;
 800675a:	e000      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800675c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIM_ConfigClockSource+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e0b3      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x180>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c0:	d03e      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0xd0>
 80067c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c6:	f200 8087 	bhi.w	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 80067ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ce:	f000 8085 	beq.w	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d6:	d87f      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 80067d8:	2b70      	cmp	r3, #112	; 0x70
 80067da:	d01a      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0xa2>
 80067dc:	2b70      	cmp	r3, #112	; 0x70
 80067de:	d87b      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 80067e0:	2b60      	cmp	r3, #96	; 0x60
 80067e2:	d050      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x116>
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d877      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 80067e8:	2b50      	cmp	r3, #80	; 0x50
 80067ea:	d03c      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0xf6>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d873      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d058      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x136>
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d86f      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d064      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x156>
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d86b      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 8006800:	2b20      	cmp	r3, #32
 8006802:	d060      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x156>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d867      	bhi.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d05c      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x156>
 800680c:	2b10      	cmp	r3, #16
 800680e:	d05a      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006810:	e062      	b.n	80068d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6899      	ldr	r1, [r3, #8]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f000 fb5b 	bl	8006edc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006834:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	609a      	str	r2, [r3, #8]
      break;
 800683e:	e04e      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6899      	ldr	r1, [r3, #8]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f000 fb44 	bl	8006edc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006862:	609a      	str	r2, [r3, #8]
      break;
 8006864:	e03b      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	461a      	mov	r2, r3
 8006874:	f000 fab8 	bl	8006de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2150      	movs	r1, #80	; 0x50
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fb11 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 8006884:	e02b      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	461a      	mov	r2, r3
 8006894:	f000 fad7 	bl	8006e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2160      	movs	r1, #96	; 0x60
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fb01 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80068a4:	e01b      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fa98 	bl	8006de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2140      	movs	r1, #64	; 0x40
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 faf1 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80068c4:	e00b      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4619      	mov	r1, r3
 80068d0:	4610      	mov	r0, r2
 80068d2:	f000 fae8 	bl	8006ea6 <TIM_ITRx_SetConfig>
        break;
 80068d6:	e002      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068d8:	bf00      	nop
 80068da:	e000      	b.n	80068de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a40      	ldr	r2, [pc, #256]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d00f      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <TIM_Base_SetConfig+0x118>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00b      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3c      	ldr	r2, [pc, #240]	; (8006a64 <TIM_Base_SetConfig+0x11c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <TIM_Base_SetConfig+0x120>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d108      	bne.n	800699a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d02b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d027      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <TIM_Base_SetConfig+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d023      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2b      	ldr	r2, [pc, #172]	; (8006a64 <TIM_Base_SetConfig+0x11c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01f      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <TIM_Base_SetConfig+0x120>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d017      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a28      	ldr	r2, [pc, #160]	; (8006a70 <TIM_Base_SetConfig+0x128>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <TIM_Base_SetConfig+0x12c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <TIM_Base_SetConfig+0x130>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a25      	ldr	r2, [pc, #148]	; (8006a7c <TIM_Base_SetConfig+0x134>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a24      	ldr	r2, [pc, #144]	; (8006a80 <TIM_Base_SetConfig+0x138>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <TIM_Base_SetConfig+0x13c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d108      	bne.n	8006a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <TIM_Base_SetConfig+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0xf8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <TIM_Base_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d103      	bne.n	8006a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	615a      	str	r2, [r3, #20]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40001800 	.word	0x40001800
 8006a80:	40001c00 	.word	0x40001c00
 8006a84:	40002000 	.word	0x40002000

08006a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f023 0302 	bic.w	r3, r3, #2
 8006ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <TIM_OC1_SetConfig+0xd8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_OC1_SetConfig+0x64>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <TIM_OC1_SetConfig+0xdc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d10c      	bne.n	8006b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0308 	bic.w	r3, r3, #8
 8006af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a15      	ldr	r2, [pc, #84]	; (8006b60 <TIM_OC1_SetConfig+0xd8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_OC1_SetConfig+0x8e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <TIM_OC1_SetConfig+0xdc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d111      	bne.n	8006b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	621a      	str	r2, [r3, #32]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400

08006b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f023 0210 	bic.w	r2, r3, #16
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0320 	bic.w	r3, r3, #32
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a22      	ldr	r2, [pc, #136]	; (8006c4c <TIM_OC2_SetConfig+0xe4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC2_SetConfig+0x68>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <TIM_OC2_SetConfig+0xe8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10d      	bne.n	8006bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <TIM_OC2_SetConfig+0xe4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC2_SetConfig+0x94>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <TIM_OC2_SetConfig+0xe8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d113      	bne.n	8006c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400

08006c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <TIM_OC3_SetConfig+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_OC3_SetConfig+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <TIM_OC3_SetConfig+0xe4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d10d      	bne.n	8006cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a16      	ldr	r2, [pc, #88]	; (8006d34 <TIM_OC3_SetConfig+0xe0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_OC3_SetConfig+0x92>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <TIM_OC3_SetConfig+0xe4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d113      	bne.n	8006d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	621a      	str	r2, [r3, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40010400 	.word	0x40010400

08006d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	031b      	lsls	r3, r3, #12
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <TIM_OC4_SetConfig+0xa4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC4_SetConfig+0x68>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <TIM_OC4_SetConfig+0xa8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d109      	bne.n	8006db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	621a      	str	r2, [r3, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40010400 	.word	0x40010400

08006de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f023 0201 	bic.w	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 030a 	bic.w	r3, r3, #10
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0210 	bic.w	r2, r3, #16
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	031b      	lsls	r3, r3, #12
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f043 0307 	orr.w	r3, r3, #7
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2201      	movs	r2, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e05a      	b.n	8007036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a21      	ldr	r2, [pc, #132]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d022      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fcc:	d01d      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d018      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1b      	ldr	r2, [pc, #108]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1a      	ldr	r2, [pc, #104]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00e      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a18      	ldr	r2, [pc, #96]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d009      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d004      	beq.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a15      	ldr	r2, [pc, #84]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d10c      	bne.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4313      	orrs	r3, r2
 800701a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40001800 	.word	0x40001800

08007060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007078:	2302      	movs	r3, #2
 800707a:	e03d      	b.n	80070f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e03f      	b.n	80071be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fc fed8 	bl	8003f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800716e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fd1d 	bl	8007bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	695a      	ldr	r2, [r3, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b08a      	sub	sp, #40	; 0x28
 80071ca:	af02      	add	r7, sp, #8
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d17c      	bne.n	80072e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_UART_Transmit+0x2c>
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e075      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UART_Transmit+0x3e>
 8007200:	2302      	movs	r3, #2
 8007202:	e06e      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721a:	f7fd f89d 	bl	8004358 <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	88fa      	ldrh	r2, [r7, #6]
 8007224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	88fa      	ldrh	r2, [r7, #6]
 800722a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d108      	bne.n	8007248 <HAL_UART_Transmit+0x82>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e003      	b.n	8007250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007258:	e02a      	b.n	80072b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fadf 	bl	8007828 <UART_WaitOnFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e036      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	3302      	adds	r3, #2
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e007      	b.n	80072a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	3301      	adds	r3, #1
 80072a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1cf      	bne.n	800725a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	2140      	movs	r1, #64	; 0x40
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 faaf 	bl	8007828 <UART_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e006      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b08a      	sub	sp, #40	; 0x28
 80072ee:	af02      	add	r7, sp, #8
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	603b      	str	r3, [r7, #0]
 80072f6:	4613      	mov	r3, r2
 80072f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b20      	cmp	r3, #32
 8007308:	f040 808c 	bne.w	8007424 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_UART_Receive+0x2e>
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e084      	b.n	8007426 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_UART_Receive+0x40>
 8007326:	2302      	movs	r3, #2
 8007328:	e07d      	b.n	8007426 <HAL_UART_Receive+0x13c>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2222      	movs	r2, #34	; 0x22
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007346:	f7fd f807 	bl	8004358 <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	88fa      	ldrh	r2, [r7, #6]
 8007350:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	88fa      	ldrh	r2, [r7, #6]
 8007356:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007360:	d108      	bne.n	8007374 <HAL_UART_Receive+0x8a>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e003      	b.n	800737c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007384:	e043      	b.n	800740e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2200      	movs	r2, #0
 800738e:	2120      	movs	r1, #32
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fa49 	bl	8007828 <UART_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e042      	b.n	8007426 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	3302      	adds	r3, #2
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	e01f      	b.n	8007400 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c8:	d007      	beq.n	80073da <HAL_UART_Receive+0xf0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <HAL_UART_Receive+0xfe>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	e008      	b.n	80073fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3301      	adds	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1b6      	bne.n	8007386 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e000      	b.n	8007426 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3720      	adds	r7, #32
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b20      	cmp	r3, #32
 8007446:	d11d      	bne.n	8007484 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <HAL_UART_Receive_IT+0x26>
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e016      	b.n	8007486 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_UART_Receive_IT+0x38>
 8007462:	2302      	movs	r3, #2
 8007464:	e00f      	b.n	8007486 <HAL_UART_Receive_IT+0x58>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	461a      	mov	r2, r3
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fa1e 	bl	80078bc <UART_Start_Receive_IT>
 8007480:	4603      	mov	r3, r0
 8007482:	e000      	b.n	8007486 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10d      	bne.n	80074e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_UART_IRQHandler+0x52>
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fad1 	bl	8007a82 <UART_Receive_IT>
      return;
 80074e0:	e17c      	b.n	80077dc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80b1 	beq.w	800764c <HAL_UART_IRQHandler+0x1bc>
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <HAL_UART_IRQHandler+0x70>
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 80a6 	beq.w	800764c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_UART_IRQHandler+0x90>
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	f043 0201 	orr.w	r2, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <HAL_UART_IRQHandler+0xb0>
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	f043 0202 	orr.w	r2, r3, #2
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_UART_IRQHandler+0xd0>
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	f043 0204 	orr.w	r2, r3, #4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00f      	beq.n	800758a <HAL_UART_IRQHandler+0xfa>
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <HAL_UART_IRQHandler+0xee>
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f043 0208 	orr.w	r2, r3, #8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 811f 	beq.w	80077d2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_UART_IRQHandler+0x11e>
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa6a 	bl	8007a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	bf0c      	ite	eq
 80075bc:	2301      	moveq	r3, #1
 80075be:	2300      	movne	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <HAL_UART_IRQHandler+0x146>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d031      	beq.n	800763a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f9aa 	bl	8007930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e6:	2b40      	cmp	r3, #64	; 0x40
 80075e8:	d123      	bne.n	8007632 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d013      	beq.n	800762a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	4a77      	ldr	r2, [pc, #476]	; (80077e4 <HAL_UART_IRQHandler+0x354>)
 8007608:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fc2f 	bl	8004e72 <HAL_DMA_Abort_IT>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	e00e      	b.n	8007648 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f8e6 	bl	80077fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007630:	e00a      	b.n	8007648 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f8e2 	bl	80077fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007638:	e006      	b.n	8007648 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8de 	bl	80077fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007646:	e0c4      	b.n	80077d2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	bf00      	nop
    return;
 800764a:	e0c2      	b.n	80077d2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	f040 80a2 	bne.w	800779a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 809c 	beq.w	800779a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8096 	beq.w	800779a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d14f      	bne.n	8007732 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800769c:	8a3b      	ldrh	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8099 	beq.w	80077d6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076a8:	8a3a      	ldrh	r2, [r7, #16]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	f080 8093 	bcs.w	80077d6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8a3a      	ldrh	r2, [r7, #16]
 80076b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c0:	d02b      	beq.n	800771a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0210 	bic.w	r2, r2, #16
 800770e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fb3c 	bl	8004d92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007722:	b29b      	uxth	r3, r3
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f870 	bl	8007810 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007730:	e051      	b.n	80077d6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800773a:	b29b      	uxth	r3, r3
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d047      	beq.n	80077da <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800774a:	8a7b      	ldrh	r3, [r7, #18]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d044      	beq.n	80077da <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800775e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0210 	bic.w	r2, r2, #16
 800778c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800778e:	8a7b      	ldrh	r3, [r7, #18]
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f83c 	bl	8007810 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007798:	e01f      	b.n	80077da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_UART_IRQHandler+0x326>
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8ff 	bl	80079b2 <UART_Transmit_IT>
    return;
 80077b4:	e012      	b.n	80077dc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00d      	beq.n	80077dc <HAL_UART_IRQHandler+0x34c>
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f941 	bl	8007a52 <UART_EndTransmit_IT>
    return;
 80077d0:	e004      	b.n	80077dc <HAL_UART_IRQHandler+0x34c>
    return;
 80077d2:	bf00      	nop
 80077d4:	e002      	b.n	80077dc <HAL_UART_IRQHandler+0x34c>
      return;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <HAL_UART_IRQHandler+0x34c>
      return;
 80077da:	bf00      	nop
  }
}
 80077dc:	3728      	adds	r7, #40	; 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	0800798b 	.word	0x0800798b

080077e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007838:	e02c      	b.n	8007894 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d028      	beq.n	8007894 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <UART_WaitOnFlagUntilTimeout+0x30>
 8007848:	f7fc fd86 	bl	8004358 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	429a      	cmp	r2, r3
 8007856:	d21d      	bcs.n	8007894 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007866:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e00f      	b.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4013      	ands	r3, r2
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d0c3      	beq.n	800783a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2222      	movs	r2, #34	; 0x22
 80078e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0201 	orr.w	r2, r2, #1
 8007910:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0220 	orr.w	r2, r2, #32
 8007920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007946:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	2b01      	cmp	r3, #1
 800795e:	d107      	bne.n	8007970 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0210 	bic.w	r2, r2, #16
 800796e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff ff29 	bl	80077fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b21      	cmp	r3, #33	; 0x21
 80079c4:	d13e      	bne.n	8007a44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ce:	d114      	bne.n	80079fa <UART_Transmit_IT+0x48>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d110      	bne.n	80079fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	621a      	str	r2, [r3, #32]
 80079f8:	e008      	b.n	8007a0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	1c59      	adds	r1, r3, #1
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6211      	str	r1, [r2, #32]
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10f      	bne.n	8007a40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	e000      	b.n	8007a46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a44:	2302      	movs	r3, #2
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff feb8 	bl	80077e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b22      	cmp	r3, #34	; 0x22
 8007a94:	f040 8087 	bne.w	8007ba6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa0:	d117      	bne.n	8007ad2 <UART_Receive_IT+0x50>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d113      	bne.n	8007ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	629a      	str	r2, [r3, #40]	; 0x28
 8007ad0:	e026      	b.n	8007b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae4:	d007      	beq.n	8007af6 <UART_Receive_IT+0x74>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <UART_Receive_IT+0x82>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e008      	b.n	8007b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d136      	bne.n	8007ba2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0220 	bic.w	r2, r2, #32
 8007b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695a      	ldr	r2, [r3, #20]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10e      	bne.n	8007b92 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0210 	bic.w	r2, r2, #16
 8007b82:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff fe40 	bl	8007810 <HAL_UARTEx_RxEventCallback>
 8007b90:	e002      	b.n	8007b98 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fb f866 	bl	8002c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e002      	b.n	8007ba8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e000      	b.n	8007ba8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007ba6:	2302      	movs	r3, #2
  }
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	b09f      	sub	sp, #124	; 0x7c
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	68d9      	ldr	r1, [r3, #12]
 8007bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	ea40 0301 	orr.w	r3, r0, r1
 8007bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bf4:	f021 010c 	bic.w	r1, r1, #12
 8007bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0e:	6999      	ldr	r1, [r3, #24]
 8007c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	ea40 0301 	orr.w	r3, r0, r1
 8007c18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4bc5      	ldr	r3, [pc, #788]	; (8007f34 <UART_SetConfig+0x384>)
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d004      	beq.n	8007c2e <UART_SetConfig+0x7e>
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4bc3      	ldr	r3, [pc, #780]	; (8007f38 <UART_SetConfig+0x388>)
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d103      	bne.n	8007c36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c2e:	f7fd fc5f 	bl	80054f0 <HAL_RCC_GetPCLK2Freq>
 8007c32:	6778      	str	r0, [r7, #116]	; 0x74
 8007c34:	e002      	b.n	8007c3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c36:	f7fd fc47 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 8007c3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	f040 80b6 	bne.w	8007db4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	f04f 0500 	mov.w	r5, #0
 8007c50:	4622      	mov	r2, r4
 8007c52:	462b      	mov	r3, r5
 8007c54:	1891      	adds	r1, r2, r2
 8007c56:	6439      	str	r1, [r7, #64]	; 0x40
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c60:	1912      	adds	r2, r2, r4
 8007c62:	eb45 0303 	adc.w	r3, r5, r3
 8007c66:	f04f 0000 	mov.w	r0, #0
 8007c6a:	f04f 0100 	mov.w	r1, #0
 8007c6e:	00d9      	lsls	r1, r3, #3
 8007c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c74:	00d0      	lsls	r0, r2, #3
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	1911      	adds	r1, r2, r4
 8007c7c:	6639      	str	r1, [r7, #96]	; 0x60
 8007c7e:	416b      	adcs	r3, r5
 8007c80:	667b      	str	r3, [r7, #100]	; 0x64
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	1891      	adds	r1, r2, r2
 8007c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c90:	415b      	adcs	r3, r3
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c9c:	f7f9 f814 	bl	8000cc8 <__aeabi_uldivmod>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4ba5      	ldr	r3, [pc, #660]	; (8007f3c <UART_SetConfig+0x38c>)
 8007ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	011e      	lsls	r6, r3, #4
 8007cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb0:	461c      	mov	r4, r3
 8007cb2:	f04f 0500 	mov.w	r5, #0
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	1891      	adds	r1, r2, r2
 8007cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8007cbe:	415b      	adcs	r3, r3
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007cc6:	1912      	adds	r2, r2, r4
 8007cc8:	eb45 0303 	adc.w	r3, r5, r3
 8007ccc:	f04f 0000 	mov.w	r0, #0
 8007cd0:	f04f 0100 	mov.w	r1, #0
 8007cd4:	00d9      	lsls	r1, r3, #3
 8007cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cda:	00d0      	lsls	r0, r2, #3
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	1911      	adds	r1, r2, r4
 8007ce2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ce4:	416b      	adcs	r3, r5
 8007ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	461a      	mov	r2, r3
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	1891      	adds	r1, r2, r2
 8007cf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cf6:	415b      	adcs	r3, r3
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007d02:	f7f8 ffe1 	bl	8000cc8 <__aeabi_uldivmod>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4b8c      	ldr	r3, [pc, #560]	; (8007f3c <UART_SetConfig+0x38c>)
 8007d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	2164      	movs	r1, #100	; 0x64
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	3332      	adds	r3, #50	; 0x32
 8007d1e:	4a87      	ldr	r2, [pc, #540]	; (8007f3c <UART_SetConfig+0x38c>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d2c:	441e      	add	r6, r3
 8007d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d30:	4618      	mov	r0, r3
 8007d32:	f04f 0100 	mov.w	r1, #0
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	1894      	adds	r4, r2, r2
 8007d3c:	623c      	str	r4, [r7, #32]
 8007d3e:	415b      	adcs	r3, r3
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
 8007d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d46:	1812      	adds	r2, r2, r0
 8007d48:	eb41 0303 	adc.w	r3, r1, r3
 8007d4c:	f04f 0400 	mov.w	r4, #0
 8007d50:	f04f 0500 	mov.w	r5, #0
 8007d54:	00dd      	lsls	r5, r3, #3
 8007d56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d5a:	00d4      	lsls	r4, r2, #3
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	1814      	adds	r4, r2, r0
 8007d62:	653c      	str	r4, [r7, #80]	; 0x50
 8007d64:	414b      	adcs	r3, r1
 8007d66:	657b      	str	r3, [r7, #84]	; 0x54
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	1891      	adds	r1, r2, r2
 8007d74:	61b9      	str	r1, [r7, #24]
 8007d76:	415b      	adcs	r3, r3
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d82:	f7f8 ffa1 	bl	8000cc8 <__aeabi_uldivmod>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4b6c      	ldr	r3, [pc, #432]	; (8007f3c <UART_SetConfig+0x38c>)
 8007d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d90:	095b      	lsrs	r3, r3, #5
 8007d92:	2164      	movs	r1, #100	; 0x64
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	3332      	adds	r3, #50	; 0x32
 8007d9e:	4a67      	ldr	r2, [pc, #412]	; (8007f3c <UART_SetConfig+0x38c>)
 8007da0:	fba2 2303 	umull	r2, r3, r2, r3
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	f003 0207 	and.w	r2, r3, #7
 8007daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4432      	add	r2, r6
 8007db0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007db2:	e0b9      	b.n	8007f28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db6:	461c      	mov	r4, r3
 8007db8:	f04f 0500 	mov.w	r5, #0
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	1891      	adds	r1, r2, r2
 8007dc2:	6139      	str	r1, [r7, #16]
 8007dc4:	415b      	adcs	r3, r3
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dcc:	1912      	adds	r2, r2, r4
 8007dce:	eb45 0303 	adc.w	r3, r5, r3
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f04f 0100 	mov.w	r1, #0
 8007dda:	00d9      	lsls	r1, r3, #3
 8007ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007de0:	00d0      	lsls	r0, r2, #3
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	eb12 0804 	adds.w	r8, r2, r4
 8007dea:	eb43 0905 	adc.w	r9, r3, r5
 8007dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f04f 0100 	mov.w	r1, #0
 8007df8:	f04f 0200 	mov.w	r2, #0
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	008b      	lsls	r3, r1, #2
 8007e02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e06:	0082      	lsls	r2, r0, #2
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 ff5c 	bl	8000cc8 <__aeabi_uldivmod>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4b49      	ldr	r3, [pc, #292]	; (8007f3c <UART_SetConfig+0x38c>)
 8007e16:	fba3 2302 	umull	r2, r3, r3, r2
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	011e      	lsls	r6, r3, #4
 8007e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e20:	4618      	mov	r0, r3
 8007e22:	f04f 0100 	mov.w	r1, #0
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	1894      	adds	r4, r2, r2
 8007e2c:	60bc      	str	r4, [r7, #8]
 8007e2e:	415b      	adcs	r3, r3
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e36:	1812      	adds	r2, r2, r0
 8007e38:	eb41 0303 	adc.w	r3, r1, r3
 8007e3c:	f04f 0400 	mov.w	r4, #0
 8007e40:	f04f 0500 	mov.w	r5, #0
 8007e44:	00dd      	lsls	r5, r3, #3
 8007e46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e4a:	00d4      	lsls	r4, r2, #3
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	1814      	adds	r4, r2, r0
 8007e52:	64bc      	str	r4, [r7, #72]	; 0x48
 8007e54:	414b      	adcs	r3, r1
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	f04f 0300 	mov.w	r3, #0
 8007e6a:	008b      	lsls	r3, r1, #2
 8007e6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e70:	0082      	lsls	r2, r0, #2
 8007e72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e76:	f7f8 ff27 	bl	8000cc8 <__aeabi_uldivmod>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4b2f      	ldr	r3, [pc, #188]	; (8007f3c <UART_SetConfig+0x38c>)
 8007e80:	fba3 1302 	umull	r1, r3, r3, r2
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	2164      	movs	r1, #100	; 0x64
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	3332      	adds	r3, #50	; 0x32
 8007e92:	4a2a      	ldr	r2, [pc, #168]	; (8007f3c <UART_SetConfig+0x38c>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e9e:	441e      	add	r6, r3
 8007ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f04f 0100 	mov.w	r1, #0
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	1894      	adds	r4, r2, r2
 8007eae:	603c      	str	r4, [r7, #0]
 8007eb0:	415b      	adcs	r3, r3
 8007eb2:	607b      	str	r3, [r7, #4]
 8007eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb8:	1812      	adds	r2, r2, r0
 8007eba:	eb41 0303 	adc.w	r3, r1, r3
 8007ebe:	f04f 0400 	mov.w	r4, #0
 8007ec2:	f04f 0500 	mov.w	r5, #0
 8007ec6:	00dd      	lsls	r5, r3, #3
 8007ec8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ecc:	00d4      	lsls	r4, r2, #3
 8007ece:	4622      	mov	r2, r4
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	eb12 0a00 	adds.w	sl, r2, r0
 8007ed6:	eb43 0b01 	adc.w	fp, r3, r1
 8007eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f04f 0100 	mov.w	r1, #0
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	008b      	lsls	r3, r1, #2
 8007eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ef2:	0082      	lsls	r2, r0, #2
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	4659      	mov	r1, fp
 8007ef8:	f7f8 fee6 	bl	8000cc8 <__aeabi_uldivmod>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <UART_SetConfig+0x38c>)
 8007f02:	fba3 1302 	umull	r1, r3, r3, r2
 8007f06:	095b      	lsrs	r3, r3, #5
 8007f08:	2164      	movs	r1, #100	; 0x64
 8007f0a:	fb01 f303 	mul.w	r3, r1, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	011b      	lsls	r3, r3, #4
 8007f12:	3332      	adds	r3, #50	; 0x32
 8007f14:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <UART_SetConfig+0x38c>)
 8007f16:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4432      	add	r2, r6
 8007f26:	609a      	str	r2, [r3, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	377c      	adds	r7, #124	; 0x7c
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f32:	bf00      	nop
 8007f34:	40011000 	.word	0x40011000
 8007f38:	40011400 	.word	0x40011400
 8007f3c:	51eb851f 	.word	0x51eb851f

08007f40 <__errno>:
 8007f40:	4b01      	ldr	r3, [pc, #4]	; (8007f48 <__errno+0x8>)
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	200000d4 	.word	0x200000d4

08007f4c <__libc_init_array>:
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4d0d      	ldr	r5, [pc, #52]	; (8007f84 <__libc_init_array+0x38>)
 8007f50:	4c0d      	ldr	r4, [pc, #52]	; (8007f88 <__libc_init_array+0x3c>)
 8007f52:	1b64      	subs	r4, r4, r5
 8007f54:	10a4      	asrs	r4, r4, #2
 8007f56:	2600      	movs	r6, #0
 8007f58:	42a6      	cmp	r6, r4
 8007f5a:	d109      	bne.n	8007f70 <__libc_init_array+0x24>
 8007f5c:	4d0b      	ldr	r5, [pc, #44]	; (8007f8c <__libc_init_array+0x40>)
 8007f5e:	4c0c      	ldr	r4, [pc, #48]	; (8007f90 <__libc_init_array+0x44>)
 8007f60:	f005 fa02 	bl	800d368 <_init>
 8007f64:	1b64      	subs	r4, r4, r5
 8007f66:	10a4      	asrs	r4, r4, #2
 8007f68:	2600      	movs	r6, #0
 8007f6a:	42a6      	cmp	r6, r4
 8007f6c:	d105      	bne.n	8007f7a <__libc_init_array+0x2e>
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f74:	4798      	blx	r3
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7ee      	b.n	8007f58 <__libc_init_array+0xc>
 8007f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f7e:	4798      	blx	r3
 8007f80:	3601      	adds	r6, #1
 8007f82:	e7f2      	b.n	8007f6a <__libc_init_array+0x1e>
 8007f84:	0800da88 	.word	0x0800da88
 8007f88:	0800da88 	.word	0x0800da88
 8007f8c:	0800da88 	.word	0x0800da88
 8007f90:	0800da8c 	.word	0x0800da8c

08007f94 <memset>:
 8007f94:	4402      	add	r2, r0
 8007f96:	4603      	mov	r3, r0
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d100      	bne.n	8007f9e <memset+0xa>
 8007f9c:	4770      	bx	lr
 8007f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa2:	e7f9      	b.n	8007f98 <memset+0x4>

08007fa4 <__cvt>:
 8007fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	ec55 4b10 	vmov	r4, r5, d0
 8007fac:	2d00      	cmp	r5, #0
 8007fae:	460e      	mov	r6, r1
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	bfbb      	ittet	lt
 8007fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fba:	461d      	movlt	r5, r3
 8007fbc:	2300      	movge	r3, #0
 8007fbe:	232d      	movlt	r3, #45	; 0x2d
 8007fc0:	700b      	strb	r3, [r1, #0]
 8007fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fc8:	4691      	mov	r9, r2
 8007fca:	f023 0820 	bic.w	r8, r3, #32
 8007fce:	bfbc      	itt	lt
 8007fd0:	4622      	movlt	r2, r4
 8007fd2:	4614      	movlt	r4, r2
 8007fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fd8:	d005      	beq.n	8007fe6 <__cvt+0x42>
 8007fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fde:	d100      	bne.n	8007fe2 <__cvt+0x3e>
 8007fe0:	3601      	adds	r6, #1
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	e000      	b.n	8007fe8 <__cvt+0x44>
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	ab03      	add	r3, sp, #12
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	ab02      	add	r3, sp, #8
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	ec45 4b10 	vmov	d0, r4, r5
 8007ff4:	4653      	mov	r3, sl
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	f000 feee 	bl	8008dd8 <_dtoa_r>
 8007ffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008000:	4607      	mov	r7, r0
 8008002:	d102      	bne.n	800800a <__cvt+0x66>
 8008004:	f019 0f01 	tst.w	r9, #1
 8008008:	d022      	beq.n	8008050 <__cvt+0xac>
 800800a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800800e:	eb07 0906 	add.w	r9, r7, r6
 8008012:	d110      	bne.n	8008036 <__cvt+0x92>
 8008014:	783b      	ldrb	r3, [r7, #0]
 8008016:	2b30      	cmp	r3, #48	; 0x30
 8008018:	d10a      	bne.n	8008030 <__cvt+0x8c>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 fd71 	bl	8000b08 <__aeabi_dcmpeq>
 8008026:	b918      	cbnz	r0, 8008030 <__cvt+0x8c>
 8008028:	f1c6 0601 	rsb	r6, r6, #1
 800802c:	f8ca 6000 	str.w	r6, [sl]
 8008030:	f8da 3000 	ldr.w	r3, [sl]
 8008034:	4499      	add	r9, r3
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 fd63 	bl	8000b08 <__aeabi_dcmpeq>
 8008042:	b108      	cbz	r0, 8008048 <__cvt+0xa4>
 8008044:	f8cd 900c 	str.w	r9, [sp, #12]
 8008048:	2230      	movs	r2, #48	; 0x30
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	454b      	cmp	r3, r9
 800804e:	d307      	bcc.n	8008060 <__cvt+0xbc>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008054:	1bdb      	subs	r3, r3, r7
 8008056:	4638      	mov	r0, r7
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	b004      	add	sp, #16
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008060:	1c59      	adds	r1, r3, #1
 8008062:	9103      	str	r1, [sp, #12]
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e7f0      	b.n	800804a <__cvt+0xa6>

08008068 <__exponent>:
 8008068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800806a:	4603      	mov	r3, r0
 800806c:	2900      	cmp	r1, #0
 800806e:	bfb8      	it	lt
 8008070:	4249      	neglt	r1, r1
 8008072:	f803 2b02 	strb.w	r2, [r3], #2
 8008076:	bfb4      	ite	lt
 8008078:	222d      	movlt	r2, #45	; 0x2d
 800807a:	222b      	movge	r2, #43	; 0x2b
 800807c:	2909      	cmp	r1, #9
 800807e:	7042      	strb	r2, [r0, #1]
 8008080:	dd2a      	ble.n	80080d8 <__exponent+0x70>
 8008082:	f10d 0407 	add.w	r4, sp, #7
 8008086:	46a4      	mov	ip, r4
 8008088:	270a      	movs	r7, #10
 800808a:	46a6      	mov	lr, r4
 800808c:	460a      	mov	r2, r1
 800808e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008092:	fb07 1516 	mls	r5, r7, r6, r1
 8008096:	3530      	adds	r5, #48	; 0x30
 8008098:	2a63      	cmp	r2, #99	; 0x63
 800809a:	f104 34ff 	add.w	r4, r4, #4294967295
 800809e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080a2:	4631      	mov	r1, r6
 80080a4:	dcf1      	bgt.n	800808a <__exponent+0x22>
 80080a6:	3130      	adds	r1, #48	; 0x30
 80080a8:	f1ae 0502 	sub.w	r5, lr, #2
 80080ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080b0:	1c44      	adds	r4, r0, #1
 80080b2:	4629      	mov	r1, r5
 80080b4:	4561      	cmp	r1, ip
 80080b6:	d30a      	bcc.n	80080ce <__exponent+0x66>
 80080b8:	f10d 0209 	add.w	r2, sp, #9
 80080bc:	eba2 020e 	sub.w	r2, r2, lr
 80080c0:	4565      	cmp	r5, ip
 80080c2:	bf88      	it	hi
 80080c4:	2200      	movhi	r2, #0
 80080c6:	4413      	add	r3, r2
 80080c8:	1a18      	subs	r0, r3, r0
 80080ca:	b003      	add	sp, #12
 80080cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080d6:	e7ed      	b.n	80080b4 <__exponent+0x4c>
 80080d8:	2330      	movs	r3, #48	; 0x30
 80080da:	3130      	adds	r1, #48	; 0x30
 80080dc:	7083      	strb	r3, [r0, #2]
 80080de:	70c1      	strb	r1, [r0, #3]
 80080e0:	1d03      	adds	r3, r0, #4
 80080e2:	e7f1      	b.n	80080c8 <__exponent+0x60>

080080e4 <_printf_float>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	ed2d 8b02 	vpush	{d8}
 80080ec:	b08d      	sub	sp, #52	; 0x34
 80080ee:	460c      	mov	r4, r1
 80080f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080f4:	4616      	mov	r6, r2
 80080f6:	461f      	mov	r7, r3
 80080f8:	4605      	mov	r5, r0
 80080fa:	f001 fe11 	bl	8009d20 <_localeconv_r>
 80080fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008102:	4650      	mov	r0, sl
 8008104:	f7f8 f884 	bl	8000210 <strlen>
 8008108:	2300      	movs	r3, #0
 800810a:	930a      	str	r3, [sp, #40]	; 0x28
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	9305      	str	r3, [sp, #20]
 8008110:	f8d8 3000 	ldr.w	r3, [r8]
 8008114:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008118:	3307      	adds	r3, #7
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	f103 0208 	add.w	r2, r3, #8
 8008122:	f8c8 2000 	str.w	r2, [r8]
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800812e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	f8cd 8018 	str.w	r8, [sp, #24]
 800813c:	ee08 0a10 	vmov	s16, r0
 8008140:	4b9f      	ldr	r3, [pc, #636]	; (80083c0 <_printf_float+0x2dc>)
 8008142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	f7f8 fd0f 	bl	8000b6c <__aeabi_dcmpun>
 800814e:	bb88      	cbnz	r0, 80081b4 <_printf_float+0xd0>
 8008150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008154:	4b9a      	ldr	r3, [pc, #616]	; (80083c0 <_printf_float+0x2dc>)
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	f7f8 fce9 	bl	8000b30 <__aeabi_dcmple>
 800815e:	bb48      	cbnz	r0, 80081b4 <_printf_float+0xd0>
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	4640      	mov	r0, r8
 8008166:	4649      	mov	r1, r9
 8008168:	f7f8 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800816c:	b110      	cbz	r0, 8008174 <_printf_float+0x90>
 800816e:	232d      	movs	r3, #45	; 0x2d
 8008170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008174:	4b93      	ldr	r3, [pc, #588]	; (80083c4 <_printf_float+0x2e0>)
 8008176:	4894      	ldr	r0, [pc, #592]	; (80083c8 <_printf_float+0x2e4>)
 8008178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800817c:	bf94      	ite	ls
 800817e:	4698      	movls	r8, r3
 8008180:	4680      	movhi	r8, r0
 8008182:	2303      	movs	r3, #3
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	f023 0204 	bic.w	r2, r3, #4
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	f04f 0900 	mov.w	r9, #0
 8008192:	9700      	str	r7, [sp, #0]
 8008194:	4633      	mov	r3, r6
 8008196:	aa0b      	add	r2, sp, #44	; 0x2c
 8008198:	4621      	mov	r1, r4
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f9d8 	bl	8008550 <_printf_common>
 80081a0:	3001      	adds	r0, #1
 80081a2:	f040 8090 	bne.w	80082c6 <_printf_float+0x1e2>
 80081a6:	f04f 30ff 	mov.w	r0, #4294967295
 80081aa:	b00d      	add	sp, #52	; 0x34
 80081ac:	ecbd 8b02 	vpop	{d8}
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	4640      	mov	r0, r8
 80081ba:	4649      	mov	r1, r9
 80081bc:	f7f8 fcd6 	bl	8000b6c <__aeabi_dcmpun>
 80081c0:	b140      	cbz	r0, 80081d4 <_printf_float+0xf0>
 80081c2:	464b      	mov	r3, r9
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	bfbc      	itt	lt
 80081c8:	232d      	movlt	r3, #45	; 0x2d
 80081ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081ce:	487f      	ldr	r0, [pc, #508]	; (80083cc <_printf_float+0x2e8>)
 80081d0:	4b7f      	ldr	r3, [pc, #508]	; (80083d0 <_printf_float+0x2ec>)
 80081d2:	e7d1      	b.n	8008178 <_printf_float+0x94>
 80081d4:	6863      	ldr	r3, [r4, #4]
 80081d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081da:	9206      	str	r2, [sp, #24]
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	d13f      	bne.n	8008260 <_printf_float+0x17c>
 80081e0:	2306      	movs	r3, #6
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	9b05      	ldr	r3, [sp, #20]
 80081e6:	6861      	ldr	r1, [r4, #4]
 80081e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081ec:	2300      	movs	r3, #0
 80081ee:	9303      	str	r3, [sp, #12]
 80081f0:	ab0a      	add	r3, sp, #40	; 0x28
 80081f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081f6:	ab09      	add	r3, sp, #36	; 0x24
 80081f8:	ec49 8b10 	vmov	d0, r8, r9
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	6022      	str	r2, [r4, #0]
 8008200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008204:	4628      	mov	r0, r5
 8008206:	f7ff fecd 	bl	8007fa4 <__cvt>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800820e:	2b47      	cmp	r3, #71	; 0x47
 8008210:	4680      	mov	r8, r0
 8008212:	d108      	bne.n	8008226 <_printf_float+0x142>
 8008214:	1cc8      	adds	r0, r1, #3
 8008216:	db02      	blt.n	800821e <_printf_float+0x13a>
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	4299      	cmp	r1, r3
 800821c:	dd41      	ble.n	80082a2 <_printf_float+0x1be>
 800821e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008222:	fa5f fb8b 	uxtb.w	fp, fp
 8008226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800822a:	d820      	bhi.n	800826e <_printf_float+0x18a>
 800822c:	3901      	subs	r1, #1
 800822e:	465a      	mov	r2, fp
 8008230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008234:	9109      	str	r1, [sp, #36]	; 0x24
 8008236:	f7ff ff17 	bl	8008068 <__exponent>
 800823a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800823c:	1813      	adds	r3, r2, r0
 800823e:	2a01      	cmp	r2, #1
 8008240:	4681      	mov	r9, r0
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	dc02      	bgt.n	800824c <_printf_float+0x168>
 8008246:	6822      	ldr	r2, [r4, #0]
 8008248:	07d2      	lsls	r2, r2, #31
 800824a:	d501      	bpl.n	8008250 <_printf_float+0x16c>
 800824c:	3301      	adds	r3, #1
 800824e:	6123      	str	r3, [r4, #16]
 8008250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008254:	2b00      	cmp	r3, #0
 8008256:	d09c      	beq.n	8008192 <_printf_float+0xae>
 8008258:	232d      	movs	r3, #45	; 0x2d
 800825a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825e:	e798      	b.n	8008192 <_printf_float+0xae>
 8008260:	9a06      	ldr	r2, [sp, #24]
 8008262:	2a47      	cmp	r2, #71	; 0x47
 8008264:	d1be      	bne.n	80081e4 <_printf_float+0x100>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1bc      	bne.n	80081e4 <_printf_float+0x100>
 800826a:	2301      	movs	r3, #1
 800826c:	e7b9      	b.n	80081e2 <_printf_float+0xfe>
 800826e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008272:	d118      	bne.n	80082a6 <_printf_float+0x1c2>
 8008274:	2900      	cmp	r1, #0
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	dd0b      	ble.n	8008292 <_printf_float+0x1ae>
 800827a:	6121      	str	r1, [r4, #16]
 800827c:	b913      	cbnz	r3, 8008284 <_printf_float+0x1a0>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	07d0      	lsls	r0, r2, #31
 8008282:	d502      	bpl.n	800828a <_printf_float+0x1a6>
 8008284:	3301      	adds	r3, #1
 8008286:	440b      	add	r3, r1
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	65a1      	str	r1, [r4, #88]	; 0x58
 800828c:	f04f 0900 	mov.w	r9, #0
 8008290:	e7de      	b.n	8008250 <_printf_float+0x16c>
 8008292:	b913      	cbnz	r3, 800829a <_printf_float+0x1b6>
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	07d2      	lsls	r2, r2, #31
 8008298:	d501      	bpl.n	800829e <_printf_float+0x1ba>
 800829a:	3302      	adds	r3, #2
 800829c:	e7f4      	b.n	8008288 <_printf_float+0x1a4>
 800829e:	2301      	movs	r3, #1
 80082a0:	e7f2      	b.n	8008288 <_printf_float+0x1a4>
 80082a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	4299      	cmp	r1, r3
 80082aa:	db05      	blt.n	80082b8 <_printf_float+0x1d4>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	6121      	str	r1, [r4, #16]
 80082b0:	07d8      	lsls	r0, r3, #31
 80082b2:	d5ea      	bpl.n	800828a <_printf_float+0x1a6>
 80082b4:	1c4b      	adds	r3, r1, #1
 80082b6:	e7e7      	b.n	8008288 <_printf_float+0x1a4>
 80082b8:	2900      	cmp	r1, #0
 80082ba:	bfd4      	ite	le
 80082bc:	f1c1 0202 	rsble	r2, r1, #2
 80082c0:	2201      	movgt	r2, #1
 80082c2:	4413      	add	r3, r2
 80082c4:	e7e0      	b.n	8008288 <_printf_float+0x1a4>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	055a      	lsls	r2, r3, #21
 80082ca:	d407      	bmi.n	80082dc <_printf_float+0x1f8>
 80082cc:	6923      	ldr	r3, [r4, #16]
 80082ce:	4642      	mov	r2, r8
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	d12c      	bne.n	8008334 <_printf_float+0x250>
 80082da:	e764      	b.n	80081a6 <_printf_float+0xc2>
 80082dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082e0:	f240 80e0 	bls.w	80084a4 <_printf_float+0x3c0>
 80082e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e8:	2200      	movs	r2, #0
 80082ea:	2300      	movs	r3, #0
 80082ec:	f7f8 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d034      	beq.n	800835e <_printf_float+0x27a>
 80082f4:	4a37      	ldr	r2, [pc, #220]	; (80083d4 <_printf_float+0x2f0>)
 80082f6:	2301      	movs	r3, #1
 80082f8:	4631      	mov	r1, r6
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b8      	blx	r7
 80082fe:	3001      	adds	r0, #1
 8008300:	f43f af51 	beq.w	80081a6 <_printf_float+0xc2>
 8008304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008308:	429a      	cmp	r2, r3
 800830a:	db02      	blt.n	8008312 <_printf_float+0x22e>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	07d8      	lsls	r0, r3, #31
 8008310:	d510      	bpl.n	8008334 <_printf_float+0x250>
 8008312:	ee18 3a10 	vmov	r3, s16
 8008316:	4652      	mov	r2, sl
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f af41 	beq.w	80081a6 <_printf_float+0xc2>
 8008324:	f04f 0800 	mov.w	r8, #0
 8008328:	f104 091a 	add.w	r9, r4, #26
 800832c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832e:	3b01      	subs	r3, #1
 8008330:	4543      	cmp	r3, r8
 8008332:	dc09      	bgt.n	8008348 <_printf_float+0x264>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	f100 8105 	bmi.w	8008546 <_printf_float+0x462>
 800833c:	68e0      	ldr	r0, [r4, #12]
 800833e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008340:	4298      	cmp	r0, r3
 8008342:	bfb8      	it	lt
 8008344:	4618      	movlt	r0, r3
 8008346:	e730      	b.n	80081aa <_printf_float+0xc6>
 8008348:	2301      	movs	r3, #1
 800834a:	464a      	mov	r2, r9
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	f43f af27 	beq.w	80081a6 <_printf_float+0xc2>
 8008358:	f108 0801 	add.w	r8, r8, #1
 800835c:	e7e6      	b.n	800832c <_printf_float+0x248>
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	2b00      	cmp	r3, #0
 8008362:	dc39      	bgt.n	80083d8 <_printf_float+0x2f4>
 8008364:	4a1b      	ldr	r2, [pc, #108]	; (80083d4 <_printf_float+0x2f0>)
 8008366:	2301      	movs	r3, #1
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	47b8      	blx	r7
 800836e:	3001      	adds	r0, #1
 8008370:	f43f af19 	beq.w	80081a6 <_printf_float+0xc2>
 8008374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008378:	4313      	orrs	r3, r2
 800837a:	d102      	bne.n	8008382 <_printf_float+0x29e>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	07d9      	lsls	r1, r3, #31
 8008380:	d5d8      	bpl.n	8008334 <_printf_float+0x250>
 8008382:	ee18 3a10 	vmov	r3, s16
 8008386:	4652      	mov	r2, sl
 8008388:	4631      	mov	r1, r6
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	f43f af09 	beq.w	80081a6 <_printf_float+0xc2>
 8008394:	f04f 0900 	mov.w	r9, #0
 8008398:	f104 0a1a 	add.w	sl, r4, #26
 800839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839e:	425b      	negs	r3, r3
 80083a0:	454b      	cmp	r3, r9
 80083a2:	dc01      	bgt.n	80083a8 <_printf_float+0x2c4>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	e792      	b.n	80082ce <_printf_float+0x1ea>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4652      	mov	r2, sl
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f aef7 	beq.w	80081a6 <_printf_float+0xc2>
 80083b8:	f109 0901 	add.w	r9, r9, #1
 80083bc:	e7ee      	b.n	800839c <_printf_float+0x2b8>
 80083be:	bf00      	nop
 80083c0:	7fefffff 	.word	0x7fefffff
 80083c4:	0800d400 	.word	0x0800d400
 80083c8:	0800d404 	.word	0x0800d404
 80083cc:	0800d40c 	.word	0x0800d40c
 80083d0:	0800d408 	.word	0x0800d408
 80083d4:	0800d410 	.word	0x0800d410
 80083d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083dc:	429a      	cmp	r2, r3
 80083de:	bfa8      	it	ge
 80083e0:	461a      	movge	r2, r3
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	4691      	mov	r9, r2
 80083e6:	dc37      	bgt.n	8008458 <_printf_float+0x374>
 80083e8:	f04f 0b00 	mov.w	fp, #0
 80083ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083f0:	f104 021a 	add.w	r2, r4, #26
 80083f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083f6:	9305      	str	r3, [sp, #20]
 80083f8:	eba3 0309 	sub.w	r3, r3, r9
 80083fc:	455b      	cmp	r3, fp
 80083fe:	dc33      	bgt.n	8008468 <_printf_float+0x384>
 8008400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008404:	429a      	cmp	r2, r3
 8008406:	db3b      	blt.n	8008480 <_printf_float+0x39c>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	07da      	lsls	r2, r3, #31
 800840c:	d438      	bmi.n	8008480 <_printf_float+0x39c>
 800840e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	eba2 0901 	sub.w	r9, r2, r1
 800841a:	4599      	cmp	r9, r3
 800841c:	bfa8      	it	ge
 800841e:	4699      	movge	r9, r3
 8008420:	f1b9 0f00 	cmp.w	r9, #0
 8008424:	dc35      	bgt.n	8008492 <_printf_float+0x3ae>
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800842e:	f104 0a1a 	add.w	sl, r4, #26
 8008432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	eba3 0309 	sub.w	r3, r3, r9
 800843c:	4543      	cmp	r3, r8
 800843e:	f77f af79 	ble.w	8008334 <_printf_float+0x250>
 8008442:	2301      	movs	r3, #1
 8008444:	4652      	mov	r2, sl
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	f43f aeaa 	beq.w	80081a6 <_printf_float+0xc2>
 8008452:	f108 0801 	add.w	r8, r8, #1
 8008456:	e7ec      	b.n	8008432 <_printf_float+0x34e>
 8008458:	4613      	mov	r3, r2
 800845a:	4631      	mov	r1, r6
 800845c:	4642      	mov	r2, r8
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	d1c0      	bne.n	80083e8 <_printf_float+0x304>
 8008466:	e69e      	b.n	80081a6 <_printf_float+0xc2>
 8008468:	2301      	movs	r3, #1
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	9205      	str	r2, [sp, #20]
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f ae97 	beq.w	80081a6 <_printf_float+0xc2>
 8008478:	9a05      	ldr	r2, [sp, #20]
 800847a:	f10b 0b01 	add.w	fp, fp, #1
 800847e:	e7b9      	b.n	80083f4 <_printf_float+0x310>
 8008480:	ee18 3a10 	vmov	r3, s16
 8008484:	4652      	mov	r2, sl
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	47b8      	blx	r7
 800848c:	3001      	adds	r0, #1
 800848e:	d1be      	bne.n	800840e <_printf_float+0x32a>
 8008490:	e689      	b.n	80081a6 <_printf_float+0xc2>
 8008492:	9a05      	ldr	r2, [sp, #20]
 8008494:	464b      	mov	r3, r9
 8008496:	4442      	add	r2, r8
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	d1c1      	bne.n	8008426 <_printf_float+0x342>
 80084a2:	e680      	b.n	80081a6 <_printf_float+0xc2>
 80084a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a6:	2a01      	cmp	r2, #1
 80084a8:	dc01      	bgt.n	80084ae <_printf_float+0x3ca>
 80084aa:	07db      	lsls	r3, r3, #31
 80084ac:	d538      	bpl.n	8008520 <_printf_float+0x43c>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4642      	mov	r2, r8
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f ae74 	beq.w	80081a6 <_printf_float+0xc2>
 80084be:	ee18 3a10 	vmov	r3, s16
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f ae6b 	beq.w	80081a6 <_printf_float+0xc2>
 80084d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084d4:	2200      	movs	r2, #0
 80084d6:	2300      	movs	r3, #0
 80084d8:	f7f8 fb16 	bl	8000b08 <__aeabi_dcmpeq>
 80084dc:	b9d8      	cbnz	r0, 8008516 <_printf_float+0x432>
 80084de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e0:	f108 0201 	add.w	r2, r8, #1
 80084e4:	3b01      	subs	r3, #1
 80084e6:	4631      	mov	r1, r6
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b8      	blx	r7
 80084ec:	3001      	adds	r0, #1
 80084ee:	d10e      	bne.n	800850e <_printf_float+0x42a>
 80084f0:	e659      	b.n	80081a6 <_printf_float+0xc2>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4652      	mov	r2, sl
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae52 	beq.w	80081a6 <_printf_float+0xc2>
 8008502:	f108 0801 	add.w	r8, r8, #1
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	3b01      	subs	r3, #1
 800850a:	4543      	cmp	r3, r8
 800850c:	dcf1      	bgt.n	80084f2 <_printf_float+0x40e>
 800850e:	464b      	mov	r3, r9
 8008510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008514:	e6dc      	b.n	80082d0 <_printf_float+0x1ec>
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	f104 0a1a 	add.w	sl, r4, #26
 800851e:	e7f2      	b.n	8008506 <_printf_float+0x422>
 8008520:	2301      	movs	r3, #1
 8008522:	4642      	mov	r2, r8
 8008524:	e7df      	b.n	80084e6 <_printf_float+0x402>
 8008526:	2301      	movs	r3, #1
 8008528:	464a      	mov	r2, r9
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	f43f ae38 	beq.w	80081a6 <_printf_float+0xc2>
 8008536:	f108 0801 	add.w	r8, r8, #1
 800853a:	68e3      	ldr	r3, [r4, #12]
 800853c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800853e:	1a5b      	subs	r3, r3, r1
 8008540:	4543      	cmp	r3, r8
 8008542:	dcf0      	bgt.n	8008526 <_printf_float+0x442>
 8008544:	e6fa      	b.n	800833c <_printf_float+0x258>
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	f104 0919 	add.w	r9, r4, #25
 800854e:	e7f4      	b.n	800853a <_printf_float+0x456>

08008550 <_printf_common>:
 8008550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	4616      	mov	r6, r2
 8008556:	4699      	mov	r9, r3
 8008558:	688a      	ldr	r2, [r1, #8]
 800855a:	690b      	ldr	r3, [r1, #16]
 800855c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008560:	4293      	cmp	r3, r2
 8008562:	bfb8      	it	lt
 8008564:	4613      	movlt	r3, r2
 8008566:	6033      	str	r3, [r6, #0]
 8008568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800856c:	4607      	mov	r7, r0
 800856e:	460c      	mov	r4, r1
 8008570:	b10a      	cbz	r2, 8008576 <_printf_common+0x26>
 8008572:	3301      	adds	r3, #1
 8008574:	6033      	str	r3, [r6, #0]
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	0699      	lsls	r1, r3, #26
 800857a:	bf42      	ittt	mi
 800857c:	6833      	ldrmi	r3, [r6, #0]
 800857e:	3302      	addmi	r3, #2
 8008580:	6033      	strmi	r3, [r6, #0]
 8008582:	6825      	ldr	r5, [r4, #0]
 8008584:	f015 0506 	ands.w	r5, r5, #6
 8008588:	d106      	bne.n	8008598 <_printf_common+0x48>
 800858a:	f104 0a19 	add.w	sl, r4, #25
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	6832      	ldr	r2, [r6, #0]
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	42ab      	cmp	r3, r5
 8008596:	dc26      	bgt.n	80085e6 <_printf_common+0x96>
 8008598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800859c:	1e13      	subs	r3, r2, #0
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	bf18      	it	ne
 80085a2:	2301      	movne	r3, #1
 80085a4:	0692      	lsls	r2, r2, #26
 80085a6:	d42b      	bmi.n	8008600 <_printf_common+0xb0>
 80085a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ac:	4649      	mov	r1, r9
 80085ae:	4638      	mov	r0, r7
 80085b0:	47c0      	blx	r8
 80085b2:	3001      	adds	r0, #1
 80085b4:	d01e      	beq.n	80085f4 <_printf_common+0xa4>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	68e5      	ldr	r5, [r4, #12]
 80085ba:	6832      	ldr	r2, [r6, #0]
 80085bc:	f003 0306 	and.w	r3, r3, #6
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	bf08      	it	eq
 80085c4:	1aad      	subeq	r5, r5, r2
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	bf0c      	ite	eq
 80085cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d0:	2500      	movne	r5, #0
 80085d2:	4293      	cmp	r3, r2
 80085d4:	bfc4      	itt	gt
 80085d6:	1a9b      	subgt	r3, r3, r2
 80085d8:	18ed      	addgt	r5, r5, r3
 80085da:	2600      	movs	r6, #0
 80085dc:	341a      	adds	r4, #26
 80085de:	42b5      	cmp	r5, r6
 80085e0:	d11a      	bne.n	8008618 <_printf_common+0xc8>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e008      	b.n	80085f8 <_printf_common+0xa8>
 80085e6:	2301      	movs	r3, #1
 80085e8:	4652      	mov	r2, sl
 80085ea:	4649      	mov	r1, r9
 80085ec:	4638      	mov	r0, r7
 80085ee:	47c0      	blx	r8
 80085f0:	3001      	adds	r0, #1
 80085f2:	d103      	bne.n	80085fc <_printf_common+0xac>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fc:	3501      	adds	r5, #1
 80085fe:	e7c6      	b.n	800858e <_printf_common+0x3e>
 8008600:	18e1      	adds	r1, r4, r3
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	2030      	movs	r0, #48	; 0x30
 8008606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800860a:	4422      	add	r2, r4
 800860c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008614:	3302      	adds	r3, #2
 8008616:	e7c7      	b.n	80085a8 <_printf_common+0x58>
 8008618:	2301      	movs	r3, #1
 800861a:	4622      	mov	r2, r4
 800861c:	4649      	mov	r1, r9
 800861e:	4638      	mov	r0, r7
 8008620:	47c0      	blx	r8
 8008622:	3001      	adds	r0, #1
 8008624:	d0e6      	beq.n	80085f4 <_printf_common+0xa4>
 8008626:	3601      	adds	r6, #1
 8008628:	e7d9      	b.n	80085de <_printf_common+0x8e>
	...

0800862c <_printf_i>:
 800862c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	460c      	mov	r4, r1
 8008632:	4691      	mov	r9, r2
 8008634:	7e27      	ldrb	r7, [r4, #24]
 8008636:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008638:	2f78      	cmp	r7, #120	; 0x78
 800863a:	4680      	mov	r8, r0
 800863c:	469a      	mov	sl, r3
 800863e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008642:	d807      	bhi.n	8008654 <_printf_i+0x28>
 8008644:	2f62      	cmp	r7, #98	; 0x62
 8008646:	d80a      	bhi.n	800865e <_printf_i+0x32>
 8008648:	2f00      	cmp	r7, #0
 800864a:	f000 80d8 	beq.w	80087fe <_printf_i+0x1d2>
 800864e:	2f58      	cmp	r7, #88	; 0x58
 8008650:	f000 80a3 	beq.w	800879a <_printf_i+0x16e>
 8008654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800865c:	e03a      	b.n	80086d4 <_printf_i+0xa8>
 800865e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008662:	2b15      	cmp	r3, #21
 8008664:	d8f6      	bhi.n	8008654 <_printf_i+0x28>
 8008666:	a001      	add	r0, pc, #4	; (adr r0, 800866c <_printf_i+0x40>)
 8008668:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800866c:	080086c5 	.word	0x080086c5
 8008670:	080086d9 	.word	0x080086d9
 8008674:	08008655 	.word	0x08008655
 8008678:	08008655 	.word	0x08008655
 800867c:	08008655 	.word	0x08008655
 8008680:	08008655 	.word	0x08008655
 8008684:	080086d9 	.word	0x080086d9
 8008688:	08008655 	.word	0x08008655
 800868c:	08008655 	.word	0x08008655
 8008690:	08008655 	.word	0x08008655
 8008694:	08008655 	.word	0x08008655
 8008698:	080087e5 	.word	0x080087e5
 800869c:	08008709 	.word	0x08008709
 80086a0:	080087c7 	.word	0x080087c7
 80086a4:	08008655 	.word	0x08008655
 80086a8:	08008655 	.word	0x08008655
 80086ac:	08008807 	.word	0x08008807
 80086b0:	08008655 	.word	0x08008655
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008655 	.word	0x08008655
 80086bc:	08008655 	.word	0x08008655
 80086c0:	080087cf 	.word	0x080087cf
 80086c4:	680b      	ldr	r3, [r1, #0]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	600a      	str	r2, [r1, #0]
 80086cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0a3      	b.n	8008820 <_printf_i+0x1f4>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	6808      	ldr	r0, [r1, #0]
 80086dc:	062e      	lsls	r6, r5, #24
 80086de:	f100 0304 	add.w	r3, r0, #4
 80086e2:	d50a      	bpl.n	80086fa <_printf_i+0xce>
 80086e4:	6805      	ldr	r5, [r0, #0]
 80086e6:	600b      	str	r3, [r1, #0]
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	da03      	bge.n	80086f4 <_printf_i+0xc8>
 80086ec:	232d      	movs	r3, #45	; 0x2d
 80086ee:	426d      	negs	r5, r5
 80086f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f4:	485e      	ldr	r0, [pc, #376]	; (8008870 <_printf_i+0x244>)
 80086f6:	230a      	movs	r3, #10
 80086f8:	e019      	b.n	800872e <_printf_i+0x102>
 80086fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086fe:	6805      	ldr	r5, [r0, #0]
 8008700:	600b      	str	r3, [r1, #0]
 8008702:	bf18      	it	ne
 8008704:	b22d      	sxthne	r5, r5
 8008706:	e7ef      	b.n	80086e8 <_printf_i+0xbc>
 8008708:	680b      	ldr	r3, [r1, #0]
 800870a:	6825      	ldr	r5, [r4, #0]
 800870c:	1d18      	adds	r0, r3, #4
 800870e:	6008      	str	r0, [r1, #0]
 8008710:	0628      	lsls	r0, r5, #24
 8008712:	d501      	bpl.n	8008718 <_printf_i+0xec>
 8008714:	681d      	ldr	r5, [r3, #0]
 8008716:	e002      	b.n	800871e <_printf_i+0xf2>
 8008718:	0669      	lsls	r1, r5, #25
 800871a:	d5fb      	bpl.n	8008714 <_printf_i+0xe8>
 800871c:	881d      	ldrh	r5, [r3, #0]
 800871e:	4854      	ldr	r0, [pc, #336]	; (8008870 <_printf_i+0x244>)
 8008720:	2f6f      	cmp	r7, #111	; 0x6f
 8008722:	bf0c      	ite	eq
 8008724:	2308      	moveq	r3, #8
 8008726:	230a      	movne	r3, #10
 8008728:	2100      	movs	r1, #0
 800872a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800872e:	6866      	ldr	r6, [r4, #4]
 8008730:	60a6      	str	r6, [r4, #8]
 8008732:	2e00      	cmp	r6, #0
 8008734:	bfa2      	ittt	ge
 8008736:	6821      	ldrge	r1, [r4, #0]
 8008738:	f021 0104 	bicge.w	r1, r1, #4
 800873c:	6021      	strge	r1, [r4, #0]
 800873e:	b90d      	cbnz	r5, 8008744 <_printf_i+0x118>
 8008740:	2e00      	cmp	r6, #0
 8008742:	d04d      	beq.n	80087e0 <_printf_i+0x1b4>
 8008744:	4616      	mov	r6, r2
 8008746:	fbb5 f1f3 	udiv	r1, r5, r3
 800874a:	fb03 5711 	mls	r7, r3, r1, r5
 800874e:	5dc7      	ldrb	r7, [r0, r7]
 8008750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008754:	462f      	mov	r7, r5
 8008756:	42bb      	cmp	r3, r7
 8008758:	460d      	mov	r5, r1
 800875a:	d9f4      	bls.n	8008746 <_printf_i+0x11a>
 800875c:	2b08      	cmp	r3, #8
 800875e:	d10b      	bne.n	8008778 <_printf_i+0x14c>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	07df      	lsls	r7, r3, #31
 8008764:	d508      	bpl.n	8008778 <_printf_i+0x14c>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	6861      	ldr	r1, [r4, #4]
 800876a:	4299      	cmp	r1, r3
 800876c:	bfde      	ittt	le
 800876e:	2330      	movle	r3, #48	; 0x30
 8008770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008778:	1b92      	subs	r2, r2, r6
 800877a:	6122      	str	r2, [r4, #16]
 800877c:	f8cd a000 	str.w	sl, [sp]
 8008780:	464b      	mov	r3, r9
 8008782:	aa03      	add	r2, sp, #12
 8008784:	4621      	mov	r1, r4
 8008786:	4640      	mov	r0, r8
 8008788:	f7ff fee2 	bl	8008550 <_printf_common>
 800878c:	3001      	adds	r0, #1
 800878e:	d14c      	bne.n	800882a <_printf_i+0x1fe>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b004      	add	sp, #16
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	4835      	ldr	r0, [pc, #212]	; (8008870 <_printf_i+0x244>)
 800879c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	680e      	ldr	r6, [r1, #0]
 80087a4:	061f      	lsls	r7, r3, #24
 80087a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80087aa:	600e      	str	r6, [r1, #0]
 80087ac:	d514      	bpl.n	80087d8 <_printf_i+0x1ac>
 80087ae:	07d9      	lsls	r1, r3, #31
 80087b0:	bf44      	itt	mi
 80087b2:	f043 0320 	orrmi.w	r3, r3, #32
 80087b6:	6023      	strmi	r3, [r4, #0]
 80087b8:	b91d      	cbnz	r5, 80087c2 <_printf_i+0x196>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	f023 0320 	bic.w	r3, r3, #32
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	2310      	movs	r3, #16
 80087c4:	e7b0      	b.n	8008728 <_printf_i+0xfc>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	f043 0320 	orr.w	r3, r3, #32
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	2378      	movs	r3, #120	; 0x78
 80087d0:	4828      	ldr	r0, [pc, #160]	; (8008874 <_printf_i+0x248>)
 80087d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087d6:	e7e3      	b.n	80087a0 <_printf_i+0x174>
 80087d8:	065e      	lsls	r6, r3, #25
 80087da:	bf48      	it	mi
 80087dc:	b2ad      	uxthmi	r5, r5
 80087de:	e7e6      	b.n	80087ae <_printf_i+0x182>
 80087e0:	4616      	mov	r6, r2
 80087e2:	e7bb      	b.n	800875c <_printf_i+0x130>
 80087e4:	680b      	ldr	r3, [r1, #0]
 80087e6:	6826      	ldr	r6, [r4, #0]
 80087e8:	6960      	ldr	r0, [r4, #20]
 80087ea:	1d1d      	adds	r5, r3, #4
 80087ec:	600d      	str	r5, [r1, #0]
 80087ee:	0635      	lsls	r5, r6, #24
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	d501      	bpl.n	80087f8 <_printf_i+0x1cc>
 80087f4:	6018      	str	r0, [r3, #0]
 80087f6:	e002      	b.n	80087fe <_printf_i+0x1d2>
 80087f8:	0671      	lsls	r1, r6, #25
 80087fa:	d5fb      	bpl.n	80087f4 <_printf_i+0x1c8>
 80087fc:	8018      	strh	r0, [r3, #0]
 80087fe:	2300      	movs	r3, #0
 8008800:	6123      	str	r3, [r4, #16]
 8008802:	4616      	mov	r6, r2
 8008804:	e7ba      	b.n	800877c <_printf_i+0x150>
 8008806:	680b      	ldr	r3, [r1, #0]
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	600a      	str	r2, [r1, #0]
 800880c:	681e      	ldr	r6, [r3, #0]
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	2100      	movs	r1, #0
 8008812:	4630      	mov	r0, r6
 8008814:	f7f7 fd04 	bl	8000220 <memchr>
 8008818:	b108      	cbz	r0, 800881e <_printf_i+0x1f2>
 800881a:	1b80      	subs	r0, r0, r6
 800881c:	6060      	str	r0, [r4, #4]
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	2300      	movs	r3, #0
 8008824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008828:	e7a8      	b.n	800877c <_printf_i+0x150>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	4632      	mov	r2, r6
 800882e:	4649      	mov	r1, r9
 8008830:	4640      	mov	r0, r8
 8008832:	47d0      	blx	sl
 8008834:	3001      	adds	r0, #1
 8008836:	d0ab      	beq.n	8008790 <_printf_i+0x164>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	079b      	lsls	r3, r3, #30
 800883c:	d413      	bmi.n	8008866 <_printf_i+0x23a>
 800883e:	68e0      	ldr	r0, [r4, #12]
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	4298      	cmp	r0, r3
 8008844:	bfb8      	it	lt
 8008846:	4618      	movlt	r0, r3
 8008848:	e7a4      	b.n	8008794 <_printf_i+0x168>
 800884a:	2301      	movs	r3, #1
 800884c:	4632      	mov	r2, r6
 800884e:	4649      	mov	r1, r9
 8008850:	4640      	mov	r0, r8
 8008852:	47d0      	blx	sl
 8008854:	3001      	adds	r0, #1
 8008856:	d09b      	beq.n	8008790 <_printf_i+0x164>
 8008858:	3501      	adds	r5, #1
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	9903      	ldr	r1, [sp, #12]
 800885e:	1a5b      	subs	r3, r3, r1
 8008860:	42ab      	cmp	r3, r5
 8008862:	dcf2      	bgt.n	800884a <_printf_i+0x21e>
 8008864:	e7eb      	b.n	800883e <_printf_i+0x212>
 8008866:	2500      	movs	r5, #0
 8008868:	f104 0619 	add.w	r6, r4, #25
 800886c:	e7f5      	b.n	800885a <_printf_i+0x22e>
 800886e:	bf00      	nop
 8008870:	0800d412 	.word	0x0800d412
 8008874:	0800d423 	.word	0x0800d423

08008878 <iprintf>:
 8008878:	b40f      	push	{r0, r1, r2, r3}
 800887a:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <iprintf+0x2c>)
 800887c:	b513      	push	{r0, r1, r4, lr}
 800887e:	681c      	ldr	r4, [r3, #0]
 8008880:	b124      	cbz	r4, 800888c <iprintf+0x14>
 8008882:	69a3      	ldr	r3, [r4, #24]
 8008884:	b913      	cbnz	r3, 800888c <iprintf+0x14>
 8008886:	4620      	mov	r0, r4
 8008888:	f001 f9ac 	bl	8009be4 <__sinit>
 800888c:	ab05      	add	r3, sp, #20
 800888e:	9a04      	ldr	r2, [sp, #16]
 8008890:	68a1      	ldr	r1, [r4, #8]
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	4620      	mov	r0, r4
 8008896:	f001 ff27 	bl	800a6e8 <_vfiprintf_r>
 800889a:	b002      	add	sp, #8
 800889c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a0:	b004      	add	sp, #16
 80088a2:	4770      	bx	lr
 80088a4:	200000d4 	.word	0x200000d4

080088a8 <_puts_r>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	460e      	mov	r6, r1
 80088ac:	4605      	mov	r5, r0
 80088ae:	b118      	cbz	r0, 80088b8 <_puts_r+0x10>
 80088b0:	6983      	ldr	r3, [r0, #24]
 80088b2:	b90b      	cbnz	r3, 80088b8 <_puts_r+0x10>
 80088b4:	f001 f996 	bl	8009be4 <__sinit>
 80088b8:	69ab      	ldr	r3, [r5, #24]
 80088ba:	68ac      	ldr	r4, [r5, #8]
 80088bc:	b913      	cbnz	r3, 80088c4 <_puts_r+0x1c>
 80088be:	4628      	mov	r0, r5
 80088c0:	f001 f990 	bl	8009be4 <__sinit>
 80088c4:	4b2c      	ldr	r3, [pc, #176]	; (8008978 <_puts_r+0xd0>)
 80088c6:	429c      	cmp	r4, r3
 80088c8:	d120      	bne.n	800890c <_puts_r+0x64>
 80088ca:	686c      	ldr	r4, [r5, #4]
 80088cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d405      	bmi.n	80088de <_puts_r+0x36>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	0598      	lsls	r0, r3, #22
 80088d6:	d402      	bmi.n	80088de <_puts_r+0x36>
 80088d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088da:	f001 fa26 	bl	8009d2a <__retarget_lock_acquire_recursive>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	0719      	lsls	r1, r3, #28
 80088e2:	d51d      	bpl.n	8008920 <_puts_r+0x78>
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	b1db      	cbz	r3, 8008920 <_puts_r+0x78>
 80088e8:	3e01      	subs	r6, #1
 80088ea:	68a3      	ldr	r3, [r4, #8]
 80088ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088f0:	3b01      	subs	r3, #1
 80088f2:	60a3      	str	r3, [r4, #8]
 80088f4:	bb39      	cbnz	r1, 8008946 <_puts_r+0x9e>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da38      	bge.n	800896c <_puts_r+0xc4>
 80088fa:	4622      	mov	r2, r4
 80088fc:	210a      	movs	r1, #10
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f91e 	bl	8008b40 <__swbuf_r>
 8008904:	3001      	adds	r0, #1
 8008906:	d011      	beq.n	800892c <_puts_r+0x84>
 8008908:	250a      	movs	r5, #10
 800890a:	e011      	b.n	8008930 <_puts_r+0x88>
 800890c:	4b1b      	ldr	r3, [pc, #108]	; (800897c <_puts_r+0xd4>)
 800890e:	429c      	cmp	r4, r3
 8008910:	d101      	bne.n	8008916 <_puts_r+0x6e>
 8008912:	68ac      	ldr	r4, [r5, #8]
 8008914:	e7da      	b.n	80088cc <_puts_r+0x24>
 8008916:	4b1a      	ldr	r3, [pc, #104]	; (8008980 <_puts_r+0xd8>)
 8008918:	429c      	cmp	r4, r3
 800891a:	bf08      	it	eq
 800891c:	68ec      	ldreq	r4, [r5, #12]
 800891e:	e7d5      	b.n	80088cc <_puts_r+0x24>
 8008920:	4621      	mov	r1, r4
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f95e 	bl	8008be4 <__swsetup_r>
 8008928:	2800      	cmp	r0, #0
 800892a:	d0dd      	beq.n	80088e8 <_puts_r+0x40>
 800892c:	f04f 35ff 	mov.w	r5, #4294967295
 8008930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008932:	07da      	lsls	r2, r3, #31
 8008934:	d405      	bmi.n	8008942 <_puts_r+0x9a>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	059b      	lsls	r3, r3, #22
 800893a:	d402      	bmi.n	8008942 <_puts_r+0x9a>
 800893c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893e:	f001 f9f5 	bl	8009d2c <__retarget_lock_release_recursive>
 8008942:	4628      	mov	r0, r5
 8008944:	bd70      	pop	{r4, r5, r6, pc}
 8008946:	2b00      	cmp	r3, #0
 8008948:	da04      	bge.n	8008954 <_puts_r+0xac>
 800894a:	69a2      	ldr	r2, [r4, #24]
 800894c:	429a      	cmp	r2, r3
 800894e:	dc06      	bgt.n	800895e <_puts_r+0xb6>
 8008950:	290a      	cmp	r1, #10
 8008952:	d004      	beq.n	800895e <_puts_r+0xb6>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	6022      	str	r2, [r4, #0]
 800895a:	7019      	strb	r1, [r3, #0]
 800895c:	e7c5      	b.n	80088ea <_puts_r+0x42>
 800895e:	4622      	mov	r2, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f8ed 	bl	8008b40 <__swbuf_r>
 8008966:	3001      	adds	r0, #1
 8008968:	d1bf      	bne.n	80088ea <_puts_r+0x42>
 800896a:	e7df      	b.n	800892c <_puts_r+0x84>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	250a      	movs	r5, #10
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	6022      	str	r2, [r4, #0]
 8008974:	701d      	strb	r5, [r3, #0]
 8008976:	e7db      	b.n	8008930 <_puts_r+0x88>
 8008978:	0800d5ec 	.word	0x0800d5ec
 800897c:	0800d60c 	.word	0x0800d60c
 8008980:	0800d5cc 	.word	0x0800d5cc

08008984 <puts>:
 8008984:	4b02      	ldr	r3, [pc, #8]	; (8008990 <puts+0xc>)
 8008986:	4601      	mov	r1, r0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f7ff bf8d 	b.w	80088a8 <_puts_r>
 800898e:	bf00      	nop
 8008990:	200000d4 	.word	0x200000d4

08008994 <setvbuf>:
 8008994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008998:	461d      	mov	r5, r3
 800899a:	4b5d      	ldr	r3, [pc, #372]	; (8008b10 <setvbuf+0x17c>)
 800899c:	681f      	ldr	r7, [r3, #0]
 800899e:	4604      	mov	r4, r0
 80089a0:	460e      	mov	r6, r1
 80089a2:	4690      	mov	r8, r2
 80089a4:	b127      	cbz	r7, 80089b0 <setvbuf+0x1c>
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	b913      	cbnz	r3, 80089b0 <setvbuf+0x1c>
 80089aa:	4638      	mov	r0, r7
 80089ac:	f001 f91a 	bl	8009be4 <__sinit>
 80089b0:	4b58      	ldr	r3, [pc, #352]	; (8008b14 <setvbuf+0x180>)
 80089b2:	429c      	cmp	r4, r3
 80089b4:	d167      	bne.n	8008a86 <setvbuf+0xf2>
 80089b6:	687c      	ldr	r4, [r7, #4]
 80089b8:	f1b8 0f02 	cmp.w	r8, #2
 80089bc:	d006      	beq.n	80089cc <setvbuf+0x38>
 80089be:	f1b8 0f01 	cmp.w	r8, #1
 80089c2:	f200 809f 	bhi.w	8008b04 <setvbuf+0x170>
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	f2c0 809c 	blt.w	8008b04 <setvbuf+0x170>
 80089cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ce:	07db      	lsls	r3, r3, #31
 80089d0:	d405      	bmi.n	80089de <setvbuf+0x4a>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	0598      	lsls	r0, r3, #22
 80089d6:	d402      	bmi.n	80089de <setvbuf+0x4a>
 80089d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089da:	f001 f9a6 	bl	8009d2a <__retarget_lock_acquire_recursive>
 80089de:	4621      	mov	r1, r4
 80089e0:	4638      	mov	r0, r7
 80089e2:	f001 f86b 	bl	8009abc <_fflush_r>
 80089e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089e8:	b141      	cbz	r1, 80089fc <setvbuf+0x68>
 80089ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ee:	4299      	cmp	r1, r3
 80089f0:	d002      	beq.n	80089f8 <setvbuf+0x64>
 80089f2:	4638      	mov	r0, r7
 80089f4:	f001 fda4 	bl	800a540 <_free_r>
 80089f8:	2300      	movs	r3, #0
 80089fa:	6363      	str	r3, [r4, #52]	; 0x34
 80089fc:	2300      	movs	r3, #0
 80089fe:	61a3      	str	r3, [r4, #24]
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	0619      	lsls	r1, r3, #24
 8008a06:	d503      	bpl.n	8008a10 <setvbuf+0x7c>
 8008a08:	6921      	ldr	r1, [r4, #16]
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	f001 fd98 	bl	800a540 <_free_r>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	f1b8 0f02 	cmp.w	r8, #2
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	d06c      	beq.n	8008afc <setvbuf+0x168>
 8008a22:	ab01      	add	r3, sp, #4
 8008a24:	466a      	mov	r2, sp
 8008a26:	4621      	mov	r1, r4
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f001 f980 	bl	8009d2e <__swhatbuf_r>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	4318      	orrs	r0, r3
 8008a32:	81a0      	strh	r0, [r4, #12]
 8008a34:	2d00      	cmp	r5, #0
 8008a36:	d130      	bne.n	8008a9a <setvbuf+0x106>
 8008a38:	9d00      	ldr	r5, [sp, #0]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f001 f9dc 	bl	8009df8 <malloc>
 8008a40:	4606      	mov	r6, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d155      	bne.n	8008af2 <setvbuf+0x15e>
 8008a46:	f8dd 9000 	ldr.w	r9, [sp]
 8008a4a:	45a9      	cmp	r9, r5
 8008a4c:	d14a      	bne.n	8008ae4 <setvbuf+0x150>
 8008a4e:	f04f 35ff 	mov.w	r5, #4294967295
 8008a52:	2200      	movs	r2, #0
 8008a54:	60a2      	str	r2, [r4, #8]
 8008a56:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	6122      	str	r2, [r4, #16]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a64:	6162      	str	r2, [r4, #20]
 8008a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a68:	f043 0302 	orr.w	r3, r3, #2
 8008a6c:	07d2      	lsls	r2, r2, #31
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	d405      	bmi.n	8008a7e <setvbuf+0xea>
 8008a72:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008a76:	d102      	bne.n	8008a7e <setvbuf+0xea>
 8008a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a7a:	f001 f957 	bl	8009d2c <__retarget_lock_release_recursive>
 8008a7e:	4628      	mov	r0, r5
 8008a80:	b003      	add	sp, #12
 8008a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a86:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <setvbuf+0x184>)
 8008a88:	429c      	cmp	r4, r3
 8008a8a:	d101      	bne.n	8008a90 <setvbuf+0xfc>
 8008a8c:	68bc      	ldr	r4, [r7, #8]
 8008a8e:	e793      	b.n	80089b8 <setvbuf+0x24>
 8008a90:	4b22      	ldr	r3, [pc, #136]	; (8008b1c <setvbuf+0x188>)
 8008a92:	429c      	cmp	r4, r3
 8008a94:	bf08      	it	eq
 8008a96:	68fc      	ldreq	r4, [r7, #12]
 8008a98:	e78e      	b.n	80089b8 <setvbuf+0x24>
 8008a9a:	2e00      	cmp	r6, #0
 8008a9c:	d0cd      	beq.n	8008a3a <setvbuf+0xa6>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	b913      	cbnz	r3, 8008aa8 <setvbuf+0x114>
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f001 f89e 	bl	8009be4 <__sinit>
 8008aa8:	f1b8 0f01 	cmp.w	r8, #1
 8008aac:	bf08      	it	eq
 8008aae:	89a3      	ldrheq	r3, [r4, #12]
 8008ab0:	6026      	str	r6, [r4, #0]
 8008ab2:	bf04      	itt	eq
 8008ab4:	f043 0301 	orreq.w	r3, r3, #1
 8008ab8:	81a3      	strheq	r3, [r4, #12]
 8008aba:	89a2      	ldrh	r2, [r4, #12]
 8008abc:	f012 0308 	ands.w	r3, r2, #8
 8008ac0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008ac4:	d01c      	beq.n	8008b00 <setvbuf+0x16c>
 8008ac6:	07d3      	lsls	r3, r2, #31
 8008ac8:	bf41      	itttt	mi
 8008aca:	2300      	movmi	r3, #0
 8008acc:	426d      	negmi	r5, r5
 8008ace:	60a3      	strmi	r3, [r4, #8]
 8008ad0:	61a5      	strmi	r5, [r4, #24]
 8008ad2:	bf58      	it	pl
 8008ad4:	60a5      	strpl	r5, [r4, #8]
 8008ad6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008ad8:	f015 0501 	ands.w	r5, r5, #1
 8008adc:	d115      	bne.n	8008b0a <setvbuf+0x176>
 8008ade:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008ae2:	e7c8      	b.n	8008a76 <setvbuf+0xe2>
 8008ae4:	4648      	mov	r0, r9
 8008ae6:	f001 f987 	bl	8009df8 <malloc>
 8008aea:	4606      	mov	r6, r0
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d0ae      	beq.n	8008a4e <setvbuf+0xba>
 8008af0:	464d      	mov	r5, r9
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	e7d0      	b.n	8008a9e <setvbuf+0x10a>
 8008afc:	2500      	movs	r5, #0
 8008afe:	e7a8      	b.n	8008a52 <setvbuf+0xbe>
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	e7e8      	b.n	8008ad6 <setvbuf+0x142>
 8008b04:	f04f 35ff 	mov.w	r5, #4294967295
 8008b08:	e7b9      	b.n	8008a7e <setvbuf+0xea>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	e7b7      	b.n	8008a7e <setvbuf+0xea>
 8008b0e:	bf00      	nop
 8008b10:	200000d4 	.word	0x200000d4
 8008b14:	0800d5ec 	.word	0x0800d5ec
 8008b18:	0800d60c 	.word	0x0800d60c
 8008b1c:	0800d5cc 	.word	0x0800d5cc

08008b20 <strcat>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	4602      	mov	r2, r0
 8008b24:	7814      	ldrb	r4, [r2, #0]
 8008b26:	4613      	mov	r3, r2
 8008b28:	3201      	adds	r2, #1
 8008b2a:	2c00      	cmp	r4, #0
 8008b2c:	d1fa      	bne.n	8008b24 <strcat+0x4>
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d1f9      	bne.n	8008b30 <strcat+0x10>
 8008b3c:	bd10      	pop	{r4, pc}
	...

08008b40 <__swbuf_r>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	460e      	mov	r6, r1
 8008b44:	4614      	mov	r4, r2
 8008b46:	4605      	mov	r5, r0
 8008b48:	b118      	cbz	r0, 8008b52 <__swbuf_r+0x12>
 8008b4a:	6983      	ldr	r3, [r0, #24]
 8008b4c:	b90b      	cbnz	r3, 8008b52 <__swbuf_r+0x12>
 8008b4e:	f001 f849 	bl	8009be4 <__sinit>
 8008b52:	4b21      	ldr	r3, [pc, #132]	; (8008bd8 <__swbuf_r+0x98>)
 8008b54:	429c      	cmp	r4, r3
 8008b56:	d12b      	bne.n	8008bb0 <__swbuf_r+0x70>
 8008b58:	686c      	ldr	r4, [r5, #4]
 8008b5a:	69a3      	ldr	r3, [r4, #24]
 8008b5c:	60a3      	str	r3, [r4, #8]
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	071a      	lsls	r2, r3, #28
 8008b62:	d52f      	bpl.n	8008bc4 <__swbuf_r+0x84>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	b36b      	cbz	r3, 8008bc4 <__swbuf_r+0x84>
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	6820      	ldr	r0, [r4, #0]
 8008b6c:	1ac0      	subs	r0, r0, r3
 8008b6e:	6963      	ldr	r3, [r4, #20]
 8008b70:	b2f6      	uxtb	r6, r6
 8008b72:	4283      	cmp	r3, r0
 8008b74:	4637      	mov	r7, r6
 8008b76:	dc04      	bgt.n	8008b82 <__swbuf_r+0x42>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 ff9e 	bl	8009abc <_fflush_r>
 8008b80:	bb30      	cbnz	r0, 8008bd0 <__swbuf_r+0x90>
 8008b82:	68a3      	ldr	r3, [r4, #8]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	6022      	str	r2, [r4, #0]
 8008b8e:	701e      	strb	r6, [r3, #0]
 8008b90:	6963      	ldr	r3, [r4, #20]
 8008b92:	3001      	adds	r0, #1
 8008b94:	4283      	cmp	r3, r0
 8008b96:	d004      	beq.n	8008ba2 <__swbuf_r+0x62>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	07db      	lsls	r3, r3, #31
 8008b9c:	d506      	bpl.n	8008bac <__swbuf_r+0x6c>
 8008b9e:	2e0a      	cmp	r6, #10
 8008ba0:	d104      	bne.n	8008bac <__swbuf_r+0x6c>
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f000 ff89 	bl	8009abc <_fflush_r>
 8008baa:	b988      	cbnz	r0, 8008bd0 <__swbuf_r+0x90>
 8008bac:	4638      	mov	r0, r7
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <__swbuf_r+0x9c>)
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	d101      	bne.n	8008bba <__swbuf_r+0x7a>
 8008bb6:	68ac      	ldr	r4, [r5, #8]
 8008bb8:	e7cf      	b.n	8008b5a <__swbuf_r+0x1a>
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <__swbuf_r+0xa0>)
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	bf08      	it	eq
 8008bc0:	68ec      	ldreq	r4, [r5, #12]
 8008bc2:	e7ca      	b.n	8008b5a <__swbuf_r+0x1a>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 f80c 	bl	8008be4 <__swsetup_r>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d0cb      	beq.n	8008b68 <__swbuf_r+0x28>
 8008bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8008bd4:	e7ea      	b.n	8008bac <__swbuf_r+0x6c>
 8008bd6:	bf00      	nop
 8008bd8:	0800d5ec 	.word	0x0800d5ec
 8008bdc:	0800d60c 	.word	0x0800d60c
 8008be0:	0800d5cc 	.word	0x0800d5cc

08008be4 <__swsetup_r>:
 8008be4:	4b32      	ldr	r3, [pc, #200]	; (8008cb0 <__swsetup_r+0xcc>)
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	681d      	ldr	r5, [r3, #0]
 8008bea:	4606      	mov	r6, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	b125      	cbz	r5, 8008bfa <__swsetup_r+0x16>
 8008bf0:	69ab      	ldr	r3, [r5, #24]
 8008bf2:	b913      	cbnz	r3, 8008bfa <__swsetup_r+0x16>
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f000 fff5 	bl	8009be4 <__sinit>
 8008bfa:	4b2e      	ldr	r3, [pc, #184]	; (8008cb4 <__swsetup_r+0xd0>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d10f      	bne.n	8008c20 <__swsetup_r+0x3c>
 8008c00:	686c      	ldr	r4, [r5, #4]
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c08:	0719      	lsls	r1, r3, #28
 8008c0a:	d42c      	bmi.n	8008c66 <__swsetup_r+0x82>
 8008c0c:	06dd      	lsls	r5, r3, #27
 8008c0e:	d411      	bmi.n	8008c34 <__swsetup_r+0x50>
 8008c10:	2309      	movs	r3, #9
 8008c12:	6033      	str	r3, [r6, #0]
 8008c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1e:	e03e      	b.n	8008c9e <__swsetup_r+0xba>
 8008c20:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <__swsetup_r+0xd4>)
 8008c22:	429c      	cmp	r4, r3
 8008c24:	d101      	bne.n	8008c2a <__swsetup_r+0x46>
 8008c26:	68ac      	ldr	r4, [r5, #8]
 8008c28:	e7eb      	b.n	8008c02 <__swsetup_r+0x1e>
 8008c2a:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <__swsetup_r+0xd8>)
 8008c2c:	429c      	cmp	r4, r3
 8008c2e:	bf08      	it	eq
 8008c30:	68ec      	ldreq	r4, [r5, #12]
 8008c32:	e7e6      	b.n	8008c02 <__swsetup_r+0x1e>
 8008c34:	0758      	lsls	r0, r3, #29
 8008c36:	d512      	bpl.n	8008c5e <__swsetup_r+0x7a>
 8008c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3a:	b141      	cbz	r1, 8008c4e <__swsetup_r+0x6a>
 8008c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d002      	beq.n	8008c4a <__swsetup_r+0x66>
 8008c44:	4630      	mov	r0, r6
 8008c46:	f001 fc7b 	bl	800a540 <_free_r>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c4e:	89a3      	ldrh	r3, [r4, #12]
 8008c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f043 0308 	orr.w	r3, r3, #8
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	6923      	ldr	r3, [r4, #16]
 8008c68:	b94b      	cbnz	r3, 8008c7e <__swsetup_r+0x9a>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c74:	d003      	beq.n	8008c7e <__swsetup_r+0x9a>
 8008c76:	4621      	mov	r1, r4
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f001 f87d 	bl	8009d78 <__smakebuf_r>
 8008c7e:	89a0      	ldrh	r0, [r4, #12]
 8008c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c84:	f010 0301 	ands.w	r3, r0, #1
 8008c88:	d00a      	beq.n	8008ca0 <__swsetup_r+0xbc>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	6963      	ldr	r3, [r4, #20]
 8008c90:	425b      	negs	r3, r3
 8008c92:	61a3      	str	r3, [r4, #24]
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	b943      	cbnz	r3, 8008caa <__swsetup_r+0xc6>
 8008c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c9c:	d1ba      	bne.n	8008c14 <__swsetup_r+0x30>
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	0781      	lsls	r1, r0, #30
 8008ca2:	bf58      	it	pl
 8008ca4:	6963      	ldrpl	r3, [r4, #20]
 8008ca6:	60a3      	str	r3, [r4, #8]
 8008ca8:	e7f4      	b.n	8008c94 <__swsetup_r+0xb0>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e7f7      	b.n	8008c9e <__swsetup_r+0xba>
 8008cae:	bf00      	nop
 8008cb0:	200000d4 	.word	0x200000d4
 8008cb4:	0800d5ec 	.word	0x0800d5ec
 8008cb8:	0800d60c 	.word	0x0800d60c
 8008cbc:	0800d5cc 	.word	0x0800d5cc

08008cc0 <quorem>:
 8008cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	6903      	ldr	r3, [r0, #16]
 8008cc6:	690c      	ldr	r4, [r1, #16]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	4607      	mov	r7, r0
 8008ccc:	f2c0 8081 	blt.w	8008dd2 <quorem+0x112>
 8008cd0:	3c01      	subs	r4, #1
 8008cd2:	f101 0814 	add.w	r8, r1, #20
 8008cd6:	f100 0514 	add.w	r5, r0, #20
 8008cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	429a      	cmp	r2, r3
 8008cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cf8:	d331      	bcc.n	8008d5e <quorem+0x9e>
 8008cfa:	f04f 0e00 	mov.w	lr, #0
 8008cfe:	4640      	mov	r0, r8
 8008d00:	46ac      	mov	ip, r5
 8008d02:	46f2      	mov	sl, lr
 8008d04:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d08:	b293      	uxth	r3, r2
 8008d0a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	ebaa 0303 	sub.w	r3, sl, r3
 8008d18:	0c12      	lsrs	r2, r2, #16
 8008d1a:	f8dc a000 	ldr.w	sl, [ip]
 8008d1e:	fb06 e202 	mla	r2, r6, r2, lr
 8008d22:	fa13 f38a 	uxtah	r3, r3, sl
 8008d26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d2a:	fa1f fa82 	uxth.w	sl, r2
 8008d2e:	f8dc 2000 	ldr.w	r2, [ip]
 8008d32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008d36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d40:	4581      	cmp	r9, r0
 8008d42:	f84c 3b04 	str.w	r3, [ip], #4
 8008d46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d4a:	d2db      	bcs.n	8008d04 <quorem+0x44>
 8008d4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d50:	b92b      	cbnz	r3, 8008d5e <quorem+0x9e>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	429d      	cmp	r5, r3
 8008d58:	461a      	mov	r2, r3
 8008d5a:	d32e      	bcc.n	8008dba <quorem+0xfa>
 8008d5c:	613c      	str	r4, [r7, #16]
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f001 fade 	bl	800a320 <__mcmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	db24      	blt.n	8008db2 <quorem+0xf2>
 8008d68:	3601      	adds	r6, #1
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f04f 0c00 	mov.w	ip, #0
 8008d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d74:	f8d0 e000 	ldr.w	lr, [r0]
 8008d78:	b293      	uxth	r3, r2
 8008d7a:	ebac 0303 	sub.w	r3, ip, r3
 8008d7e:	0c12      	lsrs	r2, r2, #16
 8008d80:	fa13 f38e 	uxtah	r3, r3, lr
 8008d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d92:	45c1      	cmp	r9, r8
 8008d94:	f840 3b04 	str.w	r3, [r0], #4
 8008d98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d9c:	d2e8      	bcs.n	8008d70 <quorem+0xb0>
 8008d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008da6:	b922      	cbnz	r2, 8008db2 <quorem+0xf2>
 8008da8:	3b04      	subs	r3, #4
 8008daa:	429d      	cmp	r5, r3
 8008dac:	461a      	mov	r2, r3
 8008dae:	d30a      	bcc.n	8008dc6 <quorem+0x106>
 8008db0:	613c      	str	r4, [r7, #16]
 8008db2:	4630      	mov	r0, r6
 8008db4:	b003      	add	sp, #12
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d1cc      	bne.n	8008d5c <quorem+0x9c>
 8008dc2:	3c01      	subs	r4, #1
 8008dc4:	e7c7      	b.n	8008d56 <quorem+0x96>
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	d1f0      	bne.n	8008db0 <quorem+0xf0>
 8008dce:	3c01      	subs	r4, #1
 8008dd0:	e7eb      	b.n	8008daa <quorem+0xea>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e7ee      	b.n	8008db4 <quorem+0xf4>
	...

08008dd8 <_dtoa_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b02 	vpush	{d8}
 8008de0:	ec57 6b10 	vmov	r6, r7, d0
 8008de4:	b095      	sub	sp, #84	; 0x54
 8008de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dec:	9105      	str	r1, [sp, #20]
 8008dee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008df2:	4604      	mov	r4, r0
 8008df4:	9209      	str	r2, [sp, #36]	; 0x24
 8008df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008df8:	b975      	cbnz	r5, 8008e18 <_dtoa_r+0x40>
 8008dfa:	2010      	movs	r0, #16
 8008dfc:	f000 fffc 	bl	8009df8 <malloc>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6260      	str	r0, [r4, #36]	; 0x24
 8008e04:	b920      	cbnz	r0, 8008e10 <_dtoa_r+0x38>
 8008e06:	4bb2      	ldr	r3, [pc, #712]	; (80090d0 <_dtoa_r+0x2f8>)
 8008e08:	21ea      	movs	r1, #234	; 0xea
 8008e0a:	48b2      	ldr	r0, [pc, #712]	; (80090d4 <_dtoa_r+0x2fc>)
 8008e0c:	f001 fe02 	bl	800aa14 <__assert_func>
 8008e10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e14:	6005      	str	r5, [r0, #0]
 8008e16:	60c5      	str	r5, [r0, #12]
 8008e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e1a:	6819      	ldr	r1, [r3, #0]
 8008e1c:	b151      	cbz	r1, 8008e34 <_dtoa_r+0x5c>
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	604a      	str	r2, [r1, #4]
 8008e22:	2301      	movs	r3, #1
 8008e24:	4093      	lsls	r3, r2
 8008e26:	608b      	str	r3, [r1, #8]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f001 f83b 	bl	8009ea4 <_Bfree>
 8008e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	1e3b      	subs	r3, r7, #0
 8008e36:	bfb9      	ittee	lt
 8008e38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e3c:	9303      	strlt	r3, [sp, #12]
 8008e3e:	2300      	movge	r3, #0
 8008e40:	f8c8 3000 	strge.w	r3, [r8]
 8008e44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008e48:	4ba3      	ldr	r3, [pc, #652]	; (80090d8 <_dtoa_r+0x300>)
 8008e4a:	bfbc      	itt	lt
 8008e4c:	2201      	movlt	r2, #1
 8008e4e:	f8c8 2000 	strlt.w	r2, [r8]
 8008e52:	ea33 0309 	bics.w	r3, r3, r9
 8008e56:	d11b      	bne.n	8008e90 <_dtoa_r+0xb8>
 8008e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e64:	4333      	orrs	r3, r6
 8008e66:	f000 857a 	beq.w	800995e <_dtoa_r+0xb86>
 8008e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e6c:	b963      	cbnz	r3, 8008e88 <_dtoa_r+0xb0>
 8008e6e:	4b9b      	ldr	r3, [pc, #620]	; (80090dc <_dtoa_r+0x304>)
 8008e70:	e024      	b.n	8008ebc <_dtoa_r+0xe4>
 8008e72:	4b9b      	ldr	r3, [pc, #620]	; (80090e0 <_dtoa_r+0x308>)
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	3308      	adds	r3, #8
 8008e78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	9800      	ldr	r0, [sp, #0]
 8008e7e:	b015      	add	sp, #84	; 0x54
 8008e80:	ecbd 8b02 	vpop	{d8}
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	4b94      	ldr	r3, [pc, #592]	; (80090dc <_dtoa_r+0x304>)
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	3303      	adds	r3, #3
 8008e8e:	e7f3      	b.n	8008e78 <_dtoa_r+0xa0>
 8008e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e94:	2200      	movs	r2, #0
 8008e96:	ec51 0b17 	vmov	r0, r1, d7
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008ea0:	f7f7 fe32 	bl	8000b08 <__aeabi_dcmpeq>
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	b158      	cbz	r0, 8008ec0 <_dtoa_r+0xe8>
 8008ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008eaa:	2301      	movs	r3, #1
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 8551 	beq.w	8009958 <_dtoa_r+0xb80>
 8008eb6:	488b      	ldr	r0, [pc, #556]	; (80090e4 <_dtoa_r+0x30c>)
 8008eb8:	6018      	str	r0, [r3, #0]
 8008eba:	1e43      	subs	r3, r0, #1
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	e7dd      	b.n	8008e7c <_dtoa_r+0xa4>
 8008ec0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ec4:	aa12      	add	r2, sp, #72	; 0x48
 8008ec6:	a913      	add	r1, sp, #76	; 0x4c
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f001 facd 	bl	800a468 <__d2b>
 8008ece:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ed2:	4683      	mov	fp, r0
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	d07c      	beq.n	8008fd2 <_dtoa_r+0x1fa>
 8008ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ee6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008eea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008eee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ef2:	4b7d      	ldr	r3, [pc, #500]	; (80090e8 <_dtoa_r+0x310>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	4639      	mov	r1, r7
 8008efa:	f7f7 f9e5 	bl	80002c8 <__aeabi_dsub>
 8008efe:	a36e      	add	r3, pc, #440	; (adr r3, 80090b8 <_dtoa_r+0x2e0>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 fb98 	bl	8000638 <__aeabi_dmul>
 8008f08:	a36d      	add	r3, pc, #436	; (adr r3, 80090c0 <_dtoa_r+0x2e8>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 f9dd 	bl	80002cc <__adddf3>
 8008f12:	4606      	mov	r6, r0
 8008f14:	4628      	mov	r0, r5
 8008f16:	460f      	mov	r7, r1
 8008f18:	f7f7 fb24 	bl	8000564 <__aeabi_i2d>
 8008f1c:	a36a      	add	r3, pc, #424	; (adr r3, 80090c8 <_dtoa_r+0x2f0>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 fb89 	bl	8000638 <__aeabi_dmul>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 f9cd 	bl	80002cc <__adddf3>
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	f7f7 fe2f 	bl	8000b98 <__aeabi_d2iz>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4682      	mov	sl, r0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4630      	mov	r0, r6
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 fdea 	bl	8000b1c <__aeabi_dcmplt>
 8008f48:	b148      	cbz	r0, 8008f5e <_dtoa_r+0x186>
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	f7f7 fb0a 	bl	8000564 <__aeabi_i2d>
 8008f50:	4632      	mov	r2, r6
 8008f52:	463b      	mov	r3, r7
 8008f54:	f7f7 fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8008f58:	b908      	cbnz	r0, 8008f5e <_dtoa_r+0x186>
 8008f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f5e:	f1ba 0f16 	cmp.w	sl, #22
 8008f62:	d854      	bhi.n	800900e <_dtoa_r+0x236>
 8008f64:	4b61      	ldr	r3, [pc, #388]	; (80090ec <_dtoa_r+0x314>)
 8008f66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f72:	f7f7 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d04b      	beq.n	8009012 <_dtoa_r+0x23a>
 8008f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f7e:	2300      	movs	r3, #0
 8008f80:	930e      	str	r3, [sp, #56]	; 0x38
 8008f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f84:	1b5d      	subs	r5, r3, r5
 8008f86:	1e6b      	subs	r3, r5, #1
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	bf43      	ittte	mi
 8008f8c:	2300      	movmi	r3, #0
 8008f8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008f92:	9304      	strmi	r3, [sp, #16]
 8008f94:	f04f 0800 	movpl.w	r8, #0
 8008f98:	f1ba 0f00 	cmp.w	sl, #0
 8008f9c:	db3b      	blt.n	8009016 <_dtoa_r+0x23e>
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008fa4:	4453      	add	r3, sl
 8008fa6:	9304      	str	r3, [sp, #16]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9306      	str	r3, [sp, #24]
 8008fac:	9b05      	ldr	r3, [sp, #20]
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	d869      	bhi.n	8009086 <_dtoa_r+0x2ae>
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	bfc4      	itt	gt
 8008fb6:	3b04      	subgt	r3, #4
 8008fb8:	9305      	strgt	r3, [sp, #20]
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8008fc0:	bfcc      	ite	gt
 8008fc2:	2500      	movgt	r5, #0
 8008fc4:	2501      	movle	r5, #1
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d869      	bhi.n	800909e <_dtoa_r+0x2c6>
 8008fca:	e8df f003 	tbb	[pc, r3]
 8008fce:	4e2c      	.short	0x4e2c
 8008fd0:	5a4c      	.short	0x5a4c
 8008fd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008fd6:	441d      	add	r5, r3
 8008fd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	bfc1      	itttt	gt
 8008fe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fe4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fe8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008fec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ff0:	bfda      	itte	le
 8008ff2:	f1c3 0320 	rsble	r3, r3, #32
 8008ff6:	fa06 f003 	lslle.w	r0, r6, r3
 8008ffa:	4318      	orrgt	r0, r3
 8008ffc:	f7f7 faa2 	bl	8000544 <__aeabi_ui2d>
 8009000:	2301      	movs	r3, #1
 8009002:	4606      	mov	r6, r0
 8009004:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009008:	3d01      	subs	r5, #1
 800900a:	9310      	str	r3, [sp, #64]	; 0x40
 800900c:	e771      	b.n	8008ef2 <_dtoa_r+0x11a>
 800900e:	2301      	movs	r3, #1
 8009010:	e7b6      	b.n	8008f80 <_dtoa_r+0x1a8>
 8009012:	900e      	str	r0, [sp, #56]	; 0x38
 8009014:	e7b5      	b.n	8008f82 <_dtoa_r+0x1aa>
 8009016:	f1ca 0300 	rsb	r3, sl, #0
 800901a:	9306      	str	r3, [sp, #24]
 800901c:	2300      	movs	r3, #0
 800901e:	eba8 080a 	sub.w	r8, r8, sl
 8009022:	930d      	str	r3, [sp, #52]	; 0x34
 8009024:	e7c2      	b.n	8008fac <_dtoa_r+0x1d4>
 8009026:	2300      	movs	r3, #0
 8009028:	9308      	str	r3, [sp, #32]
 800902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	dc39      	bgt.n	80090a4 <_dtoa_r+0x2cc>
 8009030:	f04f 0901 	mov.w	r9, #1
 8009034:	f8cd 9004 	str.w	r9, [sp, #4]
 8009038:	464b      	mov	r3, r9
 800903a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800903e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009040:	2200      	movs	r2, #0
 8009042:	6042      	str	r2, [r0, #4]
 8009044:	2204      	movs	r2, #4
 8009046:	f102 0614 	add.w	r6, r2, #20
 800904a:	429e      	cmp	r6, r3
 800904c:	6841      	ldr	r1, [r0, #4]
 800904e:	d92f      	bls.n	80090b0 <_dtoa_r+0x2d8>
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fee7 	bl	8009e24 <_Balloc>
 8009056:	9000      	str	r0, [sp, #0]
 8009058:	2800      	cmp	r0, #0
 800905a:	d14b      	bne.n	80090f4 <_dtoa_r+0x31c>
 800905c:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <_dtoa_r+0x318>)
 800905e:	4602      	mov	r2, r0
 8009060:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009064:	e6d1      	b.n	8008e0a <_dtoa_r+0x32>
 8009066:	2301      	movs	r3, #1
 8009068:	e7de      	b.n	8009028 <_dtoa_r+0x250>
 800906a:	2300      	movs	r3, #0
 800906c:	9308      	str	r3, [sp, #32]
 800906e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009070:	eb0a 0903 	add.w	r9, sl, r3
 8009074:	f109 0301 	add.w	r3, r9, #1
 8009078:	2b01      	cmp	r3, #1
 800907a:	9301      	str	r3, [sp, #4]
 800907c:	bfb8      	it	lt
 800907e:	2301      	movlt	r3, #1
 8009080:	e7dd      	b.n	800903e <_dtoa_r+0x266>
 8009082:	2301      	movs	r3, #1
 8009084:	e7f2      	b.n	800906c <_dtoa_r+0x294>
 8009086:	2501      	movs	r5, #1
 8009088:	2300      	movs	r3, #0
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	9508      	str	r5, [sp, #32]
 800908e:	f04f 39ff 	mov.w	r9, #4294967295
 8009092:	2200      	movs	r2, #0
 8009094:	f8cd 9004 	str.w	r9, [sp, #4]
 8009098:	2312      	movs	r3, #18
 800909a:	9209      	str	r2, [sp, #36]	; 0x24
 800909c:	e7cf      	b.n	800903e <_dtoa_r+0x266>
 800909e:	2301      	movs	r3, #1
 80090a0:	9308      	str	r3, [sp, #32]
 80090a2:	e7f4      	b.n	800908e <_dtoa_r+0x2b6>
 80090a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80090a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80090ac:	464b      	mov	r3, r9
 80090ae:	e7c6      	b.n	800903e <_dtoa_r+0x266>
 80090b0:	3101      	adds	r1, #1
 80090b2:	6041      	str	r1, [r0, #4]
 80090b4:	0052      	lsls	r2, r2, #1
 80090b6:	e7c6      	b.n	8009046 <_dtoa_r+0x26e>
 80090b8:	636f4361 	.word	0x636f4361
 80090bc:	3fd287a7 	.word	0x3fd287a7
 80090c0:	8b60c8b3 	.word	0x8b60c8b3
 80090c4:	3fc68a28 	.word	0x3fc68a28
 80090c8:	509f79fb 	.word	0x509f79fb
 80090cc:	3fd34413 	.word	0x3fd34413
 80090d0:	0800d542 	.word	0x0800d542
 80090d4:	0800d559 	.word	0x0800d559
 80090d8:	7ff00000 	.word	0x7ff00000
 80090dc:	0800d53e 	.word	0x0800d53e
 80090e0:	0800d535 	.word	0x0800d535
 80090e4:	0800d411 	.word	0x0800d411
 80090e8:	3ff80000 	.word	0x3ff80000
 80090ec:	0800d6b8 	.word	0x0800d6b8
 80090f0:	0800d5b8 	.word	0x0800d5b8
 80090f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f6:	9a00      	ldr	r2, [sp, #0]
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	2b0e      	cmp	r3, #14
 80090fe:	f200 80ad 	bhi.w	800925c <_dtoa_r+0x484>
 8009102:	2d00      	cmp	r5, #0
 8009104:	f000 80aa 	beq.w	800925c <_dtoa_r+0x484>
 8009108:	f1ba 0f00 	cmp.w	sl, #0
 800910c:	dd36      	ble.n	800917c <_dtoa_r+0x3a4>
 800910e:	4ac3      	ldr	r2, [pc, #780]	; (800941c <_dtoa_r+0x644>)
 8009110:	f00a 030f 	and.w	r3, sl, #15
 8009114:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009118:	ed93 7b00 	vldr	d7, [r3]
 800911c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009120:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009124:	eeb0 8a47 	vmov.f32	s16, s14
 8009128:	eef0 8a67 	vmov.f32	s17, s15
 800912c:	d016      	beq.n	800915c <_dtoa_r+0x384>
 800912e:	4bbc      	ldr	r3, [pc, #752]	; (8009420 <_dtoa_r+0x648>)
 8009130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009138:	f7f7 fba8 	bl	800088c <__aeabi_ddiv>
 800913c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009140:	f007 070f 	and.w	r7, r7, #15
 8009144:	2503      	movs	r5, #3
 8009146:	4eb6      	ldr	r6, [pc, #728]	; (8009420 <_dtoa_r+0x648>)
 8009148:	b957      	cbnz	r7, 8009160 <_dtoa_r+0x388>
 800914a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800914e:	ec53 2b18 	vmov	r2, r3, d8
 8009152:	f7f7 fb9b 	bl	800088c <__aeabi_ddiv>
 8009156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800915a:	e029      	b.n	80091b0 <_dtoa_r+0x3d8>
 800915c:	2502      	movs	r5, #2
 800915e:	e7f2      	b.n	8009146 <_dtoa_r+0x36e>
 8009160:	07f9      	lsls	r1, r7, #31
 8009162:	d508      	bpl.n	8009176 <_dtoa_r+0x39e>
 8009164:	ec51 0b18 	vmov	r0, r1, d8
 8009168:	e9d6 2300 	ldrd	r2, r3, [r6]
 800916c:	f7f7 fa64 	bl	8000638 <__aeabi_dmul>
 8009170:	ec41 0b18 	vmov	d8, r0, r1
 8009174:	3501      	adds	r5, #1
 8009176:	107f      	asrs	r7, r7, #1
 8009178:	3608      	adds	r6, #8
 800917a:	e7e5      	b.n	8009148 <_dtoa_r+0x370>
 800917c:	f000 80a6 	beq.w	80092cc <_dtoa_r+0x4f4>
 8009180:	f1ca 0600 	rsb	r6, sl, #0
 8009184:	4ba5      	ldr	r3, [pc, #660]	; (800941c <_dtoa_r+0x644>)
 8009186:	4fa6      	ldr	r7, [pc, #664]	; (8009420 <_dtoa_r+0x648>)
 8009188:	f006 020f 	and.w	r2, r6, #15
 800918c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009198:	f7f7 fa4e 	bl	8000638 <__aeabi_dmul>
 800919c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a0:	1136      	asrs	r6, r6, #4
 80091a2:	2300      	movs	r3, #0
 80091a4:	2502      	movs	r5, #2
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	f040 8085 	bne.w	80092b6 <_dtoa_r+0x4de>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1d2      	bne.n	8009156 <_dtoa_r+0x37e>
 80091b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 808c 	beq.w	80092d0 <_dtoa_r+0x4f8>
 80091b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091bc:	4b99      	ldr	r3, [pc, #612]	; (8009424 <_dtoa_r+0x64c>)
 80091be:	2200      	movs	r2, #0
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fcaa 	bl	8000b1c <__aeabi_dcmplt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f000 8081 	beq.w	80092d0 <_dtoa_r+0x4f8>
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d07d      	beq.n	80092d0 <_dtoa_r+0x4f8>
 80091d4:	f1b9 0f00 	cmp.w	r9, #0
 80091d8:	dd3c      	ble.n	8009254 <_dtoa_r+0x47c>
 80091da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	2200      	movs	r2, #0
 80091e2:	4b91      	ldr	r3, [pc, #580]	; (8009428 <_dtoa_r+0x650>)
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 fa26 	bl	8000638 <__aeabi_dmul>
 80091ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f0:	3501      	adds	r5, #1
 80091f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80091f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7f7 f9b2 	bl	8000564 <__aeabi_i2d>
 8009200:	4632      	mov	r2, r6
 8009202:	463b      	mov	r3, r7
 8009204:	f7f7 fa18 	bl	8000638 <__aeabi_dmul>
 8009208:	4b88      	ldr	r3, [pc, #544]	; (800942c <_dtoa_r+0x654>)
 800920a:	2200      	movs	r2, #0
 800920c:	f7f7 f85e 	bl	80002cc <__adddf3>
 8009210:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009218:	9303      	str	r3, [sp, #12]
 800921a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921c:	2b00      	cmp	r3, #0
 800921e:	d15c      	bne.n	80092da <_dtoa_r+0x502>
 8009220:	4b83      	ldr	r3, [pc, #524]	; (8009430 <_dtoa_r+0x658>)
 8009222:	2200      	movs	r2, #0
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 f84e 	bl	80002c8 <__aeabi_dsub>
 800922c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009230:	4606      	mov	r6, r0
 8009232:	460f      	mov	r7, r1
 8009234:	f7f7 fc90 	bl	8000b58 <__aeabi_dcmpgt>
 8009238:	2800      	cmp	r0, #0
 800923a:	f040 8296 	bne.w	800976a <_dtoa_r+0x992>
 800923e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009242:	4630      	mov	r0, r6
 8009244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009248:	4639      	mov	r1, r7
 800924a:	f7f7 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800924e:	2800      	cmp	r0, #0
 8009250:	f040 8288 	bne.w	8009764 <_dtoa_r+0x98c>
 8009254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009258:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800925c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800925e:	2b00      	cmp	r3, #0
 8009260:	f2c0 8158 	blt.w	8009514 <_dtoa_r+0x73c>
 8009264:	f1ba 0f0e 	cmp.w	sl, #14
 8009268:	f300 8154 	bgt.w	8009514 <_dtoa_r+0x73c>
 800926c:	4b6b      	ldr	r3, [pc, #428]	; (800941c <_dtoa_r+0x644>)
 800926e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009272:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	f280 80e3 	bge.w	8009444 <_dtoa_r+0x66c>
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f300 80df 	bgt.w	8009444 <_dtoa_r+0x66c>
 8009286:	f040 826d 	bne.w	8009764 <_dtoa_r+0x98c>
 800928a:	4b69      	ldr	r3, [pc, #420]	; (8009430 <_dtoa_r+0x658>)
 800928c:	2200      	movs	r2, #0
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 f9d1 	bl	8000638 <__aeabi_dmul>
 8009296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800929a:	f7f7 fc53 	bl	8000b44 <__aeabi_dcmpge>
 800929e:	9e01      	ldr	r6, [sp, #4]
 80092a0:	4637      	mov	r7, r6
 80092a2:	2800      	cmp	r0, #0
 80092a4:	f040 8243 	bne.w	800972e <_dtoa_r+0x956>
 80092a8:	9d00      	ldr	r5, [sp, #0]
 80092aa:	2331      	movs	r3, #49	; 0x31
 80092ac:	f805 3b01 	strb.w	r3, [r5], #1
 80092b0:	f10a 0a01 	add.w	sl, sl, #1
 80092b4:	e23f      	b.n	8009736 <_dtoa_r+0x95e>
 80092b6:	07f2      	lsls	r2, r6, #31
 80092b8:	d505      	bpl.n	80092c6 <_dtoa_r+0x4ee>
 80092ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092be:	f7f7 f9bb 	bl	8000638 <__aeabi_dmul>
 80092c2:	3501      	adds	r5, #1
 80092c4:	2301      	movs	r3, #1
 80092c6:	1076      	asrs	r6, r6, #1
 80092c8:	3708      	adds	r7, #8
 80092ca:	e76c      	b.n	80091a6 <_dtoa_r+0x3ce>
 80092cc:	2502      	movs	r5, #2
 80092ce:	e76f      	b.n	80091b0 <_dtoa_r+0x3d8>
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80092d6:	930c      	str	r3, [sp, #48]	; 0x30
 80092d8:	e78d      	b.n	80091f6 <_dtoa_r+0x41e>
 80092da:	9900      	ldr	r1, [sp, #0]
 80092dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092e0:	4b4e      	ldr	r3, [pc, #312]	; (800941c <_dtoa_r+0x644>)
 80092e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092e6:	4401      	add	r1, r0
 80092e8:	9102      	str	r1, [sp, #8]
 80092ea:	9908      	ldr	r1, [sp, #32]
 80092ec:	eeb0 8a47 	vmov.f32	s16, s14
 80092f0:	eef0 8a67 	vmov.f32	s17, s15
 80092f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d045      	beq.n	800938c <_dtoa_r+0x5b4>
 8009300:	494c      	ldr	r1, [pc, #304]	; (8009434 <_dtoa_r+0x65c>)
 8009302:	2000      	movs	r0, #0
 8009304:	f7f7 fac2 	bl	800088c <__aeabi_ddiv>
 8009308:	ec53 2b18 	vmov	r2, r3, d8
 800930c:	f7f6 ffdc 	bl	80002c8 <__aeabi_dsub>
 8009310:	9d00      	ldr	r5, [sp, #0]
 8009312:	ec41 0b18 	vmov	d8, r0, r1
 8009316:	4639      	mov	r1, r7
 8009318:	4630      	mov	r0, r6
 800931a:	f7f7 fc3d 	bl	8000b98 <__aeabi_d2iz>
 800931e:	900c      	str	r0, [sp, #48]	; 0x30
 8009320:	f7f7 f920 	bl	8000564 <__aeabi_i2d>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ffcc 	bl	80002c8 <__aeabi_dsub>
 8009330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009332:	3330      	adds	r3, #48	; 0x30
 8009334:	f805 3b01 	strb.w	r3, [r5], #1
 8009338:	ec53 2b18 	vmov	r2, r3, d8
 800933c:	4606      	mov	r6, r0
 800933e:	460f      	mov	r7, r1
 8009340:	f7f7 fbec 	bl	8000b1c <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	d165      	bne.n	8009414 <_dtoa_r+0x63c>
 8009348:	4632      	mov	r2, r6
 800934a:	463b      	mov	r3, r7
 800934c:	4935      	ldr	r1, [pc, #212]	; (8009424 <_dtoa_r+0x64c>)
 800934e:	2000      	movs	r0, #0
 8009350:	f7f6 ffba 	bl	80002c8 <__aeabi_dsub>
 8009354:	ec53 2b18 	vmov	r2, r3, d8
 8009358:	f7f7 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 80b9 	bne.w	80094d4 <_dtoa_r+0x6fc>
 8009362:	9b02      	ldr	r3, [sp, #8]
 8009364:	429d      	cmp	r5, r3
 8009366:	f43f af75 	beq.w	8009254 <_dtoa_r+0x47c>
 800936a:	4b2f      	ldr	r3, [pc, #188]	; (8009428 <_dtoa_r+0x650>)
 800936c:	ec51 0b18 	vmov	r0, r1, d8
 8009370:	2200      	movs	r2, #0
 8009372:	f7f7 f961 	bl	8000638 <__aeabi_dmul>
 8009376:	4b2c      	ldr	r3, [pc, #176]	; (8009428 <_dtoa_r+0x650>)
 8009378:	ec41 0b18 	vmov	d8, r0, r1
 800937c:	2200      	movs	r2, #0
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 f959 	bl	8000638 <__aeabi_dmul>
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	e7c4      	b.n	8009316 <_dtoa_r+0x53e>
 800938c:	ec51 0b17 	vmov	r0, r1, d7
 8009390:	f7f7 f952 	bl	8000638 <__aeabi_dmul>
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	9d00      	ldr	r5, [sp, #0]
 8009398:	930c      	str	r3, [sp, #48]	; 0x30
 800939a:	ec41 0b18 	vmov	d8, r0, r1
 800939e:	4639      	mov	r1, r7
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7f7 fbf9 	bl	8000b98 <__aeabi_d2iz>
 80093a6:	9011      	str	r0, [sp, #68]	; 0x44
 80093a8:	f7f7 f8dc 	bl	8000564 <__aeabi_i2d>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f6 ff88 	bl	80002c8 <__aeabi_dsub>
 80093b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093ba:	3330      	adds	r3, #48	; 0x30
 80093bc:	f805 3b01 	strb.w	r3, [r5], #1
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	429d      	cmp	r5, r3
 80093c4:	4606      	mov	r6, r0
 80093c6:	460f      	mov	r7, r1
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	d134      	bne.n	8009438 <_dtoa_r+0x660>
 80093ce:	4b19      	ldr	r3, [pc, #100]	; (8009434 <_dtoa_r+0x65c>)
 80093d0:	ec51 0b18 	vmov	r0, r1, d8
 80093d4:	f7f6 ff7a 	bl	80002cc <__adddf3>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f7 fbba 	bl	8000b58 <__aeabi_dcmpgt>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d175      	bne.n	80094d4 <_dtoa_r+0x6fc>
 80093e8:	ec53 2b18 	vmov	r2, r3, d8
 80093ec:	4911      	ldr	r1, [pc, #68]	; (8009434 <_dtoa_r+0x65c>)
 80093ee:	2000      	movs	r0, #0
 80093f0:	f7f6 ff6a 	bl	80002c8 <__aeabi_dsub>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f7 fb8e 	bl	8000b1c <__aeabi_dcmplt>
 8009400:	2800      	cmp	r0, #0
 8009402:	f43f af27 	beq.w	8009254 <_dtoa_r+0x47c>
 8009406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009408:	1e6b      	subs	r3, r5, #1
 800940a:	930c      	str	r3, [sp, #48]	; 0x30
 800940c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009410:	2b30      	cmp	r3, #48	; 0x30
 8009412:	d0f8      	beq.n	8009406 <_dtoa_r+0x62e>
 8009414:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009418:	e04a      	b.n	80094b0 <_dtoa_r+0x6d8>
 800941a:	bf00      	nop
 800941c:	0800d6b8 	.word	0x0800d6b8
 8009420:	0800d690 	.word	0x0800d690
 8009424:	3ff00000 	.word	0x3ff00000
 8009428:	40240000 	.word	0x40240000
 800942c:	401c0000 	.word	0x401c0000
 8009430:	40140000 	.word	0x40140000
 8009434:	3fe00000 	.word	0x3fe00000
 8009438:	4baf      	ldr	r3, [pc, #700]	; (80096f8 <_dtoa_r+0x920>)
 800943a:	f7f7 f8fd 	bl	8000638 <__aeabi_dmul>
 800943e:	4606      	mov	r6, r0
 8009440:	460f      	mov	r7, r1
 8009442:	e7ac      	b.n	800939e <_dtoa_r+0x5c6>
 8009444:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009448:	9d00      	ldr	r5, [sp, #0]
 800944a:	4642      	mov	r2, r8
 800944c:	464b      	mov	r3, r9
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 fa1b 	bl	800088c <__aeabi_ddiv>
 8009456:	f7f7 fb9f 	bl	8000b98 <__aeabi_d2iz>
 800945a:	9002      	str	r0, [sp, #8]
 800945c:	f7f7 f882 	bl	8000564 <__aeabi_i2d>
 8009460:	4642      	mov	r2, r8
 8009462:	464b      	mov	r3, r9
 8009464:	f7f7 f8e8 	bl	8000638 <__aeabi_dmul>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4630      	mov	r0, r6
 800946e:	4639      	mov	r1, r7
 8009470:	f7f6 ff2a 	bl	80002c8 <__aeabi_dsub>
 8009474:	9e02      	ldr	r6, [sp, #8]
 8009476:	9f01      	ldr	r7, [sp, #4]
 8009478:	3630      	adds	r6, #48	; 0x30
 800947a:	f805 6b01 	strb.w	r6, [r5], #1
 800947e:	9e00      	ldr	r6, [sp, #0]
 8009480:	1bae      	subs	r6, r5, r6
 8009482:	42b7      	cmp	r7, r6
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	d137      	bne.n	80094fa <_dtoa_r+0x722>
 800948a:	f7f6 ff1f 	bl	80002cc <__adddf3>
 800948e:	4642      	mov	r2, r8
 8009490:	464b      	mov	r3, r9
 8009492:	4606      	mov	r6, r0
 8009494:	460f      	mov	r7, r1
 8009496:	f7f7 fb5f 	bl	8000b58 <__aeabi_dcmpgt>
 800949a:	b9c8      	cbnz	r0, 80094d0 <_dtoa_r+0x6f8>
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f7 fb30 	bl	8000b08 <__aeabi_dcmpeq>
 80094a8:	b110      	cbz	r0, 80094b0 <_dtoa_r+0x6d8>
 80094aa:	9b02      	ldr	r3, [sp, #8]
 80094ac:	07d9      	lsls	r1, r3, #31
 80094ae:	d40f      	bmi.n	80094d0 <_dtoa_r+0x6f8>
 80094b0:	4620      	mov	r0, r4
 80094b2:	4659      	mov	r1, fp
 80094b4:	f000 fcf6 	bl	8009ea4 <_Bfree>
 80094b8:	2300      	movs	r3, #0
 80094ba:	702b      	strb	r3, [r5, #0]
 80094bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094be:	f10a 0001 	add.w	r0, sl, #1
 80094c2:	6018      	str	r0, [r3, #0]
 80094c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f43f acd8 	beq.w	8008e7c <_dtoa_r+0xa4>
 80094cc:	601d      	str	r5, [r3, #0]
 80094ce:	e4d5      	b.n	8008e7c <_dtoa_r+0xa4>
 80094d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80094d4:	462b      	mov	r3, r5
 80094d6:	461d      	mov	r5, r3
 80094d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094dc:	2a39      	cmp	r2, #57	; 0x39
 80094de:	d108      	bne.n	80094f2 <_dtoa_r+0x71a>
 80094e0:	9a00      	ldr	r2, [sp, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d1f7      	bne.n	80094d6 <_dtoa_r+0x6fe>
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	9900      	ldr	r1, [sp, #0]
 80094ea:	3201      	adds	r2, #1
 80094ec:	9207      	str	r2, [sp, #28]
 80094ee:	2230      	movs	r2, #48	; 0x30
 80094f0:	700a      	strb	r2, [r1, #0]
 80094f2:	781a      	ldrb	r2, [r3, #0]
 80094f4:	3201      	adds	r2, #1
 80094f6:	701a      	strb	r2, [r3, #0]
 80094f8:	e78c      	b.n	8009414 <_dtoa_r+0x63c>
 80094fa:	4b7f      	ldr	r3, [pc, #508]	; (80096f8 <_dtoa_r+0x920>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	f7f7 f89b 	bl	8000638 <__aeabi_dmul>
 8009502:	2200      	movs	r2, #0
 8009504:	2300      	movs	r3, #0
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	f7f7 fafd 	bl	8000b08 <__aeabi_dcmpeq>
 800950e:	2800      	cmp	r0, #0
 8009510:	d09b      	beq.n	800944a <_dtoa_r+0x672>
 8009512:	e7cd      	b.n	80094b0 <_dtoa_r+0x6d8>
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	2a00      	cmp	r2, #0
 8009518:	f000 80c4 	beq.w	80096a4 <_dtoa_r+0x8cc>
 800951c:	9a05      	ldr	r2, [sp, #20]
 800951e:	2a01      	cmp	r2, #1
 8009520:	f300 80a8 	bgt.w	8009674 <_dtoa_r+0x89c>
 8009524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009526:	2a00      	cmp	r2, #0
 8009528:	f000 80a0 	beq.w	800966c <_dtoa_r+0x894>
 800952c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009530:	9e06      	ldr	r6, [sp, #24]
 8009532:	4645      	mov	r5, r8
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	2101      	movs	r1, #1
 8009538:	441a      	add	r2, r3
 800953a:	4620      	mov	r0, r4
 800953c:	4498      	add	r8, r3
 800953e:	9204      	str	r2, [sp, #16]
 8009540:	f000 fd6c 	bl	800a01c <__i2b>
 8009544:	4607      	mov	r7, r0
 8009546:	2d00      	cmp	r5, #0
 8009548:	dd0b      	ble.n	8009562 <_dtoa_r+0x78a>
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd08      	ble.n	8009562 <_dtoa_r+0x78a>
 8009550:	42ab      	cmp	r3, r5
 8009552:	9a04      	ldr	r2, [sp, #16]
 8009554:	bfa8      	it	ge
 8009556:	462b      	movge	r3, r5
 8009558:	eba8 0803 	sub.w	r8, r8, r3
 800955c:	1aed      	subs	r5, r5, r3
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	9b06      	ldr	r3, [sp, #24]
 8009564:	b1fb      	cbz	r3, 80095a6 <_dtoa_r+0x7ce>
 8009566:	9b08      	ldr	r3, [sp, #32]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 809f 	beq.w	80096ac <_dtoa_r+0x8d4>
 800956e:	2e00      	cmp	r6, #0
 8009570:	dd11      	ble.n	8009596 <_dtoa_r+0x7be>
 8009572:	4639      	mov	r1, r7
 8009574:	4632      	mov	r2, r6
 8009576:	4620      	mov	r0, r4
 8009578:	f000 fe0c 	bl	800a194 <__pow5mult>
 800957c:	465a      	mov	r2, fp
 800957e:	4601      	mov	r1, r0
 8009580:	4607      	mov	r7, r0
 8009582:	4620      	mov	r0, r4
 8009584:	f000 fd60 	bl	800a048 <__multiply>
 8009588:	4659      	mov	r1, fp
 800958a:	9007      	str	r0, [sp, #28]
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fc89 	bl	8009ea4 <_Bfree>
 8009592:	9b07      	ldr	r3, [sp, #28]
 8009594:	469b      	mov	fp, r3
 8009596:	9b06      	ldr	r3, [sp, #24]
 8009598:	1b9a      	subs	r2, r3, r6
 800959a:	d004      	beq.n	80095a6 <_dtoa_r+0x7ce>
 800959c:	4659      	mov	r1, fp
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fdf8 	bl	800a194 <__pow5mult>
 80095a4:	4683      	mov	fp, r0
 80095a6:	2101      	movs	r1, #1
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fd37 	bl	800a01c <__i2b>
 80095ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	4606      	mov	r6, r0
 80095b4:	dd7c      	ble.n	80096b0 <_dtoa_r+0x8d8>
 80095b6:	461a      	mov	r2, r3
 80095b8:	4601      	mov	r1, r0
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fdea 	bl	800a194 <__pow5mult>
 80095c0:	9b05      	ldr	r3, [sp, #20]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	4606      	mov	r6, r0
 80095c6:	dd76      	ble.n	80096b6 <_dtoa_r+0x8de>
 80095c8:	2300      	movs	r3, #0
 80095ca:	9306      	str	r3, [sp, #24]
 80095cc:	6933      	ldr	r3, [r6, #16]
 80095ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095d2:	6918      	ldr	r0, [r3, #16]
 80095d4:	f000 fcd2 	bl	8009f7c <__hi0bits>
 80095d8:	f1c0 0020 	rsb	r0, r0, #32
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	4418      	add	r0, r3
 80095e0:	f010 001f 	ands.w	r0, r0, #31
 80095e4:	f000 8086 	beq.w	80096f4 <_dtoa_r+0x91c>
 80095e8:	f1c0 0320 	rsb	r3, r0, #32
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	dd7f      	ble.n	80096f0 <_dtoa_r+0x918>
 80095f0:	f1c0 001c 	rsb	r0, r0, #28
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	4403      	add	r3, r0
 80095f8:	4480      	add	r8, r0
 80095fa:	4405      	add	r5, r0
 80095fc:	9304      	str	r3, [sp, #16]
 80095fe:	f1b8 0f00 	cmp.w	r8, #0
 8009602:	dd05      	ble.n	8009610 <_dtoa_r+0x838>
 8009604:	4659      	mov	r1, fp
 8009606:	4642      	mov	r2, r8
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fe1d 	bl	800a248 <__lshift>
 800960e:	4683      	mov	fp, r0
 8009610:	9b04      	ldr	r3, [sp, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd05      	ble.n	8009622 <_dtoa_r+0x84a>
 8009616:	4631      	mov	r1, r6
 8009618:	461a      	mov	r2, r3
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fe14 	bl	800a248 <__lshift>
 8009620:	4606      	mov	r6, r0
 8009622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009624:	2b00      	cmp	r3, #0
 8009626:	d069      	beq.n	80096fc <_dtoa_r+0x924>
 8009628:	4631      	mov	r1, r6
 800962a:	4658      	mov	r0, fp
 800962c:	f000 fe78 	bl	800a320 <__mcmp>
 8009630:	2800      	cmp	r0, #0
 8009632:	da63      	bge.n	80096fc <_dtoa_r+0x924>
 8009634:	2300      	movs	r3, #0
 8009636:	4659      	mov	r1, fp
 8009638:	220a      	movs	r2, #10
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fc54 	bl	8009ee8 <__multadd>
 8009640:	9b08      	ldr	r3, [sp, #32]
 8009642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009646:	4683      	mov	fp, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 818f 	beq.w	800996c <_dtoa_r+0xb94>
 800964e:	4639      	mov	r1, r7
 8009650:	2300      	movs	r3, #0
 8009652:	220a      	movs	r2, #10
 8009654:	4620      	mov	r0, r4
 8009656:	f000 fc47 	bl	8009ee8 <__multadd>
 800965a:	f1b9 0f00 	cmp.w	r9, #0
 800965e:	4607      	mov	r7, r0
 8009660:	f300 808e 	bgt.w	8009780 <_dtoa_r+0x9a8>
 8009664:	9b05      	ldr	r3, [sp, #20]
 8009666:	2b02      	cmp	r3, #2
 8009668:	dc50      	bgt.n	800970c <_dtoa_r+0x934>
 800966a:	e089      	b.n	8009780 <_dtoa_r+0x9a8>
 800966c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800966e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009672:	e75d      	b.n	8009530 <_dtoa_r+0x758>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	1e5e      	subs	r6, r3, #1
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	42b3      	cmp	r3, r6
 800967c:	bfbf      	itttt	lt
 800967e:	9b06      	ldrlt	r3, [sp, #24]
 8009680:	9606      	strlt	r6, [sp, #24]
 8009682:	1af2      	sublt	r2, r6, r3
 8009684:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009686:	bfb6      	itet	lt
 8009688:	189b      	addlt	r3, r3, r2
 800968a:	1b9e      	subge	r6, r3, r6
 800968c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800968e:	9b01      	ldr	r3, [sp, #4]
 8009690:	bfb8      	it	lt
 8009692:	2600      	movlt	r6, #0
 8009694:	2b00      	cmp	r3, #0
 8009696:	bfb5      	itete	lt
 8009698:	eba8 0503 	sublt.w	r5, r8, r3
 800969c:	9b01      	ldrge	r3, [sp, #4]
 800969e:	2300      	movlt	r3, #0
 80096a0:	4645      	movge	r5, r8
 80096a2:	e747      	b.n	8009534 <_dtoa_r+0x75c>
 80096a4:	9e06      	ldr	r6, [sp, #24]
 80096a6:	9f08      	ldr	r7, [sp, #32]
 80096a8:	4645      	mov	r5, r8
 80096aa:	e74c      	b.n	8009546 <_dtoa_r+0x76e>
 80096ac:	9a06      	ldr	r2, [sp, #24]
 80096ae:	e775      	b.n	800959c <_dtoa_r+0x7c4>
 80096b0:	9b05      	ldr	r3, [sp, #20]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	dc18      	bgt.n	80096e8 <_dtoa_r+0x910>
 80096b6:	9b02      	ldr	r3, [sp, #8]
 80096b8:	b9b3      	cbnz	r3, 80096e8 <_dtoa_r+0x910>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096c0:	b9a3      	cbnz	r3, 80096ec <_dtoa_r+0x914>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096c8:	0d1b      	lsrs	r3, r3, #20
 80096ca:	051b      	lsls	r3, r3, #20
 80096cc:	b12b      	cbz	r3, 80096da <_dtoa_r+0x902>
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	3301      	adds	r3, #1
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	f108 0801 	add.w	r8, r8, #1
 80096d8:	2301      	movs	r3, #1
 80096da:	9306      	str	r3, [sp, #24]
 80096dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f47f af74 	bne.w	80095cc <_dtoa_r+0x7f4>
 80096e4:	2001      	movs	r0, #1
 80096e6:	e779      	b.n	80095dc <_dtoa_r+0x804>
 80096e8:	2300      	movs	r3, #0
 80096ea:	e7f6      	b.n	80096da <_dtoa_r+0x902>
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	e7f4      	b.n	80096da <_dtoa_r+0x902>
 80096f0:	d085      	beq.n	80095fe <_dtoa_r+0x826>
 80096f2:	4618      	mov	r0, r3
 80096f4:	301c      	adds	r0, #28
 80096f6:	e77d      	b.n	80095f4 <_dtoa_r+0x81c>
 80096f8:	40240000 	.word	0x40240000
 80096fc:	9b01      	ldr	r3, [sp, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dc38      	bgt.n	8009774 <_dtoa_r+0x99c>
 8009702:	9b05      	ldr	r3, [sp, #20]
 8009704:	2b02      	cmp	r3, #2
 8009706:	dd35      	ble.n	8009774 <_dtoa_r+0x99c>
 8009708:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800970c:	f1b9 0f00 	cmp.w	r9, #0
 8009710:	d10d      	bne.n	800972e <_dtoa_r+0x956>
 8009712:	4631      	mov	r1, r6
 8009714:	464b      	mov	r3, r9
 8009716:	2205      	movs	r2, #5
 8009718:	4620      	mov	r0, r4
 800971a:	f000 fbe5 	bl	8009ee8 <__multadd>
 800971e:	4601      	mov	r1, r0
 8009720:	4606      	mov	r6, r0
 8009722:	4658      	mov	r0, fp
 8009724:	f000 fdfc 	bl	800a320 <__mcmp>
 8009728:	2800      	cmp	r0, #0
 800972a:	f73f adbd 	bgt.w	80092a8 <_dtoa_r+0x4d0>
 800972e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009730:	9d00      	ldr	r5, [sp, #0]
 8009732:	ea6f 0a03 	mvn.w	sl, r3
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	4631      	mov	r1, r6
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fbb1 	bl	8009ea4 <_Bfree>
 8009742:	2f00      	cmp	r7, #0
 8009744:	f43f aeb4 	beq.w	80094b0 <_dtoa_r+0x6d8>
 8009748:	f1b8 0f00 	cmp.w	r8, #0
 800974c:	d005      	beq.n	800975a <_dtoa_r+0x982>
 800974e:	45b8      	cmp	r8, r7
 8009750:	d003      	beq.n	800975a <_dtoa_r+0x982>
 8009752:	4641      	mov	r1, r8
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fba5 	bl	8009ea4 <_Bfree>
 800975a:	4639      	mov	r1, r7
 800975c:	4620      	mov	r0, r4
 800975e:	f000 fba1 	bl	8009ea4 <_Bfree>
 8009762:	e6a5      	b.n	80094b0 <_dtoa_r+0x6d8>
 8009764:	2600      	movs	r6, #0
 8009766:	4637      	mov	r7, r6
 8009768:	e7e1      	b.n	800972e <_dtoa_r+0x956>
 800976a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800976c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009770:	4637      	mov	r7, r6
 8009772:	e599      	b.n	80092a8 <_dtoa_r+0x4d0>
 8009774:	9b08      	ldr	r3, [sp, #32]
 8009776:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 80fd 	beq.w	800997a <_dtoa_r+0xba2>
 8009780:	2d00      	cmp	r5, #0
 8009782:	dd05      	ble.n	8009790 <_dtoa_r+0x9b8>
 8009784:	4639      	mov	r1, r7
 8009786:	462a      	mov	r2, r5
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fd5d 	bl	800a248 <__lshift>
 800978e:	4607      	mov	r7, r0
 8009790:	9b06      	ldr	r3, [sp, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d05c      	beq.n	8009850 <_dtoa_r+0xa78>
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fb43 	bl	8009e24 <_Balloc>
 800979e:	4605      	mov	r5, r0
 80097a0:	b928      	cbnz	r0, 80097ae <_dtoa_r+0x9d6>
 80097a2:	4b80      	ldr	r3, [pc, #512]	; (80099a4 <_dtoa_r+0xbcc>)
 80097a4:	4602      	mov	r2, r0
 80097a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097aa:	f7ff bb2e 	b.w	8008e0a <_dtoa_r+0x32>
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	3202      	adds	r2, #2
 80097b2:	0092      	lsls	r2, r2, #2
 80097b4:	f107 010c 	add.w	r1, r7, #12
 80097b8:	300c      	adds	r0, #12
 80097ba:	f000 fb25 	bl	8009e08 <memcpy>
 80097be:	2201      	movs	r2, #1
 80097c0:	4629      	mov	r1, r5
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fd40 	bl	800a248 <__lshift>
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	9b00      	ldr	r3, [sp, #0]
 80097d0:	444b      	add	r3, r9
 80097d2:	9307      	str	r3, [sp, #28]
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	46b8      	mov	r8, r7
 80097dc:	9306      	str	r3, [sp, #24]
 80097de:	4607      	mov	r7, r0
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	4631      	mov	r1, r6
 80097e4:	3b01      	subs	r3, #1
 80097e6:	4658      	mov	r0, fp
 80097e8:	9302      	str	r3, [sp, #8]
 80097ea:	f7ff fa69 	bl	8008cc0 <quorem>
 80097ee:	4603      	mov	r3, r0
 80097f0:	3330      	adds	r3, #48	; 0x30
 80097f2:	9004      	str	r0, [sp, #16]
 80097f4:	4641      	mov	r1, r8
 80097f6:	4658      	mov	r0, fp
 80097f8:	9308      	str	r3, [sp, #32]
 80097fa:	f000 fd91 	bl	800a320 <__mcmp>
 80097fe:	463a      	mov	r2, r7
 8009800:	4681      	mov	r9, r0
 8009802:	4631      	mov	r1, r6
 8009804:	4620      	mov	r0, r4
 8009806:	f000 fda7 	bl	800a358 <__mdiff>
 800980a:	68c2      	ldr	r2, [r0, #12]
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	4605      	mov	r5, r0
 8009810:	bb02      	cbnz	r2, 8009854 <_dtoa_r+0xa7c>
 8009812:	4601      	mov	r1, r0
 8009814:	4658      	mov	r0, fp
 8009816:	f000 fd83 	bl	800a320 <__mcmp>
 800981a:	9b08      	ldr	r3, [sp, #32]
 800981c:	4602      	mov	r2, r0
 800981e:	4629      	mov	r1, r5
 8009820:	4620      	mov	r0, r4
 8009822:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009826:	f000 fb3d 	bl	8009ea4 <_Bfree>
 800982a:	9b05      	ldr	r3, [sp, #20]
 800982c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800982e:	9d01      	ldr	r5, [sp, #4]
 8009830:	ea43 0102 	orr.w	r1, r3, r2
 8009834:	9b06      	ldr	r3, [sp, #24]
 8009836:	430b      	orrs	r3, r1
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	d10d      	bne.n	8009858 <_dtoa_r+0xa80>
 800983c:	2b39      	cmp	r3, #57	; 0x39
 800983e:	d029      	beq.n	8009894 <_dtoa_r+0xabc>
 8009840:	f1b9 0f00 	cmp.w	r9, #0
 8009844:	dd01      	ble.n	800984a <_dtoa_r+0xa72>
 8009846:	9b04      	ldr	r3, [sp, #16]
 8009848:	3331      	adds	r3, #49	; 0x31
 800984a:	9a02      	ldr	r2, [sp, #8]
 800984c:	7013      	strb	r3, [r2, #0]
 800984e:	e774      	b.n	800973a <_dtoa_r+0x962>
 8009850:	4638      	mov	r0, r7
 8009852:	e7b9      	b.n	80097c8 <_dtoa_r+0x9f0>
 8009854:	2201      	movs	r2, #1
 8009856:	e7e2      	b.n	800981e <_dtoa_r+0xa46>
 8009858:	f1b9 0f00 	cmp.w	r9, #0
 800985c:	db06      	blt.n	800986c <_dtoa_r+0xa94>
 800985e:	9905      	ldr	r1, [sp, #20]
 8009860:	ea41 0909 	orr.w	r9, r1, r9
 8009864:	9906      	ldr	r1, [sp, #24]
 8009866:	ea59 0101 	orrs.w	r1, r9, r1
 800986a:	d120      	bne.n	80098ae <_dtoa_r+0xad6>
 800986c:	2a00      	cmp	r2, #0
 800986e:	ddec      	ble.n	800984a <_dtoa_r+0xa72>
 8009870:	4659      	mov	r1, fp
 8009872:	2201      	movs	r2, #1
 8009874:	4620      	mov	r0, r4
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	f000 fce6 	bl	800a248 <__lshift>
 800987c:	4631      	mov	r1, r6
 800987e:	4683      	mov	fp, r0
 8009880:	f000 fd4e 	bl	800a320 <__mcmp>
 8009884:	2800      	cmp	r0, #0
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	dc02      	bgt.n	8009890 <_dtoa_r+0xab8>
 800988a:	d1de      	bne.n	800984a <_dtoa_r+0xa72>
 800988c:	07da      	lsls	r2, r3, #31
 800988e:	d5dc      	bpl.n	800984a <_dtoa_r+0xa72>
 8009890:	2b39      	cmp	r3, #57	; 0x39
 8009892:	d1d8      	bne.n	8009846 <_dtoa_r+0xa6e>
 8009894:	9a02      	ldr	r2, [sp, #8]
 8009896:	2339      	movs	r3, #57	; 0x39
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	462b      	mov	r3, r5
 800989c:	461d      	mov	r5, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098a4:	2a39      	cmp	r2, #57	; 0x39
 80098a6:	d050      	beq.n	800994a <_dtoa_r+0xb72>
 80098a8:	3201      	adds	r2, #1
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	e745      	b.n	800973a <_dtoa_r+0x962>
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	dd03      	ble.n	80098ba <_dtoa_r+0xae2>
 80098b2:	2b39      	cmp	r3, #57	; 0x39
 80098b4:	d0ee      	beq.n	8009894 <_dtoa_r+0xabc>
 80098b6:	3301      	adds	r3, #1
 80098b8:	e7c7      	b.n	800984a <_dtoa_r+0xa72>
 80098ba:	9a01      	ldr	r2, [sp, #4]
 80098bc:	9907      	ldr	r1, [sp, #28]
 80098be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098c2:	428a      	cmp	r2, r1
 80098c4:	d02a      	beq.n	800991c <_dtoa_r+0xb44>
 80098c6:	4659      	mov	r1, fp
 80098c8:	2300      	movs	r3, #0
 80098ca:	220a      	movs	r2, #10
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fb0b 	bl	8009ee8 <__multadd>
 80098d2:	45b8      	cmp	r8, r7
 80098d4:	4683      	mov	fp, r0
 80098d6:	f04f 0300 	mov.w	r3, #0
 80098da:	f04f 020a 	mov.w	r2, #10
 80098de:	4641      	mov	r1, r8
 80098e0:	4620      	mov	r0, r4
 80098e2:	d107      	bne.n	80098f4 <_dtoa_r+0xb1c>
 80098e4:	f000 fb00 	bl	8009ee8 <__multadd>
 80098e8:	4680      	mov	r8, r0
 80098ea:	4607      	mov	r7, r0
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	3301      	adds	r3, #1
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	e775      	b.n	80097e0 <_dtoa_r+0xa08>
 80098f4:	f000 faf8 	bl	8009ee8 <__multadd>
 80098f8:	4639      	mov	r1, r7
 80098fa:	4680      	mov	r8, r0
 80098fc:	2300      	movs	r3, #0
 80098fe:	220a      	movs	r2, #10
 8009900:	4620      	mov	r0, r4
 8009902:	f000 faf1 	bl	8009ee8 <__multadd>
 8009906:	4607      	mov	r7, r0
 8009908:	e7f0      	b.n	80098ec <_dtoa_r+0xb14>
 800990a:	f1b9 0f00 	cmp.w	r9, #0
 800990e:	9a00      	ldr	r2, [sp, #0]
 8009910:	bfcc      	ite	gt
 8009912:	464d      	movgt	r5, r9
 8009914:	2501      	movle	r5, #1
 8009916:	4415      	add	r5, r2
 8009918:	f04f 0800 	mov.w	r8, #0
 800991c:	4659      	mov	r1, fp
 800991e:	2201      	movs	r2, #1
 8009920:	4620      	mov	r0, r4
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	f000 fc90 	bl	800a248 <__lshift>
 8009928:	4631      	mov	r1, r6
 800992a:	4683      	mov	fp, r0
 800992c:	f000 fcf8 	bl	800a320 <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	dcb2      	bgt.n	800989a <_dtoa_r+0xac2>
 8009934:	d102      	bne.n	800993c <_dtoa_r+0xb64>
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	07db      	lsls	r3, r3, #31
 800993a:	d4ae      	bmi.n	800989a <_dtoa_r+0xac2>
 800993c:	462b      	mov	r3, r5
 800993e:	461d      	mov	r5, r3
 8009940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009944:	2a30      	cmp	r2, #48	; 0x30
 8009946:	d0fa      	beq.n	800993e <_dtoa_r+0xb66>
 8009948:	e6f7      	b.n	800973a <_dtoa_r+0x962>
 800994a:	9a00      	ldr	r2, [sp, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d1a5      	bne.n	800989c <_dtoa_r+0xac4>
 8009950:	f10a 0a01 	add.w	sl, sl, #1
 8009954:	2331      	movs	r3, #49	; 0x31
 8009956:	e779      	b.n	800984c <_dtoa_r+0xa74>
 8009958:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <_dtoa_r+0xbd0>)
 800995a:	f7ff baaf 	b.w	8008ebc <_dtoa_r+0xe4>
 800995e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009960:	2b00      	cmp	r3, #0
 8009962:	f47f aa86 	bne.w	8008e72 <_dtoa_r+0x9a>
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <_dtoa_r+0xbd4>)
 8009968:	f7ff baa8 	b.w	8008ebc <_dtoa_r+0xe4>
 800996c:	f1b9 0f00 	cmp.w	r9, #0
 8009970:	dc03      	bgt.n	800997a <_dtoa_r+0xba2>
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	2b02      	cmp	r3, #2
 8009976:	f73f aec9 	bgt.w	800970c <_dtoa_r+0x934>
 800997a:	9d00      	ldr	r5, [sp, #0]
 800997c:	4631      	mov	r1, r6
 800997e:	4658      	mov	r0, fp
 8009980:	f7ff f99e 	bl	8008cc0 <quorem>
 8009984:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009988:	f805 3b01 	strb.w	r3, [r5], #1
 800998c:	9a00      	ldr	r2, [sp, #0]
 800998e:	1aaa      	subs	r2, r5, r2
 8009990:	4591      	cmp	r9, r2
 8009992:	ddba      	ble.n	800990a <_dtoa_r+0xb32>
 8009994:	4659      	mov	r1, fp
 8009996:	2300      	movs	r3, #0
 8009998:	220a      	movs	r2, #10
 800999a:	4620      	mov	r0, r4
 800999c:	f000 faa4 	bl	8009ee8 <__multadd>
 80099a0:	4683      	mov	fp, r0
 80099a2:	e7eb      	b.n	800997c <_dtoa_r+0xba4>
 80099a4:	0800d5b8 	.word	0x0800d5b8
 80099a8:	0800d410 	.word	0x0800d410
 80099ac:	0800d535 	.word	0x0800d535

080099b0 <__sflush_r>:
 80099b0:	898a      	ldrh	r2, [r1, #12]
 80099b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	4605      	mov	r5, r0
 80099b8:	0710      	lsls	r0, r2, #28
 80099ba:	460c      	mov	r4, r1
 80099bc:	d458      	bmi.n	8009a70 <__sflush_r+0xc0>
 80099be:	684b      	ldr	r3, [r1, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc05      	bgt.n	80099d0 <__sflush_r+0x20>
 80099c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dc02      	bgt.n	80099d0 <__sflush_r+0x20>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d0f9      	beq.n	80099ca <__sflush_r+0x1a>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099dc:	682f      	ldr	r7, [r5, #0]
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	d032      	beq.n	8009a48 <__sflush_r+0x98>
 80099e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	075a      	lsls	r2, r3, #29
 80099e8:	d505      	bpl.n	80099f6 <__sflush_r+0x46>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	1ac0      	subs	r0, r0, r3
 80099ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f0:	b10b      	cbz	r3, 80099f6 <__sflush_r+0x46>
 80099f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b0      	blx	r6
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	d106      	bne.n	8009a16 <__sflush_r+0x66>
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	291d      	cmp	r1, #29
 8009a0c:	d82c      	bhi.n	8009a68 <__sflush_r+0xb8>
 8009a0e:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <__sflush_r+0x108>)
 8009a10:	40ca      	lsrs	r2, r1
 8009a12:	07d6      	lsls	r6, r2, #31
 8009a14:	d528      	bpl.n	8009a68 <__sflush_r+0xb8>
 8009a16:	2200      	movs	r2, #0
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	04d9      	lsls	r1, r3, #19
 8009a1c:	6922      	ldr	r2, [r4, #16]
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	d504      	bpl.n	8009a2c <__sflush_r+0x7c>
 8009a22:	1c42      	adds	r2, r0, #1
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0x7a>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b903      	cbnz	r3, 8009a2c <__sflush_r+0x7c>
 8009a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d0ca      	beq.n	80099ca <__sflush_r+0x1a>
 8009a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d002      	beq.n	8009a42 <__sflush_r+0x92>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 fd7f 	bl	800a540 <_free_r>
 8009a42:	2000      	movs	r0, #0
 8009a44:	6360      	str	r0, [r4, #52]	; 0x34
 8009a46:	e7c1      	b.n	80099cc <__sflush_r+0x1c>
 8009a48:	6a21      	ldr	r1, [r4, #32]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b0      	blx	r6
 8009a50:	1c41      	adds	r1, r0, #1
 8009a52:	d1c7      	bne.n	80099e4 <__sflush_r+0x34>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0c4      	beq.n	80099e4 <__sflush_r+0x34>
 8009a5a:	2b1d      	cmp	r3, #29
 8009a5c:	d001      	beq.n	8009a62 <__sflush_r+0xb2>
 8009a5e:	2b16      	cmp	r3, #22
 8009a60:	d101      	bne.n	8009a66 <__sflush_r+0xb6>
 8009a62:	602f      	str	r7, [r5, #0]
 8009a64:	e7b1      	b.n	80099ca <__sflush_r+0x1a>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7ad      	b.n	80099cc <__sflush_r+0x1c>
 8009a70:	690f      	ldr	r7, [r1, #16]
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d0a9      	beq.n	80099ca <__sflush_r+0x1a>
 8009a76:	0793      	lsls	r3, r2, #30
 8009a78:	680e      	ldr	r6, [r1, #0]
 8009a7a:	bf08      	it	eq
 8009a7c:	694b      	ldreq	r3, [r1, #20]
 8009a7e:	600f      	str	r7, [r1, #0]
 8009a80:	bf18      	it	ne
 8009a82:	2300      	movne	r3, #0
 8009a84:	eba6 0807 	sub.w	r8, r6, r7
 8009a88:	608b      	str	r3, [r1, #8]
 8009a8a:	f1b8 0f00 	cmp.w	r8, #0
 8009a8e:	dd9c      	ble.n	80099ca <__sflush_r+0x1a>
 8009a90:	6a21      	ldr	r1, [r4, #32]
 8009a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a94:	4643      	mov	r3, r8
 8009a96:	463a      	mov	r2, r7
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b0      	blx	r6
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	dc06      	bgt.n	8009aae <__sflush_r+0xfe>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aac:	e78e      	b.n	80099cc <__sflush_r+0x1c>
 8009aae:	4407      	add	r7, r0
 8009ab0:	eba8 0800 	sub.w	r8, r8, r0
 8009ab4:	e7e9      	b.n	8009a8a <__sflush_r+0xda>
 8009ab6:	bf00      	nop
 8009ab8:	20400001 	.word	0x20400001

08009abc <_fflush_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	690b      	ldr	r3, [r1, #16]
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	b913      	cbnz	r3, 8009acc <_fflush_r+0x10>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	b118      	cbz	r0, 8009ad6 <_fflush_r+0x1a>
 8009ace:	6983      	ldr	r3, [r0, #24]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <_fflush_r+0x1a>
 8009ad2:	f000 f887 	bl	8009be4 <__sinit>
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <_fflush_r+0x6c>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	d11b      	bne.n	8009b14 <_fflush_r+0x58>
 8009adc:	686c      	ldr	r4, [r5, #4]
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0ef      	beq.n	8009ac6 <_fflush_r+0xa>
 8009ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae8:	07d0      	lsls	r0, r2, #31
 8009aea:	d404      	bmi.n	8009af6 <_fflush_r+0x3a>
 8009aec:	0599      	lsls	r1, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_fflush_r+0x3a>
 8009af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009af2:	f000 f91a 	bl	8009d2a <__retarget_lock_acquire_recursive>
 8009af6:	4628      	mov	r0, r5
 8009af8:	4621      	mov	r1, r4
 8009afa:	f7ff ff59 	bl	80099b0 <__sflush_r>
 8009afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b00:	07da      	lsls	r2, r3, #31
 8009b02:	4605      	mov	r5, r0
 8009b04:	d4e0      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	059b      	lsls	r3, r3, #22
 8009b0a:	d4dd      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0e:	f000 f90d 	bl	8009d2c <__retarget_lock_release_recursive>
 8009b12:	e7d9      	b.n	8009ac8 <_fflush_r+0xc>
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <_fflush_r+0x70>)
 8009b16:	429c      	cmp	r4, r3
 8009b18:	d101      	bne.n	8009b1e <_fflush_r+0x62>
 8009b1a:	68ac      	ldr	r4, [r5, #8]
 8009b1c:	e7df      	b.n	8009ade <_fflush_r+0x22>
 8009b1e:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <_fflush_r+0x74>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	bf08      	it	eq
 8009b24:	68ec      	ldreq	r4, [r5, #12]
 8009b26:	e7da      	b.n	8009ade <_fflush_r+0x22>
 8009b28:	0800d5ec 	.word	0x0800d5ec
 8009b2c:	0800d60c 	.word	0x0800d60c
 8009b30:	0800d5cc 	.word	0x0800d5cc

08009b34 <std>:
 8009b34:	2300      	movs	r3, #0
 8009b36:	b510      	push	{r4, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b42:	6083      	str	r3, [r0, #8]
 8009b44:	8181      	strh	r1, [r0, #12]
 8009b46:	6643      	str	r3, [r0, #100]	; 0x64
 8009b48:	81c2      	strh	r2, [r0, #14]
 8009b4a:	6183      	str	r3, [r0, #24]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	2208      	movs	r2, #8
 8009b50:	305c      	adds	r0, #92	; 0x5c
 8009b52:	f7fe fa1f 	bl	8007f94 <memset>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <std+0x38>)
 8009b58:	6263      	str	r3, [r4, #36]	; 0x24
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x3c>)
 8009b5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <std+0x40>)
 8009b60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <std+0x44>)
 8009b64:	6224      	str	r4, [r4, #32]
 8009b66:	6323      	str	r3, [r4, #48]	; 0x30
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800a969 	.word	0x0800a969
 8009b70:	0800a98b 	.word	0x0800a98b
 8009b74:	0800a9c3 	.word	0x0800a9c3
 8009b78:	0800a9e7 	.word	0x0800a9e7

08009b7c <_cleanup_r>:
 8009b7c:	4901      	ldr	r1, [pc, #4]	; (8009b84 <_cleanup_r+0x8>)
 8009b7e:	f000 b8af 	b.w	8009ce0 <_fwalk_reent>
 8009b82:	bf00      	nop
 8009b84:	08009abd 	.word	0x08009abd

08009b88 <__sfmoreglue>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	1e4a      	subs	r2, r1, #1
 8009b8c:	2568      	movs	r5, #104	; 0x68
 8009b8e:	4355      	muls	r5, r2
 8009b90:	460e      	mov	r6, r1
 8009b92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b96:	f000 fd23 	bl	800a5e0 <_malloc_r>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	b140      	cbz	r0, 8009bb0 <__sfmoreglue+0x28>
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba4:	300c      	adds	r0, #12
 8009ba6:	60a0      	str	r0, [r4, #8]
 8009ba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bac:	f7fe f9f2 	bl	8007f94 <memset>
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}

08009bb4 <__sfp_lock_acquire>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__sfp_lock_acquire+0x8>)
 8009bb6:	f000 b8b8 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 8009bba:	bf00      	nop
 8009bbc:	20000878 	.word	0x20000878

08009bc0 <__sfp_lock_release>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__sfp_lock_release+0x8>)
 8009bc2:	f000 b8b3 	b.w	8009d2c <__retarget_lock_release_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20000878 	.word	0x20000878

08009bcc <__sinit_lock_acquire>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <__sinit_lock_acquire+0x8>)
 8009bce:	f000 b8ac 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20000873 	.word	0x20000873

08009bd8 <__sinit_lock_release>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__sinit_lock_release+0x8>)
 8009bda:	f000 b8a7 	b.w	8009d2c <__retarget_lock_release_recursive>
 8009bde:	bf00      	nop
 8009be0:	20000873 	.word	0x20000873

08009be4 <__sinit>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	4604      	mov	r4, r0
 8009be8:	f7ff fff0 	bl	8009bcc <__sinit_lock_acquire>
 8009bec:	69a3      	ldr	r3, [r4, #24]
 8009bee:	b11b      	cbz	r3, 8009bf8 <__sinit+0x14>
 8009bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf4:	f7ff bff0 	b.w	8009bd8 <__sinit_lock_release>
 8009bf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bfc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bfe:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <__sinit+0x68>)
 8009c00:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <__sinit+0x6c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	bf04      	itt	eq
 8009c0a:	2301      	moveq	r3, #1
 8009c0c:	61a3      	streq	r3, [r4, #24]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f820 	bl	8009c54 <__sfp>
 8009c14:	6060      	str	r0, [r4, #4]
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 f81c 	bl	8009c54 <__sfp>
 8009c1c:	60a0      	str	r0, [r4, #8]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 f818 	bl	8009c54 <__sfp>
 8009c24:	2200      	movs	r2, #0
 8009c26:	60e0      	str	r0, [r4, #12]
 8009c28:	2104      	movs	r1, #4
 8009c2a:	6860      	ldr	r0, [r4, #4]
 8009c2c:	f7ff ff82 	bl	8009b34 <std>
 8009c30:	68a0      	ldr	r0, [r4, #8]
 8009c32:	2201      	movs	r2, #1
 8009c34:	2109      	movs	r1, #9
 8009c36:	f7ff ff7d 	bl	8009b34 <std>
 8009c3a:	68e0      	ldr	r0, [r4, #12]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	2112      	movs	r1, #18
 8009c40:	f7ff ff78 	bl	8009b34 <std>
 8009c44:	2301      	movs	r3, #1
 8009c46:	61a3      	str	r3, [r4, #24]
 8009c48:	e7d2      	b.n	8009bf0 <__sinit+0xc>
 8009c4a:	bf00      	nop
 8009c4c:	0800d3fc 	.word	0x0800d3fc
 8009c50:	08009b7d 	.word	0x08009b7d

08009c54 <__sfp>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	4607      	mov	r7, r0
 8009c58:	f7ff ffac 	bl	8009bb4 <__sfp_lock_acquire>
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <__sfp+0x84>)
 8009c5e:	681e      	ldr	r6, [r3, #0]
 8009c60:	69b3      	ldr	r3, [r6, #24]
 8009c62:	b913      	cbnz	r3, 8009c6a <__sfp+0x16>
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff ffbd 	bl	8009be4 <__sinit>
 8009c6a:	3648      	adds	r6, #72	; 0x48
 8009c6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	d503      	bpl.n	8009c7c <__sfp+0x28>
 8009c74:	6833      	ldr	r3, [r6, #0]
 8009c76:	b30b      	cbz	r3, 8009cbc <__sfp+0x68>
 8009c78:	6836      	ldr	r6, [r6, #0]
 8009c7a:	e7f7      	b.n	8009c6c <__sfp+0x18>
 8009c7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c80:	b9d5      	cbnz	r5, 8009cb8 <__sfp+0x64>
 8009c82:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <__sfp+0x88>)
 8009c84:	60e3      	str	r3, [r4, #12]
 8009c86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c8a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c8c:	f000 f84c 	bl	8009d28 <__retarget_lock_init_recursive>
 8009c90:	f7ff ff96 	bl	8009bc0 <__sfp_lock_release>
 8009c94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c9c:	6025      	str	r5, [r4, #0]
 8009c9e:	61a5      	str	r5, [r4, #24]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca8:	f7fe f974 	bl	8007f94 <memset>
 8009cac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb8:	3468      	adds	r4, #104	; 0x68
 8009cba:	e7d9      	b.n	8009c70 <__sfp+0x1c>
 8009cbc:	2104      	movs	r1, #4
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f7ff ff62 	bl	8009b88 <__sfmoreglue>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	6030      	str	r0, [r6, #0]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1d5      	bne.n	8009c78 <__sfp+0x24>
 8009ccc:	f7ff ff78 	bl	8009bc0 <__sfp_lock_release>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	e7ee      	b.n	8009cb4 <__sfp+0x60>
 8009cd6:	bf00      	nop
 8009cd8:	0800d3fc 	.word	0x0800d3fc
 8009cdc:	ffff0001 	.word	0xffff0001

08009ce0 <_fwalk_reent>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	4688      	mov	r8, r1
 8009ce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cec:	2700      	movs	r7, #0
 8009cee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cf2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf6:	d505      	bpl.n	8009d04 <_fwalk_reent+0x24>
 8009cf8:	6824      	ldr	r4, [r4, #0]
 8009cfa:	2c00      	cmp	r4, #0
 8009cfc:	d1f7      	bne.n	8009cee <_fwalk_reent+0xe>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d04:	89ab      	ldrh	r3, [r5, #12]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d907      	bls.n	8009d1a <_fwalk_reent+0x3a>
 8009d0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	d003      	beq.n	8009d1a <_fwalk_reent+0x3a>
 8009d12:	4629      	mov	r1, r5
 8009d14:	4630      	mov	r0, r6
 8009d16:	47c0      	blx	r8
 8009d18:	4307      	orrs	r7, r0
 8009d1a:	3568      	adds	r5, #104	; 0x68
 8009d1c:	e7e9      	b.n	8009cf2 <_fwalk_reent+0x12>
	...

08009d20 <_localeconv_r>:
 8009d20:	4800      	ldr	r0, [pc, #0]	; (8009d24 <_localeconv_r+0x4>)
 8009d22:	4770      	bx	lr
 8009d24:	20000228 	.word	0x20000228

08009d28 <__retarget_lock_init_recursive>:
 8009d28:	4770      	bx	lr

08009d2a <__retarget_lock_acquire_recursive>:
 8009d2a:	4770      	bx	lr

08009d2c <__retarget_lock_release_recursive>:
 8009d2c:	4770      	bx	lr

08009d2e <__swhatbuf_r>:
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	460e      	mov	r6, r1
 8009d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d36:	2900      	cmp	r1, #0
 8009d38:	b096      	sub	sp, #88	; 0x58
 8009d3a:	4614      	mov	r4, r2
 8009d3c:	461d      	mov	r5, r3
 8009d3e:	da07      	bge.n	8009d50 <__swhatbuf_r+0x22>
 8009d40:	2300      	movs	r3, #0
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	89b3      	ldrh	r3, [r6, #12]
 8009d46:	061a      	lsls	r2, r3, #24
 8009d48:	d410      	bmi.n	8009d6c <__swhatbuf_r+0x3e>
 8009d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4e:	e00e      	b.n	8009d6e <__swhatbuf_r+0x40>
 8009d50:	466a      	mov	r2, sp
 8009d52:	f000 fe9f 	bl	800aa94 <_fstat_r>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	dbf2      	blt.n	8009d40 <__swhatbuf_r+0x12>
 8009d5a:	9a01      	ldr	r2, [sp, #4]
 8009d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d64:	425a      	negs	r2, r3
 8009d66:	415a      	adcs	r2, r3
 8009d68:	602a      	str	r2, [r5, #0]
 8009d6a:	e7ee      	b.n	8009d4a <__swhatbuf_r+0x1c>
 8009d6c:	2340      	movs	r3, #64	; 0x40
 8009d6e:	2000      	movs	r0, #0
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	b016      	add	sp, #88	; 0x58
 8009d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d78 <__smakebuf_r>:
 8009d78:	898b      	ldrh	r3, [r1, #12]
 8009d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d7c:	079d      	lsls	r5, r3, #30
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	d507      	bpl.n	8009d94 <__smakebuf_r+0x1c>
 8009d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	6123      	str	r3, [r4, #16]
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	6163      	str	r3, [r4, #20]
 8009d90:	b002      	add	sp, #8
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	ab01      	add	r3, sp, #4
 8009d96:	466a      	mov	r2, sp
 8009d98:	f7ff ffc9 	bl	8009d2e <__swhatbuf_r>
 8009d9c:	9900      	ldr	r1, [sp, #0]
 8009d9e:	4605      	mov	r5, r0
 8009da0:	4630      	mov	r0, r6
 8009da2:	f000 fc1d 	bl	800a5e0 <_malloc_r>
 8009da6:	b948      	cbnz	r0, 8009dbc <__smakebuf_r+0x44>
 8009da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dac:	059a      	lsls	r2, r3, #22
 8009dae:	d4ef      	bmi.n	8009d90 <__smakebuf_r+0x18>
 8009db0:	f023 0303 	bic.w	r3, r3, #3
 8009db4:	f043 0302 	orr.w	r3, r3, #2
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	e7e3      	b.n	8009d84 <__smakebuf_r+0xc>
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <__smakebuf_r+0x7c>)
 8009dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	6020      	str	r0, [r4, #0]
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	9b00      	ldr	r3, [sp, #0]
 8009dcc:	6163      	str	r3, [r4, #20]
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	6120      	str	r0, [r4, #16]
 8009dd2:	b15b      	cbz	r3, 8009dec <__smakebuf_r+0x74>
 8009dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f000 fe6d 	bl	800aab8 <_isatty_r>
 8009dde:	b128      	cbz	r0, 8009dec <__smakebuf_r+0x74>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f023 0303 	bic.w	r3, r3, #3
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	89a0      	ldrh	r0, [r4, #12]
 8009dee:	4305      	orrs	r5, r0
 8009df0:	81a5      	strh	r5, [r4, #12]
 8009df2:	e7cd      	b.n	8009d90 <__smakebuf_r+0x18>
 8009df4:	08009b7d 	.word	0x08009b7d

08009df8 <malloc>:
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <malloc+0xc>)
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f000 bbef 	b.w	800a5e0 <_malloc_r>
 8009e02:	bf00      	nop
 8009e04:	200000d4 	.word	0x200000d4

08009e08 <memcpy>:
 8009e08:	440a      	add	r2, r1
 8009e0a:	4291      	cmp	r1, r2
 8009e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e10:	d100      	bne.n	8009e14 <memcpy+0xc>
 8009e12:	4770      	bx	lr
 8009e14:	b510      	push	{r4, lr}
 8009e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e1e:	4291      	cmp	r1, r2
 8009e20:	d1f9      	bne.n	8009e16 <memcpy+0xe>
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <_Balloc>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e28:	4604      	mov	r4, r0
 8009e2a:	460d      	mov	r5, r1
 8009e2c:	b976      	cbnz	r6, 8009e4c <_Balloc+0x28>
 8009e2e:	2010      	movs	r0, #16
 8009e30:	f7ff ffe2 	bl	8009df8 <malloc>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6260      	str	r0, [r4, #36]	; 0x24
 8009e38:	b920      	cbnz	r0, 8009e44 <_Balloc+0x20>
 8009e3a:	4b18      	ldr	r3, [pc, #96]	; (8009e9c <_Balloc+0x78>)
 8009e3c:	4818      	ldr	r0, [pc, #96]	; (8009ea0 <_Balloc+0x7c>)
 8009e3e:	2166      	movs	r1, #102	; 0x66
 8009e40:	f000 fde8 	bl	800aa14 <__assert_func>
 8009e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e48:	6006      	str	r6, [r0, #0]
 8009e4a:	60c6      	str	r6, [r0, #12]
 8009e4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e4e:	68f3      	ldr	r3, [r6, #12]
 8009e50:	b183      	cbz	r3, 8009e74 <_Balloc+0x50>
 8009e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e5a:	b9b8      	cbnz	r0, 8009e8c <_Balloc+0x68>
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8009e62:	1d72      	adds	r2, r6, #5
 8009e64:	0092      	lsls	r2, r2, #2
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fb5a 	bl	800a520 <_calloc_r>
 8009e6c:	b160      	cbz	r0, 8009e88 <_Balloc+0x64>
 8009e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e72:	e00e      	b.n	8009e92 <_Balloc+0x6e>
 8009e74:	2221      	movs	r2, #33	; 0x21
 8009e76:	2104      	movs	r1, #4
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f000 fb51 	bl	800a520 <_calloc_r>
 8009e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e80:	60f0      	str	r0, [r6, #12]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e4      	bne.n	8009e52 <_Balloc+0x2e>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	6802      	ldr	r2, [r0, #0]
 8009e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e92:	2300      	movs	r3, #0
 8009e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e98:	e7f7      	b.n	8009e8a <_Balloc+0x66>
 8009e9a:	bf00      	nop
 8009e9c:	0800d542 	.word	0x0800d542
 8009ea0:	0800d62c 	.word	0x0800d62c

08009ea4 <_Bfree>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	460c      	mov	r4, r1
 8009eac:	b976      	cbnz	r6, 8009ecc <_Bfree+0x28>
 8009eae:	2010      	movs	r0, #16
 8009eb0:	f7ff ffa2 	bl	8009df8 <malloc>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	6268      	str	r0, [r5, #36]	; 0x24
 8009eb8:	b920      	cbnz	r0, 8009ec4 <_Bfree+0x20>
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <_Bfree+0x3c>)
 8009ebc:	4809      	ldr	r0, [pc, #36]	; (8009ee4 <_Bfree+0x40>)
 8009ebe:	218a      	movs	r1, #138	; 0x8a
 8009ec0:	f000 fda8 	bl	800aa14 <__assert_func>
 8009ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec8:	6006      	str	r6, [r0, #0]
 8009eca:	60c6      	str	r6, [r0, #12]
 8009ecc:	b13c      	cbz	r4, 8009ede <_Bfree+0x3a>
 8009ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ed0:	6862      	ldr	r2, [r4, #4]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ed8:	6021      	str	r1, [r4, #0]
 8009eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	0800d542 	.word	0x0800d542
 8009ee4:	0800d62c 	.word	0x0800d62c

08009ee8 <__multadd>:
 8009ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eec:	690e      	ldr	r6, [r1, #16]
 8009eee:	4607      	mov	r7, r0
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	f101 0014 	add.w	r0, r1, #20
 8009ef8:	2300      	movs	r3, #0
 8009efa:	6805      	ldr	r5, [r0, #0]
 8009efc:	b2a9      	uxth	r1, r5
 8009efe:	fb02 8101 	mla	r1, r2, r1, r8
 8009f02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009f06:	0c2d      	lsrs	r5, r5, #16
 8009f08:	fb02 c505 	mla	r5, r2, r5, ip
 8009f0c:	b289      	uxth	r1, r1
 8009f0e:	3301      	adds	r3, #1
 8009f10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009f14:	429e      	cmp	r6, r3
 8009f16:	f840 1b04 	str.w	r1, [r0], #4
 8009f1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009f1e:	dcec      	bgt.n	8009efa <__multadd+0x12>
 8009f20:	f1b8 0f00 	cmp.w	r8, #0
 8009f24:	d022      	beq.n	8009f6c <__multadd+0x84>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	dc19      	bgt.n	8009f60 <__multadd+0x78>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	3101      	adds	r1, #1
 8009f32:	f7ff ff77 	bl	8009e24 <_Balloc>
 8009f36:	4605      	mov	r5, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__multadd+0x5e>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <__multadd+0x8c>)
 8009f3e:	480e      	ldr	r0, [pc, #56]	; (8009f78 <__multadd+0x90>)
 8009f40:	21b5      	movs	r1, #181	; 0xb5
 8009f42:	f000 fd67 	bl	800aa14 <__assert_func>
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	3202      	adds	r2, #2
 8009f4a:	f104 010c 	add.w	r1, r4, #12
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	300c      	adds	r0, #12
 8009f52:	f7ff ff59 	bl	8009e08 <memcpy>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ffa3 	bl	8009ea4 <_Bfree>
 8009f5e:	462c      	mov	r4, r5
 8009f60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f64:	3601      	adds	r6, #1
 8009f66:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f6a:	6126      	str	r6, [r4, #16]
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f72:	bf00      	nop
 8009f74:	0800d5b8 	.word	0x0800d5b8
 8009f78:	0800d62c 	.word	0x0800d62c

08009f7c <__hi0bits>:
 8009f7c:	0c03      	lsrs	r3, r0, #16
 8009f7e:	041b      	lsls	r3, r3, #16
 8009f80:	b9d3      	cbnz	r3, 8009fb8 <__hi0bits+0x3c>
 8009f82:	0400      	lsls	r0, r0, #16
 8009f84:	2310      	movs	r3, #16
 8009f86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f8a:	bf04      	itt	eq
 8009f8c:	0200      	lsleq	r0, r0, #8
 8009f8e:	3308      	addeq	r3, #8
 8009f90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f94:	bf04      	itt	eq
 8009f96:	0100      	lsleq	r0, r0, #4
 8009f98:	3304      	addeq	r3, #4
 8009f9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f9e:	bf04      	itt	eq
 8009fa0:	0080      	lsleq	r0, r0, #2
 8009fa2:	3302      	addeq	r3, #2
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	db05      	blt.n	8009fb4 <__hi0bits+0x38>
 8009fa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009fac:	f103 0301 	add.w	r3, r3, #1
 8009fb0:	bf08      	it	eq
 8009fb2:	2320      	moveq	r3, #32
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	4770      	bx	lr
 8009fb8:	2300      	movs	r3, #0
 8009fba:	e7e4      	b.n	8009f86 <__hi0bits+0xa>

08009fbc <__lo0bits>:
 8009fbc:	6803      	ldr	r3, [r0, #0]
 8009fbe:	f013 0207 	ands.w	r2, r3, #7
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	d00b      	beq.n	8009fde <__lo0bits+0x22>
 8009fc6:	07da      	lsls	r2, r3, #31
 8009fc8:	d424      	bmi.n	800a014 <__lo0bits+0x58>
 8009fca:	0798      	lsls	r0, r3, #30
 8009fcc:	bf49      	itett	mi
 8009fce:	085b      	lsrmi	r3, r3, #1
 8009fd0:	089b      	lsrpl	r3, r3, #2
 8009fd2:	2001      	movmi	r0, #1
 8009fd4:	600b      	strmi	r3, [r1, #0]
 8009fd6:	bf5c      	itt	pl
 8009fd8:	600b      	strpl	r3, [r1, #0]
 8009fda:	2002      	movpl	r0, #2
 8009fdc:	4770      	bx	lr
 8009fde:	b298      	uxth	r0, r3
 8009fe0:	b9b0      	cbnz	r0, 800a010 <__lo0bits+0x54>
 8009fe2:	0c1b      	lsrs	r3, r3, #16
 8009fe4:	2010      	movs	r0, #16
 8009fe6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fea:	bf04      	itt	eq
 8009fec:	0a1b      	lsreq	r3, r3, #8
 8009fee:	3008      	addeq	r0, #8
 8009ff0:	071a      	lsls	r2, r3, #28
 8009ff2:	bf04      	itt	eq
 8009ff4:	091b      	lsreq	r3, r3, #4
 8009ff6:	3004      	addeq	r0, #4
 8009ff8:	079a      	lsls	r2, r3, #30
 8009ffa:	bf04      	itt	eq
 8009ffc:	089b      	lsreq	r3, r3, #2
 8009ffe:	3002      	addeq	r0, #2
 800a000:	07da      	lsls	r2, r3, #31
 800a002:	d403      	bmi.n	800a00c <__lo0bits+0x50>
 800a004:	085b      	lsrs	r3, r3, #1
 800a006:	f100 0001 	add.w	r0, r0, #1
 800a00a:	d005      	beq.n	800a018 <__lo0bits+0x5c>
 800a00c:	600b      	str	r3, [r1, #0]
 800a00e:	4770      	bx	lr
 800a010:	4610      	mov	r0, r2
 800a012:	e7e8      	b.n	8009fe6 <__lo0bits+0x2a>
 800a014:	2000      	movs	r0, #0
 800a016:	4770      	bx	lr
 800a018:	2020      	movs	r0, #32
 800a01a:	4770      	bx	lr

0800a01c <__i2b>:
 800a01c:	b510      	push	{r4, lr}
 800a01e:	460c      	mov	r4, r1
 800a020:	2101      	movs	r1, #1
 800a022:	f7ff feff 	bl	8009e24 <_Balloc>
 800a026:	4602      	mov	r2, r0
 800a028:	b928      	cbnz	r0, 800a036 <__i2b+0x1a>
 800a02a:	4b05      	ldr	r3, [pc, #20]	; (800a040 <__i2b+0x24>)
 800a02c:	4805      	ldr	r0, [pc, #20]	; (800a044 <__i2b+0x28>)
 800a02e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a032:	f000 fcef 	bl	800aa14 <__assert_func>
 800a036:	2301      	movs	r3, #1
 800a038:	6144      	str	r4, [r0, #20]
 800a03a:	6103      	str	r3, [r0, #16]
 800a03c:	bd10      	pop	{r4, pc}
 800a03e:	bf00      	nop
 800a040:	0800d5b8 	.word	0x0800d5b8
 800a044:	0800d62c 	.word	0x0800d62c

0800a048 <__multiply>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	4614      	mov	r4, r2
 800a04e:	690a      	ldr	r2, [r1, #16]
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	429a      	cmp	r2, r3
 800a054:	bfb8      	it	lt
 800a056:	460b      	movlt	r3, r1
 800a058:	460d      	mov	r5, r1
 800a05a:	bfbc      	itt	lt
 800a05c:	4625      	movlt	r5, r4
 800a05e:	461c      	movlt	r4, r3
 800a060:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a064:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a068:	68ab      	ldr	r3, [r5, #8]
 800a06a:	6869      	ldr	r1, [r5, #4]
 800a06c:	eb0a 0709 	add.w	r7, sl, r9
 800a070:	42bb      	cmp	r3, r7
 800a072:	b085      	sub	sp, #20
 800a074:	bfb8      	it	lt
 800a076:	3101      	addlt	r1, #1
 800a078:	f7ff fed4 	bl	8009e24 <_Balloc>
 800a07c:	b930      	cbnz	r0, 800a08c <__multiply+0x44>
 800a07e:	4602      	mov	r2, r0
 800a080:	4b42      	ldr	r3, [pc, #264]	; (800a18c <__multiply+0x144>)
 800a082:	4843      	ldr	r0, [pc, #268]	; (800a190 <__multiply+0x148>)
 800a084:	f240 115d 	movw	r1, #349	; 0x15d
 800a088:	f000 fcc4 	bl	800aa14 <__assert_func>
 800a08c:	f100 0614 	add.w	r6, r0, #20
 800a090:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a094:	4633      	mov	r3, r6
 800a096:	2200      	movs	r2, #0
 800a098:	4543      	cmp	r3, r8
 800a09a:	d31e      	bcc.n	800a0da <__multiply+0x92>
 800a09c:	f105 0c14 	add.w	ip, r5, #20
 800a0a0:	f104 0314 	add.w	r3, r4, #20
 800a0a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a0a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a0ac:	9202      	str	r2, [sp, #8]
 800a0ae:	ebac 0205 	sub.w	r2, ip, r5
 800a0b2:	3a15      	subs	r2, #21
 800a0b4:	f022 0203 	bic.w	r2, r2, #3
 800a0b8:	3204      	adds	r2, #4
 800a0ba:	f105 0115 	add.w	r1, r5, #21
 800a0be:	458c      	cmp	ip, r1
 800a0c0:	bf38      	it	cc
 800a0c2:	2204      	movcc	r2, #4
 800a0c4:	9201      	str	r2, [sp, #4]
 800a0c6:	9a02      	ldr	r2, [sp, #8]
 800a0c8:	9303      	str	r3, [sp, #12]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d808      	bhi.n	800a0e0 <__multiply+0x98>
 800a0ce:	2f00      	cmp	r7, #0
 800a0d0:	dc55      	bgt.n	800a17e <__multiply+0x136>
 800a0d2:	6107      	str	r7, [r0, #16]
 800a0d4:	b005      	add	sp, #20
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	f843 2b04 	str.w	r2, [r3], #4
 800a0de:	e7db      	b.n	800a098 <__multiply+0x50>
 800a0e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0e4:	f1ba 0f00 	cmp.w	sl, #0
 800a0e8:	d020      	beq.n	800a12c <__multiply+0xe4>
 800a0ea:	f105 0e14 	add.w	lr, r5, #20
 800a0ee:	46b1      	mov	r9, r6
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a0f6:	f8d9 b000 	ldr.w	fp, [r9]
 800a0fa:	b2a1      	uxth	r1, r4
 800a0fc:	fa1f fb8b 	uxth.w	fp, fp
 800a100:	fb0a b101 	mla	r1, sl, r1, fp
 800a104:	4411      	add	r1, r2
 800a106:	f8d9 2000 	ldr.w	r2, [r9]
 800a10a:	0c24      	lsrs	r4, r4, #16
 800a10c:	0c12      	lsrs	r2, r2, #16
 800a10e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a112:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a116:	b289      	uxth	r1, r1
 800a118:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a11c:	45f4      	cmp	ip, lr
 800a11e:	f849 1b04 	str.w	r1, [r9], #4
 800a122:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a126:	d8e4      	bhi.n	800a0f2 <__multiply+0xaa>
 800a128:	9901      	ldr	r1, [sp, #4]
 800a12a:	5072      	str	r2, [r6, r1]
 800a12c:	9a03      	ldr	r2, [sp, #12]
 800a12e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a132:	3304      	adds	r3, #4
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	d01f      	beq.n	800a17a <__multiply+0x132>
 800a13a:	6834      	ldr	r4, [r6, #0]
 800a13c:	f105 0114 	add.w	r1, r5, #20
 800a140:	46b6      	mov	lr, r6
 800a142:	f04f 0a00 	mov.w	sl, #0
 800a146:	880a      	ldrh	r2, [r1, #0]
 800a148:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a14c:	fb09 b202 	mla	r2, r9, r2, fp
 800a150:	4492      	add	sl, r2
 800a152:	b2a4      	uxth	r4, r4
 800a154:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a158:	f84e 4b04 	str.w	r4, [lr], #4
 800a15c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a160:	f8be 2000 	ldrh.w	r2, [lr]
 800a164:	0c24      	lsrs	r4, r4, #16
 800a166:	fb09 2404 	mla	r4, r9, r4, r2
 800a16a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a16e:	458c      	cmp	ip, r1
 800a170:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a174:	d8e7      	bhi.n	800a146 <__multiply+0xfe>
 800a176:	9a01      	ldr	r2, [sp, #4]
 800a178:	50b4      	str	r4, [r6, r2]
 800a17a:	3604      	adds	r6, #4
 800a17c:	e7a3      	b.n	800a0c6 <__multiply+0x7e>
 800a17e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1a5      	bne.n	800a0d2 <__multiply+0x8a>
 800a186:	3f01      	subs	r7, #1
 800a188:	e7a1      	b.n	800a0ce <__multiply+0x86>
 800a18a:	bf00      	nop
 800a18c:	0800d5b8 	.word	0x0800d5b8
 800a190:	0800d62c 	.word	0x0800d62c

0800a194 <__pow5mult>:
 800a194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a198:	4615      	mov	r5, r2
 800a19a:	f012 0203 	ands.w	r2, r2, #3
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	d007      	beq.n	800a1b4 <__pow5mult+0x20>
 800a1a4:	4c25      	ldr	r4, [pc, #148]	; (800a23c <__pow5mult+0xa8>)
 800a1a6:	3a01      	subs	r2, #1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1ae:	f7ff fe9b 	bl	8009ee8 <__multadd>
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	10ad      	asrs	r5, r5, #2
 800a1b6:	d03d      	beq.n	800a234 <__pow5mult+0xa0>
 800a1b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1ba:	b97c      	cbnz	r4, 800a1dc <__pow5mult+0x48>
 800a1bc:	2010      	movs	r0, #16
 800a1be:	f7ff fe1b 	bl	8009df8 <malloc>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	6270      	str	r0, [r6, #36]	; 0x24
 800a1c6:	b928      	cbnz	r0, 800a1d4 <__pow5mult+0x40>
 800a1c8:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <__pow5mult+0xac>)
 800a1ca:	481e      	ldr	r0, [pc, #120]	; (800a244 <__pow5mult+0xb0>)
 800a1cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1d0:	f000 fc20 	bl	800aa14 <__assert_func>
 800a1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1d8:	6004      	str	r4, [r0, #0]
 800a1da:	60c4      	str	r4, [r0, #12]
 800a1dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1e4:	b94c      	cbnz	r4, 800a1fa <__pow5mult+0x66>
 800a1e6:	f240 2171 	movw	r1, #625	; 0x271
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7ff ff16 	bl	800a01c <__i2b>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	6003      	str	r3, [r0, #0]
 800a1fa:	f04f 0900 	mov.w	r9, #0
 800a1fe:	07eb      	lsls	r3, r5, #31
 800a200:	d50a      	bpl.n	800a218 <__pow5mult+0x84>
 800a202:	4639      	mov	r1, r7
 800a204:	4622      	mov	r2, r4
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff ff1e 	bl	800a048 <__multiply>
 800a20c:	4639      	mov	r1, r7
 800a20e:	4680      	mov	r8, r0
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff fe47 	bl	8009ea4 <_Bfree>
 800a216:	4647      	mov	r7, r8
 800a218:	106d      	asrs	r5, r5, #1
 800a21a:	d00b      	beq.n	800a234 <__pow5mult+0xa0>
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	b938      	cbnz	r0, 800a230 <__pow5mult+0x9c>
 800a220:	4622      	mov	r2, r4
 800a222:	4621      	mov	r1, r4
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff ff0f 	bl	800a048 <__multiply>
 800a22a:	6020      	str	r0, [r4, #0]
 800a22c:	f8c0 9000 	str.w	r9, [r0]
 800a230:	4604      	mov	r4, r0
 800a232:	e7e4      	b.n	800a1fe <__pow5mult+0x6a>
 800a234:	4638      	mov	r0, r7
 800a236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23a:	bf00      	nop
 800a23c:	0800d780 	.word	0x0800d780
 800a240:	0800d542 	.word	0x0800d542
 800a244:	0800d62c 	.word	0x0800d62c

0800a248 <__lshift>:
 800a248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	6849      	ldr	r1, [r1, #4]
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	4607      	mov	r7, r0
 800a25a:	4691      	mov	r9, r2
 800a25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a260:	f108 0601 	add.w	r6, r8, #1
 800a264:	42b3      	cmp	r3, r6
 800a266:	db0b      	blt.n	800a280 <__lshift+0x38>
 800a268:	4638      	mov	r0, r7
 800a26a:	f7ff fddb 	bl	8009e24 <_Balloc>
 800a26e:	4605      	mov	r5, r0
 800a270:	b948      	cbnz	r0, 800a286 <__lshift+0x3e>
 800a272:	4602      	mov	r2, r0
 800a274:	4b28      	ldr	r3, [pc, #160]	; (800a318 <__lshift+0xd0>)
 800a276:	4829      	ldr	r0, [pc, #164]	; (800a31c <__lshift+0xd4>)
 800a278:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a27c:	f000 fbca 	bl	800aa14 <__assert_func>
 800a280:	3101      	adds	r1, #1
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	e7ee      	b.n	800a264 <__lshift+0x1c>
 800a286:	2300      	movs	r3, #0
 800a288:	f100 0114 	add.w	r1, r0, #20
 800a28c:	f100 0210 	add.w	r2, r0, #16
 800a290:	4618      	mov	r0, r3
 800a292:	4553      	cmp	r3, sl
 800a294:	db33      	blt.n	800a2fe <__lshift+0xb6>
 800a296:	6920      	ldr	r0, [r4, #16]
 800a298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a29c:	f104 0314 	add.w	r3, r4, #20
 800a2a0:	f019 091f 	ands.w	r9, r9, #31
 800a2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2ac:	d02b      	beq.n	800a306 <__lshift+0xbe>
 800a2ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a2b2:	468a      	mov	sl, r1
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	fa00 f009 	lsl.w	r0, r0, r9
 800a2bc:	4302      	orrs	r2, r0
 800a2be:	f84a 2b04 	str.w	r2, [sl], #4
 800a2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c6:	459c      	cmp	ip, r3
 800a2c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2cc:	d8f3      	bhi.n	800a2b6 <__lshift+0x6e>
 800a2ce:	ebac 0304 	sub.w	r3, ip, r4
 800a2d2:	3b15      	subs	r3, #21
 800a2d4:	f023 0303 	bic.w	r3, r3, #3
 800a2d8:	3304      	adds	r3, #4
 800a2da:	f104 0015 	add.w	r0, r4, #21
 800a2de:	4584      	cmp	ip, r0
 800a2e0:	bf38      	it	cc
 800a2e2:	2304      	movcc	r3, #4
 800a2e4:	50ca      	str	r2, [r1, r3]
 800a2e6:	b10a      	cbz	r2, 800a2ec <__lshift+0xa4>
 800a2e8:	f108 0602 	add.w	r6, r8, #2
 800a2ec:	3e01      	subs	r6, #1
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	612e      	str	r6, [r5, #16]
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	f7ff fdd6 	bl	8009ea4 <_Bfree>
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a302:	3301      	adds	r3, #1
 800a304:	e7c5      	b.n	800a292 <__lshift+0x4a>
 800a306:	3904      	subs	r1, #4
 800a308:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a310:	459c      	cmp	ip, r3
 800a312:	d8f9      	bhi.n	800a308 <__lshift+0xc0>
 800a314:	e7ea      	b.n	800a2ec <__lshift+0xa4>
 800a316:	bf00      	nop
 800a318:	0800d5b8 	.word	0x0800d5b8
 800a31c:	0800d62c 	.word	0x0800d62c

0800a320 <__mcmp>:
 800a320:	b530      	push	{r4, r5, lr}
 800a322:	6902      	ldr	r2, [r0, #16]
 800a324:	690c      	ldr	r4, [r1, #16]
 800a326:	1b12      	subs	r2, r2, r4
 800a328:	d10e      	bne.n	800a348 <__mcmp+0x28>
 800a32a:	f100 0314 	add.w	r3, r0, #20
 800a32e:	3114      	adds	r1, #20
 800a330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a33c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a340:	42a5      	cmp	r5, r4
 800a342:	d003      	beq.n	800a34c <__mcmp+0x2c>
 800a344:	d305      	bcc.n	800a352 <__mcmp+0x32>
 800a346:	2201      	movs	r2, #1
 800a348:	4610      	mov	r0, r2
 800a34a:	bd30      	pop	{r4, r5, pc}
 800a34c:	4283      	cmp	r3, r0
 800a34e:	d3f3      	bcc.n	800a338 <__mcmp+0x18>
 800a350:	e7fa      	b.n	800a348 <__mcmp+0x28>
 800a352:	f04f 32ff 	mov.w	r2, #4294967295
 800a356:	e7f7      	b.n	800a348 <__mcmp+0x28>

0800a358 <__mdiff>:
 800a358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	460c      	mov	r4, r1
 800a35e:	4606      	mov	r6, r0
 800a360:	4611      	mov	r1, r2
 800a362:	4620      	mov	r0, r4
 800a364:	4617      	mov	r7, r2
 800a366:	f7ff ffdb 	bl	800a320 <__mcmp>
 800a36a:	1e05      	subs	r5, r0, #0
 800a36c:	d110      	bne.n	800a390 <__mdiff+0x38>
 800a36e:	4629      	mov	r1, r5
 800a370:	4630      	mov	r0, r6
 800a372:	f7ff fd57 	bl	8009e24 <_Balloc>
 800a376:	b930      	cbnz	r0, 800a386 <__mdiff+0x2e>
 800a378:	4b39      	ldr	r3, [pc, #228]	; (800a460 <__mdiff+0x108>)
 800a37a:	4602      	mov	r2, r0
 800a37c:	f240 2132 	movw	r1, #562	; 0x232
 800a380:	4838      	ldr	r0, [pc, #224]	; (800a464 <__mdiff+0x10c>)
 800a382:	f000 fb47 	bl	800aa14 <__assert_func>
 800a386:	2301      	movs	r3, #1
 800a388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a390:	bfa4      	itt	ge
 800a392:	463b      	movge	r3, r7
 800a394:	4627      	movge	r7, r4
 800a396:	4630      	mov	r0, r6
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	bfa6      	itte	ge
 800a39c:	461c      	movge	r4, r3
 800a39e:	2500      	movge	r5, #0
 800a3a0:	2501      	movlt	r5, #1
 800a3a2:	f7ff fd3f 	bl	8009e24 <_Balloc>
 800a3a6:	b920      	cbnz	r0, 800a3b2 <__mdiff+0x5a>
 800a3a8:	4b2d      	ldr	r3, [pc, #180]	; (800a460 <__mdiff+0x108>)
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3b0:	e7e6      	b.n	800a380 <__mdiff+0x28>
 800a3b2:	693e      	ldr	r6, [r7, #16]
 800a3b4:	60c5      	str	r5, [r0, #12]
 800a3b6:	6925      	ldr	r5, [r4, #16]
 800a3b8:	f107 0114 	add.w	r1, r7, #20
 800a3bc:	f104 0914 	add.w	r9, r4, #20
 800a3c0:	f100 0e14 	add.w	lr, r0, #20
 800a3c4:	f107 0210 	add.w	r2, r7, #16
 800a3c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a3cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a3d0:	46f2      	mov	sl, lr
 800a3d2:	2700      	movs	r7, #0
 800a3d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3dc:	fa1f f883 	uxth.w	r8, r3
 800a3e0:	fa17 f78b 	uxtah	r7, r7, fp
 800a3e4:	0c1b      	lsrs	r3, r3, #16
 800a3e6:	eba7 0808 	sub.w	r8, r7, r8
 800a3ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a3f2:	fa1f f888 	uxth.w	r8, r8
 800a3f6:	141f      	asrs	r7, r3, #16
 800a3f8:	454d      	cmp	r5, r9
 800a3fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a3fe:	f84a 3b04 	str.w	r3, [sl], #4
 800a402:	d8e7      	bhi.n	800a3d4 <__mdiff+0x7c>
 800a404:	1b2b      	subs	r3, r5, r4
 800a406:	3b15      	subs	r3, #21
 800a408:	f023 0303 	bic.w	r3, r3, #3
 800a40c:	3304      	adds	r3, #4
 800a40e:	3415      	adds	r4, #21
 800a410:	42a5      	cmp	r5, r4
 800a412:	bf38      	it	cc
 800a414:	2304      	movcc	r3, #4
 800a416:	4419      	add	r1, r3
 800a418:	4473      	add	r3, lr
 800a41a:	469e      	mov	lr, r3
 800a41c:	460d      	mov	r5, r1
 800a41e:	4565      	cmp	r5, ip
 800a420:	d30e      	bcc.n	800a440 <__mdiff+0xe8>
 800a422:	f10c 0203 	add.w	r2, ip, #3
 800a426:	1a52      	subs	r2, r2, r1
 800a428:	f022 0203 	bic.w	r2, r2, #3
 800a42c:	3903      	subs	r1, #3
 800a42e:	458c      	cmp	ip, r1
 800a430:	bf38      	it	cc
 800a432:	2200      	movcc	r2, #0
 800a434:	441a      	add	r2, r3
 800a436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a43a:	b17b      	cbz	r3, 800a45c <__mdiff+0x104>
 800a43c:	6106      	str	r6, [r0, #16]
 800a43e:	e7a5      	b.n	800a38c <__mdiff+0x34>
 800a440:	f855 8b04 	ldr.w	r8, [r5], #4
 800a444:	fa17 f488 	uxtah	r4, r7, r8
 800a448:	1422      	asrs	r2, r4, #16
 800a44a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a44e:	b2a4      	uxth	r4, r4
 800a450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a454:	f84e 4b04 	str.w	r4, [lr], #4
 800a458:	1417      	asrs	r7, r2, #16
 800a45a:	e7e0      	b.n	800a41e <__mdiff+0xc6>
 800a45c:	3e01      	subs	r6, #1
 800a45e:	e7ea      	b.n	800a436 <__mdiff+0xde>
 800a460:	0800d5b8 	.word	0x0800d5b8
 800a464:	0800d62c 	.word	0x0800d62c

0800a468 <__d2b>:
 800a468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a46c:	4689      	mov	r9, r1
 800a46e:	2101      	movs	r1, #1
 800a470:	ec57 6b10 	vmov	r6, r7, d0
 800a474:	4690      	mov	r8, r2
 800a476:	f7ff fcd5 	bl	8009e24 <_Balloc>
 800a47a:	4604      	mov	r4, r0
 800a47c:	b930      	cbnz	r0, 800a48c <__d2b+0x24>
 800a47e:	4602      	mov	r2, r0
 800a480:	4b25      	ldr	r3, [pc, #148]	; (800a518 <__d2b+0xb0>)
 800a482:	4826      	ldr	r0, [pc, #152]	; (800a51c <__d2b+0xb4>)
 800a484:	f240 310a 	movw	r1, #778	; 0x30a
 800a488:	f000 fac4 	bl	800aa14 <__assert_func>
 800a48c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a494:	bb35      	cbnz	r5, 800a4e4 <__d2b+0x7c>
 800a496:	2e00      	cmp	r6, #0
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	d028      	beq.n	800a4ee <__d2b+0x86>
 800a49c:	4668      	mov	r0, sp
 800a49e:	9600      	str	r6, [sp, #0]
 800a4a0:	f7ff fd8c 	bl	8009fbc <__lo0bits>
 800a4a4:	9900      	ldr	r1, [sp, #0]
 800a4a6:	b300      	cbz	r0, 800a4ea <__d2b+0x82>
 800a4a8:	9a01      	ldr	r2, [sp, #4]
 800a4aa:	f1c0 0320 	rsb	r3, r0, #32
 800a4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b2:	430b      	orrs	r3, r1
 800a4b4:	40c2      	lsrs	r2, r0
 800a4b6:	6163      	str	r3, [r4, #20]
 800a4b8:	9201      	str	r2, [sp, #4]
 800a4ba:	9b01      	ldr	r3, [sp, #4]
 800a4bc:	61a3      	str	r3, [r4, #24]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bf14      	ite	ne
 800a4c2:	2202      	movne	r2, #2
 800a4c4:	2201      	moveq	r2, #1
 800a4c6:	6122      	str	r2, [r4, #16]
 800a4c8:	b1d5      	cbz	r5, 800a500 <__d2b+0x98>
 800a4ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4ce:	4405      	add	r5, r0
 800a4d0:	f8c9 5000 	str.w	r5, [r9]
 800a4d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4d8:	f8c8 0000 	str.w	r0, [r8]
 800a4dc:	4620      	mov	r0, r4
 800a4de:	b003      	add	sp, #12
 800a4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4e8:	e7d5      	b.n	800a496 <__d2b+0x2e>
 800a4ea:	6161      	str	r1, [r4, #20]
 800a4ec:	e7e5      	b.n	800a4ba <__d2b+0x52>
 800a4ee:	a801      	add	r0, sp, #4
 800a4f0:	f7ff fd64 	bl	8009fbc <__lo0bits>
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	6163      	str	r3, [r4, #20]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	6122      	str	r2, [r4, #16]
 800a4fc:	3020      	adds	r0, #32
 800a4fe:	e7e3      	b.n	800a4c8 <__d2b+0x60>
 800a500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a508:	f8c9 0000 	str.w	r0, [r9]
 800a50c:	6918      	ldr	r0, [r3, #16]
 800a50e:	f7ff fd35 	bl	8009f7c <__hi0bits>
 800a512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a516:	e7df      	b.n	800a4d8 <__d2b+0x70>
 800a518:	0800d5b8 	.word	0x0800d5b8
 800a51c:	0800d62c 	.word	0x0800d62c

0800a520 <_calloc_r>:
 800a520:	b513      	push	{r0, r1, r4, lr}
 800a522:	434a      	muls	r2, r1
 800a524:	4611      	mov	r1, r2
 800a526:	9201      	str	r2, [sp, #4]
 800a528:	f000 f85a 	bl	800a5e0 <_malloc_r>
 800a52c:	4604      	mov	r4, r0
 800a52e:	b118      	cbz	r0, 800a538 <_calloc_r+0x18>
 800a530:	9a01      	ldr	r2, [sp, #4]
 800a532:	2100      	movs	r1, #0
 800a534:	f7fd fd2e 	bl	8007f94 <memset>
 800a538:	4620      	mov	r0, r4
 800a53a:	b002      	add	sp, #8
 800a53c:	bd10      	pop	{r4, pc}
	...

0800a540 <_free_r>:
 800a540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a542:	2900      	cmp	r1, #0
 800a544:	d048      	beq.n	800a5d8 <_free_r+0x98>
 800a546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a54a:	9001      	str	r0, [sp, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f1a1 0404 	sub.w	r4, r1, #4
 800a552:	bfb8      	it	lt
 800a554:	18e4      	addlt	r4, r4, r3
 800a556:	f000 fae3 	bl	800ab20 <__malloc_lock>
 800a55a:	4a20      	ldr	r2, [pc, #128]	; (800a5dc <_free_r+0x9c>)
 800a55c:	9801      	ldr	r0, [sp, #4]
 800a55e:	6813      	ldr	r3, [r2, #0]
 800a560:	4615      	mov	r5, r2
 800a562:	b933      	cbnz	r3, 800a572 <_free_r+0x32>
 800a564:	6063      	str	r3, [r4, #4]
 800a566:	6014      	str	r4, [r2, #0]
 800a568:	b003      	add	sp, #12
 800a56a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a56e:	f000 badd 	b.w	800ab2c <__malloc_unlock>
 800a572:	42a3      	cmp	r3, r4
 800a574:	d90b      	bls.n	800a58e <_free_r+0x4e>
 800a576:	6821      	ldr	r1, [r4, #0]
 800a578:	1862      	adds	r2, r4, r1
 800a57a:	4293      	cmp	r3, r2
 800a57c:	bf04      	itt	eq
 800a57e:	681a      	ldreq	r2, [r3, #0]
 800a580:	685b      	ldreq	r3, [r3, #4]
 800a582:	6063      	str	r3, [r4, #4]
 800a584:	bf04      	itt	eq
 800a586:	1852      	addeq	r2, r2, r1
 800a588:	6022      	streq	r2, [r4, #0]
 800a58a:	602c      	str	r4, [r5, #0]
 800a58c:	e7ec      	b.n	800a568 <_free_r+0x28>
 800a58e:	461a      	mov	r2, r3
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	b10b      	cbz	r3, 800a598 <_free_r+0x58>
 800a594:	42a3      	cmp	r3, r4
 800a596:	d9fa      	bls.n	800a58e <_free_r+0x4e>
 800a598:	6811      	ldr	r1, [r2, #0]
 800a59a:	1855      	adds	r5, r2, r1
 800a59c:	42a5      	cmp	r5, r4
 800a59e:	d10b      	bne.n	800a5b8 <_free_r+0x78>
 800a5a0:	6824      	ldr	r4, [r4, #0]
 800a5a2:	4421      	add	r1, r4
 800a5a4:	1854      	adds	r4, r2, r1
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	6011      	str	r1, [r2, #0]
 800a5aa:	d1dd      	bne.n	800a568 <_free_r+0x28>
 800a5ac:	681c      	ldr	r4, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	6053      	str	r3, [r2, #4]
 800a5b2:	4421      	add	r1, r4
 800a5b4:	6011      	str	r1, [r2, #0]
 800a5b6:	e7d7      	b.n	800a568 <_free_r+0x28>
 800a5b8:	d902      	bls.n	800a5c0 <_free_r+0x80>
 800a5ba:	230c      	movs	r3, #12
 800a5bc:	6003      	str	r3, [r0, #0]
 800a5be:	e7d3      	b.n	800a568 <_free_r+0x28>
 800a5c0:	6825      	ldr	r5, [r4, #0]
 800a5c2:	1961      	adds	r1, r4, r5
 800a5c4:	428b      	cmp	r3, r1
 800a5c6:	bf04      	itt	eq
 800a5c8:	6819      	ldreq	r1, [r3, #0]
 800a5ca:	685b      	ldreq	r3, [r3, #4]
 800a5cc:	6063      	str	r3, [r4, #4]
 800a5ce:	bf04      	itt	eq
 800a5d0:	1949      	addeq	r1, r1, r5
 800a5d2:	6021      	streq	r1, [r4, #0]
 800a5d4:	6054      	str	r4, [r2, #4]
 800a5d6:	e7c7      	b.n	800a568 <_free_r+0x28>
 800a5d8:	b003      	add	sp, #12
 800a5da:	bd30      	pop	{r4, r5, pc}
 800a5dc:	200002e0 	.word	0x200002e0

0800a5e0 <_malloc_r>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	1ccd      	adds	r5, r1, #3
 800a5e4:	f025 0503 	bic.w	r5, r5, #3
 800a5e8:	3508      	adds	r5, #8
 800a5ea:	2d0c      	cmp	r5, #12
 800a5ec:	bf38      	it	cc
 800a5ee:	250c      	movcc	r5, #12
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	db01      	blt.n	800a5fa <_malloc_r+0x1a>
 800a5f6:	42a9      	cmp	r1, r5
 800a5f8:	d903      	bls.n	800a602 <_malloc_r+0x22>
 800a5fa:	230c      	movs	r3, #12
 800a5fc:	6033      	str	r3, [r6, #0]
 800a5fe:	2000      	movs	r0, #0
 800a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a602:	f000 fa8d 	bl	800ab20 <__malloc_lock>
 800a606:	4921      	ldr	r1, [pc, #132]	; (800a68c <_malloc_r+0xac>)
 800a608:	680a      	ldr	r2, [r1, #0]
 800a60a:	4614      	mov	r4, r2
 800a60c:	b99c      	cbnz	r4, 800a636 <_malloc_r+0x56>
 800a60e:	4f20      	ldr	r7, [pc, #128]	; (800a690 <_malloc_r+0xb0>)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	b923      	cbnz	r3, 800a61e <_malloc_r+0x3e>
 800a614:	4621      	mov	r1, r4
 800a616:	4630      	mov	r0, r6
 800a618:	f000 f996 	bl	800a948 <_sbrk_r>
 800a61c:	6038      	str	r0, [r7, #0]
 800a61e:	4629      	mov	r1, r5
 800a620:	4630      	mov	r0, r6
 800a622:	f000 f991 	bl	800a948 <_sbrk_r>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d123      	bne.n	800a672 <_malloc_r+0x92>
 800a62a:	230c      	movs	r3, #12
 800a62c:	6033      	str	r3, [r6, #0]
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 fa7c 	bl	800ab2c <__malloc_unlock>
 800a634:	e7e3      	b.n	800a5fe <_malloc_r+0x1e>
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	1b5b      	subs	r3, r3, r5
 800a63a:	d417      	bmi.n	800a66c <_malloc_r+0x8c>
 800a63c:	2b0b      	cmp	r3, #11
 800a63e:	d903      	bls.n	800a648 <_malloc_r+0x68>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	441c      	add	r4, r3
 800a644:	6025      	str	r5, [r4, #0]
 800a646:	e004      	b.n	800a652 <_malloc_r+0x72>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	42a2      	cmp	r2, r4
 800a64c:	bf0c      	ite	eq
 800a64e:	600b      	streq	r3, [r1, #0]
 800a650:	6053      	strne	r3, [r2, #4]
 800a652:	4630      	mov	r0, r6
 800a654:	f000 fa6a 	bl	800ab2c <__malloc_unlock>
 800a658:	f104 000b 	add.w	r0, r4, #11
 800a65c:	1d23      	adds	r3, r4, #4
 800a65e:	f020 0007 	bic.w	r0, r0, #7
 800a662:	1ac2      	subs	r2, r0, r3
 800a664:	d0cc      	beq.n	800a600 <_malloc_r+0x20>
 800a666:	1a1b      	subs	r3, r3, r0
 800a668:	50a3      	str	r3, [r4, r2]
 800a66a:	e7c9      	b.n	800a600 <_malloc_r+0x20>
 800a66c:	4622      	mov	r2, r4
 800a66e:	6864      	ldr	r4, [r4, #4]
 800a670:	e7cc      	b.n	800a60c <_malloc_r+0x2c>
 800a672:	1cc4      	adds	r4, r0, #3
 800a674:	f024 0403 	bic.w	r4, r4, #3
 800a678:	42a0      	cmp	r0, r4
 800a67a:	d0e3      	beq.n	800a644 <_malloc_r+0x64>
 800a67c:	1a21      	subs	r1, r4, r0
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 f962 	bl	800a948 <_sbrk_r>
 800a684:	3001      	adds	r0, #1
 800a686:	d1dd      	bne.n	800a644 <_malloc_r+0x64>
 800a688:	e7cf      	b.n	800a62a <_malloc_r+0x4a>
 800a68a:	bf00      	nop
 800a68c:	200002e0 	.word	0x200002e0
 800a690:	200002e4 	.word	0x200002e4

0800a694 <__sfputc_r>:
 800a694:	6893      	ldr	r3, [r2, #8]
 800a696:	3b01      	subs	r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	b410      	push	{r4}
 800a69c:	6093      	str	r3, [r2, #8]
 800a69e:	da08      	bge.n	800a6b2 <__sfputc_r+0x1e>
 800a6a0:	6994      	ldr	r4, [r2, #24]
 800a6a2:	42a3      	cmp	r3, r4
 800a6a4:	db01      	blt.n	800a6aa <__sfputc_r+0x16>
 800a6a6:	290a      	cmp	r1, #10
 800a6a8:	d103      	bne.n	800a6b2 <__sfputc_r+0x1e>
 800a6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ae:	f7fe ba47 	b.w	8008b40 <__swbuf_r>
 800a6b2:	6813      	ldr	r3, [r2, #0]
 800a6b4:	1c58      	adds	r0, r3, #1
 800a6b6:	6010      	str	r0, [r2, #0]
 800a6b8:	7019      	strb	r1, [r3, #0]
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <__sfputs_r>:
 800a6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	18d5      	adds	r5, r2, r3
 800a6cc:	42ac      	cmp	r4, r5
 800a6ce:	d101      	bne.n	800a6d4 <__sfputs_r+0x12>
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e007      	b.n	800a6e4 <__sfputs_r+0x22>
 800a6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d8:	463a      	mov	r2, r7
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7ff ffda 	bl	800a694 <__sfputc_r>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d1f3      	bne.n	800a6cc <__sfputs_r+0xa>
 800a6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6e8 <_vfiprintf_r>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	b09d      	sub	sp, #116	; 0x74
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	4698      	mov	r8, r3
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	b118      	cbz	r0, 800a700 <_vfiprintf_r+0x18>
 800a6f8:	6983      	ldr	r3, [r0, #24]
 800a6fa:	b90b      	cbnz	r3, 800a700 <_vfiprintf_r+0x18>
 800a6fc:	f7ff fa72 	bl	8009be4 <__sinit>
 800a700:	4b89      	ldr	r3, [pc, #548]	; (800a928 <_vfiprintf_r+0x240>)
 800a702:	429d      	cmp	r5, r3
 800a704:	d11b      	bne.n	800a73e <_vfiprintf_r+0x56>
 800a706:	6875      	ldr	r5, [r6, #4]
 800a708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a70a:	07d9      	lsls	r1, r3, #31
 800a70c:	d405      	bmi.n	800a71a <_vfiprintf_r+0x32>
 800a70e:	89ab      	ldrh	r3, [r5, #12]
 800a710:	059a      	lsls	r2, r3, #22
 800a712:	d402      	bmi.n	800a71a <_vfiprintf_r+0x32>
 800a714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a716:	f7ff fb08 	bl	8009d2a <__retarget_lock_acquire_recursive>
 800a71a:	89ab      	ldrh	r3, [r5, #12]
 800a71c:	071b      	lsls	r3, r3, #28
 800a71e:	d501      	bpl.n	800a724 <_vfiprintf_r+0x3c>
 800a720:	692b      	ldr	r3, [r5, #16]
 800a722:	b9eb      	cbnz	r3, 800a760 <_vfiprintf_r+0x78>
 800a724:	4629      	mov	r1, r5
 800a726:	4630      	mov	r0, r6
 800a728:	f7fe fa5c 	bl	8008be4 <__swsetup_r>
 800a72c:	b1c0      	cbz	r0, 800a760 <_vfiprintf_r+0x78>
 800a72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a730:	07dc      	lsls	r4, r3, #31
 800a732:	d50e      	bpl.n	800a752 <_vfiprintf_r+0x6a>
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	b01d      	add	sp, #116	; 0x74
 800a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73e:	4b7b      	ldr	r3, [pc, #492]	; (800a92c <_vfiprintf_r+0x244>)
 800a740:	429d      	cmp	r5, r3
 800a742:	d101      	bne.n	800a748 <_vfiprintf_r+0x60>
 800a744:	68b5      	ldr	r5, [r6, #8]
 800a746:	e7df      	b.n	800a708 <_vfiprintf_r+0x20>
 800a748:	4b79      	ldr	r3, [pc, #484]	; (800a930 <_vfiprintf_r+0x248>)
 800a74a:	429d      	cmp	r5, r3
 800a74c:	bf08      	it	eq
 800a74e:	68f5      	ldreq	r5, [r6, #12]
 800a750:	e7da      	b.n	800a708 <_vfiprintf_r+0x20>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	0598      	lsls	r0, r3, #22
 800a756:	d4ed      	bmi.n	800a734 <_vfiprintf_r+0x4c>
 800a758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75a:	f7ff fae7 	bl	8009d2c <__retarget_lock_release_recursive>
 800a75e:	e7e9      	b.n	800a734 <_vfiprintf_r+0x4c>
 800a760:	2300      	movs	r3, #0
 800a762:	9309      	str	r3, [sp, #36]	; 0x24
 800a764:	2320      	movs	r3, #32
 800a766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a76a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a76e:	2330      	movs	r3, #48	; 0x30
 800a770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a934 <_vfiprintf_r+0x24c>
 800a774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a778:	f04f 0901 	mov.w	r9, #1
 800a77c:	4623      	mov	r3, r4
 800a77e:	469a      	mov	sl, r3
 800a780:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a784:	b10a      	cbz	r2, 800a78a <_vfiprintf_r+0xa2>
 800a786:	2a25      	cmp	r2, #37	; 0x25
 800a788:	d1f9      	bne.n	800a77e <_vfiprintf_r+0x96>
 800a78a:	ebba 0b04 	subs.w	fp, sl, r4
 800a78e:	d00b      	beq.n	800a7a8 <_vfiprintf_r+0xc0>
 800a790:	465b      	mov	r3, fp
 800a792:	4622      	mov	r2, r4
 800a794:	4629      	mov	r1, r5
 800a796:	4630      	mov	r0, r6
 800a798:	f7ff ff93 	bl	800a6c2 <__sfputs_r>
 800a79c:	3001      	adds	r0, #1
 800a79e:	f000 80aa 	beq.w	800a8f6 <_vfiprintf_r+0x20e>
 800a7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a4:	445a      	add	r2, fp
 800a7a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a7a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80a2 	beq.w	800a8f6 <_vfiprintf_r+0x20e>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7bc:	f10a 0a01 	add.w	sl, sl, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	9307      	str	r3, [sp, #28]
 800a7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ca:	4654      	mov	r4, sl
 800a7cc:	2205      	movs	r2, #5
 800a7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d2:	4858      	ldr	r0, [pc, #352]	; (800a934 <_vfiprintf_r+0x24c>)
 800a7d4:	f7f5 fd24 	bl	8000220 <memchr>
 800a7d8:	9a04      	ldr	r2, [sp, #16]
 800a7da:	b9d8      	cbnz	r0, 800a814 <_vfiprintf_r+0x12c>
 800a7dc:	06d1      	lsls	r1, r2, #27
 800a7de:	bf44      	itt	mi
 800a7e0:	2320      	movmi	r3, #32
 800a7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e6:	0713      	lsls	r3, r2, #28
 800a7e8:	bf44      	itt	mi
 800a7ea:	232b      	movmi	r3, #43	; 0x2b
 800a7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f6:	d015      	beq.n	800a824 <_vfiprintf_r+0x13c>
 800a7f8:	9a07      	ldr	r2, [sp, #28]
 800a7fa:	4654      	mov	r4, sl
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	f04f 0c0a 	mov.w	ip, #10
 800a802:	4621      	mov	r1, r4
 800a804:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a808:	3b30      	subs	r3, #48	; 0x30
 800a80a:	2b09      	cmp	r3, #9
 800a80c:	d94e      	bls.n	800a8ac <_vfiprintf_r+0x1c4>
 800a80e:	b1b0      	cbz	r0, 800a83e <_vfiprintf_r+0x156>
 800a810:	9207      	str	r2, [sp, #28]
 800a812:	e014      	b.n	800a83e <_vfiprintf_r+0x156>
 800a814:	eba0 0308 	sub.w	r3, r0, r8
 800a818:	fa09 f303 	lsl.w	r3, r9, r3
 800a81c:	4313      	orrs	r3, r2
 800a81e:	9304      	str	r3, [sp, #16]
 800a820:	46a2      	mov	sl, r4
 800a822:	e7d2      	b.n	800a7ca <_vfiprintf_r+0xe2>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	1d19      	adds	r1, r3, #4
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	9103      	str	r1, [sp, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	bfbb      	ittet	lt
 800a830:	425b      	neglt	r3, r3
 800a832:	f042 0202 	orrlt.w	r2, r2, #2
 800a836:	9307      	strge	r3, [sp, #28]
 800a838:	9307      	strlt	r3, [sp, #28]
 800a83a:	bfb8      	it	lt
 800a83c:	9204      	strlt	r2, [sp, #16]
 800a83e:	7823      	ldrb	r3, [r4, #0]
 800a840:	2b2e      	cmp	r3, #46	; 0x2e
 800a842:	d10c      	bne.n	800a85e <_vfiprintf_r+0x176>
 800a844:	7863      	ldrb	r3, [r4, #1]
 800a846:	2b2a      	cmp	r3, #42	; 0x2a
 800a848:	d135      	bne.n	800a8b6 <_vfiprintf_r+0x1ce>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	1d1a      	adds	r2, r3, #4
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	9203      	str	r2, [sp, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	bfb8      	it	lt
 800a856:	f04f 33ff 	movlt.w	r3, #4294967295
 800a85a:	3402      	adds	r4, #2
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a944 <_vfiprintf_r+0x25c>
 800a862:	7821      	ldrb	r1, [r4, #0]
 800a864:	2203      	movs	r2, #3
 800a866:	4650      	mov	r0, sl
 800a868:	f7f5 fcda 	bl	8000220 <memchr>
 800a86c:	b140      	cbz	r0, 800a880 <_vfiprintf_r+0x198>
 800a86e:	2340      	movs	r3, #64	; 0x40
 800a870:	eba0 000a 	sub.w	r0, r0, sl
 800a874:	fa03 f000 	lsl.w	r0, r3, r0
 800a878:	9b04      	ldr	r3, [sp, #16]
 800a87a:	4303      	orrs	r3, r0
 800a87c:	3401      	adds	r4, #1
 800a87e:	9304      	str	r3, [sp, #16]
 800a880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a884:	482c      	ldr	r0, [pc, #176]	; (800a938 <_vfiprintf_r+0x250>)
 800a886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a88a:	2206      	movs	r2, #6
 800a88c:	f7f5 fcc8 	bl	8000220 <memchr>
 800a890:	2800      	cmp	r0, #0
 800a892:	d03f      	beq.n	800a914 <_vfiprintf_r+0x22c>
 800a894:	4b29      	ldr	r3, [pc, #164]	; (800a93c <_vfiprintf_r+0x254>)
 800a896:	bb1b      	cbnz	r3, 800a8e0 <_vfiprintf_r+0x1f8>
 800a898:	9b03      	ldr	r3, [sp, #12]
 800a89a:	3307      	adds	r3, #7
 800a89c:	f023 0307 	bic.w	r3, r3, #7
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	9303      	str	r3, [sp, #12]
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	443b      	add	r3, r7
 800a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8aa:	e767      	b.n	800a77c <_vfiprintf_r+0x94>
 800a8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7a5      	b.n	800a802 <_vfiprintf_r+0x11a>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9305      	str	r3, [sp, #20]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	f04f 0c0a 	mov.w	ip, #10
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8c8:	3a30      	subs	r2, #48	; 0x30
 800a8ca:	2a09      	cmp	r2, #9
 800a8cc:	d903      	bls.n	800a8d6 <_vfiprintf_r+0x1ee>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d0c5      	beq.n	800a85e <_vfiprintf_r+0x176>
 800a8d2:	9105      	str	r1, [sp, #20]
 800a8d4:	e7c3      	b.n	800a85e <_vfiprintf_r+0x176>
 800a8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8da:	4604      	mov	r4, r0
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e7f0      	b.n	800a8c2 <_vfiprintf_r+0x1da>
 800a8e0:	ab03      	add	r3, sp, #12
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4b16      	ldr	r3, [pc, #88]	; (800a940 <_vfiprintf_r+0x258>)
 800a8e8:	a904      	add	r1, sp, #16
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7fd fbfa 	bl	80080e4 <_printf_float>
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	1c78      	adds	r0, r7, #1
 800a8f4:	d1d6      	bne.n	800a8a4 <_vfiprintf_r+0x1bc>
 800a8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8f8:	07d9      	lsls	r1, r3, #31
 800a8fa:	d405      	bmi.n	800a908 <_vfiprintf_r+0x220>
 800a8fc:	89ab      	ldrh	r3, [r5, #12]
 800a8fe:	059a      	lsls	r2, r3, #22
 800a900:	d402      	bmi.n	800a908 <_vfiprintf_r+0x220>
 800a902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a904:	f7ff fa12 	bl	8009d2c <__retarget_lock_release_recursive>
 800a908:	89ab      	ldrh	r3, [r5, #12]
 800a90a:	065b      	lsls	r3, r3, #25
 800a90c:	f53f af12 	bmi.w	800a734 <_vfiprintf_r+0x4c>
 800a910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a912:	e711      	b.n	800a738 <_vfiprintf_r+0x50>
 800a914:	ab03      	add	r3, sp, #12
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	462a      	mov	r2, r5
 800a91a:	4b09      	ldr	r3, [pc, #36]	; (800a940 <_vfiprintf_r+0x258>)
 800a91c:	a904      	add	r1, sp, #16
 800a91e:	4630      	mov	r0, r6
 800a920:	f7fd fe84 	bl	800862c <_printf_i>
 800a924:	e7e4      	b.n	800a8f0 <_vfiprintf_r+0x208>
 800a926:	bf00      	nop
 800a928:	0800d5ec 	.word	0x0800d5ec
 800a92c:	0800d60c 	.word	0x0800d60c
 800a930:	0800d5cc 	.word	0x0800d5cc
 800a934:	0800d78c 	.word	0x0800d78c
 800a938:	0800d796 	.word	0x0800d796
 800a93c:	080080e5 	.word	0x080080e5
 800a940:	0800a6c3 	.word	0x0800a6c3
 800a944:	0800d792 	.word	0x0800d792

0800a948 <_sbrk_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4d06      	ldr	r5, [pc, #24]	; (800a964 <_sbrk_r+0x1c>)
 800a94c:	2300      	movs	r3, #0
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	602b      	str	r3, [r5, #0]
 800a954:	f7f8 fd98 	bl	8003488 <_sbrk>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_sbrk_r+0x1a>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_sbrk_r+0x1a>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	2000087c 	.word	0x2000087c

0800a968 <__sread>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	460c      	mov	r4, r1
 800a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a970:	f000 f8e2 	bl	800ab38 <_read_r>
 800a974:	2800      	cmp	r0, #0
 800a976:	bfab      	itete	ge
 800a978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a97a:	89a3      	ldrhlt	r3, [r4, #12]
 800a97c:	181b      	addge	r3, r3, r0
 800a97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a982:	bfac      	ite	ge
 800a984:	6563      	strge	r3, [r4, #84]	; 0x54
 800a986:	81a3      	strhlt	r3, [r4, #12]
 800a988:	bd10      	pop	{r4, pc}

0800a98a <__swrite>:
 800a98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	461f      	mov	r7, r3
 800a990:	898b      	ldrh	r3, [r1, #12]
 800a992:	05db      	lsls	r3, r3, #23
 800a994:	4605      	mov	r5, r0
 800a996:	460c      	mov	r4, r1
 800a998:	4616      	mov	r6, r2
 800a99a:	d505      	bpl.n	800a9a8 <__swrite+0x1e>
 800a99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f000 f898 	bl	800aad8 <_lseek_r>
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	f000 b817 	b.w	800a9f0 <_write_r>

0800a9c2 <__sseek>:
 800a9c2:	b510      	push	{r4, lr}
 800a9c4:	460c      	mov	r4, r1
 800a9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ca:	f000 f885 	bl	800aad8 <_lseek_r>
 800a9ce:	1c43      	adds	r3, r0, #1
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	bf15      	itete	ne
 800a9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9de:	81a3      	strheq	r3, [r4, #12]
 800a9e0:	bf18      	it	ne
 800a9e2:	81a3      	strhne	r3, [r4, #12]
 800a9e4:	bd10      	pop	{r4, pc}

0800a9e6 <__sclose>:
 800a9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ea:	f000 b831 	b.w	800aa50 <_close_r>
	...

0800a9f0 <_write_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d07      	ldr	r5, [pc, #28]	; (800aa10 <_write_r+0x20>)
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	602a      	str	r2, [r5, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f7f8 fbf6 	bl	80031f0 <_write>
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	d102      	bne.n	800aa0e <_write_r+0x1e>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	b103      	cbz	r3, 800aa0e <_write_r+0x1e>
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	2000087c 	.word	0x2000087c

0800aa14 <__assert_func>:
 800aa14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa16:	4614      	mov	r4, r2
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4b09      	ldr	r3, [pc, #36]	; (800aa40 <__assert_func+0x2c>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4605      	mov	r5, r0
 800aa20:	68d8      	ldr	r0, [r3, #12]
 800aa22:	b14c      	cbz	r4, 800aa38 <__assert_func+0x24>
 800aa24:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <__assert_func+0x30>)
 800aa26:	9100      	str	r1, [sp, #0]
 800aa28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa2c:	4906      	ldr	r1, [pc, #24]	; (800aa48 <__assert_func+0x34>)
 800aa2e:	462b      	mov	r3, r5
 800aa30:	f000 f81e 	bl	800aa70 <fiprintf>
 800aa34:	f000 f89f 	bl	800ab76 <abort>
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <__assert_func+0x38>)
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	e7f3      	b.n	800aa26 <__assert_func+0x12>
 800aa3e:	bf00      	nop
 800aa40:	200000d4 	.word	0x200000d4
 800aa44:	0800d79d 	.word	0x0800d79d
 800aa48:	0800d7aa 	.word	0x0800d7aa
 800aa4c:	0800d7d8 	.word	0x0800d7d8

0800aa50 <_close_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_close_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f8 fbf4 	bl	8003248 <_close>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_close_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_close_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	2000087c 	.word	0x2000087c

0800aa70 <fiprintf>:
 800aa70:	b40e      	push	{r1, r2, r3}
 800aa72:	b503      	push	{r0, r1, lr}
 800aa74:	4601      	mov	r1, r0
 800aa76:	ab03      	add	r3, sp, #12
 800aa78:	4805      	ldr	r0, [pc, #20]	; (800aa90 <fiprintf+0x20>)
 800aa7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7e:	6800      	ldr	r0, [r0, #0]
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	f7ff fe31 	bl	800a6e8 <_vfiprintf_r>
 800aa86:	b002      	add	sp, #8
 800aa88:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa8c:	b003      	add	sp, #12
 800aa8e:	4770      	bx	lr
 800aa90:	200000d4 	.word	0x200000d4

0800aa94 <_fstat_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_fstat_r+0x20>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f7f8 fc21 	bl	80032e8 <_fstat>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	d102      	bne.n	800aab0 <_fstat_r+0x1c>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	b103      	cbz	r3, 800aab0 <_fstat_r+0x1c>
 800aaae:	6023      	str	r3, [r4, #0]
 800aab0:	bd38      	pop	{r3, r4, r5, pc}
 800aab2:	bf00      	nop
 800aab4:	2000087c 	.word	0x2000087c

0800aab8 <_isatty_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d06      	ldr	r5, [pc, #24]	; (800aad4 <_isatty_r+0x1c>)
 800aabc:	2300      	movs	r3, #0
 800aabe:	4604      	mov	r4, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	f7f8 fb7e 	bl	80031c4 <_isatty>
 800aac8:	1c43      	adds	r3, r0, #1
 800aaca:	d102      	bne.n	800aad2 <_isatty_r+0x1a>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	b103      	cbz	r3, 800aad2 <_isatty_r+0x1a>
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	bd38      	pop	{r3, r4, r5, pc}
 800aad4:	2000087c 	.word	0x2000087c

0800aad8 <_lseek_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4d07      	ldr	r5, [pc, #28]	; (800aaf8 <_lseek_r+0x20>)
 800aadc:	4604      	mov	r4, r0
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	2200      	movs	r2, #0
 800aae4:	602a      	str	r2, [r5, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	f7f8 fbc5 	bl	8003276 <_lseek>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_lseek_r+0x1e>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_lseek_r+0x1e>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	2000087c 	.word	0x2000087c

0800aafc <__ascii_mbtowc>:
 800aafc:	b082      	sub	sp, #8
 800aafe:	b901      	cbnz	r1, 800ab02 <__ascii_mbtowc+0x6>
 800ab00:	a901      	add	r1, sp, #4
 800ab02:	b142      	cbz	r2, 800ab16 <__ascii_mbtowc+0x1a>
 800ab04:	b14b      	cbz	r3, 800ab1a <__ascii_mbtowc+0x1e>
 800ab06:	7813      	ldrb	r3, [r2, #0]
 800ab08:	600b      	str	r3, [r1, #0]
 800ab0a:	7812      	ldrb	r2, [r2, #0]
 800ab0c:	1e10      	subs	r0, r2, #0
 800ab0e:	bf18      	it	ne
 800ab10:	2001      	movne	r0, #1
 800ab12:	b002      	add	sp, #8
 800ab14:	4770      	bx	lr
 800ab16:	4610      	mov	r0, r2
 800ab18:	e7fb      	b.n	800ab12 <__ascii_mbtowc+0x16>
 800ab1a:	f06f 0001 	mvn.w	r0, #1
 800ab1e:	e7f8      	b.n	800ab12 <__ascii_mbtowc+0x16>

0800ab20 <__malloc_lock>:
 800ab20:	4801      	ldr	r0, [pc, #4]	; (800ab28 <__malloc_lock+0x8>)
 800ab22:	f7ff b902 	b.w	8009d2a <__retarget_lock_acquire_recursive>
 800ab26:	bf00      	nop
 800ab28:	20000874 	.word	0x20000874

0800ab2c <__malloc_unlock>:
 800ab2c:	4801      	ldr	r0, [pc, #4]	; (800ab34 <__malloc_unlock+0x8>)
 800ab2e:	f7ff b8fd 	b.w	8009d2c <__retarget_lock_release_recursive>
 800ab32:	bf00      	nop
 800ab34:	20000874 	.word	0x20000874

0800ab38 <_read_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d07      	ldr	r5, [pc, #28]	; (800ab58 <_read_r+0x20>)
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	4608      	mov	r0, r1
 800ab40:	4611      	mov	r1, r2
 800ab42:	2200      	movs	r2, #0
 800ab44:	602a      	str	r2, [r5, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	f7f8 fba6 	bl	8003298 <_read>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_read_r+0x1e>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_read_r+0x1e>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	2000087c 	.word	0x2000087c

0800ab5c <__ascii_wctomb>:
 800ab5c:	b149      	cbz	r1, 800ab72 <__ascii_wctomb+0x16>
 800ab5e:	2aff      	cmp	r2, #255	; 0xff
 800ab60:	bf85      	ittet	hi
 800ab62:	238a      	movhi	r3, #138	; 0x8a
 800ab64:	6003      	strhi	r3, [r0, #0]
 800ab66:	700a      	strbls	r2, [r1, #0]
 800ab68:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab6c:	bf98      	it	ls
 800ab6e:	2001      	movls	r0, #1
 800ab70:	4770      	bx	lr
 800ab72:	4608      	mov	r0, r1
 800ab74:	4770      	bx	lr

0800ab76 <abort>:
 800ab76:	b508      	push	{r3, lr}
 800ab78:	2006      	movs	r0, #6
 800ab7a:	f000 f82b 	bl	800abd4 <raise>
 800ab7e:	2001      	movs	r0, #1
 800ab80:	f002 fbf0 	bl	800d364 <_exit>

0800ab84 <_raise_r>:
 800ab84:	291f      	cmp	r1, #31
 800ab86:	b538      	push	{r3, r4, r5, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	d904      	bls.n	800ab98 <_raise_r+0x14>
 800ab8e:	2316      	movs	r3, #22
 800ab90:	6003      	str	r3, [r0, #0]
 800ab92:	f04f 30ff 	mov.w	r0, #4294967295
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab9a:	b112      	cbz	r2, 800aba2 <_raise_r+0x1e>
 800ab9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba0:	b94b      	cbnz	r3, 800abb6 <_raise_r+0x32>
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 f830 	bl	800ac08 <_getpid_r>
 800aba8:	462a      	mov	r2, r5
 800abaa:	4601      	mov	r1, r0
 800abac:	4620      	mov	r0, r4
 800abae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb2:	f000 b817 	b.w	800abe4 <_kill_r>
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d00a      	beq.n	800abd0 <_raise_r+0x4c>
 800abba:	1c59      	adds	r1, r3, #1
 800abbc:	d103      	bne.n	800abc6 <_raise_r+0x42>
 800abbe:	2316      	movs	r3, #22
 800abc0:	6003      	str	r3, [r0, #0]
 800abc2:	2001      	movs	r0, #1
 800abc4:	e7e7      	b.n	800ab96 <_raise_r+0x12>
 800abc6:	2400      	movs	r4, #0
 800abc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abcc:	4628      	mov	r0, r5
 800abce:	4798      	blx	r3
 800abd0:	2000      	movs	r0, #0
 800abd2:	e7e0      	b.n	800ab96 <_raise_r+0x12>

0800abd4 <raise>:
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <raise+0xc>)
 800abd6:	4601      	mov	r1, r0
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	f7ff bfd3 	b.w	800ab84 <_raise_r>
 800abde:	bf00      	nop
 800abe0:	200000d4 	.word	0x200000d4

0800abe4 <_kill_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d07      	ldr	r5, [pc, #28]	; (800ac04 <_kill_r+0x20>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	4611      	mov	r1, r2
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	f002 fbaf 	bl	800d354 <_kill>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d102      	bne.n	800ac00 <_kill_r+0x1c>
 800abfa:	682b      	ldr	r3, [r5, #0]
 800abfc:	b103      	cbz	r3, 800ac00 <_kill_r+0x1c>
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	bd38      	pop	{r3, r4, r5, pc}
 800ac02:	bf00      	nop
 800ac04:	2000087c 	.word	0x2000087c

0800ac08 <_getpid_r>:
 800ac08:	f002 bb9c 	b.w	800d344 <_getpid>
 800ac0c:	0000      	movs	r0, r0
	...

0800ac10 <cos>:
 800ac10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac12:	ec53 2b10 	vmov	r2, r3, d0
 800ac16:	4824      	ldr	r0, [pc, #144]	; (800aca8 <cos+0x98>)
 800ac18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac1c:	4281      	cmp	r1, r0
 800ac1e:	dc06      	bgt.n	800ac2e <cos+0x1e>
 800ac20:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800aca0 <cos+0x90>
 800ac24:	f001 fb78 	bl	800c318 <__kernel_cos>
 800ac28:	ec51 0b10 	vmov	r0, r1, d0
 800ac2c:	e007      	b.n	800ac3e <cos+0x2e>
 800ac2e:	481f      	ldr	r0, [pc, #124]	; (800acac <cos+0x9c>)
 800ac30:	4281      	cmp	r1, r0
 800ac32:	dd09      	ble.n	800ac48 <cos+0x38>
 800ac34:	ee10 0a10 	vmov	r0, s0
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f7f5 fb45 	bl	80002c8 <__aeabi_dsub>
 800ac3e:	ec41 0b10 	vmov	d0, r0, r1
 800ac42:	b005      	add	sp, #20
 800ac44:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac48:	4668      	mov	r0, sp
 800ac4a:	f001 f8a5 	bl	800bd98 <__ieee754_rem_pio2>
 800ac4e:	f000 0003 	and.w	r0, r0, #3
 800ac52:	2801      	cmp	r0, #1
 800ac54:	d007      	beq.n	800ac66 <cos+0x56>
 800ac56:	2802      	cmp	r0, #2
 800ac58:	d012      	beq.n	800ac80 <cos+0x70>
 800ac5a:	b9c0      	cbnz	r0, 800ac8e <cos+0x7e>
 800ac5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac60:	ed9d 0b00 	vldr	d0, [sp]
 800ac64:	e7de      	b.n	800ac24 <cos+0x14>
 800ac66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac6a:	ed9d 0b00 	vldr	d0, [sp]
 800ac6e:	f001 ff5b 	bl	800cb28 <__kernel_sin>
 800ac72:	ec53 2b10 	vmov	r2, r3, d0
 800ac76:	ee10 0a10 	vmov	r0, s0
 800ac7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ac7e:	e7de      	b.n	800ac3e <cos+0x2e>
 800ac80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac84:	ed9d 0b00 	vldr	d0, [sp]
 800ac88:	f001 fb46 	bl	800c318 <__kernel_cos>
 800ac8c:	e7f1      	b.n	800ac72 <cos+0x62>
 800ac8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac92:	ed9d 0b00 	vldr	d0, [sp]
 800ac96:	2001      	movs	r0, #1
 800ac98:	f001 ff46 	bl	800cb28 <__kernel_sin>
 800ac9c:	e7c4      	b.n	800ac28 <cos+0x18>
 800ac9e:	bf00      	nop
	...
 800aca8:	3fe921fb 	.word	0x3fe921fb
 800acac:	7fefffff 	.word	0x7fefffff

0800acb0 <sin>:
 800acb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acb2:	ec53 2b10 	vmov	r2, r3, d0
 800acb6:	4826      	ldr	r0, [pc, #152]	; (800ad50 <sin+0xa0>)
 800acb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800acbc:	4281      	cmp	r1, r0
 800acbe:	dc07      	bgt.n	800acd0 <sin+0x20>
 800acc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ad48 <sin+0x98>
 800acc4:	2000      	movs	r0, #0
 800acc6:	f001 ff2f 	bl	800cb28 <__kernel_sin>
 800acca:	ec51 0b10 	vmov	r0, r1, d0
 800acce:	e007      	b.n	800ace0 <sin+0x30>
 800acd0:	4820      	ldr	r0, [pc, #128]	; (800ad54 <sin+0xa4>)
 800acd2:	4281      	cmp	r1, r0
 800acd4:	dd09      	ble.n	800acea <sin+0x3a>
 800acd6:	ee10 0a10 	vmov	r0, s0
 800acda:	4619      	mov	r1, r3
 800acdc:	f7f5 faf4 	bl	80002c8 <__aeabi_dsub>
 800ace0:	ec41 0b10 	vmov	d0, r0, r1
 800ace4:	b005      	add	sp, #20
 800ace6:	f85d fb04 	ldr.w	pc, [sp], #4
 800acea:	4668      	mov	r0, sp
 800acec:	f001 f854 	bl	800bd98 <__ieee754_rem_pio2>
 800acf0:	f000 0003 	and.w	r0, r0, #3
 800acf4:	2801      	cmp	r0, #1
 800acf6:	d008      	beq.n	800ad0a <sin+0x5a>
 800acf8:	2802      	cmp	r0, #2
 800acfa:	d00d      	beq.n	800ad18 <sin+0x68>
 800acfc:	b9d0      	cbnz	r0, 800ad34 <sin+0x84>
 800acfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad02:	ed9d 0b00 	vldr	d0, [sp]
 800ad06:	2001      	movs	r0, #1
 800ad08:	e7dd      	b.n	800acc6 <sin+0x16>
 800ad0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad0e:	ed9d 0b00 	vldr	d0, [sp]
 800ad12:	f001 fb01 	bl	800c318 <__kernel_cos>
 800ad16:	e7d8      	b.n	800acca <sin+0x1a>
 800ad18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad1c:	ed9d 0b00 	vldr	d0, [sp]
 800ad20:	2001      	movs	r0, #1
 800ad22:	f001 ff01 	bl	800cb28 <__kernel_sin>
 800ad26:	ec53 2b10 	vmov	r2, r3, d0
 800ad2a:	ee10 0a10 	vmov	r0, s0
 800ad2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad32:	e7d5      	b.n	800ace0 <sin+0x30>
 800ad34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad38:	ed9d 0b00 	vldr	d0, [sp]
 800ad3c:	f001 faec 	bl	800c318 <__kernel_cos>
 800ad40:	e7f1      	b.n	800ad26 <sin+0x76>
 800ad42:	bf00      	nop
 800ad44:	f3af 8000 	nop.w
	...
 800ad50:	3fe921fb 	.word	0x3fe921fb
 800ad54:	7fefffff 	.word	0x7fefffff

0800ad58 <atan2>:
 800ad58:	f000 b91e 	b.w	800af98 <__ieee754_atan2>

0800ad5c <fmod>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	ed2d 8b02 	vpush	{d8}
 800ad62:	ec57 6b10 	vmov	r6, r7, d0
 800ad66:	ec55 4b11 	vmov	r4, r5, d1
 800ad6a:	f000 f9df 	bl	800b12c <__ieee754_fmod>
 800ad6e:	4b18      	ldr	r3, [pc, #96]	; (800add0 <fmod+0x74>)
 800ad70:	eeb0 8a40 	vmov.f32	s16, s0
 800ad74:	eef0 8a60 	vmov.f32	s17, s1
 800ad78:	f993 3000 	ldrsb.w	r3, [r3]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	d020      	beq.n	800adc2 <fmod+0x66>
 800ad80:	4622      	mov	r2, r4
 800ad82:	462b      	mov	r3, r5
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 fef0 	bl	8000b6c <__aeabi_dcmpun>
 800ad8c:	b9c8      	cbnz	r0, 800adc2 <fmod+0x66>
 800ad8e:	4632      	mov	r2, r6
 800ad90:	463b      	mov	r3, r7
 800ad92:	4630      	mov	r0, r6
 800ad94:	4639      	mov	r1, r7
 800ad96:	f7f5 fee9 	bl	8000b6c <__aeabi_dcmpun>
 800ad9a:	b990      	cbnz	r0, 800adc2 <fmod+0x66>
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 feb0 	bl	8000b08 <__aeabi_dcmpeq>
 800ada8:	b158      	cbz	r0, 800adc2 <fmod+0x66>
 800adaa:	f7fd f8c9 	bl	8007f40 <__errno>
 800adae:	2321      	movs	r3, #33	; 0x21
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	2200      	movs	r2, #0
 800adb4:	2300      	movs	r3, #0
 800adb6:	4610      	mov	r0, r2
 800adb8:	4619      	mov	r1, r3
 800adba:	f7f5 fd67 	bl	800088c <__aeabi_ddiv>
 800adbe:	ec41 0b18 	vmov	d8, r0, r1
 800adc2:	eeb0 0a48 	vmov.f32	s0, s16
 800adc6:	eef0 0a68 	vmov.f32	s1, s17
 800adca:	ecbd 8b02 	vpop	{d8}
 800adce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add0:	200002a4 	.word	0x200002a4

0800add4 <pow>:
 800add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add8:	ec59 8b10 	vmov	r8, r9, d0
 800addc:	ec57 6b11 	vmov	r6, r7, d1
 800ade0:	f000 fab6 	bl	800b350 <__ieee754_pow>
 800ade4:	4b4e      	ldr	r3, [pc, #312]	; (800af20 <pow+0x14c>)
 800ade6:	f993 3000 	ldrsb.w	r3, [r3]
 800adea:	3301      	adds	r3, #1
 800adec:	ec55 4b10 	vmov	r4, r5, d0
 800adf0:	d015      	beq.n	800ae1e <pow+0x4a>
 800adf2:	4632      	mov	r2, r6
 800adf4:	463b      	mov	r3, r7
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 feb7 	bl	8000b6c <__aeabi_dcmpun>
 800adfe:	b970      	cbnz	r0, 800ae1e <pow+0x4a>
 800ae00:	4642      	mov	r2, r8
 800ae02:	464b      	mov	r3, r9
 800ae04:	4640      	mov	r0, r8
 800ae06:	4649      	mov	r1, r9
 800ae08:	f7f5 feb0 	bl	8000b6c <__aeabi_dcmpun>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	b148      	cbz	r0, 800ae26 <pow+0x52>
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fe77 	bl	8000b08 <__aeabi_dcmpeq>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d17d      	bne.n	800af1a <pow+0x146>
 800ae1e:	ec45 4b10 	vmov	d0, r4, r5
 800ae22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae26:	4640      	mov	r0, r8
 800ae28:	4649      	mov	r1, r9
 800ae2a:	f7f5 fe6d 	bl	8000b08 <__aeabi_dcmpeq>
 800ae2e:	b1e0      	cbz	r0, 800ae6a <pow+0x96>
 800ae30:	2200      	movs	r2, #0
 800ae32:	2300      	movs	r3, #0
 800ae34:	4630      	mov	r0, r6
 800ae36:	4639      	mov	r1, r7
 800ae38:	f7f5 fe66 	bl	8000b08 <__aeabi_dcmpeq>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d16c      	bne.n	800af1a <pow+0x146>
 800ae40:	ec47 6b10 	vmov	d0, r6, r7
 800ae44:	f002 f8d9 	bl	800cffa <finite>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d0e8      	beq.n	800ae1e <pow+0x4a>
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 fe62 	bl	8000b1c <__aeabi_dcmplt>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d0e0      	beq.n	800ae1e <pow+0x4a>
 800ae5c:	f7fd f870 	bl	8007f40 <__errno>
 800ae60:	2321      	movs	r3, #33	; 0x21
 800ae62:	6003      	str	r3, [r0, #0]
 800ae64:	2400      	movs	r4, #0
 800ae66:	4d2f      	ldr	r5, [pc, #188]	; (800af24 <pow+0x150>)
 800ae68:	e7d9      	b.n	800ae1e <pow+0x4a>
 800ae6a:	ec45 4b10 	vmov	d0, r4, r5
 800ae6e:	f002 f8c4 	bl	800cffa <finite>
 800ae72:	bbb8      	cbnz	r0, 800aee4 <pow+0x110>
 800ae74:	ec49 8b10 	vmov	d0, r8, r9
 800ae78:	f002 f8bf 	bl	800cffa <finite>
 800ae7c:	b390      	cbz	r0, 800aee4 <pow+0x110>
 800ae7e:	ec47 6b10 	vmov	d0, r6, r7
 800ae82:	f002 f8ba 	bl	800cffa <finite>
 800ae86:	b368      	cbz	r0, 800aee4 <pow+0x110>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	4629      	mov	r1, r5
 800ae90:	f7f5 fe6c 	bl	8000b6c <__aeabi_dcmpun>
 800ae94:	b160      	cbz	r0, 800aeb0 <pow+0xdc>
 800ae96:	f7fd f853 	bl	8007f40 <__errno>
 800ae9a:	2321      	movs	r3, #33	; 0x21
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2300      	movs	r3, #0
 800aea2:	4610      	mov	r0, r2
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7f5 fcf1 	bl	800088c <__aeabi_ddiv>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	460d      	mov	r5, r1
 800aeae:	e7b6      	b.n	800ae1e <pow+0x4a>
 800aeb0:	f7fd f846 	bl	8007f40 <__errno>
 800aeb4:	2322      	movs	r3, #34	; 0x22
 800aeb6:	6003      	str	r3, [r0, #0]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2300      	movs	r3, #0
 800aebc:	4640      	mov	r0, r8
 800aebe:	4649      	mov	r1, r9
 800aec0:	f7f5 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 800aec4:	2400      	movs	r4, #0
 800aec6:	b158      	cbz	r0, 800aee0 <pow+0x10c>
 800aec8:	ec47 6b10 	vmov	d0, r6, r7
 800aecc:	f002 f928 	bl	800d120 <rint>
 800aed0:	4632      	mov	r2, r6
 800aed2:	ec51 0b10 	vmov	r0, r1, d0
 800aed6:	463b      	mov	r3, r7
 800aed8:	f7f5 fe16 	bl	8000b08 <__aeabi_dcmpeq>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d0c2      	beq.n	800ae66 <pow+0x92>
 800aee0:	4d11      	ldr	r5, [pc, #68]	; (800af28 <pow+0x154>)
 800aee2:	e79c      	b.n	800ae1e <pow+0x4a>
 800aee4:	2200      	movs	r2, #0
 800aee6:	2300      	movs	r3, #0
 800aee8:	4620      	mov	r0, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d094      	beq.n	800ae1e <pow+0x4a>
 800aef4:	ec49 8b10 	vmov	d0, r8, r9
 800aef8:	f002 f87f 	bl	800cffa <finite>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d08e      	beq.n	800ae1e <pow+0x4a>
 800af00:	ec47 6b10 	vmov	d0, r6, r7
 800af04:	f002 f879 	bl	800cffa <finite>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d088      	beq.n	800ae1e <pow+0x4a>
 800af0c:	f7fd f818 	bl	8007f40 <__errno>
 800af10:	2322      	movs	r3, #34	; 0x22
 800af12:	6003      	str	r3, [r0, #0]
 800af14:	2400      	movs	r4, #0
 800af16:	2500      	movs	r5, #0
 800af18:	e781      	b.n	800ae1e <pow+0x4a>
 800af1a:	4d04      	ldr	r5, [pc, #16]	; (800af2c <pow+0x158>)
 800af1c:	2400      	movs	r4, #0
 800af1e:	e77e      	b.n	800ae1e <pow+0x4a>
 800af20:	200002a4 	.word	0x200002a4
 800af24:	fff00000 	.word	0xfff00000
 800af28:	7ff00000 	.word	0x7ff00000
 800af2c:	3ff00000 	.word	0x3ff00000

0800af30 <sqrt>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	ed2d 8b02 	vpush	{d8}
 800af36:	ec55 4b10 	vmov	r4, r5, d0
 800af3a:	f001 f937 	bl	800c1ac <__ieee754_sqrt>
 800af3e:	4b15      	ldr	r3, [pc, #84]	; (800af94 <sqrt+0x64>)
 800af40:	eeb0 8a40 	vmov.f32	s16, s0
 800af44:	eef0 8a60 	vmov.f32	s17, s1
 800af48:	f993 3000 	ldrsb.w	r3, [r3]
 800af4c:	3301      	adds	r3, #1
 800af4e:	d019      	beq.n	800af84 <sqrt+0x54>
 800af50:	4622      	mov	r2, r4
 800af52:	462b      	mov	r3, r5
 800af54:	4620      	mov	r0, r4
 800af56:	4629      	mov	r1, r5
 800af58:	f7f5 fe08 	bl	8000b6c <__aeabi_dcmpun>
 800af5c:	b990      	cbnz	r0, 800af84 <sqrt+0x54>
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 fdd9 	bl	8000b1c <__aeabi_dcmplt>
 800af6a:	b158      	cbz	r0, 800af84 <sqrt+0x54>
 800af6c:	f7fc ffe8 	bl	8007f40 <__errno>
 800af70:	2321      	movs	r3, #33	; 0x21
 800af72:	6003      	str	r3, [r0, #0]
 800af74:	2200      	movs	r2, #0
 800af76:	2300      	movs	r3, #0
 800af78:	4610      	mov	r0, r2
 800af7a:	4619      	mov	r1, r3
 800af7c:	f7f5 fc86 	bl	800088c <__aeabi_ddiv>
 800af80:	ec41 0b18 	vmov	d8, r0, r1
 800af84:	eeb0 0a48 	vmov.f32	s0, s16
 800af88:	eef0 0a68 	vmov.f32	s1, s17
 800af8c:	ecbd 8b02 	vpop	{d8}
 800af90:	bd38      	pop	{r3, r4, r5, pc}
 800af92:	bf00      	nop
 800af94:	200002a4 	.word	0x200002a4

0800af98 <__ieee754_atan2>:
 800af98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af9c:	ec57 6b11 	vmov	r6, r7, d1
 800afa0:	4273      	negs	r3, r6
 800afa2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b128 <__ieee754_atan2+0x190>
 800afa6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800afaa:	4333      	orrs	r3, r6
 800afac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800afb0:	4573      	cmp	r3, lr
 800afb2:	ec51 0b10 	vmov	r0, r1, d0
 800afb6:	ee11 8a10 	vmov	r8, s2
 800afba:	d80a      	bhi.n	800afd2 <__ieee754_atan2+0x3a>
 800afbc:	4244      	negs	r4, r0
 800afbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afc2:	4304      	orrs	r4, r0
 800afc4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800afc8:	4574      	cmp	r4, lr
 800afca:	ee10 9a10 	vmov	r9, s0
 800afce:	468c      	mov	ip, r1
 800afd0:	d907      	bls.n	800afe2 <__ieee754_atan2+0x4a>
 800afd2:	4632      	mov	r2, r6
 800afd4:	463b      	mov	r3, r7
 800afd6:	f7f5 f979 	bl	80002cc <__adddf3>
 800afda:	ec41 0b10 	vmov	d0, r0, r1
 800afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800afe6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800afea:	4334      	orrs	r4, r6
 800afec:	d103      	bne.n	800aff6 <__ieee754_atan2+0x5e>
 800afee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff2:	f001 be59 	b.w	800cca8 <atan>
 800aff6:	17bc      	asrs	r4, r7, #30
 800aff8:	f004 0402 	and.w	r4, r4, #2
 800affc:	ea53 0909 	orrs.w	r9, r3, r9
 800b000:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b004:	d107      	bne.n	800b016 <__ieee754_atan2+0x7e>
 800b006:	2c02      	cmp	r4, #2
 800b008:	d060      	beq.n	800b0cc <__ieee754_atan2+0x134>
 800b00a:	2c03      	cmp	r4, #3
 800b00c:	d1e5      	bne.n	800afda <__ieee754_atan2+0x42>
 800b00e:	a142      	add	r1, pc, #264	; (adr r1, 800b118 <__ieee754_atan2+0x180>)
 800b010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b014:	e7e1      	b.n	800afda <__ieee754_atan2+0x42>
 800b016:	ea52 0808 	orrs.w	r8, r2, r8
 800b01a:	d106      	bne.n	800b02a <__ieee754_atan2+0x92>
 800b01c:	f1bc 0f00 	cmp.w	ip, #0
 800b020:	da5f      	bge.n	800b0e2 <__ieee754_atan2+0x14a>
 800b022:	a13f      	add	r1, pc, #252	; (adr r1, 800b120 <__ieee754_atan2+0x188>)
 800b024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b028:	e7d7      	b.n	800afda <__ieee754_atan2+0x42>
 800b02a:	4572      	cmp	r2, lr
 800b02c:	d10f      	bne.n	800b04e <__ieee754_atan2+0xb6>
 800b02e:	4293      	cmp	r3, r2
 800b030:	f104 34ff 	add.w	r4, r4, #4294967295
 800b034:	d107      	bne.n	800b046 <__ieee754_atan2+0xae>
 800b036:	2c02      	cmp	r4, #2
 800b038:	d84c      	bhi.n	800b0d4 <__ieee754_atan2+0x13c>
 800b03a:	4b35      	ldr	r3, [pc, #212]	; (800b110 <__ieee754_atan2+0x178>)
 800b03c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b040:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b044:	e7c9      	b.n	800afda <__ieee754_atan2+0x42>
 800b046:	2c02      	cmp	r4, #2
 800b048:	d848      	bhi.n	800b0dc <__ieee754_atan2+0x144>
 800b04a:	4b32      	ldr	r3, [pc, #200]	; (800b114 <__ieee754_atan2+0x17c>)
 800b04c:	e7f6      	b.n	800b03c <__ieee754_atan2+0xa4>
 800b04e:	4573      	cmp	r3, lr
 800b050:	d0e4      	beq.n	800b01c <__ieee754_atan2+0x84>
 800b052:	1a9b      	subs	r3, r3, r2
 800b054:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b058:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b05c:	da1e      	bge.n	800b09c <__ieee754_atan2+0x104>
 800b05e:	2f00      	cmp	r7, #0
 800b060:	da01      	bge.n	800b066 <__ieee754_atan2+0xce>
 800b062:	323c      	adds	r2, #60	; 0x3c
 800b064:	db1e      	blt.n	800b0a4 <__ieee754_atan2+0x10c>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 fc0f 	bl	800088c <__aeabi_ddiv>
 800b06e:	ec41 0b10 	vmov	d0, r0, r1
 800b072:	f001 ffb9 	bl	800cfe8 <fabs>
 800b076:	f001 fe17 	bl	800cca8 <atan>
 800b07a:	ec51 0b10 	vmov	r0, r1, d0
 800b07e:	2c01      	cmp	r4, #1
 800b080:	d013      	beq.n	800b0aa <__ieee754_atan2+0x112>
 800b082:	2c02      	cmp	r4, #2
 800b084:	d015      	beq.n	800b0b2 <__ieee754_atan2+0x11a>
 800b086:	2c00      	cmp	r4, #0
 800b088:	d0a7      	beq.n	800afda <__ieee754_atan2+0x42>
 800b08a:	a319      	add	r3, pc, #100	; (adr r3, 800b0f0 <__ieee754_atan2+0x158>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7f5 f91a 	bl	80002c8 <__aeabi_dsub>
 800b094:	a318      	add	r3, pc, #96	; (adr r3, 800b0f8 <__ieee754_atan2+0x160>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	e014      	b.n	800b0c6 <__ieee754_atan2+0x12e>
 800b09c:	a118      	add	r1, pc, #96	; (adr r1, 800b100 <__ieee754_atan2+0x168>)
 800b09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a2:	e7ec      	b.n	800b07e <__ieee754_atan2+0xe6>
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	e7e9      	b.n	800b07e <__ieee754_atan2+0xe6>
 800b0aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	e793      	b.n	800afda <__ieee754_atan2+0x42>
 800b0b2:	a30f      	add	r3, pc, #60	; (adr r3, 800b0f0 <__ieee754_atan2+0x158>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f7f5 f906 	bl	80002c8 <__aeabi_dsub>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	a10d      	add	r1, pc, #52	; (adr r1, 800b0f8 <__ieee754_atan2+0x160>)
 800b0c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c6:	f7f5 f8ff 	bl	80002c8 <__aeabi_dsub>
 800b0ca:	e786      	b.n	800afda <__ieee754_atan2+0x42>
 800b0cc:	a10a      	add	r1, pc, #40	; (adr r1, 800b0f8 <__ieee754_atan2+0x160>)
 800b0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d2:	e782      	b.n	800afda <__ieee754_atan2+0x42>
 800b0d4:	a10c      	add	r1, pc, #48	; (adr r1, 800b108 <__ieee754_atan2+0x170>)
 800b0d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0da:	e77e      	b.n	800afda <__ieee754_atan2+0x42>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	e77b      	b.n	800afda <__ieee754_atan2+0x42>
 800b0e2:	a107      	add	r1, pc, #28	; (adr r1, 800b100 <__ieee754_atan2+0x168>)
 800b0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e8:	e777      	b.n	800afda <__ieee754_atan2+0x42>
 800b0ea:	bf00      	nop
 800b0ec:	f3af 8000 	nop.w
 800b0f0:	33145c07 	.word	0x33145c07
 800b0f4:	3ca1a626 	.word	0x3ca1a626
 800b0f8:	54442d18 	.word	0x54442d18
 800b0fc:	400921fb 	.word	0x400921fb
 800b100:	54442d18 	.word	0x54442d18
 800b104:	3ff921fb 	.word	0x3ff921fb
 800b108:	54442d18 	.word	0x54442d18
 800b10c:	3fe921fb 	.word	0x3fe921fb
 800b110:	0800d7e8 	.word	0x0800d7e8
 800b114:	0800d800 	.word	0x0800d800
 800b118:	54442d18 	.word	0x54442d18
 800b11c:	c00921fb 	.word	0xc00921fb
 800b120:	54442d18 	.word	0x54442d18
 800b124:	bff921fb 	.word	0xbff921fb
 800b128:	7ff00000 	.word	0x7ff00000

0800b12c <__ieee754_fmod>:
 800b12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	ec53 2b11 	vmov	r2, r3, d1
 800b134:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800b138:	ea5e 0402 	orrs.w	r4, lr, r2
 800b13c:	ec51 0b10 	vmov	r0, r1, d0
 800b140:	ee11 7a10 	vmov	r7, s2
 800b144:	ee11 ca10 	vmov	ip, s2
 800b148:	461e      	mov	r6, r3
 800b14a:	d00d      	beq.n	800b168 <__ieee754_fmod+0x3c>
 800b14c:	4c7a      	ldr	r4, [pc, #488]	; (800b338 <__ieee754_fmod+0x20c>)
 800b14e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800b152:	45a0      	cmp	r8, r4
 800b154:	4689      	mov	r9, r1
 800b156:	dc07      	bgt.n	800b168 <__ieee754_fmod+0x3c>
 800b158:	4254      	negs	r4, r2
 800b15a:	4d78      	ldr	r5, [pc, #480]	; (800b33c <__ieee754_fmod+0x210>)
 800b15c:	4314      	orrs	r4, r2
 800b15e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800b162:	42ac      	cmp	r4, r5
 800b164:	46ab      	mov	fp, r5
 800b166:	d909      	bls.n	800b17c <__ieee754_fmod+0x50>
 800b168:	f7f5 fa66 	bl	8000638 <__aeabi_dmul>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	f7f5 fb8c 	bl	800088c <__aeabi_ddiv>
 800b174:	ec41 0b10 	vmov	d0, r0, r1
 800b178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17c:	45f0      	cmp	r8, lr
 800b17e:	ee10 aa10 	vmov	sl, s0
 800b182:	ee10 4a10 	vmov	r4, s0
 800b186:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b18a:	dc0a      	bgt.n	800b1a2 <__ieee754_fmod+0x76>
 800b18c:	dbf2      	blt.n	800b174 <__ieee754_fmod+0x48>
 800b18e:	4290      	cmp	r0, r2
 800b190:	d3f0      	bcc.n	800b174 <__ieee754_fmod+0x48>
 800b192:	d106      	bne.n	800b1a2 <__ieee754_fmod+0x76>
 800b194:	4a6a      	ldr	r2, [pc, #424]	; (800b340 <__ieee754_fmod+0x214>)
 800b196:	0fed      	lsrs	r5, r5, #31
 800b198:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b19c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b1a0:	e7e8      	b.n	800b174 <__ieee754_fmod+0x48>
 800b1a2:	ea19 0f0b 	tst.w	r9, fp
 800b1a6:	d14a      	bne.n	800b23e <__ieee754_fmod+0x112>
 800b1a8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ac:	d13f      	bne.n	800b22e <__ieee754_fmod+0x102>
 800b1ae:	4965      	ldr	r1, [pc, #404]	; (800b344 <__ieee754_fmod+0x218>)
 800b1b0:	4653      	mov	r3, sl
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dc38      	bgt.n	800b228 <__ieee754_fmod+0xfc>
 800b1b6:	4b61      	ldr	r3, [pc, #388]	; (800b33c <__ieee754_fmod+0x210>)
 800b1b8:	4033      	ands	r3, r6
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d14f      	bne.n	800b25e <__ieee754_fmod+0x132>
 800b1be:	f1be 0f00 	cmp.w	lr, #0
 800b1c2:	d144      	bne.n	800b24e <__ieee754_fmod+0x122>
 800b1c4:	4a5f      	ldr	r2, [pc, #380]	; (800b344 <__ieee754_fmod+0x218>)
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dc3d      	bgt.n	800b248 <__ieee754_fmod+0x11c>
 800b1cc:	4b5e      	ldr	r3, [pc, #376]	; (800b348 <__ieee754_fmod+0x21c>)
 800b1ce:	4299      	cmp	r1, r3
 800b1d0:	db4a      	blt.n	800b268 <__ieee754_fmod+0x13c>
 800b1d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1da:	485b      	ldr	r0, [pc, #364]	; (800b348 <__ieee754_fmod+0x21c>)
 800b1dc:	4282      	cmp	r2, r0
 800b1de:	db57      	blt.n	800b290 <__ieee754_fmod+0x164>
 800b1e0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b1e4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800b1e8:	1a89      	subs	r1, r1, r2
 800b1ea:	1b98      	subs	r0, r3, r6
 800b1ec:	eba4 070c 	sub.w	r7, r4, ip
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	d164      	bne.n	800b2be <__ieee754_fmod+0x192>
 800b1f4:	4564      	cmp	r4, ip
 800b1f6:	bf38      	it	cc
 800b1f8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	bfa4      	itt	ge
 800b200:	463c      	movge	r4, r7
 800b202:	4603      	movge	r3, r0
 800b204:	ea53 0104 	orrs.w	r1, r3, r4
 800b208:	d0c4      	beq.n	800b194 <__ieee754_fmod+0x68>
 800b20a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b20e:	db6b      	blt.n	800b2e8 <__ieee754_fmod+0x1bc>
 800b210:	494d      	ldr	r1, [pc, #308]	; (800b348 <__ieee754_fmod+0x21c>)
 800b212:	428a      	cmp	r2, r1
 800b214:	db6e      	blt.n	800b2f4 <__ieee754_fmod+0x1c8>
 800b216:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b21a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b21e:	431d      	orrs	r5, r3
 800b220:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800b224:	4620      	mov	r0, r4
 800b226:	e7a5      	b.n	800b174 <__ieee754_fmod+0x48>
 800b228:	3901      	subs	r1, #1
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	e7c1      	b.n	800b1b2 <__ieee754_fmod+0x86>
 800b22e:	4946      	ldr	r1, [pc, #280]	; (800b348 <__ieee754_fmod+0x21c>)
 800b230:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b234:	2b00      	cmp	r3, #0
 800b236:	ddbe      	ble.n	800b1b6 <__ieee754_fmod+0x8a>
 800b238:	3901      	subs	r1, #1
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	e7fa      	b.n	800b234 <__ieee754_fmod+0x108>
 800b23e:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b242:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b246:	e7b6      	b.n	800b1b6 <__ieee754_fmod+0x8a>
 800b248:	3a01      	subs	r2, #1
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	e7bc      	b.n	800b1c8 <__ieee754_fmod+0x9c>
 800b24e:	4a3e      	ldr	r2, [pc, #248]	; (800b348 <__ieee754_fmod+0x21c>)
 800b250:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800b254:	2b00      	cmp	r3, #0
 800b256:	ddb9      	ble.n	800b1cc <__ieee754_fmod+0xa0>
 800b258:	3a01      	subs	r2, #1
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	e7fa      	b.n	800b254 <__ieee754_fmod+0x128>
 800b25e:	ea4f 522e 	mov.w	r2, lr, asr #20
 800b262:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b266:	e7b1      	b.n	800b1cc <__ieee754_fmod+0xa0>
 800b268:	1a5c      	subs	r4, r3, r1
 800b26a:	2c1f      	cmp	r4, #31
 800b26c:	dc0a      	bgt.n	800b284 <__ieee754_fmod+0x158>
 800b26e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800b272:	fa08 f804 	lsl.w	r8, r8, r4
 800b276:	fa2a f303 	lsr.w	r3, sl, r3
 800b27a:	ea43 0308 	orr.w	r3, r3, r8
 800b27e:	fa0a f404 	lsl.w	r4, sl, r4
 800b282:	e7aa      	b.n	800b1da <__ieee754_fmod+0xae>
 800b284:	4b31      	ldr	r3, [pc, #196]	; (800b34c <__ieee754_fmod+0x220>)
 800b286:	1a5b      	subs	r3, r3, r1
 800b288:	fa0a f303 	lsl.w	r3, sl, r3
 800b28c:	2400      	movs	r4, #0
 800b28e:	e7a4      	b.n	800b1da <__ieee754_fmod+0xae>
 800b290:	eba0 0c02 	sub.w	ip, r0, r2
 800b294:	f1bc 0f1f 	cmp.w	ip, #31
 800b298:	dc0a      	bgt.n	800b2b0 <__ieee754_fmod+0x184>
 800b29a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800b29e:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b2a2:	fa27 f606 	lsr.w	r6, r7, r6
 800b2a6:	ea46 060e 	orr.w	r6, r6, lr
 800b2aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 800b2ae:	e79b      	b.n	800b1e8 <__ieee754_fmod+0xbc>
 800b2b0:	4e26      	ldr	r6, [pc, #152]	; (800b34c <__ieee754_fmod+0x220>)
 800b2b2:	1ab6      	subs	r6, r6, r2
 800b2b4:	fa07 f606 	lsl.w	r6, r7, r6
 800b2b8:	f04f 0c00 	mov.w	ip, #0
 800b2bc:	e794      	b.n	800b1e8 <__ieee754_fmod+0xbc>
 800b2be:	4564      	cmp	r4, ip
 800b2c0:	bf38      	it	cc
 800b2c2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	da05      	bge.n	800b2d6 <__ieee754_fmod+0x1aa>
 800b2ca:	0fe0      	lsrs	r0, r4, #31
 800b2cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b2d0:	0064      	lsls	r4, r4, #1
 800b2d2:	3901      	subs	r1, #1
 800b2d4:	e789      	b.n	800b1ea <__ieee754_fmod+0xbe>
 800b2d6:	ea50 0307 	orrs.w	r3, r0, r7
 800b2da:	f43f af5b 	beq.w	800b194 <__ieee754_fmod+0x68>
 800b2de:	0ffb      	lsrs	r3, r7, #31
 800b2e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b2e4:	007c      	lsls	r4, r7, #1
 800b2e6:	e7f4      	b.n	800b2d2 <__ieee754_fmod+0x1a6>
 800b2e8:	0fe1      	lsrs	r1, r4, #31
 800b2ea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b2ee:	0064      	lsls	r4, r4, #1
 800b2f0:	3a01      	subs	r2, #1
 800b2f2:	e78a      	b.n	800b20a <__ieee754_fmod+0xde>
 800b2f4:	1a89      	subs	r1, r1, r2
 800b2f6:	2914      	cmp	r1, #20
 800b2f8:	dc0a      	bgt.n	800b310 <__ieee754_fmod+0x1e4>
 800b2fa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b2fe:	fa03 f202 	lsl.w	r2, r3, r2
 800b302:	40cc      	lsrs	r4, r1
 800b304:	4322      	orrs	r2, r4
 800b306:	410b      	asrs	r3, r1
 800b308:	ea43 0105 	orr.w	r1, r3, r5
 800b30c:	4610      	mov	r0, r2
 800b30e:	e731      	b.n	800b174 <__ieee754_fmod+0x48>
 800b310:	291f      	cmp	r1, #31
 800b312:	dc07      	bgt.n	800b324 <__ieee754_fmod+0x1f8>
 800b314:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b318:	40cc      	lsrs	r4, r1
 800b31a:	fa03 f202 	lsl.w	r2, r3, r2
 800b31e:	4322      	orrs	r2, r4
 800b320:	462b      	mov	r3, r5
 800b322:	e7f1      	b.n	800b308 <__ieee754_fmod+0x1dc>
 800b324:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b328:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b32c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b330:	32e2      	adds	r2, #226	; 0xe2
 800b332:	fa43 f202 	asr.w	r2, r3, r2
 800b336:	e7f3      	b.n	800b320 <__ieee754_fmod+0x1f4>
 800b338:	7fefffff 	.word	0x7fefffff
 800b33c:	7ff00000 	.word	0x7ff00000
 800b340:	0800d818 	.word	0x0800d818
 800b344:	fffffbed 	.word	0xfffffbed
 800b348:	fffffc02 	.word	0xfffffc02
 800b34c:	fffffbe2 	.word	0xfffffbe2

0800b350 <__ieee754_pow>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	ed2d 8b06 	vpush	{d8-d10}
 800b358:	b08d      	sub	sp, #52	; 0x34
 800b35a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b35e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b362:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b366:	ea56 0100 	orrs.w	r1, r6, r0
 800b36a:	ec53 2b10 	vmov	r2, r3, d0
 800b36e:	f000 84d1 	beq.w	800bd14 <__ieee754_pow+0x9c4>
 800b372:	497f      	ldr	r1, [pc, #508]	; (800b570 <__ieee754_pow+0x220>)
 800b374:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b378:	428c      	cmp	r4, r1
 800b37a:	ee10 8a10 	vmov	r8, s0
 800b37e:	4699      	mov	r9, r3
 800b380:	dc09      	bgt.n	800b396 <__ieee754_pow+0x46>
 800b382:	d103      	bne.n	800b38c <__ieee754_pow+0x3c>
 800b384:	b97a      	cbnz	r2, 800b3a6 <__ieee754_pow+0x56>
 800b386:	42a6      	cmp	r6, r4
 800b388:	dd02      	ble.n	800b390 <__ieee754_pow+0x40>
 800b38a:	e00c      	b.n	800b3a6 <__ieee754_pow+0x56>
 800b38c:	428e      	cmp	r6, r1
 800b38e:	dc02      	bgt.n	800b396 <__ieee754_pow+0x46>
 800b390:	428e      	cmp	r6, r1
 800b392:	d110      	bne.n	800b3b6 <__ieee754_pow+0x66>
 800b394:	b178      	cbz	r0, 800b3b6 <__ieee754_pow+0x66>
 800b396:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b39a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b39e:	ea54 0308 	orrs.w	r3, r4, r8
 800b3a2:	f000 84b7 	beq.w	800bd14 <__ieee754_pow+0x9c4>
 800b3a6:	4873      	ldr	r0, [pc, #460]	; (800b574 <__ieee754_pow+0x224>)
 800b3a8:	b00d      	add	sp, #52	; 0x34
 800b3aa:	ecbd 8b06 	vpop	{d8-d10}
 800b3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b2:	f001 bead 	b.w	800d110 <nan>
 800b3b6:	f1b9 0f00 	cmp.w	r9, #0
 800b3ba:	da36      	bge.n	800b42a <__ieee754_pow+0xda>
 800b3bc:	496e      	ldr	r1, [pc, #440]	; (800b578 <__ieee754_pow+0x228>)
 800b3be:	428e      	cmp	r6, r1
 800b3c0:	dc51      	bgt.n	800b466 <__ieee754_pow+0x116>
 800b3c2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b3c6:	428e      	cmp	r6, r1
 800b3c8:	f340 84af 	ble.w	800bd2a <__ieee754_pow+0x9da>
 800b3cc:	1531      	asrs	r1, r6, #20
 800b3ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b3d2:	2914      	cmp	r1, #20
 800b3d4:	dd0f      	ble.n	800b3f6 <__ieee754_pow+0xa6>
 800b3d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b3da:	fa20 fc01 	lsr.w	ip, r0, r1
 800b3de:	fa0c f101 	lsl.w	r1, ip, r1
 800b3e2:	4281      	cmp	r1, r0
 800b3e4:	f040 84a1 	bne.w	800bd2a <__ieee754_pow+0x9da>
 800b3e8:	f00c 0c01 	and.w	ip, ip, #1
 800b3ec:	f1cc 0102 	rsb	r1, ip, #2
 800b3f0:	9100      	str	r1, [sp, #0]
 800b3f2:	b180      	cbz	r0, 800b416 <__ieee754_pow+0xc6>
 800b3f4:	e059      	b.n	800b4aa <__ieee754_pow+0x15a>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d155      	bne.n	800b4a6 <__ieee754_pow+0x156>
 800b3fa:	f1c1 0114 	rsb	r1, r1, #20
 800b3fe:	fa46 fc01 	asr.w	ip, r6, r1
 800b402:	fa0c f101 	lsl.w	r1, ip, r1
 800b406:	42b1      	cmp	r1, r6
 800b408:	f040 848c 	bne.w	800bd24 <__ieee754_pow+0x9d4>
 800b40c:	f00c 0c01 	and.w	ip, ip, #1
 800b410:	f1cc 0102 	rsb	r1, ip, #2
 800b414:	9100      	str	r1, [sp, #0]
 800b416:	4959      	ldr	r1, [pc, #356]	; (800b57c <__ieee754_pow+0x22c>)
 800b418:	428e      	cmp	r6, r1
 800b41a:	d12d      	bne.n	800b478 <__ieee754_pow+0x128>
 800b41c:	2f00      	cmp	r7, #0
 800b41e:	da79      	bge.n	800b514 <__ieee754_pow+0x1c4>
 800b420:	4956      	ldr	r1, [pc, #344]	; (800b57c <__ieee754_pow+0x22c>)
 800b422:	2000      	movs	r0, #0
 800b424:	f7f5 fa32 	bl	800088c <__aeabi_ddiv>
 800b428:	e016      	b.n	800b458 <__ieee754_pow+0x108>
 800b42a:	2100      	movs	r1, #0
 800b42c:	9100      	str	r1, [sp, #0]
 800b42e:	2800      	cmp	r0, #0
 800b430:	d13b      	bne.n	800b4aa <__ieee754_pow+0x15a>
 800b432:	494f      	ldr	r1, [pc, #316]	; (800b570 <__ieee754_pow+0x220>)
 800b434:	428e      	cmp	r6, r1
 800b436:	d1ee      	bne.n	800b416 <__ieee754_pow+0xc6>
 800b438:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b43c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b440:	ea53 0308 	orrs.w	r3, r3, r8
 800b444:	f000 8466 	beq.w	800bd14 <__ieee754_pow+0x9c4>
 800b448:	4b4d      	ldr	r3, [pc, #308]	; (800b580 <__ieee754_pow+0x230>)
 800b44a:	429c      	cmp	r4, r3
 800b44c:	dd0d      	ble.n	800b46a <__ieee754_pow+0x11a>
 800b44e:	2f00      	cmp	r7, #0
 800b450:	f280 8464 	bge.w	800bd1c <__ieee754_pow+0x9cc>
 800b454:	2000      	movs	r0, #0
 800b456:	2100      	movs	r1, #0
 800b458:	ec41 0b10 	vmov	d0, r0, r1
 800b45c:	b00d      	add	sp, #52	; 0x34
 800b45e:	ecbd 8b06 	vpop	{d8-d10}
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	2102      	movs	r1, #2
 800b468:	e7e0      	b.n	800b42c <__ieee754_pow+0xdc>
 800b46a:	2f00      	cmp	r7, #0
 800b46c:	daf2      	bge.n	800b454 <__ieee754_pow+0x104>
 800b46e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b472:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b476:	e7ef      	b.n	800b458 <__ieee754_pow+0x108>
 800b478:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b47c:	d104      	bne.n	800b488 <__ieee754_pow+0x138>
 800b47e:	4610      	mov	r0, r2
 800b480:	4619      	mov	r1, r3
 800b482:	f7f5 f8d9 	bl	8000638 <__aeabi_dmul>
 800b486:	e7e7      	b.n	800b458 <__ieee754_pow+0x108>
 800b488:	493e      	ldr	r1, [pc, #248]	; (800b584 <__ieee754_pow+0x234>)
 800b48a:	428f      	cmp	r7, r1
 800b48c:	d10d      	bne.n	800b4aa <__ieee754_pow+0x15a>
 800b48e:	f1b9 0f00 	cmp.w	r9, #0
 800b492:	db0a      	blt.n	800b4aa <__ieee754_pow+0x15a>
 800b494:	ec43 2b10 	vmov	d0, r2, r3
 800b498:	b00d      	add	sp, #52	; 0x34
 800b49a:	ecbd 8b06 	vpop	{d8-d10}
 800b49e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a2:	f000 be83 	b.w	800c1ac <__ieee754_sqrt>
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	9100      	str	r1, [sp, #0]
 800b4aa:	ec43 2b10 	vmov	d0, r2, r3
 800b4ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4b2:	f001 fd99 	bl	800cfe8 <fabs>
 800b4b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4ba:	ec51 0b10 	vmov	r0, r1, d0
 800b4be:	f1b8 0f00 	cmp.w	r8, #0
 800b4c2:	d12a      	bne.n	800b51a <__ieee754_pow+0x1ca>
 800b4c4:	b12c      	cbz	r4, 800b4d2 <__ieee754_pow+0x182>
 800b4c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b57c <__ieee754_pow+0x22c>
 800b4ca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b4ce:	45e6      	cmp	lr, ip
 800b4d0:	d123      	bne.n	800b51a <__ieee754_pow+0x1ca>
 800b4d2:	2f00      	cmp	r7, #0
 800b4d4:	da05      	bge.n	800b4e2 <__ieee754_pow+0x192>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	2000      	movs	r0, #0
 800b4dc:	4927      	ldr	r1, [pc, #156]	; (800b57c <__ieee754_pow+0x22c>)
 800b4de:	f7f5 f9d5 	bl	800088c <__aeabi_ddiv>
 800b4e2:	f1b9 0f00 	cmp.w	r9, #0
 800b4e6:	dab7      	bge.n	800b458 <__ieee754_pow+0x108>
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b4ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b4f2:	4323      	orrs	r3, r4
 800b4f4:	d108      	bne.n	800b508 <__ieee754_pow+0x1b8>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4610      	mov	r0, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f7f4 fee3 	bl	80002c8 <__aeabi_dsub>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	e78d      	b.n	800b424 <__ieee754_pow+0xd4>
 800b508:	9b00      	ldr	r3, [sp, #0]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d1a4      	bne.n	800b458 <__ieee754_pow+0x108>
 800b50e:	4602      	mov	r2, r0
 800b510:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b514:	4610      	mov	r0, r2
 800b516:	4619      	mov	r1, r3
 800b518:	e79e      	b.n	800b458 <__ieee754_pow+0x108>
 800b51a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b51e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b522:	950a      	str	r5, [sp, #40]	; 0x28
 800b524:	9d00      	ldr	r5, [sp, #0]
 800b526:	46ac      	mov	ip, r5
 800b528:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b52a:	ea5c 0505 	orrs.w	r5, ip, r5
 800b52e:	d0e4      	beq.n	800b4fa <__ieee754_pow+0x1aa>
 800b530:	4b15      	ldr	r3, [pc, #84]	; (800b588 <__ieee754_pow+0x238>)
 800b532:	429e      	cmp	r6, r3
 800b534:	f340 80fc 	ble.w	800b730 <__ieee754_pow+0x3e0>
 800b538:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b53c:	429e      	cmp	r6, r3
 800b53e:	4b10      	ldr	r3, [pc, #64]	; (800b580 <__ieee754_pow+0x230>)
 800b540:	dd07      	ble.n	800b552 <__ieee754_pow+0x202>
 800b542:	429c      	cmp	r4, r3
 800b544:	dc0a      	bgt.n	800b55c <__ieee754_pow+0x20c>
 800b546:	2f00      	cmp	r7, #0
 800b548:	da84      	bge.n	800b454 <__ieee754_pow+0x104>
 800b54a:	a307      	add	r3, pc, #28	; (adr r3, 800b568 <__ieee754_pow+0x218>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	e795      	b.n	800b47e <__ieee754_pow+0x12e>
 800b552:	429c      	cmp	r4, r3
 800b554:	dbf7      	blt.n	800b546 <__ieee754_pow+0x1f6>
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <__ieee754_pow+0x22c>)
 800b558:	429c      	cmp	r4, r3
 800b55a:	dd17      	ble.n	800b58c <__ieee754_pow+0x23c>
 800b55c:	2f00      	cmp	r7, #0
 800b55e:	dcf4      	bgt.n	800b54a <__ieee754_pow+0x1fa>
 800b560:	e778      	b.n	800b454 <__ieee754_pow+0x104>
 800b562:	bf00      	nop
 800b564:	f3af 8000 	nop.w
 800b568:	8800759c 	.word	0x8800759c
 800b56c:	7e37e43c 	.word	0x7e37e43c
 800b570:	7ff00000 	.word	0x7ff00000
 800b574:	0800d7d8 	.word	0x0800d7d8
 800b578:	433fffff 	.word	0x433fffff
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	3fefffff 	.word	0x3fefffff
 800b584:	3fe00000 	.word	0x3fe00000
 800b588:	41e00000 	.word	0x41e00000
 800b58c:	4b64      	ldr	r3, [pc, #400]	; (800b720 <__ieee754_pow+0x3d0>)
 800b58e:	2200      	movs	r2, #0
 800b590:	f7f4 fe9a 	bl	80002c8 <__aeabi_dsub>
 800b594:	a356      	add	r3, pc, #344	; (adr r3, 800b6f0 <__ieee754_pow+0x3a0>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	4604      	mov	r4, r0
 800b59c:	460d      	mov	r5, r1
 800b59e:	f7f5 f84b 	bl	8000638 <__aeabi_dmul>
 800b5a2:	a355      	add	r3, pc, #340	; (adr r3, 800b6f8 <__ieee754_pow+0x3a8>)
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	460f      	mov	r7, r1
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f5 f842 	bl	8000638 <__aeabi_dmul>
 800b5b4:	4b5b      	ldr	r3, [pc, #364]	; (800b724 <__ieee754_pow+0x3d4>)
 800b5b6:	4682      	mov	sl, r0
 800b5b8:	468b      	mov	fp, r1
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	4620      	mov	r0, r4
 800b5be:	4629      	mov	r1, r5
 800b5c0:	f7f5 f83a 	bl	8000638 <__aeabi_dmul>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	a14d      	add	r1, pc, #308	; (adr r1, 800b700 <__ieee754_pow+0x3b0>)
 800b5ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ce:	f7f4 fe7b 	bl	80002c8 <__aeabi_dsub>
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	f7f5 f82f 	bl	8000638 <__aeabi_dmul>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	2000      	movs	r0, #0
 800b5e0:	4951      	ldr	r1, [pc, #324]	; (800b728 <__ieee754_pow+0x3d8>)
 800b5e2:	f7f4 fe71 	bl	80002c8 <__aeabi_dsub>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f7f5 f821 	bl	8000638 <__aeabi_dmul>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	f7f5 f81b 	bl	8000638 <__aeabi_dmul>
 800b602:	a341      	add	r3, pc, #260	; (adr r3, 800b708 <__ieee754_pow+0x3b8>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f5 f816 	bl	8000638 <__aeabi_dmul>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	4650      	mov	r0, sl
 800b612:	4659      	mov	r1, fp
 800b614:	f7f4 fe58 	bl	80002c8 <__aeabi_dsub>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4680      	mov	r8, r0
 800b61e:	4689      	mov	r9, r1
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7f4 fe52 	bl	80002cc <__adddf3>
 800b628:	2400      	movs	r4, #0
 800b62a:	4632      	mov	r2, r6
 800b62c:	463b      	mov	r3, r7
 800b62e:	4620      	mov	r0, r4
 800b630:	460d      	mov	r5, r1
 800b632:	f7f4 fe49 	bl	80002c8 <__aeabi_dsub>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 fe43 	bl	80002c8 <__aeabi_dsub>
 800b642:	9b00      	ldr	r3, [sp, #0]
 800b644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b646:	3b01      	subs	r3, #1
 800b648:	4313      	orrs	r3, r2
 800b64a:	4682      	mov	sl, r0
 800b64c:	468b      	mov	fp, r1
 800b64e:	f040 81f1 	bne.w	800ba34 <__ieee754_pow+0x6e4>
 800b652:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b710 <__ieee754_pow+0x3c0>
 800b656:	eeb0 8a47 	vmov.f32	s16, s14
 800b65a:	eef0 8a67 	vmov.f32	s17, s15
 800b65e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b662:	2600      	movs	r6, #0
 800b664:	4632      	mov	r2, r6
 800b666:	463b      	mov	r3, r7
 800b668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66c:	f7f4 fe2c 	bl	80002c8 <__aeabi_dsub>
 800b670:	4622      	mov	r2, r4
 800b672:	462b      	mov	r3, r5
 800b674:	f7f4 ffe0 	bl	8000638 <__aeabi_dmul>
 800b678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b67c:	4680      	mov	r8, r0
 800b67e:	4689      	mov	r9, r1
 800b680:	4650      	mov	r0, sl
 800b682:	4659      	mov	r1, fp
 800b684:	f7f4 ffd8 	bl	8000638 <__aeabi_dmul>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4640      	mov	r0, r8
 800b68e:	4649      	mov	r1, r9
 800b690:	f7f4 fe1c 	bl	80002cc <__adddf3>
 800b694:	4632      	mov	r2, r6
 800b696:	463b      	mov	r3, r7
 800b698:	4680      	mov	r8, r0
 800b69a:	4689      	mov	r9, r1
 800b69c:	4620      	mov	r0, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7f4 ffca 	bl	8000638 <__aeabi_dmul>
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f7f4 fe0c 	bl	80002cc <__adddf3>
 800b6b4:	4b1d      	ldr	r3, [pc, #116]	; (800b72c <__ieee754_pow+0x3dc>)
 800b6b6:	4299      	cmp	r1, r3
 800b6b8:	ec45 4b19 	vmov	d9, r4, r5
 800b6bc:	4606      	mov	r6, r0
 800b6be:	460f      	mov	r7, r1
 800b6c0:	468b      	mov	fp, r1
 800b6c2:	f340 82fe 	ble.w	800bcc2 <__ieee754_pow+0x972>
 800b6c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b6ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b6ce:	4303      	orrs	r3, r0
 800b6d0:	f000 81f0 	beq.w	800bab4 <__ieee754_pow+0x764>
 800b6d4:	a310      	add	r3, pc, #64	; (adr r3, 800b718 <__ieee754_pow+0x3c8>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	ec51 0b18 	vmov	r0, r1, d8
 800b6de:	f7f4 ffab 	bl	8000638 <__aeabi_dmul>
 800b6e2:	a30d      	add	r3, pc, #52	; (adr r3, 800b718 <__ieee754_pow+0x3c8>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	e6cb      	b.n	800b482 <__ieee754_pow+0x132>
 800b6ea:	bf00      	nop
 800b6ec:	f3af 8000 	nop.w
 800b6f0:	60000000 	.word	0x60000000
 800b6f4:	3ff71547 	.word	0x3ff71547
 800b6f8:	f85ddf44 	.word	0xf85ddf44
 800b6fc:	3e54ae0b 	.word	0x3e54ae0b
 800b700:	55555555 	.word	0x55555555
 800b704:	3fd55555 	.word	0x3fd55555
 800b708:	652b82fe 	.word	0x652b82fe
 800b70c:	3ff71547 	.word	0x3ff71547
 800b710:	00000000 	.word	0x00000000
 800b714:	bff00000 	.word	0xbff00000
 800b718:	8800759c 	.word	0x8800759c
 800b71c:	7e37e43c 	.word	0x7e37e43c
 800b720:	3ff00000 	.word	0x3ff00000
 800b724:	3fd00000 	.word	0x3fd00000
 800b728:	3fe00000 	.word	0x3fe00000
 800b72c:	408fffff 	.word	0x408fffff
 800b730:	4bd7      	ldr	r3, [pc, #860]	; (800ba90 <__ieee754_pow+0x740>)
 800b732:	ea03 0309 	and.w	r3, r3, r9
 800b736:	2200      	movs	r2, #0
 800b738:	b92b      	cbnz	r3, 800b746 <__ieee754_pow+0x3f6>
 800b73a:	4bd6      	ldr	r3, [pc, #856]	; (800ba94 <__ieee754_pow+0x744>)
 800b73c:	f7f4 ff7c 	bl	8000638 <__aeabi_dmul>
 800b740:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b744:	460c      	mov	r4, r1
 800b746:	1523      	asrs	r3, r4, #20
 800b748:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b74c:	4413      	add	r3, r2
 800b74e:	9309      	str	r3, [sp, #36]	; 0x24
 800b750:	4bd1      	ldr	r3, [pc, #836]	; (800ba98 <__ieee754_pow+0x748>)
 800b752:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b756:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b75a:	429c      	cmp	r4, r3
 800b75c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b760:	dd08      	ble.n	800b774 <__ieee754_pow+0x424>
 800b762:	4bce      	ldr	r3, [pc, #824]	; (800ba9c <__ieee754_pow+0x74c>)
 800b764:	429c      	cmp	r4, r3
 800b766:	f340 8163 	ble.w	800ba30 <__ieee754_pow+0x6e0>
 800b76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76c:	3301      	adds	r3, #1
 800b76e:	9309      	str	r3, [sp, #36]	; 0x24
 800b770:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b774:	2400      	movs	r4, #0
 800b776:	00e3      	lsls	r3, r4, #3
 800b778:	930b      	str	r3, [sp, #44]	; 0x2c
 800b77a:	4bc9      	ldr	r3, [pc, #804]	; (800baa0 <__ieee754_pow+0x750>)
 800b77c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b780:	ed93 7b00 	vldr	d7, [r3]
 800b784:	4629      	mov	r1, r5
 800b786:	ec53 2b17 	vmov	r2, r3, d7
 800b78a:	eeb0 8a47 	vmov.f32	s16, s14
 800b78e:	eef0 8a67 	vmov.f32	s17, s15
 800b792:	4682      	mov	sl, r0
 800b794:	f7f4 fd98 	bl	80002c8 <__aeabi_dsub>
 800b798:	4652      	mov	r2, sl
 800b79a:	4606      	mov	r6, r0
 800b79c:	460f      	mov	r7, r1
 800b79e:	462b      	mov	r3, r5
 800b7a0:	ec51 0b18 	vmov	r0, r1, d8
 800b7a4:	f7f4 fd92 	bl	80002cc <__adddf3>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	49bd      	ldr	r1, [pc, #756]	; (800baa4 <__ieee754_pow+0x754>)
 800b7b0:	f7f5 f86c 	bl	800088c <__aeabi_ddiv>
 800b7b4:	ec41 0b19 	vmov	d9, r0, r1
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4630      	mov	r0, r6
 800b7be:	4639      	mov	r1, r7
 800b7c0:	f7f4 ff3a 	bl	8000638 <__aeabi_dmul>
 800b7c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b7c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b7d8:	46ab      	mov	fp, r5
 800b7da:	106d      	asrs	r5, r5, #1
 800b7dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b7e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b7e4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4614      	mov	r4, r2
 800b7f0:	461d      	mov	r5, r3
 800b7f2:	f7f4 ff21 	bl	8000638 <__aeabi_dmul>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	f7f4 fd63 	bl	80002c8 <__aeabi_dsub>
 800b802:	ec53 2b18 	vmov	r2, r3, d8
 800b806:	4606      	mov	r6, r0
 800b808:	460f      	mov	r7, r1
 800b80a:	4620      	mov	r0, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7f4 fd5b 	bl	80002c8 <__aeabi_dsub>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4650      	mov	r0, sl
 800b818:	4659      	mov	r1, fp
 800b81a:	f7f4 fd55 	bl	80002c8 <__aeabi_dsub>
 800b81e:	4642      	mov	r2, r8
 800b820:	464b      	mov	r3, r9
 800b822:	f7f4 ff09 	bl	8000638 <__aeabi_dmul>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f4 fd4b 	bl	80002c8 <__aeabi_dsub>
 800b832:	ec53 2b19 	vmov	r2, r3, d9
 800b836:	f7f4 feff 	bl	8000638 <__aeabi_dmul>
 800b83a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b83e:	ec41 0b18 	vmov	d8, r0, r1
 800b842:	4610      	mov	r0, r2
 800b844:	4619      	mov	r1, r3
 800b846:	f7f4 fef7 	bl	8000638 <__aeabi_dmul>
 800b84a:	a37d      	add	r3, pc, #500	; (adr r3, 800ba40 <__ieee754_pow+0x6f0>)
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	4604      	mov	r4, r0
 800b852:	460d      	mov	r5, r1
 800b854:	f7f4 fef0 	bl	8000638 <__aeabi_dmul>
 800b858:	a37b      	add	r3, pc, #492	; (adr r3, 800ba48 <__ieee754_pow+0x6f8>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fd35 	bl	80002cc <__adddf3>
 800b862:	4622      	mov	r2, r4
 800b864:	462b      	mov	r3, r5
 800b866:	f7f4 fee7 	bl	8000638 <__aeabi_dmul>
 800b86a:	a379      	add	r3, pc, #484	; (adr r3, 800ba50 <__ieee754_pow+0x700>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fd2c 	bl	80002cc <__adddf3>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f4 fede 	bl	8000638 <__aeabi_dmul>
 800b87c:	a376      	add	r3, pc, #472	; (adr r3, 800ba58 <__ieee754_pow+0x708>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	f7f4 fd23 	bl	80002cc <__adddf3>
 800b886:	4622      	mov	r2, r4
 800b888:	462b      	mov	r3, r5
 800b88a:	f7f4 fed5 	bl	8000638 <__aeabi_dmul>
 800b88e:	a374      	add	r3, pc, #464	; (adr r3, 800ba60 <__ieee754_pow+0x710>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	f7f4 fd1a 	bl	80002cc <__adddf3>
 800b898:	4622      	mov	r2, r4
 800b89a:	462b      	mov	r3, r5
 800b89c:	f7f4 fecc 	bl	8000638 <__aeabi_dmul>
 800b8a0:	a371      	add	r3, pc, #452	; (adr r3, 800ba68 <__ieee754_pow+0x718>)
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	f7f4 fd11 	bl	80002cc <__adddf3>
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	460f      	mov	r7, r1
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7f4 febf 	bl	8000638 <__aeabi_dmul>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	f7f4 feb9 	bl	8000638 <__aeabi_dmul>
 800b8c6:	4642      	mov	r2, r8
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	460d      	mov	r5, r1
 800b8cc:	464b      	mov	r3, r9
 800b8ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8d2:	f7f4 fcfb 	bl	80002cc <__adddf3>
 800b8d6:	ec53 2b18 	vmov	r2, r3, d8
 800b8da:	f7f4 fead 	bl	8000638 <__aeabi_dmul>
 800b8de:	4622      	mov	r2, r4
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	f7f4 fcf3 	bl	80002cc <__adddf3>
 800b8e6:	4642      	mov	r2, r8
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	464b      	mov	r3, r9
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	f7f4 fea1 	bl	8000638 <__aeabi_dmul>
 800b8f6:	4b6c      	ldr	r3, [pc, #432]	; (800baa8 <__ieee754_pow+0x758>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	f7f4 fce5 	bl	80002cc <__adddf3>
 800b902:	4652      	mov	r2, sl
 800b904:	465b      	mov	r3, fp
 800b906:	f7f4 fce1 	bl	80002cc <__adddf3>
 800b90a:	9c04      	ldr	r4, [sp, #16]
 800b90c:	460d      	mov	r5, r1
 800b90e:	4622      	mov	r2, r4
 800b910:	460b      	mov	r3, r1
 800b912:	4640      	mov	r0, r8
 800b914:	4649      	mov	r1, r9
 800b916:	f7f4 fe8f 	bl	8000638 <__aeabi_dmul>
 800b91a:	4b63      	ldr	r3, [pc, #396]	; (800baa8 <__ieee754_pow+0x758>)
 800b91c:	4680      	mov	r8, r0
 800b91e:	4689      	mov	r9, r1
 800b920:	2200      	movs	r2, #0
 800b922:	4620      	mov	r0, r4
 800b924:	4629      	mov	r1, r5
 800b926:	f7f4 fccf 	bl	80002c8 <__aeabi_dsub>
 800b92a:	4632      	mov	r2, r6
 800b92c:	463b      	mov	r3, r7
 800b92e:	f7f4 fccb 	bl	80002c8 <__aeabi_dsub>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4650      	mov	r0, sl
 800b938:	4659      	mov	r1, fp
 800b93a:	f7f4 fcc5 	bl	80002c8 <__aeabi_dsub>
 800b93e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b942:	f7f4 fe79 	bl	8000638 <__aeabi_dmul>
 800b946:	4622      	mov	r2, r4
 800b948:	4606      	mov	r6, r0
 800b94a:	460f      	mov	r7, r1
 800b94c:	462b      	mov	r3, r5
 800b94e:	ec51 0b18 	vmov	r0, r1, d8
 800b952:	f7f4 fe71 	bl	8000638 <__aeabi_dmul>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	4630      	mov	r0, r6
 800b95c:	4639      	mov	r1, r7
 800b95e:	f7f4 fcb5 	bl	80002cc <__adddf3>
 800b962:	4606      	mov	r6, r0
 800b964:	460f      	mov	r7, r1
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	f7f4 fcad 	bl	80002cc <__adddf3>
 800b972:	9c04      	ldr	r4, [sp, #16]
 800b974:	a33e      	add	r3, pc, #248	; (adr r3, 800ba70 <__ieee754_pow+0x720>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	4620      	mov	r0, r4
 800b97c:	460d      	mov	r5, r1
 800b97e:	f7f4 fe5b 	bl	8000638 <__aeabi_dmul>
 800b982:	4642      	mov	r2, r8
 800b984:	ec41 0b18 	vmov	d8, r0, r1
 800b988:	464b      	mov	r3, r9
 800b98a:	4620      	mov	r0, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	f7f4 fc9b 	bl	80002c8 <__aeabi_dsub>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4630      	mov	r0, r6
 800b998:	4639      	mov	r1, r7
 800b99a:	f7f4 fc95 	bl	80002c8 <__aeabi_dsub>
 800b99e:	a336      	add	r3, pc, #216	; (adr r3, 800ba78 <__ieee754_pow+0x728>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f4 fe48 	bl	8000638 <__aeabi_dmul>
 800b9a8:	a335      	add	r3, pc, #212	; (adr r3, 800ba80 <__ieee754_pow+0x730>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	460f      	mov	r7, r1
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	f7f4 fe3f 	bl	8000638 <__aeabi_dmul>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	f7f4 fc83 	bl	80002cc <__adddf3>
 800b9c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9c8:	4b38      	ldr	r3, [pc, #224]	; (800baac <__ieee754_pow+0x75c>)
 800b9ca:	4413      	add	r3, r2
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fc7c 	bl	80002cc <__adddf3>
 800b9d4:	4682      	mov	sl, r0
 800b9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d8:	468b      	mov	fp, r1
 800b9da:	f7f4 fdc3 	bl	8000564 <__aeabi_i2d>
 800b9de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9e0:	4b33      	ldr	r3, [pc, #204]	; (800bab0 <__ieee754_pow+0x760>)
 800b9e2:	4413      	add	r3, r2
 800b9e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	460f      	mov	r7, r1
 800b9ec:	4652      	mov	r2, sl
 800b9ee:	465b      	mov	r3, fp
 800b9f0:	ec51 0b18 	vmov	r0, r1, d8
 800b9f4:	f7f4 fc6a 	bl	80002cc <__adddf3>
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	464b      	mov	r3, r9
 800b9fc:	f7f4 fc66 	bl	80002cc <__adddf3>
 800ba00:	4632      	mov	r2, r6
 800ba02:	463b      	mov	r3, r7
 800ba04:	f7f4 fc62 	bl	80002cc <__adddf3>
 800ba08:	9c04      	ldr	r4, [sp, #16]
 800ba0a:	4632      	mov	r2, r6
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	4620      	mov	r0, r4
 800ba10:	460d      	mov	r5, r1
 800ba12:	f7f4 fc59 	bl	80002c8 <__aeabi_dsub>
 800ba16:	4642      	mov	r2, r8
 800ba18:	464b      	mov	r3, r9
 800ba1a:	f7f4 fc55 	bl	80002c8 <__aeabi_dsub>
 800ba1e:	ec53 2b18 	vmov	r2, r3, d8
 800ba22:	f7f4 fc51 	bl	80002c8 <__aeabi_dsub>
 800ba26:	4602      	mov	r2, r0
 800ba28:	460b      	mov	r3, r1
 800ba2a:	4650      	mov	r0, sl
 800ba2c:	4659      	mov	r1, fp
 800ba2e:	e606      	b.n	800b63e <__ieee754_pow+0x2ee>
 800ba30:	2401      	movs	r4, #1
 800ba32:	e6a0      	b.n	800b776 <__ieee754_pow+0x426>
 800ba34:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ba88 <__ieee754_pow+0x738>
 800ba38:	e60d      	b.n	800b656 <__ieee754_pow+0x306>
 800ba3a:	bf00      	nop
 800ba3c:	f3af 8000 	nop.w
 800ba40:	4a454eef 	.word	0x4a454eef
 800ba44:	3fca7e28 	.word	0x3fca7e28
 800ba48:	93c9db65 	.word	0x93c9db65
 800ba4c:	3fcd864a 	.word	0x3fcd864a
 800ba50:	a91d4101 	.word	0xa91d4101
 800ba54:	3fd17460 	.word	0x3fd17460
 800ba58:	518f264d 	.word	0x518f264d
 800ba5c:	3fd55555 	.word	0x3fd55555
 800ba60:	db6fabff 	.word	0xdb6fabff
 800ba64:	3fdb6db6 	.word	0x3fdb6db6
 800ba68:	33333303 	.word	0x33333303
 800ba6c:	3fe33333 	.word	0x3fe33333
 800ba70:	e0000000 	.word	0xe0000000
 800ba74:	3feec709 	.word	0x3feec709
 800ba78:	dc3a03fd 	.word	0xdc3a03fd
 800ba7c:	3feec709 	.word	0x3feec709
 800ba80:	145b01f5 	.word	0x145b01f5
 800ba84:	be3e2fe0 	.word	0xbe3e2fe0
 800ba88:	00000000 	.word	0x00000000
 800ba8c:	3ff00000 	.word	0x3ff00000
 800ba90:	7ff00000 	.word	0x7ff00000
 800ba94:	43400000 	.word	0x43400000
 800ba98:	0003988e 	.word	0x0003988e
 800ba9c:	000bb679 	.word	0x000bb679
 800baa0:	0800d828 	.word	0x0800d828
 800baa4:	3ff00000 	.word	0x3ff00000
 800baa8:	40080000 	.word	0x40080000
 800baac:	0800d848 	.word	0x0800d848
 800bab0:	0800d838 	.word	0x0800d838
 800bab4:	a3b5      	add	r3, pc, #724	; (adr r3, 800bd8c <__ieee754_pow+0xa3c>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f4 fc05 	bl	80002cc <__adddf3>
 800bac2:	4622      	mov	r2, r4
 800bac4:	ec41 0b1a 	vmov	d10, r0, r1
 800bac8:	462b      	mov	r3, r5
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f4 fbfb 	bl	80002c8 <__aeabi_dsub>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	ec51 0b1a 	vmov	r0, r1, d10
 800bada:	f7f5 f83d 	bl	8000b58 <__aeabi_dcmpgt>
 800bade:	2800      	cmp	r0, #0
 800bae0:	f47f adf8 	bne.w	800b6d4 <__ieee754_pow+0x384>
 800bae4:	4aa4      	ldr	r2, [pc, #656]	; (800bd78 <__ieee754_pow+0xa28>)
 800bae6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800baea:	4293      	cmp	r3, r2
 800baec:	f340 810b 	ble.w	800bd06 <__ieee754_pow+0x9b6>
 800baf0:	151b      	asrs	r3, r3, #20
 800baf2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800baf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bafa:	fa4a f303 	asr.w	r3, sl, r3
 800bafe:	445b      	add	r3, fp
 800bb00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bb04:	4e9d      	ldr	r6, [pc, #628]	; (800bd7c <__ieee754_pow+0xa2c>)
 800bb06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bb0a:	4116      	asrs	r6, r2
 800bb0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bb10:	2000      	movs	r0, #0
 800bb12:	ea23 0106 	bic.w	r1, r3, r6
 800bb16:	f1c2 0214 	rsb	r2, r2, #20
 800bb1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bb1e:	fa4a fa02 	asr.w	sl, sl, r2
 800bb22:	f1bb 0f00 	cmp.w	fp, #0
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	bfb8      	it	lt
 800bb30:	f1ca 0a00 	rsblt	sl, sl, #0
 800bb34:	f7f4 fbc8 	bl	80002c8 <__aeabi_dsub>
 800bb38:	ec41 0b19 	vmov	d9, r0, r1
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	464b      	mov	r3, r9
 800bb40:	ec51 0b19 	vmov	r0, r1, d9
 800bb44:	f7f4 fbc2 	bl	80002cc <__adddf3>
 800bb48:	2400      	movs	r4, #0
 800bb4a:	a379      	add	r3, pc, #484	; (adr r3, 800bd30 <__ieee754_pow+0x9e0>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	4620      	mov	r0, r4
 800bb52:	460d      	mov	r5, r1
 800bb54:	f7f4 fd70 	bl	8000638 <__aeabi_dmul>
 800bb58:	ec53 2b19 	vmov	r2, r3, d9
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	460f      	mov	r7, r1
 800bb60:	4620      	mov	r0, r4
 800bb62:	4629      	mov	r1, r5
 800bb64:	f7f4 fbb0 	bl	80002c8 <__aeabi_dsub>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4640      	mov	r0, r8
 800bb6e:	4649      	mov	r1, r9
 800bb70:	f7f4 fbaa 	bl	80002c8 <__aeabi_dsub>
 800bb74:	a370      	add	r3, pc, #448	; (adr r3, 800bd38 <__ieee754_pow+0x9e8>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fd5d 	bl	8000638 <__aeabi_dmul>
 800bb7e:	a370      	add	r3, pc, #448	; (adr r3, 800bd40 <__ieee754_pow+0x9f0>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4640      	mov	r0, r8
 800bb96:	4649      	mov	r1, r9
 800bb98:	f7f4 fb98 	bl	80002cc <__adddf3>
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4630      	mov	r0, r6
 800bba6:	4639      	mov	r1, r7
 800bba8:	f7f4 fb90 	bl	80002cc <__adddf3>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	4680      	mov	r8, r0
 800bbb2:	4689      	mov	r9, r1
 800bbb4:	f7f4 fb88 	bl	80002c8 <__aeabi_dsub>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f7f4 fb82 	bl	80002c8 <__aeabi_dsub>
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	460f      	mov	r7, r1
 800bbca:	464b      	mov	r3, r9
 800bbcc:	4640      	mov	r0, r8
 800bbce:	4649      	mov	r1, r9
 800bbd0:	f7f4 fd32 	bl	8000638 <__aeabi_dmul>
 800bbd4:	a35c      	add	r3, pc, #368	; (adr r3, 800bd48 <__ieee754_pow+0x9f8>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	4604      	mov	r4, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	f7f4 fd2b 	bl	8000638 <__aeabi_dmul>
 800bbe2:	a35b      	add	r3, pc, #364	; (adr r3, 800bd50 <__ieee754_pow+0xa00>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fb6e 	bl	80002c8 <__aeabi_dsub>
 800bbec:	4622      	mov	r2, r4
 800bbee:	462b      	mov	r3, r5
 800bbf0:	f7f4 fd22 	bl	8000638 <__aeabi_dmul>
 800bbf4:	a358      	add	r3, pc, #352	; (adr r3, 800bd58 <__ieee754_pow+0xa08>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	f7f4 fb67 	bl	80002cc <__adddf3>
 800bbfe:	4622      	mov	r2, r4
 800bc00:	462b      	mov	r3, r5
 800bc02:	f7f4 fd19 	bl	8000638 <__aeabi_dmul>
 800bc06:	a356      	add	r3, pc, #344	; (adr r3, 800bd60 <__ieee754_pow+0xa10>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	f7f4 fb5c 	bl	80002c8 <__aeabi_dsub>
 800bc10:	4622      	mov	r2, r4
 800bc12:	462b      	mov	r3, r5
 800bc14:	f7f4 fd10 	bl	8000638 <__aeabi_dmul>
 800bc18:	a353      	add	r3, pc, #332	; (adr r3, 800bd68 <__ieee754_pow+0xa18>)
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	f7f4 fb55 	bl	80002cc <__adddf3>
 800bc22:	4622      	mov	r2, r4
 800bc24:	462b      	mov	r3, r5
 800bc26:	f7f4 fd07 	bl	8000638 <__aeabi_dmul>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4640      	mov	r0, r8
 800bc30:	4649      	mov	r1, r9
 800bc32:	f7f4 fb49 	bl	80002c8 <__aeabi_dsub>
 800bc36:	4604      	mov	r4, r0
 800bc38:	460d      	mov	r5, r1
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fcf9 	bl	8000638 <__aeabi_dmul>
 800bc46:	2200      	movs	r2, #0
 800bc48:	ec41 0b19 	vmov	d9, r0, r1
 800bc4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc50:	4620      	mov	r0, r4
 800bc52:	4629      	mov	r1, r5
 800bc54:	f7f4 fb38 	bl	80002c8 <__aeabi_dsub>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	ec51 0b19 	vmov	r0, r1, d9
 800bc60:	f7f4 fe14 	bl	800088c <__aeabi_ddiv>
 800bc64:	4632      	mov	r2, r6
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	4640      	mov	r0, r8
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7f4 fce2 	bl	8000638 <__aeabi_dmul>
 800bc74:	4632      	mov	r2, r6
 800bc76:	463b      	mov	r3, r7
 800bc78:	f7f4 fb28 	bl	80002cc <__adddf3>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4620      	mov	r0, r4
 800bc82:	4629      	mov	r1, r5
 800bc84:	f7f4 fb20 	bl	80002c8 <__aeabi_dsub>
 800bc88:	4642      	mov	r2, r8
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	f7f4 fb1c 	bl	80002c8 <__aeabi_dsub>
 800bc90:	460b      	mov	r3, r1
 800bc92:	4602      	mov	r2, r0
 800bc94:	493a      	ldr	r1, [pc, #232]	; (800bd80 <__ieee754_pow+0xa30>)
 800bc96:	2000      	movs	r0, #0
 800bc98:	f7f4 fb16 	bl	80002c8 <__aeabi_dsub>
 800bc9c:	e9cd 0100 	strd	r0, r1, [sp]
 800bca0:	9b01      	ldr	r3, [sp, #4]
 800bca2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcaa:	da2f      	bge.n	800bd0c <__ieee754_pow+0x9bc>
 800bcac:	4650      	mov	r0, sl
 800bcae:	ed9d 0b00 	vldr	d0, [sp]
 800bcb2:	f001 fac1 	bl	800d238 <scalbn>
 800bcb6:	ec51 0b10 	vmov	r0, r1, d0
 800bcba:	ec53 2b18 	vmov	r2, r3, d8
 800bcbe:	f7ff bbe0 	b.w	800b482 <__ieee754_pow+0x132>
 800bcc2:	4b30      	ldr	r3, [pc, #192]	; (800bd84 <__ieee754_pow+0xa34>)
 800bcc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bcc8:	429e      	cmp	r6, r3
 800bcca:	f77f af0b 	ble.w	800bae4 <__ieee754_pow+0x794>
 800bcce:	4b2e      	ldr	r3, [pc, #184]	; (800bd88 <__ieee754_pow+0xa38>)
 800bcd0:	440b      	add	r3, r1
 800bcd2:	4303      	orrs	r3, r0
 800bcd4:	d00b      	beq.n	800bcee <__ieee754_pow+0x99e>
 800bcd6:	a326      	add	r3, pc, #152	; (adr r3, 800bd70 <__ieee754_pow+0xa20>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	ec51 0b18 	vmov	r0, r1, d8
 800bce0:	f7f4 fcaa 	bl	8000638 <__aeabi_dmul>
 800bce4:	a322      	add	r3, pc, #136	; (adr r3, 800bd70 <__ieee754_pow+0xa20>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7ff bbca 	b.w	800b482 <__ieee754_pow+0x132>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	462b      	mov	r3, r5
 800bcf2:	f7f4 fae9 	bl	80002c8 <__aeabi_dsub>
 800bcf6:	4642      	mov	r2, r8
 800bcf8:	464b      	mov	r3, r9
 800bcfa:	f7f4 ff23 	bl	8000b44 <__aeabi_dcmpge>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f43f aef0 	beq.w	800bae4 <__ieee754_pow+0x794>
 800bd04:	e7e7      	b.n	800bcd6 <__ieee754_pow+0x986>
 800bd06:	f04f 0a00 	mov.w	sl, #0
 800bd0a:	e717      	b.n	800bb3c <__ieee754_pow+0x7ec>
 800bd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd10:	4619      	mov	r1, r3
 800bd12:	e7d2      	b.n	800bcba <__ieee754_pow+0x96a>
 800bd14:	491a      	ldr	r1, [pc, #104]	; (800bd80 <__ieee754_pow+0xa30>)
 800bd16:	2000      	movs	r0, #0
 800bd18:	f7ff bb9e 	b.w	800b458 <__ieee754_pow+0x108>
 800bd1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd20:	f7ff bb9a 	b.w	800b458 <__ieee754_pow+0x108>
 800bd24:	9000      	str	r0, [sp, #0]
 800bd26:	f7ff bb76 	b.w	800b416 <__ieee754_pow+0xc6>
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	f7ff bb60 	b.w	800b3f0 <__ieee754_pow+0xa0>
 800bd30:	00000000 	.word	0x00000000
 800bd34:	3fe62e43 	.word	0x3fe62e43
 800bd38:	fefa39ef 	.word	0xfefa39ef
 800bd3c:	3fe62e42 	.word	0x3fe62e42
 800bd40:	0ca86c39 	.word	0x0ca86c39
 800bd44:	be205c61 	.word	0xbe205c61
 800bd48:	72bea4d0 	.word	0x72bea4d0
 800bd4c:	3e663769 	.word	0x3e663769
 800bd50:	c5d26bf1 	.word	0xc5d26bf1
 800bd54:	3ebbbd41 	.word	0x3ebbbd41
 800bd58:	af25de2c 	.word	0xaf25de2c
 800bd5c:	3f11566a 	.word	0x3f11566a
 800bd60:	16bebd93 	.word	0x16bebd93
 800bd64:	3f66c16c 	.word	0x3f66c16c
 800bd68:	5555553e 	.word	0x5555553e
 800bd6c:	3fc55555 	.word	0x3fc55555
 800bd70:	c2f8f359 	.word	0xc2f8f359
 800bd74:	01a56e1f 	.word	0x01a56e1f
 800bd78:	3fe00000 	.word	0x3fe00000
 800bd7c:	000fffff 	.word	0x000fffff
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	4090cbff 	.word	0x4090cbff
 800bd88:	3f6f3400 	.word	0x3f6f3400
 800bd8c:	652b82fe 	.word	0x652b82fe
 800bd90:	3c971547 	.word	0x3c971547
 800bd94:	00000000 	.word	0x00000000

0800bd98 <__ieee754_rem_pio2>:
 800bd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9c:	ed2d 8b02 	vpush	{d8}
 800bda0:	ec55 4b10 	vmov	r4, r5, d0
 800bda4:	4bca      	ldr	r3, [pc, #808]	; (800c0d0 <__ieee754_rem_pio2+0x338>)
 800bda6:	b08b      	sub	sp, #44	; 0x2c
 800bda8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800bdac:	4598      	cmp	r8, r3
 800bdae:	4682      	mov	sl, r0
 800bdb0:	9502      	str	r5, [sp, #8]
 800bdb2:	dc08      	bgt.n	800bdc6 <__ieee754_rem_pio2+0x2e>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	ed80 0b00 	vstr	d0, [r0]
 800bdbc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bdc0:	f04f 0b00 	mov.w	fp, #0
 800bdc4:	e028      	b.n	800be18 <__ieee754_rem_pio2+0x80>
 800bdc6:	4bc3      	ldr	r3, [pc, #780]	; (800c0d4 <__ieee754_rem_pio2+0x33c>)
 800bdc8:	4598      	cmp	r8, r3
 800bdca:	dc78      	bgt.n	800bebe <__ieee754_rem_pio2+0x126>
 800bdcc:	9b02      	ldr	r3, [sp, #8]
 800bdce:	4ec2      	ldr	r6, [pc, #776]	; (800c0d8 <__ieee754_rem_pio2+0x340>)
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	ee10 0a10 	vmov	r0, s0
 800bdd6:	a3b0      	add	r3, pc, #704	; (adr r3, 800c098 <__ieee754_rem_pio2+0x300>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	4629      	mov	r1, r5
 800bdde:	dd39      	ble.n	800be54 <__ieee754_rem_pio2+0xbc>
 800bde0:	f7f4 fa72 	bl	80002c8 <__aeabi_dsub>
 800bde4:	45b0      	cmp	r8, r6
 800bde6:	4604      	mov	r4, r0
 800bde8:	460d      	mov	r5, r1
 800bdea:	d01b      	beq.n	800be24 <__ieee754_rem_pio2+0x8c>
 800bdec:	a3ac      	add	r3, pc, #688	; (adr r3, 800c0a0 <__ieee754_rem_pio2+0x308>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 fa69 	bl	80002c8 <__aeabi_dsub>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	e9ca 2300 	strd	r2, r3, [sl]
 800bdfe:	4620      	mov	r0, r4
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 fa61 	bl	80002c8 <__aeabi_dsub>
 800be06:	a3a6      	add	r3, pc, #664	; (adr r3, 800c0a0 <__ieee754_rem_pio2+0x308>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f7f4 fa5c 	bl	80002c8 <__aeabi_dsub>
 800be10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be14:	f04f 0b01 	mov.w	fp, #1
 800be18:	4658      	mov	r0, fp
 800be1a:	b00b      	add	sp, #44	; 0x2c
 800be1c:	ecbd 8b02 	vpop	{d8}
 800be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be24:	a3a0      	add	r3, pc, #640	; (adr r3, 800c0a8 <__ieee754_rem_pio2+0x310>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fa4d 	bl	80002c8 <__aeabi_dsub>
 800be2e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x318>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	4604      	mov	r4, r0
 800be36:	460d      	mov	r5, r1
 800be38:	f7f4 fa46 	bl	80002c8 <__aeabi_dsub>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	e9ca 2300 	strd	r2, r3, [sl]
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 fa3e 	bl	80002c8 <__aeabi_dsub>
 800be4c:	a398      	add	r3, pc, #608	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x318>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	e7db      	b.n	800be0c <__ieee754_rem_pio2+0x74>
 800be54:	f7f4 fa3a 	bl	80002cc <__adddf3>
 800be58:	45b0      	cmp	r8, r6
 800be5a:	4604      	mov	r4, r0
 800be5c:	460d      	mov	r5, r1
 800be5e:	d016      	beq.n	800be8e <__ieee754_rem_pio2+0xf6>
 800be60:	a38f      	add	r3, pc, #572	; (adr r3, 800c0a0 <__ieee754_rem_pio2+0x308>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 fa31 	bl	80002cc <__adddf3>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	e9ca 2300 	strd	r2, r3, [sl]
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fa27 	bl	80002c8 <__aeabi_dsub>
 800be7a:	a389      	add	r3, pc, #548	; (adr r3, 800c0a0 <__ieee754_rem_pio2+0x308>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f7f4 fa24 	bl	80002cc <__adddf3>
 800be84:	f04f 3bff 	mov.w	fp, #4294967295
 800be88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be8c:	e7c4      	b.n	800be18 <__ieee754_rem_pio2+0x80>
 800be8e:	a386      	add	r3, pc, #536	; (adr r3, 800c0a8 <__ieee754_rem_pio2+0x310>)
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f7f4 fa1a 	bl	80002cc <__adddf3>
 800be98:	a385      	add	r3, pc, #532	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x318>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	f7f4 fa13 	bl	80002cc <__adddf3>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	e9ca 2300 	strd	r2, r3, [sl]
 800beae:	4620      	mov	r0, r4
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7f4 fa09 	bl	80002c8 <__aeabi_dsub>
 800beb6:	a37e      	add	r3, pc, #504	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x318>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	e7e0      	b.n	800be80 <__ieee754_rem_pio2+0xe8>
 800bebe:	4b87      	ldr	r3, [pc, #540]	; (800c0dc <__ieee754_rem_pio2+0x344>)
 800bec0:	4598      	cmp	r8, r3
 800bec2:	f300 80d9 	bgt.w	800c078 <__ieee754_rem_pio2+0x2e0>
 800bec6:	f001 f88f 	bl	800cfe8 <fabs>
 800beca:	ec55 4b10 	vmov	r4, r5, d0
 800bece:	ee10 0a10 	vmov	r0, s0
 800bed2:	a379      	add	r3, pc, #484	; (adr r3, 800c0b8 <__ieee754_rem_pio2+0x320>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	4629      	mov	r1, r5
 800beda:	f7f4 fbad 	bl	8000638 <__aeabi_dmul>
 800bede:	4b80      	ldr	r3, [pc, #512]	; (800c0e0 <__ieee754_rem_pio2+0x348>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	f7f4 f9f3 	bl	80002cc <__adddf3>
 800bee6:	f7f4 fe57 	bl	8000b98 <__aeabi_d2iz>
 800beea:	4683      	mov	fp, r0
 800beec:	f7f4 fb3a 	bl	8000564 <__aeabi_i2d>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	ec43 2b18 	vmov	d8, r2, r3
 800bef8:	a367      	add	r3, pc, #412	; (adr r3, 800c098 <__ieee754_rem_pio2+0x300>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 fb9b 	bl	8000638 <__aeabi_dmul>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 f9dd 	bl	80002c8 <__aeabi_dsub>
 800bf0e:	a364      	add	r3, pc, #400	; (adr r3, 800c0a0 <__ieee754_rem_pio2+0x308>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	ec51 0b18 	vmov	r0, r1, d8
 800bf1c:	f7f4 fb8c 	bl	8000638 <__aeabi_dmul>
 800bf20:	f1bb 0f1f 	cmp.w	fp, #31
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	dc0d      	bgt.n	800bf46 <__ieee754_rem_pio2+0x1ae>
 800bf2a:	4b6e      	ldr	r3, [pc, #440]	; (800c0e4 <__ieee754_rem_pio2+0x34c>)
 800bf2c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bf30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf34:	4543      	cmp	r3, r8
 800bf36:	d006      	beq.n	800bf46 <__ieee754_rem_pio2+0x1ae>
 800bf38:	4622      	mov	r2, r4
 800bf3a:	462b      	mov	r3, r5
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	4639      	mov	r1, r7
 800bf40:	f7f4 f9c2 	bl	80002c8 <__aeabi_dsub>
 800bf44:	e00f      	b.n	800bf66 <__ieee754_rem_pio2+0x1ce>
 800bf46:	462b      	mov	r3, r5
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	f7f4 f9bb 	bl	80002c8 <__aeabi_dsub>
 800bf52:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bf56:	9303      	str	r3, [sp, #12]
 800bf58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf5c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bf60:	f1b8 0f10 	cmp.w	r8, #16
 800bf64:	dc02      	bgt.n	800bf6c <__ieee754_rem_pio2+0x1d4>
 800bf66:	e9ca 0100 	strd	r0, r1, [sl]
 800bf6a:	e039      	b.n	800bfe0 <__ieee754_rem_pio2+0x248>
 800bf6c:	a34e      	add	r3, pc, #312	; (adr r3, 800c0a8 <__ieee754_rem_pio2+0x310>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	ec51 0b18 	vmov	r0, r1, d8
 800bf76:	f7f4 fb5f 	bl	8000638 <__aeabi_dmul>
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	460d      	mov	r5, r1
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 f99f 	bl	80002c8 <__aeabi_dsub>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4680      	mov	r8, r0
 800bf90:	4689      	mov	r9, r1
 800bf92:	4630      	mov	r0, r6
 800bf94:	4639      	mov	r1, r7
 800bf96:	f7f4 f997 	bl	80002c8 <__aeabi_dsub>
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	462b      	mov	r3, r5
 800bf9e:	f7f4 f993 	bl	80002c8 <__aeabi_dsub>
 800bfa2:	a343      	add	r3, pc, #268	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x318>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	ec51 0b18 	vmov	r0, r1, d8
 800bfb0:	f7f4 fb42 	bl	8000638 <__aeabi_dmul>
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	462b      	mov	r3, r5
 800bfb8:	f7f4 f986 	bl	80002c8 <__aeabi_dsub>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 f97e 	bl	80002c8 <__aeabi_dsub>
 800bfcc:	9a03      	ldr	r2, [sp, #12]
 800bfce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	2b31      	cmp	r3, #49	; 0x31
 800bfd6:	dc24      	bgt.n	800c022 <__ieee754_rem_pio2+0x28a>
 800bfd8:	e9ca 0100 	strd	r0, r1, [sl]
 800bfdc:	4646      	mov	r6, r8
 800bfde:	464f      	mov	r7, r9
 800bfe0:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4642      	mov	r2, r8
 800bfe8:	464b      	mov	r3, r9
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 f96c 	bl	80002c8 <__aeabi_dsub>
 800bff0:	462b      	mov	r3, r5
 800bff2:	4622      	mov	r2, r4
 800bff4:	f7f4 f968 	bl	80002c8 <__aeabi_dsub>
 800bff8:	9b02      	ldr	r3, [sp, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c000:	f6bf af0a 	bge.w	800be18 <__ieee754_rem_pio2+0x80>
 800c004:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c008:	f8ca 3004 	str.w	r3, [sl, #4]
 800c00c:	f8ca 8000 	str.w	r8, [sl]
 800c010:	f8ca 0008 	str.w	r0, [sl, #8]
 800c014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c018:	f8ca 300c 	str.w	r3, [sl, #12]
 800c01c:	f1cb 0b00 	rsb	fp, fp, #0
 800c020:	e6fa      	b.n	800be18 <__ieee754_rem_pio2+0x80>
 800c022:	a327      	add	r3, pc, #156	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x328>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	ec51 0b18 	vmov	r0, r1, d8
 800c02c:	f7f4 fb04 	bl	8000638 <__aeabi_dmul>
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 f944 	bl	80002c8 <__aeabi_dsub>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4606      	mov	r6, r0
 800c046:	460f      	mov	r7, r1
 800c048:	4640      	mov	r0, r8
 800c04a:	4649      	mov	r1, r9
 800c04c:	f7f4 f93c 	bl	80002c8 <__aeabi_dsub>
 800c050:	4622      	mov	r2, r4
 800c052:	462b      	mov	r3, r5
 800c054:	f7f4 f938 	bl	80002c8 <__aeabi_dsub>
 800c058:	a31b      	add	r3, pc, #108	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x330>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	4604      	mov	r4, r0
 800c060:	460d      	mov	r5, r1
 800c062:	ec51 0b18 	vmov	r0, r1, d8
 800c066:	f7f4 fae7 	bl	8000638 <__aeabi_dmul>
 800c06a:	4622      	mov	r2, r4
 800c06c:	462b      	mov	r3, r5
 800c06e:	f7f4 f92b 	bl	80002c8 <__aeabi_dsub>
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	e75f      	b.n	800bf38 <__ieee754_rem_pio2+0x1a0>
 800c078:	4b1b      	ldr	r3, [pc, #108]	; (800c0e8 <__ieee754_rem_pio2+0x350>)
 800c07a:	4598      	cmp	r8, r3
 800c07c:	dd36      	ble.n	800c0ec <__ieee754_rem_pio2+0x354>
 800c07e:	ee10 2a10 	vmov	r2, s0
 800c082:	462b      	mov	r3, r5
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 f91e 	bl	80002c8 <__aeabi_dsub>
 800c08c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c090:	e9ca 0100 	strd	r0, r1, [sl]
 800c094:	e694      	b.n	800bdc0 <__ieee754_rem_pio2+0x28>
 800c096:	bf00      	nop
 800c098:	54400000 	.word	0x54400000
 800c09c:	3ff921fb 	.word	0x3ff921fb
 800c0a0:	1a626331 	.word	0x1a626331
 800c0a4:	3dd0b461 	.word	0x3dd0b461
 800c0a8:	1a600000 	.word	0x1a600000
 800c0ac:	3dd0b461 	.word	0x3dd0b461
 800c0b0:	2e037073 	.word	0x2e037073
 800c0b4:	3ba3198a 	.word	0x3ba3198a
 800c0b8:	6dc9c883 	.word	0x6dc9c883
 800c0bc:	3fe45f30 	.word	0x3fe45f30
 800c0c0:	2e000000 	.word	0x2e000000
 800c0c4:	3ba3198a 	.word	0x3ba3198a
 800c0c8:	252049c1 	.word	0x252049c1
 800c0cc:	397b839a 	.word	0x397b839a
 800c0d0:	3fe921fb 	.word	0x3fe921fb
 800c0d4:	4002d97b 	.word	0x4002d97b
 800c0d8:	3ff921fb 	.word	0x3ff921fb
 800c0dc:	413921fb 	.word	0x413921fb
 800c0e0:	3fe00000 	.word	0x3fe00000
 800c0e4:	0800d858 	.word	0x0800d858
 800c0e8:	7fefffff 	.word	0x7fefffff
 800c0ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c0f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c0f4:	ee10 0a10 	vmov	r0, s0
 800c0f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c0fc:	ee10 6a10 	vmov	r6, s0
 800c100:	460f      	mov	r7, r1
 800c102:	f7f4 fd49 	bl	8000b98 <__aeabi_d2iz>
 800c106:	f7f4 fa2d 	bl	8000564 <__aeabi_i2d>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4630      	mov	r0, r6
 800c110:	4639      	mov	r1, r7
 800c112:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c116:	f7f4 f8d7 	bl	80002c8 <__aeabi_dsub>
 800c11a:	4b22      	ldr	r3, [pc, #136]	; (800c1a4 <__ieee754_rem_pio2+0x40c>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	f7f4 fa8b 	bl	8000638 <__aeabi_dmul>
 800c122:	460f      	mov	r7, r1
 800c124:	4606      	mov	r6, r0
 800c126:	f7f4 fd37 	bl	8000b98 <__aeabi_d2iz>
 800c12a:	f7f4 fa1b 	bl	8000564 <__aeabi_i2d>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4630      	mov	r0, r6
 800c134:	4639      	mov	r1, r7
 800c136:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c13a:	f7f4 f8c5 	bl	80002c8 <__aeabi_dsub>
 800c13e:	4b19      	ldr	r3, [pc, #100]	; (800c1a4 <__ieee754_rem_pio2+0x40c>)
 800c140:	2200      	movs	r2, #0
 800c142:	f7f4 fa79 	bl	8000638 <__aeabi_dmul>
 800c146:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c14a:	ad04      	add	r5, sp, #16
 800c14c:	f04f 0803 	mov.w	r8, #3
 800c150:	46a9      	mov	r9, r5
 800c152:	2600      	movs	r6, #0
 800c154:	2700      	movs	r7, #0
 800c156:	4632      	mov	r2, r6
 800c158:	463b      	mov	r3, r7
 800c15a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c15e:	46c3      	mov	fp, r8
 800c160:	3d08      	subs	r5, #8
 800c162:	f108 38ff 	add.w	r8, r8, #4294967295
 800c166:	f7f4 fccf 	bl	8000b08 <__aeabi_dcmpeq>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d1f3      	bne.n	800c156 <__ieee754_rem_pio2+0x3be>
 800c16e:	4b0e      	ldr	r3, [pc, #56]	; (800c1a8 <__ieee754_rem_pio2+0x410>)
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	2302      	movs	r3, #2
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4622      	mov	r2, r4
 800c178:	465b      	mov	r3, fp
 800c17a:	4651      	mov	r1, sl
 800c17c:	4648      	mov	r0, r9
 800c17e:	f000 f993 	bl	800c4a8 <__kernel_rem_pio2>
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	4683      	mov	fp, r0
 800c188:	f6bf ae46 	bge.w	800be18 <__ieee754_rem_pio2+0x80>
 800c18c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c194:	f8ca 3004 	str.w	r3, [sl, #4]
 800c198:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c19c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1a0:	e73a      	b.n	800c018 <__ieee754_rem_pio2+0x280>
 800c1a2:	bf00      	nop
 800c1a4:	41700000 	.word	0x41700000
 800c1a8:	0800d8d8 	.word	0x0800d8d8

0800c1ac <__ieee754_sqrt>:
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	ec55 4b10 	vmov	r4, r5, d0
 800c1b4:	4e56      	ldr	r6, [pc, #344]	; (800c310 <__ieee754_sqrt+0x164>)
 800c1b6:	43ae      	bics	r6, r5
 800c1b8:	ee10 0a10 	vmov	r0, s0
 800c1bc:	ee10 3a10 	vmov	r3, s0
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	462a      	mov	r2, r5
 800c1c4:	d110      	bne.n	800c1e8 <__ieee754_sqrt+0x3c>
 800c1c6:	ee10 2a10 	vmov	r2, s0
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	f7f4 fa34 	bl	8000638 <__aeabi_dmul>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	f7f4 f878 	bl	80002cc <__adddf3>
 800c1dc:	4604      	mov	r4, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	ec45 4b10 	vmov	d0, r4, r5
 800c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e8:	2d00      	cmp	r5, #0
 800c1ea:	dc10      	bgt.n	800c20e <__ieee754_sqrt+0x62>
 800c1ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1f0:	4330      	orrs	r0, r6
 800c1f2:	d0f5      	beq.n	800c1e0 <__ieee754_sqrt+0x34>
 800c1f4:	b15d      	cbz	r5, 800c20e <__ieee754_sqrt+0x62>
 800c1f6:	ee10 2a10 	vmov	r2, s0
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	ee10 0a10 	vmov	r0, s0
 800c200:	f7f4 f862 	bl	80002c8 <__aeabi_dsub>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	f7f4 fb40 	bl	800088c <__aeabi_ddiv>
 800c20c:	e7e6      	b.n	800c1dc <__ieee754_sqrt+0x30>
 800c20e:	1509      	asrs	r1, r1, #20
 800c210:	d076      	beq.n	800c300 <__ieee754_sqrt+0x154>
 800c212:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c216:	07ce      	lsls	r6, r1, #31
 800c218:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c21c:	bf5e      	ittt	pl
 800c21e:	0fda      	lsrpl	r2, r3, #31
 800c220:	005b      	lslpl	r3, r3, #1
 800c222:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c226:	0fda      	lsrs	r2, r3, #31
 800c228:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c22c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c230:	2000      	movs	r0, #0
 800c232:	106d      	asrs	r5, r5, #1
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	f04f 0e16 	mov.w	lr, #22
 800c23a:	4684      	mov	ip, r0
 800c23c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c240:	eb0c 0401 	add.w	r4, ip, r1
 800c244:	4294      	cmp	r4, r2
 800c246:	bfde      	ittt	le
 800c248:	1b12      	suble	r2, r2, r4
 800c24a:	eb04 0c01 	addle.w	ip, r4, r1
 800c24e:	1840      	addle	r0, r0, r1
 800c250:	0052      	lsls	r2, r2, #1
 800c252:	f1be 0e01 	subs.w	lr, lr, #1
 800c256:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c25a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c25e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c262:	d1ed      	bne.n	800c240 <__ieee754_sqrt+0x94>
 800c264:	4671      	mov	r1, lr
 800c266:	2720      	movs	r7, #32
 800c268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c26c:	4562      	cmp	r2, ip
 800c26e:	eb04 060e 	add.w	r6, r4, lr
 800c272:	dc02      	bgt.n	800c27a <__ieee754_sqrt+0xce>
 800c274:	d113      	bne.n	800c29e <__ieee754_sqrt+0xf2>
 800c276:	429e      	cmp	r6, r3
 800c278:	d811      	bhi.n	800c29e <__ieee754_sqrt+0xf2>
 800c27a:	2e00      	cmp	r6, #0
 800c27c:	eb06 0e04 	add.w	lr, r6, r4
 800c280:	da43      	bge.n	800c30a <__ieee754_sqrt+0x15e>
 800c282:	f1be 0f00 	cmp.w	lr, #0
 800c286:	db40      	blt.n	800c30a <__ieee754_sqrt+0x15e>
 800c288:	f10c 0801 	add.w	r8, ip, #1
 800c28c:	eba2 020c 	sub.w	r2, r2, ip
 800c290:	429e      	cmp	r6, r3
 800c292:	bf88      	it	hi
 800c294:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c298:	1b9b      	subs	r3, r3, r6
 800c29a:	4421      	add	r1, r4
 800c29c:	46c4      	mov	ip, r8
 800c29e:	0052      	lsls	r2, r2, #1
 800c2a0:	3f01      	subs	r7, #1
 800c2a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c2a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c2aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2ae:	d1dd      	bne.n	800c26c <__ieee754_sqrt+0xc0>
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	d006      	beq.n	800c2c2 <__ieee754_sqrt+0x116>
 800c2b4:	1c4c      	adds	r4, r1, #1
 800c2b6:	bf13      	iteet	ne
 800c2b8:	3101      	addne	r1, #1
 800c2ba:	3001      	addeq	r0, #1
 800c2bc:	4639      	moveq	r1, r7
 800c2be:	f021 0101 	bicne.w	r1, r1, #1
 800c2c2:	1043      	asrs	r3, r0, #1
 800c2c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c2c8:	0849      	lsrs	r1, r1, #1
 800c2ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c2ce:	07c2      	lsls	r2, r0, #31
 800c2d0:	bf48      	it	mi
 800c2d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c2d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c2da:	460c      	mov	r4, r1
 800c2dc:	463d      	mov	r5, r7
 800c2de:	e77f      	b.n	800c1e0 <__ieee754_sqrt+0x34>
 800c2e0:	0ada      	lsrs	r2, r3, #11
 800c2e2:	3815      	subs	r0, #21
 800c2e4:	055b      	lsls	r3, r3, #21
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	d0fa      	beq.n	800c2e0 <__ieee754_sqrt+0x134>
 800c2ea:	02d7      	lsls	r7, r2, #11
 800c2ec:	d50a      	bpl.n	800c304 <__ieee754_sqrt+0x158>
 800c2ee:	f1c1 0420 	rsb	r4, r1, #32
 800c2f2:	fa23 f404 	lsr.w	r4, r3, r4
 800c2f6:	1e4d      	subs	r5, r1, #1
 800c2f8:	408b      	lsls	r3, r1
 800c2fa:	4322      	orrs	r2, r4
 800c2fc:	1b41      	subs	r1, r0, r5
 800c2fe:	e788      	b.n	800c212 <__ieee754_sqrt+0x66>
 800c300:	4608      	mov	r0, r1
 800c302:	e7f0      	b.n	800c2e6 <__ieee754_sqrt+0x13a>
 800c304:	0052      	lsls	r2, r2, #1
 800c306:	3101      	adds	r1, #1
 800c308:	e7ef      	b.n	800c2ea <__ieee754_sqrt+0x13e>
 800c30a:	46e0      	mov	r8, ip
 800c30c:	e7be      	b.n	800c28c <__ieee754_sqrt+0xe0>
 800c30e:	bf00      	nop
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	00000000 	.word	0x00000000

0800c318 <__kernel_cos>:
 800c318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	ec57 6b10 	vmov	r6, r7, d0
 800c320:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c324:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c328:	ed8d 1b00 	vstr	d1, [sp]
 800c32c:	da07      	bge.n	800c33e <__kernel_cos+0x26>
 800c32e:	ee10 0a10 	vmov	r0, s0
 800c332:	4639      	mov	r1, r7
 800c334:	f7f4 fc30 	bl	8000b98 <__aeabi_d2iz>
 800c338:	2800      	cmp	r0, #0
 800c33a:	f000 8088 	beq.w	800c44e <__kernel_cos+0x136>
 800c33e:	4632      	mov	r2, r6
 800c340:	463b      	mov	r3, r7
 800c342:	4630      	mov	r0, r6
 800c344:	4639      	mov	r1, r7
 800c346:	f7f4 f977 	bl	8000638 <__aeabi_dmul>
 800c34a:	4b51      	ldr	r3, [pc, #324]	; (800c490 <__kernel_cos+0x178>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	4604      	mov	r4, r0
 800c350:	460d      	mov	r5, r1
 800c352:	f7f4 f971 	bl	8000638 <__aeabi_dmul>
 800c356:	a340      	add	r3, pc, #256	; (adr r3, 800c458 <__kernel_cos+0x140>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	4682      	mov	sl, r0
 800c35e:	468b      	mov	fp, r1
 800c360:	4620      	mov	r0, r4
 800c362:	4629      	mov	r1, r5
 800c364:	f7f4 f968 	bl	8000638 <__aeabi_dmul>
 800c368:	a33d      	add	r3, pc, #244	; (adr r3, 800c460 <__kernel_cos+0x148>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f3 ffad 	bl	80002cc <__adddf3>
 800c372:	4622      	mov	r2, r4
 800c374:	462b      	mov	r3, r5
 800c376:	f7f4 f95f 	bl	8000638 <__aeabi_dmul>
 800c37a:	a33b      	add	r3, pc, #236	; (adr r3, 800c468 <__kernel_cos+0x150>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f3 ffa2 	bl	80002c8 <__aeabi_dsub>
 800c384:	4622      	mov	r2, r4
 800c386:	462b      	mov	r3, r5
 800c388:	f7f4 f956 	bl	8000638 <__aeabi_dmul>
 800c38c:	a338      	add	r3, pc, #224	; (adr r3, 800c470 <__kernel_cos+0x158>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f7f3 ff9b 	bl	80002cc <__adddf3>
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	f7f4 f94d 	bl	8000638 <__aeabi_dmul>
 800c39e:	a336      	add	r3, pc, #216	; (adr r3, 800c478 <__kernel_cos+0x160>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f3 ff90 	bl	80002c8 <__aeabi_dsub>
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	462b      	mov	r3, r5
 800c3ac:	f7f4 f944 	bl	8000638 <__aeabi_dmul>
 800c3b0:	a333      	add	r3, pc, #204	; (adr r3, 800c480 <__kernel_cos+0x168>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f3 ff89 	bl	80002cc <__adddf3>
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	462b      	mov	r3, r5
 800c3be:	f7f4 f93b 	bl	8000638 <__aeabi_dmul>
 800c3c2:	4622      	mov	r2, r4
 800c3c4:	462b      	mov	r3, r5
 800c3c6:	f7f4 f937 	bl	8000638 <__aeabi_dmul>
 800c3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f4 f92f 	bl	8000638 <__aeabi_dmul>
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4602      	mov	r2, r0
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f7f3 ff71 	bl	80002c8 <__aeabi_dsub>
 800c3e6:	4b2b      	ldr	r3, [pc, #172]	; (800c494 <__kernel_cos+0x17c>)
 800c3e8:	4598      	cmp	r8, r3
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	dc10      	bgt.n	800c412 <__kernel_cos+0xfa>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4650      	mov	r0, sl
 800c3f6:	4659      	mov	r1, fp
 800c3f8:	f7f3 ff66 	bl	80002c8 <__aeabi_dsub>
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4926      	ldr	r1, [pc, #152]	; (800c498 <__kernel_cos+0x180>)
 800c400:	4602      	mov	r2, r0
 800c402:	2000      	movs	r0, #0
 800c404:	f7f3 ff60 	bl	80002c8 <__aeabi_dsub>
 800c408:	ec41 0b10 	vmov	d0, r0, r1
 800c40c:	b003      	add	sp, #12
 800c40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c412:	4b22      	ldr	r3, [pc, #136]	; (800c49c <__kernel_cos+0x184>)
 800c414:	4920      	ldr	r1, [pc, #128]	; (800c498 <__kernel_cos+0x180>)
 800c416:	4598      	cmp	r8, r3
 800c418:	bfcc      	ite	gt
 800c41a:	4d21      	ldrgt	r5, [pc, #132]	; (800c4a0 <__kernel_cos+0x188>)
 800c41c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c420:	2400      	movs	r4, #0
 800c422:	4622      	mov	r2, r4
 800c424:	462b      	mov	r3, r5
 800c426:	2000      	movs	r0, #0
 800c428:	f7f3 ff4e 	bl	80002c8 <__aeabi_dsub>
 800c42c:	4622      	mov	r2, r4
 800c42e:	4680      	mov	r8, r0
 800c430:	4689      	mov	r9, r1
 800c432:	462b      	mov	r3, r5
 800c434:	4650      	mov	r0, sl
 800c436:	4659      	mov	r1, fp
 800c438:	f7f3 ff46 	bl	80002c8 <__aeabi_dsub>
 800c43c:	4632      	mov	r2, r6
 800c43e:	463b      	mov	r3, r7
 800c440:	f7f3 ff42 	bl	80002c8 <__aeabi_dsub>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4640      	mov	r0, r8
 800c44a:	4649      	mov	r1, r9
 800c44c:	e7da      	b.n	800c404 <__kernel_cos+0xec>
 800c44e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c488 <__kernel_cos+0x170>
 800c452:	e7db      	b.n	800c40c <__kernel_cos+0xf4>
 800c454:	f3af 8000 	nop.w
 800c458:	be8838d4 	.word	0xbe8838d4
 800c45c:	bda8fae9 	.word	0xbda8fae9
 800c460:	bdb4b1c4 	.word	0xbdb4b1c4
 800c464:	3e21ee9e 	.word	0x3e21ee9e
 800c468:	809c52ad 	.word	0x809c52ad
 800c46c:	3e927e4f 	.word	0x3e927e4f
 800c470:	19cb1590 	.word	0x19cb1590
 800c474:	3efa01a0 	.word	0x3efa01a0
 800c478:	16c15177 	.word	0x16c15177
 800c47c:	3f56c16c 	.word	0x3f56c16c
 800c480:	5555554c 	.word	0x5555554c
 800c484:	3fa55555 	.word	0x3fa55555
 800c488:	00000000 	.word	0x00000000
 800c48c:	3ff00000 	.word	0x3ff00000
 800c490:	3fe00000 	.word	0x3fe00000
 800c494:	3fd33332 	.word	0x3fd33332
 800c498:	3ff00000 	.word	0x3ff00000
 800c49c:	3fe90000 	.word	0x3fe90000
 800c4a0:	3fd20000 	.word	0x3fd20000
 800c4a4:	00000000 	.word	0x00000000

0800c4a8 <__kernel_rem_pio2>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	ed2d 8b02 	vpush	{d8}
 800c4b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c4b4:	f112 0f14 	cmn.w	r2, #20
 800c4b8:	9308      	str	r3, [sp, #32]
 800c4ba:	9101      	str	r1, [sp, #4]
 800c4bc:	4bc6      	ldr	r3, [pc, #792]	; (800c7d8 <__kernel_rem_pio2+0x330>)
 800c4be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c4c0:	9009      	str	r0, [sp, #36]	; 0x24
 800c4c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	9b08      	ldr	r3, [sp, #32]
 800c4ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4ce:	bfa8      	it	ge
 800c4d0:	1ed4      	subge	r4, r2, #3
 800c4d2:	9306      	str	r3, [sp, #24]
 800c4d4:	bfb2      	itee	lt
 800c4d6:	2400      	movlt	r4, #0
 800c4d8:	2318      	movge	r3, #24
 800c4da:	fb94 f4f3 	sdivge	r4, r4, r3
 800c4de:	f06f 0317 	mvn.w	r3, #23
 800c4e2:	fb04 3303 	mla	r3, r4, r3, r3
 800c4e6:	eb03 0a02 	add.w	sl, r3, r2
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	9a06      	ldr	r2, [sp, #24]
 800c4ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c7c8 <__kernel_rem_pio2+0x320>
 800c4f2:	eb03 0802 	add.w	r8, r3, r2
 800c4f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c4f8:	1aa7      	subs	r7, r4, r2
 800c4fa:	ae20      	add	r6, sp, #128	; 0x80
 800c4fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c500:	2500      	movs	r5, #0
 800c502:	4545      	cmp	r5, r8
 800c504:	dd18      	ble.n	800c538 <__kernel_rem_pio2+0x90>
 800c506:	9b08      	ldr	r3, [sp, #32]
 800c508:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c50c:	aa20      	add	r2, sp, #128	; 0x80
 800c50e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c7c8 <__kernel_rem_pio2+0x320>
 800c512:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c516:	f1c3 0301 	rsb	r3, r3, #1
 800c51a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c51e:	9307      	str	r3, [sp, #28]
 800c520:	9b07      	ldr	r3, [sp, #28]
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	4443      	add	r3, r8
 800c526:	429a      	cmp	r2, r3
 800c528:	db2f      	blt.n	800c58a <__kernel_rem_pio2+0xe2>
 800c52a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c52e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c532:	462f      	mov	r7, r5
 800c534:	2600      	movs	r6, #0
 800c536:	e01b      	b.n	800c570 <__kernel_rem_pio2+0xc8>
 800c538:	42ef      	cmn	r7, r5
 800c53a:	d407      	bmi.n	800c54c <__kernel_rem_pio2+0xa4>
 800c53c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c540:	f7f4 f810 	bl	8000564 <__aeabi_i2d>
 800c544:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c548:	3501      	adds	r5, #1
 800c54a:	e7da      	b.n	800c502 <__kernel_rem_pio2+0x5a>
 800c54c:	ec51 0b18 	vmov	r0, r1, d8
 800c550:	e7f8      	b.n	800c544 <__kernel_rem_pio2+0x9c>
 800c552:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c556:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c55a:	f7f4 f86d 	bl	8000638 <__aeabi_dmul>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c566:	f7f3 feb1 	bl	80002cc <__adddf3>
 800c56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c56e:	3601      	adds	r6, #1
 800c570:	9b06      	ldr	r3, [sp, #24]
 800c572:	429e      	cmp	r6, r3
 800c574:	f1a7 0708 	sub.w	r7, r7, #8
 800c578:	ddeb      	ble.n	800c552 <__kernel_rem_pio2+0xaa>
 800c57a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c57e:	3508      	adds	r5, #8
 800c580:	ecab 7b02 	vstmia	fp!, {d7}
 800c584:	f108 0801 	add.w	r8, r8, #1
 800c588:	e7ca      	b.n	800c520 <__kernel_rem_pio2+0x78>
 800c58a:	9b04      	ldr	r3, [sp, #16]
 800c58c:	aa0c      	add	r2, sp, #48	; 0x30
 800c58e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c592:	930b      	str	r3, [sp, #44]	; 0x2c
 800c594:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c596:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c59a:	9c04      	ldr	r4, [sp, #16]
 800c59c:	930a      	str	r3, [sp, #40]	; 0x28
 800c59e:	ab98      	add	r3, sp, #608	; 0x260
 800c5a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5a4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c5a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c5ac:	f8cd b008 	str.w	fp, [sp, #8]
 800c5b0:	4625      	mov	r5, r4
 800c5b2:	2d00      	cmp	r5, #0
 800c5b4:	dc78      	bgt.n	800c6a8 <__kernel_rem_pio2+0x200>
 800c5b6:	ec47 6b10 	vmov	d0, r6, r7
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	f000 fe3c 	bl	800d238 <scalbn>
 800c5c0:	ec57 6b10 	vmov	r6, r7, d0
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c5ca:	ee10 0a10 	vmov	r0, s0
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	f7f4 f832 	bl	8000638 <__aeabi_dmul>
 800c5d4:	ec41 0b10 	vmov	d0, r0, r1
 800c5d8:	f000 fd1a 	bl	800d010 <floor>
 800c5dc:	4b7f      	ldr	r3, [pc, #508]	; (800c7dc <__kernel_rem_pio2+0x334>)
 800c5de:	ec51 0b10 	vmov	r0, r1, d0
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f7f4 f828 	bl	8000638 <__aeabi_dmul>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	f7f3 fe6a 	bl	80002c8 <__aeabi_dsub>
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	f7f4 face 	bl	8000b98 <__aeabi_d2iz>
 800c5fc:	9007      	str	r0, [sp, #28]
 800c5fe:	f7f3 ffb1 	bl	8000564 <__aeabi_i2d>
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	4630      	mov	r0, r6
 800c608:	4639      	mov	r1, r7
 800c60a:	f7f3 fe5d 	bl	80002c8 <__aeabi_dsub>
 800c60e:	f1ba 0f00 	cmp.w	sl, #0
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	dd70      	ble.n	800c6fa <__kernel_rem_pio2+0x252>
 800c618:	1e62      	subs	r2, r4, #1
 800c61a:	ab0c      	add	r3, sp, #48	; 0x30
 800c61c:	9d07      	ldr	r5, [sp, #28]
 800c61e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c622:	f1ca 0118 	rsb	r1, sl, #24
 800c626:	fa40 f301 	asr.w	r3, r0, r1
 800c62a:	441d      	add	r5, r3
 800c62c:	408b      	lsls	r3, r1
 800c62e:	1ac0      	subs	r0, r0, r3
 800c630:	ab0c      	add	r3, sp, #48	; 0x30
 800c632:	9507      	str	r5, [sp, #28]
 800c634:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c638:	f1ca 0317 	rsb	r3, sl, #23
 800c63c:	fa40 f303 	asr.w	r3, r0, r3
 800c640:	9302      	str	r3, [sp, #8]
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	dd66      	ble.n	800c716 <__kernel_rem_pio2+0x26e>
 800c648:	9b07      	ldr	r3, [sp, #28]
 800c64a:	2200      	movs	r2, #0
 800c64c:	3301      	adds	r3, #1
 800c64e:	9307      	str	r3, [sp, #28]
 800c650:	4615      	mov	r5, r2
 800c652:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c656:	4294      	cmp	r4, r2
 800c658:	f300 8099 	bgt.w	800c78e <__kernel_rem_pio2+0x2e6>
 800c65c:	f1ba 0f00 	cmp.w	sl, #0
 800c660:	dd07      	ble.n	800c672 <__kernel_rem_pio2+0x1ca>
 800c662:	f1ba 0f01 	cmp.w	sl, #1
 800c666:	f000 80a5 	beq.w	800c7b4 <__kernel_rem_pio2+0x30c>
 800c66a:	f1ba 0f02 	cmp.w	sl, #2
 800c66e:	f000 80c1 	beq.w	800c7f4 <__kernel_rem_pio2+0x34c>
 800c672:	9b02      	ldr	r3, [sp, #8]
 800c674:	2b02      	cmp	r3, #2
 800c676:	d14e      	bne.n	800c716 <__kernel_rem_pio2+0x26e>
 800c678:	4632      	mov	r2, r6
 800c67a:	463b      	mov	r3, r7
 800c67c:	4958      	ldr	r1, [pc, #352]	; (800c7e0 <__kernel_rem_pio2+0x338>)
 800c67e:	2000      	movs	r0, #0
 800c680:	f7f3 fe22 	bl	80002c8 <__aeabi_dsub>
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	2d00      	cmp	r5, #0
 800c68a:	d044      	beq.n	800c716 <__kernel_rem_pio2+0x26e>
 800c68c:	4650      	mov	r0, sl
 800c68e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c7d0 <__kernel_rem_pio2+0x328>
 800c692:	f000 fdd1 	bl	800d238 <scalbn>
 800c696:	4630      	mov	r0, r6
 800c698:	4639      	mov	r1, r7
 800c69a:	ec53 2b10 	vmov	r2, r3, d0
 800c69e:	f7f3 fe13 	bl	80002c8 <__aeabi_dsub>
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	e036      	b.n	800c716 <__kernel_rem_pio2+0x26e>
 800c6a8:	4b4e      	ldr	r3, [pc, #312]	; (800c7e4 <__kernel_rem_pio2+0x33c>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	f7f3 ffc2 	bl	8000638 <__aeabi_dmul>
 800c6b4:	f7f4 fa70 	bl	8000b98 <__aeabi_d2iz>
 800c6b8:	f7f3 ff54 	bl	8000564 <__aeabi_i2d>
 800c6bc:	4b4a      	ldr	r3, [pc, #296]	; (800c7e8 <__kernel_rem_pio2+0x340>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4680      	mov	r8, r0
 800c6c2:	4689      	mov	r9, r1
 800c6c4:	f7f3 ffb8 	bl	8000638 <__aeabi_dmul>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	f7f3 fdfa 	bl	80002c8 <__aeabi_dsub>
 800c6d4:	f7f4 fa60 	bl	8000b98 <__aeabi_d2iz>
 800c6d8:	9b02      	ldr	r3, [sp, #8]
 800c6da:	f843 0b04 	str.w	r0, [r3], #4
 800c6de:	3d01      	subs	r5, #1
 800c6e0:	9302      	str	r3, [sp, #8]
 800c6e2:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ec:	4640      	mov	r0, r8
 800c6ee:	4649      	mov	r1, r9
 800c6f0:	f7f3 fdec 	bl	80002cc <__adddf3>
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	460f      	mov	r7, r1
 800c6f8:	e75b      	b.n	800c5b2 <__kernel_rem_pio2+0x10a>
 800c6fa:	d105      	bne.n	800c708 <__kernel_rem_pio2+0x260>
 800c6fc:	1e63      	subs	r3, r4, #1
 800c6fe:	aa0c      	add	r2, sp, #48	; 0x30
 800c700:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c704:	15c3      	asrs	r3, r0, #23
 800c706:	e79b      	b.n	800c640 <__kernel_rem_pio2+0x198>
 800c708:	4b38      	ldr	r3, [pc, #224]	; (800c7ec <__kernel_rem_pio2+0x344>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	f7f4 fa1a 	bl	8000b44 <__aeabi_dcmpge>
 800c710:	2800      	cmp	r0, #0
 800c712:	d139      	bne.n	800c788 <__kernel_rem_pio2+0x2e0>
 800c714:	9002      	str	r0, [sp, #8]
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	4630      	mov	r0, r6
 800c71c:	4639      	mov	r1, r7
 800c71e:	f7f4 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 800c722:	2800      	cmp	r0, #0
 800c724:	f000 80b4 	beq.w	800c890 <__kernel_rem_pio2+0x3e8>
 800c728:	f104 3bff 	add.w	fp, r4, #4294967295
 800c72c:	465b      	mov	r3, fp
 800c72e:	2200      	movs	r2, #0
 800c730:	9904      	ldr	r1, [sp, #16]
 800c732:	428b      	cmp	r3, r1
 800c734:	da65      	bge.n	800c802 <__kernel_rem_pio2+0x35a>
 800c736:	2a00      	cmp	r2, #0
 800c738:	d07b      	beq.n	800c832 <__kernel_rem_pio2+0x38a>
 800c73a:	ab0c      	add	r3, sp, #48	; 0x30
 800c73c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c740:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 80a0 	beq.w	800c88a <__kernel_rem_pio2+0x3e2>
 800c74a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c7d0 <__kernel_rem_pio2+0x328>
 800c74e:	4650      	mov	r0, sl
 800c750:	f000 fd72 	bl	800d238 <scalbn>
 800c754:	4f23      	ldr	r7, [pc, #140]	; (800c7e4 <__kernel_rem_pio2+0x33c>)
 800c756:	ec55 4b10 	vmov	r4, r5, d0
 800c75a:	46d8      	mov	r8, fp
 800c75c:	2600      	movs	r6, #0
 800c75e:	f1b8 0f00 	cmp.w	r8, #0
 800c762:	f280 80cf 	bge.w	800c904 <__kernel_rem_pio2+0x45c>
 800c766:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c7c8 <__kernel_rem_pio2+0x320>
 800c76a:	465f      	mov	r7, fp
 800c76c:	f04f 0800 	mov.w	r8, #0
 800c770:	2f00      	cmp	r7, #0
 800c772:	f2c0 80fd 	blt.w	800c970 <__kernel_rem_pio2+0x4c8>
 800c776:	ab70      	add	r3, sp, #448	; 0x1c0
 800c778:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c7f0 <__kernel_rem_pio2+0x348>
 800c77c:	ec55 4b18 	vmov	r4, r5, d8
 800c780:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c784:	2600      	movs	r6, #0
 800c786:	e0e5      	b.n	800c954 <__kernel_rem_pio2+0x4ac>
 800c788:	2302      	movs	r3, #2
 800c78a:	9302      	str	r3, [sp, #8]
 800c78c:	e75c      	b.n	800c648 <__kernel_rem_pio2+0x1a0>
 800c78e:	f8db 3000 	ldr.w	r3, [fp]
 800c792:	b955      	cbnz	r5, 800c7aa <__kernel_rem_pio2+0x302>
 800c794:	b123      	cbz	r3, 800c7a0 <__kernel_rem_pio2+0x2f8>
 800c796:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c79a:	f8cb 3000 	str.w	r3, [fp]
 800c79e:	2301      	movs	r3, #1
 800c7a0:	3201      	adds	r2, #1
 800c7a2:	f10b 0b04 	add.w	fp, fp, #4
 800c7a6:	461d      	mov	r5, r3
 800c7a8:	e755      	b.n	800c656 <__kernel_rem_pio2+0x1ae>
 800c7aa:	1acb      	subs	r3, r1, r3
 800c7ac:	f8cb 3000 	str.w	r3, [fp]
 800c7b0:	462b      	mov	r3, r5
 800c7b2:	e7f5      	b.n	800c7a0 <__kernel_rem_pio2+0x2f8>
 800c7b4:	1e62      	subs	r2, r4, #1
 800c7b6:	ab0c      	add	r3, sp, #48	; 0x30
 800c7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c7c0:	a90c      	add	r1, sp, #48	; 0x30
 800c7c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c7c6:	e754      	b.n	800c672 <__kernel_rem_pio2+0x1ca>
	...
 800c7d4:	3ff00000 	.word	0x3ff00000
 800c7d8:	0800da20 	.word	0x0800da20
 800c7dc:	40200000 	.word	0x40200000
 800c7e0:	3ff00000 	.word	0x3ff00000
 800c7e4:	3e700000 	.word	0x3e700000
 800c7e8:	41700000 	.word	0x41700000
 800c7ec:	3fe00000 	.word	0x3fe00000
 800c7f0:	0800d9e0 	.word	0x0800d9e0
 800c7f4:	1e62      	subs	r2, r4, #1
 800c7f6:	ab0c      	add	r3, sp, #48	; 0x30
 800c7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c800:	e7de      	b.n	800c7c0 <__kernel_rem_pio2+0x318>
 800c802:	a90c      	add	r1, sp, #48	; 0x30
 800c804:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c808:	3b01      	subs	r3, #1
 800c80a:	430a      	orrs	r2, r1
 800c80c:	e790      	b.n	800c730 <__kernel_rem_pio2+0x288>
 800c80e:	3301      	adds	r3, #1
 800c810:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c814:	2900      	cmp	r1, #0
 800c816:	d0fa      	beq.n	800c80e <__kernel_rem_pio2+0x366>
 800c818:	9a08      	ldr	r2, [sp, #32]
 800c81a:	18e3      	adds	r3, r4, r3
 800c81c:	18a6      	adds	r6, r4, r2
 800c81e:	aa20      	add	r2, sp, #128	; 0x80
 800c820:	1c65      	adds	r5, r4, #1
 800c822:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c826:	9302      	str	r3, [sp, #8]
 800c828:	9b02      	ldr	r3, [sp, #8]
 800c82a:	42ab      	cmp	r3, r5
 800c82c:	da04      	bge.n	800c838 <__kernel_rem_pio2+0x390>
 800c82e:	461c      	mov	r4, r3
 800c830:	e6b5      	b.n	800c59e <__kernel_rem_pio2+0xf6>
 800c832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c834:	2301      	movs	r3, #1
 800c836:	e7eb      	b.n	800c810 <__kernel_rem_pio2+0x368>
 800c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c83e:	f7f3 fe91 	bl	8000564 <__aeabi_i2d>
 800c842:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c848:	46b3      	mov	fp, r6
 800c84a:	461c      	mov	r4, r3
 800c84c:	2700      	movs	r7, #0
 800c84e:	f04f 0800 	mov.w	r8, #0
 800c852:	f04f 0900 	mov.w	r9, #0
 800c856:	9b06      	ldr	r3, [sp, #24]
 800c858:	429f      	cmp	r7, r3
 800c85a:	dd06      	ble.n	800c86a <__kernel_rem_pio2+0x3c2>
 800c85c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c85e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c862:	e9c3 8900 	strd	r8, r9, [r3]
 800c866:	3501      	adds	r5, #1
 800c868:	e7de      	b.n	800c828 <__kernel_rem_pio2+0x380>
 800c86a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c86e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c872:	f7f3 fee1 	bl	8000638 <__aeabi_dmul>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 fd25 	bl	80002cc <__adddf3>
 800c882:	3701      	adds	r7, #1
 800c884:	4680      	mov	r8, r0
 800c886:	4689      	mov	r9, r1
 800c888:	e7e5      	b.n	800c856 <__kernel_rem_pio2+0x3ae>
 800c88a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c88e:	e754      	b.n	800c73a <__kernel_rem_pio2+0x292>
 800c890:	ec47 6b10 	vmov	d0, r6, r7
 800c894:	f1ca 0000 	rsb	r0, sl, #0
 800c898:	f000 fcce 	bl	800d238 <scalbn>
 800c89c:	ec57 6b10 	vmov	r6, r7, d0
 800c8a0:	4b9f      	ldr	r3, [pc, #636]	; (800cb20 <__kernel_rem_pio2+0x678>)
 800c8a2:	ee10 0a10 	vmov	r0, s0
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f4 f94b 	bl	8000b44 <__aeabi_dcmpge>
 800c8ae:	b300      	cbz	r0, 800c8f2 <__kernel_rem_pio2+0x44a>
 800c8b0:	4b9c      	ldr	r3, [pc, #624]	; (800cb24 <__kernel_rem_pio2+0x67c>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f3 febe 	bl	8000638 <__aeabi_dmul>
 800c8bc:	f7f4 f96c 	bl	8000b98 <__aeabi_d2iz>
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	f7f3 fe4f 	bl	8000564 <__aeabi_i2d>
 800c8c6:	4b96      	ldr	r3, [pc, #600]	; (800cb20 <__kernel_rem_pio2+0x678>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f7f3 feb5 	bl	8000638 <__aeabi_dmul>
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7f3 fcf7 	bl	80002c8 <__aeabi_dsub>
 800c8da:	f7f4 f95d 	bl	8000b98 <__aeabi_d2iz>
 800c8de:	f104 0b01 	add.w	fp, r4, #1
 800c8e2:	ab0c      	add	r3, sp, #48	; 0x30
 800c8e4:	f10a 0a18 	add.w	sl, sl, #24
 800c8e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c8ec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c8f0:	e72b      	b.n	800c74a <__kernel_rem_pio2+0x2a2>
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	f7f4 f94f 	bl	8000b98 <__aeabi_d2iz>
 800c8fa:	ab0c      	add	r3, sp, #48	; 0x30
 800c8fc:	46a3      	mov	fp, r4
 800c8fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c902:	e722      	b.n	800c74a <__kernel_rem_pio2+0x2a2>
 800c904:	ab70      	add	r3, sp, #448	; 0x1c0
 800c906:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c90a:	ab0c      	add	r3, sp, #48	; 0x30
 800c90c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c910:	f7f3 fe28 	bl	8000564 <__aeabi_i2d>
 800c914:	4622      	mov	r2, r4
 800c916:	462b      	mov	r3, r5
 800c918:	f7f3 fe8e 	bl	8000638 <__aeabi_dmul>
 800c91c:	4632      	mov	r2, r6
 800c91e:	e9c9 0100 	strd	r0, r1, [r9]
 800c922:	463b      	mov	r3, r7
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fe86 	bl	8000638 <__aeabi_dmul>
 800c92c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c930:	4604      	mov	r4, r0
 800c932:	460d      	mov	r5, r1
 800c934:	e713      	b.n	800c75e <__kernel_rem_pio2+0x2b6>
 800c936:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c93a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c93e:	f7f3 fe7b 	bl	8000638 <__aeabi_dmul>
 800c942:	4602      	mov	r2, r0
 800c944:	460b      	mov	r3, r1
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	f7f3 fcbf 	bl	80002cc <__adddf3>
 800c94e:	3601      	adds	r6, #1
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	9b04      	ldr	r3, [sp, #16]
 800c956:	429e      	cmp	r6, r3
 800c958:	dc01      	bgt.n	800c95e <__kernel_rem_pio2+0x4b6>
 800c95a:	45b0      	cmp	r8, r6
 800c95c:	daeb      	bge.n	800c936 <__kernel_rem_pio2+0x48e>
 800c95e:	ab48      	add	r3, sp, #288	; 0x120
 800c960:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c964:	e9c3 4500 	strd	r4, r5, [r3]
 800c968:	3f01      	subs	r7, #1
 800c96a:	f108 0801 	add.w	r8, r8, #1
 800c96e:	e6ff      	b.n	800c770 <__kernel_rem_pio2+0x2c8>
 800c970:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c972:	2b02      	cmp	r3, #2
 800c974:	dc0b      	bgt.n	800c98e <__kernel_rem_pio2+0x4e6>
 800c976:	2b00      	cmp	r3, #0
 800c978:	dc6e      	bgt.n	800ca58 <__kernel_rem_pio2+0x5b0>
 800c97a:	d045      	beq.n	800ca08 <__kernel_rem_pio2+0x560>
 800c97c:	9b07      	ldr	r3, [sp, #28]
 800c97e:	f003 0007 	and.w	r0, r3, #7
 800c982:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c986:	ecbd 8b02 	vpop	{d8}
 800c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c990:	2b03      	cmp	r3, #3
 800c992:	d1f3      	bne.n	800c97c <__kernel_rem_pio2+0x4d4>
 800c994:	ab48      	add	r3, sp, #288	; 0x120
 800c996:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c99a:	46d0      	mov	r8, sl
 800c99c:	46d9      	mov	r9, fp
 800c99e:	f1b9 0f00 	cmp.w	r9, #0
 800c9a2:	f1a8 0808 	sub.w	r8, r8, #8
 800c9a6:	dc64      	bgt.n	800ca72 <__kernel_rem_pio2+0x5ca>
 800c9a8:	465c      	mov	r4, fp
 800c9aa:	2c01      	cmp	r4, #1
 800c9ac:	f1aa 0a08 	sub.w	sl, sl, #8
 800c9b0:	dc7e      	bgt.n	800cab0 <__kernel_rem_pio2+0x608>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	f1bb 0f01 	cmp.w	fp, #1
 800c9ba:	f300 8097 	bgt.w	800caec <__kernel_rem_pio2+0x644>
 800c9be:	9b02      	ldr	r3, [sp, #8]
 800c9c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c9c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f040 8099 	bne.w	800cb00 <__kernel_rem_pio2+0x658>
 800c9ce:	9b01      	ldr	r3, [sp, #4]
 800c9d0:	e9c3 5600 	strd	r5, r6, [r3]
 800c9d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c9d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c9dc:	e7ce      	b.n	800c97c <__kernel_rem_pio2+0x4d4>
 800c9de:	ab48      	add	r3, sp, #288	; 0x120
 800c9e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7f3 fc70 	bl	80002cc <__adddf3>
 800c9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9f0:	f1bb 0f00 	cmp.w	fp, #0
 800c9f4:	daf3      	bge.n	800c9de <__kernel_rem_pio2+0x536>
 800c9f6:	9b02      	ldr	r3, [sp, #8]
 800c9f8:	b113      	cbz	r3, 800ca00 <__kernel_rem_pio2+0x558>
 800c9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9fe:	4619      	mov	r1, r3
 800ca00:	9b01      	ldr	r3, [sp, #4]
 800ca02:	e9c3 0100 	strd	r0, r1, [r3]
 800ca06:	e7b9      	b.n	800c97c <__kernel_rem_pio2+0x4d4>
 800ca08:	2000      	movs	r0, #0
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	e7f0      	b.n	800c9f0 <__kernel_rem_pio2+0x548>
 800ca0e:	ab48      	add	r3, sp, #288	; 0x120
 800ca10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f3 fc58 	bl	80002cc <__adddf3>
 800ca1c:	3c01      	subs	r4, #1
 800ca1e:	2c00      	cmp	r4, #0
 800ca20:	daf5      	bge.n	800ca0e <__kernel_rem_pio2+0x566>
 800ca22:	9b02      	ldr	r3, [sp, #8]
 800ca24:	b1e3      	cbz	r3, 800ca60 <__kernel_rem_pio2+0x5b8>
 800ca26:	4602      	mov	r2, r0
 800ca28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca2c:	9c01      	ldr	r4, [sp, #4]
 800ca2e:	e9c4 2300 	strd	r2, r3, [r4]
 800ca32:	4602      	mov	r2, r0
 800ca34:	460b      	mov	r3, r1
 800ca36:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ca3a:	f7f3 fc45 	bl	80002c8 <__aeabi_dsub>
 800ca3e:	ad4a      	add	r5, sp, #296	; 0x128
 800ca40:	2401      	movs	r4, #1
 800ca42:	45a3      	cmp	fp, r4
 800ca44:	da0f      	bge.n	800ca66 <__kernel_rem_pio2+0x5be>
 800ca46:	9b02      	ldr	r3, [sp, #8]
 800ca48:	b113      	cbz	r3, 800ca50 <__kernel_rem_pio2+0x5a8>
 800ca4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca4e:	4619      	mov	r1, r3
 800ca50:	9b01      	ldr	r3, [sp, #4]
 800ca52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ca56:	e791      	b.n	800c97c <__kernel_rem_pio2+0x4d4>
 800ca58:	465c      	mov	r4, fp
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	e7de      	b.n	800ca1e <__kernel_rem_pio2+0x576>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	e7e2      	b.n	800ca2c <__kernel_rem_pio2+0x584>
 800ca66:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ca6a:	f7f3 fc2f 	bl	80002cc <__adddf3>
 800ca6e:	3401      	adds	r4, #1
 800ca70:	e7e7      	b.n	800ca42 <__kernel_rem_pio2+0x59a>
 800ca72:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ca76:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	463b      	mov	r3, r7
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f3 fc23 	bl	80002cc <__adddf3>
 800ca86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fc19 	bl	80002c8 <__aeabi_dsub>
 800ca96:	4632      	mov	r2, r6
 800ca98:	463b      	mov	r3, r7
 800ca9a:	f7f3 fc17 	bl	80002cc <__adddf3>
 800ca9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800caa2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800caa6:	ed88 7b00 	vstr	d7, [r8]
 800caaa:	f109 39ff 	add.w	r9, r9, #4294967295
 800caae:	e776      	b.n	800c99e <__kernel_rem_pio2+0x4f6>
 800cab0:	e9da 8900 	ldrd	r8, r9, [sl]
 800cab4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cab8:	4640      	mov	r0, r8
 800caba:	4632      	mov	r2, r6
 800cabc:	463b      	mov	r3, r7
 800cabe:	4649      	mov	r1, r9
 800cac0:	f7f3 fc04 	bl	80002cc <__adddf3>
 800cac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4640      	mov	r0, r8
 800cace:	4649      	mov	r1, r9
 800cad0:	f7f3 fbfa 	bl	80002c8 <__aeabi_dsub>
 800cad4:	4632      	mov	r2, r6
 800cad6:	463b      	mov	r3, r7
 800cad8:	f7f3 fbf8 	bl	80002cc <__adddf3>
 800cadc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cae0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cae4:	ed8a 7b00 	vstr	d7, [sl]
 800cae8:	3c01      	subs	r4, #1
 800caea:	e75e      	b.n	800c9aa <__kernel_rem_pio2+0x502>
 800caec:	ab48      	add	r3, sp, #288	; 0x120
 800caee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fbe9 	bl	80002cc <__adddf3>
 800cafa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cafe:	e75a      	b.n	800c9b6 <__kernel_rem_pio2+0x50e>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	9a01      	ldr	r2, [sp, #4]
 800cb04:	601d      	str	r5, [r3, #0]
 800cb06:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cb0a:	605c      	str	r4, [r3, #4]
 800cb0c:	609f      	str	r7, [r3, #8]
 800cb0e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cb12:	60d3      	str	r3, [r2, #12]
 800cb14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb18:	6110      	str	r0, [r2, #16]
 800cb1a:	6153      	str	r3, [r2, #20]
 800cb1c:	e72e      	b.n	800c97c <__kernel_rem_pio2+0x4d4>
 800cb1e:	bf00      	nop
 800cb20:	41700000 	.word	0x41700000
 800cb24:	3e700000 	.word	0x3e700000

0800cb28 <__kernel_sin>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	ed2d 8b04 	vpush	{d8-d9}
 800cb30:	eeb0 8a41 	vmov.f32	s16, s2
 800cb34:	eef0 8a61 	vmov.f32	s17, s3
 800cb38:	ec55 4b10 	vmov	r4, r5, d0
 800cb3c:	b083      	sub	sp, #12
 800cb3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb46:	9001      	str	r0, [sp, #4]
 800cb48:	da06      	bge.n	800cb58 <__kernel_sin+0x30>
 800cb4a:	ee10 0a10 	vmov	r0, s0
 800cb4e:	4629      	mov	r1, r5
 800cb50:	f7f4 f822 	bl	8000b98 <__aeabi_d2iz>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d051      	beq.n	800cbfc <__kernel_sin+0xd4>
 800cb58:	4622      	mov	r2, r4
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	4629      	mov	r1, r5
 800cb60:	f7f3 fd6a 	bl	8000638 <__aeabi_dmul>
 800cb64:	4682      	mov	sl, r0
 800cb66:	468b      	mov	fp, r1
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 fd62 	bl	8000638 <__aeabi_dmul>
 800cb74:	a341      	add	r3, pc, #260	; (adr r3, 800cc7c <__kernel_sin+0x154>)
 800cb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7a:	4680      	mov	r8, r0
 800cb7c:	4689      	mov	r9, r1
 800cb7e:	4650      	mov	r0, sl
 800cb80:	4659      	mov	r1, fp
 800cb82:	f7f3 fd59 	bl	8000638 <__aeabi_dmul>
 800cb86:	a33f      	add	r3, pc, #252	; (adr r3, 800cc84 <__kernel_sin+0x15c>)
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	f7f3 fb9c 	bl	80002c8 <__aeabi_dsub>
 800cb90:	4652      	mov	r2, sl
 800cb92:	465b      	mov	r3, fp
 800cb94:	f7f3 fd50 	bl	8000638 <__aeabi_dmul>
 800cb98:	a33c      	add	r3, pc, #240	; (adr r3, 800cc8c <__kernel_sin+0x164>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	f7f3 fb95 	bl	80002cc <__adddf3>
 800cba2:	4652      	mov	r2, sl
 800cba4:	465b      	mov	r3, fp
 800cba6:	f7f3 fd47 	bl	8000638 <__aeabi_dmul>
 800cbaa:	a33a      	add	r3, pc, #232	; (adr r3, 800cc94 <__kernel_sin+0x16c>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fb8a 	bl	80002c8 <__aeabi_dsub>
 800cbb4:	4652      	mov	r2, sl
 800cbb6:	465b      	mov	r3, fp
 800cbb8:	f7f3 fd3e 	bl	8000638 <__aeabi_dmul>
 800cbbc:	a337      	add	r3, pc, #220	; (adr r3, 800cc9c <__kernel_sin+0x174>)
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fb83 	bl	80002cc <__adddf3>
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	4606      	mov	r6, r0
 800cbca:	460f      	mov	r7, r1
 800cbcc:	b9eb      	cbnz	r3, 800cc0a <__kernel_sin+0xe2>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	4659      	mov	r1, fp
 800cbd6:	f7f3 fd2f 	bl	8000638 <__aeabi_dmul>
 800cbda:	a325      	add	r3, pc, #148	; (adr r3, 800cc70 <__kernel_sin+0x148>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fb72 	bl	80002c8 <__aeabi_dsub>
 800cbe4:	4642      	mov	r2, r8
 800cbe6:	464b      	mov	r3, r9
 800cbe8:	f7f3 fd26 	bl	8000638 <__aeabi_dmul>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	f7f3 fb6a 	bl	80002cc <__adddf3>
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	460d      	mov	r5, r1
 800cbfc:	ec45 4b10 	vmov	d0, r4, r5
 800cc00:	b003      	add	sp, #12
 800cc02:	ecbd 8b04 	vpop	{d8-d9}
 800cc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc0a:	4b1b      	ldr	r3, [pc, #108]	; (800cc78 <__kernel_sin+0x150>)
 800cc0c:	ec51 0b18 	vmov	r0, r1, d8
 800cc10:	2200      	movs	r2, #0
 800cc12:	f7f3 fd11 	bl	8000638 <__aeabi_dmul>
 800cc16:	4632      	mov	r2, r6
 800cc18:	ec41 0b19 	vmov	d9, r0, r1
 800cc1c:	463b      	mov	r3, r7
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4649      	mov	r1, r9
 800cc22:	f7f3 fd09 	bl	8000638 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	ec51 0b19 	vmov	r0, r1, d9
 800cc2e:	f7f3 fb4b 	bl	80002c8 <__aeabi_dsub>
 800cc32:	4652      	mov	r2, sl
 800cc34:	465b      	mov	r3, fp
 800cc36:	f7f3 fcff 	bl	8000638 <__aeabi_dmul>
 800cc3a:	ec53 2b18 	vmov	r2, r3, d8
 800cc3e:	f7f3 fb43 	bl	80002c8 <__aeabi_dsub>
 800cc42:	a30b      	add	r3, pc, #44	; (adr r3, 800cc70 <__kernel_sin+0x148>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	4606      	mov	r6, r0
 800cc4a:	460f      	mov	r7, r1
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	4649      	mov	r1, r9
 800cc50:	f7f3 fcf2 	bl	8000638 <__aeabi_dmul>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	f7f3 fb36 	bl	80002cc <__adddf3>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4620      	mov	r0, r4
 800cc66:	4629      	mov	r1, r5
 800cc68:	f7f3 fb2e 	bl	80002c8 <__aeabi_dsub>
 800cc6c:	e7c4      	b.n	800cbf8 <__kernel_sin+0xd0>
 800cc6e:	bf00      	nop
 800cc70:	55555549 	.word	0x55555549
 800cc74:	3fc55555 	.word	0x3fc55555
 800cc78:	3fe00000 	.word	0x3fe00000
 800cc7c:	5acfd57c 	.word	0x5acfd57c
 800cc80:	3de5d93a 	.word	0x3de5d93a
 800cc84:	8a2b9ceb 	.word	0x8a2b9ceb
 800cc88:	3e5ae5e6 	.word	0x3e5ae5e6
 800cc8c:	57b1fe7d 	.word	0x57b1fe7d
 800cc90:	3ec71de3 	.word	0x3ec71de3
 800cc94:	19c161d5 	.word	0x19c161d5
 800cc98:	3f2a01a0 	.word	0x3f2a01a0
 800cc9c:	1110f8a6 	.word	0x1110f8a6
 800cca0:	3f811111 	.word	0x3f811111
 800cca4:	00000000 	.word	0x00000000

0800cca8 <atan>:
 800cca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	ec55 4b10 	vmov	r4, r5, d0
 800ccb0:	4bc3      	ldr	r3, [pc, #780]	; (800cfc0 <atan+0x318>)
 800ccb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ccb6:	429e      	cmp	r6, r3
 800ccb8:	46ab      	mov	fp, r5
 800ccba:	dd18      	ble.n	800ccee <atan+0x46>
 800ccbc:	4bc1      	ldr	r3, [pc, #772]	; (800cfc4 <atan+0x31c>)
 800ccbe:	429e      	cmp	r6, r3
 800ccc0:	dc01      	bgt.n	800ccc6 <atan+0x1e>
 800ccc2:	d109      	bne.n	800ccd8 <atan+0x30>
 800ccc4:	b144      	cbz	r4, 800ccd8 <atan+0x30>
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	462b      	mov	r3, r5
 800ccca:	4620      	mov	r0, r4
 800cccc:	4629      	mov	r1, r5
 800ccce:	f7f3 fafd 	bl	80002cc <__adddf3>
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	e006      	b.n	800cce6 <atan+0x3e>
 800ccd8:	f1bb 0f00 	cmp.w	fp, #0
 800ccdc:	f300 8131 	bgt.w	800cf42 <atan+0x29a>
 800cce0:	a59b      	add	r5, pc, #620	; (adr r5, 800cf50 <atan+0x2a8>)
 800cce2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cce6:	ec45 4b10 	vmov	d0, r4, r5
 800ccea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	4bb6      	ldr	r3, [pc, #728]	; (800cfc8 <atan+0x320>)
 800ccf0:	429e      	cmp	r6, r3
 800ccf2:	dc14      	bgt.n	800cd1e <atan+0x76>
 800ccf4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ccf8:	429e      	cmp	r6, r3
 800ccfa:	dc0d      	bgt.n	800cd18 <atan+0x70>
 800ccfc:	a396      	add	r3, pc, #600	; (adr r3, 800cf58 <atan+0x2b0>)
 800ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd02:	ee10 0a10 	vmov	r0, s0
 800cd06:	4629      	mov	r1, r5
 800cd08:	f7f3 fae0 	bl	80002cc <__adddf3>
 800cd0c:	4baf      	ldr	r3, [pc, #700]	; (800cfcc <atan+0x324>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f7f3 ff22 	bl	8000b58 <__aeabi_dcmpgt>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d1e6      	bne.n	800cce6 <atan+0x3e>
 800cd18:	f04f 3aff 	mov.w	sl, #4294967295
 800cd1c:	e02b      	b.n	800cd76 <atan+0xce>
 800cd1e:	f000 f963 	bl	800cfe8 <fabs>
 800cd22:	4bab      	ldr	r3, [pc, #684]	; (800cfd0 <atan+0x328>)
 800cd24:	429e      	cmp	r6, r3
 800cd26:	ec55 4b10 	vmov	r4, r5, d0
 800cd2a:	f300 80bf 	bgt.w	800ceac <atan+0x204>
 800cd2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cd32:	429e      	cmp	r6, r3
 800cd34:	f300 80a0 	bgt.w	800ce78 <atan+0x1d0>
 800cd38:	ee10 2a10 	vmov	r2, s0
 800cd3c:	ee10 0a10 	vmov	r0, s0
 800cd40:	462b      	mov	r3, r5
 800cd42:	4629      	mov	r1, r5
 800cd44:	f7f3 fac2 	bl	80002cc <__adddf3>
 800cd48:	4ba0      	ldr	r3, [pc, #640]	; (800cfcc <atan+0x324>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f7f3 fabc 	bl	80002c8 <__aeabi_dsub>
 800cd50:	2200      	movs	r2, #0
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	f7f3 fab5 	bl	80002cc <__adddf3>
 800cd62:	4602      	mov	r2, r0
 800cd64:	460b      	mov	r3, r1
 800cd66:	4630      	mov	r0, r6
 800cd68:	4639      	mov	r1, r7
 800cd6a:	f7f3 fd8f 	bl	800088c <__aeabi_ddiv>
 800cd6e:	f04f 0a00 	mov.w	sl, #0
 800cd72:	4604      	mov	r4, r0
 800cd74:	460d      	mov	r5, r1
 800cd76:	4622      	mov	r2, r4
 800cd78:	462b      	mov	r3, r5
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7f3 fc5b 	bl	8000638 <__aeabi_dmul>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4680      	mov	r8, r0
 800cd88:	4689      	mov	r9, r1
 800cd8a:	f7f3 fc55 	bl	8000638 <__aeabi_dmul>
 800cd8e:	a374      	add	r3, pc, #464	; (adr r3, 800cf60 <atan+0x2b8>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	f7f3 fc4e 	bl	8000638 <__aeabi_dmul>
 800cd9c:	a372      	add	r3, pc, #456	; (adr r3, 800cf68 <atan+0x2c0>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	f7f3 fa93 	bl	80002cc <__adddf3>
 800cda6:	4632      	mov	r2, r6
 800cda8:	463b      	mov	r3, r7
 800cdaa:	f7f3 fc45 	bl	8000638 <__aeabi_dmul>
 800cdae:	a370      	add	r3, pc, #448	; (adr r3, 800cf70 <atan+0x2c8>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7f3 fa8a 	bl	80002cc <__adddf3>
 800cdb8:	4632      	mov	r2, r6
 800cdba:	463b      	mov	r3, r7
 800cdbc:	f7f3 fc3c 	bl	8000638 <__aeabi_dmul>
 800cdc0:	a36d      	add	r3, pc, #436	; (adr r3, 800cf78 <atan+0x2d0>)
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	f7f3 fa81 	bl	80002cc <__adddf3>
 800cdca:	4632      	mov	r2, r6
 800cdcc:	463b      	mov	r3, r7
 800cdce:	f7f3 fc33 	bl	8000638 <__aeabi_dmul>
 800cdd2:	a36b      	add	r3, pc, #428	; (adr r3, 800cf80 <atan+0x2d8>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	f7f3 fa78 	bl	80002cc <__adddf3>
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	f7f3 fc2a 	bl	8000638 <__aeabi_dmul>
 800cde4:	a368      	add	r3, pc, #416	; (adr r3, 800cf88 <atan+0x2e0>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	f7f3 fa6f 	bl	80002cc <__adddf3>
 800cdee:	4642      	mov	r2, r8
 800cdf0:	464b      	mov	r3, r9
 800cdf2:	f7f3 fc21 	bl	8000638 <__aeabi_dmul>
 800cdf6:	a366      	add	r3, pc, #408	; (adr r3, 800cf90 <atan+0x2e8>)
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	4689      	mov	r9, r1
 800ce00:	4630      	mov	r0, r6
 800ce02:	4639      	mov	r1, r7
 800ce04:	f7f3 fc18 	bl	8000638 <__aeabi_dmul>
 800ce08:	a363      	add	r3, pc, #396	; (adr r3, 800cf98 <atan+0x2f0>)
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	f7f3 fa5b 	bl	80002c8 <__aeabi_dsub>
 800ce12:	4632      	mov	r2, r6
 800ce14:	463b      	mov	r3, r7
 800ce16:	f7f3 fc0f 	bl	8000638 <__aeabi_dmul>
 800ce1a:	a361      	add	r3, pc, #388	; (adr r3, 800cfa0 <atan+0x2f8>)
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	f7f3 fa52 	bl	80002c8 <__aeabi_dsub>
 800ce24:	4632      	mov	r2, r6
 800ce26:	463b      	mov	r3, r7
 800ce28:	f7f3 fc06 	bl	8000638 <__aeabi_dmul>
 800ce2c:	a35e      	add	r3, pc, #376	; (adr r3, 800cfa8 <atan+0x300>)
 800ce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce32:	f7f3 fa49 	bl	80002c8 <__aeabi_dsub>
 800ce36:	4632      	mov	r2, r6
 800ce38:	463b      	mov	r3, r7
 800ce3a:	f7f3 fbfd 	bl	8000638 <__aeabi_dmul>
 800ce3e:	a35c      	add	r3, pc, #368	; (adr r3, 800cfb0 <atan+0x308>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f7f3 fa40 	bl	80002c8 <__aeabi_dsub>
 800ce48:	4632      	mov	r2, r6
 800ce4a:	463b      	mov	r3, r7
 800ce4c:	f7f3 fbf4 	bl	8000638 <__aeabi_dmul>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4640      	mov	r0, r8
 800ce56:	4649      	mov	r1, r9
 800ce58:	f7f3 fa38 	bl	80002cc <__adddf3>
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	462b      	mov	r3, r5
 800ce60:	f7f3 fbea 	bl	8000638 <__aeabi_dmul>
 800ce64:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	d14b      	bne.n	800cf06 <atan+0x25e>
 800ce6e:	4620      	mov	r0, r4
 800ce70:	4629      	mov	r1, r5
 800ce72:	f7f3 fa29 	bl	80002c8 <__aeabi_dsub>
 800ce76:	e72c      	b.n	800ccd2 <atan+0x2a>
 800ce78:	ee10 0a10 	vmov	r0, s0
 800ce7c:	4b53      	ldr	r3, [pc, #332]	; (800cfcc <atan+0x324>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fa21 	bl	80002c8 <__aeabi_dsub>
 800ce86:	4b51      	ldr	r3, [pc, #324]	; (800cfcc <atan+0x324>)
 800ce88:	4606      	mov	r6, r0
 800ce8a:	460f      	mov	r7, r1
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4620      	mov	r0, r4
 800ce90:	4629      	mov	r1, r5
 800ce92:	f7f3 fa1b 	bl	80002cc <__adddf3>
 800ce96:	4602      	mov	r2, r0
 800ce98:	460b      	mov	r3, r1
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	4639      	mov	r1, r7
 800ce9e:	f7f3 fcf5 	bl	800088c <__aeabi_ddiv>
 800cea2:	f04f 0a01 	mov.w	sl, #1
 800cea6:	4604      	mov	r4, r0
 800cea8:	460d      	mov	r5, r1
 800ceaa:	e764      	b.n	800cd76 <atan+0xce>
 800ceac:	4b49      	ldr	r3, [pc, #292]	; (800cfd4 <atan+0x32c>)
 800ceae:	429e      	cmp	r6, r3
 800ceb0:	da1d      	bge.n	800ceee <atan+0x246>
 800ceb2:	ee10 0a10 	vmov	r0, s0
 800ceb6:	4b48      	ldr	r3, [pc, #288]	; (800cfd8 <atan+0x330>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4629      	mov	r1, r5
 800cebc:	f7f3 fa04 	bl	80002c8 <__aeabi_dsub>
 800cec0:	4b45      	ldr	r3, [pc, #276]	; (800cfd8 <atan+0x330>)
 800cec2:	4606      	mov	r6, r0
 800cec4:	460f      	mov	r7, r1
 800cec6:	2200      	movs	r2, #0
 800cec8:	4620      	mov	r0, r4
 800ceca:	4629      	mov	r1, r5
 800cecc:	f7f3 fbb4 	bl	8000638 <__aeabi_dmul>
 800ced0:	4b3e      	ldr	r3, [pc, #248]	; (800cfcc <atan+0x324>)
 800ced2:	2200      	movs	r2, #0
 800ced4:	f7f3 f9fa 	bl	80002cc <__adddf3>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4630      	mov	r0, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	f7f3 fcd4 	bl	800088c <__aeabi_ddiv>
 800cee4:	f04f 0a02 	mov.w	sl, #2
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	e743      	b.n	800cd76 <atan+0xce>
 800ceee:	462b      	mov	r3, r5
 800cef0:	ee10 2a10 	vmov	r2, s0
 800cef4:	4939      	ldr	r1, [pc, #228]	; (800cfdc <atan+0x334>)
 800cef6:	2000      	movs	r0, #0
 800cef8:	f7f3 fcc8 	bl	800088c <__aeabi_ddiv>
 800cefc:	f04f 0a03 	mov.w	sl, #3
 800cf00:	4604      	mov	r4, r0
 800cf02:	460d      	mov	r5, r1
 800cf04:	e737      	b.n	800cd76 <atan+0xce>
 800cf06:	4b36      	ldr	r3, [pc, #216]	; (800cfe0 <atan+0x338>)
 800cf08:	4e36      	ldr	r6, [pc, #216]	; (800cfe4 <atan+0x33c>)
 800cf0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cf0e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cf12:	e9da 2300 	ldrd	r2, r3, [sl]
 800cf16:	f7f3 f9d7 	bl	80002c8 <__aeabi_dsub>
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	f7f3 f9d3 	bl	80002c8 <__aeabi_dsub>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cf2a:	f7f3 f9cd 	bl	80002c8 <__aeabi_dsub>
 800cf2e:	f1bb 0f00 	cmp.w	fp, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	460d      	mov	r5, r1
 800cf36:	f6bf aed6 	bge.w	800cce6 <atan+0x3e>
 800cf3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf3e:	461d      	mov	r5, r3
 800cf40:	e6d1      	b.n	800cce6 <atan+0x3e>
 800cf42:	a51d      	add	r5, pc, #116	; (adr r5, 800cfb8 <atan+0x310>)
 800cf44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf48:	e6cd      	b.n	800cce6 <atan+0x3e>
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w
 800cf50:	54442d18 	.word	0x54442d18
 800cf54:	bff921fb 	.word	0xbff921fb
 800cf58:	8800759c 	.word	0x8800759c
 800cf5c:	7e37e43c 	.word	0x7e37e43c
 800cf60:	e322da11 	.word	0xe322da11
 800cf64:	3f90ad3a 	.word	0x3f90ad3a
 800cf68:	24760deb 	.word	0x24760deb
 800cf6c:	3fa97b4b 	.word	0x3fa97b4b
 800cf70:	a0d03d51 	.word	0xa0d03d51
 800cf74:	3fb10d66 	.word	0x3fb10d66
 800cf78:	c54c206e 	.word	0xc54c206e
 800cf7c:	3fb745cd 	.word	0x3fb745cd
 800cf80:	920083ff 	.word	0x920083ff
 800cf84:	3fc24924 	.word	0x3fc24924
 800cf88:	5555550d 	.word	0x5555550d
 800cf8c:	3fd55555 	.word	0x3fd55555
 800cf90:	2c6a6c2f 	.word	0x2c6a6c2f
 800cf94:	bfa2b444 	.word	0xbfa2b444
 800cf98:	52defd9a 	.word	0x52defd9a
 800cf9c:	3fadde2d 	.word	0x3fadde2d
 800cfa0:	af749a6d 	.word	0xaf749a6d
 800cfa4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cfa8:	fe231671 	.word	0xfe231671
 800cfac:	3fbc71c6 	.word	0x3fbc71c6
 800cfb0:	9998ebc4 	.word	0x9998ebc4
 800cfb4:	3fc99999 	.word	0x3fc99999
 800cfb8:	54442d18 	.word	0x54442d18
 800cfbc:	3ff921fb 	.word	0x3ff921fb
 800cfc0:	440fffff 	.word	0x440fffff
 800cfc4:	7ff00000 	.word	0x7ff00000
 800cfc8:	3fdbffff 	.word	0x3fdbffff
 800cfcc:	3ff00000 	.word	0x3ff00000
 800cfd0:	3ff2ffff 	.word	0x3ff2ffff
 800cfd4:	40038000 	.word	0x40038000
 800cfd8:	3ff80000 	.word	0x3ff80000
 800cfdc:	bff00000 	.word	0xbff00000
 800cfe0:	0800da50 	.word	0x0800da50
 800cfe4:	0800da30 	.word	0x0800da30

0800cfe8 <fabs>:
 800cfe8:	ec51 0b10 	vmov	r0, r1, d0
 800cfec:	ee10 2a10 	vmov	r2, s0
 800cff0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cff4:	ec43 2b10 	vmov	d0, r2, r3
 800cff8:	4770      	bx	lr

0800cffa <finite>:
 800cffa:	b082      	sub	sp, #8
 800cffc:	ed8d 0b00 	vstr	d0, [sp]
 800d000:	9801      	ldr	r0, [sp, #4]
 800d002:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d006:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d00a:	0fc0      	lsrs	r0, r0, #31
 800d00c:	b002      	add	sp, #8
 800d00e:	4770      	bx	lr

0800d010 <floor>:
 800d010:	ec51 0b10 	vmov	r0, r1, d0
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d01c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d020:	2e13      	cmp	r6, #19
 800d022:	ee10 5a10 	vmov	r5, s0
 800d026:	ee10 8a10 	vmov	r8, s0
 800d02a:	460c      	mov	r4, r1
 800d02c:	dc32      	bgt.n	800d094 <floor+0x84>
 800d02e:	2e00      	cmp	r6, #0
 800d030:	da14      	bge.n	800d05c <floor+0x4c>
 800d032:	a333      	add	r3, pc, #204	; (adr r3, 800d100 <floor+0xf0>)
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f7f3 f948 	bl	80002cc <__adddf3>
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	f7f3 fd8a 	bl	8000b58 <__aeabi_dcmpgt>
 800d044:	b138      	cbz	r0, 800d056 <floor+0x46>
 800d046:	2c00      	cmp	r4, #0
 800d048:	da57      	bge.n	800d0fa <floor+0xea>
 800d04a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d04e:	431d      	orrs	r5, r3
 800d050:	d001      	beq.n	800d056 <floor+0x46>
 800d052:	4c2d      	ldr	r4, [pc, #180]	; (800d108 <floor+0xf8>)
 800d054:	2500      	movs	r5, #0
 800d056:	4621      	mov	r1, r4
 800d058:	4628      	mov	r0, r5
 800d05a:	e025      	b.n	800d0a8 <floor+0x98>
 800d05c:	4f2b      	ldr	r7, [pc, #172]	; (800d10c <floor+0xfc>)
 800d05e:	4137      	asrs	r7, r6
 800d060:	ea01 0307 	and.w	r3, r1, r7
 800d064:	4303      	orrs	r3, r0
 800d066:	d01f      	beq.n	800d0a8 <floor+0x98>
 800d068:	a325      	add	r3, pc, #148	; (adr r3, 800d100 <floor+0xf0>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 f92d 	bl	80002cc <__adddf3>
 800d072:	2200      	movs	r2, #0
 800d074:	2300      	movs	r3, #0
 800d076:	f7f3 fd6f 	bl	8000b58 <__aeabi_dcmpgt>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d0eb      	beq.n	800d056 <floor+0x46>
 800d07e:	2c00      	cmp	r4, #0
 800d080:	bfbe      	ittt	lt
 800d082:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d086:	fa43 f606 	asrlt.w	r6, r3, r6
 800d08a:	19a4      	addlt	r4, r4, r6
 800d08c:	ea24 0407 	bic.w	r4, r4, r7
 800d090:	2500      	movs	r5, #0
 800d092:	e7e0      	b.n	800d056 <floor+0x46>
 800d094:	2e33      	cmp	r6, #51	; 0x33
 800d096:	dd0b      	ble.n	800d0b0 <floor+0xa0>
 800d098:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d09c:	d104      	bne.n	800d0a8 <floor+0x98>
 800d09e:	ee10 2a10 	vmov	r2, s0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	f7f3 f912 	bl	80002cc <__adddf3>
 800d0a8:	ec41 0b10 	vmov	d0, r0, r1
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b8:	fa23 f707 	lsr.w	r7, r3, r7
 800d0bc:	4207      	tst	r7, r0
 800d0be:	d0f3      	beq.n	800d0a8 <floor+0x98>
 800d0c0:	a30f      	add	r3, pc, #60	; (adr r3, 800d100 <floor+0xf0>)
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f7f3 f901 	bl	80002cc <__adddf3>
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f7f3 fd43 	bl	8000b58 <__aeabi_dcmpgt>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d0bf      	beq.n	800d056 <floor+0x46>
 800d0d6:	2c00      	cmp	r4, #0
 800d0d8:	da02      	bge.n	800d0e0 <floor+0xd0>
 800d0da:	2e14      	cmp	r6, #20
 800d0dc:	d103      	bne.n	800d0e6 <floor+0xd6>
 800d0de:	3401      	adds	r4, #1
 800d0e0:	ea25 0507 	bic.w	r5, r5, r7
 800d0e4:	e7b7      	b.n	800d056 <floor+0x46>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d0ec:	fa03 f606 	lsl.w	r6, r3, r6
 800d0f0:	4435      	add	r5, r6
 800d0f2:	4545      	cmp	r5, r8
 800d0f4:	bf38      	it	cc
 800d0f6:	18e4      	addcc	r4, r4, r3
 800d0f8:	e7f2      	b.n	800d0e0 <floor+0xd0>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	462c      	mov	r4, r5
 800d0fe:	e7aa      	b.n	800d056 <floor+0x46>
 800d100:	8800759c 	.word	0x8800759c
 800d104:	7e37e43c 	.word	0x7e37e43c
 800d108:	bff00000 	.word	0xbff00000
 800d10c:	000fffff 	.word	0x000fffff

0800d110 <nan>:
 800d110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d118 <nan+0x8>
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	00000000 	.word	0x00000000
 800d11c:	7ff80000 	.word	0x7ff80000

0800d120 <rint>:
 800d120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d122:	ec51 0b10 	vmov	r0, r1, d0
 800d126:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d12a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d12e:	2e13      	cmp	r6, #19
 800d130:	ee10 4a10 	vmov	r4, s0
 800d134:	460b      	mov	r3, r1
 800d136:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d13a:	dc58      	bgt.n	800d1ee <rint+0xce>
 800d13c:	2e00      	cmp	r6, #0
 800d13e:	da2b      	bge.n	800d198 <rint+0x78>
 800d140:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d144:	4302      	orrs	r2, r0
 800d146:	d023      	beq.n	800d190 <rint+0x70>
 800d148:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d14c:	4302      	orrs	r2, r0
 800d14e:	4254      	negs	r4, r2
 800d150:	4314      	orrs	r4, r2
 800d152:	0c4b      	lsrs	r3, r1, #17
 800d154:	0b24      	lsrs	r4, r4, #12
 800d156:	045b      	lsls	r3, r3, #17
 800d158:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d15c:	ea44 0103 	orr.w	r1, r4, r3
 800d160:	4b32      	ldr	r3, [pc, #200]	; (800d22c <rint+0x10c>)
 800d162:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d166:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4630      	mov	r0, r6
 800d170:	4639      	mov	r1, r7
 800d172:	f7f3 f8ab 	bl	80002cc <__adddf3>
 800d176:	e9cd 0100 	strd	r0, r1, [sp]
 800d17a:	463b      	mov	r3, r7
 800d17c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d180:	4632      	mov	r2, r6
 800d182:	f7f3 f8a1 	bl	80002c8 <__aeabi_dsub>
 800d186:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d18a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d18e:	4639      	mov	r1, r7
 800d190:	ec41 0b10 	vmov	d0, r0, r1
 800d194:	b003      	add	sp, #12
 800d196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d198:	4a25      	ldr	r2, [pc, #148]	; (800d230 <rint+0x110>)
 800d19a:	4132      	asrs	r2, r6
 800d19c:	ea01 0702 	and.w	r7, r1, r2
 800d1a0:	4307      	orrs	r7, r0
 800d1a2:	d0f5      	beq.n	800d190 <rint+0x70>
 800d1a4:	0851      	lsrs	r1, r2, #1
 800d1a6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800d1aa:	4314      	orrs	r4, r2
 800d1ac:	d00c      	beq.n	800d1c8 <rint+0xa8>
 800d1ae:	ea23 0201 	bic.w	r2, r3, r1
 800d1b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d1b6:	2e13      	cmp	r6, #19
 800d1b8:	fa43 f606 	asr.w	r6, r3, r6
 800d1bc:	bf0c      	ite	eq
 800d1be:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d1c2:	2400      	movne	r4, #0
 800d1c4:	ea42 0306 	orr.w	r3, r2, r6
 800d1c8:	4918      	ldr	r1, [pc, #96]	; (800d22c <rint+0x10c>)
 800d1ca:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	f7f3 f878 	bl	80002cc <__adddf3>
 800d1dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d1e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	f7f3 f86e 	bl	80002c8 <__aeabi_dsub>
 800d1ec:	e7d0      	b.n	800d190 <rint+0x70>
 800d1ee:	2e33      	cmp	r6, #51	; 0x33
 800d1f0:	dd07      	ble.n	800d202 <rint+0xe2>
 800d1f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d1f6:	d1cb      	bne.n	800d190 <rint+0x70>
 800d1f8:	ee10 2a10 	vmov	r2, s0
 800d1fc:	f7f3 f866 	bl	80002cc <__adddf3>
 800d200:	e7c6      	b.n	800d190 <rint+0x70>
 800d202:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d206:	f04f 36ff 	mov.w	r6, #4294967295
 800d20a:	40d6      	lsrs	r6, r2
 800d20c:	4230      	tst	r0, r6
 800d20e:	d0bf      	beq.n	800d190 <rint+0x70>
 800d210:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d214:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d218:	bf1f      	itttt	ne
 800d21a:	ea24 0101 	bicne.w	r1, r4, r1
 800d21e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d222:	fa44 f202 	asrne.w	r2, r4, r2
 800d226:	ea41 0402 	orrne.w	r4, r1, r2
 800d22a:	e7cd      	b.n	800d1c8 <rint+0xa8>
 800d22c:	0800da70 	.word	0x0800da70
 800d230:	000fffff 	.word	0x000fffff
 800d234:	00000000 	.word	0x00000000

0800d238 <scalbn>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	ec55 4b10 	vmov	r4, r5, d0
 800d23e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d242:	4606      	mov	r6, r0
 800d244:	462b      	mov	r3, r5
 800d246:	b99a      	cbnz	r2, 800d270 <scalbn+0x38>
 800d248:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d24c:	4323      	orrs	r3, r4
 800d24e:	d036      	beq.n	800d2be <scalbn+0x86>
 800d250:	4b39      	ldr	r3, [pc, #228]	; (800d338 <scalbn+0x100>)
 800d252:	4629      	mov	r1, r5
 800d254:	ee10 0a10 	vmov	r0, s0
 800d258:	2200      	movs	r2, #0
 800d25a:	f7f3 f9ed 	bl	8000638 <__aeabi_dmul>
 800d25e:	4b37      	ldr	r3, [pc, #220]	; (800d33c <scalbn+0x104>)
 800d260:	429e      	cmp	r6, r3
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	da10      	bge.n	800d28a <scalbn+0x52>
 800d268:	a32b      	add	r3, pc, #172	; (adr r3, 800d318 <scalbn+0xe0>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	e03a      	b.n	800d2e6 <scalbn+0xae>
 800d270:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d274:	428a      	cmp	r2, r1
 800d276:	d10c      	bne.n	800d292 <scalbn+0x5a>
 800d278:	ee10 2a10 	vmov	r2, s0
 800d27c:	4620      	mov	r0, r4
 800d27e:	4629      	mov	r1, r5
 800d280:	f7f3 f824 	bl	80002cc <__adddf3>
 800d284:	4604      	mov	r4, r0
 800d286:	460d      	mov	r5, r1
 800d288:	e019      	b.n	800d2be <scalbn+0x86>
 800d28a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d28e:	460b      	mov	r3, r1
 800d290:	3a36      	subs	r2, #54	; 0x36
 800d292:	4432      	add	r2, r6
 800d294:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d298:	428a      	cmp	r2, r1
 800d29a:	dd08      	ble.n	800d2ae <scalbn+0x76>
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	a120      	add	r1, pc, #128	; (adr r1, 800d320 <scalbn+0xe8>)
 800d2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a4:	da1c      	bge.n	800d2e0 <scalbn+0xa8>
 800d2a6:	a120      	add	r1, pc, #128	; (adr r1, 800d328 <scalbn+0xf0>)
 800d2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ac:	e018      	b.n	800d2e0 <scalbn+0xa8>
 800d2ae:	2a00      	cmp	r2, #0
 800d2b0:	dd08      	ble.n	800d2c4 <scalbn+0x8c>
 800d2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d2be:	ec45 4b10 	vmov	d0, r4, r5
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}
 800d2c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d2c8:	da19      	bge.n	800d2fe <scalbn+0xc6>
 800d2ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d2d4:	dd0a      	ble.n	800d2ec <scalbn+0xb4>
 800d2d6:	a112      	add	r1, pc, #72	; (adr r1, 800d320 <scalbn+0xe8>)
 800d2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1e2      	bne.n	800d2a6 <scalbn+0x6e>
 800d2e0:	a30f      	add	r3, pc, #60	; (adr r3, 800d320 <scalbn+0xe8>)
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	f7f3 f9a7 	bl	8000638 <__aeabi_dmul>
 800d2ea:	e7cb      	b.n	800d284 <scalbn+0x4c>
 800d2ec:	a10a      	add	r1, pc, #40	; (adr r1, 800d318 <scalbn+0xe0>)
 800d2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d0b8      	beq.n	800d268 <scalbn+0x30>
 800d2f6:	a10e      	add	r1, pc, #56	; (adr r1, 800d330 <scalbn+0xf8>)
 800d2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fc:	e7b4      	b.n	800d268 <scalbn+0x30>
 800d2fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d302:	3236      	adds	r2, #54	; 0x36
 800d304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d308:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d30c:	4620      	mov	r0, r4
 800d30e:	4b0c      	ldr	r3, [pc, #48]	; (800d340 <scalbn+0x108>)
 800d310:	2200      	movs	r2, #0
 800d312:	e7e8      	b.n	800d2e6 <scalbn+0xae>
 800d314:	f3af 8000 	nop.w
 800d318:	c2f8f359 	.word	0xc2f8f359
 800d31c:	01a56e1f 	.word	0x01a56e1f
 800d320:	8800759c 	.word	0x8800759c
 800d324:	7e37e43c 	.word	0x7e37e43c
 800d328:	8800759c 	.word	0x8800759c
 800d32c:	fe37e43c 	.word	0xfe37e43c
 800d330:	c2f8f359 	.word	0xc2f8f359
 800d334:	81a56e1f 	.word	0x81a56e1f
 800d338:	43500000 	.word	0x43500000
 800d33c:	ffff3cb0 	.word	0xffff3cb0
 800d340:	3c900000 	.word	0x3c900000

0800d344 <_getpid>:
 800d344:	4b02      	ldr	r3, [pc, #8]	; (800d350 <_getpid+0xc>)
 800d346:	2258      	movs	r2, #88	; 0x58
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	4770      	bx	lr
 800d350:	2000087c 	.word	0x2000087c

0800d354 <_kill>:
 800d354:	4b02      	ldr	r3, [pc, #8]	; (800d360 <_kill+0xc>)
 800d356:	2258      	movs	r2, #88	; 0x58
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	f04f 30ff 	mov.w	r0, #4294967295
 800d35e:	4770      	bx	lr
 800d360:	2000087c 	.word	0x2000087c

0800d364 <_exit>:
 800d364:	e7fe      	b.n	800d364 <_exit>
	...

0800d368 <_init>:
 800d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36a:	bf00      	nop
 800d36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d36e:	bc08      	pop	{r3}
 800d370:	469e      	mov	lr, r3
 800d372:	4770      	bx	lr

0800d374 <_fini>:
 800d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d376:	bf00      	nop
 800d378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37a:	bc08      	pop	{r3}
 800d37c:	469e      	mov	lr, r3
 800d37e:	4770      	bx	lr
