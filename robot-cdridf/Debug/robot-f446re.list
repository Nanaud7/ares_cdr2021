
robot-f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800d028  0800d028  0001d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6c0  0800d6c0  00020428  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6c0  0800d6c0  0001d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6c8  0800d6c8  00020428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6c8  0800d6c8  0001d6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6cc  0800d6cc  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  0800d6d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000428  0800daf8  00020428  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  0800daf8  00020a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a2e  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004444  00000000  00000000  00040e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000452d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00046568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a1a  00000000  00000000  00047630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019671  00000000  00000000  0006f04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b18  00000000  00000000  000886bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001691d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fac  00000000  00000000  00169228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016f1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016f210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000428 	.word	0x20000428
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d010 	.word	0x0800d010

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000042c 	.word	0x2000042c
 800020c:	0800d010 	.word	0x0800d010

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96e 	b.w	8000fbc <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468c      	mov	ip, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8083 	bne.w	8000e0e <__udivmoddi4+0x116>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d947      	bls.n	8000d9e <__udivmoddi4+0xa6>
 8000d0e:	fab2 f282 	clz	r2, r2
 8000d12:	b142      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	f1c2 0020 	rsb	r0, r2, #32
 8000d18:	fa24 f000 	lsr.w	r0, r4, r0
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4097      	lsls	r7, r2
 8000d20:	ea40 0c01 	orr.w	ip, r0, r1
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d30:	fa1f fe87 	uxth.w	lr, r7
 8000d34:	fb08 c116 	mls	r1, r8, r6, ip
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4a:	f080 8119 	bcs.w	8000f80 <__udivmoddi4+0x288>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8116 	bls.w	8000f80 <__udivmoddi4+0x288>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d60:	fb08 3310 	mls	r3, r8, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	193c      	adds	r4, r7, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8105 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f240 8102 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d80:	3802      	subs	r0, #2
 8000d82:	443c      	add	r4, r7
 8000d84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	b11d      	cbz	r5, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c5 4300 	strd	r4, r3, [r5]
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xaa>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f282 	clz	r2, r2
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	d150      	bne.n	8000e4c <__udivmoddi4+0x154>
 8000daa:	1bcb      	subs	r3, r1, r7
 8000dac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db0:	fa1f f887 	uxth.w	r8, r7
 8000db4:	2601      	movs	r6, #1
 8000db6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0xe2>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	f200 80e9 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x10c>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x10a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80d9 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e7bf      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x12e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80b1 	beq.w	8000f7a <__udivmoddi4+0x282>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x1cc>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0x140>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80b8 	bhi.w	8000fa8 <__udivmoddi4+0x2b0>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	468c      	mov	ip, r1
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0a8      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000e46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e4a:	e7a5      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f603 	lsr.w	r6, r0, r3
 8000e54:	4097      	lsls	r7, r2
 8000e56:	fa01 f002 	lsl.w	r0, r1, r2
 8000e5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5e:	40d9      	lsrs	r1, r3
 8000e60:	4330      	orrs	r0, r6
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e68:	fa1f f887 	uxth.w	r8, r7
 8000e6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e74:	fb06 f108 	mul.w	r1, r6, r8
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x19c>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e86:	f080 808d 	bcs.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 808a 	bls.w	8000fa4 <__udivmoddi4+0x2ac>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b281      	uxth	r1, r0
 8000e98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb00 f308 	mul.w	r3, r0, r8
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x1c4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eb2:	d273      	bcs.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d971      	bls.n	8000f9c <__udivmoddi4+0x2a4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	4439      	add	r1, r7
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ec2:	e778      	b.n	8000db6 <__udivmoddi4+0xbe>
 8000ec4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ecc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ede:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	0c3b      	lsrs	r3, r7, #16
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fa1f f884 	uxth.w	r8, r4
 8000eee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ef2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef6:	fb09 fa08 	mul.w	sl, r9, r8
 8000efa:	458a      	cmp	sl, r1
 8000efc:	fa02 f206 	lsl.w	r2, r2, r6
 8000f00:	fa00 f306 	lsl.w	r3, r0, r6
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x220>
 8000f06:	1861      	adds	r1, r4, r1
 8000f08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f0c:	d248      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f0e:	458a      	cmp	sl, r1
 8000f10:	d946      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f12:	f1a9 0902 	sub.w	r9, r9, #2
 8000f16:	4421      	add	r1, r4
 8000f18:	eba1 010a 	sub.w	r1, r1, sl
 8000f1c:	b2bf      	uxth	r7, r7
 8000f1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f2a:	fb00 f808 	mul.w	r8, r0, r8
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x24a>
 8000f32:	19e7      	adds	r7, r4, r7
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d22e      	bcs.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d92c      	bls.n	8000f98 <__udivmoddi4+0x2a0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4427      	add	r7, r4
 8000f42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f46:	eba7 0708 	sub.w	r7, r7, r8
 8000f4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4e:	454f      	cmp	r7, r9
 8000f50:	46c6      	mov	lr, r8
 8000f52:	4649      	mov	r1, r9
 8000f54:	d31a      	bcc.n	8000f8c <__udivmoddi4+0x294>
 8000f56:	d017      	beq.n	8000f88 <__udivmoddi4+0x290>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x27a>
 8000f5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f66:	40f2      	lsrs	r2, r6
 8000f68:	ea4c 0202 	orr.w	r2, ip, r2
 8000f6c:	40f7      	lsrs	r7, r6
 8000f6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f72:	2600      	movs	r6, #0
 8000f74:	4631      	mov	r1, r6
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e70b      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6fd      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f88:	4543      	cmp	r3, r8
 8000f8a:	d2e5      	bcs.n	8000f58 <__udivmoddi4+0x260>
 8000f8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f90:	eb69 0104 	sbc.w	r1, r9, r4
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7df      	b.n	8000f58 <__udivmoddi4+0x260>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e7d2      	b.n	8000f42 <__udivmoddi4+0x24a>
 8000f9c:	4660      	mov	r0, ip
 8000f9e:	e78d      	b.n	8000ebc <__udivmoddi4+0x1c4>
 8000fa0:	4681      	mov	r9, r0
 8000fa2:	e7b9      	b.n	8000f18 <__udivmoddi4+0x220>
 8000fa4:	4666      	mov	r6, ip
 8000fa6:	e775      	b.n	8000e94 <__udivmoddi4+0x19c>
 8000fa8:	4630      	mov	r0, r6
 8000faa:	e74a      	b.n	8000e42 <__udivmoddi4+0x14a>
 8000fac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb0:	4439      	add	r1, r7
 8000fb2:	e713      	b.n	8000ddc <__udivmoddi4+0xe4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	443c      	add	r4, r7
 8000fb8:	e724      	b.n	8000e04 <__udivmoddi4+0x10c>
 8000fba:	bf00      	nop

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AX12_Init>:
#include <AX12.h>


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	715a      	strb	r2, [r3, #5]

}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	a316      	add	r3, pc, #88	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff fc3a 	bl	800088c <__aeabi_ddiv>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fde2 	bl	8000be8 <__aeabi_d2uiz>
 8001024:	4603      	mov	r3, r0
 8001026:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff faad 	bl	8000588 <__aeabi_f2d>
 800102e:	a30e      	add	r3, pc, #56	; (adr r3, 8001068 <AX12_setRangeAngle+0x70>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdd2 	bl	8000be8 <__aeabi_d2uiz>
 8001044:	4603      	mov	r3, r0
 8001046:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	461a      	mov	r2, r3
 800104c:	2106      	movs	r1, #6
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 f9c2 	bl	80013d8 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001054:	8abb      	ldrh	r3, [r7, #20]
 8001056:	461a      	mov	r2, r3
 8001058:	2108      	movs	r1, #8
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f9bc 	bl	80013d8 <AX12_sendTram2Byte>

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2c54bf16 	.word	0x2c54bf16
 800106c:	3fd2c4b1 	.word	0x3fd2c4b1

08001070 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 800107c:	edd7 7a00 	vldr	s15, [r7]
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	ee17 3a90 	vmov	r3, s15
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa6a 	bl	8000564 <__aeabi_i2d>
 8001090:	a30b      	add	r3, pc, #44	; (adr r3, 80010c0 <AX12_setMaxTorque+0x50>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fbf9 	bl	800088c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fda1 	bl	8000be8 <__aeabi_d2uiz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	461a      	mov	r2, r3
 80010ae:	210e      	movs	r1, #14
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f991 	bl	80013d8 <AX12_sendTram2Byte>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	905eab89 	.word	0x905eab89
 80010c4:	3fb90641 	.word	0x3fb90641

080010c8 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2118      	movs	r1, #24
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f966 	bl	80013ac <AX12_sendTram1Byte>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa2e 	bl	8000564 <__aeabi_i2d>
 8001108:	a30b      	add	r3, pc, #44	; (adr r3, 8001138 <AX12_setPosition+0x50>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fbbd 	bl	800088c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd65 	bl	8000be8 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	461a      	mov	r2, r3
 8001126:	211e      	movs	r1, #30
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f955 	bl	80013d8 <AX12_sendTram2Byte>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2c54bf16 	.word	0x2c54bf16
 800113c:	3fd2c4b1 	.word	0x3fd2c4b1

08001140 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 800114c:	edd7 7a00 	vldr	s15, [r7]
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 3a90 	vmov	r3, s15
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa02 	bl	8000564 <__aeabi_i2d>
 8001160:	a30b      	add	r3, pc, #44	; (adr r3, 8001190 <AX12_setMovingSpeed+0x50>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fb91 	bl	800088c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd39 	bl	8000be8 <__aeabi_d2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	461a      	mov	r2, r3
 800117e:	2120      	movs	r1, #32
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f929 	bl	80013d8 <AX12_sendTram2Byte>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	c83ed809 	.word	0xc83ed809
 8001194:	3fbc8721 	.word	0x3fbc8721

08001198 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001198:	b408      	push	{r3}
 800119a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
 80011ac:	466b      	mov	r3, sp
 80011ae:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 80011b6:	78fc      	ldrb	r4, [r7, #3]
 80011b8:	4623      	mov	r3, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	b2e0      	uxtb	r0, r4
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	00cb      	lsls	r3, r1, #3
 80011ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011d2:	00c2      	lsls	r2, r0, #3
 80011d4:	b2e0      	uxtb	r0, r4
 80011d6:	f04f 0100 	mov.w	r1, #0
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	00cb      	lsls	r3, r1, #3
 80011e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011e8:	00c2      	lsls	r2, r0, #3
 80011ea:	4623      	mov	r3, r4
 80011ec:	3307      	adds	r3, #7
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	ebad 0d03 	sub.w	sp, sp, r3
 80011f6:	ab02      	add	r3, sp, #8
 80011f8:	3300      	adds	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791a      	ldrb	r2, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001210:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001214:	3302      	adds	r3, #2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	78ba      	ldrb	r2, [r7, #2]
 8001220:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
 8001226:	e00b      	b.n	8001240 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	1d1a      	adds	r2, r3, #4
 800122c:	60ba      	str	r2, [r7, #8]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3305      	adds	r3, #5
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	3301      	adds	r3, #1
 800123e:	75fb      	strb	r3, [r7, #23]
 8001240:	7dfa      	ldrb	r2, [r7, #23]
 8001242:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001246:	429a      	cmp	r2, r3
 8001248:	d3ee      	bcc.n	8001228 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 800124a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800124e:	2b03      	cmp	r3, #3
 8001250:	d867      	bhi.n	8001322 <AX12_sendData+0x18a>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <AX12_sendData+0xc0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001291 	.word	0x08001291
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012ed 	.word	0x080012ed
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7898      	ldrb	r0, [r3, #2]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	78d9      	ldrb	r1, [r3, #3]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	791a      	ldrb	r2, [r3, #4]
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	1e5c      	subs	r4, r3, #1
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	f000 f861 	bl	8001348 <AX12_calculChecksum>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	551a      	strb	r2, [r3, r4]
 800128e:	e049      	b.n	8001324 <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7898      	ldrb	r0, [r3, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	78d9      	ldrb	r1, [r3, #3]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	791a      	ldrb	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	795d      	ldrb	r5, [r3, #5]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	1e5c      	subs	r4, r3, #1
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	f000 f84b 	bl	8001348 <AX12_calculChecksum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	551a      	strb	r2, [r3, r4]
 80012ba:	e033      	b.n	8001324 <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7898      	ldrb	r0, [r3, #2]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	78d9      	ldrb	r1, [r3, #3]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	791d      	ldrb	r5, [r3, #4]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	795e      	ldrb	r6, [r3, #5]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	78fa      	ldrb	r2, [r7, #3]
 80012d2:	1e54      	subs	r4, r2, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4633      	mov	r3, r6
 80012dc:	462a      	mov	r2, r5
 80012de:	f000 f833 	bl	8001348 <AX12_calculChecksum>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	551a      	strb	r2, [r3, r4]
 80012ea:	e01b      	b.n	8001324 <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	7898      	ldrb	r0, [r3, #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	78dd      	ldrb	r5, [r3, #3]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	791e      	ldrb	r6, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 c005 	ldrb.w	ip, [r3, #5]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	79d2      	ldrb	r2, [r2, #7]
 8001306:	78f9      	ldrb	r1, [r7, #3]
 8001308:	1e4c      	subs	r4, r1, #1
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4663      	mov	r3, ip
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	f000 f818 	bl	8001348 <AX12_calculChecksum>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	551a      	strb	r2, [r3, r4]
 8001320:	e000      	b.n	8001324 <AX12_sendData+0x18c>
	default : break;
 8001322:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	b29a      	uxth	r2, r3
 800132e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001332:	f005 fef0 	bl	8007116 <HAL_UART_Transmit>
 8001336:	46c5      	mov	sp, r8
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b001      	add	sp, #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4623      	mov	r3, r4
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	460b      	mov	r3, r1
 8001360:	717b      	strb	r3, [r7, #5]
 8001362:	4613      	mov	r3, r2
 8001364:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	b29a      	uxth	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29a      	uxth	r2, r3
 800137a:	793b      	ldrb	r3, [r7, #4]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29a      	uxth	r2, r3
 8001382:	7e3b      	ldrb	r3, [r7, #24]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	7f3b      	ldrb	r3, [r7, #28]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	43db      	mvns	r3, r3
 8001396:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc90      	pop	{r4, r7}
 80013aa:	4770      	bx	lr

080013ac <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	78ba      	ldrb	r2, [r7, #2]
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2203      	movs	r2, #3
 80013c8:	2108      	movs	r1, #8
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fee4 	bl	8001198 <AX12_sendData>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 80013e8:	883b      	ldrh	r3, [r7, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bf9      	ldrb	r1, [r7, #15]
 80013fa:	9102      	str	r1, [sp, #8]
 80013fc:	9201      	str	r2, [sp, #4]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2303      	movs	r3, #3
 8001402:	2203      	movs	r2, #3
 8001404:	2109      	movs	r1, #9
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fec6 	bl	8001198 <AX12_sendData>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <DRV8825_init>:
#include "DRV8825.h"

void DRV8825_init(Moteur *drv8825,uint16_t PIN_EN, GPIO_TypeDef * GPIO_EN, uint16_t PIN_DIR, GPIO_TypeDef * GPIO_DIR,TIM_HandleTypeDef* timer, uint8_t chanel){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
	/*****************************************
	 * nous récupérons les numéros des pins  *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->pin_EN = PIN_EN;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	897a      	ldrh	r2, [r7, #10]
 800142c:	815a      	strh	r2, [r3, #10]
	drv8825->pin_DIR = PIN_DIR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	801a      	strh	r2, [r3, #0]
	/*****************************************
	 * nous récupérons les GPIO des pins     *
	 * et les intégrons dans notre structure *
	 * DRV8825                               *
	 *****************************************/
	drv8825->gpio_EN= GPIO_EN;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
	drv8825->gpio_DIR= GPIO_DIR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]

	/**********************************************
	 * nous initialisatons le timer et récupérons *
	 * à quelle chanel il est racroché 			  *
	 **********************************************/
	drv8825->timer = timer;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
	drv8825->chanel = chanel;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f897 2020 	ldrb.w	r2, [r7, #32]
 800144c:	751a      	strb	r2, [r3, #20]

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DRV8825_setDir>:

void DRV8825_setDir(Moteur* drv8825,uint8_t dir){
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(drv8825->gpio_DIR,drv8825->pin_DIR,dir);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6858      	ldr	r0, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	f003 fe5d 	bl	8005130 <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <DRV8825_setStart>:

void DRV8825_setStart(Moteur* drv8825,uint8_t enable){
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(drv8825->gpio_EN,drv8825->pin_EN,enable);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68d8      	ldr	r0, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	895b      	ldrh	r3, [r3, #10]
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	f003 fe4b 	bl	8005130 <HAL_GPIO_WritePin>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	0000      	movs	r0, r0
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <DRV8825_moveMotorLineSpeed>:
	rpm = rpm/M_TO_S;
	uint16_t f = PAS*rpm;
	DRV8825_setFrequency(drv8825, f);
}

void DRV8825_moveMotorLineSpeed(Moteur* drv8825,float vitesse){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	ed87 0a00 	vstr	s0, [r7]
	vitesse= vitesse*1000;
 80014b4:	edd7 7a00 	vldr	s15, [r7]
 80014b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001510 <DRV8825_moveMotorLineSpeed+0x68>
 80014bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c0:	edc7 7a00 	vstr	s15, [r7]
	uint16_t f = (PAS*vitesse)/(2*M_PI*RAYON);
 80014c4:	edd7 7a00 	vldr	s15, [r7]
 80014c8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001514 <DRV8825_moveMotorLineSpeed+0x6c>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f7ff f858 	bl	8000588 <__aeabi_f2d>
 80014d8:	a30b      	add	r3, pc, #44	; (adr r3, 8001508 <DRV8825_moveMotorLineSpeed+0x60>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9d5 	bl	800088c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb7d 	bl	8000be8 <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
	DRV8825_setFrequency(drv8825, f);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f80e 	bl	8001518 <DRV8825_setFrequency>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	71f1350d 	.word	0x71f1350d
 800150c:	40643451 	.word	0x40643451
 8001510:	447a0000 	.word	0x447a0000
 8001514:	43480000 	.word	0x43480000

08001518 <DRV8825_setFrequency>:

void DRV8825_setFrequency(Moteur* drv8825, uint16_t freq){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if(freq != 0){
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <DRV8825_setFrequency+0x2a>
	drv8825->timer->Init.Prescaler = 179;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	22b3      	movs	r2, #179	; 0xb3
 8001530:	605a      	str	r2, [r3, #4]
	drv8825->timer->Init.Period = (uint32_t)1000000/freq;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4945      	ldr	r1, [pc, #276]	; (8001650 <DRV8825_setFrequency+0x138>)
 800153a:	fbb1 f2f2 	udiv	r2, r1, r2
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	e009      	b.n	8001556 <DRV8825_setFrequency+0x3e>
	}
	else{
		drv8825->timer->Init.Prescaler = 0xFFFE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800154a:	605a      	str	r2, [r3, #4]
		drv8825->timer->Init.Period = 0xFFFE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001554:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(drv8825->timer) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fbd4 	bl	8005d08 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <DRV8825_setFrequency+0x52>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8001566:	f001 fb98 	bl	8002c9a <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(drv8825->timer) != HAL_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fc8a 	bl	8005e88 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <DRV8825_setFrequency+0x66>
	{
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 800157a:	f001 fb8e 	bl	8002c9a <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(drv8825->timer, drv8825->chanel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7d1b      	ldrb	r3, [r3, #20]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f004 fcd7 	bl	8005f3c <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch(drv8825->chanel){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7d1b      	ldrb	r3, [r3, #20]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d858      	bhi.n	8001648 <DRV8825_setFrequency+0x130>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DRV8825_setFrequency+0x84>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	08001649 	.word	0x08001649
 80015a4:	08001649 	.word	0x08001649
 80015a8:	08001649 	.word	0x08001649
 80015ac:	080015ef 	.word	0x080015ef
 80015b0:	08001649 	.word	0x08001649
 80015b4:	08001649 	.word	0x08001649
 80015b8:	08001649 	.word	0x08001649
 80015bc:	0800160d 	.word	0x0800160d
 80015c0:	08001649 	.word	0x08001649
 80015c4:	08001649 	.word	0x08001649
 80015c8:	08001649 	.word	0x08001649
 80015cc:	0800162b 	.word	0x0800162b
	case(TIM_CHANNEL_1):drv8825->timer->Instance->CCR1 = (50*drv8825->timer->Init.Period)/100;break;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2232      	movs	r2, #50	; 0x32
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	491c      	ldr	r1, [pc, #112]	; (8001654 <DRV8825_setFrequency+0x13c>)
 80015e4:	fba1 1202 	umull	r1, r2, r1, r2
 80015e8:	0952      	lsrs	r2, r2, #5
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
 80015ec:	e02c      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_2):drv8825->timer->Instance->CCR2 = (50*drv8825->timer->Init.Period)/100;break;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2232      	movs	r2, #50	; 0x32
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4914      	ldr	r1, [pc, #80]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001602:	fba1 1202 	umull	r1, r2, r1, r2
 8001606:	0952      	lsrs	r2, r2, #5
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
 800160a:	e01d      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_3):drv8825->timer->Instance->CCR3 = (50*drv8825->timer->Init.Period)/100;break;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2232      	movs	r2, #50	; 0x32
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <DRV8825_setFrequency+0x13c>)
 8001620:	fba1 1202 	umull	r1, r2, r1, r2
 8001624:	0952      	lsrs	r2, r2, #5
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c
 8001628:	e00e      	b.n	8001648 <DRV8825_setFrequency+0x130>
	case(TIM_CHANNEL_4):drv8825->timer->Instance->CCR4 = (50*drv8825->timer->Init.Period)/100;break;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2232      	movs	r2, #50	; 0x32
 8001632:	fb02 f203 	mul.w	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4905      	ldr	r1, [pc, #20]	; (8001654 <DRV8825_setFrequency+0x13c>)
 800163e:	fba1 1202 	umull	r1, r2, r1, r2
 8001642:	0952      	lsrs	r2, r2, #5
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	bf00      	nop
	}
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	000f4240 	.word	0x000f4240
 8001654:	51eb851f 	.word	0x51eb851f

08001658 <initUltrasons>:
				//.Trigger_GPIO_Port = GPIOB, .Trigger_GPIO_Pin = GPIO_PIN_12,
				.Echo_GPIO_Port = GPIOB, .Echo_GPIO_Pin = GPIO_PIN_13
		}
};

uint8_t initUltrasons(void){
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
	save_cpt_rising = 0;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <initUltrasons+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	801a      	strh	r2, [r3, #0]
	cpt_us_global = 0;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <initUltrasons+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]
	indexUS = 0;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <initUltrasons+0x54>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	stepUS = STEP_RESET;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <initUltrasons+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	e008      	b.n	800168e <initUltrasons+0x36>
		distUS[i] = 999;
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <initUltrasons+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <initUltrasons+0x60>)
 8001686:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3301      	adds	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b03      	cmp	r3, #3
 8001692:	ddf3      	ble.n	800167c <initUltrasons+0x24>
	}

	return 0;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000530 	.word	0x20000530
 80016a8:	20000528 	.word	0x20000528
 80016ac:	2000051c 	.word	0x2000051c
 80016b0:	200004e8 	.word	0x200004e8
 80016b4:	200004d8 	.word	0x200004d8
 80016b8:	4479c000 	.word	0x4479c000

080016bc <actionneursUpdate>:
#include "actionneurs.h"

void actionneursUpdate(CONSIGNE strategie){
 80016bc:	b084      	sub	sp, #16
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	f107 0c10 	add.w	ip, r7, #16
 80016c8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Bras
	if(strategie.bras == FALSE){
 80016cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <actionneursUpdate+0x1e>
		raiseBras(&bras);
 80016d2:	481e      	ldr	r0, [pc, #120]	; (800174c <actionneursUpdate+0x90>)
 80016d4:	f000 f92a 	bl	800192c <raiseBras>
 80016d8:	e005      	b.n	80016e6 <actionneursUpdate+0x2a>
	}
	else if (strategie.bras == TRUE){
 80016da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d102      	bne.n	80016e6 <actionneursUpdate+0x2a>
		deployBras(&bras);
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <actionneursUpdate+0x90>)
 80016e2:	f000 f931 	bl	8001948 <deployBras>
	}

	// Pinces
	for(int i=0; i<NB_AX12_BRAS; i++){
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	e023      	b.n	8001734 <actionneursUpdate+0x78>
		if(strategie.pinces[i] == FALSE){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3304      	adds	r3, #4
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	f107 0210 	add.w	r2, r7, #16
 80016f6:	4413      	add	r3, r2
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <actionneursUpdate+0x52>
			releasObject(&pinces[i]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <actionneursUpdate+0x94>)
 8001704:	4413      	add	r3, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f88d 	bl	8001826 <releasObject>
 800170c:	e00f      	b.n	800172e <actionneursUpdate+0x72>
		}
		else if (strategie.pinces[i] == TRUE){
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f107 0210 	add.w	r2, r7, #16
 8001718:	4413      	add	r3, r2
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <actionneursUpdate+0x72>
			catchObject(&pinces[i]);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <actionneursUpdate+0x94>)
 8001726:	4413      	add	r3, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f86f 	bl	800180c <catchObject>
	for(int i=0; i<NB_AX12_BRAS; i++){
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b03      	cmp	r3, #3
 8001738:	ddd8      	ble.n	80016ec <actionneursUpdate+0x30>
		}
	}

}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001746:	b004      	add	sp, #16
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000534 	.word	0x20000534
 8001750:	20000544 	.word	0x20000544

08001754 <initPinces>:

/* Pinces */

uint8_t id_pinces[4] = {3,7,1,2}; // 1,2,3,7
void initPinces(){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e03f      	b.n	80017e0 <initPinces+0x8c>
		AX12_Init(&pinces[i],&huart3,id_pinces[i],BR_250K);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <initPinces+0xa0>)
 8001766:	1898      	adds	r0, r3, r2
 8001768:	4a23      	ldr	r2, [pc, #140]	; (80017f8 <initPinces+0xa4>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	2307      	movs	r3, #7
 8001772:	4922      	ldr	r1, [pc, #136]	; (80017fc <initPinces+0xa8>)
 8001774:	f7ff fc24 	bl	8000fc0 <AX12_Init>
		AX12_setMaxTorque(&pinces[i],100);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <initPinces+0xa0>)
 800177e:	4413      	add	r3, r2
 8001780:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001800 <initPinces+0xac>
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fc73 	bl	8001070 <AX12_setMaxTorque>
		AX12_setRangeAngle(&pinces[i], ANGLE_PINCE_CATCH,ANGLE_STARTUP);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <initPinces+0xa0>)
 8001790:	4413      	add	r3, r2
 8001792:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001804 <initPinces+0xb0>
 8001796:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fc2c 	bl	8000ff8 <AX12_setRangeAngle>
		AX12_setMovingSpeed(&pinces[i], 80);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <initPinces+0xa0>)
 80017a6:	4413      	add	r3, r2
 80017a8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001808 <initPinces+0xb4>
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fcc7 	bl	8001140 <AX12_setMovingSpeed>
		AX12_TorqueE_D(&pinces[i],TRUE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <initPinces+0xa0>)
 80017b8:	4413      	add	r3, r2
 80017ba:	2101      	movs	r1, #1
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fc83 	bl	80010c8 <AX12_TorqueE_D>
		HAL_Delay(250);
 80017c2:	20fa      	movs	r0, #250	; 0xfa
 80017c4:	f002 fd7c 	bl	80042c0 <HAL_Delay>
		AX12_setPosition(&pinces[i], ANGLE_STARTUP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <initPinces+0xa0>)
 80017ce:	4413      	add	r3, r2
 80017d0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001804 <initPinces+0xb0>
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc87 	bl	80010e8 <AX12_setPosition>
	for(int i = 0; i < NB_AX12_BRAS ; i++){
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3301      	adds	r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	ddbc      	ble.n	8001760 <initPinces+0xc>
	}
	HAL_Delay(250);
 80017e6:	20fa      	movs	r0, #250	; 0xfa
 80017e8:	f002 fd6a 	bl	80042c0 <HAL_Delay>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000544 	.word	0x20000544
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000898 	.word	0x20000898
 8001800:	42c80000 	.word	0x42c80000
 8001804:	42dc0000 	.word	0x42dc0000
 8001808:	42a00000 	.word	0x42a00000

0800180c <catchObject>:

void catchObject(AX12 *ax12){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	AX12_setPosition(ax12, ANGLE_PINCE_CATCH);
 8001814:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fc65 	bl	80010e8 <AX12_setPosition>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <releasObject>:
void releasObject(AX12* ax12){
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	AX12_setPosition(ax12, ANGLE_PINCE_RELEASE);
 800182e:	eeb3 0a06 	vmov.f32	s0, #54	; 0x41b00000  22.0
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fc58 	bl	80010e8 <AX12_setPosition>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <initFlag>:

/* Pavillons */

void initFlag(){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	AX12_Init(&flag,&huart3,9,BR_250K); // 9
 8001844:	2307      	movs	r3, #7
 8001846:	2209      	movs	r2, #9
 8001848:	4912      	ldr	r1, [pc, #72]	; (8001894 <initFlag+0x54>)
 800184a:	4813      	ldr	r0, [pc, #76]	; (8001898 <initFlag+0x58>)
 800184c:	f7ff fbb8 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&flag,100);
 8001850:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800189c <initFlag+0x5c>
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <initFlag+0x58>)
 8001856:	f7ff fc0b 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&flag, ANGLE_FLAG_DEPLOY,ANGLE_FLAG_REPOS);
 800185a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80018a0 <initFlag+0x60>
 800185e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <initFlag+0x58>)
 8001864:	f7ff fbc8 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&flag, 80);
 8001868:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80018a4 <initFlag+0x64>
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <initFlag+0x58>)
 800186e:	f7ff fc67 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&flag,TRUE);
 8001872:	2101      	movs	r1, #1
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <initFlag+0x58>)
 8001876:	f7ff fc27 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 800187a:	20fa      	movs	r0, #250	; 0xfa
 800187c:	f002 fd20 	bl	80042c0 <HAL_Delay>
	AX12_setPosition(&flag, ANGLE_FLAG_REPOS);
 8001880:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80018a0 <initFlag+0x60>
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <initFlag+0x58>)
 8001886:	f7ff fc2f 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800188a:	20fa      	movs	r0, #250	; 0xfa
 800188c:	f002 fd18 	bl	80042c0 <HAL_Delay>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000898 	.word	0x20000898
 8001898:	2000053c 	.word	0x2000053c
 800189c:	42c80000 	.word	0x42c80000
 80018a0:	42c00000 	.word	0x42c00000
 80018a4:	42a00000 	.word	0x42a00000

080018a8 <raiseFlag>:

void raiseFlag(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
 80018ac:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <raiseFlag+0x14>)
 80018b2:	f7ff fc19 	bl	80010e8 <AX12_setPosition>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000053c 	.word	0x2000053c

080018c0 <initBras>:
	AX12_setPosition(&flag, ANGLE_FLAG_DEPLOY);
}

/* Bras */

void initBras(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	AX12_Init(&bras,&huart3,4,BR_250K);
 80018c4:	2307      	movs	r3, #7
 80018c6:	2204      	movs	r2, #4
 80018c8:	4912      	ldr	r1, [pc, #72]	; (8001914 <initBras+0x54>)
 80018ca:	4813      	ldr	r0, [pc, #76]	; (8001918 <initBras+0x58>)
 80018cc:	f7ff fb78 	bl	8000fc0 <AX12_Init>
	AX12_setMaxTorque(&bras,100);
 80018d0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800191c <initBras+0x5c>
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <initBras+0x58>)
 80018d6:	f7ff fbcb 	bl	8001070 <AX12_setMaxTorque>
	AX12_setRangeAngle(&bras, 0,ANGLE_STARTUP);
 80018da:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001920 <initBras+0x60>
 80018de:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001924 <initBras+0x64>
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <initBras+0x58>)
 80018e4:	f7ff fb88 	bl	8000ff8 <AX12_setRangeAngle>
	AX12_setMovingSpeed(&bras, 80);
 80018e8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001928 <initBras+0x68>
 80018ec:	480a      	ldr	r0, [pc, #40]	; (8001918 <initBras+0x58>)
 80018ee:	f7ff fc27 	bl	8001140 <AX12_setMovingSpeed>
	AX12_TorqueE_D(&bras,TRUE);
 80018f2:	2101      	movs	r1, #1
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <initBras+0x58>)
 80018f6:	f7ff fbe7 	bl	80010c8 <AX12_TorqueE_D>
	HAL_Delay(250);
 80018fa:	20fa      	movs	r0, #250	; 0xfa
 80018fc:	f002 fce0 	bl	80042c0 <HAL_Delay>
	AX12_setPosition(&bras, ANGLE_STARTUP);
 8001900:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001920 <initBras+0x60>
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <initBras+0x58>)
 8001906:	f7ff fbef 	bl	80010e8 <AX12_setPosition>
	HAL_Delay(250);
 800190a:	20fa      	movs	r0, #250	; 0xfa
 800190c:	f002 fcd8 	bl	80042c0 <HAL_Delay>
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000898 	.word	0x20000898
 8001918:	20000534 	.word	0x20000534
 800191c:	42c80000 	.word	0x42c80000
 8001920:	42dc0000 	.word	0x42dc0000
 8001924:	00000000 	.word	0x00000000
 8001928:	42a00000 	.word	0x42a00000

0800192c <raiseBras>:

void raiseBras(){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	AX12_setPosition(&bras, ANGLE_BRAS_RAISE);
 8001930:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001940 <raiseBras+0x14>
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <raiseBras+0x18>)
 8001936:	f7ff fbd7 	bl	80010e8 <AX12_setPosition>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	42dc0000 	.word	0x42dc0000
 8001944:	20000534 	.word	0x20000534

08001948 <deployBras>:

void deployBras(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	AX12_setPosition(&bras, ANGLE_BRAS_DEPLOY);
 800194c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <deployBras+0x14>)
 8001952:	f7ff fbc9 	bl	80010e8 <AX12_setPosition>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000534 	.word	0x20000534

08001960 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <MX_ADC1_Init+0x9c>)
 8001976:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <MX_ADC1_Init+0x98>)
 800197a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <MX_ADC1_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_ADC1_Init+0x98>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <MX_ADC1_Init+0xa0>)
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019bc:	2201      	movs	r2, #1
 80019be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019c2:	f002 fca1 	bl	8004308 <HAL_ADC_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019cc:	f001 f965 	bl	8002c9a <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019d0:	2304      	movs	r3, #4
 80019d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_ADC1_Init+0x98>)
 80019e2:	f002 fe3f 	bl	8004664 <HAL_ADC_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019ec:	f001 f955 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000568 	.word	0x20000568
 80019fc:	40012000 	.word	0x40012000
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_ADC_MspInit+0x7c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d127      	bne.n	8001a76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_ADC_MspInit+0x80>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <HAL_ADC_MspInit+0x80>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_ADC_MspInit+0x80>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_ADC_MspInit+0x80>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <HAL_ADC_MspInit+0x80>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_ADC_MspInit+0x80>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Tirette_Alternative_Pin;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Tirette_Alternative_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <HAL_ADC_MspInit+0x84>)
 8001a72:	f003 f9c9 	bl	8004e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40012000 	.word	0x40012000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000

08001a8c <toZeroOne>:
/**
 * Borne une valeur donnée dans [0, 1].
 * @param x La valeur à borner.
 * @return Si possible x, 0 ou 1 sinon.
 */
double toZeroOne(double x) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	ed87 0b00 	vstr	d0, [r7]
	if (x < 0) return 0;
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aa2:	f7ff f83b 	bl	8000b1c <__aeabi_dcmplt>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <toZeroOne+0x2a>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e00f      	b.n	8001ad6 <toZeroOne+0x4a>
	if (x > 1) return 1;
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <toZeroOne+0x5c>)
 8001abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ac0:	f7ff f84a 	bl	8000b58 <__aeabi_dcmpgt>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <toZeroOne+0x46>
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <toZeroOne+0x5c>)
 8001ad0:	e001      	b.n	8001ad6 <toZeroOne+0x4a>
	return x;
 8001ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ad6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ada:	eeb0 0a47 	vmov.f32	s0, s14
 8001ade:	eef0 0a67 	vmov.f32	s1, s15
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	3ff00000 	.word	0x3ff00000
 8001aec:	00000000 	.word	0x00000000

08001af0 <toZeroTwoPi>:
/**
 * Ramène un angle donné vers l'intervalle [0, 2PI].
 * @param angle L'angle.
 * @return L'angle ramené à [0, 2PI].
 */
double toZeroTwoPi(double angle) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0b00 	vstr	d0, [r7]
    return fmod(fmod(angle, M_TWOPI) + M_TWOPI, M_TWOPI);
 8001afa:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001b48 <toZeroTwoPi+0x58>
 8001afe:	ed97 0b00 	vldr	d0, [r7]
 8001b02:	f008 ff7f 	bl	800aa04 <fmod>
 8001b06:	ec51 0b10 	vmov	r0, r1, d0
 8001b0a:	a30f      	add	r3, pc, #60	; (adr r3, 8001b48 <toZeroTwoPi+0x58>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fbdc 	bl	80002cc <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	ec43 2b17 	vmov	d7, r2, r3
 8001b1c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8001b48 <toZeroTwoPi+0x58>
 8001b20:	eeb0 0a47 	vmov.f32	s0, s14
 8001b24:	eef0 0a67 	vmov.f32	s1, s15
 8001b28:	f008 ff6c 	bl	800aa04 <fmod>
 8001b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b30:	eef0 7a60 	vmov.f32	s15, s1
}
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	eef0 0a67 	vmov.f32	s1, s15
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	f3af 8000 	nop.w
 8001b48:	54442d18 	.word	0x54442d18
 8001b4c:	401921fb 	.word	0x401921fb

08001b50 <optimalAngle>:
/**
 * Permet de calculer la plus petite rotation à effectuer pour une orientation donnée.
 * @param angle L'orientation voulue.
 * @return L'angle ramené à [-PI, PI].
 */
double optimalAngle(double angle) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0b00 	vstr	d0, [r7]
    return toZeroTwoPi(angle + M_PI) - M_PI;
 8001b5a:	a311      	add	r3, pc, #68	; (adr r3, 8001ba0 <optimalAngle+0x50>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b64:	f7fe fbb2 	bl	80002cc <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	ec43 2b17 	vmov	d7, r2, r3
 8001b70:	eeb0 0a47 	vmov.f32	s0, s14
 8001b74:	eef0 0a67 	vmov.f32	s1, s15
 8001b78:	f7ff ffba 	bl	8001af0 <toZeroTwoPi>
 8001b7c:	ec51 0b10 	vmov	r0, r1, d0
 8001b80:	a307      	add	r3, pc, #28	; (adr r3, 8001ba0 <optimalAngle+0x50>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fb9f 	bl	80002c8 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b92:	eeb0 0a47 	vmov.f32	s0, s14
 8001b96:	eef0 0a67 	vmov.f32	s1, s15
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	54442d18 	.word	0x54442d18
 8001ba4:	400921fb 	.word	0x400921fb

08001ba8 <speedCurve1>:
/**
 * Courbe de vitesse parabolique.
 * @param progress Un flottant entre 0 et 1 qui indique où en est le mouvement.
 * @return Une vitesse normalisée entre 0 et 1.
 */
double speedCurve1(double progress) {
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0b00 	vstr	d0, [r7]
    double speed = -4*progress*(progress-1);
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <speedCurve1+0x78>)
 8001bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bbc:	f7fe fd3c 	bl	8000638 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <speedCurve1+0x7c>)
 8001bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd2:	f7fe fb79 	bl	80002c8 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fd2b 	bl	8000638 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return (speed<0)?0:speed;
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf6:	f7fe ff91 	bl	8000b1c <__aeabi_dcmplt>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <speedCurve1+0x62>
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e001      	b.n	8001c0e <speedCurve1+0x66>
 8001c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c12:	eeb0 0a47 	vmov.f32	s0, s14
 8001c16:	eef0 0a67 	vmov.f32	s1, s15
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c20:	c0100000 	.word	0xc0100000
 8001c24:	3ff00000 	.word	0x3ff00000

08001c28 <ASSERV_update2>:
/**
 * Cette fonction est appelée à intervalles réguliers pour piloter le robot.
 * @param point Le point visé.
 * @param point Le point où le robot commence son déplacement.
 */
void ASSERV_update2(CONSIGNE point, CONSIGNE previous) {
 8001c28:	b084      	sub	sp, #16
 8001c2a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c2e:	ed2d 8b02 	vpush	{d8}
 8001c32:	b0be      	sub	sp, #248	; 0xf8
 8001c34:	af08      	add	r7, sp, #32
 8001c36:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (indexStrategie >= nb_points || !match_started) {
 8001c3e:	4bca      	ldr	r3, [pc, #808]	; (8001f68 <ASSERV_update2+0x340>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4bca      	ldr	r3, [pc, #808]	; (8001f6c <ASSERV_update2+0x344>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	da03      	bge.n	8001c52 <ASSERV_update2+0x2a>
 8001c4a:	4bc9      	ldr	r3, [pc, #804]	; (8001f70 <ASSERV_update2+0x348>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <ASSERV_update2+0x3a>
    	//stopMoteurs();
    	setMotors(0, 0);
 8001c52:	ed9f 1bbb 	vldr	d1, [pc, #748]	; 8001f40 <ASSERV_update2+0x318>
 8001c56:	ed9f 0bba 	vldr	d0, [pc, #744]	; 8001f40 <ASSERV_update2+0x318>
 8001c5a:	f001 f877 	bl	8002d4c <setMotors>
 8001c5e:	f000 bc11 	b.w	8002484 <ASSERV_update2+0x85c>
    	return;
    }

    ODO_odometrie();
 8001c62:	f001 f925 	bl	8002eb0 <ODO_odometrie>

    // calculs préliminaires
    double pointDistance = sqrt(pow(point.x - g_x, 2) + pow(point.y - g_y, 2));
 8001c66:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001c6a:	4bc2      	ldr	r3, [pc, #776]	; (8001f74 <ASSERV_update2+0x34c>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fb2a 	bl	80002c8 <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	ec43 2b17 	vmov	d7, r2, r3
 8001c7c:	ed9f 1bb2 	vldr	d1, [pc, #712]	; 8001f48 <ASSERV_update2+0x320>
 8001c80:	eeb0 0a47 	vmov.f32	s0, s14
 8001c84:	eef0 0a67 	vmov.f32	s1, s15
 8001c88:	f008 fef8 	bl	800aa7c <pow>
 8001c8c:	ec55 4b10 	vmov	r4, r5, d0
 8001c90:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001c94:	4bb8      	ldr	r3, [pc, #736]	; (8001f78 <ASSERV_update2+0x350>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fb15 	bl	80002c8 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ec43 2b17 	vmov	d7, r2, r3
 8001ca6:	ed9f 1ba8 	vldr	d1, [pc, #672]	; 8001f48 <ASSERV_update2+0x320>
 8001caa:	eeb0 0a47 	vmov.f32	s0, s14
 8001cae:	eef0 0a67 	vmov.f32	s1, s15
 8001cb2:	f008 fee3 	bl	800aa7c <pow>
 8001cb6:	ec53 2b10 	vmov	r2, r3, d0
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f7fe fb05 	bl	80002cc <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	ec43 2b17 	vmov	d7, r2, r3
 8001cca:	eeb0 0a47 	vmov.f32	s0, s14
 8001cce:	eef0 0a67 	vmov.f32	s1, s15
 8001cd2:	f008 ff81 	bl	800abd8 <sqrt>
 8001cd6:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0
    double previousDistance = sqrt(pow(previous.x - g_x, 2) + pow(previous.y - g_y, 2));
 8001cda:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8001cde:	4ba5      	ldr	r3, [pc, #660]	; (8001f74 <ASSERV_update2+0x34c>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe faf0 	bl	80002c8 <__aeabi_dsub>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
 8001cf0:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8001f48 <ASSERV_update2+0x320>
 8001cf4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf8:	eef0 0a67 	vmov.f32	s1, s15
 8001cfc:	f008 febe 	bl	800aa7c <pow>
 8001d00:	ec55 4b10 	vmov	r4, r5, d0
 8001d04:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <ASSERV_update2+0x350>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fadb 	bl	80002c8 <__aeabi_dsub>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	ec43 2b17 	vmov	d7, r2, r3
 8001d1a:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8001f48 <ASSERV_update2+0x320>
 8001d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	f008 fea9 	bl	800aa7c <pow>
 8001d2a:	ec53 2b10 	vmov	r2, r3, d0
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe facb 	bl	80002cc <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	ec43 2b17 	vmov	d7, r2, r3
 8001d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d42:	eef0 0a67 	vmov.f32	s1, s15
 8001d46:	f008 ff47 	bl	800abd8 <sqrt>
 8001d4a:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
    double segmentLength = sqrt(pow(point.x - previous.x, 2) + pow(point.y - previous.y, 2));
 8001d4e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001d52:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001d56:	f7fe fab7 	bl	80002c8 <__aeabi_dsub>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	ec43 2b17 	vmov	d7, r2, r3
 8001d62:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001f48 <ASSERV_update2+0x320>
 8001d66:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6a:	eef0 0a67 	vmov.f32	s1, s15
 8001d6e:	f008 fe85 	bl	800aa7c <pow>
 8001d72:	ec55 4b10 	vmov	r4, r5, d0
 8001d76:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001d7a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001d7e:	f7fe faa3 	bl	80002c8 <__aeabi_dsub>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b17 	vmov	d7, r2, r3
 8001d8a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8001f48 <ASSERV_update2+0x320>
 8001d8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d92:	eef0 0a67 	vmov.f32	s1, s15
 8001d96:	f008 fe71 	bl	800aa7c <pow>
 8001d9a:	ec53 2b10 	vmov	r2, r3, d0
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fa93 	bl	80002cc <__adddf3>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ec43 2b17 	vmov	d7, r2, r3
 8001dae:	eeb0 0a47 	vmov.f32	s0, s14
 8001db2:	eef0 0a67 	vmov.f32	s1, s15
 8001db6:	f008 ff0f 	bl	800abd8 <sqrt>
 8001dba:	ed87 0b28 	vstr	d0, [r7, #160]	; 0xa0
    double moveProgress = toZeroOne(previousDistance/segmentLength);
 8001dbe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001dc2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001dc6:	f7fe fd61 	bl	800088c <__aeabi_ddiv>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	ec43 2b17 	vmov	d7, r2, r3
 8001dd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd6:	eef0 0a67 	vmov.f32	s1, s15
 8001dda:	f7ff fe57 	bl	8001a8c <toZeroOne>
 8001dde:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0
    if (segmentLength == 0) moveProgress = 1; // pour éviter NaN en cas de divison par zéro
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001dee:	f7fe fe8b 	bl	8000b08 <__aeabi_dcmpeq>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <ASSERV_update2+0x1da>
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <ASSERV_update2+0x354>)
 8001dfe:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

    // point à viser (je peux t'expliquer IRL, en commentaire ça passe pas mdr)
    double t = 1.1 - (1 - moveProgress)*0.6;
 8001e02:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	495c      	ldr	r1, [pc, #368]	; (8001f7c <ASSERV_update2+0x354>)
 8001e0c:	f7fe fa5c 	bl	80002c8 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	a34d      	add	r3, pc, #308	; (adr r3, 8001f50 <ASSERV_update2+0x328>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fc0b 	bl	8000638 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	a14c      	add	r1, pc, #304	; (adr r1, 8001f58 <ASSERV_update2+0x330>)
 8001e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e2c:	f7fe fa4c 	bl	80002c8 <__aeabi_dsub>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    CONSIGNE subAimPoint = {
 8001e38:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001e3c:	2330      	movs	r3, #48	; 0x30
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2100      	movs	r1, #0
 8001e42:	f006 f84f 	bl	8007ee4 <memset>
    	x: (1-t)*previous.x + t*point.x,
 8001e46:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	494b      	ldr	r1, [pc, #300]	; (8001f7c <ASSERV_update2+0x354>)
 8001e50:	f7fe fa3a 	bl	80002c8 <__aeabi_dsub>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001e60:	f7fe fbea 	bl	8000638 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001e70:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e74:	f7fe fbe0 	bl	8000638 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fa24 	bl	80002cc <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
    CONSIGNE subAimPoint = {
 8001e88:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		y: (1-t)*previous.y + t*point.y
 8001e8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	4939      	ldr	r1, [pc, #228]	; (8001f7c <ASSERV_update2+0x354>)
 8001e96:	f7fe fa17 	bl	80002c8 <__aeabi_dsub>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001ea6:	f7fe fbc7 	bl	8000638 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4614      	mov	r4, r2
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001eb6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001eba:	f7fe fbbd 	bl	8000638 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f7fe fa01 	bl	80002cc <__adddf3>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
    CONSIGNE subAimPoint = {
 8001ece:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    };

    double pointDirection = atan2(subAimPoint.y - g_y, subAimPoint.x - g_x);
 8001ed2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <ASSERV_update2+0x350>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe f9f4 	bl	80002c8 <__aeabi_dsub>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	ec43 2b18 	vmov	d8, r2, r3
 8001ee8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <ASSERV_update2+0x34c>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe f9e9 	bl	80002c8 <__aeabi_dsub>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	ec43 2b17 	vmov	d7, r2, r3
 8001efe:	eeb0 1a47 	vmov.f32	s2, s14
 8001f02:	eef0 1a67 	vmov.f32	s3, s15
 8001f06:	eeb0 0a48 	vmov.f32	s0, s16
 8001f0a:	eef0 0a68 	vmov.f32	s1, s17
 8001f0e:	f008 fd77 	bl	800aa00 <atan2>
 8001f12:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90
    double angleError = optimalAngle( pointDirection - g_angle - ((point.dir==BACKWARD)?M_PI:0) );
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <ASSERV_update2+0x358>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001f20:	f7fe f9d2 	bl	80002c8 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d127      	bne.n	8001f84 <ASSERV_update2+0x35c>
 8001f34:	a30a      	add	r3, pc, #40	; (adr r3, 8001f60 <ASSERV_update2+0x338>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	e027      	b.n	8001f8c <ASSERV_update2+0x364>
 8001f3c:	f3af 8000 	nop.w
	...
 8001f4c:	40000000 	.word	0x40000000
 8001f50:	33333333 	.word	0x33333333
 8001f54:	3fe33333 	.word	0x3fe33333
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3ff19999 	.word	0x3ff19999
 8001f60:	54442d18 	.word	0x54442d18
 8001f64:	400921fb 	.word	0x400921fb
 8001f68:	200005f8 	.word	0x200005f8
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	2000046c 	.word	0x2000046c
 8001f74:	200005b0 	.word	0x200005b0
 8001f78:	20000600 	.word	0x20000600
 8001f7c:	3ff00000 	.word	0x3ff00000
 8001f80:	200005b8 	.word	0x200005b8
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f7fe f99c 	bl	80002c8 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	ec43 2b17 	vmov	d7, r2, r3
 8001f98:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9c:	eef0 0a67 	vmov.f32	s1, s15
 8001fa0:	f7ff fdd6 	bl	8001b50 <optimalAngle>
 8001fa4:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
    if (isnan(initialAngleError)) initialAngleError = angleError; // analogue à segmentLength
 8001fa8:	4bbb      	ldr	r3, [pc, #748]	; (8002298 <ASSERV_update2+0x670>)
 8001faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	f7fe fddb 	bl	8000b6c <__aeabi_dcmpun>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <ASSERV_update2+0x39e>
 8001fbc:	49b6      	ldr	r1, [pc, #728]	; (8002298 <ASSERV_update2+0x670>)
 8001fbe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fc2:	e9c1 2300 	strd	r2, r3, [r1]
    double rotateProgress = toZeroOne(1 - angleError/initialAngleError);
 8001fc6:	4bb4      	ldr	r3, [pc, #720]	; (8002298 <ASSERV_update2+0x670>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001fd0:	f7fe fc5c 	bl	800088c <__aeabi_ddiv>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	f04f 0000 	mov.w	r0, #0
 8001fdc:	49af      	ldr	r1, [pc, #700]	; (800229c <ASSERV_update2+0x674>)
 8001fde:	f7fe f973 	bl	80002c8 <__aeabi_dsub>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ec43 2b17 	vmov	d7, r2, r3
 8001fea:	eeb0 0a47 	vmov.f32	s0, s14
 8001fee:	eef0 0a67 	vmov.f32	s1, s15
 8001ff2:	f7ff fd4b 	bl	8001a8c <toZeroOne>
 8001ff6:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
    if (fabs(initialAngleError) < 0.001) rotateProgress = 1; // pour éviter NaN en cas de divison par zéro
 8001ffa:	4ba7      	ldr	r3, [pc, #668]	; (8002298 <ASSERV_update2+0x670>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	4690      	mov	r8, r2
 8002002:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002006:	a39a      	add	r3, pc, #616	; (adr r3, 8002270 <ASSERV_update2+0x648>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe fd84 	bl	8000b1c <__aeabi_dcmplt>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <ASSERV_update2+0x3fc>
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b9f      	ldr	r3, [pc, #636]	; (800229c <ASSERV_update2+0x674>)
 8002020:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

    // si le robot est très mal orienté, lancer la séquence de rotation pure
    if (fabs(angleError) > VALID_ANGLE*10)
 8002024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002028:	64bb      	str	r3, [r7, #72]	; 0x48
 800202a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800202e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002034:	a390      	add	r3, pc, #576	; (adr r3, 8002278 <ASSERV_update2+0x650>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800203e:	f7fe fd8b 	bl	8000b58 <__aeabi_dcmpgt>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <ASSERV_update2+0x426>
    	isRotating = 1;
 8002048:	4a95      	ldr	r2, [pc, #596]	; (80022a0 <ASSERV_update2+0x678>)
 800204a:	2301      	movs	r3, #1
 800204c:	6013      	str	r3, [r2, #0]

    // si le robot est bien orienté, arreter la séquence de rotation pure
    if (fabs(angleError) < VALID_ANGLE)
 800204e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
 8002054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205c:	647b      	str	r3, [r7, #68]	; 0x44
 800205e:	a388      	add	r3, pc, #544	; (adr r3, 8002280 <ASSERV_update2+0x658>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002068:	f7fe fd58 	bl	8000b1c <__aeabi_dcmplt>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <ASSERV_update2+0x450>
    	isRotating = 0;
 8002072:	4a8b      	ldr	r2, [pc, #556]	; (80022a0 <ASSERV_update2+0x678>)
 8002074:	2300      	movs	r3, #0
 8002076:	6013      	str	r3, [r2, #0]

    // (le cas entre VALID_ANGLE et VALID_ANGLE*10 est géré par l'asservissement
    // en distance qui corrige aussi l'angle en permanance)

    if (isRotating) { // le robot est mal orienté
 8002078:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <ASSERV_update2+0x678>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d078      	beq.n	8002172 <ASSERV_update2+0x54a>
    	double spin = VMAX_ROTATION*speedCurve1(rotateProgress)/2;
 8002080:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8002084:	f7ff fd90 	bl	8001ba8 <speedCurve1>
 8002088:	ec51 0b10 	vmov	r0, r1, d0
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <ASSERV_update2+0x67c>)
 8002092:	f7fe fad1 	bl	8000638 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a6:	f7fe fbf1 	bl	800088c <__aeabi_ddiv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	// aller plus vite sur les rotations longues
    	spin *= fabs(initialAngleError)/M_PI;
 80020b2:	4b79      	ldr	r3, [pc, #484]	; (8002298 <ASSERV_update2+0x670>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	4692      	mov	sl, r2
 80020ba:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80020be:	a372      	add	r3, pc, #456	; (adr r3, 8002288 <ASSERV_update2+0x660>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	4650      	mov	r0, sl
 80020c6:	4659      	mov	r1, fp
 80020c8:	f7fe fbe0 	bl	800088c <__aeabi_ddiv>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	// imposer une vitesse min au début de la rotation
    	spin += VMIN_ROTATION*(1-rotateProgress);
 80020e0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80020e4:	f04f 0000 	mov.w	r0, #0
 80020e8:	496c      	ldr	r1, [pc, #432]	; (800229c <ASSERV_update2+0x674>)
 80020ea:	f7fe f8ed 	bl	80002c8 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	a360      	add	r3, pc, #384	; (adr r3, 8002278 <ASSERV_update2+0x650>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa9c 	bl	8000638 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002108:	f7fe f8e0 	bl	80002cc <__adddf3>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	// imposer un sens de rotation
    	spin *= -angleError/fabs(angleError);
 8002114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
 800211a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800211e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
 800212a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800212e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
 8002134:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002138:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800213c:	f7fe fba6 	bl	800088c <__aeabi_ddiv>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002148:	f7fe fa76 	bl	8000638 <__aeabi_dmul>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    	setMotors(-spin, spin);
 8002154:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
 800215a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800215e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002164:	ed97 1b20 	vldr	d1, [r7, #128]	; 0x80
 8002168:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800216c:	f000 fdee 	bl	8002d4c <setMotors>
 8002170:	e188      	b.n	8002484 <ASSERV_update2+0x85c>
    } else if (moveProgress < 1) { // le robot est loin
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <ASSERV_update2+0x674>)
 8002178:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800217c:	f7fe fcce 	bl	8000b1c <__aeabi_dcmplt>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8163 	beq.w	800244e <ASSERV_update2+0x826>
    	double speed = VMAX_RECT*speedCurve1(moveProgress);
 8002188:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800218c:	f7ff fd0c 	bl	8001ba8 <speedCurve1>
 8002190:	ec51 0b10 	vmov	r0, r1, d0
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <ASSERV_update2+0x680>)
 800219a:	f7fe fa4d 	bl	8000638 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// aller plus vite sur les longs segments
    	speed *= toZeroOne(segmentLength/1000);
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b40      	ldr	r3, [pc, #256]	; (80022ac <ASSERV_update2+0x684>)
 80021ac:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80021b0:	f7fe fb6c 	bl	800088c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	ec43 2b17 	vmov	d7, r2, r3
 80021bc:	eeb0 0a47 	vmov.f32	s0, s14
 80021c0:	eef0 0a67 	vmov.f32	s1, s15
 80021c4:	f7ff fc62 	bl	8001a8c <toZeroOne>
 80021c8:	ec53 2b10 	vmov	r2, r3, d0
 80021cc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80021d0:	f7fe fa32 	bl	8000638 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// ralentir si l'angle est mauvais
    	speed *= 1/(1+pow(fabs(angleError/VALID_ANGLE/5), 2));
 80021dc:	a328      	add	r3, pc, #160	; (adr r3, 8002280 <ASSERV_update2+0x658>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80021e6:	f7fe fb51 	bl	800088c <__aeabi_ddiv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <ASSERV_update2+0x67c>)
 80021f8:	f7fe fb48 	bl	800088c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	623a      	str	r2, [r7, #32]
 8002202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002290 <ASSERV_update2+0x668>
 800220c:	ed97 0b08 	vldr	d0, [r7, #32]
 8002210:	f008 fc34 	bl	800aa7c <pow>
 8002214:	ec51 0b10 	vmov	r0, r1, d0
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <ASSERV_update2+0x674>)
 800221e:	f7fe f855 	bl	80002cc <__adddf3>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	f04f 0000 	mov.w	r0, #0
 800222a:	491c      	ldr	r1, [pc, #112]	; (800229c <ASSERV_update2+0x674>)
 800222c:	f7fe fb2e 	bl	800088c <__aeabi_ddiv>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002238:	f7fe f9fe 	bl	8000638 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// imposer une vitesse min
    	speed += VMIN_DISTANCE;
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <ASSERV_update2+0x688>)
 800224a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800224e:	f7fe f83d 	bl	80002cc <__adddf3>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	// imposer le sens
    	speed *= (point.dir==FORWARD)?1:-1;
 800225a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800225e:	2b01      	cmp	r3, #1
 8002260:	d128      	bne.n	80022b4 <ASSERV_update2+0x68c>
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <ASSERV_update2+0x674>)
 8002268:	e027      	b.n	80022ba <ASSERV_update2+0x692>
 800226a:	bf00      	nop
 800226c:	f3af 8000 	nop.w
 8002270:	d2f1a9fc 	.word	0xd2f1a9fc
 8002274:	3f50624d 	.word	0x3f50624d
 8002278:	9999999a 	.word	0x9999999a
 800227c:	3fb99999 	.word	0x3fb99999
 8002280:	47ae147b 	.word	0x47ae147b
 8002284:	3f847ae1 	.word	0x3f847ae1
 8002288:	54442d18 	.word	0x54442d18
 800228c:	400921fb 	.word	0x400921fb
 8002290:	00000000 	.word	0x00000000
 8002294:	40000000 	.word	0x40000000
 8002298:	20000448 	.word	0x20000448
 800229c:	3ff00000 	.word	0x3ff00000
 80022a0:	20000450 	.word	0x20000450
 80022a4:	40140000 	.word	0x40140000
 80022a8:	40240000 	.word	0x40240000
 80022ac:	408f4000 	.word	0x408f4000
 80022b0:	3fe00000 	.word	0x3fe00000
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b7b      	ldr	r3, [pc, #492]	; (80024a8 <ASSERV_update2+0x880>)
 80022ba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80022be:	f7fe f9bb 	bl	8000638 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

    	double spin = VMAX_ROTATION*(speedCurve1(rotateProgress)*fabs(initialAngleError)/M_PI + speedCurve1(moveProgress)*fabs(angleError))/2;
 80022ca:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 80022ce:	f7ff fc6b 	bl	8001ba8 <speedCurve1>
 80022d2:	ec51 0b10 	vmov	r0, r1, d0
 80022d6:	4b75      	ldr	r3, [pc, #468]	; (80024ac <ASSERV_update2+0x884>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	61ba      	str	r2, [r7, #24]
 80022de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e8:	f7fe f9a6 	bl	8000638 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	a368      	add	r3, pc, #416	; (adr r3, 8002498 <ASSERV_update2+0x870>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe fac7 	bl	800088c <__aeabi_ddiv>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4614      	mov	r4, r2
 8002304:	461d      	mov	r5, r3
 8002306:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800230a:	f7ff fc4d 	bl	8001ba8 <speedCurve1>
 800230e:	ec51 0b10 	vmov	r0, r1, d0
 8002312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002326:	f7fe f987 	bl	8000638 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fd ffcb 	bl	80002cc <__adddf3>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <ASSERV_update2+0x888>)
 8002344:	f7fe f978 	bl	8000638 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002358:	f7fe fa98 	bl	800088c <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

    	// imposer une vitesse min au début de la rotation
    	spin += VMIN_ROTATION*(1-rotateProgress);
 8002364:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	4951      	ldr	r1, [pc, #324]	; (80024b4 <ASSERV_update2+0x88c>)
 800236e:	f7fd ffab 	bl	80002c8 <__aeabi_dsub>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	a349      	add	r3, pc, #292	; (adr r3, 80024a0 <ASSERV_update2+0x878>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f95a 	bl	8000638 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800238c:	f7fd ff9e 	bl	80002cc <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

    	// imposer un sens de rotation
    	spin *= -angleError/fabs(angleError);
 8002398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c0:	f7fe fa64 	bl	800088c <__aeabi_ddiv>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80023cc:	f7fe f934 	bl	8000638 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

        if((StopFront == TRUE && point.dir == FORWARD) || (StopBack == TRUE && point.dir == BACKWARD)){
 80023d8:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <ASSERV_update2+0x890>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d103      	bne.n	80023e8 <ASSERV_update2+0x7c0>
 80023e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d007      	beq.n	80023f8 <ASSERV_update2+0x7d0>
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <ASSERV_update2+0x894>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10f      	bne.n	8002410 <ASSERV_update2+0x7e8>
 80023f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <ASSERV_update2+0x7e8>
        	speed = 0;
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
        	spin = 0;
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
        }

    	setMotors(speed - spin, speed + spin);
 8002410:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002414:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002418:	f7fd ff56 	bl	80002c8 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	ec43 2b18 	vmov	d8, r2, r3
 8002424:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002428:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800242c:	f7fd ff4e 	bl	80002cc <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	ec43 2b17 	vmov	d7, r2, r3
 8002438:	eeb0 1a47 	vmov.f32	s2, s14
 800243c:	eef0 1a67 	vmov.f32	s3, s15
 8002440:	eeb0 0a48 	vmov.f32	s0, s16
 8002444:	eef0 0a68 	vmov.f32	s1, s17
 8002448:	f000 fc80 	bl	8002d4c <setMotors>
 800244c:	e01a      	b.n	8002484 <ASSERV_update2+0x85c>
    } else {
        // le robot est arrivé au point visé
    	actionneursUpdate(point);
 800244e:	466d      	mov	r5, sp
 8002450:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002458:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800245c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002460:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002464:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002466:	f7ff f929 	bl	80016bc <actionneursUpdate>
    	indexStrategie++;
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <ASSERV_update2+0x898>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <ASSERV_update2+0x898>)
 8002472:	6013      	str	r3, [r2, #0]
    	initialAngleError = NAN;
 8002474:	490d      	ldr	r1, [pc, #52]	; (80024ac <ASSERV_update2+0x884>)
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <ASSERV_update2+0x89c>)
 800247c:	e9c1 2300 	strd	r2, r3, [r1]
    	stopMoteurs();
 8002480:	f000 fc44 	bl	8002d0c <stopMoteurs>
    }
}
 8002484:	37d8      	adds	r7, #216	; 0xd8
 8002486:	46bd      	mov	sp, r7
 8002488:	ecbd 8b02 	vpop	{d8}
 800248c:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b004      	add	sp, #16
 8002492:	4770      	bx	lr
 8002494:	f3af 8000 	nop.w
 8002498:	54442d18 	.word	0x54442d18
 800249c:	400921fb 	.word	0x400921fb
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	3fb99999 	.word	0x3fb99999
 80024a8:	bff00000 	.word	0xbff00000
 80024ac:	20000448 	.word	0x20000448
 80024b0:	40140000 	.word	0x40140000
 80024b4:	3ff00000 	.word	0x3ff00000
 80024b8:	20000520 	.word	0x20000520
 80024bc:	2000052c 	.word	0x2000052c
 80024c0:	200005f8 	.word	0x200005f8
 80024c4:	7ff80000 	.word	0x7ff80000

080024c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b56      	ldr	r3, [pc, #344]	; (800263c <MX_GPIO_Init+0x174>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a55      	ldr	r2, [pc, #340]	; (800263c <MX_GPIO_Init+0x174>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <MX_GPIO_Init+0x174>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <MX_GPIO_Init+0x174>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a4e      	ldr	r2, [pc, #312]	; (800263c <MX_GPIO_Init+0x174>)
 8002504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <MX_GPIO_Init+0x174>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <MX_GPIO_Init+0x174>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a47      	ldr	r2, [pc, #284]	; (800263c <MX_GPIO_Init+0x174>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <MX_GPIO_Init+0x174>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <MX_GPIO_Init+0x174>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a40      	ldr	r2, [pc, #256]	; (800263c <MX_GPIO_Init+0x174>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b3e      	ldr	r3, [pc, #248]	; (800263c <MX_GPIO_Init+0x174>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4b3a      	ldr	r3, [pc, #232]	; (800263c <MX_GPIO_Init+0x174>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a39      	ldr	r2, [pc, #228]	; (800263c <MX_GPIO_Init+0x174>)
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <MX_GPIO_Init+0x174>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	f640 0107 	movw	r1, #2055	; 0x807
 8002570:	4833      	ldr	r0, [pc, #204]	; (8002640 <MX_GPIO_Init+0x178>)
 8002572:	f002 fddd 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	2120      	movs	r1, #32
 800257a:	4832      	ldr	r0, [pc, #200]	; (8002644 <MX_GPIO_Init+0x17c>)
 800257c:	f002 fdd8 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	2104      	movs	r1, #4
 8002584:	4830      	ldr	r0, [pc, #192]	; (8002648 <MX_GPIO_Init+0x180>)
 8002586:	f002 fdd3 	bl	8005130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EN_G_Pin|EN_D_Pin|Dir_G_Pin|Dir_D_Pin;
 800258a:	f640 0307 	movw	r3, #2055	; 0x807
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002590:	2301      	movs	r3, #1
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4827      	ldr	r0, [pc, #156]	; (8002640 <MX_GPIO_Init+0x178>)
 80025a4:	f002 fc30 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025a8:	2320      	movs	r3, #32
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4821      	ldr	r0, [pc, #132]	; (8002644 <MX_GPIO_Init+0x17c>)
 80025c0:	f002 fc22 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Echo1_Pin|Echo4_Pin|Echo3_Pin|Echo2_Pin;
 80025c4:	f24e 0302 	movw	r3, #57346	; 0xe002
 80025c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_GPIO_Init+0x184>)
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	481b      	ldr	r0, [pc, #108]	; (8002648 <MX_GPIO_Init+0x180>)
 80025da:	f002 fc15 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80025de:	2304      	movs	r3, #4
 80025e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e2:	2301      	movs	r3, #1
 80025e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	4814      	ldr	r0, [pc, #80]	; (8002648 <MX_GPIO_Init+0x180>)
 80025f6:	f002 fc07 	bl	8004e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tirette_Pin;
 80025fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Tirette_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	480c      	ldr	r0, [pc, #48]	; (8002640 <MX_GPIO_Init+0x178>)
 8002610:	f002 fbfa 	bl	8004e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2007      	movs	r0, #7
 800261a:	f002 fb2c 	bl	8004c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800261e:	2007      	movs	r0, #7
 8002620:	f002 fb45 	bl	8004cae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2100      	movs	r1, #0
 8002628:	2028      	movs	r0, #40	; 0x28
 800262a:	f002 fb24 	bl	8004c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800262e:	2028      	movs	r0, #40	; 0x28
 8002630:	f002 fb3d 	bl	8004cae <HAL_NVIC_EnableIRQ>

}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	40020800 	.word	0x40020800
 8002644:	40020000 	.word	0x40020000
 8002648:	40020400 	.word	0x40020400
 800264c:	10310000 	.word	0x10310000

08002650 <decodeMsgIHM>:
#include "ihm.h"

int decodeMsgIHM(char *trame){
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

	char header = trame[0];
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	73fb      	strb	r3, [r7, #15]

	switch(header){
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b4d      	cmp	r3, #77	; 0x4d
 8002662:	d011      	beq.n	8002688 <decodeMsgIHM+0x38>
 8002664:	2b4d      	cmp	r3, #77	; 0x4d
 8002666:	dc15      	bgt.n	8002694 <decodeMsgIHM+0x44>
 8002668:	2b42      	cmp	r3, #66	; 0x42
 800266a:	d007      	beq.n	800267c <decodeMsgIHM+0x2c>
 800266c:	2b4a      	cmp	r3, #74	; 0x4a
 800266e:	d111      	bne.n	8002694 <decodeMsgIHM+0x44>
		case 'J' :
			port_depart = JAUNE;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <decodeMsgIHM+0x50>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
			initStrategie();
 8002676:	f000 f983 	bl	8002980 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Jaune\r\n");
			#endif
			break;
 800267a:	e00c      	b.n	8002696 <decodeMsgIHM+0x46>

		case 'B' :
			port_depart = BLEU;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <decodeMsgIHM+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
			initStrategie();
 8002682:	f000 f97d 	bl	8002980 <initStrategie>
			#if MODULE_DEBUG == 1
				printf("Changement de depart : Bleu\r\n");
			#endif
			break;
 8002686:	e006      	b.n	8002696 <decodeMsgIHM+0x46>

		case 'M' :
			initStrategie();
 8002688:	f000 f97a 	bl	8002980 <initStrategie>
			//HAL_TIM_Base_Start_IT(&htim2);
			match_started = TRUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <decodeMsgIHM+0x54>)
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
			#if MODULE_DEBUG == 1
				printf("Go!\r\n");
			#endif
			break;
 8002692:	e000      	b.n	8002696 <decodeMsgIHM+0x46>

		default :
			break;
 8002694:	bf00      	nop
	}

	return 0;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000468 	.word	0x20000468
 80026a4:	2000046c 	.word	0x2000046c

080026a8 <getLidarData2>:
	#endif
	*/

}

void getLidarData2(){
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
	char header = lidarRawData[0];
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <getLidarData2+0x40>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]

	#if MODULE_DEBUG == 1 && DEBUG_LIDAR
	//printf("header = %c\r\n", header);
	#endif

	switch(header){
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	2b42      	cmp	r3, #66	; 0x42
 80026b8:	d002      	beq.n	80026c0 <getLidarData2+0x18>
 80026ba:	2b46      	cmp	r3, #70	; 0x46
 80026bc:	d007      	beq.n	80026ce <getLidarData2+0x26>
			StopFront = 1;
			cpt_front = 0;
			break;

		default :
			break;
 80026be:	e00d      	b.n	80026dc <getLidarData2+0x34>
			StopBack = 1;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <getLidarData2+0x44>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
			cpt_back = 0;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <getLidarData2+0x48>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
			break;
 80026cc:	e006      	b.n	80026dc <getLidarData2+0x34>
			StopFront = 1;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <getLidarData2+0x4c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
			cpt_front = 0;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <getLidarData2+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
			break;
 80026da:	bf00      	nop
	}
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	20000494 	.word	0x20000494
 80026ec:	2000052c 	.word	0x2000052c
 80026f0:	20000524 	.word	0x20000524
 80026f4:	20000520 	.word	0x20000520
 80026f8:	200004d4 	.word	0x200004d4
 80026fc:	00000000 	.word	0x00000000

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002706:	f001 fd69 	bl	80041dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270a:	f000 f895 	bl	8002838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800270e:	f7ff fedb 	bl	80024c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002712:	f001 fb4d 	bl	8003db0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002716:	f000 fea1 	bl	800345c <MX_TIM1_Init>
  MX_TIM8_Init();
 800271a:	f001 f851 	bl	80037c0 <MX_TIM8_Init>
  MX_TIM11_Init();
 800271e:	f001 f8ef 	bl	8003900 <MX_TIM11_Init>
  MX_UART4_Init();
 8002722:	f001 fac7 	bl	8003cb4 <MX_UART4_Init>
  MX_UART5_Init();
 8002726:	f001 faef 	bl	8003d08 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800272a:	f001 fb6b 	bl	8003e04 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800272e:	f000 ff3b 	bl	80035a8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002732:	f001 f80f 	bl	8003754 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002736:	f001 fb11 	bl	8003d5c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800273a:	f000 fee7 	bl	800350c <MX_TIM2_Init>
  MX_ADC1_Init();
 800273e:	f7ff f90f 	bl	8001960 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002742:	f000 ffd1 	bl	80036e8 <MX_TIM6_Init>
  MX_TIM4_Init();
 8002746:	f000 ff83 	bl	8003650 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  initSerials();
 800274a:	f000 f909 	bl	8002960 <initSerials>

  port_depart = BLEU;
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <main+0x110>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
  initStrategie();
 8002754:	f000 f914 	bl	8002980 <initStrategie>

  initMoteurs();
 8002758:	f000 faa6 	bl	8002ca8 <initMoteurs>
  initPinces();
 800275c:	f7fe fffa 	bl	8001754 <initPinces>
  initBras();
 8002760:	f7ff f8ae 	bl	80018c0 <initBras>
  initFlag();
 8002764:	f7ff f86c 	bl	8001840 <initFlag>
  initUltrasons();
 8002768:	f7fe ff76 	bl	8001658 <initUltrasons>

  indexStrategie = 1; // Variable parcourant le tableau de stratégie
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <main+0x114>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
  initTimers();
 8002772:	f000 f8d5 	bl	8002920 <initTimers>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	float voltage = 0;
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	607b      	str	r3, [r7, #4]

	do{
		#if MODULE_TIRETTE == TRUE
			HAL_ADC_Start(&hadc1);
 800277c:	4826      	ldr	r0, [pc, #152]	; (8002818 <main+0x118>)
 800277e:	f001 fe07 	bl	8004390 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8002782:	4926      	ldr	r1, [pc, #152]	; (800281c <main+0x11c>)
 8002784:	4824      	ldr	r0, [pc, #144]	; (8002818 <main+0x118>)
 8002786:	f001 fed5 	bl	8004534 <HAL_ADC_PollForConversion>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11b      	bne.n	80027c8 <main+0xc8>
			{
				g_ADCValue = HAL_ADC_GetValue(&hadc1);
 8002790:	4821      	ldr	r0, [pc, #132]	; (8002818 <main+0x118>)
 8002792:	f001 ff5a 	bl	800464a <HAL_ADC_GetValue>
 8002796:	ee07 0a90 	vmov	s15, r0
 800279a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <main+0x120>)
 80027a0:	edc3 7a00 	vstr	s15, [r3]
				voltage = g_ADCValue * (3.3 / 4096.0);
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <main+0x120>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd feed 	bl	8000588 <__aeabi_f2d>
 80027ae:	a316      	add	r3, pc, #88	; (adr r3, 8002808 <main+0x108>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd ff40 	bl	8000638 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe fa32 	bl	8000c28 <__aeabi_d2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	607b      	str	r3, [r7, #4]
				#if MODULE_DEBUG && DEBUG_TIRETTE
					printf("%f\r\n",voltage);
				#endif
			}

			if((voltage < (float)TIRETTE_SEUIL) == TRUE && match_started == FALSE){
 80027c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002824 <main+0x124>
 80027d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d8:	d508      	bpl.n	80027ec <main+0xec>
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <main+0x128>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <main+0xec>
				match_started = TRUE;
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <main+0x128>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
				initStrategie();
 80027e8:	f000 f8ca 	bl	8002980 <initStrategie>
		#else
			match_started = TRUE;

		#endif
	}
	while(match_started == FALSE);
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <main+0x128>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0c3      	beq.n	800277c <main+0x7c>

	#if MODULE_LIDAR
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 80027f4:	2201      	movs	r2, #1
 80027f6:	490d      	ldr	r1, [pc, #52]	; (800282c <main+0x12c>)
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <main+0x130>)
 80027fa:	f004 fdc0 	bl	800737e <HAL_UART_Receive_IT>
	#endif

	cptTempsMatch = 0;
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <main+0x134>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

	while (1)
 8002804:	e7fe      	b.n	8002804 <main+0x104>
 8002806:	bf00      	nop
 8002808:	66666666 	.word	0x66666666
 800280c:	3f4a6666 	.word	0x3f4a6666
 8002810:	20000468 	.word	0x20000468
 8002814:	200005f8 	.word	0x200005f8
 8002818:	20000568 	.word	0x20000568
 800281c:	000f4240 	.word	0x000f4240
 8002820:	20000458 	.word	0x20000458
 8002824:	403ccccd 	.word	0x403ccccd
 8002828:	2000046c 	.word	0x2000046c
 800282c:	2000052a 	.word	0x2000052a
 8002830:	200008dc 	.word	0x200008dc
 8002834:	20000454 	.word	0x20000454

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b094      	sub	sp, #80	; 0x50
 800283c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	2234      	movs	r2, #52	; 0x34
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f005 fb4c 	bl	8007ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <SystemClock_Config+0xe0>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <SystemClock_Config+0xe0>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <SystemClock_Config+0xe0>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002878:	2300      	movs	r3, #0
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <SystemClock_Config+0xe4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <SystemClock_Config+0xe4>)
 8002882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <SystemClock_Config+0xe4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002894:	2302      	movs	r3, #2
 8002896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002898:	2301      	movs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800289c:	2310      	movs	r3, #16
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028a0:	2302      	movs	r3, #2
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028a4:	2300      	movs	r3, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80028a8:	2310      	movs	r3, #16
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80028ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028b2:	2302      	movs	r3, #2
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028b6:	2302      	movs	r3, #2
 80028b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028ba:	2302      	movs	r3, #2
 80028bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028be:	f107 031c 	add.w	r3, r7, #28
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 ff82 	bl	80057cc <HAL_RCC_OscConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80028ce:	f000 f9e4 	bl	8002c9a <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028d2:	f002 fc5f 	bl	8005194 <HAL_PWREx_EnableOverDrive>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80028dc:	f000 f9dd 	bl	8002c9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e0:	230f      	movs	r3, #15
 80028e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e4:	2302      	movs	r3, #2
 80028e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028f8:	f107 0308 	add.w	r3, r7, #8
 80028fc:	2105      	movs	r1, #5
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fc98 	bl	8005234 <HAL_RCC_ClockConfig>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800290a:	f000 f9c6 	bl	8002c9a <Error_Handler>
  }
}
 800290e:	bf00      	nop
 8002910:	3750      	adds	r7, #80	; 0x50
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000

08002920 <initTimers>:

/* USER CODE BEGIN 4 */

int initTimers(){
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0

	#if MODULE_ODOMETRIE
		HAL_TIM_Encoder_Start(&CODEUR_D, TIM_CHANNEL_ALL); // htim1
 8002924:	213c      	movs	r1, #60	; 0x3c
 8002926:	4809      	ldr	r0, [pc, #36]	; (800294c <initTimers+0x2c>)
 8002928:	f003 fc76 	bl	8006218 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&CODEUR_G, TIM_CHANNEL_ALL); // htim3
 800292c:	213c      	movs	r1, #60	; 0x3c
 800292e:	4808      	ldr	r0, [pc, #32]	; (8002950 <initTimers+0x30>)
 8002930:	f003 fc72 	bl	8006218 <HAL_TIM_Encoder_Start>
	#endif

	#if MODULE_ASSERVISSEMENT
		HAL_TIM_Base_Start_IT(&htim2); // 15ms
 8002934:	4807      	ldr	r0, [pc, #28]	; (8002954 <initTimers+0x34>)
 8002936:	f003 fa37 	bl	8005da8 <HAL_TIM_Base_Start_IT>
	#if MODULE_ULTRASONS
		HAL_TIM_Base_Start_IT(&htim4); 	// Period : 1us
	#endif

	#if MODULE_COMPTEUR
		HAL_TIM_Base_Start_IT(&htim7); // 1sec
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <initTimers+0x38>)
 800293c:	f003 fa34 	bl	8005da8 <HAL_TIM_Base_Start_IT>
	#endif

	HAL_TIM_Base_Start_IT(&htim6); // 10ms
 8002940:	4806      	ldr	r0, [pc, #24]	; (800295c <initTimers+0x3c>)
 8002942:	f003 fa31 	bl	8005da8 <HAL_TIM_Base_Start_IT>

	return 0;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	200007c0 	.word	0x200007c0
 8002950:	200006e8 	.word	0x200006e8
 8002954:	20000808 	.word	0x20000808
 8002958:	20000850 	.word	0x20000850
 800295c:	20000778 	.word	0x20000778

08002960 <initSerials>:

int initSerials(){
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
	#endif
	*/

	#if MODULE_IHM
		HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 8002964:	2201      	movs	r2, #1
 8002966:	4903      	ldr	r1, [pc, #12]	; (8002974 <initSerials+0x14>)
 8002968:	4803      	ldr	r0, [pc, #12]	; (8002978 <initSerials+0x18>)
 800296a:	f004 fd08 	bl	800737e <HAL_UART_Receive_IT>
	#endif

	return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000610 	.word	0x20000610
 8002978:	20000964 	.word	0x20000964
 800297c:	00000000 	.word	0x00000000

08002980 <initStrategie>:

int initStrategie(){
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	if(port_depart == BLEU){
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <initStrategie+0x88>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d119      	bne.n	80029c0 <initStrategie+0x40>
		ODO_setAngle(START_BLEU_ANGLE);
 800298c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a00 <initStrategie+0x80>
 8002990:	f000 fbae 	bl	80030f0 <ODO_setAngle>
		ODO_setX(consigneBleu[0].x);
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <initStrategie+0x8c>)
 8002996:	ed93 7b00 	vldr	d7, [r3]
 800299a:	eeb0 0a47 	vmov.f32	s0, s14
 800299e:	eef0 0a67 	vmov.f32	s1, s15
 80029a2:	f000 fb81 	bl	80030a8 <ODO_setX>
		ODO_setY(consigneBleu[0].y);
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <initStrategie+0x8c>)
 80029a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80029ac:	eeb0 0a47 	vmov.f32	s0, s14
 80029b0:	eef0 0a67 	vmov.f32	s1, s15
 80029b4:	f000 fb8a 	bl	80030cc <ODO_setY>
		consigne = consigneBleu;
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <initStrategie+0x90>)
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <initStrategie+0x8c>)
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e01c      	b.n	80029fa <initStrategie+0x7a>
	}
	else if(port_depart == JAUNE){
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <initStrategie+0x88>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d118      	bne.n	80029fa <initStrategie+0x7a>
		ODO_setAngle(START_JAUNE_ANGLE);
 80029c8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8002a00 <initStrategie+0x80>
 80029cc:	f000 fb90 	bl	80030f0 <ODO_setAngle>
		ODO_setX(consigneJaune[0].x);
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <initStrategie+0x94>)
 80029d2:	ed93 7b00 	vldr	d7, [r3]
 80029d6:	eeb0 0a47 	vmov.f32	s0, s14
 80029da:	eef0 0a67 	vmov.f32	s1, s15
 80029de:	f000 fb63 	bl	80030a8 <ODO_setX>
		ODO_setY(consigneJaune[0].y);
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <initStrategie+0x94>)
 80029e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80029e8:	eeb0 0a47 	vmov.f32	s0, s14
 80029ec:	eef0 0a67 	vmov.f32	s1, s15
 80029f0:	f000 fb6c 	bl	80030cc <ODO_setY>
		consigne = consigneJaune;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <initStrategie+0x90>)
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <initStrategie+0x94>)
 80029f8:	601a      	str	r2, [r3, #0]
	}

	return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
	...
 8002a08:	20000468 	.word	0x20000468
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000564 	.word	0x20000564
 8002a14:	20000128 	.word	0x20000128

08002a18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	b097      	sub	sp, #92	; 0x5c
 8002a1c:	af14      	add	r7, sp, #80	; 0x50
 8002a1e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d135      	bne.n	8002a96 <HAL_TIM_PeriodElapsedCallback+0x7e>
		if(indexStrategie < nb_points && match_started == 1)
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	da2f      	bge.n	8002a96 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8002a36:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d12b      	bne.n	8002a96 <HAL_TIM_PeriodElapsedCallback+0x7e>
			ASSERV_update2(consigne[indexStrategie], consigne[indexStrategie-1]);
 8002a3e:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	440b      	add	r3, r1
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	18d6      	adds	r6, r2, r3
 8002a52:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	440b      	add	r3, r1
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	3b30      	subs	r3, #48	; 0x30
 8002a66:	4413      	add	r3, r2
 8002a68:	ac08      	add	r4, sp, #32
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a7c:	466d      	mov	r5, sp
 8002a7e:	f106 0410 	add.w	r4, r6, #16
 8002a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a92:	f7ff f8c9 	bl	8001c28 <ASSERV_update2>
	}

	if(htim->Instance == TIM4){
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d138      	bne.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0xfa>
		cpt_us_global++;
 8002aa0:	4b42      	ldr	r3, [pc, #264]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b40      	ldr	r3, [pc, #256]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002aaa:	801a      	strh	r2, [r3, #0]

		if(cpt_us_global >= 0 && cpt_us_global < 10){ // && stepUS == STEP_RESET
 8002aac:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d805      	bhi.n	8002ac0 <HAL_TIM_PeriodElapsedCallback+0xa8>
//			HAL_GPIO_WritePin(Sensors[indexUS].Trigger_GPIO_Port,
//					Sensors[indexUS].Trigger_GPIO_Port, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	483d      	ldr	r0, [pc, #244]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002aba:	f002 fb39 	bl	8005130 <HAL_GPIO_WritePin>
 8002abe:	e00b      	b.n	8002ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>
		}
		else {
//			HAL_GPIO_WritePin(Sensors[indexUS].Trigger_GPIO_Port,
//					Sensors[indexUS].Trigger_GPIO_Port, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	483a      	ldr	r0, [pc, #232]	; (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002ac6:	f002 fb33 	bl	8005130 <HAL_GPIO_WritePin>

			if(stepUS == STEP_RESET) stepUS = STEP_TRIG;
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		}

		if(cpt_us_global >= 5000){
 8002ad8:	4b34      	ldr	r3, [pc, #208]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	f241 3287 	movw	r2, #4999	; 0x1387
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d916      	bls.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0xfa>
			cpt_us_global = 0;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
			distUS[indexUS]=999;
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002af6:	601a      	str	r2, [r3, #0]
			indexUS++;
 8002af8:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b02:	701a      	strb	r2, [r3, #0]
			if(indexUS >= NB_OF_US_SENSORS) indexUS = 0;
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d902      	bls.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM6){
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d117      	bne.n	8002b4c <HAL_TIM_PeriodElapsedCallback+0x134>
		//printf("TIM6\r\n");
		cpt_back++;
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002b24:	6013      	str	r3, [r2, #0]
		cpt_front++;
 8002b26:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002b2e:	6013      	str	r3, [r2, #0]
		//printf("cpt_front = %d\r\n",cpt_front);

		if (cpt_back > 150){
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b96      	cmp	r3, #150	; 0x96
 8002b36:	dd02      	ble.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x126>
			StopBack = 0;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
		}

		if (cpt_front > 150){
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b96      	cmp	r3, #150	; 0x96
 8002b44:	dd02      	ble.n	8002b4c <HAL_TIM_PeriodElapsedCallback+0x134>
			StopFront = 0;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM7){
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11b      	bne.n	8002b8e <HAL_TIM_PeriodElapsedCallback+0x176>
		if(match_started == TRUE){
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d117      	bne.n	8002b8e <HAL_TIM_PeriodElapsedCallback+0x176>
			cptTempsMatch++;
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b66:	6013      	str	r3, [r2, #0]

			if (cptTempsMatch >= TEMPS_PAVILLONS){
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b5f      	cmp	r3, #95	; 0x5f
 8002b6e:	dd01      	ble.n	8002b74 <HAL_TIM_PeriodElapsedCallback+0x15c>
				raiseFlag();
 8002b70:	f7fe fe9a 	bl	80018a8 <raiseFlag>
			}

			if (cptTempsMatch >= 98){
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b61      	cmp	r3, #97	; 0x61
 8002b7a:	dd08      	ble.n	8002b8e <HAL_TIM_PeriodElapsedCallback+0x176>
				stopMoteurs();
 8002b7c:	f000 f8c6 	bl	8002d0c <stopMoteurs>
				initBras();
 8002b80:	f7fe fe9e 	bl	80018c0 <initBras>
				initPinces();
 8002b84:	f7fe fde6 	bl	8001754 <initPinces>
				match_started = 0;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200005f8 	.word	0x200005f8
 8002b9c:	20000004 	.word	0x20000004
 8002ba0:	2000046c 	.word	0x2000046c
 8002ba4:	20000564 	.word	0x20000564
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	20000528 	.word	0x20000528
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	200004e8 	.word	0x200004e8
 8002bb8:	2000051c 	.word	0x2000051c
 8002bbc:	200004d8 	.word	0x200004d8
 8002bc0:	4479c000 	.word	0x4479c000
 8002bc4:	40001000 	.word	0x40001000
 8002bc8:	20000524 	.word	0x20000524
 8002bcc:	200004d4 	.word	0x200004d4
 8002bd0:	2000052c 	.word	0x2000052c
 8002bd4:	20000520 	.word	0x20000520
 8002bd8:	40001400 	.word	0x40001400
 8002bdc:	20000454 	.word	0x20000454

08002be0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5){
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_UART_RxCpltCallback+0x80>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <HAL_UART_RxCpltCallback+0x3a>
		strcat(lidarRawData,&buff_lidar);
 8002bf2:	491c      	ldr	r1, [pc, #112]	; (8002c64 <HAL_UART_RxCpltCallback+0x84>)
 8002bf4:	481c      	ldr	r0, [pc, #112]	; (8002c68 <HAL_UART_RxCpltCallback+0x88>)
 8002bf6:	f005 fde7 	bl	80087c8 <strcat>
		if(buff_lidar == '\n'){
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_UART_RxCpltCallback+0x84>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b0a      	cmp	r3, #10
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_RxCpltCallback+0x30>
			//getLidarData();
			getLidarData2();
 8002c02:	f7ff fd51 	bl	80026a8 <getLidarData2>
			memset(lidarRawData,0,sizeof(lidarRawData));
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4817      	ldr	r0, [pc, #92]	; (8002c68 <HAL_UART_RxCpltCallback+0x88>)
 8002c0c:	f005 f96a 	bl	8007ee4 <memset>
		}
		HAL_UART_Receive_IT(&huart5, (uint8_t*)&buff_lidar, 1);
 8002c10:	2201      	movs	r2, #1
 8002c12:	4914      	ldr	r1, [pc, #80]	; (8002c64 <HAL_UART_RxCpltCallback+0x84>)
 8002c14:	4815      	ldr	r0, [pc, #84]	; (8002c6c <HAL_UART_RxCpltCallback+0x8c>)
 8002c16:	f004 fbb2 	bl	800737e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == UART4){
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_UART_RxCpltCallback+0x90>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d118      	bne.n	8002c56 <HAL_UART_RxCpltCallback+0x76>
		if(match_started == FALSE){
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_UART_RxCpltCallback+0x94>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d114      	bne.n	8002c56 <HAL_UART_RxCpltCallback+0x76>
			strcat(ihmRawData,&buff_ihm);
 8002c2c:	4912      	ldr	r1, [pc, #72]	; (8002c78 <HAL_UART_RxCpltCallback+0x98>)
 8002c2e:	4813      	ldr	r0, [pc, #76]	; (8002c7c <HAL_UART_RxCpltCallback+0x9c>)
 8002c30:	f005 fdca 	bl	80087c8 <strcat>
			if(buff_ihm == '\n'){
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_UART_RxCpltCallback+0x98>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b0a      	cmp	r3, #10
 8002c3a:	d107      	bne.n	8002c4c <HAL_UART_RxCpltCallback+0x6c>
				decodeMsgIHM(ihmRawData);
 8002c3c:	480f      	ldr	r0, [pc, #60]	; (8002c7c <HAL_UART_RxCpltCallback+0x9c>)
 8002c3e:	f7ff fd07 	bl	8002650 <decodeMsgIHM>
				memset(ihmRawData,0,sizeof(ihmRawData));
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	2100      	movs	r1, #0
 8002c46:	480d      	ldr	r0, [pc, #52]	; (8002c7c <HAL_UART_RxCpltCallback+0x9c>)
 8002c48:	f005 f94c 	bl	8007ee4 <memset>
			}
			HAL_UART_Receive_IT(&huart4, (uint8_t*)&buff_ihm, 1);
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	490a      	ldr	r1, [pc, #40]	; (8002c78 <HAL_UART_RxCpltCallback+0x98>)
 8002c50:	480b      	ldr	r0, [pc, #44]	; (8002c80 <HAL_UART_RxCpltCallback+0xa0>)
 8002c52:	f004 fb94 	bl	800737e <HAL_UART_Receive_IT>
		}
	}
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40005000 	.word	0x40005000
 8002c64:	2000052a 	.word	0x2000052a
 8002c68:	20000494 	.word	0x20000494
 8002c6c:	200008dc 	.word	0x200008dc
 8002c70:	40004c00 	.word	0x40004c00
 8002c74:	2000046c 	.word	0x2000046c
 8002c78:	20000610 	.word	0x20000610
 8002c7c:	20000614 	.word	0x20000614
 8002c80:	20000964 	.word	0x20000964

08002c84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13 && indexUS == US_BACK_RIGHT)
  {
	  processUltrasons(Sensors[US_BACK_RIGHT]);
  }
#endif
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <initMoteurs>:
#include <moteurs.h>

void initMoteurs(){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af04      	add	r7, sp, #16
	//DRV8825_moveMotorLineSpeed(&moteur_D, 0);
	//DRV8825_moveMotorLineSpeed(&moteur_G, 0);

	DRV8825_init(&moteur_D, EN_D_Pin, EN_D_GPIO_Port, Dir_D_Pin, Dir_D_GPIO_Port, &STEP_D, TIM_CHANNEL_4);
 8002cae:	230c      	movs	r3, #12
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <initMoteurs+0x50>)
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <initMoteurs+0x54>)
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <initMoteurs+0x54>)
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	480f      	ldr	r0, [pc, #60]	; (8002d00 <initMoteurs+0x58>)
 8002cc4:	f7fe fba6 	bl	8001414 <DRV8825_init>
	DRV8825_init(&moteur_G, EN_G_Pin, EN_G_GPIO_Port, Dir_G_Pin, Dir_G_GPIO_Port, &STEP_G, TIM_CHANNEL_1);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9302      	str	r3, [sp, #8]
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <initMoteurs+0x5c>)
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <initMoteurs+0x54>)
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <initMoteurs+0x54>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	480b      	ldr	r0, [pc, #44]	; (8002d08 <initMoteurs+0x60>)
 8002cdc:	f7fe fb9a 	bl	8001414 <DRV8825_init>

	DRV8825_setStart(&moteur_D, STOP);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4807      	ldr	r0, [pc, #28]	; (8002d00 <initMoteurs+0x58>)
 8002ce4:	f7fe fbcb 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4807      	ldr	r0, [pc, #28]	; (8002d08 <initMoteurs+0x60>)
 8002cec:	f7fe fbc7 	bl	800147e <DRV8825_setStart>

	//DRV8825_setStart(&moteur_D, START);
	//DRV8825_setStart(&moteur_G, START);

}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000658 	.word	0x20000658
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	200005c8 	.word	0x200005c8
 8002d04:	20000730 	.word	0x20000730
 8002d08:	200005e0 	.word	0x200005e0

08002d0c <stopMoteurs>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed);
}

void stopMoteurs(){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, STOP);
 8002d10:	2101      	movs	r1, #1
 8002d12:	4804      	ldr	r0, [pc, #16]	; (8002d24 <stopMoteurs+0x18>)
 8002d14:	f7fe fbb3 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, STOP);
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <stopMoteurs+0x1c>)
 8002d1c:	f7fe fbaf 	bl	800147e <DRV8825_setStart>
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200005c8 	.word	0x200005c8
 8002d28:	200005e0 	.word	0x200005e0

08002d2c <startMoteurs>:

void startMoteurs(){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	DRV8825_setStart(&moteur_D, START);
 8002d30:	2100      	movs	r1, #0
 8002d32:	4804      	ldr	r0, [pc, #16]	; (8002d44 <startMoteurs+0x18>)
 8002d34:	f7fe fba3 	bl	800147e <DRV8825_setStart>
	DRV8825_setStart(&moteur_G, START);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4803      	ldr	r0, [pc, #12]	; (8002d48 <startMoteurs+0x1c>)
 8002d3c:	f7fe fb9f 	bl	800147e <DRV8825_setStart>
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200005c8 	.word	0x200005c8
 8002d48:	200005e0 	.word	0x200005e0

08002d4c <setMotors>:

	DRV8825_moveMotorLineSpeed(&moteur_D, speed_R);
	DRV8825_moveMotorLineSpeed(&moteur_G, speed_L);
}

void setMotors(double left, double right) {
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	ed87 0b02 	vstr	d0, [r7, #8]
 8002d56:	ed87 1b00 	vstr	d1, [r7]
    // vitesses absolues
    DRV8825_moveMotorLineSpeed(&moteur_G, fabs(left));
 8002d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d5e:	f7fd ff63 	bl	8000c28 <__aeabi_d2f>
 8002d62:	ee07 0a90 	vmov	s15, r0
 8002d66:	eef0 7ae7 	vabs.f32	s15, s15
 8002d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6e:	4830      	ldr	r0, [pc, #192]	; (8002e30 <setMotors+0xe4>)
 8002d70:	f7fe fb9a 	bl	80014a8 <DRV8825_moveMotorLineSpeed>
    DRV8825_moveMotorLineSpeed(&moteur_D, fabs(right));
 8002d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d78:	f7fd ff56 	bl	8000c28 <__aeabi_d2f>
 8002d7c:	ee07 0a90 	vmov	s15, r0
 8002d80:	eef0 7ae7 	vabs.f32	s15, s15
 8002d84:	eeb0 0a67 	vmov.f32	s0, s15
 8002d88:	482a      	ldr	r0, [pc, #168]	; (8002e34 <setMotors+0xe8>)
 8002d8a:	f7fe fb8d 	bl	80014a8 <DRV8825_moveMotorLineSpeed>

    // directions
    DRV8825_setDir(&moteur_G, (left < 0)?BACKWARD:FORWARD);
 8002d8e:	2301      	movs	r3, #1
 8002d90:	461c      	mov	r4, r3
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d9e:	f7fd febd 	bl	8000b1c <__aeabi_dcmplt>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <setMotors+0x60>
 8002da8:	2300      	movs	r3, #0
 8002daa:	461c      	mov	r4, r3
 8002dac:	b2e3      	uxtb	r3, r4
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4619      	mov	r1, r3
 8002db8:	481d      	ldr	r0, [pc, #116]	; (8002e30 <setMotors+0xe4>)
 8002dba:	f7fe fb4e 	bl	800145a <DRV8825_setDir>
    DRV8825_setDir(&moteur_D, (right < 0)?BACKWARD:FORWARD);
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dce:	f7fd fea5 	bl	8000b1c <__aeabi_dcmplt>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <setMotors+0x90>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	461c      	mov	r4, r3
 8002ddc:	b2e3      	uxtb	r3, r4
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	4812      	ldr	r0, [pc, #72]	; (8002e34 <setMotors+0xe8>)
 8002dea:	f7fe fb36 	bl	800145a <DRV8825_setDir>

    // activer ou non les moteurs
    if (left == 0 && right == 0)
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dfa:	f7fd fe85 	bl	8000b08 <__aeabi_dcmpeq>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <setMotors+0xd4>
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e10:	f7fd fe7a 	bl	8000b08 <__aeabi_dcmpeq>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <setMotors+0xd4>
        stopMoteurs();
 8002e1a:	f7ff ff77 	bl	8002d0c <stopMoteurs>
 8002e1e:	e002      	b.n	8002e26 <setMotors+0xda>
    else
    	startMoteurs();
 8002e20:	f7ff ff84 	bl	8002d2c <startMoteurs>
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200005e0 	.word	0x200005e0
 8002e34:	200005c8 	.word	0x200005c8

08002e38 <getTickRight>:
#include <asservissement.h>


int16_t getTickRight(){
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
	return (int16_t) CODEUR_D.Instance->CNT;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <getTickRight+0x18>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	b21b      	sxth	r3, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	200007c0 	.word	0x200007c0

08002e54 <getTickLeft>:

int16_t getTickLeft(){
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	return -1 * (int16_t) CODEUR_G.Instance->CNT;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <getTickLeft+0x1c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	425b      	negs	r3, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	b21b      	sxth	r3, r3
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	200006e8 	.word	0x200006e8

08002e74 <resetTickRight>:

void resetTickRight(){
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
	CODEUR_D.Instance->CNT = 0;
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <resetTickRight+0x18>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	200007c0 	.word	0x200007c0

08002e90 <resetTickLeft>:

void resetTickLeft(){
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	CODEUR_G.Instance->CNT = 0;
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <resetTickLeft+0x18>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200006e8 	.word	0x200006e8
 8002eac:	00000000 	.word	0x00000000

08002eb0 <ODO_odometrie>:

void ODO_odometrie(){
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
			"x : %lf \n\r"
			"y : %lf \n\r"
			"o : %lf \n\n\r",g_x, g_y, g_angle);
#endif

	int valCodG = getTickLeft();
 8002eb6:	f7ff ffcd 	bl	8002e54 <getTickLeft>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	607b      	str	r3, [r7, #4]
	int valCodD = getTickRight();
 8002ebe:	f7ff ffbb 	bl	8002e38 <getTickRight>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	603b      	str	r3, [r7, #0]

	dDistance =  (valCodG*COEFF_CODEUR_L + valCodD*COEFF_CODEUR_R)/2;
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fb4c 	bl	8000564 <__aeabi_i2d>
 8002ecc:	a368      	add	r3, pc, #416	; (adr r3, 8003070 <ODO_odometrie+0x1c0>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fbb1 	bl	8000638 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4614      	mov	r4, r2
 8002edc:	461d      	mov	r5, r3
 8002ede:	6838      	ldr	r0, [r7, #0]
 8002ee0:	f7fd fb40 	bl	8000564 <__aeabi_i2d>
 8002ee4:	a362      	add	r3, pc, #392	; (adr r3, 8003070 <ODO_odometrie+0x1c0>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fba5 	bl	8000638 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7fd f9e9 	bl	80002cc <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f0a:	f7fd fcbf 	bl	800088c <__aeabi_ddiv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	495f      	ldr	r1, [pc, #380]	; (8003090 <ODO_odometrie+0x1e0>)
 8002f14:	e9c1 2300 	strd	r2, r3, [r1]
	dAngle = (valCodD*COEFF_CODEUR_R - valCodG*COEFF_CODEUR_L)/ENTRAXE;
 8002f18:	6838      	ldr	r0, [r7, #0]
 8002f1a:	f7fd fb23 	bl	8000564 <__aeabi_i2d>
 8002f1e:	a354      	add	r3, pc, #336	; (adr r3, 8003070 <ODO_odometrie+0x1c0>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fb88 	bl	8000638 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	461d      	mov	r5, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fb17 	bl	8000564 <__aeabi_i2d>
 8002f36:	a34e      	add	r3, pc, #312	; (adr r3, 8003070 <ODO_odometrie+0x1c0>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd fb7c 	bl	8000638 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f9be 	bl	80002c8 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <ODO_odometrie+0x1e4>)
 8002f5a:	f7fd fc97 	bl	800088c <__aeabi_ddiv>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	494d      	ldr	r1, [pc, #308]	; (8003098 <ODO_odometrie+0x1e8>)
 8002f64:	e9c1 2300 	strd	r2, r3, [r1]

	g_x += dDistance * cos(g_angle);
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <ODO_odometrie+0x1ec>)
 8002f6a:	ed93 7b00 	vldr	d7, [r3]
 8002f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f72:	eef0 0a67 	vmov.f32	s1, s15
 8002f76:	f007 fc9f 	bl	800a8b8 <cos>
 8002f7a:	ec51 0b10 	vmov	r0, r1, d0
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <ODO_odometrie+0x1e0>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f7fd fb58 	bl	8000638 <__aeabi_dmul>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <ODO_odometrie+0x1f0>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd f999 	bl	80002cc <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4940      	ldr	r1, [pc, #256]	; (80030a0 <ODO_odometrie+0x1f0>)
 8002fa0:	e9c1 2300 	strd	r2, r3, [r1]
	g_y += dDistance * sin(g_angle);
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	; (800309c <ODO_odometrie+0x1ec>)
 8002fa6:	ed93 7b00 	vldr	d7, [r3]
 8002faa:	eeb0 0a47 	vmov.f32	s0, s14
 8002fae:	eef0 0a67 	vmov.f32	s1, s15
 8002fb2:	f007 fcd1 	bl	800a958 <sin>
 8002fb6:	ec51 0b10 	vmov	r0, r1, d0
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <ODO_odometrie+0x1e0>)
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f7fd fb3a 	bl	8000638 <__aeabi_dmul>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <ODO_odometrie+0x1f4>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd f97b 	bl	80002cc <__adddf3>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4932      	ldr	r1, [pc, #200]	; (80030a4 <ODO_odometrie+0x1f4>)
 8002fdc:	e9c1 2300 	strd	r2, r3, [r1]
	g_angle += dAngle;
 8002fe0:	4b2e      	ldr	r3, [pc, #184]	; (800309c <ODO_odometrie+0x1ec>)
 8002fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <ODO_odometrie+0x1e8>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f7fd f96e 	bl	80002cc <__adddf3>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4929      	ldr	r1, [pc, #164]	; (800309c <ODO_odometrie+0x1ec>)
 8002ff6:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle > M_PI)
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <ODO_odometrie+0x1ec>)
 8002ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003000:	a31d      	add	r3, pc, #116	; (adr r3, 8003078 <ODO_odometrie+0x1c8>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd fda7 	bl	8000b58 <__aeabi_dcmpgt>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00c      	beq.n	800302a <ODO_odometrie+0x17a>
		g_angle = g_angle - M_TWOPI;
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <ODO_odometrie+0x1ec>)
 8003012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003016:	a31a      	add	r3, pc, #104	; (adr r3, 8003080 <ODO_odometrie+0x1d0>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd f954 	bl	80002c8 <__aeabi_dsub>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	491d      	ldr	r1, [pc, #116]	; (800309c <ODO_odometrie+0x1ec>)
 8003026:	e9c1 2300 	strd	r2, r3, [r1]

	if(g_angle < -M_PI)
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <ODO_odometrie+0x1ec>)
 800302c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003030:	a315      	add	r3, pc, #84	; (adr r3, 8003088 <ODO_odometrie+0x1d8>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f7fd fd71 	bl	8000b1c <__aeabi_dcmplt>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <ODO_odometrie+0x1aa>
		g_angle = g_angle + M_TWOPI;
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <ODO_odometrie+0x1ec>)
 8003042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003046:	a30e      	add	r3, pc, #56	; (adr r3, 8003080 <ODO_odometrie+0x1d0>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f7fd f93e 	bl	80002cc <__adddf3>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4911      	ldr	r1, [pc, #68]	; (800309c <ODO_odometrie+0x1ec>)
 8003056:	e9c1 2300 	strd	r2, r3, [r1]

	resetTickRight();
 800305a:	f7ff ff0b 	bl	8002e74 <resetTickRight>
	resetTickLeft();
 800305e:	f7ff ff17 	bl	8002e90 <resetTickLeft>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w
 8003070:	47c0d798 	.word	0x47c0d798
 8003074:	3fa484bc 	.word	0x3fa484bc
 8003078:	54442d18 	.word	0x54442d18
 800307c:	400921fb 	.word	0x400921fb
 8003080:	54442d18 	.word	0x54442d18
 8003084:	401921fb 	.word	0x401921fb
 8003088:	54442d18 	.word	0x54442d18
 800308c:	c00921fb 	.word	0xc00921fb
 8003090:	20000608 	.word	0x20000608
 8003094:	40700000 	.word	0x40700000
 8003098:	200005c0 	.word	0x200005c0
 800309c:	200005b8 	.word	0x200005b8
 80030a0:	200005b0 	.word	0x200005b0
 80030a4:	20000600 	.word	0x20000600

080030a8 <ODO_setX>:

void ODO_setX(double x){
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	ed87 0b00 	vstr	d0, [r7]
	g_x = x;
 80030b2:	4905      	ldr	r1, [pc, #20]	; (80030c8 <ODO_setX+0x20>)
 80030b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	200005b0 	.word	0x200005b0

080030cc <ODO_setY>:

void ODO_setY(double y){
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	ed87 0b00 	vstr	d0, [r7]
	g_y = y;
 80030d6:	4905      	ldr	r1, [pc, #20]	; (80030ec <ODO_setY+0x20>)
 80030d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030dc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000600 	.word	0x20000600

080030f0 <ODO_setAngle>:
void ODO_setPosition(double x, double y){
	g_x = x;
	g_y = y;
}

void ODO_setAngle(double angle){
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	ed87 0b00 	vstr	d0, [r7]
	g_angle = angle;
 80030fa:	4905      	ldr	r1, [pc, #20]	; (8003110 <ODO_setAngle+0x20>)
 80030fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003100:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	200005b8 	.word	0x200005b8

08003114 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db04      	blt.n	800312c <_isatty+0x18>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b02      	cmp	r3, #2
 8003126:	dc01      	bgt.n	800312c <_isatty+0x18>
    return 1;
 8003128:	2301      	movs	r3, #1
 800312a:	e005      	b.n	8003138 <_isatty+0x24>

  errno = EBADF;
 800312c:	f004 feb0 	bl	8007e90 <__errno>
 8003130:	4603      	mov	r3, r0
 8003132:	2209      	movs	r2, #9
 8003134:	601a      	str	r2, [r3, #0]
  return 0;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_write>:

int _write(int fd, char* ptr, int len) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d002      	beq.n	8003158 <_write+0x18>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d111      	bne.n	800317c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <_write+0x54>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	b29a      	uxth	r2, r3
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	f003 ffd6 	bl	8007116 <HAL_UART_Transmit>
 800316a:	4603      	mov	r3, r0
 800316c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <_write+0x38>
      return len;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	e008      	b.n	800318a <_write+0x4a>
    else
      return EIO;
 8003178:	2305      	movs	r3, #5
 800317a:	e006      	b.n	800318a <_write+0x4a>
  }
  errno = EBADF;
 800317c:	f004 fe88 	bl	8007e90 <__errno>
 8003180:	4603      	mov	r3, r0
 8003182:	2209      	movs	r2, #9
 8003184:	601a      	str	r2, [r3, #0]
  return -1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000654 	.word	0x20000654

08003198 <_close>:

int _close(int fd) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db04      	blt.n	80031b0 <_close+0x18>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	dc01      	bgt.n	80031b0 <_close+0x18>
    return 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e006      	b.n	80031be <_close+0x26>

  errno = EBADF;
 80031b0:	f004 fe6e 	bl	8007e90 <__errno>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2209      	movs	r2, #9
 80031b8:	601a      	str	r2, [r3, #0]
  return -1;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80031d2:	f004 fe5d 	bl	8007e90 <__errno>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2209      	movs	r2, #9
 80031da:	601a      	str	r2, [r3, #0]
  return -1;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_read>:

int _read(int fd, char* ptr, int len) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d110      	bne.n	800321c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <_read+0x4c>)
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	2201      	movs	r2, #1
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	f004 f818 	bl	800723a <HAL_UART_Receive>
 800320a:	4603      	mov	r3, r0
 800320c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <_read+0x30>
      return 1;
 8003214:	2301      	movs	r3, #1
 8003216:	e008      	b.n	800322a <_read+0x42>
    else
      return EIO;
 8003218:	2305      	movs	r3, #5
 800321a:	e006      	b.n	800322a <_read+0x42>
  }
  errno = EBADF;
 800321c:	f004 fe38 	bl	8007e90 <__errno>
 8003220:	4603      	mov	r3, r0
 8003222:	2209      	movs	r2, #9
 8003224:	601a      	str	r2, [r3, #0]
  return -1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000654 	.word	0x20000654

08003238 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db08      	blt.n	800325a <_fstat+0x22>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	dc05      	bgt.n	800325a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003254:	605a      	str	r2, [r3, #4]
    return 0;
 8003256:	2300      	movs	r3, #0
 8003258:	e005      	b.n	8003266 <_fstat+0x2e>
  }

  errno = EBADF;
 800325a:	f004 fe19 	bl	8007e90 <__errno>
 800325e:	4603      	mov	r3, r0
 8003260:	2209      	movs	r2, #9
 8003262:	601a      	str	r2, [r3, #0]
  return 0;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_MspInit+0x4c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <HAL_MspInit+0x4c>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_MspInit+0x4c>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_MspInit+0x4c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <HAL_MspInit+0x4c>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_MspInit+0x4c>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
#if DEBUG_G == 1 && DEBUG_FAULT
	printf("Bug !");
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <HardFault_Handler+0x4>

080032d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d8:	e7fe      	b.n	80032d8 <MemManage_Handler+0x4>

080032da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032de:	e7fe      	b.n	80032de <BusFault_Handler+0x4>

080032e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <UsageFault_Handler+0x4>

080032e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003314:	f000 ffb4 	bl	8004280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}

0800331c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003320:	2002      	movs	r0, #2
 8003322:	f001 ff1f 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <TIM2_IRQHandler+0x10>)
 8003332:	f002 ffff 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000808 	.word	0x20000808

08003340 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <TIM4_IRQHandler+0x10>)
 8003346:	f002 fff5 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200006a0 	.word	0x200006a0

08003354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <USART2_IRQHandler+0x10>)
 800335a:	f004 f841 	bl	80073e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200009a8 	.word	0x200009a8

08003368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800336c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003370:	f001 fef8 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003378:	f001 fef4 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800337c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003380:	f001 fef0 	bl	8005164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <UART4_IRQHandler+0x10>)
 800338e:	f004 f827 	bl	80073e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000964 	.word	0x20000964

0800339c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <UART5_IRQHandler+0x10>)
 80033a2:	f004 f81d 	bl	80073e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200008dc 	.word	0x200008dc

080033b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM6_DAC_IRQHandler+0x10>)
 80033b6:	f002 ffbd 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000778 	.word	0x20000778

080033c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <TIM7_IRQHandler+0x10>)
 80033ca:	f002 ffb3 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000850 	.word	0x20000850

080033d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <_sbrk+0x50>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <_sbrk+0x16>
		heap_end = &end;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <_sbrk+0x50>)
 80033ea:	4a10      	ldr	r2, [pc, #64]	; (800342c <_sbrk+0x54>)
 80033ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <_sbrk+0x50>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <_sbrk+0x50>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	466a      	mov	r2, sp
 80033fe:	4293      	cmp	r3, r2
 8003400:	d907      	bls.n	8003412 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003402:	f004 fd45 	bl	8007e90 <__errno>
 8003406:	4603      	mov	r3, r0
 8003408:	220c      	movs	r2, #12
 800340a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	e006      	b.n	8003420 <_sbrk+0x48>
	}

	heap_end += incr;
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <_sbrk+0x50>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	4a03      	ldr	r2, [pc, #12]	; (8003428 <_sbrk+0x50>)
 800341c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	2000045c 	.word	0x2000045c
 800342c:	20000a00 	.word	0x20000a00

08003430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <SystemInit+0x28>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <SystemInit+0x28>)
 800343c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <SystemInit+0x28>)
 8003446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800344a:	609a      	str	r2, [r3, #8]
#endif
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003462:	f107 030c 	add.w	r3, r7, #12
 8003466:	2224      	movs	r2, #36	; 0x24
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f004 fd3a 	bl	8007ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <MX_TIM1_Init+0xa8>)
 800347a:	4a23      	ldr	r2, [pc, #140]	; (8003508 <MX_TIM1_Init+0xac>)
 800347c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <MX_TIM1_Init+0xa8>)
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003484:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <MX_TIM1_Init+0xa8>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <MX_TIM1_Init+0xa8>)
 800348c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <MX_TIM1_Init+0xa8>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <MX_TIM1_Init+0xa8>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <MX_TIM1_Init+0xa8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034a4:	2303      	movs	r3, #3
 80034a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034ac:	2301      	movs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80034b4:	230a      	movs	r3, #10
 80034b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034bc:	2301      	movs	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4619      	mov	r1, r3
 80034ce:	480d      	ldr	r0, [pc, #52]	; (8003504 <MX_TIM1_Init+0xa8>)
 80034d0:	f002 fdfc 	bl	80060cc <HAL_TIM_Encoder_Init>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80034da:	f7ff fbde 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4806      	ldr	r0, [pc, #24]	; (8003504 <MX_TIM1_Init+0xa8>)
 80034ec:	f003 fce4 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80034f6:	f7ff fbd0 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80034fa:	bf00      	nop
 80034fc:	3730      	adds	r7, #48	; 0x30
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200007c0 	.word	0x200007c0
 8003508:	40010000 	.word	0x40010000

0800350c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003520:	463b      	mov	r3, r7
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <MX_TIM2_Init+0x98>)
 800352a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800352e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <MX_TIM2_Init+0x98>)
 8003532:	f640 227e 	movw	r2, #2686	; 0xa7e
 8003536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <MX_TIM2_Init+0x98>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800353e:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <MX_TIM2_Init+0x98>)
 8003540:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <MX_TIM2_Init+0x98>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <MX_TIM2_Init+0x98>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003552:	4814      	ldr	r0, [pc, #80]	; (80035a4 <MX_TIM2_Init+0x98>)
 8003554:	f002 fbd8 	bl	8005d08 <HAL_TIM_Base_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800355e:	f7ff fb9c 	bl	8002c9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	4619      	mov	r1, r3
 800356e:	480d      	ldr	r0, [pc, #52]	; (80035a4 <MX_TIM2_Init+0x98>)
 8003570:	f003 f8a6 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800357a:	f7ff fb8e 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003586:	463b      	mov	r3, r7
 8003588:	4619      	mov	r1, r3
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <MX_TIM2_Init+0x98>)
 800358c:	f003 fc94 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003596:	f7ff fb80 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000808 	.word	0x20000808

080035a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 fc94 	bl	8007ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <MX_TIM3_Init+0xa0>)
 80035c6:	4a21      	ldr	r2, [pc, #132]	; (800364c <MX_TIM3_Init+0xa4>)
 80035c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035ca:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <MX_TIM3_Init+0xa0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <MX_TIM3_Init+0xa0>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <MX_TIM3_Init+0xa0>)
 80035d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <MX_TIM3_Init+0xa0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <MX_TIM3_Init+0xa0>)
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035ea:	2303      	movs	r3, #3
 80035ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035f2:	2301      	movs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003602:	2301      	movs	r3, #1
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <MX_TIM3_Init+0xa0>)
 8003616:	f002 fd59 	bl	80060cc <HAL_TIM_Encoder_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003620:	f7ff fb3b 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4619      	mov	r1, r3
 8003630:	4805      	ldr	r0, [pc, #20]	; (8003648 <MX_TIM3_Init+0xa0>)
 8003632:	f003 fc41 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800363c:	f7ff fb2d 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003640:	bf00      	nop
 8003642:	3730      	adds	r7, #48	; 0x30
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200006e8 	.word	0x200006e8
 800364c:	40000400 	.word	0x40000400

08003650 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003656:	f107 0308 	add.w	r3, r7, #8
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003664:	463b      	mov	r3, r7
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <MX_TIM4_Init+0x90>)
 800366e:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <MX_TIM4_Init+0x94>)
 8003670:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <MX_TIM4_Init+0x90>)
 8003674:	2201      	movs	r2, #1
 8003676:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <MX_TIM4_Init+0x90>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <MX_TIM4_Init+0x90>)
 8003680:	225a      	movs	r2, #90	; 0x5a
 8003682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <MX_TIM4_Init+0x90>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <MX_TIM4_Init+0x90>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003690:	4813      	ldr	r0, [pc, #76]	; (80036e0 <MX_TIM4_Init+0x90>)
 8003692:	f002 fb39 	bl	8005d08 <HAL_TIM_Base_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800369c:	f7ff fafd 	bl	8002c9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036a6:	f107 0308 	add.w	r3, r7, #8
 80036aa:	4619      	mov	r1, r3
 80036ac:	480c      	ldr	r0, [pc, #48]	; (80036e0 <MX_TIM4_Init+0x90>)
 80036ae:	f003 f807 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80036b8:	f7ff faef 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036bc:	2300      	movs	r3, #0
 80036be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036c4:	463b      	mov	r3, r7
 80036c6:	4619      	mov	r1, r3
 80036c8:	4805      	ldr	r0, [pc, #20]	; (80036e0 <MX_TIM4_Init+0x90>)
 80036ca:	f003 fbf5 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80036d4:	f7ff fae1 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036d8:	bf00      	nop
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	200006a0 	.word	0x200006a0
 80036e4:	40000800 	.word	0x40000800

080036e8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ee:	463b      	mov	r3, r7
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <MX_TIM6_Init+0x64>)
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <MX_TIM6_Init+0x68>)
 80036fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <MX_TIM6_Init+0x64>)
 80036fe:	f242 3227 	movw	r2, #8999	; 0x2327
 8003702:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <MX_TIM6_Init+0x64>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <MX_TIM6_Init+0x64>)
 800370c:	2263      	movs	r2, #99	; 0x63
 800370e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <MX_TIM6_Init+0x64>)
 8003712:	2200      	movs	r2, #0
 8003714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <MX_TIM6_Init+0x64>)
 8003718:	f002 faf6 	bl	8005d08 <HAL_TIM_Base_Init>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003722:	f7ff faba 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800372e:	463b      	mov	r3, r7
 8003730:	4619      	mov	r1, r3
 8003732:	4806      	ldr	r0, [pc, #24]	; (800374c <MX_TIM6_Init+0x64>)
 8003734:	f003 fbc0 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800373e:	f7ff faac 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000778 	.word	0x20000778
 8003750:	40001000 	.word	0x40001000

08003754 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375a:	463b      	mov	r3, r7
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <MX_TIM7_Init+0x64>)
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <MX_TIM7_Init+0x68>)
 8003766:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_TIM7_Init+0x64>)
 800376a:	f242 3227 	movw	r2, #8999	; 0x2327
 800376e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <MX_TIM7_Init+0x64>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <MX_TIM7_Init+0x64>)
 8003778:	f242 720f 	movw	r2, #9999	; 0x270f
 800377c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <MX_TIM7_Init+0x64>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <MX_TIM7_Init+0x64>)
 8003786:	f002 fabf 	bl	8005d08 <HAL_TIM_Base_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003790:	f7ff fa83 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003794:	2300      	movs	r3, #0
 8003796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800379c:	463b      	mov	r3, r7
 800379e:	4619      	mov	r1, r3
 80037a0:	4805      	ldr	r0, [pc, #20]	; (80037b8 <MX_TIM7_Init+0x64>)
 80037a2:	f003 fb89 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80037ac:	f7ff fa75 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000850 	.word	0x20000850
 80037bc:	40001400 	.word	0x40001400

080037c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b096      	sub	sp, #88	; 0x58
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	611a      	str	r2, [r3, #16]
 80037ee:	615a      	str	r2, [r3, #20]
 80037f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	2220      	movs	r2, #32
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fb73 	bl	8007ee4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003800:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <MX_TIM8_Init+0x13c>)
 8003802:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003806:	22b3      	movs	r2, #179	; 0xb3
 8003808:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <MX_TIM8_Init+0x138>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8003810:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003816:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003818:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <MX_TIM8_Init+0x138>)
 800381a:	2200      	movs	r2, #0
 800381c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003820:	2200      	movs	r2, #0
 8003822:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003824:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800382a:	4833      	ldr	r0, [pc, #204]	; (80038f8 <MX_TIM8_Init+0x138>)
 800382c:	f002 fa6c 	bl	8005d08 <HAL_TIM_Base_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003836:	f7ff fa30 	bl	8002c9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800383a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003844:	4619      	mov	r1, r3
 8003846:	482c      	ldr	r0, [pc, #176]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003848:	f002 ff3a 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003852:	f7ff fa22 	bl	8002c9a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003856:	4828      	ldr	r0, [pc, #160]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003858:	f002 fb16 	bl	8005e88 <HAL_TIM_PWM_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003862:	f7ff fa1a 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800386e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003872:	4619      	mov	r1, r3
 8003874:	4820      	ldr	r0, [pc, #128]	; (80038f8 <MX_TIM8_Init+0x138>)
 8003876:	f003 fb1f 	bl	8006eb8 <HAL_TIMEx_MasterConfigSynchronization>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003880:	f7ff fa0b 	bl	8002c9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003884:	2360      	movs	r3, #96	; 0x60
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8003888:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800388e:	2300      	movs	r3, #0
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800389e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a2:	220c      	movs	r2, #12
 80038a4:	4619      	mov	r1, r3
 80038a6:	4814      	ldr	r0, [pc, #80]	; (80038f8 <MX_TIM8_Init+0x138>)
 80038a8:	f002 fe4c 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80038b2:	f7ff f9f2 	bl	8002c9a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4807      	ldr	r0, [pc, #28]	; (80038f8 <MX_TIM8_Init+0x138>)
 80038da:	f003 fb69 	bl	8006fb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80038e4:	f7ff f9d9 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80038e8:	4803      	ldr	r0, [pc, #12]	; (80038f8 <MX_TIM8_Init+0x138>)
 80038ea:	f000 f97f 	bl	8003bec <HAL_TIM_MspPostInit>

}
 80038ee:	bf00      	nop
 80038f0:	3758      	adds	r7, #88	; 0x58
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000658 	.word	0x20000658
 80038fc:	40010400 	.word	0x40010400

08003900 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003906:	1d3b      	adds	r3, r7, #4
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
 8003914:	615a      	str	r2, [r3, #20]
 8003916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <MX_TIM11_Init+0x94>)
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <MX_TIM11_Init+0x98>)
 800391c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <MX_TIM11_Init+0x94>)
 8003920:	22b3      	movs	r2, #179	; 0xb3
 8003922:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <MX_TIM11_Init+0x94>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <MX_TIM11_Init+0x94>)
 800392c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003930:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <MX_TIM11_Init+0x94>)
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <MX_TIM11_Init+0x94>)
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800393e:	4815      	ldr	r0, [pc, #84]	; (8003994 <MX_TIM11_Init+0x94>)
 8003940:	f002 f9e2 	bl	8005d08 <HAL_TIM_Base_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800394a:	f7ff f9a6 	bl	8002c9a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800394e:	4811      	ldr	r0, [pc, #68]	; (8003994 <MX_TIM11_Init+0x94>)
 8003950:	f002 fa9a 	bl	8005e88 <HAL_TIM_PWM_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800395a:	f7ff f99e 	bl	8002c9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800395e:	2360      	movs	r3, #96	; 0x60
 8003960:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2200      	movs	r2, #0
 8003972:	4619      	mov	r1, r3
 8003974:	4807      	ldr	r0, [pc, #28]	; (8003994 <MX_TIM11_Init+0x94>)
 8003976:	f002 fde5 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8003980:	f7ff f98b 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003984:	4803      	ldr	r0, [pc, #12]	; (8003994 <MX_TIM11_Init+0x94>)
 8003986:	f000 f931 	bl	8003bec <HAL_TIM_MspPostInit>

}
 800398a:	bf00      	nop
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000730 	.word	0x20000730
 8003998:	40014800 	.word	0x40014800

0800399c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <HAL_TIM_Encoder_MspInit+0xe8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d12d      	bne.n	8003a1a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	481e      	ldr	r0, [pc, #120]	; (8003a8c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003a14:	f001 f9f8 	bl	8004e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a18:	e030      	b.n	8003a7c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d12b      	bne.n	8003a7c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	6413      	str	r3, [r2, #64]	; 0x40
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_TIM_Encoder_MspInit+0xec>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a5c:	23c0      	movs	r3, #192	; 0xc0
 8003a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4805      	ldr	r0, [pc, #20]	; (8003a8c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003a78:	f001 f9c6 	bl	8004e08 <HAL_GPIO_Init>
}
 8003a7c:	bf00      	nop
 8003a7e:	3730      	adds	r7, #48	; 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40000400 	.word	0x40000400

08003a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d116      	bne.n	8003ad4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a49      	ldr	r2, [pc, #292]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	201c      	movs	r0, #28
 8003ac8:	f001 f8d5 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003acc:	201c      	movs	r0, #28
 8003ace:	f001 f8ee 	bl	8004cae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003ad2:	e07a      	b.n	8003bca <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM4)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3f      	ldr	r2, [pc, #252]	; (8003bd8 <HAL_TIM_Base_MspInit+0x144>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d116      	bne.n	8003b0c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2101      	movs	r1, #1
 8003afe:	201e      	movs	r0, #30
 8003b00:	f001 f8b9 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b04:	201e      	movs	r0, #30
 8003b06:	f001 f8d2 	bl	8004cae <HAL_NVIC_EnableIRQ>
}
 8003b0a:	e05e      	b.n	8003bca <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM6)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <HAL_TIM_Base_MspInit+0x148>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d116      	bne.n	8003b44 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a2d      	ldr	r2, [pc, #180]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2102      	movs	r1, #2
 8003b36:	2036      	movs	r0, #54	; 0x36
 8003b38:	f001 f89d 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b3c:	2036      	movs	r0, #54	; 0x36
 8003b3e:	f001 f8b6 	bl	8004cae <HAL_NVIC_EnableIRQ>
}
 8003b42:	e042      	b.n	8003bca <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM7)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_TIM_Base_MspInit+0x14c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d116      	bne.n	8003b7c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b58:	f043 0320 	orr.w	r3, r3, #32
 8003b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	2037      	movs	r0, #55	; 0x37
 8003b70:	f001 f881 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b74:	2037      	movs	r0, #55	; 0x37
 8003b76:	f001 f89a 	bl	8004cae <HAL_NVIC_EnableIRQ>
}
 8003b7a:	e026      	b.n	8003bca <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_TIM_Base_MspInit+0x150>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d10e      	bne.n	8003ba4 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	6453      	str	r3, [r2, #68]	; 0x44
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	e012      	b.n	8003bca <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM11)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0f      	ldr	r2, [pc, #60]	; (8003be8 <HAL_TIM_Base_MspInit+0x154>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10d      	bne.n	8003bca <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_TIM_Base_MspInit+0x140>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
}
 8003bca:	bf00      	nop
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40001000 	.word	0x40001000
 8003be0:	40001400 	.word	0x40001400
 8003be4:	40010400 	.word	0x40010400
 8003be8:	40014800 	.word	0x40014800

08003bec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <HAL_TIM_MspPostInit+0xb4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d11f      	bne.n	8003c4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_TIM_MspPostInit+0xb8>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_TIM_MspPostInit+0xb8>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_TIM_MspPostInit+0xb8>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4619      	mov	r1, r3
 8003c46:	4818      	ldr	r0, [pc, #96]	; (8003ca8 <HAL_TIM_MspPostInit+0xbc>)
 8003c48:	f001 f8de 	bl	8004e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003c4c:	e023      	b.n	8003c96 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_TIM_MspPostInit+0xc0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d11e      	bne.n	8003c96 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_TIM_MspPostInit+0xb8>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <HAL_TIM_MspPostInit+0xb8>)
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	6313      	str	r3, [r2, #48]	; 0x30
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <HAL_TIM_MspPostInit+0xb8>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003c86:	2303      	movs	r3, #3
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4807      	ldr	r0, [pc, #28]	; (8003cb0 <HAL_TIM_MspPostInit+0xc4>)
 8003c92:	f001 f8b9 	bl	8004e08 <HAL_GPIO_Init>
}
 8003c96:	bf00      	nop
 8003c98:	3728      	adds	r7, #40	; 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40010400 	.word	0x40010400
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40014800 	.word	0x40014800
 8003cb0:	40020400 	.word	0x40020400

08003cb4 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <MX_UART4_Init+0x50>)
 8003cbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cda:	220c      	movs	r2, #12
 8003cdc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <MX_UART4_Init+0x4c>)
 8003cec:	f003 f9c6 	bl	800707c <HAL_UART_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003cf6:	f7fe ffd0 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000964 	.word	0x20000964
 8003d04:	40004c00 	.word	0x40004c00

08003d08 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	; (8003d58 <MX_UART5_Init+0x50>)
 8003d10:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003d12:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d18:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d2e:	220c      	movs	r2, #12
 8003d30:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003d3e:	4805      	ldr	r0, [pc, #20]	; (8003d54 <MX_UART5_Init+0x4c>)
 8003d40:	f003 f99c 	bl	800707c <HAL_UART_Init>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003d4a:	f7fe ffa6 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200008dc 	.word	0x200008dc
 8003d58:	40005000 	.word	0x40005000

08003d5c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <MX_USART1_UART_Init+0x50>)
 8003d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d82:	220c      	movs	r2, #12
 8003d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <MX_USART1_UART_Init+0x4c>)
 8003d94:	f003 f972 	bl	800707c <HAL_UART_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d9e:	f7fe ff7c 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000920 	.word	0x20000920
 8003dac:	40011000 	.word	0x40011000

08003db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <MX_USART2_UART_Init+0x50>)
 8003db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003de6:	4805      	ldr	r0, [pc, #20]	; (8003dfc <MX_USART2_UART_Init+0x4c>)
 8003de8:	f003 f948 	bl	800707c <HAL_UART_Init>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003df2:	f7fe ff52 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200009a8 	.word	0x200009a8
 8003e00:	40004400 	.word	0x40004400

08003e04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e0a:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <MX_USART3_UART_Init+0x4c>)
 8003e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e10:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <MX_USART3_UART_Init+0x50>)
 8003e12:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e28:	220c      	movs	r2, #12
 8003e2a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <MX_USART3_UART_Init+0x48>)
 8003e3a:	f003 f91f 	bl	800707c <HAL_UART_Init>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003e44:	f7fe ff29 	bl	8002c9a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000898 	.word	0x20000898
 8003e50:	40004800 	.word	0x40004800
 8003e54:	0003d090 	.word	0x0003d090

08003e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b094      	sub	sp, #80	; 0x50
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a8d      	ldr	r2, [pc, #564]	; (80040ac <HAL_UART_MspInit+0x254>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d134      	bne.n	8003ee4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7e:	4b8c      	ldr	r3, [pc, #560]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a8b      	ldr	r2, [pc, #556]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b89      	ldr	r3, [pc, #548]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	4b85      	ldr	r3, [pc, #532]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	4a84      	ldr	r2, [pc, #528]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea6:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4879      	ldr	r0, [pc, #484]	; (80040b4 <HAL_UART_MspInit+0x25c>)
 8003ece:	f000 ff9b 	bl	8004e08 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2034      	movs	r0, #52	; 0x34
 8003ed8:	f000 fecd 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003edc:	2034      	movs	r0, #52	; 0x34
 8003ede:	f000 fee6 	bl	8004cae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003ee2:	e145      	b.n	8004170 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART5)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a73      	ldr	r2, [pc, #460]	; (80040b8 <HAL_UART_MspInit+0x260>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d153      	bne.n	8003f96 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef2:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a6e      	ldr	r2, [pc, #440]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0e:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a67      	ldr	r2, [pc, #412]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2a:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a60      	ldr	r2, [pc, #384]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b5e      	ldr	r3, [pc, #376]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f50:	2303      	movs	r3, #3
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003f54:	2308      	movs	r3, #8
 8003f56:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4857      	ldr	r0, [pc, #348]	; (80040bc <HAL_UART_MspInit+0x264>)
 8003f60:	f000 ff52 	bl	8004e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f64:	2304      	movs	r3, #4
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f70:	2303      	movs	r3, #3
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003f74:	2308      	movs	r3, #8
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4850      	ldr	r0, [pc, #320]	; (80040c0 <HAL_UART_MspInit+0x268>)
 8003f80:	f000 ff42 	bl	8004e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003f84:	2200      	movs	r2, #0
 8003f86:	2100      	movs	r1, #0
 8003f88:	2035      	movs	r0, #53	; 0x35
 8003f8a:	f000 fe74 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003f8e:	2035      	movs	r0, #53	; 0x35
 8003f90:	f000 fe8d 	bl	8004cae <HAL_NVIC_EnableIRQ>
}
 8003f94:	e0ec      	b.n	8004170 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <HAL_UART_MspInit+0x26c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d14b      	bne.n	8004038 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	4a41      	ldr	r2, [pc, #260]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003faa:	f043 0310 	orr.w	r3, r3, #16
 8003fae:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb0:	4b3f      	ldr	r3, [pc, #252]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	4a3a      	ldr	r2, [pc, #232]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	6313      	str	r3, [r2, #48]	; 0x30
 8003fcc:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	4a33      	ldr	r2, [pc, #204]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe8:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004002:	2303      	movs	r3, #3
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004006:	2307      	movs	r3, #7
 8004008:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800400e:	4619      	mov	r1, r3
 8004010:	4828      	ldr	r0, [pc, #160]	; (80040b4 <HAL_UART_MspInit+0x25c>)
 8004012:	f000 fef9 	bl	8004e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401a:	2302      	movs	r3, #2
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401e:	2300      	movs	r3, #0
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004022:	2303      	movs	r3, #3
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004026:	2307      	movs	r3, #7
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800402e:	4619      	mov	r1, r3
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <HAL_UART_MspInit+0x270>)
 8004032:	f000 fee9 	bl	8004e08 <HAL_GPIO_Init>
}
 8004036:	e09b      	b.n	8004170 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a23      	ldr	r2, [pc, #140]	; (80040cc <HAL_UART_MspInit+0x274>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d146      	bne.n	80040d0 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_UART_MspInit+0x258>)
 800404c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004050:	6413      	str	r3, [r2, #64]	; 0x40
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
 800406e:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_UART_MspInit+0x258>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800407a:	230c      	movs	r3, #12
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004086:	2303      	movs	r3, #3
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800408a:	2307      	movs	r3, #7
 800408c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004092:	4619      	mov	r1, r3
 8004094:	4807      	ldr	r0, [pc, #28]	; (80040b4 <HAL_UART_MspInit+0x25c>)
 8004096:	f000 feb7 	bl	8004e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800409a:	2200      	movs	r2, #0
 800409c:	2105      	movs	r1, #5
 800409e:	2026      	movs	r0, #38	; 0x26
 80040a0:	f000 fde9 	bl	8004c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040a4:	2026      	movs	r0, #38	; 0x26
 80040a6:	f000 fe02 	bl	8004cae <HAL_NVIC_EnableIRQ>
}
 80040aa:	e061      	b.n	8004170 <HAL_UART_MspInit+0x318>
 80040ac:	40004c00 	.word	0x40004c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40005000 	.word	0x40005000
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020c00 	.word	0x40020c00
 80040c4:	40011000 	.word	0x40011000
 80040c8:	40020400 	.word	0x40020400
 80040cc:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a28      	ldr	r2, [pc, #160]	; (8004178 <HAL_UART_MspInit+0x320>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d14a      	bne.n	8004170 <HAL_UART_MspInit+0x318>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <HAL_UART_MspInit+0x324>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a26      	ldr	r2, [pc, #152]	; (800417c <HAL_UART_MspInit+0x324>)
 80040e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_UART_MspInit+0x324>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_UART_MspInit+0x324>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_UART_MspInit+0x324>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_UART_MspInit+0x324>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_UART_MspInit+0x324>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_UART_MspInit+0x324>)
 800411c:	f043 0302 	orr.w	r3, r3, #2
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_UART_MspInit+0x324>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800412e:	2320      	movs	r3, #32
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413a:	2303      	movs	r3, #3
 800413c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800413e:	2307      	movs	r3, #7
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004142:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004146:	4619      	mov	r1, r3
 8004148:	480d      	ldr	r0, [pc, #52]	; (8004180 <HAL_UART_MspInit+0x328>)
 800414a:	f000 fe5d 	bl	8004e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800414e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	2302      	movs	r3, #2
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	2300      	movs	r3, #0
 800415a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415c:	2303      	movs	r3, #3
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004160:	2307      	movs	r3, #7
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004168:	4619      	mov	r1, r3
 800416a:	4806      	ldr	r0, [pc, #24]	; (8004184 <HAL_UART_MspInit+0x32c>)
 800416c:	f000 fe4c 	bl	8004e08 <HAL_GPIO_Init>
}
 8004170:	bf00      	nop
 8004172:	3750      	adds	r7, #80	; 0x50
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40004800 	.word	0x40004800
 800417c:	40023800 	.word	0x40023800
 8004180:	40020800 	.word	0x40020800
 8004184:	40020400 	.word	0x40020400

08004188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800418c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800418e:	e003      	b.n	8004198 <LoopCopyDataInit>

08004190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004196:	3104      	adds	r1, #4

08004198 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800419c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800419e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041a0:	d3f6      	bcc.n	8004190 <CopyDataInit>
  ldr  r2, =_sbss
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041a4:	e002      	b.n	80041ac <LoopFillZerobss>

080041a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041a8:	f842 3b04 	str.w	r3, [r2], #4

080041ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041b0:	d3f9      	bcc.n	80041a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041b2:	f7ff f93d 	bl	8003430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041b6:	f003 fe71 	bl	8007e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041ba:	f7fe faa1 	bl	8002700 <main>
  bx  lr    
 80041be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041c4:	0800d6d0 	.word	0x0800d6d0
  ldr  r0, =_sdata
 80041c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041cc:	20000428 	.word	0x20000428
  ldr  r2, =_sbss
 80041d0:	20000428 	.word	0x20000428
  ldr  r3, = _ebss
 80041d4:	20000a00 	.word	0x20000a00

080041d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041d8:	e7fe      	b.n	80041d8 <ADC_IRQHandler>
	...

080041dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <HAL_Init+0x40>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_Init+0x40>)
 80041e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_Init+0x40>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_Init+0x40>)
 80041f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_Init+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_Init+0x40>)
 80041fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004204:	2003      	movs	r0, #3
 8004206:	f000 fd2b 	bl	8004c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800420a:	2000      	movs	r0, #0
 800420c:	f000 f808 	bl	8004220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004210:	f7ff f82e 	bl	8003270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00

08004220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_InitTick+0x54>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_InitTick+0x58>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	4619      	mov	r1, r3
 8004232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004236:	fbb3 f3f1 	udiv	r3, r3, r1
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fd43 	bl	8004cca <HAL_SYSTICK_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e00e      	b.n	800426c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b0f      	cmp	r3, #15
 8004252:	d80a      	bhi.n	800426a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004254:	2200      	movs	r2, #0
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	f000 fd0b 	bl	8004c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004260:	4a06      	ldr	r2, [pc, #24]	; (800427c <HAL_InitTick+0x5c>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000248 	.word	0x20000248
 8004278:	20000250 	.word	0x20000250
 800427c:	2000024c 	.word	0x2000024c

08004280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_IncTick+0x20>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_IncTick+0x24>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4413      	add	r3, r2
 8004290:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <HAL_IncTick+0x24>)
 8004292:	6013      	str	r3, [r2, #0]
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000250 	.word	0x20000250
 80042a4:	200009ec 	.word	0x200009ec

080042a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return uwTick;
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_GetTick+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	200009ec 	.word	0x200009ec

080042c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042c8:	f7ff ffee 	bl	80042a8 <HAL_GetTick>
 80042cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d005      	beq.n	80042e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_Delay+0x44>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042e6:	bf00      	nop
 80042e8:	f7ff ffde 	bl	80042a8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d8f7      	bhi.n	80042e8 <HAL_Delay+0x28>
  {
  }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000250 	.word	0x20000250

08004308 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e033      	b.n	8004386 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fb6c 	bl	8001a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800434e:	f023 0302 	bic.w	r3, r3, #2
 8004352:	f043 0202 	orr.w	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fab4 	bl	80048c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	f043 0201 	orr.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
 8004376:	e001      	b.n	800437c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_Start+0x1a>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e0b2      	b.n	8004510 <HAL_ADC_Start+0x180>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d018      	beq.n	80043f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043d0:	4b52      	ldr	r3, [pc, #328]	; (800451c <HAL_ADC_Start+0x18c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_ADC_Start+0x190>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	0c9a      	lsrs	r2, r3, #18
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043e4:	e002      	b.n	80043ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f9      	bne.n	80043e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d17a      	bne.n	80044f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800442a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443e:	d106      	bne.n	800444e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f023 0206 	bic.w	r2, r3, #6
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
 800444c:	e002      	b.n	8004454 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_ADC_Start+0x194>)
 800445e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004468:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2b00      	cmp	r3, #0
 8004474:	d12a      	bne.n	80044cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <HAL_ADC_Start+0x198>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d015      	beq.n	80044ac <HAL_ADC_Start+0x11c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a29      	ldr	r2, [pc, #164]	; (800452c <HAL_ADC_Start+0x19c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d105      	bne.n	8004496 <HAL_ADC_Start+0x106>
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <HAL_ADC_Start+0x194>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a25      	ldr	r2, [pc, #148]	; (8004530 <HAL_ADC_Start+0x1a0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d136      	bne.n	800450e <HAL_ADC_Start+0x17e>
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_ADC_Start+0x194>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d130      	bne.n	800450e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d129      	bne.n	800450e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044c8:	609a      	str	r2, [r3, #8]
 80044ca:	e020      	b.n	800450e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <HAL_ADC_Start+0x198>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d11b      	bne.n	800450e <HAL_ADC_Start+0x17e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d114      	bne.n	800450e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	e00b      	b.n	800450e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f043 0210 	orr.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000248 	.word	0x20000248
 8004520:	431bde83 	.word	0x431bde83
 8004524:	40012300 	.word	0x40012300
 8004528:	40012000 	.word	0x40012000
 800452c:	40012100 	.word	0x40012100
 8004530:	40012200 	.word	0x40012200

08004534 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004550:	d113      	bne.n	800457a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800455c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004560:	d10b      	bne.n	800457a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e063      	b.n	8004642 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800457a:	f7ff fe95 	bl	80042a8 <HAL_GetTick>
 800457e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004580:	e021      	b.n	80045c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d01d      	beq.n	80045c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <HAL_ADC_PollForConversion+0x6c>
 8004590:	f7ff fe8a 	bl	80042a8 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d212      	bcs.n	80045c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d00b      	beq.n	80045c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e03d      	b.n	8004642 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d1d6      	bne.n	8004582 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0212 	mvn.w	r2, #18
 80045dc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d123      	bne.n	8004640 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11f      	bne.n	8004640 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x1c>
 800467c:	2302      	movs	r3, #2
 800467e:	e113      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x244>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b09      	cmp	r3, #9
 800468e:	d925      	bls.n	80046dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68d9      	ldr	r1, [r3, #12]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	4613      	mov	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	4413      	add	r3, r2
 80046a4:	3b1e      	subs	r3, #30
 80046a6:	2207      	movs	r2, #7
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43da      	mvns	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	400a      	ands	r2, r1
 80046b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68d9      	ldr	r1, [r3, #12]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	4603      	mov	r3, r0
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	4403      	add	r3, r0
 80046ce:	3b1e      	subs	r3, #30
 80046d0:	409a      	lsls	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e022      	b.n	8004722 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6919      	ldr	r1, [r3, #16]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	2207      	movs	r2, #7
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43da      	mvns	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	400a      	ands	r2, r1
 80046fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6919      	ldr	r1, [r3, #16]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	4618      	mov	r0, r3
 8004712:	4603      	mov	r3, r0
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4403      	add	r3, r0
 8004718:	409a      	lsls	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b06      	cmp	r3, #6
 8004728:	d824      	bhi.n	8004774 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	3b05      	subs	r3, #5
 800473c:	221f      	movs	r2, #31
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	400a      	ands	r2, r1
 800474a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	4618      	mov	r0, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	3b05      	subs	r3, #5
 8004766:	fa00 f203 	lsl.w	r2, r0, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	635a      	str	r2, [r3, #52]	; 0x34
 8004772:	e04c      	b.n	800480e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d824      	bhi.n	80047c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	3b23      	subs	r3, #35	; 0x23
 800478e:	221f      	movs	r2, #31
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43da      	mvns	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	400a      	ands	r2, r1
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	3b23      	subs	r3, #35	; 0x23
 80047b8:	fa00 f203 	lsl.w	r2, r0, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
 80047c4:	e023      	b.n	800480e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	3b41      	subs	r3, #65	; 0x41
 80047d8:	221f      	movs	r2, #31
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43da      	mvns	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	400a      	ands	r2, r1
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	4618      	mov	r0, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	3b41      	subs	r3, #65	; 0x41
 8004802:	fa00 f203 	lsl.w	r2, r0, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <HAL_ADC_ConfigChannel+0x250>)
 8004810:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a28      	ldr	r2, [pc, #160]	; (80048b8 <HAL_ADC_ConfigChannel+0x254>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d10f      	bne.n	800483c <HAL_ADC_ConfigChannel+0x1d8>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b12      	cmp	r3, #18
 8004822:	d10b      	bne.n	800483c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <HAL_ADC_ConfigChannel+0x254>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d12b      	bne.n	800489e <HAL_ADC_ConfigChannel+0x23a>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_ADC_ConfigChannel+0x258>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <HAL_ADC_ConfigChannel+0x1f4>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b11      	cmp	r3, #17
 8004856:	d122      	bne.n	800489e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_ADC_ConfigChannel+0x258>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d111      	bne.n	800489e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800487a:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <HAL_ADC_ConfigChannel+0x25c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <HAL_ADC_ConfigChannel+0x260>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	0c9a      	lsrs	r2, r3, #18
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004890:	e002      	b.n	8004898 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3b01      	subs	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f9      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012300 	.word	0x40012300
 80048b8:	40012000 	.word	0x40012000
 80048bc:	10000012 	.word	0x10000012
 80048c0:	20000248 	.word	0x20000248
 80048c4:	431bde83 	.word	0x431bde83

080048c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048d0:	4b79      	ldr	r3, [pc, #484]	; (8004ab8 <ADC_Init+0x1f0>)
 80048d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	021a      	lsls	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004942:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6899      	ldr	r1, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	4a58      	ldr	r2, [pc, #352]	; (8004abc <ADC_Init+0x1f4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800496e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6899      	ldr	r1, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6899      	ldr	r1, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e00f      	b.n	80049c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0202 	bic.w	r2, r2, #2
 80049d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	7e1b      	ldrb	r3, [r3, #24]
 80049e0:	005a      	lsls	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	035a      	lsls	r2, r3, #13
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	e007      	b.n	8004a3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	051a      	lsls	r2, r3, #20
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a7e:	025a      	lsls	r2, r3, #9
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6899      	ldr	r1, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	029a      	lsls	r2, r3, #10
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40012300 	.word	0x40012300
 8004abc:	0f000001 	.word	0x0f000001

08004ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004adc:	4013      	ands	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004af2:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <__NVIC_SetPriorityGrouping+0x44>)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	60d3      	str	r3, [r2, #12]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <__NVIC_GetPriorityGrouping+0x18>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	f003 0307 	and.w	r3, r3, #7
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	db0b      	blt.n	8004b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	f003 021f 	and.w	r2, r3, #31
 8004b3c:	4907      	ldr	r1, [pc, #28]	; (8004b5c <__NVIC_EnableIRQ+0x38>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2001      	movs	r0, #1
 8004b46:	fa00 f202 	lsl.w	r2, r0, r2
 8004b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000e100 	.word	0xe000e100

08004b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	6039      	str	r1, [r7, #0]
 8004b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db0a      	blt.n	8004b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <__NVIC_SetPriority+0x4c>)
 8004b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7e:	0112      	lsls	r2, r2, #4
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	440b      	add	r3, r1
 8004b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b88:	e00a      	b.n	8004ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	4908      	ldr	r1, [pc, #32]	; (8004bb0 <__NVIC_SetPriority+0x50>)
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	3b04      	subs	r3, #4
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	761a      	strb	r2, [r3, #24]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000e100 	.word	0xe000e100
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f1c3 0307 	rsb	r3, r3, #7
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	bf28      	it	cs
 8004bd2:	2304      	movcs	r3, #4
 8004bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d902      	bls.n	8004be4 <NVIC_EncodePriority+0x30>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3b03      	subs	r3, #3
 8004be2:	e000      	b.n	8004be6 <NVIC_EncodePriority+0x32>
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	43d9      	mvns	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c0c:	4313      	orrs	r3, r2
         );
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3724      	adds	r7, #36	; 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c2c:	d301      	bcc.n	8004c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e00f      	b.n	8004c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <SysTick_Config+0x40>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c3a:	210f      	movs	r1, #15
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	f7ff ff8e 	bl	8004b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <SysTick_Config+0x40>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c4a:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <SysTick_Config+0x40>)
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	e000e010 	.word	0xe000e010

08004c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff29 	bl	8004ac0 <__NVIC_SetPriorityGrouping>
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c88:	f7ff ff3e 	bl	8004b08 <__NVIC_GetPriorityGrouping>
 8004c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	f7ff ff8e 	bl	8004bb4 <NVIC_EncodePriority>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff ff5d 	bl	8004b60 <__NVIC_SetPriority>
}
 8004ca6:	bf00      	nop
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff ff31 	bl	8004b24 <__NVIC_EnableIRQ>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ffa2 	bl	8004c1c <SysTick_Config>
 8004cd8:	4603      	mov	r3, r0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cf0:	f7ff fada 	bl	80042a8 <HAL_GetTick>
 8004cf4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d008      	beq.n	8004d14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e052      	b.n	8004dba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0216 	bic.w	r2, r2, #22
 8004d22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <HAL_DMA_Abort+0x62>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0208 	bic.w	r2, r2, #8
 8004d52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d64:	e013      	b.n	8004d8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d66:	f7ff fa9f 	bl	80042a8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d90c      	bls.n	8004d8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e015      	b.n	8004dba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e4      	bne.n	8004d66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	223f      	movs	r2, #63	; 0x3f
 8004da2:	409a      	lsls	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d004      	beq.n	8004de0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e00c      	b.n	8004dfa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2205      	movs	r2, #5
 8004de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	e165      	b.n	80050f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e24:	2201      	movs	r2, #1
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f040 8154 	bne.w	80050ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d005      	beq.n	8004e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d130      	bne.n	8004ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	2203      	movs	r2, #3
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e90:	2201      	movs	r2, #1
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 0201 	and.w	r2, r3, #1
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d017      	beq.n	8004ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d123      	bne.n	8004f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	08da      	lsrs	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	08da      	lsrs	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3208      	adds	r2, #8
 8004f46:	69b9      	ldr	r1, [r7, #24]
 8004f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0203 	and.w	r2, r3, #3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80ae 	beq.w	80050ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	4b5d      	ldr	r3, [pc, #372]	; (8005108 <HAL_GPIO_Init+0x300>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	4a5c      	ldr	r2, [pc, #368]	; (8005108 <HAL_GPIO_Init+0x300>)
 8004f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9e:	4b5a      	ldr	r3, [pc, #360]	; (8005108 <HAL_GPIO_Init+0x300>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004faa:	4a58      	ldr	r2, [pc, #352]	; (800510c <HAL_GPIO_Init+0x304>)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	220f      	movs	r2, #15
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4f      	ldr	r2, [pc, #316]	; (8005110 <HAL_GPIO_Init+0x308>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d025      	beq.n	8005022 <HAL_GPIO_Init+0x21a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <HAL_GPIO_Init+0x30c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01f      	beq.n	800501e <HAL_GPIO_Init+0x216>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a4d      	ldr	r2, [pc, #308]	; (8005118 <HAL_GPIO_Init+0x310>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d019      	beq.n	800501a <HAL_GPIO_Init+0x212>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a4c      	ldr	r2, [pc, #304]	; (800511c <HAL_GPIO_Init+0x314>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_GPIO_Init+0x20e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a4b      	ldr	r2, [pc, #300]	; (8005120 <HAL_GPIO_Init+0x318>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00d      	beq.n	8005012 <HAL_GPIO_Init+0x20a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a4a      	ldr	r2, [pc, #296]	; (8005124 <HAL_GPIO_Init+0x31c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <HAL_GPIO_Init+0x206>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a49      	ldr	r2, [pc, #292]	; (8005128 <HAL_GPIO_Init+0x320>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <HAL_GPIO_Init+0x202>
 8005006:	2306      	movs	r3, #6
 8005008:	e00c      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 800500a:	2307      	movs	r3, #7
 800500c:	e00a      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 800500e:	2305      	movs	r3, #5
 8005010:	e008      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 8005012:	2304      	movs	r3, #4
 8005014:	e006      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 8005016:	2303      	movs	r3, #3
 8005018:	e004      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 800501a:	2302      	movs	r3, #2
 800501c:	e002      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <HAL_GPIO_Init+0x21c>
 8005022:	2300      	movs	r3, #0
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	f002 0203 	and.w	r2, r2, #3
 800502a:	0092      	lsls	r2, r2, #2
 800502c:	4093      	lsls	r3, r2
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005034:	4935      	ldr	r1, [pc, #212]	; (800510c <HAL_GPIO_Init+0x304>)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	3302      	adds	r3, #2
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005042:	4b3a      	ldr	r3, [pc, #232]	; (800512c <HAL_GPIO_Init+0x324>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	43db      	mvns	r3, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005066:	4a31      	ldr	r2, [pc, #196]	; (800512c <HAL_GPIO_Init+0x324>)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800506c:	4b2f      	ldr	r3, [pc, #188]	; (800512c <HAL_GPIO_Init+0x324>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_GPIO_Init+0x324>)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005096:	4b25      	ldr	r3, [pc, #148]	; (800512c <HAL_GPIO_Init+0x324>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_GPIO_Init+0x324>)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <HAL_GPIO_Init+0x324>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050e4:	4a11      	ldr	r2, [pc, #68]	; (800512c <HAL_GPIO_Init+0x324>)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b0f      	cmp	r3, #15
 80050f4:	f67f ae96 	bls.w	8004e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	40013800 	.word	0x40013800
 8005110:	40020000 	.word	0x40020000
 8005114:	40020400 	.word	0x40020400
 8005118:	40020800 	.word	0x40020800
 800511c:	40020c00 	.word	0x40020c00
 8005120:	40021000 	.word	0x40021000
 8005124:	40021400 	.word	0x40021400
 8005128:	40021800 	.word	0x40021800
 800512c:	40013c00 	.word	0x40013c00

08005130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	807b      	strh	r3, [r7, #2]
 800513c:	4613      	mov	r3, r2
 800513e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005140:	787b      	ldrb	r3, [r7, #1]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005146:	887a      	ldrh	r2, [r7, #2]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800514c:	e003      	b.n	8005156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	041a      	lsls	r2, r3, #16
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	619a      	str	r2, [r3, #24]
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800517a:	4a05      	ldr	r2, [pc, #20]	; (8005190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd fd7e 	bl	8002c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8005188:	bf00      	nop
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40013c00 	.word	0x40013c00

08005194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_PWREx_EnableOverDrive+0x90>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <HAL_PWREx_EnableOverDrive+0x90>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <HAL_PWREx_EnableOverDrive+0x90>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <HAL_PWREx_EnableOverDrive+0x94>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c0:	f7ff f872 	bl	80042a8 <HAL_GetTick>
 80051c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051c6:	e009      	b.n	80051dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051c8:	f7ff f86e 	bl	80042a8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051d6:	d901      	bls.n	80051dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e01f      	b.n	800521c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051dc:	4b13      	ldr	r3, [pc, #76]	; (800522c <HAL_PWREx_EnableOverDrive+0x98>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e8:	d1ee      	bne.n	80051c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f0:	f7ff f85a 	bl	80042a8 <HAL_GetTick>
 80051f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051f6:	e009      	b.n	800520c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051f8:	f7ff f856 	bl	80042a8 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005206:	d901      	bls.n	800520c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e007      	b.n	800521c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_PWREx_EnableOverDrive+0x98>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005218:	d1ee      	bne.n	80051f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40023800 	.word	0x40023800
 8005228:	420e0040 	.word	0x420e0040
 800522c:	40007000 	.word	0x40007000
 8005230:	420e0044 	.word	0x420e0044

08005234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0cc      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005248:	4b68      	ldr	r3, [pc, #416]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d90c      	bls.n	8005270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b65      	ldr	r3, [pc, #404]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b63      	ldr	r3, [pc, #396]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0b8      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005288:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a58      	ldr	r2, [pc, #352]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052a0:	4b53      	ldr	r3, [pc, #332]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b50      	ldr	r3, [pc, #320]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	494d      	ldr	r1, [pc, #308]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d044      	beq.n	8005354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	4b47      	ldr	r3, [pc, #284]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d119      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e07f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f2:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e06f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005302:	4b3b      	ldr	r3, [pc, #236]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e067      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4934      	ldr	r1, [pc, #208]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005324:	f7fe ffc0 	bl	80042a8 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fe ffbc 	bl	80042a8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e04f      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 020c 	and.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	429a      	cmp	r2, r3
 8005352:	d1eb      	bne.n	800532c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d20c      	bcs.n	800537c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b22      	ldr	r3, [pc, #136]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e032      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	4916      	ldr	r1, [pc, #88]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	490e      	ldr	r1, [pc, #56]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ba:	f000 f855 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 80053be:	4602      	mov	r2, r0
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	490a      	ldr	r1, [pc, #40]	; (80053f4 <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCC_ClockConfig+0x1c8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe ff20 	bl	8004220 <HAL_InitTick>

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40023c00 	.word	0x40023c00
 80053f0:	40023800 	.word	0x40023800
 80053f4:	0800d028 	.word	0x0800d028
 80053f8:	20000248 	.word	0x20000248
 80053fc:	2000024c 	.word	0x2000024c

08005400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_GetHCLKFreq+0x14>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000248 	.word	0x20000248

08005418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800541c:	f7ff fff0 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0a9b      	lsrs	r3, r3, #10
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCC_GetPCLK1Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	0800d038 	.word	0x0800d038

08005440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005444:	f7ff ffdc 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0b5b      	lsrs	r3, r3, #13
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	; (8005464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	0800d038 	.word	0x0800d038

08005468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b088      	sub	sp, #32
 800546e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005484:	4bce      	ldr	r3, [pc, #824]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 030c 	and.w	r3, r3, #12
 800548c:	2b0c      	cmp	r3, #12
 800548e:	f200 818d 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x344>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <HAL_RCC_GetSysClockFreq+0x30>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054cd 	.word	0x080054cd
 800549c:	080057ad 	.word	0x080057ad
 80054a0:	080057ad 	.word	0x080057ad
 80054a4:	080057ad 	.word	0x080057ad
 80054a8:	080054d3 	.word	0x080054d3
 80054ac:	080057ad 	.word	0x080057ad
 80054b0:	080057ad 	.word	0x080057ad
 80054b4:	080057ad 	.word	0x080057ad
 80054b8:	080054d9 	.word	0x080054d9
 80054bc:	080057ad 	.word	0x080057ad
 80054c0:	080057ad 	.word	0x080057ad
 80054c4:	080057ad 	.word	0x080057ad
 80054c8:	0800564d 	.word	0x0800564d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054cc:	4bbd      	ldr	r3, [pc, #756]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80054ce:	61bb      	str	r3, [r7, #24]
       break;
 80054d0:	e16f      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d2:	4bbd      	ldr	r3, [pc, #756]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x360>)
 80054d4:	61bb      	str	r3, [r7, #24]
      break;
 80054d6:	e16c      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d8:	4bb9      	ldr	r3, [pc, #740]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e2:	4bb7      	ldr	r3, [pc, #732]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d053      	beq.n	8005596 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ee:	4bb4      	ldr	r3, [pc, #720]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	461a      	mov	r2, r3
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054fe:	f04f 0100 	mov.w	r1, #0
 8005502:	ea02 0400 	and.w	r4, r2, r0
 8005506:	603c      	str	r4, [r7, #0]
 8005508:	400b      	ands	r3, r1
 800550a:	607b      	str	r3, [r7, #4]
 800550c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	014b      	lsls	r3, r1, #5
 800551e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005522:	0142      	lsls	r2, r0, #5
 8005524:	4610      	mov	r0, r2
 8005526:	4619      	mov	r1, r3
 8005528:	4623      	mov	r3, r4
 800552a:	1ac0      	subs	r0, r0, r3
 800552c:	462b      	mov	r3, r5
 800552e:	eb61 0103 	sbc.w	r1, r1, r3
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	018b      	lsls	r3, r1, #6
 800553c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005540:	0182      	lsls	r2, r0, #6
 8005542:	1a12      	subs	r2, r2, r0
 8005544:	eb63 0301 	sbc.w	r3, r3, r1
 8005548:	f04f 0000 	mov.w	r0, #0
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	00d9      	lsls	r1, r3, #3
 8005552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005556:	00d0      	lsls	r0, r2, #3
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4621      	mov	r1, r4
 800555e:	1852      	adds	r2, r2, r1
 8005560:	4629      	mov	r1, r5
 8005562:	eb43 0101 	adc.w	r1, r3, r1
 8005566:	460b      	mov	r3, r1
 8005568:	f04f 0000 	mov.w	r0, #0
 800556c:	f04f 0100 	mov.w	r1, #0
 8005570:	0259      	lsls	r1, r3, #9
 8005572:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005576:	0250      	lsls	r0, r2, #9
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	461a      	mov	r2, r3
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	f7fb fb9e 	bl	8000cc8 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4613      	mov	r3, r2
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e04c      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005596:	4b8a      	ldr	r3, [pc, #552]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 0300 	mov.w	r3, #0
 80055a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	ea02 0a00 	and.w	sl, r2, r0
 80055ae:	ea03 0b01 	and.w	fp, r3, r1
 80055b2:	4650      	mov	r0, sl
 80055b4:	4659      	mov	r1, fp
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	014b      	lsls	r3, r1, #5
 80055c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055c4:	0142      	lsls	r2, r0, #5
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	ebb0 000a 	subs.w	r0, r0, sl
 80055ce:	eb61 010b 	sbc.w	r1, r1, fp
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	018b      	lsls	r3, r1, #6
 80055dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055e0:	0182      	lsls	r2, r0, #6
 80055e2:	1a12      	subs	r2, r2, r0
 80055e4:	eb63 0301 	sbc.w	r3, r3, r1
 80055e8:	f04f 0000 	mov.w	r0, #0
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	00d9      	lsls	r1, r3, #3
 80055f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055f6:	00d0      	lsls	r0, r2, #3
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	eb12 020a 	adds.w	r2, r2, sl
 8005600:	eb43 030b 	adc.w	r3, r3, fp
 8005604:	f04f 0000 	mov.w	r0, #0
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	0299      	lsls	r1, r3, #10
 800560e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005612:	0290      	lsls	r0, r2, #10
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4610      	mov	r0, r2
 800561a:	4619      	mov	r1, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	461a      	mov	r2, r3
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f7fb fb50 	bl	8000cc8 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005630:	4b63      	ldr	r3, [pc, #396]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	3301      	adds	r3, #1
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	61bb      	str	r3, [r7, #24]
      break;
 800564a:	e0b2      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800564c:	4b5c      	ldr	r3, [pc, #368]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005654:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005656:	4b5a      	ldr	r3, [pc, #360]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d04d      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005662:	4b57      	ldr	r3, [pc, #348]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	461a      	mov	r2, r3
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005672:	f04f 0100 	mov.w	r1, #0
 8005676:	ea02 0800 	and.w	r8, r2, r0
 800567a:	ea03 0901 	and.w	r9, r3, r1
 800567e:	4640      	mov	r0, r8
 8005680:	4649      	mov	r1, r9
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	014b      	lsls	r3, r1, #5
 800568c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005690:	0142      	lsls	r2, r0, #5
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	ebb0 0008 	subs.w	r0, r0, r8
 800569a:	eb61 0109 	sbc.w	r1, r1, r9
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	018b      	lsls	r3, r1, #6
 80056a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056ac:	0182      	lsls	r2, r0, #6
 80056ae:	1a12      	subs	r2, r2, r0
 80056b0:	eb63 0301 	sbc.w	r3, r3, r1
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f04f 0100 	mov.w	r1, #0
 80056bc:	00d9      	lsls	r1, r3, #3
 80056be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056c2:	00d0      	lsls	r0, r2, #3
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	eb12 0208 	adds.w	r2, r2, r8
 80056cc:	eb43 0309 	adc.w	r3, r3, r9
 80056d0:	f04f 0000 	mov.w	r0, #0
 80056d4:	f04f 0100 	mov.w	r1, #0
 80056d8:	0259      	lsls	r1, r3, #9
 80056da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80056de:	0250      	lsls	r0, r2, #9
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	f7fb faea 	bl	8000cc8 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4613      	mov	r3, r2
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e04a      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	099b      	lsrs	r3, r3, #6
 8005704:	461a      	mov	r2, r3
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800570e:	f04f 0100 	mov.w	r1, #0
 8005712:	ea02 0400 	and.w	r4, r2, r0
 8005716:	ea03 0501 	and.w	r5, r3, r1
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	014b      	lsls	r3, r1, #5
 8005728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800572c:	0142      	lsls	r2, r0, #5
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	1b00      	subs	r0, r0, r4
 8005734:	eb61 0105 	sbc.w	r1, r1, r5
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	018b      	lsls	r3, r1, #6
 8005742:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005746:	0182      	lsls	r2, r0, #6
 8005748:	1a12      	subs	r2, r2, r0
 800574a:	eb63 0301 	sbc.w	r3, r3, r1
 800574e:	f04f 0000 	mov.w	r0, #0
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	00d9      	lsls	r1, r3, #3
 8005758:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800575c:	00d0      	lsls	r0, r2, #3
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	1912      	adds	r2, r2, r4
 8005764:	eb45 0303 	adc.w	r3, r5, r3
 8005768:	f04f 0000 	mov.w	r0, #0
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	0299      	lsls	r1, r3, #10
 8005772:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005776:	0290      	lsls	r0, r2, #10
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	461a      	mov	r2, r3
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	f7fb fa9e 	bl	8000cc8 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4613      	mov	r3, r2
 8005792:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	0f1b      	lsrs	r3, r3, #28
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	61bb      	str	r3, [r7, #24]
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80057ae:	61bb      	str	r3, [r7, #24]
      break;
 80057b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b2:	69bb      	ldr	r3, [r7, #24]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	40023800 	.word	0x40023800
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	007a1200 	.word	0x007a1200

080057cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e28d      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8083 	beq.w	80058f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057ec:	4b94      	ldr	r3, [pc, #592]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d019      	beq.n	800582c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057f8:	4b91      	ldr	r3, [pc, #580]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005800:	2b08      	cmp	r3, #8
 8005802:	d106      	bne.n	8005812 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005804:	4b8e      	ldr	r3, [pc, #568]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005810:	d00c      	beq.n	800582c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005812:	4b8b      	ldr	r3, [pc, #556]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d112      	bne.n	8005844 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800581e:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582a:	d10b      	bne.n	8005844 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05b      	beq.n	80058f0 <HAL_RCC_OscConfig+0x124>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d157      	bne.n	80058f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e25a      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d106      	bne.n	800585c <HAL_RCC_OscConfig+0x90>
 800584e:	4b7c      	ldr	r3, [pc, #496]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7b      	ldr	r2, [pc, #492]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e01d      	b.n	8005898 <HAL_RCC_OscConfig+0xcc>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0xb4>
 8005866:	4b76      	ldr	r3, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a75      	ldr	r2, [pc, #468]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 800586c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a72      	ldr	r2, [pc, #456]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0xcc>
 8005880:	4b6f      	ldr	r3, [pc, #444]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6e      	ldr	r2, [pc, #440]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b6c      	ldr	r3, [pc, #432]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a6b      	ldr	r2, [pc, #428]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fe fd02 	bl	80042a8 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fe fcfe 	bl	80042a8 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e21f      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	4b61      	ldr	r3, [pc, #388]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xdc>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe fcee 	bl	80042a8 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fe fcea 	bl	80042a8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e20b      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e2:	4b57      	ldr	r3, [pc, #348]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x104>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d06f      	beq.n	80059de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058fe:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800590a:	4b4d      	ldr	r3, [pc, #308]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005912:	2b08      	cmp	r3, #8
 8005914:	d105      	bne.n	8005922 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005916:	4b4a      	ldr	r3, [pc, #296]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800592e:	4b44      	ldr	r3, [pc, #272]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x186>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1d3      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b3b      	ldr	r3, [pc, #236]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4937      	ldr	r1, [pc, #220]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	e03a      	b.n	80059de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <HAL_RCC_OscConfig+0x278>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005976:	f7fe fc97 	bl	80042a8 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800597e:	f7fe fc93 	bl	80042a8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1b4      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005990:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599c:	4b28      	ldr	r3, [pc, #160]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4925      	ldr	r1, [pc, #148]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	e015      	b.n	80059de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b2:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <HAL_RCC_OscConfig+0x278>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b8:	f7fe fc76 	bl	80042a8 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c0:	f7fe fc72 	bl	80042a8 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e193      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d036      	beq.n	8005a58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <HAL_RCC_OscConfig+0x27c>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f8:	f7fe fc56 	bl	80042a8 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a00:	f7fe fc52 	bl	80042a8 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e173      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x234>
 8005a1e:	e01b      	b.n	8005a58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a20:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a26:	f7fe fc3f 	bl	80042a8 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2c:	e00e      	b.n	8005a4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2e:	f7fe fc3b 	bl	80042a8 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d907      	bls.n	8005a4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e15c      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470000 	.word	0x42470000
 8005a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a4c:	4b8a      	ldr	r3, [pc, #552]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ea      	bne.n	8005a2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8097 	beq.w	8005b94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6a:	4b83      	ldr	r3, [pc, #524]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	4b7f      	ldr	r3, [pc, #508]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a7e      	ldr	r2, [pc, #504]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
 8005a86:	4b7c      	ldr	r3, [pc, #496]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d118      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a75      	ldr	r2, [pc, #468]	; (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aae:	f7fe fbfb 	bl	80042a8 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab6:	f7fe fbf7 	bl	80042a8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e118      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	4b6c      	ldr	r3, [pc, #432]	; (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x31e>
 8005adc:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	4a65      	ldr	r2, [pc, #404]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae8:	e01c      	b.n	8005b24 <HAL_RCC_OscConfig+0x358>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x340>
 8005af2:	4b61      	ldr	r3, [pc, #388]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af6:	4a60      	ldr	r2, [pc, #384]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	6713      	str	r3, [r2, #112]	; 0x70
 8005afe:	4b5e      	ldr	r3, [pc, #376]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a5d      	ldr	r2, [pc, #372]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0x358>
 8005b0c:	4b5a      	ldr	r3, [pc, #360]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	4a59      	ldr	r2, [pc, #356]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	6713      	str	r3, [r2, #112]	; 0x70
 8005b18:	4b57      	ldr	r3, [pc, #348]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1c:	4a56      	ldr	r2, [pc, #344]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b1e:	f023 0304 	bic.w	r3, r3, #4
 8005b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d015      	beq.n	8005b58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2c:	f7fe fbbc 	bl	80042a8 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b34:	f7fe fbb8 	bl	80042a8 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0d7      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b4a:	4b4b      	ldr	r3, [pc, #300]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ee      	beq.n	8005b34 <HAL_RCC_OscConfig+0x368>
 8005b56:	e014      	b.n	8005b82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b58:	f7fe fba6 	bl	80042a8 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b60:	f7fe fba2 	bl	80042a8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0c1      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b76:	4b40      	ldr	r3, [pc, #256]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1ee      	bne.n	8005b60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d105      	bne.n	8005b94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b88:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	4a3a      	ldr	r2, [pc, #232]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80ad 	beq.w	8005cf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b9e:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d060      	beq.n	8005c6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d145      	bne.n	8005c3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <HAL_RCC_OscConfig+0x4b4>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fe fb76 	bl	80042a8 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fe fb72 	bl	80042a8 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e093      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd2:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	071b      	lsls	r3, r3, #28
 8005c0a:	491b      	ldr	r1, [pc, #108]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <HAL_RCC_OscConfig+0x4b4>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c16:	f7fe fb47 	bl	80042a8 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c1e:	f7fe fb43 	bl	80042a8 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e064      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c30:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x452>
 8005c3c:	e05c      	b.n	8005cf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <HAL_RCC_OscConfig+0x4b4>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fe fb30 	bl	80042a8 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4c:	f7fe fb2c 	bl	80042a8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e04d      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x480>
 8005c6a:	e045      	b.n	8005cf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e040      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c84:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <HAL_RCC_OscConfig+0x538>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d030      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d129      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d122      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d119      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40023800 	.word	0x40023800

08005d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e041      	b.n	8005d9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fd feb0 	bl	8003a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f000 fda6 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d001      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e04e      	b.n	8005e5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d022      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d01d      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d018      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	; (8005e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x80>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d111      	bne.n	8005e4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d010      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	e007      	b.n	8005e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40010400 	.word	0x40010400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40001800 	.word	0x40001800

08005e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e041      	b.n	8005f1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f839 	bl	8005f26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fce6 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_TIM_PWM_Start+0x24>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e022      	b.n	8005fa6 <HAL_TIM_PWM_Start+0x6a>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d109      	bne.n	8005f7a <HAL_TIM_PWM_Start+0x3e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	bf14      	ite	ne
 8005f72:	2301      	movne	r3, #1
 8005f74:	2300      	moveq	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	e015      	b.n	8005fa6 <HAL_TIM_PWM_Start+0x6a>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d109      	bne.n	8005f94 <HAL_TIM_PWM_Start+0x58>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e008      	b.n	8005fa6 <HAL_TIM_PWM_Start+0x6a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e07c      	b.n	80060a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Start+0x82>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fbc:	e013      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xaa>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_PWM_Start+0x92>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fcc:	e00b      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xaa>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_PWM_Start+0xa2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	e003      	b.n	8005fe6 <HAL_TIM_PWM_Start+0xaa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 ff3c 	bl	8006e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <HAL_TIM_PWM_Start+0x174>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_PWM_Start+0xcc>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <HAL_TIM_PWM_Start+0x178>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_TIM_PWM_Start+0xd0>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <HAL_TIM_PWM_Start+0xd2>
 800600c:	2300      	movs	r3, #0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <HAL_TIM_PWM_Start+0x174>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d022      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d01d      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <HAL_TIM_PWM_Start+0x17c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d018      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <HAL_TIM_PWM_Start+0x180>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_TIM_PWM_Start+0x184>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a16      	ldr	r2, [pc, #88]	; (80060b4 <HAL_TIM_PWM_Start+0x178>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <HAL_TIM_PWM_Start+0x188>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIM_PWM_Start+0x136>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <HAL_TIM_PWM_Start+0x18c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d111      	bne.n	8006096 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b06      	cmp	r3, #6
 8006082:	d010      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	e007      	b.n	80060a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40010400 	.word	0x40010400
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40001800 	.word	0x40001800

080060cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e097      	b.n	8006210 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fd fc51 	bl	800399c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006110:	f023 0307 	bic.w	r3, r3, #7
 8006114:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f000 fbb9 	bl	8006898 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614e:	f023 0303 	bic.w	r3, r3, #3
 8006152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	4313      	orrs	r3, r2
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800616c:	f023 030c 	bic.w	r3, r3, #12
 8006170:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800617c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	4313      	orrs	r3, r2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	011a      	lsls	r2, r3, #4
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	031b      	lsls	r3, r3, #12
 800619c:	4313      	orrs	r3, r2
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	4313      	orrs	r3, r2
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006228:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006230:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006238:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006240:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d110      	bne.n	800626a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d102      	bne.n	8006254 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800624e:	7b7b      	ldrb	r3, [r7, #13]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d001      	beq.n	8006258 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e069      	b.n	800632c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006268:	e031      	b.n	80062ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d110      	bne.n	8006292 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d102      	bne.n	800627c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006276:	7b3b      	ldrb	r3, [r7, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e055      	b.n	800632c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006290:	e01d      	b.n	80062ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d108      	bne.n	80062aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d105      	bne.n	80062aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d102      	bne.n	80062aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062a4:	7b3b      	ldrb	r3, [r7, #12]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d001      	beq.n	80062ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e03e      	b.n	800632c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_TIM_Encoder_Start+0xc4>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d008      	beq.n	80062ec <HAL_TIM_Encoder_Start+0xd4>
 80062da:	e00f      	b.n	80062fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fdc1 	bl	8006e6c <TIM_CCxChannelCmd>
      break;
 80062ea:	e016      	b.n	800631a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	2104      	movs	r1, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fdb9 	bl	8006e6c <TIM_CCxChannelCmd>
      break;
 80062fa:	e00e      	b.n	800631a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fdb1 	bl	8006e6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2201      	movs	r2, #1
 8006310:	2104      	movs	r1, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fdaa 	bl	8006e6c <TIM_CCxChannelCmd>
      break;
 8006318:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d122      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b02      	cmp	r3, #2
 8006356:	d11b      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0202 	mvn.w	r2, #2
 8006360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa70 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 800637c:	e005      	b.n	800638a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa62 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa73 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d122      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11b      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0204 	mvn.w	r2, #4
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa46 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa38 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa49 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0208 	mvn.w	r2, #8
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa1c 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa0e 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa1f 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b10      	cmp	r3, #16
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0210 	mvn.w	r2, #16
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2208      	movs	r2, #8
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9f2 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9e4 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9f5 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10e      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0201 	mvn.w	r2, #1
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fab0 	bl	8002a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d10e      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d107      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fdc2 	bl	8007068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d10e      	bne.n	8006510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f9ba 	bl	8006884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b20      	cmp	r3, #32
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b20      	cmp	r3, #32
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0220 	mvn.w	r2, #32
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fd8c 	bl	8007054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800655a:	2302      	movs	r3, #2
 800655c:	e0ac      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b0c      	cmp	r3, #12
 800656a:	f200 809f 	bhi.w	80066ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080066ad 	.word	0x080066ad
 800657c:	080066ad 	.word	0x080066ad
 8006580:	080066ad 	.word	0x080066ad
 8006584:	080065e9 	.word	0x080065e9
 8006588:	080066ad 	.word	0x080066ad
 800658c:	080066ad 	.word	0x080066ad
 8006590:	080066ad 	.word	0x080066ad
 8006594:	0800662b 	.word	0x0800662b
 8006598:	080066ad 	.word	0x080066ad
 800659c:	080066ad 	.word	0x080066ad
 80065a0:	080066ad 	.word	0x080066ad
 80065a4:	0800666b 	.word	0x0800666b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fa12 	bl	80069d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0208 	orr.w	r2, r2, #8
 80065c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0204 	bic.w	r2, r2, #4
 80065d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6999      	ldr	r1, [r3, #24]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	619a      	str	r2, [r3, #24]
      break;
 80065e6:	e062      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fa62 	bl	8006ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6999      	ldr	r1, [r3, #24]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	619a      	str	r2, [r3, #24]
      break;
 8006628:	e041      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fab7 	bl	8006ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0208 	orr.w	r2, r2, #8
 8006644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0204 	bic.w	r2, r2, #4
 8006654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69d9      	ldr	r1, [r3, #28]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	61da      	str	r2, [r3, #28]
      break;
 8006668:	e021      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fb0b 	bl	8006c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69d9      	ldr	r1, [r3, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	021a      	lsls	r2, r3, #8
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	61da      	str	r2, [r3, #28]
      break;
 80066aa:	e000      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80066ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIM_ConfigClockSource+0x18>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e0b3      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x180>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006710:	d03e      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0xd0>
 8006712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006716:	f200 8087 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x168>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	f000 8085 	beq.w	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006726:	d87f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006728:	2b70      	cmp	r3, #112	; 0x70
 800672a:	d01a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0xa2>
 800672c:	2b70      	cmp	r3, #112	; 0x70
 800672e:	d87b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d050      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x116>
 8006734:	2b60      	cmp	r3, #96	; 0x60
 8006736:	d877      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d03c      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0xf6>
 800673c:	2b50      	cmp	r3, #80	; 0x50
 800673e:	d873      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d058      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x136>
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d86f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d064      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x156>
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d86b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d060      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x156>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d867      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05c      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x156>
 800675c:	2b10      	cmp	r3, #16
 800675e:	d05a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006760:	e062      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6899      	ldr	r1, [r3, #8]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f000 fb5b 	bl	8006e2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006784:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	609a      	str	r2, [r3, #8]
      break;
 800678e:	e04e      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f000 fb44 	bl	8006e2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067b2:	609a      	str	r2, [r3, #8]
      break;
 80067b4:	e03b      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 fab8 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2150      	movs	r1, #80	; 0x50
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fb11 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 80067d4:	e02b      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fad7 	bl	8006d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2160      	movs	r1, #96	; 0x60
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fb01 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 80067f4:	e01b      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fa98 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2140      	movs	r1, #64	; 0x40
 800680e:	4618      	mov	r0, r3
 8006810:	f000 faf1 	bl	8006df6 <TIM_ITRx_SetConfig>
      break;
 8006814:	e00b      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 fae8 	bl	8006df6 <TIM_ITRx_SetConfig>
        break;
 8006826:	e002      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800682c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a40      	ldr	r2, [pc, #256]	; (80069ac <TIM_Base_SetConfig+0x114>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d00f      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a3d      	ldr	r2, [pc, #244]	; (80069b0 <TIM_Base_SetConfig+0x118>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <TIM_Base_SetConfig+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <TIM_Base_SetConfig+0x120>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <TIM_Base_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d108      	bne.n	80068ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <TIM_Base_SetConfig+0x114>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d02b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d027      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <TIM_Base_SetConfig+0x118>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d023      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2b      	ldr	r2, [pc, #172]	; (80069b4 <TIM_Base_SetConfig+0x11c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <TIM_Base_SetConfig+0x120>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a29      	ldr	r2, [pc, #164]	; (80069bc <TIM_Base_SetConfig+0x124>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d017      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a28      	ldr	r2, [pc, #160]	; (80069c0 <TIM_Base_SetConfig+0x128>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <TIM_Base_SetConfig+0x12c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <TIM_Base_SetConfig+0x130>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a25      	ldr	r2, [pc, #148]	; (80069cc <TIM_Base_SetConfig+0x134>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <TIM_Base_SetConfig+0x138>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a23      	ldr	r2, [pc, #140]	; (80069d4 <TIM_Base_SetConfig+0x13c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <TIM_Base_SetConfig+0x114>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <TIM_Base_SetConfig+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d103      	bne.n	8006998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	615a      	str	r2, [r3, #20]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40010400 	.word	0x40010400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800
 80069cc:	40001800 	.word	0x40001800
 80069d0:	40001c00 	.word	0x40001c00
 80069d4:	40002000 	.word	0x40002000

080069d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 0302 	bic.w	r3, r3, #2
 8006a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <TIM_OC1_SetConfig+0xd8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC1_SetConfig+0x64>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <TIM_OC1_SetConfig+0xdc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10c      	bne.n	8006a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0308 	bic.w	r3, r3, #8
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <TIM_OC1_SetConfig+0xd8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_OC1_SetConfig+0x8e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <TIM_OC1_SetConfig+0xdc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d111      	bne.n	8006a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	621a      	str	r2, [r3, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0210 	bic.w	r2, r3, #16
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <TIM_OC2_SetConfig+0xe4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC2_SetConfig+0x68>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <TIM_OC2_SetConfig+0xe8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10d      	bne.n	8006b3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <TIM_OC2_SetConfig+0xe4>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC2_SetConfig+0x94>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC2_SetConfig+0xe8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40010000 	.word	0x40010000
 8006ba0:	40010400 	.word	0x40010400

08006ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <TIM_OC3_SetConfig+0xe0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_OC3_SetConfig+0x66>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <TIM_OC3_SetConfig+0xe4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d10d      	bne.n	8006c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a16      	ldr	r2, [pc, #88]	; (8006c84 <TIM_OC3_SetConfig+0xe0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d003      	beq.n	8006c36 <TIM_OC3_SetConfig+0x92>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <TIM_OC3_SetConfig+0xe4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d113      	bne.n	8006c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40010400 	.word	0x40010400

08006c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	031b      	lsls	r3, r3, #12
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a12      	ldr	r2, [pc, #72]	; (8006d30 <TIM_OC4_SetConfig+0xa4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_OC4_SetConfig+0x68>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <TIM_OC4_SetConfig+0xa8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d109      	bne.n	8006d08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	019b      	lsls	r3, r3, #6
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40010400 	.word	0x40010400

08006d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f023 0210 	bic.w	r2, r3, #16
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	031b      	lsls	r3, r3, #12
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f043 0307 	orr.w	r3, r3, #7
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	021a      	lsls	r2, r3, #8
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	609a      	str	r2, [r3, #8]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	2201      	movs	r2, #1
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1a      	ldr	r2, [r3, #32]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	401a      	ands	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a1a      	ldr	r2, [r3, #32]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e05a      	b.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d022      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1c:	d01d      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d018      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1b      	ldr	r2, [pc, #108]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00e      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d009      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a17      	ldr	r2, [pc, #92]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a15      	ldr	r2, [pc, #84]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d10c      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000800 	.word	0x40000800
 8006fa0:	40000c00 	.word	0x40000c00
 8006fa4:	40010400 	.word	0x40010400
 8006fa8:	40014000 	.word	0x40014000
 8006fac:	40001800 	.word	0x40001800

08006fb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e03d      	b.n	8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e03f      	b.n	800710e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fc fed8 	bl	8003e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2224      	movs	r2, #36	; 0x24
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fd1d 	bl	8007b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695a      	ldr	r2, [r3, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b08a      	sub	sp, #40	; 0x28
 800711a:	af02      	add	r7, sp, #8
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	4613      	mov	r3, r2
 8007124:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b20      	cmp	r3, #32
 8007134:	d17c      	bne.n	8007230 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_UART_Transmit+0x2c>
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e075      	b.n	8007232 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_UART_Transmit+0x3e>
 8007150:	2302      	movs	r3, #2
 8007152:	e06e      	b.n	8007232 <HAL_UART_Transmit+0x11c>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2221      	movs	r2, #33	; 0x21
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800716a:	f7fd f89d 	bl	80042a8 <HAL_GetTick>
 800716e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007184:	d108      	bne.n	8007198 <HAL_UART_Transmit+0x82>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	e003      	b.n	80071a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071a8:	e02a      	b.n	8007200 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2200      	movs	r2, #0
 80071b2:	2180      	movs	r1, #128	; 0x80
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fadf 	bl	8007778 <UART_WaitOnFlagUntilTimeout>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e036      	b.n	8007232 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	3302      	adds	r3, #2
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	e007      	b.n	80071f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1cf      	bne.n	80071aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2200      	movs	r2, #0
 8007212:	2140      	movs	r1, #64	; 0x40
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 faaf 	bl	8007778 <UART_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e006      	b.n	8007232 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b08a      	sub	sp, #40	; 0x28
 800723e:	af02      	add	r7, sp, #8
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b20      	cmp	r3, #32
 8007258:	f040 808c 	bne.w	8007374 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_UART_Receive+0x2e>
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e084      	b.n	8007376 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_UART_Receive+0x40>
 8007276:	2302      	movs	r3, #2
 8007278:	e07d      	b.n	8007376 <HAL_UART_Receive+0x13c>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2222      	movs	r2, #34	; 0x22
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007296:	f7fd f807 	bl	80042a8 <HAL_GetTick>
 800729a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	88fa      	ldrh	r2, [r7, #6]
 80072a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	88fa      	ldrh	r2, [r7, #6]
 80072a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b0:	d108      	bne.n	80072c4 <HAL_UART_Receive+0x8a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e003      	b.n	80072cc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80072d4:	e043      	b.n	800735e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2120      	movs	r1, #32
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fa49 	bl	8007778 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e042      	b.n	8007376 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10c      	bne.n	8007310 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	b29a      	uxth	r2, r3
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	3302      	adds	r3, #2
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e01f      	b.n	8007350 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007318:	d007      	beq.n	800732a <HAL_UART_Receive+0xf0>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <HAL_UART_Receive+0xfe>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e008      	b.n	800734a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007344:	b2da      	uxtb	r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	3301      	adds	r3, #1
 800734e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1b6      	bne.n	80072d6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e000      	b.n	8007376 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	4613      	mov	r3, r2
 800738a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b20      	cmp	r3, #32
 8007396:	d11d      	bne.n	80073d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Receive_IT+0x26>
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e016      	b.n	80073d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_UART_Receive_IT+0x38>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e00f      	b.n	80073d6 <HAL_UART_Receive_IT+0x58>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	461a      	mov	r2, r3
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fa1e 	bl	800780c <UART_Start_Receive_IT>
 80073d0:	4603      	mov	r3, r0
 80073d2:	e000      	b.n	80073d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10d      	bne.n	8007432 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <HAL_UART_IRQHandler+0x52>
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fad1 	bl	80079d2 <UART_Receive_IT>
      return;
 8007430:	e17c      	b.n	800772c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80b1 	beq.w	800759c <HAL_UART_IRQHandler+0x1bc>
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <HAL_UART_IRQHandler+0x70>
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80a6 	beq.w	800759c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_UART_IRQHandler+0x90>
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	f043 0201 	orr.w	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_UART_IRQHandler+0xb0>
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	f043 0202 	orr.w	r2, r3, #2
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_UART_IRQHandler+0xd0>
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	f043 0204 	orr.w	r2, r3, #4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00f      	beq.n	80074da <HAL_UART_IRQHandler+0xfa>
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d104      	bne.n	80074ce <HAL_UART_IRQHandler+0xee>
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f043 0208 	orr.w	r2, r3, #8
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 811f 	beq.w	8007722 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <HAL_UART_IRQHandler+0x11e>
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa6a 	bl	80079d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	bf0c      	ite	eq
 800750c:	2301      	moveq	r3, #1
 800750e:	2300      	movne	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <HAL_UART_IRQHandler+0x146>
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d031      	beq.n	800758a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9aa 	bl	8007880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d123      	bne.n	8007582 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007548:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	2b00      	cmp	r3, #0
 8007550:	d013      	beq.n	800757a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	4a77      	ldr	r2, [pc, #476]	; (8007734 <HAL_UART_IRQHandler+0x354>)
 8007558:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	4618      	mov	r0, r3
 8007560:	f7fd fc2f 	bl	8004dc2 <HAL_DMA_Abort_IT>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007574:	4610      	mov	r0, r2
 8007576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007578:	e00e      	b.n	8007598 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f8e6 	bl	800774c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	e00a      	b.n	8007598 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f8e2 	bl	800774c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007588:	e006      	b.n	8007598 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8de 	bl	800774c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007596:	e0c4      	b.n	8007722 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007598:	bf00      	nop
    return;
 800759a:	e0c2      	b.n	8007722 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 80a2 	bne.w	80076ea <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 809c 	beq.w	80076ea <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8096 	beq.w	80076ea <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d14f      	bne.n	8007682 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80075ec:	8a3b      	ldrh	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8099 	beq.w	8007726 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075f8:	8a3a      	ldrh	r2, [r7, #16]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f080 8093 	bcs.w	8007726 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	8a3a      	ldrh	r2, [r7, #16]
 8007604:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007610:	d02b      	beq.n	800766a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007620:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695a      	ldr	r2, [r3, #20]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007640:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0210 	bic.w	r2, r2, #16
 800765e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd fb3c 	bl	8004ce2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007672:	b29b      	uxth	r3, r3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b29b      	uxth	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f870 	bl	8007760 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007680:	e051      	b.n	8007726 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800768a:	b29b      	uxth	r3, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d047      	beq.n	800772a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800769a:	8a7b      	ldrh	r3, [r7, #18]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d044      	beq.n	800772a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076ae:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0210 	bic.w	r2, r2, #16
 80076dc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076de:	8a7b      	ldrh	r3, [r7, #18]
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f83c 	bl	8007760 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076e8:	e01f      	b.n	800772a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_UART_IRQHandler+0x326>
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8ff 	bl	8007902 <UART_Transmit_IT>
    return;
 8007704:	e012      	b.n	800772c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00d      	beq.n	800772c <HAL_UART_IRQHandler+0x34c>
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f941 	bl	80079a2 <UART_EndTransmit_IT>
    return;
 8007720:	e004      	b.n	800772c <HAL_UART_IRQHandler+0x34c>
    return;
 8007722:	bf00      	nop
 8007724:	e002      	b.n	800772c <HAL_UART_IRQHandler+0x34c>
      return;
 8007726:	bf00      	nop
 8007728:	e000      	b.n	800772c <HAL_UART_IRQHandler+0x34c>
      return;
 800772a:	bf00      	nop
  }
}
 800772c:	3728      	adds	r7, #40	; 0x28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	080078db 	.word	0x080078db

08007738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	4613      	mov	r3, r2
 8007786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007788:	e02c      	b.n	80077e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d028      	beq.n	80077e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007798:	f7fc fd86 	bl	80042a8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d21d      	bcs.n	80077e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e00f      	b.n	8007804 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4013      	ands	r3, r2
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d0c3      	beq.n	800778a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2222      	movs	r2, #34	; 0x22
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007850:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0220 	orr.w	r2, r2, #32
 8007870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007896:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d107      	bne.n	80078c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0210 	bic.w	r2, r2, #16
 80078be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff ff29 	bl	800774c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b21      	cmp	r3, #33	; 0x21
 8007914:	d13e      	bne.n	8007994 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791e:	d114      	bne.n	800794a <UART_Transmit_IT+0x48>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d110      	bne.n	800794a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800793c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	621a      	str	r2, [r3, #32]
 8007948:	e008      	b.n	800795c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	1c59      	adds	r1, r3, #1
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6211      	str	r1, [r2, #32]
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29b      	uxth	r3, r3
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	4619      	mov	r1, r3
 800796a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10f      	bne.n	8007990 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800797e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800798e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff feb8 	bl	8007738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b22      	cmp	r3, #34	; 0x22
 80079e4:	f040 8087 	bne.w	8007af6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f0:	d117      	bne.n	8007a22 <UART_Receive_IT+0x50>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d113      	bne.n	8007a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a20:	e026      	b.n	8007a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a34:	d007      	beq.n	8007a46 <UART_Receive_IT+0x74>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <UART_Receive_IT+0x82>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d106      	bne.n	8007a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e008      	b.n	8007a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d136      	bne.n	8007af2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0220 	bic.w	r2, r2, #32
 8007a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d10e      	bne.n	8007ae2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0210 	bic.w	r2, r2, #16
 8007ad2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff fe40 	bl	8007760 <HAL_UARTEx_RxEventCallback>
 8007ae0:	e002      	b.n	8007ae8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fb f87c 	bl	8002be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e002      	b.n	8007af8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e000      	b.n	8007af8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	b09f      	sub	sp, #124	; 0x7c
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b16:	68d9      	ldr	r1, [r3, #12]
 8007b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	ea40 0301 	orr.w	r3, r0, r1
 8007b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b44:	f021 010c 	bic.w	r1, r1, #12
 8007b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5e:	6999      	ldr	r1, [r3, #24]
 8007b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	ea40 0301 	orr.w	r3, r0, r1
 8007b68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4bc5      	ldr	r3, [pc, #788]	; (8007e84 <UART_SetConfig+0x384>)
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d004      	beq.n	8007b7e <UART_SetConfig+0x7e>
 8007b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4bc3      	ldr	r3, [pc, #780]	; (8007e88 <UART_SetConfig+0x388>)
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d103      	bne.n	8007b86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b7e:	f7fd fc5f 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 8007b82:	6778      	str	r0, [r7, #116]	; 0x74
 8007b84:	e002      	b.n	8007b8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b86:	f7fd fc47 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8007b8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b94:	f040 80b6 	bne.w	8007d04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9a:	461c      	mov	r4, r3
 8007b9c:	f04f 0500 	mov.w	r5, #0
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	1891      	adds	r1, r2, r2
 8007ba6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ba8:	415b      	adcs	r3, r3
 8007baa:	647b      	str	r3, [r7, #68]	; 0x44
 8007bac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bb0:	1912      	adds	r2, r2, r4
 8007bb2:	eb45 0303 	adc.w	r3, r5, r3
 8007bb6:	f04f 0000 	mov.w	r0, #0
 8007bba:	f04f 0100 	mov.w	r1, #0
 8007bbe:	00d9      	lsls	r1, r3, #3
 8007bc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bc4:	00d0      	lsls	r0, r2, #3
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	1911      	adds	r1, r2, r4
 8007bcc:	6639      	str	r1, [r7, #96]	; 0x60
 8007bce:	416b      	adcs	r3, r5
 8007bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8007bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	1891      	adds	r1, r2, r2
 8007bde:	63b9      	str	r1, [r7, #56]	; 0x38
 8007be0:	415b      	adcs	r3, r3
 8007be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007be8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007bec:	f7f9 f86c 	bl	8000cc8 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4ba5      	ldr	r3, [pc, #660]	; (8007e8c <UART_SetConfig+0x38c>)
 8007bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	011e      	lsls	r6, r3, #4
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	461c      	mov	r4, r3
 8007c02:	f04f 0500 	mov.w	r5, #0
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	1891      	adds	r1, r2, r2
 8007c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c0e:	415b      	adcs	r3, r3
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
 8007c12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c16:	1912      	adds	r2, r2, r4
 8007c18:	eb45 0303 	adc.w	r3, r5, r3
 8007c1c:	f04f 0000 	mov.w	r0, #0
 8007c20:	f04f 0100 	mov.w	r1, #0
 8007c24:	00d9      	lsls	r1, r3, #3
 8007c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c2a:	00d0      	lsls	r0, r2, #3
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	1911      	adds	r1, r2, r4
 8007c32:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c34:	416b      	adcs	r3, r5
 8007c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	1891      	adds	r1, r2, r2
 8007c44:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c46:	415b      	adcs	r3, r3
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c52:	f7f9 f839 	bl	8000cc8 <__aeabi_uldivmod>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4b8c      	ldr	r3, [pc, #560]	; (8007e8c <UART_SetConfig+0x38c>)
 8007c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	2164      	movs	r1, #100	; 0x64
 8007c64:	fb01 f303 	mul.w	r3, r1, r3
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	3332      	adds	r3, #50	; 0x32
 8007c6e:	4a87      	ldr	r2, [pc, #540]	; (8007e8c <UART_SetConfig+0x38c>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c7c:	441e      	add	r6, r3
 8007c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c80:	4618      	mov	r0, r3
 8007c82:	f04f 0100 	mov.w	r1, #0
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	1894      	adds	r4, r2, r2
 8007c8c:	623c      	str	r4, [r7, #32]
 8007c8e:	415b      	adcs	r3, r3
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
 8007c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c96:	1812      	adds	r2, r2, r0
 8007c98:	eb41 0303 	adc.w	r3, r1, r3
 8007c9c:	f04f 0400 	mov.w	r4, #0
 8007ca0:	f04f 0500 	mov.w	r5, #0
 8007ca4:	00dd      	lsls	r5, r3, #3
 8007ca6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007caa:	00d4      	lsls	r4, r2, #3
 8007cac:	4622      	mov	r2, r4
 8007cae:	462b      	mov	r3, r5
 8007cb0:	1814      	adds	r4, r2, r0
 8007cb2:	653c      	str	r4, [r7, #80]	; 0x50
 8007cb4:	414b      	adcs	r3, r1
 8007cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8007cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f04f 0300 	mov.w	r3, #0
 8007cc2:	1891      	adds	r1, r2, r2
 8007cc4:	61b9      	str	r1, [r7, #24]
 8007cc6:	415b      	adcs	r3, r3
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007cd2:	f7f8 fff9 	bl	8000cc8 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4b6c      	ldr	r3, [pc, #432]	; (8007e8c <UART_SetConfig+0x38c>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	2164      	movs	r1, #100	; 0x64
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	3332      	adds	r3, #50	; 0x32
 8007cee:	4a67      	ldr	r2, [pc, #412]	; (8007e8c <UART_SetConfig+0x38c>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 0207 	and.w	r2, r3, #7
 8007cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4432      	add	r2, r6
 8007d00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d02:	e0b9      	b.n	8007e78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d06:	461c      	mov	r4, r3
 8007d08:	f04f 0500 	mov.w	r5, #0
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	462b      	mov	r3, r5
 8007d10:	1891      	adds	r1, r2, r2
 8007d12:	6139      	str	r1, [r7, #16]
 8007d14:	415b      	adcs	r3, r3
 8007d16:	617b      	str	r3, [r7, #20]
 8007d18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d1c:	1912      	adds	r2, r2, r4
 8007d1e:	eb45 0303 	adc.w	r3, r5, r3
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f04f 0100 	mov.w	r1, #0
 8007d2a:	00d9      	lsls	r1, r3, #3
 8007d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d30:	00d0      	lsls	r0, r2, #3
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	eb12 0804 	adds.w	r8, r2, r4
 8007d3a:	eb43 0905 	adc.w	r9, r3, r5
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f04f 0100 	mov.w	r1, #0
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	008b      	lsls	r3, r1, #2
 8007d52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d56:	0082      	lsls	r2, r0, #2
 8007d58:	4640      	mov	r0, r8
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	f7f8 ffb4 	bl	8000cc8 <__aeabi_uldivmod>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4b49      	ldr	r3, [pc, #292]	; (8007e8c <UART_SetConfig+0x38c>)
 8007d66:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	011e      	lsls	r6, r3, #4
 8007d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d70:	4618      	mov	r0, r3
 8007d72:	f04f 0100 	mov.w	r1, #0
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	1894      	adds	r4, r2, r2
 8007d7c:	60bc      	str	r4, [r7, #8]
 8007d7e:	415b      	adcs	r3, r3
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d86:	1812      	adds	r2, r2, r0
 8007d88:	eb41 0303 	adc.w	r3, r1, r3
 8007d8c:	f04f 0400 	mov.w	r4, #0
 8007d90:	f04f 0500 	mov.w	r5, #0
 8007d94:	00dd      	lsls	r5, r3, #3
 8007d96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d9a:	00d4      	lsls	r4, r2, #3
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	462b      	mov	r3, r5
 8007da0:	1814      	adds	r4, r2, r0
 8007da2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007da4:	414b      	adcs	r3, r1
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f04f 0100 	mov.w	r1, #0
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	008b      	lsls	r3, r1, #2
 8007dbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dc0:	0082      	lsls	r2, r0, #2
 8007dc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dc6:	f7f8 ff7f 	bl	8000cc8 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4b2f      	ldr	r3, [pc, #188]	; (8007e8c <UART_SetConfig+0x38c>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	; 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	3332      	adds	r3, #50	; 0x32
 8007de2:	4a2a      	ldr	r2, [pc, #168]	; (8007e8c <UART_SetConfig+0x38c>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dee:	441e      	add	r6, r3
 8007df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df2:	4618      	mov	r0, r3
 8007df4:	f04f 0100 	mov.w	r1, #0
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	1894      	adds	r4, r2, r2
 8007dfe:	603c      	str	r4, [r7, #0]
 8007e00:	415b      	adcs	r3, r3
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e08:	1812      	adds	r2, r2, r0
 8007e0a:	eb41 0303 	adc.w	r3, r1, r3
 8007e0e:	f04f 0400 	mov.w	r4, #0
 8007e12:	f04f 0500 	mov.w	r5, #0
 8007e16:	00dd      	lsls	r5, r3, #3
 8007e18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e1c:	00d4      	lsls	r4, r2, #3
 8007e1e:	4622      	mov	r2, r4
 8007e20:	462b      	mov	r3, r5
 8007e22:	eb12 0a00 	adds.w	sl, r2, r0
 8007e26:	eb43 0b01 	adc.w	fp, r3, r1
 8007e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f04f 0100 	mov.w	r1, #0
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	008b      	lsls	r3, r1, #2
 8007e3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e42:	0082      	lsls	r2, r0, #2
 8007e44:	4650      	mov	r0, sl
 8007e46:	4659      	mov	r1, fp
 8007e48:	f7f8 ff3e 	bl	8000cc8 <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <UART_SetConfig+0x38c>)
 8007e52:	fba3 1302 	umull	r1, r3, r3, r2
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	2164      	movs	r1, #100	; 0x64
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	3332      	adds	r3, #50	; 0x32
 8007e64:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <UART_SetConfig+0x38c>)
 8007e66:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4432      	add	r2, r6
 8007e76:	609a      	str	r2, [r3, #8]
}
 8007e78:	bf00      	nop
 8007e7a:	377c      	adds	r7, #124	; 0x7c
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e82:	bf00      	nop
 8007e84:	40011000 	.word	0x40011000
 8007e88:	40011400 	.word	0x40011400
 8007e8c:	51eb851f 	.word	0x51eb851f

08007e90 <__errno>:
 8007e90:	4b01      	ldr	r3, [pc, #4]	; (8007e98 <__errno+0x8>)
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000254 	.word	0x20000254

08007e9c <__libc_init_array>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	4d0d      	ldr	r5, [pc, #52]	; (8007ed4 <__libc_init_array+0x38>)
 8007ea0:	4c0d      	ldr	r4, [pc, #52]	; (8007ed8 <__libc_init_array+0x3c>)
 8007ea2:	1b64      	subs	r4, r4, r5
 8007ea4:	10a4      	asrs	r4, r4, #2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	d109      	bne.n	8007ec0 <__libc_init_array+0x24>
 8007eac:	4d0b      	ldr	r5, [pc, #44]	; (8007edc <__libc_init_array+0x40>)
 8007eae:	4c0c      	ldr	r4, [pc, #48]	; (8007ee0 <__libc_init_array+0x44>)
 8007eb0:	f005 f8ae 	bl	800d010 <_init>
 8007eb4:	1b64      	subs	r4, r4, r5
 8007eb6:	10a4      	asrs	r4, r4, #2
 8007eb8:	2600      	movs	r6, #0
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	d105      	bne.n	8007eca <__libc_init_array+0x2e>
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec4:	4798      	blx	r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__libc_init_array+0xc>
 8007eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ece:	4798      	blx	r3
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	e7f2      	b.n	8007eba <__libc_init_array+0x1e>
 8007ed4:	0800d6c8 	.word	0x0800d6c8
 8007ed8:	0800d6c8 	.word	0x0800d6c8
 8007edc:	0800d6c8 	.word	0x0800d6c8
 8007ee0:	0800d6cc 	.word	0x0800d6cc

08007ee4 <memset>:
 8007ee4:	4402      	add	r2, r0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d100      	bne.n	8007eee <memset+0xa>
 8007eec:	4770      	bx	lr
 8007eee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef2:	e7f9      	b.n	8007ee8 <memset+0x4>

08007ef4 <__cvt>:
 8007ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	ec55 4b10 	vmov	r4, r5, d0
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	460e      	mov	r6, r1
 8007f00:	4619      	mov	r1, r3
 8007f02:	462b      	mov	r3, r5
 8007f04:	bfbb      	ittet	lt
 8007f06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f0a:	461d      	movlt	r5, r3
 8007f0c:	2300      	movge	r3, #0
 8007f0e:	232d      	movlt	r3, #45	; 0x2d
 8007f10:	700b      	strb	r3, [r1, #0]
 8007f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f18:	4691      	mov	r9, r2
 8007f1a:	f023 0820 	bic.w	r8, r3, #32
 8007f1e:	bfbc      	itt	lt
 8007f20:	4622      	movlt	r2, r4
 8007f22:	4614      	movlt	r4, r2
 8007f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f28:	d005      	beq.n	8007f36 <__cvt+0x42>
 8007f2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f2e:	d100      	bne.n	8007f32 <__cvt+0x3e>
 8007f30:	3601      	adds	r6, #1
 8007f32:	2102      	movs	r1, #2
 8007f34:	e000      	b.n	8007f38 <__cvt+0x44>
 8007f36:	2103      	movs	r1, #3
 8007f38:	ab03      	add	r3, sp, #12
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	ab02      	add	r3, sp, #8
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	ec45 4b10 	vmov	d0, r4, r5
 8007f44:	4653      	mov	r3, sl
 8007f46:	4632      	mov	r2, r6
 8007f48:	f000 fcda 	bl	8008900 <_dtoa_r>
 8007f4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f50:	4607      	mov	r7, r0
 8007f52:	d102      	bne.n	8007f5a <__cvt+0x66>
 8007f54:	f019 0f01 	tst.w	r9, #1
 8007f58:	d022      	beq.n	8007fa0 <__cvt+0xac>
 8007f5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f5e:	eb07 0906 	add.w	r9, r7, r6
 8007f62:	d110      	bne.n	8007f86 <__cvt+0x92>
 8007f64:	783b      	ldrb	r3, [r7, #0]
 8007f66:	2b30      	cmp	r3, #48	; 0x30
 8007f68:	d10a      	bne.n	8007f80 <__cvt+0x8c>
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 8007f76:	b918      	cbnz	r0, 8007f80 <__cvt+0x8c>
 8007f78:	f1c6 0601 	rsb	r6, r6, #1
 8007f7c:	f8ca 6000 	str.w	r6, [sl]
 8007f80:	f8da 3000 	ldr.w	r3, [sl]
 8007f84:	4499      	add	r9, r3
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 fdbb 	bl	8000b08 <__aeabi_dcmpeq>
 8007f92:	b108      	cbz	r0, 8007f98 <__cvt+0xa4>
 8007f94:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f98:	2230      	movs	r2, #48	; 0x30
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	454b      	cmp	r3, r9
 8007f9e:	d307      	bcc.n	8007fb0 <__cvt+0xbc>
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fa4:	1bdb      	subs	r3, r3, r7
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	b004      	add	sp, #16
 8007fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb0:	1c59      	adds	r1, r3, #1
 8007fb2:	9103      	str	r1, [sp, #12]
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	e7f0      	b.n	8007f9a <__cvt+0xa6>

08007fb8 <__exponent>:
 8007fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	bfb8      	it	lt
 8007fc0:	4249      	neglt	r1, r1
 8007fc2:	f803 2b02 	strb.w	r2, [r3], #2
 8007fc6:	bfb4      	ite	lt
 8007fc8:	222d      	movlt	r2, #45	; 0x2d
 8007fca:	222b      	movge	r2, #43	; 0x2b
 8007fcc:	2909      	cmp	r1, #9
 8007fce:	7042      	strb	r2, [r0, #1]
 8007fd0:	dd2a      	ble.n	8008028 <__exponent+0x70>
 8007fd2:	f10d 0407 	add.w	r4, sp, #7
 8007fd6:	46a4      	mov	ip, r4
 8007fd8:	270a      	movs	r7, #10
 8007fda:	46a6      	mov	lr, r4
 8007fdc:	460a      	mov	r2, r1
 8007fde:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fe2:	fb07 1516 	mls	r5, r7, r6, r1
 8007fe6:	3530      	adds	r5, #48	; 0x30
 8007fe8:	2a63      	cmp	r2, #99	; 0x63
 8007fea:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	dcf1      	bgt.n	8007fda <__exponent+0x22>
 8007ff6:	3130      	adds	r1, #48	; 0x30
 8007ff8:	f1ae 0502 	sub.w	r5, lr, #2
 8007ffc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008000:	1c44      	adds	r4, r0, #1
 8008002:	4629      	mov	r1, r5
 8008004:	4561      	cmp	r1, ip
 8008006:	d30a      	bcc.n	800801e <__exponent+0x66>
 8008008:	f10d 0209 	add.w	r2, sp, #9
 800800c:	eba2 020e 	sub.w	r2, r2, lr
 8008010:	4565      	cmp	r5, ip
 8008012:	bf88      	it	hi
 8008014:	2200      	movhi	r2, #0
 8008016:	4413      	add	r3, r2
 8008018:	1a18      	subs	r0, r3, r0
 800801a:	b003      	add	sp, #12
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008022:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008026:	e7ed      	b.n	8008004 <__exponent+0x4c>
 8008028:	2330      	movs	r3, #48	; 0x30
 800802a:	3130      	adds	r1, #48	; 0x30
 800802c:	7083      	strb	r3, [r0, #2]
 800802e:	70c1      	strb	r1, [r0, #3]
 8008030:	1d03      	adds	r3, r0, #4
 8008032:	e7f1      	b.n	8008018 <__exponent+0x60>

08008034 <_printf_float>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	ed2d 8b02 	vpush	{d8}
 800803c:	b08d      	sub	sp, #52	; 0x34
 800803e:	460c      	mov	r4, r1
 8008040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008044:	4616      	mov	r6, r2
 8008046:	461f      	mov	r7, r3
 8008048:	4605      	mov	r5, r0
 800804a:	f001 fbfd 	bl	8009848 <_localeconv_r>
 800804e:	f8d0 a000 	ldr.w	sl, [r0]
 8008052:	4650      	mov	r0, sl
 8008054:	f7f8 f8dc 	bl	8000210 <strlen>
 8008058:	2300      	movs	r3, #0
 800805a:	930a      	str	r3, [sp, #40]	; 0x28
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	9305      	str	r3, [sp, #20]
 8008060:	f8d8 3000 	ldr.w	r3, [r8]
 8008064:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008068:	3307      	adds	r3, #7
 800806a:	f023 0307 	bic.w	r3, r3, #7
 800806e:	f103 0208 	add.w	r2, r3, #8
 8008072:	f8c8 2000 	str.w	r2, [r8]
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800807e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008082:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008086:	9307      	str	r3, [sp, #28]
 8008088:	f8cd 8018 	str.w	r8, [sp, #24]
 800808c:	ee08 0a10 	vmov	s16, r0
 8008090:	4b9f      	ldr	r3, [pc, #636]	; (8008310 <_printf_float+0x2dc>)
 8008092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008096:	f04f 32ff 	mov.w	r2, #4294967295
 800809a:	f7f8 fd67 	bl	8000b6c <__aeabi_dcmpun>
 800809e:	bb88      	cbnz	r0, 8008104 <_printf_float+0xd0>
 80080a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080a4:	4b9a      	ldr	r3, [pc, #616]	; (8008310 <_printf_float+0x2dc>)
 80080a6:	f04f 32ff 	mov.w	r2, #4294967295
 80080aa:	f7f8 fd41 	bl	8000b30 <__aeabi_dcmple>
 80080ae:	bb48      	cbnz	r0, 8008104 <_printf_float+0xd0>
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 fd30 	bl	8000b1c <__aeabi_dcmplt>
 80080bc:	b110      	cbz	r0, 80080c4 <_printf_float+0x90>
 80080be:	232d      	movs	r3, #45	; 0x2d
 80080c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080c4:	4b93      	ldr	r3, [pc, #588]	; (8008314 <_printf_float+0x2e0>)
 80080c6:	4894      	ldr	r0, [pc, #592]	; (8008318 <_printf_float+0x2e4>)
 80080c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080cc:	bf94      	ite	ls
 80080ce:	4698      	movls	r8, r3
 80080d0:	4680      	movhi	r8, r0
 80080d2:	2303      	movs	r3, #3
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	9b05      	ldr	r3, [sp, #20]
 80080d8:	f023 0204 	bic.w	r2, r3, #4
 80080dc:	6022      	str	r2, [r4, #0]
 80080de:	f04f 0900 	mov.w	r9, #0
 80080e2:	9700      	str	r7, [sp, #0]
 80080e4:	4633      	mov	r3, r6
 80080e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f9d8 	bl	80084a0 <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	f040 8090 	bne.w	8008216 <_printf_float+0x1e2>
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295
 80080fa:	b00d      	add	sp, #52	; 0x34
 80080fc:	ecbd 8b02 	vpop	{d8}
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fd2e 	bl	8000b6c <__aeabi_dcmpun>
 8008110:	b140      	cbz	r0, 8008124 <_printf_float+0xf0>
 8008112:	464b      	mov	r3, r9
 8008114:	2b00      	cmp	r3, #0
 8008116:	bfbc      	itt	lt
 8008118:	232d      	movlt	r3, #45	; 0x2d
 800811a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800811e:	487f      	ldr	r0, [pc, #508]	; (800831c <_printf_float+0x2e8>)
 8008120:	4b7f      	ldr	r3, [pc, #508]	; (8008320 <_printf_float+0x2ec>)
 8008122:	e7d1      	b.n	80080c8 <_printf_float+0x94>
 8008124:	6863      	ldr	r3, [r4, #4]
 8008126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800812a:	9206      	str	r2, [sp, #24]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	d13f      	bne.n	80081b0 <_printf_float+0x17c>
 8008130:	2306      	movs	r3, #6
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	9b05      	ldr	r3, [sp, #20]
 8008136:	6861      	ldr	r1, [r4, #4]
 8008138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	ab0a      	add	r3, sp, #40	; 0x28
 8008142:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008146:	ab09      	add	r3, sp, #36	; 0x24
 8008148:	ec49 8b10 	vmov	d0, r8, r9
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008154:	4628      	mov	r0, r5
 8008156:	f7ff fecd 	bl	8007ef4 <__cvt>
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800815e:	2b47      	cmp	r3, #71	; 0x47
 8008160:	4680      	mov	r8, r0
 8008162:	d108      	bne.n	8008176 <_printf_float+0x142>
 8008164:	1cc8      	adds	r0, r1, #3
 8008166:	db02      	blt.n	800816e <_printf_float+0x13a>
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	4299      	cmp	r1, r3
 800816c:	dd41      	ble.n	80081f2 <_printf_float+0x1be>
 800816e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008172:	fa5f fb8b 	uxtb.w	fp, fp
 8008176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800817a:	d820      	bhi.n	80081be <_printf_float+0x18a>
 800817c:	3901      	subs	r1, #1
 800817e:	465a      	mov	r2, fp
 8008180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008184:	9109      	str	r1, [sp, #36]	; 0x24
 8008186:	f7ff ff17 	bl	8007fb8 <__exponent>
 800818a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800818c:	1813      	adds	r3, r2, r0
 800818e:	2a01      	cmp	r2, #1
 8008190:	4681      	mov	r9, r0
 8008192:	6123      	str	r3, [r4, #16]
 8008194:	dc02      	bgt.n	800819c <_printf_float+0x168>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	07d2      	lsls	r2, r2, #31
 800819a:	d501      	bpl.n	80081a0 <_printf_float+0x16c>
 800819c:	3301      	adds	r3, #1
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d09c      	beq.n	80080e2 <_printf_float+0xae>
 80081a8:	232d      	movs	r3, #45	; 0x2d
 80081aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ae:	e798      	b.n	80080e2 <_printf_float+0xae>
 80081b0:	9a06      	ldr	r2, [sp, #24]
 80081b2:	2a47      	cmp	r2, #71	; 0x47
 80081b4:	d1be      	bne.n	8008134 <_printf_float+0x100>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1bc      	bne.n	8008134 <_printf_float+0x100>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e7b9      	b.n	8008132 <_printf_float+0xfe>
 80081be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081c2:	d118      	bne.n	80081f6 <_printf_float+0x1c2>
 80081c4:	2900      	cmp	r1, #0
 80081c6:	6863      	ldr	r3, [r4, #4]
 80081c8:	dd0b      	ble.n	80081e2 <_printf_float+0x1ae>
 80081ca:	6121      	str	r1, [r4, #16]
 80081cc:	b913      	cbnz	r3, 80081d4 <_printf_float+0x1a0>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	07d0      	lsls	r0, r2, #31
 80081d2:	d502      	bpl.n	80081da <_printf_float+0x1a6>
 80081d4:	3301      	adds	r3, #1
 80081d6:	440b      	add	r3, r1
 80081d8:	6123      	str	r3, [r4, #16]
 80081da:	65a1      	str	r1, [r4, #88]	; 0x58
 80081dc:	f04f 0900 	mov.w	r9, #0
 80081e0:	e7de      	b.n	80081a0 <_printf_float+0x16c>
 80081e2:	b913      	cbnz	r3, 80081ea <_printf_float+0x1b6>
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	07d2      	lsls	r2, r2, #31
 80081e8:	d501      	bpl.n	80081ee <_printf_float+0x1ba>
 80081ea:	3302      	adds	r3, #2
 80081ec:	e7f4      	b.n	80081d8 <_printf_float+0x1a4>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7f2      	b.n	80081d8 <_printf_float+0x1a4>
 80081f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f8:	4299      	cmp	r1, r3
 80081fa:	db05      	blt.n	8008208 <_printf_float+0x1d4>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	6121      	str	r1, [r4, #16]
 8008200:	07d8      	lsls	r0, r3, #31
 8008202:	d5ea      	bpl.n	80081da <_printf_float+0x1a6>
 8008204:	1c4b      	adds	r3, r1, #1
 8008206:	e7e7      	b.n	80081d8 <_printf_float+0x1a4>
 8008208:	2900      	cmp	r1, #0
 800820a:	bfd4      	ite	le
 800820c:	f1c1 0202 	rsble	r2, r1, #2
 8008210:	2201      	movgt	r2, #1
 8008212:	4413      	add	r3, r2
 8008214:	e7e0      	b.n	80081d8 <_printf_float+0x1a4>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	055a      	lsls	r2, r3, #21
 800821a:	d407      	bmi.n	800822c <_printf_float+0x1f8>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	4642      	mov	r2, r8
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	d12c      	bne.n	8008284 <_printf_float+0x250>
 800822a:	e764      	b.n	80080f6 <_printf_float+0xc2>
 800822c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008230:	f240 80e0 	bls.w	80083f4 <_printf_float+0x3c0>
 8008234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	f7f8 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8008240:	2800      	cmp	r0, #0
 8008242:	d034      	beq.n	80082ae <_printf_float+0x27a>
 8008244:	4a37      	ldr	r2, [pc, #220]	; (8008324 <_printf_float+0x2f0>)
 8008246:	2301      	movs	r3, #1
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af51 	beq.w	80080f6 <_printf_float+0xc2>
 8008254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008258:	429a      	cmp	r2, r3
 800825a:	db02      	blt.n	8008262 <_printf_float+0x22e>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	07d8      	lsls	r0, r3, #31
 8008260:	d510      	bpl.n	8008284 <_printf_float+0x250>
 8008262:	ee18 3a10 	vmov	r3, s16
 8008266:	4652      	mov	r2, sl
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af41 	beq.w	80080f6 <_printf_float+0xc2>
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	f104 091a 	add.w	r9, r4, #26
 800827c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827e:	3b01      	subs	r3, #1
 8008280:	4543      	cmp	r3, r8
 8008282:	dc09      	bgt.n	8008298 <_printf_float+0x264>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	079b      	lsls	r3, r3, #30
 8008288:	f100 8105 	bmi.w	8008496 <_printf_float+0x462>
 800828c:	68e0      	ldr	r0, [r4, #12]
 800828e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008290:	4298      	cmp	r0, r3
 8008292:	bfb8      	it	lt
 8008294:	4618      	movlt	r0, r3
 8008296:	e730      	b.n	80080fa <_printf_float+0xc6>
 8008298:	2301      	movs	r3, #1
 800829a:	464a      	mov	r2, r9
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af27 	beq.w	80080f6 <_printf_float+0xc2>
 80082a8:	f108 0801 	add.w	r8, r8, #1
 80082ac:	e7e6      	b.n	800827c <_printf_float+0x248>
 80082ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dc39      	bgt.n	8008328 <_printf_float+0x2f4>
 80082b4:	4a1b      	ldr	r2, [pc, #108]	; (8008324 <_printf_float+0x2f0>)
 80082b6:	2301      	movs	r3, #1
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	f43f af19 	beq.w	80080f6 <_printf_float+0xc2>
 80082c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d102      	bne.n	80082d2 <_printf_float+0x29e>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	07d9      	lsls	r1, r3, #31
 80082d0:	d5d8      	bpl.n	8008284 <_printf_float+0x250>
 80082d2:	ee18 3a10 	vmov	r3, s16
 80082d6:	4652      	mov	r2, sl
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f af09 	beq.w	80080f6 <_printf_float+0xc2>
 80082e4:	f04f 0900 	mov.w	r9, #0
 80082e8:	f104 0a1a 	add.w	sl, r4, #26
 80082ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ee:	425b      	negs	r3, r3
 80082f0:	454b      	cmp	r3, r9
 80082f2:	dc01      	bgt.n	80082f8 <_printf_float+0x2c4>
 80082f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f6:	e792      	b.n	800821e <_printf_float+0x1ea>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4652      	mov	r2, sl
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	47b8      	blx	r7
 8008302:	3001      	adds	r0, #1
 8008304:	f43f aef7 	beq.w	80080f6 <_printf_float+0xc2>
 8008308:	f109 0901 	add.w	r9, r9, #1
 800830c:	e7ee      	b.n	80082ec <_printf_float+0x2b8>
 800830e:	bf00      	nop
 8008310:	7fefffff 	.word	0x7fefffff
 8008314:	0800d044 	.word	0x0800d044
 8008318:	0800d048 	.word	0x0800d048
 800831c:	0800d050 	.word	0x0800d050
 8008320:	0800d04c 	.word	0x0800d04c
 8008324:	0800d054 	.word	0x0800d054
 8008328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800832c:	429a      	cmp	r2, r3
 800832e:	bfa8      	it	ge
 8008330:	461a      	movge	r2, r3
 8008332:	2a00      	cmp	r2, #0
 8008334:	4691      	mov	r9, r2
 8008336:	dc37      	bgt.n	80083a8 <_printf_float+0x374>
 8008338:	f04f 0b00 	mov.w	fp, #0
 800833c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008340:	f104 021a 	add.w	r2, r4, #26
 8008344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	eba3 0309 	sub.w	r3, r3, r9
 800834c:	455b      	cmp	r3, fp
 800834e:	dc33      	bgt.n	80083b8 <_printf_float+0x384>
 8008350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008354:	429a      	cmp	r2, r3
 8008356:	db3b      	blt.n	80083d0 <_printf_float+0x39c>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	07da      	lsls	r2, r3, #31
 800835c:	d438      	bmi.n	80083d0 <_printf_float+0x39c>
 800835e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008360:	9b05      	ldr	r3, [sp, #20]
 8008362:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	eba2 0901 	sub.w	r9, r2, r1
 800836a:	4599      	cmp	r9, r3
 800836c:	bfa8      	it	ge
 800836e:	4699      	movge	r9, r3
 8008370:	f1b9 0f00 	cmp.w	r9, #0
 8008374:	dc35      	bgt.n	80083e2 <_printf_float+0x3ae>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800837e:	f104 0a1a 	add.w	sl, r4, #26
 8008382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	eba3 0309 	sub.w	r3, r3, r9
 800838c:	4543      	cmp	r3, r8
 800838e:	f77f af79 	ble.w	8008284 <_printf_float+0x250>
 8008392:	2301      	movs	r3, #1
 8008394:	4652      	mov	r2, sl
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	47b8      	blx	r7
 800839c:	3001      	adds	r0, #1
 800839e:	f43f aeaa 	beq.w	80080f6 <_printf_float+0xc2>
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	e7ec      	b.n	8008382 <_printf_float+0x34e>
 80083a8:	4613      	mov	r3, r2
 80083aa:	4631      	mov	r1, r6
 80083ac:	4642      	mov	r2, r8
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	d1c0      	bne.n	8008338 <_printf_float+0x304>
 80083b6:	e69e      	b.n	80080f6 <_printf_float+0xc2>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4631      	mov	r1, r6
 80083bc:	4628      	mov	r0, r5
 80083be:	9205      	str	r2, [sp, #20]
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f ae97 	beq.w	80080f6 <_printf_float+0xc2>
 80083c8:	9a05      	ldr	r2, [sp, #20]
 80083ca:	f10b 0b01 	add.w	fp, fp, #1
 80083ce:	e7b9      	b.n	8008344 <_printf_float+0x310>
 80083d0:	ee18 3a10 	vmov	r3, s16
 80083d4:	4652      	mov	r2, sl
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	d1be      	bne.n	800835e <_printf_float+0x32a>
 80083e0:	e689      	b.n	80080f6 <_printf_float+0xc2>
 80083e2:	9a05      	ldr	r2, [sp, #20]
 80083e4:	464b      	mov	r3, r9
 80083e6:	4442      	add	r2, r8
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	d1c1      	bne.n	8008376 <_printf_float+0x342>
 80083f2:	e680      	b.n	80080f6 <_printf_float+0xc2>
 80083f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	dc01      	bgt.n	80083fe <_printf_float+0x3ca>
 80083fa:	07db      	lsls	r3, r3, #31
 80083fc:	d538      	bpl.n	8008470 <_printf_float+0x43c>
 80083fe:	2301      	movs	r3, #1
 8008400:	4642      	mov	r2, r8
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	f43f ae74 	beq.w	80080f6 <_printf_float+0xc2>
 800840e:	ee18 3a10 	vmov	r3, s16
 8008412:	4652      	mov	r2, sl
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f ae6b 	beq.w	80080f6 <_printf_float+0xc2>
 8008420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008424:	2200      	movs	r2, #0
 8008426:	2300      	movs	r3, #0
 8008428:	f7f8 fb6e 	bl	8000b08 <__aeabi_dcmpeq>
 800842c:	b9d8      	cbnz	r0, 8008466 <_printf_float+0x432>
 800842e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008430:	f108 0201 	add.w	r2, r8, #1
 8008434:	3b01      	subs	r3, #1
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	d10e      	bne.n	800845e <_printf_float+0x42a>
 8008440:	e659      	b.n	80080f6 <_printf_float+0xc2>
 8008442:	2301      	movs	r3, #1
 8008444:	4652      	mov	r2, sl
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	f43f ae52 	beq.w	80080f6 <_printf_float+0xc2>
 8008452:	f108 0801 	add.w	r8, r8, #1
 8008456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008458:	3b01      	subs	r3, #1
 800845a:	4543      	cmp	r3, r8
 800845c:	dcf1      	bgt.n	8008442 <_printf_float+0x40e>
 800845e:	464b      	mov	r3, r9
 8008460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008464:	e6dc      	b.n	8008220 <_printf_float+0x1ec>
 8008466:	f04f 0800 	mov.w	r8, #0
 800846a:	f104 0a1a 	add.w	sl, r4, #26
 800846e:	e7f2      	b.n	8008456 <_printf_float+0x422>
 8008470:	2301      	movs	r3, #1
 8008472:	4642      	mov	r2, r8
 8008474:	e7df      	b.n	8008436 <_printf_float+0x402>
 8008476:	2301      	movs	r3, #1
 8008478:	464a      	mov	r2, r9
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	47b8      	blx	r7
 8008480:	3001      	adds	r0, #1
 8008482:	f43f ae38 	beq.w	80080f6 <_printf_float+0xc2>
 8008486:	f108 0801 	add.w	r8, r8, #1
 800848a:	68e3      	ldr	r3, [r4, #12]
 800848c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800848e:	1a5b      	subs	r3, r3, r1
 8008490:	4543      	cmp	r3, r8
 8008492:	dcf0      	bgt.n	8008476 <_printf_float+0x442>
 8008494:	e6fa      	b.n	800828c <_printf_float+0x258>
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	f104 0919 	add.w	r9, r4, #25
 800849e:	e7f4      	b.n	800848a <_printf_float+0x456>

080084a0 <_printf_common>:
 80084a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a4:	4616      	mov	r6, r2
 80084a6:	4699      	mov	r9, r3
 80084a8:	688a      	ldr	r2, [r1, #8]
 80084aa:	690b      	ldr	r3, [r1, #16]
 80084ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	bfb8      	it	lt
 80084b4:	4613      	movlt	r3, r2
 80084b6:	6033      	str	r3, [r6, #0]
 80084b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084bc:	4607      	mov	r7, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	b10a      	cbz	r2, 80084c6 <_printf_common+0x26>
 80084c2:	3301      	adds	r3, #1
 80084c4:	6033      	str	r3, [r6, #0]
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	0699      	lsls	r1, r3, #26
 80084ca:	bf42      	ittt	mi
 80084cc:	6833      	ldrmi	r3, [r6, #0]
 80084ce:	3302      	addmi	r3, #2
 80084d0:	6033      	strmi	r3, [r6, #0]
 80084d2:	6825      	ldr	r5, [r4, #0]
 80084d4:	f015 0506 	ands.w	r5, r5, #6
 80084d8:	d106      	bne.n	80084e8 <_printf_common+0x48>
 80084da:	f104 0a19 	add.w	sl, r4, #25
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	6832      	ldr	r2, [r6, #0]
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	42ab      	cmp	r3, r5
 80084e6:	dc26      	bgt.n	8008536 <_printf_common+0x96>
 80084e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084ec:	1e13      	subs	r3, r2, #0
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	bf18      	it	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	0692      	lsls	r2, r2, #26
 80084f6:	d42b      	bmi.n	8008550 <_printf_common+0xb0>
 80084f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084fc:	4649      	mov	r1, r9
 80084fe:	4638      	mov	r0, r7
 8008500:	47c0      	blx	r8
 8008502:	3001      	adds	r0, #1
 8008504:	d01e      	beq.n	8008544 <_printf_common+0xa4>
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	68e5      	ldr	r5, [r4, #12]
 800850a:	6832      	ldr	r2, [r6, #0]
 800850c:	f003 0306 	and.w	r3, r3, #6
 8008510:	2b04      	cmp	r3, #4
 8008512:	bf08      	it	eq
 8008514:	1aad      	subeq	r5, r5, r2
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	bf0c      	ite	eq
 800851c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008520:	2500      	movne	r5, #0
 8008522:	4293      	cmp	r3, r2
 8008524:	bfc4      	itt	gt
 8008526:	1a9b      	subgt	r3, r3, r2
 8008528:	18ed      	addgt	r5, r5, r3
 800852a:	2600      	movs	r6, #0
 800852c:	341a      	adds	r4, #26
 800852e:	42b5      	cmp	r5, r6
 8008530:	d11a      	bne.n	8008568 <_printf_common+0xc8>
 8008532:	2000      	movs	r0, #0
 8008534:	e008      	b.n	8008548 <_printf_common+0xa8>
 8008536:	2301      	movs	r3, #1
 8008538:	4652      	mov	r2, sl
 800853a:	4649      	mov	r1, r9
 800853c:	4638      	mov	r0, r7
 800853e:	47c0      	blx	r8
 8008540:	3001      	adds	r0, #1
 8008542:	d103      	bne.n	800854c <_printf_common+0xac>
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	3501      	adds	r5, #1
 800854e:	e7c6      	b.n	80084de <_printf_common+0x3e>
 8008550:	18e1      	adds	r1, r4, r3
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	2030      	movs	r0, #48	; 0x30
 8008556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800855a:	4422      	add	r2, r4
 800855c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008564:	3302      	adds	r3, #2
 8008566:	e7c7      	b.n	80084f8 <_printf_common+0x58>
 8008568:	2301      	movs	r3, #1
 800856a:	4622      	mov	r2, r4
 800856c:	4649      	mov	r1, r9
 800856e:	4638      	mov	r0, r7
 8008570:	47c0      	blx	r8
 8008572:	3001      	adds	r0, #1
 8008574:	d0e6      	beq.n	8008544 <_printf_common+0xa4>
 8008576:	3601      	adds	r6, #1
 8008578:	e7d9      	b.n	800852e <_printf_common+0x8e>
	...

0800857c <_printf_i>:
 800857c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	4691      	mov	r9, r2
 8008584:	7e27      	ldrb	r7, [r4, #24]
 8008586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008588:	2f78      	cmp	r7, #120	; 0x78
 800858a:	4680      	mov	r8, r0
 800858c:	469a      	mov	sl, r3
 800858e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008592:	d807      	bhi.n	80085a4 <_printf_i+0x28>
 8008594:	2f62      	cmp	r7, #98	; 0x62
 8008596:	d80a      	bhi.n	80085ae <_printf_i+0x32>
 8008598:	2f00      	cmp	r7, #0
 800859a:	f000 80d8 	beq.w	800874e <_printf_i+0x1d2>
 800859e:	2f58      	cmp	r7, #88	; 0x58
 80085a0:	f000 80a3 	beq.w	80086ea <_printf_i+0x16e>
 80085a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085ac:	e03a      	b.n	8008624 <_printf_i+0xa8>
 80085ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085b2:	2b15      	cmp	r3, #21
 80085b4:	d8f6      	bhi.n	80085a4 <_printf_i+0x28>
 80085b6:	a001      	add	r0, pc, #4	; (adr r0, 80085bc <_printf_i+0x40>)
 80085b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085bc:	08008615 	.word	0x08008615
 80085c0:	08008629 	.word	0x08008629
 80085c4:	080085a5 	.word	0x080085a5
 80085c8:	080085a5 	.word	0x080085a5
 80085cc:	080085a5 	.word	0x080085a5
 80085d0:	080085a5 	.word	0x080085a5
 80085d4:	08008629 	.word	0x08008629
 80085d8:	080085a5 	.word	0x080085a5
 80085dc:	080085a5 	.word	0x080085a5
 80085e0:	080085a5 	.word	0x080085a5
 80085e4:	080085a5 	.word	0x080085a5
 80085e8:	08008735 	.word	0x08008735
 80085ec:	08008659 	.word	0x08008659
 80085f0:	08008717 	.word	0x08008717
 80085f4:	080085a5 	.word	0x080085a5
 80085f8:	080085a5 	.word	0x080085a5
 80085fc:	08008757 	.word	0x08008757
 8008600:	080085a5 	.word	0x080085a5
 8008604:	08008659 	.word	0x08008659
 8008608:	080085a5 	.word	0x080085a5
 800860c:	080085a5 	.word	0x080085a5
 8008610:	0800871f 	.word	0x0800871f
 8008614:	680b      	ldr	r3, [r1, #0]
 8008616:	1d1a      	adds	r2, r3, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	600a      	str	r2, [r1, #0]
 800861c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008624:	2301      	movs	r3, #1
 8008626:	e0a3      	b.n	8008770 <_printf_i+0x1f4>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	6808      	ldr	r0, [r1, #0]
 800862c:	062e      	lsls	r6, r5, #24
 800862e:	f100 0304 	add.w	r3, r0, #4
 8008632:	d50a      	bpl.n	800864a <_printf_i+0xce>
 8008634:	6805      	ldr	r5, [r0, #0]
 8008636:	600b      	str	r3, [r1, #0]
 8008638:	2d00      	cmp	r5, #0
 800863a:	da03      	bge.n	8008644 <_printf_i+0xc8>
 800863c:	232d      	movs	r3, #45	; 0x2d
 800863e:	426d      	negs	r5, r5
 8008640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008644:	485e      	ldr	r0, [pc, #376]	; (80087c0 <_printf_i+0x244>)
 8008646:	230a      	movs	r3, #10
 8008648:	e019      	b.n	800867e <_printf_i+0x102>
 800864a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800864e:	6805      	ldr	r5, [r0, #0]
 8008650:	600b      	str	r3, [r1, #0]
 8008652:	bf18      	it	ne
 8008654:	b22d      	sxthne	r5, r5
 8008656:	e7ef      	b.n	8008638 <_printf_i+0xbc>
 8008658:	680b      	ldr	r3, [r1, #0]
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	1d18      	adds	r0, r3, #4
 800865e:	6008      	str	r0, [r1, #0]
 8008660:	0628      	lsls	r0, r5, #24
 8008662:	d501      	bpl.n	8008668 <_printf_i+0xec>
 8008664:	681d      	ldr	r5, [r3, #0]
 8008666:	e002      	b.n	800866e <_printf_i+0xf2>
 8008668:	0669      	lsls	r1, r5, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0xe8>
 800866c:	881d      	ldrh	r5, [r3, #0]
 800866e:	4854      	ldr	r0, [pc, #336]	; (80087c0 <_printf_i+0x244>)
 8008670:	2f6f      	cmp	r7, #111	; 0x6f
 8008672:	bf0c      	ite	eq
 8008674:	2308      	moveq	r3, #8
 8008676:	230a      	movne	r3, #10
 8008678:	2100      	movs	r1, #0
 800867a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800867e:	6866      	ldr	r6, [r4, #4]
 8008680:	60a6      	str	r6, [r4, #8]
 8008682:	2e00      	cmp	r6, #0
 8008684:	bfa2      	ittt	ge
 8008686:	6821      	ldrge	r1, [r4, #0]
 8008688:	f021 0104 	bicge.w	r1, r1, #4
 800868c:	6021      	strge	r1, [r4, #0]
 800868e:	b90d      	cbnz	r5, 8008694 <_printf_i+0x118>
 8008690:	2e00      	cmp	r6, #0
 8008692:	d04d      	beq.n	8008730 <_printf_i+0x1b4>
 8008694:	4616      	mov	r6, r2
 8008696:	fbb5 f1f3 	udiv	r1, r5, r3
 800869a:	fb03 5711 	mls	r7, r3, r1, r5
 800869e:	5dc7      	ldrb	r7, [r0, r7]
 80086a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a4:	462f      	mov	r7, r5
 80086a6:	42bb      	cmp	r3, r7
 80086a8:	460d      	mov	r5, r1
 80086aa:	d9f4      	bls.n	8008696 <_printf_i+0x11a>
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d10b      	bne.n	80086c8 <_printf_i+0x14c>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	07df      	lsls	r7, r3, #31
 80086b4:	d508      	bpl.n	80086c8 <_printf_i+0x14c>
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	6861      	ldr	r1, [r4, #4]
 80086ba:	4299      	cmp	r1, r3
 80086bc:	bfde      	ittt	le
 80086be:	2330      	movle	r3, #48	; 0x30
 80086c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086c8:	1b92      	subs	r2, r2, r6
 80086ca:	6122      	str	r2, [r4, #16]
 80086cc:	f8cd a000 	str.w	sl, [sp]
 80086d0:	464b      	mov	r3, r9
 80086d2:	aa03      	add	r2, sp, #12
 80086d4:	4621      	mov	r1, r4
 80086d6:	4640      	mov	r0, r8
 80086d8:	f7ff fee2 	bl	80084a0 <_printf_common>
 80086dc:	3001      	adds	r0, #1
 80086de:	d14c      	bne.n	800877a <_printf_i+0x1fe>
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	b004      	add	sp, #16
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	4835      	ldr	r0, [pc, #212]	; (80087c0 <_printf_i+0x244>)
 80086ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	680e      	ldr	r6, [r1, #0]
 80086f4:	061f      	lsls	r7, r3, #24
 80086f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80086fa:	600e      	str	r6, [r1, #0]
 80086fc:	d514      	bpl.n	8008728 <_printf_i+0x1ac>
 80086fe:	07d9      	lsls	r1, r3, #31
 8008700:	bf44      	itt	mi
 8008702:	f043 0320 	orrmi.w	r3, r3, #32
 8008706:	6023      	strmi	r3, [r4, #0]
 8008708:	b91d      	cbnz	r5, 8008712 <_printf_i+0x196>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	f023 0320 	bic.w	r3, r3, #32
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	2310      	movs	r3, #16
 8008714:	e7b0      	b.n	8008678 <_printf_i+0xfc>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	f043 0320 	orr.w	r3, r3, #32
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	2378      	movs	r3, #120	; 0x78
 8008720:	4828      	ldr	r0, [pc, #160]	; (80087c4 <_printf_i+0x248>)
 8008722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008726:	e7e3      	b.n	80086f0 <_printf_i+0x174>
 8008728:	065e      	lsls	r6, r3, #25
 800872a:	bf48      	it	mi
 800872c:	b2ad      	uxthmi	r5, r5
 800872e:	e7e6      	b.n	80086fe <_printf_i+0x182>
 8008730:	4616      	mov	r6, r2
 8008732:	e7bb      	b.n	80086ac <_printf_i+0x130>
 8008734:	680b      	ldr	r3, [r1, #0]
 8008736:	6826      	ldr	r6, [r4, #0]
 8008738:	6960      	ldr	r0, [r4, #20]
 800873a:	1d1d      	adds	r5, r3, #4
 800873c:	600d      	str	r5, [r1, #0]
 800873e:	0635      	lsls	r5, r6, #24
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	d501      	bpl.n	8008748 <_printf_i+0x1cc>
 8008744:	6018      	str	r0, [r3, #0]
 8008746:	e002      	b.n	800874e <_printf_i+0x1d2>
 8008748:	0671      	lsls	r1, r6, #25
 800874a:	d5fb      	bpl.n	8008744 <_printf_i+0x1c8>
 800874c:	8018      	strh	r0, [r3, #0]
 800874e:	2300      	movs	r3, #0
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	4616      	mov	r6, r2
 8008754:	e7ba      	b.n	80086cc <_printf_i+0x150>
 8008756:	680b      	ldr	r3, [r1, #0]
 8008758:	1d1a      	adds	r2, r3, #4
 800875a:	600a      	str	r2, [r1, #0]
 800875c:	681e      	ldr	r6, [r3, #0]
 800875e:	6862      	ldr	r2, [r4, #4]
 8008760:	2100      	movs	r1, #0
 8008762:	4630      	mov	r0, r6
 8008764:	f7f7 fd5c 	bl	8000220 <memchr>
 8008768:	b108      	cbz	r0, 800876e <_printf_i+0x1f2>
 800876a:	1b80      	subs	r0, r0, r6
 800876c:	6060      	str	r0, [r4, #4]
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	2300      	movs	r3, #0
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008778:	e7a8      	b.n	80086cc <_printf_i+0x150>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	4632      	mov	r2, r6
 800877e:	4649      	mov	r1, r9
 8008780:	4640      	mov	r0, r8
 8008782:	47d0      	blx	sl
 8008784:	3001      	adds	r0, #1
 8008786:	d0ab      	beq.n	80086e0 <_printf_i+0x164>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	079b      	lsls	r3, r3, #30
 800878c:	d413      	bmi.n	80087b6 <_printf_i+0x23a>
 800878e:	68e0      	ldr	r0, [r4, #12]
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	4298      	cmp	r0, r3
 8008794:	bfb8      	it	lt
 8008796:	4618      	movlt	r0, r3
 8008798:	e7a4      	b.n	80086e4 <_printf_i+0x168>
 800879a:	2301      	movs	r3, #1
 800879c:	4632      	mov	r2, r6
 800879e:	4649      	mov	r1, r9
 80087a0:	4640      	mov	r0, r8
 80087a2:	47d0      	blx	sl
 80087a4:	3001      	adds	r0, #1
 80087a6:	d09b      	beq.n	80086e0 <_printf_i+0x164>
 80087a8:	3501      	adds	r5, #1
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	9903      	ldr	r1, [sp, #12]
 80087ae:	1a5b      	subs	r3, r3, r1
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dcf2      	bgt.n	800879a <_printf_i+0x21e>
 80087b4:	e7eb      	b.n	800878e <_printf_i+0x212>
 80087b6:	2500      	movs	r5, #0
 80087b8:	f104 0619 	add.w	r6, r4, #25
 80087bc:	e7f5      	b.n	80087aa <_printf_i+0x22e>
 80087be:	bf00      	nop
 80087c0:	0800d056 	.word	0x0800d056
 80087c4:	0800d067 	.word	0x0800d067

080087c8 <strcat>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4602      	mov	r2, r0
 80087cc:	7814      	ldrb	r4, [r2, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	3201      	adds	r2, #1
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d1fa      	bne.n	80087cc <strcat+0x4>
 80087d6:	3b01      	subs	r3, #1
 80087d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	d1f9      	bne.n	80087d8 <strcat+0x10>
 80087e4:	bd10      	pop	{r4, pc}

080087e6 <quorem>:
 80087e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	6903      	ldr	r3, [r0, #16]
 80087ec:	690c      	ldr	r4, [r1, #16]
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	4607      	mov	r7, r0
 80087f2:	f2c0 8081 	blt.w	80088f8 <quorem+0x112>
 80087f6:	3c01      	subs	r4, #1
 80087f8:	f101 0814 	add.w	r8, r1, #20
 80087fc:	f100 0514 	add.w	r5, r0, #20
 8008800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800880a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800880e:	3301      	adds	r3, #1
 8008810:	429a      	cmp	r2, r3
 8008812:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800881a:	fbb2 f6f3 	udiv	r6, r2, r3
 800881e:	d331      	bcc.n	8008884 <quorem+0x9e>
 8008820:	f04f 0e00 	mov.w	lr, #0
 8008824:	4640      	mov	r0, r8
 8008826:	46ac      	mov	ip, r5
 8008828:	46f2      	mov	sl, lr
 800882a:	f850 2b04 	ldr.w	r2, [r0], #4
 800882e:	b293      	uxth	r3, r2
 8008830:	fb06 e303 	mla	r3, r6, r3, lr
 8008834:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008838:	b29b      	uxth	r3, r3
 800883a:	ebaa 0303 	sub.w	r3, sl, r3
 800883e:	0c12      	lsrs	r2, r2, #16
 8008840:	f8dc a000 	ldr.w	sl, [ip]
 8008844:	fb06 e202 	mla	r2, r6, r2, lr
 8008848:	fa13 f38a 	uxtah	r3, r3, sl
 800884c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008850:	fa1f fa82 	uxth.w	sl, r2
 8008854:	f8dc 2000 	ldr.w	r2, [ip]
 8008858:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800885c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008860:	b29b      	uxth	r3, r3
 8008862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008866:	4581      	cmp	r9, r0
 8008868:	f84c 3b04 	str.w	r3, [ip], #4
 800886c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008870:	d2db      	bcs.n	800882a <quorem+0x44>
 8008872:	f855 300b 	ldr.w	r3, [r5, fp]
 8008876:	b92b      	cbnz	r3, 8008884 <quorem+0x9e>
 8008878:	9b01      	ldr	r3, [sp, #4]
 800887a:	3b04      	subs	r3, #4
 800887c:	429d      	cmp	r5, r3
 800887e:	461a      	mov	r2, r3
 8008880:	d32e      	bcc.n	80088e0 <quorem+0xfa>
 8008882:	613c      	str	r4, [r7, #16]
 8008884:	4638      	mov	r0, r7
 8008886:	f001 fadf 	bl	8009e48 <__mcmp>
 800888a:	2800      	cmp	r0, #0
 800888c:	db24      	blt.n	80088d8 <quorem+0xf2>
 800888e:	3601      	adds	r6, #1
 8008890:	4628      	mov	r0, r5
 8008892:	f04f 0c00 	mov.w	ip, #0
 8008896:	f858 2b04 	ldr.w	r2, [r8], #4
 800889a:	f8d0 e000 	ldr.w	lr, [r0]
 800889e:	b293      	uxth	r3, r2
 80088a0:	ebac 0303 	sub.w	r3, ip, r3
 80088a4:	0c12      	lsrs	r2, r2, #16
 80088a6:	fa13 f38e 	uxtah	r3, r3, lr
 80088aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b8:	45c1      	cmp	r9, r8
 80088ba:	f840 3b04 	str.w	r3, [r0], #4
 80088be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088c2:	d2e8      	bcs.n	8008896 <quorem+0xb0>
 80088c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088cc:	b922      	cbnz	r2, 80088d8 <quorem+0xf2>
 80088ce:	3b04      	subs	r3, #4
 80088d0:	429d      	cmp	r5, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	d30a      	bcc.n	80088ec <quorem+0x106>
 80088d6:	613c      	str	r4, [r7, #16]
 80088d8:	4630      	mov	r0, r6
 80088da:	b003      	add	sp, #12
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	3b04      	subs	r3, #4
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	d1cc      	bne.n	8008882 <quorem+0x9c>
 80088e8:	3c01      	subs	r4, #1
 80088ea:	e7c7      	b.n	800887c <quorem+0x96>
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	3b04      	subs	r3, #4
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	d1f0      	bne.n	80088d6 <quorem+0xf0>
 80088f4:	3c01      	subs	r4, #1
 80088f6:	e7eb      	b.n	80088d0 <quorem+0xea>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7ee      	b.n	80088da <quorem+0xf4>
 80088fc:	0000      	movs	r0, r0
	...

08008900 <_dtoa_r>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	ed2d 8b02 	vpush	{d8}
 8008908:	ec57 6b10 	vmov	r6, r7, d0
 800890c:	b095      	sub	sp, #84	; 0x54
 800890e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008910:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008914:	9105      	str	r1, [sp, #20]
 8008916:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800891a:	4604      	mov	r4, r0
 800891c:	9209      	str	r2, [sp, #36]	; 0x24
 800891e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008920:	b975      	cbnz	r5, 8008940 <_dtoa_r+0x40>
 8008922:	2010      	movs	r0, #16
 8008924:	f000 fffc 	bl	8009920 <malloc>
 8008928:	4602      	mov	r2, r0
 800892a:	6260      	str	r0, [r4, #36]	; 0x24
 800892c:	b920      	cbnz	r0, 8008938 <_dtoa_r+0x38>
 800892e:	4bb2      	ldr	r3, [pc, #712]	; (8008bf8 <_dtoa_r+0x2f8>)
 8008930:	21ea      	movs	r1, #234	; 0xea
 8008932:	48b2      	ldr	r0, [pc, #712]	; (8008bfc <_dtoa_r+0x2fc>)
 8008934:	f001 fca8 	bl	800a288 <__assert_func>
 8008938:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800893c:	6005      	str	r5, [r0, #0]
 800893e:	60c5      	str	r5, [r0, #12]
 8008940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	b151      	cbz	r1, 800895c <_dtoa_r+0x5c>
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	604a      	str	r2, [r1, #4]
 800894a:	2301      	movs	r3, #1
 800894c:	4093      	lsls	r3, r2
 800894e:	608b      	str	r3, [r1, #8]
 8008950:	4620      	mov	r0, r4
 8008952:	f001 f83b 	bl	80099cc <_Bfree>
 8008956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	1e3b      	subs	r3, r7, #0
 800895e:	bfb9      	ittee	lt
 8008960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008964:	9303      	strlt	r3, [sp, #12]
 8008966:	2300      	movge	r3, #0
 8008968:	f8c8 3000 	strge.w	r3, [r8]
 800896c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008970:	4ba3      	ldr	r3, [pc, #652]	; (8008c00 <_dtoa_r+0x300>)
 8008972:	bfbc      	itt	lt
 8008974:	2201      	movlt	r2, #1
 8008976:	f8c8 2000 	strlt.w	r2, [r8]
 800897a:	ea33 0309 	bics.w	r3, r3, r9
 800897e:	d11b      	bne.n	80089b8 <_dtoa_r+0xb8>
 8008980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008982:	f242 730f 	movw	r3, #9999	; 0x270f
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800898c:	4333      	orrs	r3, r6
 800898e:	f000 857a 	beq.w	8009486 <_dtoa_r+0xb86>
 8008992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008994:	b963      	cbnz	r3, 80089b0 <_dtoa_r+0xb0>
 8008996:	4b9b      	ldr	r3, [pc, #620]	; (8008c04 <_dtoa_r+0x304>)
 8008998:	e024      	b.n	80089e4 <_dtoa_r+0xe4>
 800899a:	4b9b      	ldr	r3, [pc, #620]	; (8008c08 <_dtoa_r+0x308>)
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	9800      	ldr	r0, [sp, #0]
 80089a6:	b015      	add	sp, #84	; 0x54
 80089a8:	ecbd 8b02 	vpop	{d8}
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	4b94      	ldr	r3, [pc, #592]	; (8008c04 <_dtoa_r+0x304>)
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	3303      	adds	r3, #3
 80089b6:	e7f3      	b.n	80089a0 <_dtoa_r+0xa0>
 80089b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	ec51 0b17 	vmov	r0, r1, d7
 80089c2:	2300      	movs	r3, #0
 80089c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80089c8:	f7f8 f89e 	bl	8000b08 <__aeabi_dcmpeq>
 80089cc:	4680      	mov	r8, r0
 80089ce:	b158      	cbz	r0, 80089e8 <_dtoa_r+0xe8>
 80089d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089d2:	2301      	movs	r3, #1
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8551 	beq.w	8009480 <_dtoa_r+0xb80>
 80089de:	488b      	ldr	r0, [pc, #556]	; (8008c0c <_dtoa_r+0x30c>)
 80089e0:	6018      	str	r0, [r3, #0]
 80089e2:	1e43      	subs	r3, r0, #1
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	e7dd      	b.n	80089a4 <_dtoa_r+0xa4>
 80089e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80089ec:	aa12      	add	r2, sp, #72	; 0x48
 80089ee:	a913      	add	r1, sp, #76	; 0x4c
 80089f0:	4620      	mov	r0, r4
 80089f2:	f001 facd 	bl	8009f90 <__d2b>
 80089f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089fa:	4683      	mov	fp, r0
 80089fc:	2d00      	cmp	r5, #0
 80089fe:	d07c      	beq.n	8008afa <_dtoa_r+0x1fa>
 8008a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a1a:	4b7d      	ldr	r3, [pc, #500]	; (8008c10 <_dtoa_r+0x310>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f7 fc51 	bl	80002c8 <__aeabi_dsub>
 8008a26:	a36e      	add	r3, pc, #440	; (adr r3, 8008be0 <_dtoa_r+0x2e0>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fe04 	bl	8000638 <__aeabi_dmul>
 8008a30:	a36d      	add	r3, pc, #436	; (adr r3, 8008be8 <_dtoa_r+0x2e8>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fc49 	bl	80002cc <__adddf3>
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	460f      	mov	r7, r1
 8008a40:	f7f7 fd90 	bl	8000564 <__aeabi_i2d>
 8008a44:	a36a      	add	r3, pc, #424	; (adr r3, 8008bf0 <_dtoa_r+0x2f0>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fdf5 	bl	8000638 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4630      	mov	r0, r6
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 fc39 	bl	80002cc <__adddf3>
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460f      	mov	r7, r1
 8008a5e:	f7f8 f89b 	bl	8000b98 <__aeabi_d2iz>
 8008a62:	2200      	movs	r2, #0
 8008a64:	4682      	mov	sl, r0
 8008a66:	2300      	movs	r3, #0
 8008a68:	4630      	mov	r0, r6
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	f7f8 f856 	bl	8000b1c <__aeabi_dcmplt>
 8008a70:	b148      	cbz	r0, 8008a86 <_dtoa_r+0x186>
 8008a72:	4650      	mov	r0, sl
 8008a74:	f7f7 fd76 	bl	8000564 <__aeabi_i2d>
 8008a78:	4632      	mov	r2, r6
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	f7f8 f844 	bl	8000b08 <__aeabi_dcmpeq>
 8008a80:	b908      	cbnz	r0, 8008a86 <_dtoa_r+0x186>
 8008a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a86:	f1ba 0f16 	cmp.w	sl, #22
 8008a8a:	d854      	bhi.n	8008b36 <_dtoa_r+0x236>
 8008a8c:	4b61      	ldr	r3, [pc, #388]	; (8008c14 <_dtoa_r+0x314>)
 8008a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a9a:	f7f8 f83f 	bl	8000b1c <__aeabi_dcmplt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d04b      	beq.n	8008b3a <_dtoa_r+0x23a>
 8008aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8008aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008aac:	1b5d      	subs	r5, r3, r5
 8008aae:	1e6b      	subs	r3, r5, #1
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	bf43      	ittte	mi
 8008ab4:	2300      	movmi	r3, #0
 8008ab6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008aba:	9304      	strmi	r3, [sp, #16]
 8008abc:	f04f 0800 	movpl.w	r8, #0
 8008ac0:	f1ba 0f00 	cmp.w	sl, #0
 8008ac4:	db3b      	blt.n	8008b3e <_dtoa_r+0x23e>
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008acc:	4453      	add	r3, sl
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9306      	str	r3, [sp, #24]
 8008ad4:	9b05      	ldr	r3, [sp, #20]
 8008ad6:	2b09      	cmp	r3, #9
 8008ad8:	d869      	bhi.n	8008bae <_dtoa_r+0x2ae>
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	bfc4      	itt	gt
 8008ade:	3b04      	subgt	r3, #4
 8008ae0:	9305      	strgt	r3, [sp, #20]
 8008ae2:	9b05      	ldr	r3, [sp, #20]
 8008ae4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ae8:	bfcc      	ite	gt
 8008aea:	2500      	movgt	r5, #0
 8008aec:	2501      	movle	r5, #1
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d869      	bhi.n	8008bc6 <_dtoa_r+0x2c6>
 8008af2:	e8df f003 	tbb	[pc, r3]
 8008af6:	4e2c      	.short	0x4e2c
 8008af8:	5a4c      	.short	0x5a4c
 8008afa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008afe:	441d      	add	r5, r3
 8008b00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	bfc1      	itttt	gt
 8008b08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b10:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b18:	bfda      	itte	le
 8008b1a:	f1c3 0320 	rsble	r3, r3, #32
 8008b1e:	fa06 f003 	lslle.w	r0, r6, r3
 8008b22:	4318      	orrgt	r0, r3
 8008b24:	f7f7 fd0e 	bl	8000544 <__aeabi_ui2d>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b30:	3d01      	subs	r5, #1
 8008b32:	9310      	str	r3, [sp, #64]	; 0x40
 8008b34:	e771      	b.n	8008a1a <_dtoa_r+0x11a>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e7b6      	b.n	8008aa8 <_dtoa_r+0x1a8>
 8008b3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008b3c:	e7b5      	b.n	8008aaa <_dtoa_r+0x1aa>
 8008b3e:	f1ca 0300 	rsb	r3, sl, #0
 8008b42:	9306      	str	r3, [sp, #24]
 8008b44:	2300      	movs	r3, #0
 8008b46:	eba8 080a 	sub.w	r8, r8, sl
 8008b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b4c:	e7c2      	b.n	8008ad4 <_dtoa_r+0x1d4>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9308      	str	r3, [sp, #32]
 8008b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dc39      	bgt.n	8008bcc <_dtoa_r+0x2cc>
 8008b58:	f04f 0901 	mov.w	r9, #1
 8008b5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b60:	464b      	mov	r3, r9
 8008b62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b68:	2200      	movs	r2, #0
 8008b6a:	6042      	str	r2, [r0, #4]
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	f102 0614 	add.w	r6, r2, #20
 8008b72:	429e      	cmp	r6, r3
 8008b74:	6841      	ldr	r1, [r0, #4]
 8008b76:	d92f      	bls.n	8008bd8 <_dtoa_r+0x2d8>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fee7 	bl	800994c <_Balloc>
 8008b7e:	9000      	str	r0, [sp, #0]
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d14b      	bne.n	8008c1c <_dtoa_r+0x31c>
 8008b84:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <_dtoa_r+0x318>)
 8008b86:	4602      	mov	r2, r0
 8008b88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b8c:	e6d1      	b.n	8008932 <_dtoa_r+0x32>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e7de      	b.n	8008b50 <_dtoa_r+0x250>
 8008b92:	2300      	movs	r3, #0
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b98:	eb0a 0903 	add.w	r9, sl, r3
 8008b9c:	f109 0301 	add.w	r3, r9, #1
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	bfb8      	it	lt
 8008ba6:	2301      	movlt	r3, #1
 8008ba8:	e7dd      	b.n	8008b66 <_dtoa_r+0x266>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e7f2      	b.n	8008b94 <_dtoa_r+0x294>
 8008bae:	2501      	movs	r5, #1
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9305      	str	r3, [sp, #20]
 8008bb4:	9508      	str	r5, [sp, #32]
 8008bb6:	f04f 39ff 	mov.w	r9, #4294967295
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bc0:	2312      	movs	r3, #18
 8008bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc4:	e7cf      	b.n	8008b66 <_dtoa_r+0x266>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	9308      	str	r3, [sp, #32]
 8008bca:	e7f4      	b.n	8008bb6 <_dtoa_r+0x2b6>
 8008bcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008bd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	e7c6      	b.n	8008b66 <_dtoa_r+0x266>
 8008bd8:	3101      	adds	r1, #1
 8008bda:	6041      	str	r1, [r0, #4]
 8008bdc:	0052      	lsls	r2, r2, #1
 8008bde:	e7c6      	b.n	8008b6e <_dtoa_r+0x26e>
 8008be0:	636f4361 	.word	0x636f4361
 8008be4:	3fd287a7 	.word	0x3fd287a7
 8008be8:	8b60c8b3 	.word	0x8b60c8b3
 8008bec:	3fc68a28 	.word	0x3fc68a28
 8008bf0:	509f79fb 	.word	0x509f79fb
 8008bf4:	3fd34413 	.word	0x3fd34413
 8008bf8:	0800d186 	.word	0x0800d186
 8008bfc:	0800d19d 	.word	0x0800d19d
 8008c00:	7ff00000 	.word	0x7ff00000
 8008c04:	0800d182 	.word	0x0800d182
 8008c08:	0800d179 	.word	0x0800d179
 8008c0c:	0800d055 	.word	0x0800d055
 8008c10:	3ff80000 	.word	0x3ff80000
 8008c14:	0800d2f8 	.word	0x0800d2f8
 8008c18:	0800d1fc 	.word	0x0800d1fc
 8008c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c1e:	9a00      	ldr	r2, [sp, #0]
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	2b0e      	cmp	r3, #14
 8008c26:	f200 80ad 	bhi.w	8008d84 <_dtoa_r+0x484>
 8008c2a:	2d00      	cmp	r5, #0
 8008c2c:	f000 80aa 	beq.w	8008d84 <_dtoa_r+0x484>
 8008c30:	f1ba 0f00 	cmp.w	sl, #0
 8008c34:	dd36      	ble.n	8008ca4 <_dtoa_r+0x3a4>
 8008c36:	4ac3      	ldr	r2, [pc, #780]	; (8008f44 <_dtoa_r+0x644>)
 8008c38:	f00a 030f 	and.w	r3, sl, #15
 8008c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c40:	ed93 7b00 	vldr	d7, [r3]
 8008c44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c4c:	eeb0 8a47 	vmov.f32	s16, s14
 8008c50:	eef0 8a67 	vmov.f32	s17, s15
 8008c54:	d016      	beq.n	8008c84 <_dtoa_r+0x384>
 8008c56:	4bbc      	ldr	r3, [pc, #752]	; (8008f48 <_dtoa_r+0x648>)
 8008c58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c60:	f7f7 fe14 	bl	800088c <__aeabi_ddiv>
 8008c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c68:	f007 070f 	and.w	r7, r7, #15
 8008c6c:	2503      	movs	r5, #3
 8008c6e:	4eb6      	ldr	r6, [pc, #728]	; (8008f48 <_dtoa_r+0x648>)
 8008c70:	b957      	cbnz	r7, 8008c88 <_dtoa_r+0x388>
 8008c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c76:	ec53 2b18 	vmov	r2, r3, d8
 8008c7a:	f7f7 fe07 	bl	800088c <__aeabi_ddiv>
 8008c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c82:	e029      	b.n	8008cd8 <_dtoa_r+0x3d8>
 8008c84:	2502      	movs	r5, #2
 8008c86:	e7f2      	b.n	8008c6e <_dtoa_r+0x36e>
 8008c88:	07f9      	lsls	r1, r7, #31
 8008c8a:	d508      	bpl.n	8008c9e <_dtoa_r+0x39e>
 8008c8c:	ec51 0b18 	vmov	r0, r1, d8
 8008c90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c94:	f7f7 fcd0 	bl	8000638 <__aeabi_dmul>
 8008c98:	ec41 0b18 	vmov	d8, r0, r1
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	107f      	asrs	r7, r7, #1
 8008ca0:	3608      	adds	r6, #8
 8008ca2:	e7e5      	b.n	8008c70 <_dtoa_r+0x370>
 8008ca4:	f000 80a6 	beq.w	8008df4 <_dtoa_r+0x4f4>
 8008ca8:	f1ca 0600 	rsb	r6, sl, #0
 8008cac:	4ba5      	ldr	r3, [pc, #660]	; (8008f44 <_dtoa_r+0x644>)
 8008cae:	4fa6      	ldr	r7, [pc, #664]	; (8008f48 <_dtoa_r+0x648>)
 8008cb0:	f006 020f 	and.w	r2, r6, #15
 8008cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cc0:	f7f7 fcba 	bl	8000638 <__aeabi_dmul>
 8008cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc8:	1136      	asrs	r6, r6, #4
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2502      	movs	r5, #2
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	f040 8085 	bne.w	8008dde <_dtoa_r+0x4de>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1d2      	bne.n	8008c7e <_dtoa_r+0x37e>
 8008cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 808c 	beq.w	8008df8 <_dtoa_r+0x4f8>
 8008ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ce4:	4b99      	ldr	r3, [pc, #612]	; (8008f4c <_dtoa_r+0x64c>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4630      	mov	r0, r6
 8008cea:	4639      	mov	r1, r7
 8008cec:	f7f7 ff16 	bl	8000b1c <__aeabi_dcmplt>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f000 8081 	beq.w	8008df8 <_dtoa_r+0x4f8>
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d07d      	beq.n	8008df8 <_dtoa_r+0x4f8>
 8008cfc:	f1b9 0f00 	cmp.w	r9, #0
 8008d00:	dd3c      	ble.n	8008d7c <_dtoa_r+0x47c>
 8008d02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4b91      	ldr	r3, [pc, #580]	; (8008f50 <_dtoa_r+0x650>)
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 fc92 	bl	8000638 <__aeabi_dmul>
 8008d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d18:	3501      	adds	r5, #1
 8008d1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d22:	4628      	mov	r0, r5
 8008d24:	f7f7 fc1e 	bl	8000564 <__aeabi_i2d>
 8008d28:	4632      	mov	r2, r6
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	f7f7 fc84 	bl	8000638 <__aeabi_dmul>
 8008d30:	4b88      	ldr	r3, [pc, #544]	; (8008f54 <_dtoa_r+0x654>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	f7f7 faca 	bl	80002cc <__adddf3>
 8008d38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d40:	9303      	str	r3, [sp, #12]
 8008d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d15c      	bne.n	8008e02 <_dtoa_r+0x502>
 8008d48:	4b83      	ldr	r3, [pc, #524]	; (8008f58 <_dtoa_r+0x658>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 faba 	bl	80002c8 <__aeabi_dsub>
 8008d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d58:	4606      	mov	r6, r0
 8008d5a:	460f      	mov	r7, r1
 8008d5c:	f7f7 fefc 	bl	8000b58 <__aeabi_dcmpgt>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f040 8296 	bne.w	8009292 <_dtoa_r+0x992>
 8008d66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d70:	4639      	mov	r1, r7
 8008d72:	f7f7 fed3 	bl	8000b1c <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f040 8288 	bne.w	800928c <_dtoa_r+0x98c>
 8008d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f2c0 8158 	blt.w	800903c <_dtoa_r+0x73c>
 8008d8c:	f1ba 0f0e 	cmp.w	sl, #14
 8008d90:	f300 8154 	bgt.w	800903c <_dtoa_r+0x73c>
 8008d94:	4b6b      	ldr	r3, [pc, #428]	; (8008f44 <_dtoa_r+0x644>)
 8008d96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f280 80e3 	bge.w	8008f6c <_dtoa_r+0x66c>
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f300 80df 	bgt.w	8008f6c <_dtoa_r+0x66c>
 8008dae:	f040 826d 	bne.w	800928c <_dtoa_r+0x98c>
 8008db2:	4b69      	ldr	r3, [pc, #420]	; (8008f58 <_dtoa_r+0x658>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	4640      	mov	r0, r8
 8008db8:	4649      	mov	r1, r9
 8008dba:	f7f7 fc3d 	bl	8000638 <__aeabi_dmul>
 8008dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dc2:	f7f7 febf 	bl	8000b44 <__aeabi_dcmpge>
 8008dc6:	9e01      	ldr	r6, [sp, #4]
 8008dc8:	4637      	mov	r7, r6
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f040 8243 	bne.w	8009256 <_dtoa_r+0x956>
 8008dd0:	9d00      	ldr	r5, [sp, #0]
 8008dd2:	2331      	movs	r3, #49	; 0x31
 8008dd4:	f805 3b01 	strb.w	r3, [r5], #1
 8008dd8:	f10a 0a01 	add.w	sl, sl, #1
 8008ddc:	e23f      	b.n	800925e <_dtoa_r+0x95e>
 8008dde:	07f2      	lsls	r2, r6, #31
 8008de0:	d505      	bpl.n	8008dee <_dtoa_r+0x4ee>
 8008de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de6:	f7f7 fc27 	bl	8000638 <__aeabi_dmul>
 8008dea:	3501      	adds	r5, #1
 8008dec:	2301      	movs	r3, #1
 8008dee:	1076      	asrs	r6, r6, #1
 8008df0:	3708      	adds	r7, #8
 8008df2:	e76c      	b.n	8008cce <_dtoa_r+0x3ce>
 8008df4:	2502      	movs	r5, #2
 8008df6:	e76f      	b.n	8008cd8 <_dtoa_r+0x3d8>
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8008e00:	e78d      	b.n	8008d1e <_dtoa_r+0x41e>
 8008e02:	9900      	ldr	r1, [sp, #0]
 8008e04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e08:	4b4e      	ldr	r3, [pc, #312]	; (8008f44 <_dtoa_r+0x644>)
 8008e0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e0e:	4401      	add	r1, r0
 8008e10:	9102      	str	r1, [sp, #8]
 8008e12:	9908      	ldr	r1, [sp, #32]
 8008e14:	eeb0 8a47 	vmov.f32	s16, s14
 8008e18:	eef0 8a67 	vmov.f32	s17, s15
 8008e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d045      	beq.n	8008eb4 <_dtoa_r+0x5b4>
 8008e28:	494c      	ldr	r1, [pc, #304]	; (8008f5c <_dtoa_r+0x65c>)
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f7f7 fd2e 	bl	800088c <__aeabi_ddiv>
 8008e30:	ec53 2b18 	vmov	r2, r3, d8
 8008e34:	f7f7 fa48 	bl	80002c8 <__aeabi_dsub>
 8008e38:	9d00      	ldr	r5, [sp, #0]
 8008e3a:	ec41 0b18 	vmov	d8, r0, r1
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7f7 fea9 	bl	8000b98 <__aeabi_d2iz>
 8008e46:	900c      	str	r0, [sp, #48]	; 0x30
 8008e48:	f7f7 fb8c 	bl	8000564 <__aeabi_i2d>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	f7f7 fa38 	bl	80002c8 <__aeabi_dsub>
 8008e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e5a:	3330      	adds	r3, #48	; 0x30
 8008e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e60:	ec53 2b18 	vmov	r2, r3, d8
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	f7f7 fe58 	bl	8000b1c <__aeabi_dcmplt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d165      	bne.n	8008f3c <_dtoa_r+0x63c>
 8008e70:	4632      	mov	r2, r6
 8008e72:	463b      	mov	r3, r7
 8008e74:	4935      	ldr	r1, [pc, #212]	; (8008f4c <_dtoa_r+0x64c>)
 8008e76:	2000      	movs	r0, #0
 8008e78:	f7f7 fa26 	bl	80002c8 <__aeabi_dsub>
 8008e7c:	ec53 2b18 	vmov	r2, r3, d8
 8008e80:	f7f7 fe4c 	bl	8000b1c <__aeabi_dcmplt>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 80b9 	bne.w	8008ffc <_dtoa_r+0x6fc>
 8008e8a:	9b02      	ldr	r3, [sp, #8]
 8008e8c:	429d      	cmp	r5, r3
 8008e8e:	f43f af75 	beq.w	8008d7c <_dtoa_r+0x47c>
 8008e92:	4b2f      	ldr	r3, [pc, #188]	; (8008f50 <_dtoa_r+0x650>)
 8008e94:	ec51 0b18 	vmov	r0, r1, d8
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f7f7 fbcd 	bl	8000638 <__aeabi_dmul>
 8008e9e:	4b2c      	ldr	r3, [pc, #176]	; (8008f50 <_dtoa_r+0x650>)
 8008ea0:	ec41 0b18 	vmov	d8, r0, r1
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	f7f7 fbc5 	bl	8000638 <__aeabi_dmul>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460f      	mov	r7, r1
 8008eb2:	e7c4      	b.n	8008e3e <_dtoa_r+0x53e>
 8008eb4:	ec51 0b17 	vmov	r0, r1, d7
 8008eb8:	f7f7 fbbe 	bl	8000638 <__aeabi_dmul>
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	9d00      	ldr	r5, [sp, #0]
 8008ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ec2:	ec41 0b18 	vmov	d8, r0, r1
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7f7 fe65 	bl	8000b98 <__aeabi_d2iz>
 8008ece:	9011      	str	r0, [sp, #68]	; 0x44
 8008ed0:	f7f7 fb48 	bl	8000564 <__aeabi_i2d>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 f9f4 	bl	80002c8 <__aeabi_dsub>
 8008ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ee2:	3330      	adds	r3, #48	; 0x30
 8008ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	429d      	cmp	r5, r3
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	f04f 0200 	mov.w	r2, #0
 8008ef4:	d134      	bne.n	8008f60 <_dtoa_r+0x660>
 8008ef6:	4b19      	ldr	r3, [pc, #100]	; (8008f5c <_dtoa_r+0x65c>)
 8008ef8:	ec51 0b18 	vmov	r0, r1, d8
 8008efc:	f7f7 f9e6 	bl	80002cc <__adddf3>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fe26 	bl	8000b58 <__aeabi_dcmpgt>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d175      	bne.n	8008ffc <_dtoa_r+0x6fc>
 8008f10:	ec53 2b18 	vmov	r2, r3, d8
 8008f14:	4911      	ldr	r1, [pc, #68]	; (8008f5c <_dtoa_r+0x65c>)
 8008f16:	2000      	movs	r0, #0
 8008f18:	f7f7 f9d6 	bl	80002c8 <__aeabi_dsub>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 fdfa 	bl	8000b1c <__aeabi_dcmplt>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	f43f af27 	beq.w	8008d7c <_dtoa_r+0x47c>
 8008f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f30:	1e6b      	subs	r3, r5, #1
 8008f32:	930c      	str	r3, [sp, #48]	; 0x30
 8008f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f38:	2b30      	cmp	r3, #48	; 0x30
 8008f3a:	d0f8      	beq.n	8008f2e <_dtoa_r+0x62e>
 8008f3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f40:	e04a      	b.n	8008fd8 <_dtoa_r+0x6d8>
 8008f42:	bf00      	nop
 8008f44:	0800d2f8 	.word	0x0800d2f8
 8008f48:	0800d2d0 	.word	0x0800d2d0
 8008f4c:	3ff00000 	.word	0x3ff00000
 8008f50:	40240000 	.word	0x40240000
 8008f54:	401c0000 	.word	0x401c0000
 8008f58:	40140000 	.word	0x40140000
 8008f5c:	3fe00000 	.word	0x3fe00000
 8008f60:	4baf      	ldr	r3, [pc, #700]	; (8009220 <_dtoa_r+0x920>)
 8008f62:	f7f7 fb69 	bl	8000638 <__aeabi_dmul>
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	e7ac      	b.n	8008ec6 <_dtoa_r+0x5c6>
 8008f6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f70:	9d00      	ldr	r5, [sp, #0]
 8008f72:	4642      	mov	r2, r8
 8008f74:	464b      	mov	r3, r9
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 fc87 	bl	800088c <__aeabi_ddiv>
 8008f7e:	f7f7 fe0b 	bl	8000b98 <__aeabi_d2iz>
 8008f82:	9002      	str	r0, [sp, #8]
 8008f84:	f7f7 faee 	bl	8000564 <__aeabi_i2d>
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	f7f7 fb54 	bl	8000638 <__aeabi_dmul>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4630      	mov	r0, r6
 8008f96:	4639      	mov	r1, r7
 8008f98:	f7f7 f996 	bl	80002c8 <__aeabi_dsub>
 8008f9c:	9e02      	ldr	r6, [sp, #8]
 8008f9e:	9f01      	ldr	r7, [sp, #4]
 8008fa0:	3630      	adds	r6, #48	; 0x30
 8008fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fa6:	9e00      	ldr	r6, [sp, #0]
 8008fa8:	1bae      	subs	r6, r5, r6
 8008faa:	42b7      	cmp	r7, r6
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	d137      	bne.n	8009022 <_dtoa_r+0x722>
 8008fb2:	f7f7 f98b 	bl	80002cc <__adddf3>
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	464b      	mov	r3, r9
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460f      	mov	r7, r1
 8008fbe:	f7f7 fdcb 	bl	8000b58 <__aeabi_dcmpgt>
 8008fc2:	b9c8      	cbnz	r0, 8008ff8 <_dtoa_r+0x6f8>
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	4630      	mov	r0, r6
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f7f7 fd9c 	bl	8000b08 <__aeabi_dcmpeq>
 8008fd0:	b110      	cbz	r0, 8008fd8 <_dtoa_r+0x6d8>
 8008fd2:	9b02      	ldr	r3, [sp, #8]
 8008fd4:	07d9      	lsls	r1, r3, #31
 8008fd6:	d40f      	bmi.n	8008ff8 <_dtoa_r+0x6f8>
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4659      	mov	r1, fp
 8008fdc:	f000 fcf6 	bl	80099cc <_Bfree>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	702b      	strb	r3, [r5, #0]
 8008fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fe6:	f10a 0001 	add.w	r0, sl, #1
 8008fea:	6018      	str	r0, [r3, #0]
 8008fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f43f acd8 	beq.w	80089a4 <_dtoa_r+0xa4>
 8008ff4:	601d      	str	r5, [r3, #0]
 8008ff6:	e4d5      	b.n	80089a4 <_dtoa_r+0xa4>
 8008ff8:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ffc:	462b      	mov	r3, r5
 8008ffe:	461d      	mov	r5, r3
 8009000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009004:	2a39      	cmp	r2, #57	; 0x39
 8009006:	d108      	bne.n	800901a <_dtoa_r+0x71a>
 8009008:	9a00      	ldr	r2, [sp, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d1f7      	bne.n	8008ffe <_dtoa_r+0x6fe>
 800900e:	9a07      	ldr	r2, [sp, #28]
 8009010:	9900      	ldr	r1, [sp, #0]
 8009012:	3201      	adds	r2, #1
 8009014:	9207      	str	r2, [sp, #28]
 8009016:	2230      	movs	r2, #48	; 0x30
 8009018:	700a      	strb	r2, [r1, #0]
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	3201      	adds	r2, #1
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	e78c      	b.n	8008f3c <_dtoa_r+0x63c>
 8009022:	4b7f      	ldr	r3, [pc, #508]	; (8009220 <_dtoa_r+0x920>)
 8009024:	2200      	movs	r2, #0
 8009026:	f7f7 fb07 	bl	8000638 <__aeabi_dmul>
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	4606      	mov	r6, r0
 8009030:	460f      	mov	r7, r1
 8009032:	f7f7 fd69 	bl	8000b08 <__aeabi_dcmpeq>
 8009036:	2800      	cmp	r0, #0
 8009038:	d09b      	beq.n	8008f72 <_dtoa_r+0x672>
 800903a:	e7cd      	b.n	8008fd8 <_dtoa_r+0x6d8>
 800903c:	9a08      	ldr	r2, [sp, #32]
 800903e:	2a00      	cmp	r2, #0
 8009040:	f000 80c4 	beq.w	80091cc <_dtoa_r+0x8cc>
 8009044:	9a05      	ldr	r2, [sp, #20]
 8009046:	2a01      	cmp	r2, #1
 8009048:	f300 80a8 	bgt.w	800919c <_dtoa_r+0x89c>
 800904c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800904e:	2a00      	cmp	r2, #0
 8009050:	f000 80a0 	beq.w	8009194 <_dtoa_r+0x894>
 8009054:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009058:	9e06      	ldr	r6, [sp, #24]
 800905a:	4645      	mov	r5, r8
 800905c:	9a04      	ldr	r2, [sp, #16]
 800905e:	2101      	movs	r1, #1
 8009060:	441a      	add	r2, r3
 8009062:	4620      	mov	r0, r4
 8009064:	4498      	add	r8, r3
 8009066:	9204      	str	r2, [sp, #16]
 8009068:	f000 fd6c 	bl	8009b44 <__i2b>
 800906c:	4607      	mov	r7, r0
 800906e:	2d00      	cmp	r5, #0
 8009070:	dd0b      	ble.n	800908a <_dtoa_r+0x78a>
 8009072:	9b04      	ldr	r3, [sp, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd08      	ble.n	800908a <_dtoa_r+0x78a>
 8009078:	42ab      	cmp	r3, r5
 800907a:	9a04      	ldr	r2, [sp, #16]
 800907c:	bfa8      	it	ge
 800907e:	462b      	movge	r3, r5
 8009080:	eba8 0803 	sub.w	r8, r8, r3
 8009084:	1aed      	subs	r5, r5, r3
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	9b06      	ldr	r3, [sp, #24]
 800908c:	b1fb      	cbz	r3, 80090ce <_dtoa_r+0x7ce>
 800908e:	9b08      	ldr	r3, [sp, #32]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 809f 	beq.w	80091d4 <_dtoa_r+0x8d4>
 8009096:	2e00      	cmp	r6, #0
 8009098:	dd11      	ble.n	80090be <_dtoa_r+0x7be>
 800909a:	4639      	mov	r1, r7
 800909c:	4632      	mov	r2, r6
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 fe0c 	bl	8009cbc <__pow5mult>
 80090a4:	465a      	mov	r2, fp
 80090a6:	4601      	mov	r1, r0
 80090a8:	4607      	mov	r7, r0
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fd60 	bl	8009b70 <__multiply>
 80090b0:	4659      	mov	r1, fp
 80090b2:	9007      	str	r0, [sp, #28]
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fc89 	bl	80099cc <_Bfree>
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	469b      	mov	fp, r3
 80090be:	9b06      	ldr	r3, [sp, #24]
 80090c0:	1b9a      	subs	r2, r3, r6
 80090c2:	d004      	beq.n	80090ce <_dtoa_r+0x7ce>
 80090c4:	4659      	mov	r1, fp
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 fdf8 	bl	8009cbc <__pow5mult>
 80090cc:	4683      	mov	fp, r0
 80090ce:	2101      	movs	r1, #1
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fd37 	bl	8009b44 <__i2b>
 80090d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d8:	2b00      	cmp	r3, #0
 80090da:	4606      	mov	r6, r0
 80090dc:	dd7c      	ble.n	80091d8 <_dtoa_r+0x8d8>
 80090de:	461a      	mov	r2, r3
 80090e0:	4601      	mov	r1, r0
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fdea 	bl	8009cbc <__pow5mult>
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	4606      	mov	r6, r0
 80090ee:	dd76      	ble.n	80091de <_dtoa_r+0x8de>
 80090f0:	2300      	movs	r3, #0
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	6933      	ldr	r3, [r6, #16]
 80090f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090fa:	6918      	ldr	r0, [r3, #16]
 80090fc:	f000 fcd2 	bl	8009aa4 <__hi0bits>
 8009100:	f1c0 0020 	rsb	r0, r0, #32
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	4418      	add	r0, r3
 8009108:	f010 001f 	ands.w	r0, r0, #31
 800910c:	f000 8086 	beq.w	800921c <_dtoa_r+0x91c>
 8009110:	f1c0 0320 	rsb	r3, r0, #32
 8009114:	2b04      	cmp	r3, #4
 8009116:	dd7f      	ble.n	8009218 <_dtoa_r+0x918>
 8009118:	f1c0 001c 	rsb	r0, r0, #28
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	4403      	add	r3, r0
 8009120:	4480      	add	r8, r0
 8009122:	4405      	add	r5, r0
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	f1b8 0f00 	cmp.w	r8, #0
 800912a:	dd05      	ble.n	8009138 <_dtoa_r+0x838>
 800912c:	4659      	mov	r1, fp
 800912e:	4642      	mov	r2, r8
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fe1d 	bl	8009d70 <__lshift>
 8009136:	4683      	mov	fp, r0
 8009138:	9b04      	ldr	r3, [sp, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dd05      	ble.n	800914a <_dtoa_r+0x84a>
 800913e:	4631      	mov	r1, r6
 8009140:	461a      	mov	r2, r3
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fe14 	bl	8009d70 <__lshift>
 8009148:	4606      	mov	r6, r0
 800914a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800914c:	2b00      	cmp	r3, #0
 800914e:	d069      	beq.n	8009224 <_dtoa_r+0x924>
 8009150:	4631      	mov	r1, r6
 8009152:	4658      	mov	r0, fp
 8009154:	f000 fe78 	bl	8009e48 <__mcmp>
 8009158:	2800      	cmp	r0, #0
 800915a:	da63      	bge.n	8009224 <_dtoa_r+0x924>
 800915c:	2300      	movs	r3, #0
 800915e:	4659      	mov	r1, fp
 8009160:	220a      	movs	r2, #10
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fc54 	bl	8009a10 <__multadd>
 8009168:	9b08      	ldr	r3, [sp, #32]
 800916a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916e:	4683      	mov	fp, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 818f 	beq.w	8009494 <_dtoa_r+0xb94>
 8009176:	4639      	mov	r1, r7
 8009178:	2300      	movs	r3, #0
 800917a:	220a      	movs	r2, #10
 800917c:	4620      	mov	r0, r4
 800917e:	f000 fc47 	bl	8009a10 <__multadd>
 8009182:	f1b9 0f00 	cmp.w	r9, #0
 8009186:	4607      	mov	r7, r0
 8009188:	f300 808e 	bgt.w	80092a8 <_dtoa_r+0x9a8>
 800918c:	9b05      	ldr	r3, [sp, #20]
 800918e:	2b02      	cmp	r3, #2
 8009190:	dc50      	bgt.n	8009234 <_dtoa_r+0x934>
 8009192:	e089      	b.n	80092a8 <_dtoa_r+0x9a8>
 8009194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800919a:	e75d      	b.n	8009058 <_dtoa_r+0x758>
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	1e5e      	subs	r6, r3, #1
 80091a0:	9b06      	ldr	r3, [sp, #24]
 80091a2:	42b3      	cmp	r3, r6
 80091a4:	bfbf      	itttt	lt
 80091a6:	9b06      	ldrlt	r3, [sp, #24]
 80091a8:	9606      	strlt	r6, [sp, #24]
 80091aa:	1af2      	sublt	r2, r6, r3
 80091ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80091ae:	bfb6      	itet	lt
 80091b0:	189b      	addlt	r3, r3, r2
 80091b2:	1b9e      	subge	r6, r3, r6
 80091b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	bfb8      	it	lt
 80091ba:	2600      	movlt	r6, #0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bfb5      	itete	lt
 80091c0:	eba8 0503 	sublt.w	r5, r8, r3
 80091c4:	9b01      	ldrge	r3, [sp, #4]
 80091c6:	2300      	movlt	r3, #0
 80091c8:	4645      	movge	r5, r8
 80091ca:	e747      	b.n	800905c <_dtoa_r+0x75c>
 80091cc:	9e06      	ldr	r6, [sp, #24]
 80091ce:	9f08      	ldr	r7, [sp, #32]
 80091d0:	4645      	mov	r5, r8
 80091d2:	e74c      	b.n	800906e <_dtoa_r+0x76e>
 80091d4:	9a06      	ldr	r2, [sp, #24]
 80091d6:	e775      	b.n	80090c4 <_dtoa_r+0x7c4>
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	dc18      	bgt.n	8009210 <_dtoa_r+0x910>
 80091de:	9b02      	ldr	r3, [sp, #8]
 80091e0:	b9b3      	cbnz	r3, 8009210 <_dtoa_r+0x910>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e8:	b9a3      	cbnz	r3, 8009214 <_dtoa_r+0x914>
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091f0:	0d1b      	lsrs	r3, r3, #20
 80091f2:	051b      	lsls	r3, r3, #20
 80091f4:	b12b      	cbz	r3, 8009202 <_dtoa_r+0x902>
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	3301      	adds	r3, #1
 80091fa:	9304      	str	r3, [sp, #16]
 80091fc:	f108 0801 	add.w	r8, r8, #1
 8009200:	2301      	movs	r3, #1
 8009202:	9306      	str	r3, [sp, #24]
 8009204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009206:	2b00      	cmp	r3, #0
 8009208:	f47f af74 	bne.w	80090f4 <_dtoa_r+0x7f4>
 800920c:	2001      	movs	r0, #1
 800920e:	e779      	b.n	8009104 <_dtoa_r+0x804>
 8009210:	2300      	movs	r3, #0
 8009212:	e7f6      	b.n	8009202 <_dtoa_r+0x902>
 8009214:	9b02      	ldr	r3, [sp, #8]
 8009216:	e7f4      	b.n	8009202 <_dtoa_r+0x902>
 8009218:	d085      	beq.n	8009126 <_dtoa_r+0x826>
 800921a:	4618      	mov	r0, r3
 800921c:	301c      	adds	r0, #28
 800921e:	e77d      	b.n	800911c <_dtoa_r+0x81c>
 8009220:	40240000 	.word	0x40240000
 8009224:	9b01      	ldr	r3, [sp, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	dc38      	bgt.n	800929c <_dtoa_r+0x99c>
 800922a:	9b05      	ldr	r3, [sp, #20]
 800922c:	2b02      	cmp	r3, #2
 800922e:	dd35      	ble.n	800929c <_dtoa_r+0x99c>
 8009230:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009234:	f1b9 0f00 	cmp.w	r9, #0
 8009238:	d10d      	bne.n	8009256 <_dtoa_r+0x956>
 800923a:	4631      	mov	r1, r6
 800923c:	464b      	mov	r3, r9
 800923e:	2205      	movs	r2, #5
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fbe5 	bl	8009a10 <__multadd>
 8009246:	4601      	mov	r1, r0
 8009248:	4606      	mov	r6, r0
 800924a:	4658      	mov	r0, fp
 800924c:	f000 fdfc 	bl	8009e48 <__mcmp>
 8009250:	2800      	cmp	r0, #0
 8009252:	f73f adbd 	bgt.w	8008dd0 <_dtoa_r+0x4d0>
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	9d00      	ldr	r5, [sp, #0]
 800925a:	ea6f 0a03 	mvn.w	sl, r3
 800925e:	f04f 0800 	mov.w	r8, #0
 8009262:	4631      	mov	r1, r6
 8009264:	4620      	mov	r0, r4
 8009266:	f000 fbb1 	bl	80099cc <_Bfree>
 800926a:	2f00      	cmp	r7, #0
 800926c:	f43f aeb4 	beq.w	8008fd8 <_dtoa_r+0x6d8>
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	d005      	beq.n	8009282 <_dtoa_r+0x982>
 8009276:	45b8      	cmp	r8, r7
 8009278:	d003      	beq.n	8009282 <_dtoa_r+0x982>
 800927a:	4641      	mov	r1, r8
 800927c:	4620      	mov	r0, r4
 800927e:	f000 fba5 	bl	80099cc <_Bfree>
 8009282:	4639      	mov	r1, r7
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fba1 	bl	80099cc <_Bfree>
 800928a:	e6a5      	b.n	8008fd8 <_dtoa_r+0x6d8>
 800928c:	2600      	movs	r6, #0
 800928e:	4637      	mov	r7, r6
 8009290:	e7e1      	b.n	8009256 <_dtoa_r+0x956>
 8009292:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009298:	4637      	mov	r7, r6
 800929a:	e599      	b.n	8008dd0 <_dtoa_r+0x4d0>
 800929c:	9b08      	ldr	r3, [sp, #32]
 800929e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 80fd 	beq.w	80094a2 <_dtoa_r+0xba2>
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	dd05      	ble.n	80092b8 <_dtoa_r+0x9b8>
 80092ac:	4639      	mov	r1, r7
 80092ae:	462a      	mov	r2, r5
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fd5d 	bl	8009d70 <__lshift>
 80092b6:	4607      	mov	r7, r0
 80092b8:	9b06      	ldr	r3, [sp, #24]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d05c      	beq.n	8009378 <_dtoa_r+0xa78>
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fb43 	bl	800994c <_Balloc>
 80092c6:	4605      	mov	r5, r0
 80092c8:	b928      	cbnz	r0, 80092d6 <_dtoa_r+0x9d6>
 80092ca:	4b80      	ldr	r3, [pc, #512]	; (80094cc <_dtoa_r+0xbcc>)
 80092cc:	4602      	mov	r2, r0
 80092ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092d2:	f7ff bb2e 	b.w	8008932 <_dtoa_r+0x32>
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	3202      	adds	r2, #2
 80092da:	0092      	lsls	r2, r2, #2
 80092dc:	f107 010c 	add.w	r1, r7, #12
 80092e0:	300c      	adds	r0, #12
 80092e2:	f000 fb25 	bl	8009930 <memcpy>
 80092e6:	2201      	movs	r2, #1
 80092e8:	4629      	mov	r1, r5
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fd40 	bl	8009d70 <__lshift>
 80092f0:	9b00      	ldr	r3, [sp, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	444b      	add	r3, r9
 80092fa:	9307      	str	r3, [sp, #28]
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	46b8      	mov	r8, r7
 8009304:	9306      	str	r3, [sp, #24]
 8009306:	4607      	mov	r7, r0
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	4631      	mov	r1, r6
 800930c:	3b01      	subs	r3, #1
 800930e:	4658      	mov	r0, fp
 8009310:	9302      	str	r3, [sp, #8]
 8009312:	f7ff fa68 	bl	80087e6 <quorem>
 8009316:	4603      	mov	r3, r0
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	9004      	str	r0, [sp, #16]
 800931c:	4641      	mov	r1, r8
 800931e:	4658      	mov	r0, fp
 8009320:	9308      	str	r3, [sp, #32]
 8009322:	f000 fd91 	bl	8009e48 <__mcmp>
 8009326:	463a      	mov	r2, r7
 8009328:	4681      	mov	r9, r0
 800932a:	4631      	mov	r1, r6
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fda7 	bl	8009e80 <__mdiff>
 8009332:	68c2      	ldr	r2, [r0, #12]
 8009334:	9b08      	ldr	r3, [sp, #32]
 8009336:	4605      	mov	r5, r0
 8009338:	bb02      	cbnz	r2, 800937c <_dtoa_r+0xa7c>
 800933a:	4601      	mov	r1, r0
 800933c:	4658      	mov	r0, fp
 800933e:	f000 fd83 	bl	8009e48 <__mcmp>
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	4602      	mov	r2, r0
 8009346:	4629      	mov	r1, r5
 8009348:	4620      	mov	r0, r4
 800934a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800934e:	f000 fb3d 	bl	80099cc <_Bfree>
 8009352:	9b05      	ldr	r3, [sp, #20]
 8009354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009356:	9d01      	ldr	r5, [sp, #4]
 8009358:	ea43 0102 	orr.w	r1, r3, r2
 800935c:	9b06      	ldr	r3, [sp, #24]
 800935e:	430b      	orrs	r3, r1
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	d10d      	bne.n	8009380 <_dtoa_r+0xa80>
 8009364:	2b39      	cmp	r3, #57	; 0x39
 8009366:	d029      	beq.n	80093bc <_dtoa_r+0xabc>
 8009368:	f1b9 0f00 	cmp.w	r9, #0
 800936c:	dd01      	ble.n	8009372 <_dtoa_r+0xa72>
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	3331      	adds	r3, #49	; 0x31
 8009372:	9a02      	ldr	r2, [sp, #8]
 8009374:	7013      	strb	r3, [r2, #0]
 8009376:	e774      	b.n	8009262 <_dtoa_r+0x962>
 8009378:	4638      	mov	r0, r7
 800937a:	e7b9      	b.n	80092f0 <_dtoa_r+0x9f0>
 800937c:	2201      	movs	r2, #1
 800937e:	e7e2      	b.n	8009346 <_dtoa_r+0xa46>
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	db06      	blt.n	8009394 <_dtoa_r+0xa94>
 8009386:	9905      	ldr	r1, [sp, #20]
 8009388:	ea41 0909 	orr.w	r9, r1, r9
 800938c:	9906      	ldr	r1, [sp, #24]
 800938e:	ea59 0101 	orrs.w	r1, r9, r1
 8009392:	d120      	bne.n	80093d6 <_dtoa_r+0xad6>
 8009394:	2a00      	cmp	r2, #0
 8009396:	ddec      	ble.n	8009372 <_dtoa_r+0xa72>
 8009398:	4659      	mov	r1, fp
 800939a:	2201      	movs	r2, #1
 800939c:	4620      	mov	r0, r4
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	f000 fce6 	bl	8009d70 <__lshift>
 80093a4:	4631      	mov	r1, r6
 80093a6:	4683      	mov	fp, r0
 80093a8:	f000 fd4e 	bl	8009e48 <__mcmp>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	dc02      	bgt.n	80093b8 <_dtoa_r+0xab8>
 80093b2:	d1de      	bne.n	8009372 <_dtoa_r+0xa72>
 80093b4:	07da      	lsls	r2, r3, #31
 80093b6:	d5dc      	bpl.n	8009372 <_dtoa_r+0xa72>
 80093b8:	2b39      	cmp	r3, #57	; 0x39
 80093ba:	d1d8      	bne.n	800936e <_dtoa_r+0xa6e>
 80093bc:	9a02      	ldr	r2, [sp, #8]
 80093be:	2339      	movs	r3, #57	; 0x39
 80093c0:	7013      	strb	r3, [r2, #0]
 80093c2:	462b      	mov	r3, r5
 80093c4:	461d      	mov	r5, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093cc:	2a39      	cmp	r2, #57	; 0x39
 80093ce:	d050      	beq.n	8009472 <_dtoa_r+0xb72>
 80093d0:	3201      	adds	r2, #1
 80093d2:	701a      	strb	r2, [r3, #0]
 80093d4:	e745      	b.n	8009262 <_dtoa_r+0x962>
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	dd03      	ble.n	80093e2 <_dtoa_r+0xae2>
 80093da:	2b39      	cmp	r3, #57	; 0x39
 80093dc:	d0ee      	beq.n	80093bc <_dtoa_r+0xabc>
 80093de:	3301      	adds	r3, #1
 80093e0:	e7c7      	b.n	8009372 <_dtoa_r+0xa72>
 80093e2:	9a01      	ldr	r2, [sp, #4]
 80093e4:	9907      	ldr	r1, [sp, #28]
 80093e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093ea:	428a      	cmp	r2, r1
 80093ec:	d02a      	beq.n	8009444 <_dtoa_r+0xb44>
 80093ee:	4659      	mov	r1, fp
 80093f0:	2300      	movs	r3, #0
 80093f2:	220a      	movs	r2, #10
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 fb0b 	bl	8009a10 <__multadd>
 80093fa:	45b8      	cmp	r8, r7
 80093fc:	4683      	mov	fp, r0
 80093fe:	f04f 0300 	mov.w	r3, #0
 8009402:	f04f 020a 	mov.w	r2, #10
 8009406:	4641      	mov	r1, r8
 8009408:	4620      	mov	r0, r4
 800940a:	d107      	bne.n	800941c <_dtoa_r+0xb1c>
 800940c:	f000 fb00 	bl	8009a10 <__multadd>
 8009410:	4680      	mov	r8, r0
 8009412:	4607      	mov	r7, r0
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	3301      	adds	r3, #1
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	e775      	b.n	8009308 <_dtoa_r+0xa08>
 800941c:	f000 faf8 	bl	8009a10 <__multadd>
 8009420:	4639      	mov	r1, r7
 8009422:	4680      	mov	r8, r0
 8009424:	2300      	movs	r3, #0
 8009426:	220a      	movs	r2, #10
 8009428:	4620      	mov	r0, r4
 800942a:	f000 faf1 	bl	8009a10 <__multadd>
 800942e:	4607      	mov	r7, r0
 8009430:	e7f0      	b.n	8009414 <_dtoa_r+0xb14>
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	9a00      	ldr	r2, [sp, #0]
 8009438:	bfcc      	ite	gt
 800943a:	464d      	movgt	r5, r9
 800943c:	2501      	movle	r5, #1
 800943e:	4415      	add	r5, r2
 8009440:	f04f 0800 	mov.w	r8, #0
 8009444:	4659      	mov	r1, fp
 8009446:	2201      	movs	r2, #1
 8009448:	4620      	mov	r0, r4
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	f000 fc90 	bl	8009d70 <__lshift>
 8009450:	4631      	mov	r1, r6
 8009452:	4683      	mov	fp, r0
 8009454:	f000 fcf8 	bl	8009e48 <__mcmp>
 8009458:	2800      	cmp	r0, #0
 800945a:	dcb2      	bgt.n	80093c2 <_dtoa_r+0xac2>
 800945c:	d102      	bne.n	8009464 <_dtoa_r+0xb64>
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	07db      	lsls	r3, r3, #31
 8009462:	d4ae      	bmi.n	80093c2 <_dtoa_r+0xac2>
 8009464:	462b      	mov	r3, r5
 8009466:	461d      	mov	r5, r3
 8009468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800946c:	2a30      	cmp	r2, #48	; 0x30
 800946e:	d0fa      	beq.n	8009466 <_dtoa_r+0xb66>
 8009470:	e6f7      	b.n	8009262 <_dtoa_r+0x962>
 8009472:	9a00      	ldr	r2, [sp, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d1a5      	bne.n	80093c4 <_dtoa_r+0xac4>
 8009478:	f10a 0a01 	add.w	sl, sl, #1
 800947c:	2331      	movs	r3, #49	; 0x31
 800947e:	e779      	b.n	8009374 <_dtoa_r+0xa74>
 8009480:	4b13      	ldr	r3, [pc, #76]	; (80094d0 <_dtoa_r+0xbd0>)
 8009482:	f7ff baaf 	b.w	80089e4 <_dtoa_r+0xe4>
 8009486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009488:	2b00      	cmp	r3, #0
 800948a:	f47f aa86 	bne.w	800899a <_dtoa_r+0x9a>
 800948e:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <_dtoa_r+0xbd4>)
 8009490:	f7ff baa8 	b.w	80089e4 <_dtoa_r+0xe4>
 8009494:	f1b9 0f00 	cmp.w	r9, #0
 8009498:	dc03      	bgt.n	80094a2 <_dtoa_r+0xba2>
 800949a:	9b05      	ldr	r3, [sp, #20]
 800949c:	2b02      	cmp	r3, #2
 800949e:	f73f aec9 	bgt.w	8009234 <_dtoa_r+0x934>
 80094a2:	9d00      	ldr	r5, [sp, #0]
 80094a4:	4631      	mov	r1, r6
 80094a6:	4658      	mov	r0, fp
 80094a8:	f7ff f99d 	bl	80087e6 <quorem>
 80094ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094b0:	f805 3b01 	strb.w	r3, [r5], #1
 80094b4:	9a00      	ldr	r2, [sp, #0]
 80094b6:	1aaa      	subs	r2, r5, r2
 80094b8:	4591      	cmp	r9, r2
 80094ba:	ddba      	ble.n	8009432 <_dtoa_r+0xb32>
 80094bc:	4659      	mov	r1, fp
 80094be:	2300      	movs	r3, #0
 80094c0:	220a      	movs	r2, #10
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 faa4 	bl	8009a10 <__multadd>
 80094c8:	4683      	mov	fp, r0
 80094ca:	e7eb      	b.n	80094a4 <_dtoa_r+0xba4>
 80094cc:	0800d1fc 	.word	0x0800d1fc
 80094d0:	0800d054 	.word	0x0800d054
 80094d4:	0800d179 	.word	0x0800d179

080094d8 <__sflush_r>:
 80094d8:	898a      	ldrh	r2, [r1, #12]
 80094da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094de:	4605      	mov	r5, r0
 80094e0:	0710      	lsls	r0, r2, #28
 80094e2:	460c      	mov	r4, r1
 80094e4:	d458      	bmi.n	8009598 <__sflush_r+0xc0>
 80094e6:	684b      	ldr	r3, [r1, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dc05      	bgt.n	80094f8 <__sflush_r+0x20>
 80094ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dc02      	bgt.n	80094f8 <__sflush_r+0x20>
 80094f2:	2000      	movs	r0, #0
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094fa:	2e00      	cmp	r6, #0
 80094fc:	d0f9      	beq.n	80094f2 <__sflush_r+0x1a>
 80094fe:	2300      	movs	r3, #0
 8009500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009504:	682f      	ldr	r7, [r5, #0]
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	d032      	beq.n	8009570 <__sflush_r+0x98>
 800950a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	075a      	lsls	r2, r3, #29
 8009510:	d505      	bpl.n	800951e <__sflush_r+0x46>
 8009512:	6863      	ldr	r3, [r4, #4]
 8009514:	1ac0      	subs	r0, r0, r3
 8009516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009518:	b10b      	cbz	r3, 800951e <__sflush_r+0x46>
 800951a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800951c:	1ac0      	subs	r0, r0, r3
 800951e:	2300      	movs	r3, #0
 8009520:	4602      	mov	r2, r0
 8009522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009524:	6a21      	ldr	r1, [r4, #32]
 8009526:	4628      	mov	r0, r5
 8009528:	47b0      	blx	r6
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	d106      	bne.n	800953e <__sflush_r+0x66>
 8009530:	6829      	ldr	r1, [r5, #0]
 8009532:	291d      	cmp	r1, #29
 8009534:	d82c      	bhi.n	8009590 <__sflush_r+0xb8>
 8009536:	4a2a      	ldr	r2, [pc, #168]	; (80095e0 <__sflush_r+0x108>)
 8009538:	40ca      	lsrs	r2, r1
 800953a:	07d6      	lsls	r6, r2, #31
 800953c:	d528      	bpl.n	8009590 <__sflush_r+0xb8>
 800953e:	2200      	movs	r2, #0
 8009540:	6062      	str	r2, [r4, #4]
 8009542:	04d9      	lsls	r1, r3, #19
 8009544:	6922      	ldr	r2, [r4, #16]
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	d504      	bpl.n	8009554 <__sflush_r+0x7c>
 800954a:	1c42      	adds	r2, r0, #1
 800954c:	d101      	bne.n	8009552 <__sflush_r+0x7a>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	b903      	cbnz	r3, 8009554 <__sflush_r+0x7c>
 8009552:	6560      	str	r0, [r4, #84]	; 0x54
 8009554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009556:	602f      	str	r7, [r5, #0]
 8009558:	2900      	cmp	r1, #0
 800955a:	d0ca      	beq.n	80094f2 <__sflush_r+0x1a>
 800955c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009560:	4299      	cmp	r1, r3
 8009562:	d002      	beq.n	800956a <__sflush_r+0x92>
 8009564:	4628      	mov	r0, r5
 8009566:	f000 fd7f 	bl	800a068 <_free_r>
 800956a:	2000      	movs	r0, #0
 800956c:	6360      	str	r0, [r4, #52]	; 0x34
 800956e:	e7c1      	b.n	80094f4 <__sflush_r+0x1c>
 8009570:	6a21      	ldr	r1, [r4, #32]
 8009572:	2301      	movs	r3, #1
 8009574:	4628      	mov	r0, r5
 8009576:	47b0      	blx	r6
 8009578:	1c41      	adds	r1, r0, #1
 800957a:	d1c7      	bne.n	800950c <__sflush_r+0x34>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0c4      	beq.n	800950c <__sflush_r+0x34>
 8009582:	2b1d      	cmp	r3, #29
 8009584:	d001      	beq.n	800958a <__sflush_r+0xb2>
 8009586:	2b16      	cmp	r3, #22
 8009588:	d101      	bne.n	800958e <__sflush_r+0xb6>
 800958a:	602f      	str	r7, [r5, #0]
 800958c:	e7b1      	b.n	80094f2 <__sflush_r+0x1a>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	e7ad      	b.n	80094f4 <__sflush_r+0x1c>
 8009598:	690f      	ldr	r7, [r1, #16]
 800959a:	2f00      	cmp	r7, #0
 800959c:	d0a9      	beq.n	80094f2 <__sflush_r+0x1a>
 800959e:	0793      	lsls	r3, r2, #30
 80095a0:	680e      	ldr	r6, [r1, #0]
 80095a2:	bf08      	it	eq
 80095a4:	694b      	ldreq	r3, [r1, #20]
 80095a6:	600f      	str	r7, [r1, #0]
 80095a8:	bf18      	it	ne
 80095aa:	2300      	movne	r3, #0
 80095ac:	eba6 0807 	sub.w	r8, r6, r7
 80095b0:	608b      	str	r3, [r1, #8]
 80095b2:	f1b8 0f00 	cmp.w	r8, #0
 80095b6:	dd9c      	ble.n	80094f2 <__sflush_r+0x1a>
 80095b8:	6a21      	ldr	r1, [r4, #32]
 80095ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095bc:	4643      	mov	r3, r8
 80095be:	463a      	mov	r2, r7
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b0      	blx	r6
 80095c4:	2800      	cmp	r0, #0
 80095c6:	dc06      	bgt.n	80095d6 <__sflush_r+0xfe>
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	e78e      	b.n	80094f4 <__sflush_r+0x1c>
 80095d6:	4407      	add	r7, r0
 80095d8:	eba8 0800 	sub.w	r8, r8, r0
 80095dc:	e7e9      	b.n	80095b2 <__sflush_r+0xda>
 80095de:	bf00      	nop
 80095e0:	20400001 	.word	0x20400001

080095e4 <_fflush_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	690b      	ldr	r3, [r1, #16]
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	b913      	cbnz	r3, 80095f4 <_fflush_r+0x10>
 80095ee:	2500      	movs	r5, #0
 80095f0:	4628      	mov	r0, r5
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	b118      	cbz	r0, 80095fe <_fflush_r+0x1a>
 80095f6:	6983      	ldr	r3, [r0, #24]
 80095f8:	b90b      	cbnz	r3, 80095fe <_fflush_r+0x1a>
 80095fa:	f000 f887 	bl	800970c <__sinit>
 80095fe:	4b14      	ldr	r3, [pc, #80]	; (8009650 <_fflush_r+0x6c>)
 8009600:	429c      	cmp	r4, r3
 8009602:	d11b      	bne.n	800963c <_fflush_r+0x58>
 8009604:	686c      	ldr	r4, [r5, #4]
 8009606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0ef      	beq.n	80095ee <_fflush_r+0xa>
 800960e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009610:	07d0      	lsls	r0, r2, #31
 8009612:	d404      	bmi.n	800961e <_fflush_r+0x3a>
 8009614:	0599      	lsls	r1, r3, #22
 8009616:	d402      	bmi.n	800961e <_fflush_r+0x3a>
 8009618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800961a:	f000 f91a 	bl	8009852 <__retarget_lock_acquire_recursive>
 800961e:	4628      	mov	r0, r5
 8009620:	4621      	mov	r1, r4
 8009622:	f7ff ff59 	bl	80094d8 <__sflush_r>
 8009626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009628:	07da      	lsls	r2, r3, #31
 800962a:	4605      	mov	r5, r0
 800962c:	d4e0      	bmi.n	80095f0 <_fflush_r+0xc>
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	059b      	lsls	r3, r3, #22
 8009632:	d4dd      	bmi.n	80095f0 <_fflush_r+0xc>
 8009634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009636:	f000 f90d 	bl	8009854 <__retarget_lock_release_recursive>
 800963a:	e7d9      	b.n	80095f0 <_fflush_r+0xc>
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <_fflush_r+0x70>)
 800963e:	429c      	cmp	r4, r3
 8009640:	d101      	bne.n	8009646 <_fflush_r+0x62>
 8009642:	68ac      	ldr	r4, [r5, #8]
 8009644:	e7df      	b.n	8009606 <_fflush_r+0x22>
 8009646:	4b04      	ldr	r3, [pc, #16]	; (8009658 <_fflush_r+0x74>)
 8009648:	429c      	cmp	r4, r3
 800964a:	bf08      	it	eq
 800964c:	68ec      	ldreq	r4, [r5, #12]
 800964e:	e7da      	b.n	8009606 <_fflush_r+0x22>
 8009650:	0800d230 	.word	0x0800d230
 8009654:	0800d250 	.word	0x0800d250
 8009658:	0800d210 	.word	0x0800d210

0800965c <std>:
 800965c:	2300      	movs	r3, #0
 800965e:	b510      	push	{r4, lr}
 8009660:	4604      	mov	r4, r0
 8009662:	e9c0 3300 	strd	r3, r3, [r0]
 8009666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800966a:	6083      	str	r3, [r0, #8]
 800966c:	8181      	strh	r1, [r0, #12]
 800966e:	6643      	str	r3, [r0, #100]	; 0x64
 8009670:	81c2      	strh	r2, [r0, #14]
 8009672:	6183      	str	r3, [r0, #24]
 8009674:	4619      	mov	r1, r3
 8009676:	2208      	movs	r2, #8
 8009678:	305c      	adds	r0, #92	; 0x5c
 800967a:	f7fe fc33 	bl	8007ee4 <memset>
 800967e:	4b05      	ldr	r3, [pc, #20]	; (8009694 <std+0x38>)
 8009680:	6263      	str	r3, [r4, #36]	; 0x24
 8009682:	4b05      	ldr	r3, [pc, #20]	; (8009698 <std+0x3c>)
 8009684:	62a3      	str	r3, [r4, #40]	; 0x28
 8009686:	4b05      	ldr	r3, [pc, #20]	; (800969c <std+0x40>)
 8009688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <std+0x44>)
 800968c:	6224      	str	r4, [r4, #32]
 800968e:	6323      	str	r3, [r4, #48]	; 0x30
 8009690:	bd10      	pop	{r4, pc}
 8009692:	bf00      	nop
 8009694:	0800a1dd 	.word	0x0800a1dd
 8009698:	0800a1ff 	.word	0x0800a1ff
 800969c:	0800a237 	.word	0x0800a237
 80096a0:	0800a25b 	.word	0x0800a25b

080096a4 <_cleanup_r>:
 80096a4:	4901      	ldr	r1, [pc, #4]	; (80096ac <_cleanup_r+0x8>)
 80096a6:	f000 b8af 	b.w	8009808 <_fwalk_reent>
 80096aa:	bf00      	nop
 80096ac:	080095e5 	.word	0x080095e5

080096b0 <__sfmoreglue>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	1e4a      	subs	r2, r1, #1
 80096b4:	2568      	movs	r5, #104	; 0x68
 80096b6:	4355      	muls	r5, r2
 80096b8:	460e      	mov	r6, r1
 80096ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096be:	f000 fd23 	bl	800a108 <_malloc_r>
 80096c2:	4604      	mov	r4, r0
 80096c4:	b140      	cbz	r0, 80096d8 <__sfmoreglue+0x28>
 80096c6:	2100      	movs	r1, #0
 80096c8:	e9c0 1600 	strd	r1, r6, [r0]
 80096cc:	300c      	adds	r0, #12
 80096ce:	60a0      	str	r0, [r4, #8]
 80096d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096d4:	f7fe fc06 	bl	8007ee4 <memset>
 80096d8:	4620      	mov	r0, r4
 80096da:	bd70      	pop	{r4, r5, r6, pc}

080096dc <__sfp_lock_acquire>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__sfp_lock_acquire+0x8>)
 80096de:	f000 b8b8 	b.w	8009852 <__retarget_lock_acquire_recursive>
 80096e2:	bf00      	nop
 80096e4:	200009f8 	.word	0x200009f8

080096e8 <__sfp_lock_release>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__sfp_lock_release+0x8>)
 80096ea:	f000 b8b3 	b.w	8009854 <__retarget_lock_release_recursive>
 80096ee:	bf00      	nop
 80096f0:	200009f8 	.word	0x200009f8

080096f4 <__sinit_lock_acquire>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__sinit_lock_acquire+0x8>)
 80096f6:	f000 b8ac 	b.w	8009852 <__retarget_lock_acquire_recursive>
 80096fa:	bf00      	nop
 80096fc:	200009f3 	.word	0x200009f3

08009700 <__sinit_lock_release>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__sinit_lock_release+0x8>)
 8009702:	f000 b8a7 	b.w	8009854 <__retarget_lock_release_recursive>
 8009706:	bf00      	nop
 8009708:	200009f3 	.word	0x200009f3

0800970c <__sinit>:
 800970c:	b510      	push	{r4, lr}
 800970e:	4604      	mov	r4, r0
 8009710:	f7ff fff0 	bl	80096f4 <__sinit_lock_acquire>
 8009714:	69a3      	ldr	r3, [r4, #24]
 8009716:	b11b      	cbz	r3, 8009720 <__sinit+0x14>
 8009718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800971c:	f7ff bff0 	b.w	8009700 <__sinit_lock_release>
 8009720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009724:	6523      	str	r3, [r4, #80]	; 0x50
 8009726:	4b13      	ldr	r3, [pc, #76]	; (8009774 <__sinit+0x68>)
 8009728:	4a13      	ldr	r2, [pc, #76]	; (8009778 <__sinit+0x6c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	62a2      	str	r2, [r4, #40]	; 0x28
 800972e:	42a3      	cmp	r3, r4
 8009730:	bf04      	itt	eq
 8009732:	2301      	moveq	r3, #1
 8009734:	61a3      	streq	r3, [r4, #24]
 8009736:	4620      	mov	r0, r4
 8009738:	f000 f820 	bl	800977c <__sfp>
 800973c:	6060      	str	r0, [r4, #4]
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f81c 	bl	800977c <__sfp>
 8009744:	60a0      	str	r0, [r4, #8]
 8009746:	4620      	mov	r0, r4
 8009748:	f000 f818 	bl	800977c <__sfp>
 800974c:	2200      	movs	r2, #0
 800974e:	60e0      	str	r0, [r4, #12]
 8009750:	2104      	movs	r1, #4
 8009752:	6860      	ldr	r0, [r4, #4]
 8009754:	f7ff ff82 	bl	800965c <std>
 8009758:	68a0      	ldr	r0, [r4, #8]
 800975a:	2201      	movs	r2, #1
 800975c:	2109      	movs	r1, #9
 800975e:	f7ff ff7d 	bl	800965c <std>
 8009762:	68e0      	ldr	r0, [r4, #12]
 8009764:	2202      	movs	r2, #2
 8009766:	2112      	movs	r1, #18
 8009768:	f7ff ff78 	bl	800965c <std>
 800976c:	2301      	movs	r3, #1
 800976e:	61a3      	str	r3, [r4, #24]
 8009770:	e7d2      	b.n	8009718 <__sinit+0xc>
 8009772:	bf00      	nop
 8009774:	0800d040 	.word	0x0800d040
 8009778:	080096a5 	.word	0x080096a5

0800977c <__sfp>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	4607      	mov	r7, r0
 8009780:	f7ff ffac 	bl	80096dc <__sfp_lock_acquire>
 8009784:	4b1e      	ldr	r3, [pc, #120]	; (8009800 <__sfp+0x84>)
 8009786:	681e      	ldr	r6, [r3, #0]
 8009788:	69b3      	ldr	r3, [r6, #24]
 800978a:	b913      	cbnz	r3, 8009792 <__sfp+0x16>
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff ffbd 	bl	800970c <__sinit>
 8009792:	3648      	adds	r6, #72	; 0x48
 8009794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009798:	3b01      	subs	r3, #1
 800979a:	d503      	bpl.n	80097a4 <__sfp+0x28>
 800979c:	6833      	ldr	r3, [r6, #0]
 800979e:	b30b      	cbz	r3, 80097e4 <__sfp+0x68>
 80097a0:	6836      	ldr	r6, [r6, #0]
 80097a2:	e7f7      	b.n	8009794 <__sfp+0x18>
 80097a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097a8:	b9d5      	cbnz	r5, 80097e0 <__sfp+0x64>
 80097aa:	4b16      	ldr	r3, [pc, #88]	; (8009804 <__sfp+0x88>)
 80097ac:	60e3      	str	r3, [r4, #12]
 80097ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097b2:	6665      	str	r5, [r4, #100]	; 0x64
 80097b4:	f000 f84c 	bl	8009850 <__retarget_lock_init_recursive>
 80097b8:	f7ff ff96 	bl	80096e8 <__sfp_lock_release>
 80097bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097c4:	6025      	str	r5, [r4, #0]
 80097c6:	61a5      	str	r5, [r4, #24]
 80097c8:	2208      	movs	r2, #8
 80097ca:	4629      	mov	r1, r5
 80097cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097d0:	f7fe fb88 	bl	8007ee4 <memset>
 80097d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097dc:	4620      	mov	r0, r4
 80097de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097e0:	3468      	adds	r4, #104	; 0x68
 80097e2:	e7d9      	b.n	8009798 <__sfp+0x1c>
 80097e4:	2104      	movs	r1, #4
 80097e6:	4638      	mov	r0, r7
 80097e8:	f7ff ff62 	bl	80096b0 <__sfmoreglue>
 80097ec:	4604      	mov	r4, r0
 80097ee:	6030      	str	r0, [r6, #0]
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1d5      	bne.n	80097a0 <__sfp+0x24>
 80097f4:	f7ff ff78 	bl	80096e8 <__sfp_lock_release>
 80097f8:	230c      	movs	r3, #12
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	e7ee      	b.n	80097dc <__sfp+0x60>
 80097fe:	bf00      	nop
 8009800:	0800d040 	.word	0x0800d040
 8009804:	ffff0001 	.word	0xffff0001

08009808 <_fwalk_reent>:
 8009808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800980c:	4606      	mov	r6, r0
 800980e:	4688      	mov	r8, r1
 8009810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009814:	2700      	movs	r7, #0
 8009816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800981a:	f1b9 0901 	subs.w	r9, r9, #1
 800981e:	d505      	bpl.n	800982c <_fwalk_reent+0x24>
 8009820:	6824      	ldr	r4, [r4, #0]
 8009822:	2c00      	cmp	r4, #0
 8009824:	d1f7      	bne.n	8009816 <_fwalk_reent+0xe>
 8009826:	4638      	mov	r0, r7
 8009828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982c:	89ab      	ldrh	r3, [r5, #12]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d907      	bls.n	8009842 <_fwalk_reent+0x3a>
 8009832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009836:	3301      	adds	r3, #1
 8009838:	d003      	beq.n	8009842 <_fwalk_reent+0x3a>
 800983a:	4629      	mov	r1, r5
 800983c:	4630      	mov	r0, r6
 800983e:	47c0      	blx	r8
 8009840:	4307      	orrs	r7, r0
 8009842:	3568      	adds	r5, #104	; 0x68
 8009844:	e7e9      	b.n	800981a <_fwalk_reent+0x12>
	...

08009848 <_localeconv_r>:
 8009848:	4800      	ldr	r0, [pc, #0]	; (800984c <_localeconv_r+0x4>)
 800984a:	4770      	bx	lr
 800984c:	200003a8 	.word	0x200003a8

08009850 <__retarget_lock_init_recursive>:
 8009850:	4770      	bx	lr

08009852 <__retarget_lock_acquire_recursive>:
 8009852:	4770      	bx	lr

08009854 <__retarget_lock_release_recursive>:
 8009854:	4770      	bx	lr

08009856 <__swhatbuf_r>:
 8009856:	b570      	push	{r4, r5, r6, lr}
 8009858:	460e      	mov	r6, r1
 800985a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985e:	2900      	cmp	r1, #0
 8009860:	b096      	sub	sp, #88	; 0x58
 8009862:	4614      	mov	r4, r2
 8009864:	461d      	mov	r5, r3
 8009866:	da07      	bge.n	8009878 <__swhatbuf_r+0x22>
 8009868:	2300      	movs	r3, #0
 800986a:	602b      	str	r3, [r5, #0]
 800986c:	89b3      	ldrh	r3, [r6, #12]
 800986e:	061a      	lsls	r2, r3, #24
 8009870:	d410      	bmi.n	8009894 <__swhatbuf_r+0x3e>
 8009872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009876:	e00e      	b.n	8009896 <__swhatbuf_r+0x40>
 8009878:	466a      	mov	r2, sp
 800987a:	f000 fd45 	bl	800a308 <_fstat_r>
 800987e:	2800      	cmp	r0, #0
 8009880:	dbf2      	blt.n	8009868 <__swhatbuf_r+0x12>
 8009882:	9a01      	ldr	r2, [sp, #4]
 8009884:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009888:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800988c:	425a      	negs	r2, r3
 800988e:	415a      	adcs	r2, r3
 8009890:	602a      	str	r2, [r5, #0]
 8009892:	e7ee      	b.n	8009872 <__swhatbuf_r+0x1c>
 8009894:	2340      	movs	r3, #64	; 0x40
 8009896:	2000      	movs	r0, #0
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	b016      	add	sp, #88	; 0x58
 800989c:	bd70      	pop	{r4, r5, r6, pc}
	...

080098a0 <__smakebuf_r>:
 80098a0:	898b      	ldrh	r3, [r1, #12]
 80098a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a4:	079d      	lsls	r5, r3, #30
 80098a6:	4606      	mov	r6, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	d507      	bpl.n	80098bc <__smakebuf_r+0x1c>
 80098ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	6123      	str	r3, [r4, #16]
 80098b4:	2301      	movs	r3, #1
 80098b6:	6163      	str	r3, [r4, #20]
 80098b8:	b002      	add	sp, #8
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	ab01      	add	r3, sp, #4
 80098be:	466a      	mov	r2, sp
 80098c0:	f7ff ffc9 	bl	8009856 <__swhatbuf_r>
 80098c4:	9900      	ldr	r1, [sp, #0]
 80098c6:	4605      	mov	r5, r0
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 fc1d 	bl	800a108 <_malloc_r>
 80098ce:	b948      	cbnz	r0, 80098e4 <__smakebuf_r+0x44>
 80098d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d4:	059a      	lsls	r2, r3, #22
 80098d6:	d4ef      	bmi.n	80098b8 <__smakebuf_r+0x18>
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	f043 0302 	orr.w	r3, r3, #2
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	e7e3      	b.n	80098ac <__smakebuf_r+0xc>
 80098e4:	4b0d      	ldr	r3, [pc, #52]	; (800991c <__smakebuf_r+0x7c>)
 80098e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	6020      	str	r0, [r4, #0]
 80098ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	6163      	str	r3, [r4, #20]
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	6120      	str	r0, [r4, #16]
 80098fa:	b15b      	cbz	r3, 8009914 <__smakebuf_r+0x74>
 80098fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009900:	4630      	mov	r0, r6
 8009902:	f000 fd13 	bl	800a32c <_isatty_r>
 8009906:	b128      	cbz	r0, 8009914 <__smakebuf_r+0x74>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	89a0      	ldrh	r0, [r4, #12]
 8009916:	4305      	orrs	r5, r0
 8009918:	81a5      	strh	r5, [r4, #12]
 800991a:	e7cd      	b.n	80098b8 <__smakebuf_r+0x18>
 800991c:	080096a5 	.word	0x080096a5

08009920 <malloc>:
 8009920:	4b02      	ldr	r3, [pc, #8]	; (800992c <malloc+0xc>)
 8009922:	4601      	mov	r1, r0
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	f000 bbef 	b.w	800a108 <_malloc_r>
 800992a:	bf00      	nop
 800992c:	20000254 	.word	0x20000254

08009930 <memcpy>:
 8009930:	440a      	add	r2, r1
 8009932:	4291      	cmp	r1, r2
 8009934:	f100 33ff 	add.w	r3, r0, #4294967295
 8009938:	d100      	bne.n	800993c <memcpy+0xc>
 800993a:	4770      	bx	lr
 800993c:	b510      	push	{r4, lr}
 800993e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009946:	4291      	cmp	r1, r2
 8009948:	d1f9      	bne.n	800993e <memcpy+0xe>
 800994a:	bd10      	pop	{r4, pc}

0800994c <_Balloc>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	b976      	cbnz	r6, 8009974 <_Balloc+0x28>
 8009956:	2010      	movs	r0, #16
 8009958:	f7ff ffe2 	bl	8009920 <malloc>
 800995c:	4602      	mov	r2, r0
 800995e:	6260      	str	r0, [r4, #36]	; 0x24
 8009960:	b920      	cbnz	r0, 800996c <_Balloc+0x20>
 8009962:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <_Balloc+0x78>)
 8009964:	4818      	ldr	r0, [pc, #96]	; (80099c8 <_Balloc+0x7c>)
 8009966:	2166      	movs	r1, #102	; 0x66
 8009968:	f000 fc8e 	bl	800a288 <__assert_func>
 800996c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009970:	6006      	str	r6, [r0, #0]
 8009972:	60c6      	str	r6, [r0, #12]
 8009974:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009976:	68f3      	ldr	r3, [r6, #12]
 8009978:	b183      	cbz	r3, 800999c <_Balloc+0x50>
 800997a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009982:	b9b8      	cbnz	r0, 80099b4 <_Balloc+0x68>
 8009984:	2101      	movs	r1, #1
 8009986:	fa01 f605 	lsl.w	r6, r1, r5
 800998a:	1d72      	adds	r2, r6, #5
 800998c:	0092      	lsls	r2, r2, #2
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fb5a 	bl	800a048 <_calloc_r>
 8009994:	b160      	cbz	r0, 80099b0 <_Balloc+0x64>
 8009996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800999a:	e00e      	b.n	80099ba <_Balloc+0x6e>
 800999c:	2221      	movs	r2, #33	; 0x21
 800999e:	2104      	movs	r1, #4
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 fb51 	bl	800a048 <_calloc_r>
 80099a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a8:	60f0      	str	r0, [r6, #12]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e4      	bne.n	800997a <_Balloc+0x2e>
 80099b0:	2000      	movs	r0, #0
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	6802      	ldr	r2, [r0, #0]
 80099b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099ba:	2300      	movs	r3, #0
 80099bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099c0:	e7f7      	b.n	80099b2 <_Balloc+0x66>
 80099c2:	bf00      	nop
 80099c4:	0800d186 	.word	0x0800d186
 80099c8:	0800d270 	.word	0x0800d270

080099cc <_Bfree>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099d0:	4605      	mov	r5, r0
 80099d2:	460c      	mov	r4, r1
 80099d4:	b976      	cbnz	r6, 80099f4 <_Bfree+0x28>
 80099d6:	2010      	movs	r0, #16
 80099d8:	f7ff ffa2 	bl	8009920 <malloc>
 80099dc:	4602      	mov	r2, r0
 80099de:	6268      	str	r0, [r5, #36]	; 0x24
 80099e0:	b920      	cbnz	r0, 80099ec <_Bfree+0x20>
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <_Bfree+0x3c>)
 80099e4:	4809      	ldr	r0, [pc, #36]	; (8009a0c <_Bfree+0x40>)
 80099e6:	218a      	movs	r1, #138	; 0x8a
 80099e8:	f000 fc4e 	bl	800a288 <__assert_func>
 80099ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f0:	6006      	str	r6, [r0, #0]
 80099f2:	60c6      	str	r6, [r0, #12]
 80099f4:	b13c      	cbz	r4, 8009a06 <_Bfree+0x3a>
 80099f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099f8:	6862      	ldr	r2, [r4, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a00:	6021      	str	r1, [r4, #0]
 8009a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	0800d186 	.word	0x0800d186
 8009a0c:	0800d270 	.word	0x0800d270

08009a10 <__multadd>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	690e      	ldr	r6, [r1, #16]
 8009a16:	4607      	mov	r7, r0
 8009a18:	4698      	mov	r8, r3
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	f101 0014 	add.w	r0, r1, #20
 8009a20:	2300      	movs	r3, #0
 8009a22:	6805      	ldr	r5, [r0, #0]
 8009a24:	b2a9      	uxth	r1, r5
 8009a26:	fb02 8101 	mla	r1, r2, r1, r8
 8009a2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009a2e:	0c2d      	lsrs	r5, r5, #16
 8009a30:	fb02 c505 	mla	r5, r2, r5, ip
 8009a34:	b289      	uxth	r1, r1
 8009a36:	3301      	adds	r3, #1
 8009a38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009a3c:	429e      	cmp	r6, r3
 8009a3e:	f840 1b04 	str.w	r1, [r0], #4
 8009a42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009a46:	dcec      	bgt.n	8009a22 <__multadd+0x12>
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	d022      	beq.n	8009a94 <__multadd+0x84>
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	42b3      	cmp	r3, r6
 8009a52:	dc19      	bgt.n	8009a88 <__multadd+0x78>
 8009a54:	6861      	ldr	r1, [r4, #4]
 8009a56:	4638      	mov	r0, r7
 8009a58:	3101      	adds	r1, #1
 8009a5a:	f7ff ff77 	bl	800994c <_Balloc>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b928      	cbnz	r0, 8009a6e <__multadd+0x5e>
 8009a62:	4602      	mov	r2, r0
 8009a64:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <__multadd+0x8c>)
 8009a66:	480e      	ldr	r0, [pc, #56]	; (8009aa0 <__multadd+0x90>)
 8009a68:	21b5      	movs	r1, #181	; 0xb5
 8009a6a:	f000 fc0d 	bl	800a288 <__assert_func>
 8009a6e:	6922      	ldr	r2, [r4, #16]
 8009a70:	3202      	adds	r2, #2
 8009a72:	f104 010c 	add.w	r1, r4, #12
 8009a76:	0092      	lsls	r2, r2, #2
 8009a78:	300c      	adds	r0, #12
 8009a7a:	f7ff ff59 	bl	8009930 <memcpy>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff ffa3 	bl	80099cc <_Bfree>
 8009a86:	462c      	mov	r4, r5
 8009a88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009a8c:	3601      	adds	r6, #1
 8009a8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009a92:	6126      	str	r6, [r4, #16]
 8009a94:	4620      	mov	r0, r4
 8009a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800d1fc 	.word	0x0800d1fc
 8009aa0:	0800d270 	.word	0x0800d270

08009aa4 <__hi0bits>:
 8009aa4:	0c03      	lsrs	r3, r0, #16
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	b9d3      	cbnz	r3, 8009ae0 <__hi0bits+0x3c>
 8009aaa:	0400      	lsls	r0, r0, #16
 8009aac:	2310      	movs	r3, #16
 8009aae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ab2:	bf04      	itt	eq
 8009ab4:	0200      	lsleq	r0, r0, #8
 8009ab6:	3308      	addeq	r3, #8
 8009ab8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009abc:	bf04      	itt	eq
 8009abe:	0100      	lsleq	r0, r0, #4
 8009ac0:	3304      	addeq	r3, #4
 8009ac2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ac6:	bf04      	itt	eq
 8009ac8:	0080      	lsleq	r0, r0, #2
 8009aca:	3302      	addeq	r3, #2
 8009acc:	2800      	cmp	r0, #0
 8009ace:	db05      	blt.n	8009adc <__hi0bits+0x38>
 8009ad0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ad4:	f103 0301 	add.w	r3, r3, #1
 8009ad8:	bf08      	it	eq
 8009ada:	2320      	moveq	r3, #32
 8009adc:	4618      	mov	r0, r3
 8009ade:	4770      	bx	lr
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e7e4      	b.n	8009aae <__hi0bits+0xa>

08009ae4 <__lo0bits>:
 8009ae4:	6803      	ldr	r3, [r0, #0]
 8009ae6:	f013 0207 	ands.w	r2, r3, #7
 8009aea:	4601      	mov	r1, r0
 8009aec:	d00b      	beq.n	8009b06 <__lo0bits+0x22>
 8009aee:	07da      	lsls	r2, r3, #31
 8009af0:	d424      	bmi.n	8009b3c <__lo0bits+0x58>
 8009af2:	0798      	lsls	r0, r3, #30
 8009af4:	bf49      	itett	mi
 8009af6:	085b      	lsrmi	r3, r3, #1
 8009af8:	089b      	lsrpl	r3, r3, #2
 8009afa:	2001      	movmi	r0, #1
 8009afc:	600b      	strmi	r3, [r1, #0]
 8009afe:	bf5c      	itt	pl
 8009b00:	600b      	strpl	r3, [r1, #0]
 8009b02:	2002      	movpl	r0, #2
 8009b04:	4770      	bx	lr
 8009b06:	b298      	uxth	r0, r3
 8009b08:	b9b0      	cbnz	r0, 8009b38 <__lo0bits+0x54>
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	2010      	movs	r0, #16
 8009b0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b12:	bf04      	itt	eq
 8009b14:	0a1b      	lsreq	r3, r3, #8
 8009b16:	3008      	addeq	r0, #8
 8009b18:	071a      	lsls	r2, r3, #28
 8009b1a:	bf04      	itt	eq
 8009b1c:	091b      	lsreq	r3, r3, #4
 8009b1e:	3004      	addeq	r0, #4
 8009b20:	079a      	lsls	r2, r3, #30
 8009b22:	bf04      	itt	eq
 8009b24:	089b      	lsreq	r3, r3, #2
 8009b26:	3002      	addeq	r0, #2
 8009b28:	07da      	lsls	r2, r3, #31
 8009b2a:	d403      	bmi.n	8009b34 <__lo0bits+0x50>
 8009b2c:	085b      	lsrs	r3, r3, #1
 8009b2e:	f100 0001 	add.w	r0, r0, #1
 8009b32:	d005      	beq.n	8009b40 <__lo0bits+0x5c>
 8009b34:	600b      	str	r3, [r1, #0]
 8009b36:	4770      	bx	lr
 8009b38:	4610      	mov	r0, r2
 8009b3a:	e7e8      	b.n	8009b0e <__lo0bits+0x2a>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	4770      	bx	lr
 8009b40:	2020      	movs	r0, #32
 8009b42:	4770      	bx	lr

08009b44 <__i2b>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	460c      	mov	r4, r1
 8009b48:	2101      	movs	r1, #1
 8009b4a:	f7ff feff 	bl	800994c <_Balloc>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	b928      	cbnz	r0, 8009b5e <__i2b+0x1a>
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <__i2b+0x24>)
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <__i2b+0x28>)
 8009b56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b5a:	f000 fb95 	bl	800a288 <__assert_func>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	6144      	str	r4, [r0, #20]
 8009b62:	6103      	str	r3, [r0, #16]
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	bf00      	nop
 8009b68:	0800d1fc 	.word	0x0800d1fc
 8009b6c:	0800d270 	.word	0x0800d270

08009b70 <__multiply>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	4614      	mov	r4, r2
 8009b76:	690a      	ldr	r2, [r1, #16]
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	bfb8      	it	lt
 8009b7e:	460b      	movlt	r3, r1
 8009b80:	460d      	mov	r5, r1
 8009b82:	bfbc      	itt	lt
 8009b84:	4625      	movlt	r5, r4
 8009b86:	461c      	movlt	r4, r3
 8009b88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b90:	68ab      	ldr	r3, [r5, #8]
 8009b92:	6869      	ldr	r1, [r5, #4]
 8009b94:	eb0a 0709 	add.w	r7, sl, r9
 8009b98:	42bb      	cmp	r3, r7
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	bfb8      	it	lt
 8009b9e:	3101      	addlt	r1, #1
 8009ba0:	f7ff fed4 	bl	800994c <_Balloc>
 8009ba4:	b930      	cbnz	r0, 8009bb4 <__multiply+0x44>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	4b42      	ldr	r3, [pc, #264]	; (8009cb4 <__multiply+0x144>)
 8009baa:	4843      	ldr	r0, [pc, #268]	; (8009cb8 <__multiply+0x148>)
 8009bac:	f240 115d 	movw	r1, #349	; 0x15d
 8009bb0:	f000 fb6a 	bl	800a288 <__assert_func>
 8009bb4:	f100 0614 	add.w	r6, r0, #20
 8009bb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009bbc:	4633      	mov	r3, r6
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4543      	cmp	r3, r8
 8009bc2:	d31e      	bcc.n	8009c02 <__multiply+0x92>
 8009bc4:	f105 0c14 	add.w	ip, r5, #20
 8009bc8:	f104 0314 	add.w	r3, r4, #20
 8009bcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009bd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009bd4:	9202      	str	r2, [sp, #8]
 8009bd6:	ebac 0205 	sub.w	r2, ip, r5
 8009bda:	3a15      	subs	r2, #21
 8009bdc:	f022 0203 	bic.w	r2, r2, #3
 8009be0:	3204      	adds	r2, #4
 8009be2:	f105 0115 	add.w	r1, r5, #21
 8009be6:	458c      	cmp	ip, r1
 8009be8:	bf38      	it	cc
 8009bea:	2204      	movcc	r2, #4
 8009bec:	9201      	str	r2, [sp, #4]
 8009bee:	9a02      	ldr	r2, [sp, #8]
 8009bf0:	9303      	str	r3, [sp, #12]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d808      	bhi.n	8009c08 <__multiply+0x98>
 8009bf6:	2f00      	cmp	r7, #0
 8009bf8:	dc55      	bgt.n	8009ca6 <__multiply+0x136>
 8009bfa:	6107      	str	r7, [r0, #16]
 8009bfc:	b005      	add	sp, #20
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	f843 2b04 	str.w	r2, [r3], #4
 8009c06:	e7db      	b.n	8009bc0 <__multiply+0x50>
 8009c08:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c0c:	f1ba 0f00 	cmp.w	sl, #0
 8009c10:	d020      	beq.n	8009c54 <__multiply+0xe4>
 8009c12:	f105 0e14 	add.w	lr, r5, #20
 8009c16:	46b1      	mov	r9, r6
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009c1e:	f8d9 b000 	ldr.w	fp, [r9]
 8009c22:	b2a1      	uxth	r1, r4
 8009c24:	fa1f fb8b 	uxth.w	fp, fp
 8009c28:	fb0a b101 	mla	r1, sl, r1, fp
 8009c2c:	4411      	add	r1, r2
 8009c2e:	f8d9 2000 	ldr.w	r2, [r9]
 8009c32:	0c24      	lsrs	r4, r4, #16
 8009c34:	0c12      	lsrs	r2, r2, #16
 8009c36:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c3a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c3e:	b289      	uxth	r1, r1
 8009c40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c44:	45f4      	cmp	ip, lr
 8009c46:	f849 1b04 	str.w	r1, [r9], #4
 8009c4a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c4e:	d8e4      	bhi.n	8009c1a <__multiply+0xaa>
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	5072      	str	r2, [r6, r1]
 8009c54:	9a03      	ldr	r2, [sp, #12]
 8009c56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	f1b9 0f00 	cmp.w	r9, #0
 8009c60:	d01f      	beq.n	8009ca2 <__multiply+0x132>
 8009c62:	6834      	ldr	r4, [r6, #0]
 8009c64:	f105 0114 	add.w	r1, r5, #20
 8009c68:	46b6      	mov	lr, r6
 8009c6a:	f04f 0a00 	mov.w	sl, #0
 8009c6e:	880a      	ldrh	r2, [r1, #0]
 8009c70:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c74:	fb09 b202 	mla	r2, r9, r2, fp
 8009c78:	4492      	add	sl, r2
 8009c7a:	b2a4      	uxth	r4, r4
 8009c7c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009c80:	f84e 4b04 	str.w	r4, [lr], #4
 8009c84:	f851 4b04 	ldr.w	r4, [r1], #4
 8009c88:	f8be 2000 	ldrh.w	r2, [lr]
 8009c8c:	0c24      	lsrs	r4, r4, #16
 8009c8e:	fb09 2404 	mla	r4, r9, r4, r2
 8009c92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009c96:	458c      	cmp	ip, r1
 8009c98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c9c:	d8e7      	bhi.n	8009c6e <__multiply+0xfe>
 8009c9e:	9a01      	ldr	r2, [sp, #4]
 8009ca0:	50b4      	str	r4, [r6, r2]
 8009ca2:	3604      	adds	r6, #4
 8009ca4:	e7a3      	b.n	8009bee <__multiply+0x7e>
 8009ca6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1a5      	bne.n	8009bfa <__multiply+0x8a>
 8009cae:	3f01      	subs	r7, #1
 8009cb0:	e7a1      	b.n	8009bf6 <__multiply+0x86>
 8009cb2:	bf00      	nop
 8009cb4:	0800d1fc 	.word	0x0800d1fc
 8009cb8:	0800d270 	.word	0x0800d270

08009cbc <__pow5mult>:
 8009cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	f012 0203 	ands.w	r2, r2, #3
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	d007      	beq.n	8009cdc <__pow5mult+0x20>
 8009ccc:	4c25      	ldr	r4, [pc, #148]	; (8009d64 <__pow5mult+0xa8>)
 8009cce:	3a01      	subs	r2, #1
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cd6:	f7ff fe9b 	bl	8009a10 <__multadd>
 8009cda:	4607      	mov	r7, r0
 8009cdc:	10ad      	asrs	r5, r5, #2
 8009cde:	d03d      	beq.n	8009d5c <__pow5mult+0xa0>
 8009ce0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ce2:	b97c      	cbnz	r4, 8009d04 <__pow5mult+0x48>
 8009ce4:	2010      	movs	r0, #16
 8009ce6:	f7ff fe1b 	bl	8009920 <malloc>
 8009cea:	4602      	mov	r2, r0
 8009cec:	6270      	str	r0, [r6, #36]	; 0x24
 8009cee:	b928      	cbnz	r0, 8009cfc <__pow5mult+0x40>
 8009cf0:	4b1d      	ldr	r3, [pc, #116]	; (8009d68 <__pow5mult+0xac>)
 8009cf2:	481e      	ldr	r0, [pc, #120]	; (8009d6c <__pow5mult+0xb0>)
 8009cf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009cf8:	f000 fac6 	bl	800a288 <__assert_func>
 8009cfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d00:	6004      	str	r4, [r0, #0]
 8009d02:	60c4      	str	r4, [r0, #12]
 8009d04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d0c:	b94c      	cbnz	r4, 8009d22 <__pow5mult+0x66>
 8009d0e:	f240 2171 	movw	r1, #625	; 0x271
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ff16 	bl	8009b44 <__i2b>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d1e:	4604      	mov	r4, r0
 8009d20:	6003      	str	r3, [r0, #0]
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	07eb      	lsls	r3, r5, #31
 8009d28:	d50a      	bpl.n	8009d40 <__pow5mult+0x84>
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7ff ff1e 	bl	8009b70 <__multiply>
 8009d34:	4639      	mov	r1, r7
 8009d36:	4680      	mov	r8, r0
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff fe47 	bl	80099cc <_Bfree>
 8009d3e:	4647      	mov	r7, r8
 8009d40:	106d      	asrs	r5, r5, #1
 8009d42:	d00b      	beq.n	8009d5c <__pow5mult+0xa0>
 8009d44:	6820      	ldr	r0, [r4, #0]
 8009d46:	b938      	cbnz	r0, 8009d58 <__pow5mult+0x9c>
 8009d48:	4622      	mov	r2, r4
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff ff0f 	bl	8009b70 <__multiply>
 8009d52:	6020      	str	r0, [r4, #0]
 8009d54:	f8c0 9000 	str.w	r9, [r0]
 8009d58:	4604      	mov	r4, r0
 8009d5a:	e7e4      	b.n	8009d26 <__pow5mult+0x6a>
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d62:	bf00      	nop
 8009d64:	0800d3c0 	.word	0x0800d3c0
 8009d68:	0800d186 	.word	0x0800d186
 8009d6c:	0800d270 	.word	0x0800d270

08009d70 <__lshift>:
 8009d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	6849      	ldr	r1, [r1, #4]
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	4607      	mov	r7, r0
 8009d82:	4691      	mov	r9, r2
 8009d84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d88:	f108 0601 	add.w	r6, r8, #1
 8009d8c:	42b3      	cmp	r3, r6
 8009d8e:	db0b      	blt.n	8009da8 <__lshift+0x38>
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff fddb 	bl	800994c <_Balloc>
 8009d96:	4605      	mov	r5, r0
 8009d98:	b948      	cbnz	r0, 8009dae <__lshift+0x3e>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4b28      	ldr	r3, [pc, #160]	; (8009e40 <__lshift+0xd0>)
 8009d9e:	4829      	ldr	r0, [pc, #164]	; (8009e44 <__lshift+0xd4>)
 8009da0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009da4:	f000 fa70 	bl	800a288 <__assert_func>
 8009da8:	3101      	adds	r1, #1
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	e7ee      	b.n	8009d8c <__lshift+0x1c>
 8009dae:	2300      	movs	r3, #0
 8009db0:	f100 0114 	add.w	r1, r0, #20
 8009db4:	f100 0210 	add.w	r2, r0, #16
 8009db8:	4618      	mov	r0, r3
 8009dba:	4553      	cmp	r3, sl
 8009dbc:	db33      	blt.n	8009e26 <__lshift+0xb6>
 8009dbe:	6920      	ldr	r0, [r4, #16]
 8009dc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dc4:	f104 0314 	add.w	r3, r4, #20
 8009dc8:	f019 091f 	ands.w	r9, r9, #31
 8009dcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dd4:	d02b      	beq.n	8009e2e <__lshift+0xbe>
 8009dd6:	f1c9 0e20 	rsb	lr, r9, #32
 8009dda:	468a      	mov	sl, r1
 8009ddc:	2200      	movs	r2, #0
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	fa00 f009 	lsl.w	r0, r0, r9
 8009de4:	4302      	orrs	r2, r0
 8009de6:	f84a 2b04 	str.w	r2, [sl], #4
 8009dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dee:	459c      	cmp	ip, r3
 8009df0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009df4:	d8f3      	bhi.n	8009dde <__lshift+0x6e>
 8009df6:	ebac 0304 	sub.w	r3, ip, r4
 8009dfa:	3b15      	subs	r3, #21
 8009dfc:	f023 0303 	bic.w	r3, r3, #3
 8009e00:	3304      	adds	r3, #4
 8009e02:	f104 0015 	add.w	r0, r4, #21
 8009e06:	4584      	cmp	ip, r0
 8009e08:	bf38      	it	cc
 8009e0a:	2304      	movcc	r3, #4
 8009e0c:	50ca      	str	r2, [r1, r3]
 8009e0e:	b10a      	cbz	r2, 8009e14 <__lshift+0xa4>
 8009e10:	f108 0602 	add.w	r6, r8, #2
 8009e14:	3e01      	subs	r6, #1
 8009e16:	4638      	mov	r0, r7
 8009e18:	612e      	str	r6, [r5, #16]
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	f7ff fdd6 	bl	80099cc <_Bfree>
 8009e20:	4628      	mov	r0, r5
 8009e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e26:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	e7c5      	b.n	8009dba <__lshift+0x4a>
 8009e2e:	3904      	subs	r1, #4
 8009e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e34:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e38:	459c      	cmp	ip, r3
 8009e3a:	d8f9      	bhi.n	8009e30 <__lshift+0xc0>
 8009e3c:	e7ea      	b.n	8009e14 <__lshift+0xa4>
 8009e3e:	bf00      	nop
 8009e40:	0800d1fc 	.word	0x0800d1fc
 8009e44:	0800d270 	.word	0x0800d270

08009e48 <__mcmp>:
 8009e48:	b530      	push	{r4, r5, lr}
 8009e4a:	6902      	ldr	r2, [r0, #16]
 8009e4c:	690c      	ldr	r4, [r1, #16]
 8009e4e:	1b12      	subs	r2, r2, r4
 8009e50:	d10e      	bne.n	8009e70 <__mcmp+0x28>
 8009e52:	f100 0314 	add.w	r3, r0, #20
 8009e56:	3114      	adds	r1, #20
 8009e58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e68:	42a5      	cmp	r5, r4
 8009e6a:	d003      	beq.n	8009e74 <__mcmp+0x2c>
 8009e6c:	d305      	bcc.n	8009e7a <__mcmp+0x32>
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4610      	mov	r0, r2
 8009e72:	bd30      	pop	{r4, r5, pc}
 8009e74:	4283      	cmp	r3, r0
 8009e76:	d3f3      	bcc.n	8009e60 <__mcmp+0x18>
 8009e78:	e7fa      	b.n	8009e70 <__mcmp+0x28>
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	e7f7      	b.n	8009e70 <__mcmp+0x28>

08009e80 <__mdiff>:
 8009e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	460c      	mov	r4, r1
 8009e86:	4606      	mov	r6, r0
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4617      	mov	r7, r2
 8009e8e:	f7ff ffdb 	bl	8009e48 <__mcmp>
 8009e92:	1e05      	subs	r5, r0, #0
 8009e94:	d110      	bne.n	8009eb8 <__mdiff+0x38>
 8009e96:	4629      	mov	r1, r5
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff fd57 	bl	800994c <_Balloc>
 8009e9e:	b930      	cbnz	r0, 8009eae <__mdiff+0x2e>
 8009ea0:	4b39      	ldr	r3, [pc, #228]	; (8009f88 <__mdiff+0x108>)
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	f240 2132 	movw	r1, #562	; 0x232
 8009ea8:	4838      	ldr	r0, [pc, #224]	; (8009f8c <__mdiff+0x10c>)
 8009eaa:	f000 f9ed 	bl	800a288 <__assert_func>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb8:	bfa4      	itt	ge
 8009eba:	463b      	movge	r3, r7
 8009ebc:	4627      	movge	r7, r4
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	bfa6      	itte	ge
 8009ec4:	461c      	movge	r4, r3
 8009ec6:	2500      	movge	r5, #0
 8009ec8:	2501      	movlt	r5, #1
 8009eca:	f7ff fd3f 	bl	800994c <_Balloc>
 8009ece:	b920      	cbnz	r0, 8009eda <__mdiff+0x5a>
 8009ed0:	4b2d      	ldr	r3, [pc, #180]	; (8009f88 <__mdiff+0x108>)
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ed8:	e7e6      	b.n	8009ea8 <__mdiff+0x28>
 8009eda:	693e      	ldr	r6, [r7, #16]
 8009edc:	60c5      	str	r5, [r0, #12]
 8009ede:	6925      	ldr	r5, [r4, #16]
 8009ee0:	f107 0114 	add.w	r1, r7, #20
 8009ee4:	f104 0914 	add.w	r9, r4, #20
 8009ee8:	f100 0e14 	add.w	lr, r0, #20
 8009eec:	f107 0210 	add.w	r2, r7, #16
 8009ef0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009ef4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ef8:	46f2      	mov	sl, lr
 8009efa:	2700      	movs	r7, #0
 8009efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f04:	fa1f f883 	uxth.w	r8, r3
 8009f08:	fa17 f78b 	uxtah	r7, r7, fp
 8009f0c:	0c1b      	lsrs	r3, r3, #16
 8009f0e:	eba7 0808 	sub.w	r8, r7, r8
 8009f12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f1a:	fa1f f888 	uxth.w	r8, r8
 8009f1e:	141f      	asrs	r7, r3, #16
 8009f20:	454d      	cmp	r5, r9
 8009f22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f26:	f84a 3b04 	str.w	r3, [sl], #4
 8009f2a:	d8e7      	bhi.n	8009efc <__mdiff+0x7c>
 8009f2c:	1b2b      	subs	r3, r5, r4
 8009f2e:	3b15      	subs	r3, #21
 8009f30:	f023 0303 	bic.w	r3, r3, #3
 8009f34:	3304      	adds	r3, #4
 8009f36:	3415      	adds	r4, #21
 8009f38:	42a5      	cmp	r5, r4
 8009f3a:	bf38      	it	cc
 8009f3c:	2304      	movcc	r3, #4
 8009f3e:	4419      	add	r1, r3
 8009f40:	4473      	add	r3, lr
 8009f42:	469e      	mov	lr, r3
 8009f44:	460d      	mov	r5, r1
 8009f46:	4565      	cmp	r5, ip
 8009f48:	d30e      	bcc.n	8009f68 <__mdiff+0xe8>
 8009f4a:	f10c 0203 	add.w	r2, ip, #3
 8009f4e:	1a52      	subs	r2, r2, r1
 8009f50:	f022 0203 	bic.w	r2, r2, #3
 8009f54:	3903      	subs	r1, #3
 8009f56:	458c      	cmp	ip, r1
 8009f58:	bf38      	it	cc
 8009f5a:	2200      	movcc	r2, #0
 8009f5c:	441a      	add	r2, r3
 8009f5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f62:	b17b      	cbz	r3, 8009f84 <__mdiff+0x104>
 8009f64:	6106      	str	r6, [r0, #16]
 8009f66:	e7a5      	b.n	8009eb4 <__mdiff+0x34>
 8009f68:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f6c:	fa17 f488 	uxtah	r4, r7, r8
 8009f70:	1422      	asrs	r2, r4, #16
 8009f72:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009f76:	b2a4      	uxth	r4, r4
 8009f78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009f7c:	f84e 4b04 	str.w	r4, [lr], #4
 8009f80:	1417      	asrs	r7, r2, #16
 8009f82:	e7e0      	b.n	8009f46 <__mdiff+0xc6>
 8009f84:	3e01      	subs	r6, #1
 8009f86:	e7ea      	b.n	8009f5e <__mdiff+0xde>
 8009f88:	0800d1fc 	.word	0x0800d1fc
 8009f8c:	0800d270 	.word	0x0800d270

08009f90 <__d2b>:
 8009f90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f94:	4689      	mov	r9, r1
 8009f96:	2101      	movs	r1, #1
 8009f98:	ec57 6b10 	vmov	r6, r7, d0
 8009f9c:	4690      	mov	r8, r2
 8009f9e:	f7ff fcd5 	bl	800994c <_Balloc>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	b930      	cbnz	r0, 8009fb4 <__d2b+0x24>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	4b25      	ldr	r3, [pc, #148]	; (800a040 <__d2b+0xb0>)
 8009faa:	4826      	ldr	r0, [pc, #152]	; (800a044 <__d2b+0xb4>)
 8009fac:	f240 310a 	movw	r1, #778	; 0x30a
 8009fb0:	f000 f96a 	bl	800a288 <__assert_func>
 8009fb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009fbc:	bb35      	cbnz	r5, 800a00c <__d2b+0x7c>
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	d028      	beq.n	800a016 <__d2b+0x86>
 8009fc4:	4668      	mov	r0, sp
 8009fc6:	9600      	str	r6, [sp, #0]
 8009fc8:	f7ff fd8c 	bl	8009ae4 <__lo0bits>
 8009fcc:	9900      	ldr	r1, [sp, #0]
 8009fce:	b300      	cbz	r0, 800a012 <__d2b+0x82>
 8009fd0:	9a01      	ldr	r2, [sp, #4]
 8009fd2:	f1c0 0320 	rsb	r3, r0, #32
 8009fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	40c2      	lsrs	r2, r0
 8009fde:	6163      	str	r3, [r4, #20]
 8009fe0:	9201      	str	r2, [sp, #4]
 8009fe2:	9b01      	ldr	r3, [sp, #4]
 8009fe4:	61a3      	str	r3, [r4, #24]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	bf14      	ite	ne
 8009fea:	2202      	movne	r2, #2
 8009fec:	2201      	moveq	r2, #1
 8009fee:	6122      	str	r2, [r4, #16]
 8009ff0:	b1d5      	cbz	r5, 800a028 <__d2b+0x98>
 8009ff2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ff6:	4405      	add	r5, r0
 8009ff8:	f8c9 5000 	str.w	r5, [r9]
 8009ffc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a000:	f8c8 0000 	str.w	r0, [r8]
 800a004:	4620      	mov	r0, r4
 800a006:	b003      	add	sp, #12
 800a008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a00c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a010:	e7d5      	b.n	8009fbe <__d2b+0x2e>
 800a012:	6161      	str	r1, [r4, #20]
 800a014:	e7e5      	b.n	8009fe2 <__d2b+0x52>
 800a016:	a801      	add	r0, sp, #4
 800a018:	f7ff fd64 	bl	8009ae4 <__lo0bits>
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	6163      	str	r3, [r4, #20]
 800a020:	2201      	movs	r2, #1
 800a022:	6122      	str	r2, [r4, #16]
 800a024:	3020      	adds	r0, #32
 800a026:	e7e3      	b.n	8009ff0 <__d2b+0x60>
 800a028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a02c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a030:	f8c9 0000 	str.w	r0, [r9]
 800a034:	6918      	ldr	r0, [r3, #16]
 800a036:	f7ff fd35 	bl	8009aa4 <__hi0bits>
 800a03a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a03e:	e7df      	b.n	800a000 <__d2b+0x70>
 800a040:	0800d1fc 	.word	0x0800d1fc
 800a044:	0800d270 	.word	0x0800d270

0800a048 <_calloc_r>:
 800a048:	b513      	push	{r0, r1, r4, lr}
 800a04a:	434a      	muls	r2, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	9201      	str	r2, [sp, #4]
 800a050:	f000 f85a 	bl	800a108 <_malloc_r>
 800a054:	4604      	mov	r4, r0
 800a056:	b118      	cbz	r0, 800a060 <_calloc_r+0x18>
 800a058:	9a01      	ldr	r2, [sp, #4]
 800a05a:	2100      	movs	r1, #0
 800a05c:	f7fd ff42 	bl	8007ee4 <memset>
 800a060:	4620      	mov	r0, r4
 800a062:	b002      	add	sp, #8
 800a064:	bd10      	pop	{r4, pc}
	...

0800a068 <_free_r>:
 800a068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06a:	2900      	cmp	r1, #0
 800a06c:	d048      	beq.n	800a100 <_free_r+0x98>
 800a06e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a072:	9001      	str	r0, [sp, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f1a1 0404 	sub.w	r4, r1, #4
 800a07a:	bfb8      	it	lt
 800a07c:	18e4      	addlt	r4, r4, r3
 800a07e:	f000 f989 	bl	800a394 <__malloc_lock>
 800a082:	4a20      	ldr	r2, [pc, #128]	; (800a104 <_free_r+0x9c>)
 800a084:	9801      	ldr	r0, [sp, #4]
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	4615      	mov	r5, r2
 800a08a:	b933      	cbnz	r3, 800a09a <_free_r+0x32>
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	6014      	str	r4, [r2, #0]
 800a090:	b003      	add	sp, #12
 800a092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a096:	f000 b983 	b.w	800a3a0 <__malloc_unlock>
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	d90b      	bls.n	800a0b6 <_free_r+0x4e>
 800a09e:	6821      	ldr	r1, [r4, #0]
 800a0a0:	1862      	adds	r2, r4, r1
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	bf04      	itt	eq
 800a0a6:	681a      	ldreq	r2, [r3, #0]
 800a0a8:	685b      	ldreq	r3, [r3, #4]
 800a0aa:	6063      	str	r3, [r4, #4]
 800a0ac:	bf04      	itt	eq
 800a0ae:	1852      	addeq	r2, r2, r1
 800a0b0:	6022      	streq	r2, [r4, #0]
 800a0b2:	602c      	str	r4, [r5, #0]
 800a0b4:	e7ec      	b.n	800a090 <_free_r+0x28>
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b10b      	cbz	r3, 800a0c0 <_free_r+0x58>
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d9fa      	bls.n	800a0b6 <_free_r+0x4e>
 800a0c0:	6811      	ldr	r1, [r2, #0]
 800a0c2:	1855      	adds	r5, r2, r1
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d10b      	bne.n	800a0e0 <_free_r+0x78>
 800a0c8:	6824      	ldr	r4, [r4, #0]
 800a0ca:	4421      	add	r1, r4
 800a0cc:	1854      	adds	r4, r2, r1
 800a0ce:	42a3      	cmp	r3, r4
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	d1dd      	bne.n	800a090 <_free_r+0x28>
 800a0d4:	681c      	ldr	r4, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	6053      	str	r3, [r2, #4]
 800a0da:	4421      	add	r1, r4
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	e7d7      	b.n	800a090 <_free_r+0x28>
 800a0e0:	d902      	bls.n	800a0e8 <_free_r+0x80>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	e7d3      	b.n	800a090 <_free_r+0x28>
 800a0e8:	6825      	ldr	r5, [r4, #0]
 800a0ea:	1961      	adds	r1, r4, r5
 800a0ec:	428b      	cmp	r3, r1
 800a0ee:	bf04      	itt	eq
 800a0f0:	6819      	ldreq	r1, [r3, #0]
 800a0f2:	685b      	ldreq	r3, [r3, #4]
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	bf04      	itt	eq
 800a0f8:	1949      	addeq	r1, r1, r5
 800a0fa:	6021      	streq	r1, [r4, #0]
 800a0fc:	6054      	str	r4, [r2, #4]
 800a0fe:	e7c7      	b.n	800a090 <_free_r+0x28>
 800a100:	b003      	add	sp, #12
 800a102:	bd30      	pop	{r4, r5, pc}
 800a104:	20000460 	.word	0x20000460

0800a108 <_malloc_r>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	1ccd      	adds	r5, r1, #3
 800a10c:	f025 0503 	bic.w	r5, r5, #3
 800a110:	3508      	adds	r5, #8
 800a112:	2d0c      	cmp	r5, #12
 800a114:	bf38      	it	cc
 800a116:	250c      	movcc	r5, #12
 800a118:	2d00      	cmp	r5, #0
 800a11a:	4606      	mov	r6, r0
 800a11c:	db01      	blt.n	800a122 <_malloc_r+0x1a>
 800a11e:	42a9      	cmp	r1, r5
 800a120:	d903      	bls.n	800a12a <_malloc_r+0x22>
 800a122:	230c      	movs	r3, #12
 800a124:	6033      	str	r3, [r6, #0]
 800a126:	2000      	movs	r0, #0
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a12a:	f000 f933 	bl	800a394 <__malloc_lock>
 800a12e:	4921      	ldr	r1, [pc, #132]	; (800a1b4 <_malloc_r+0xac>)
 800a130:	680a      	ldr	r2, [r1, #0]
 800a132:	4614      	mov	r4, r2
 800a134:	b99c      	cbnz	r4, 800a15e <_malloc_r+0x56>
 800a136:	4f20      	ldr	r7, [pc, #128]	; (800a1b8 <_malloc_r+0xb0>)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	b923      	cbnz	r3, 800a146 <_malloc_r+0x3e>
 800a13c:	4621      	mov	r1, r4
 800a13e:	4630      	mov	r0, r6
 800a140:	f000 f83c 	bl	800a1bc <_sbrk_r>
 800a144:	6038      	str	r0, [r7, #0]
 800a146:	4629      	mov	r1, r5
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f837 	bl	800a1bc <_sbrk_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d123      	bne.n	800a19a <_malloc_r+0x92>
 800a152:	230c      	movs	r3, #12
 800a154:	6033      	str	r3, [r6, #0]
 800a156:	4630      	mov	r0, r6
 800a158:	f000 f922 	bl	800a3a0 <__malloc_unlock>
 800a15c:	e7e3      	b.n	800a126 <_malloc_r+0x1e>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	1b5b      	subs	r3, r3, r5
 800a162:	d417      	bmi.n	800a194 <_malloc_r+0x8c>
 800a164:	2b0b      	cmp	r3, #11
 800a166:	d903      	bls.n	800a170 <_malloc_r+0x68>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	441c      	add	r4, r3
 800a16c:	6025      	str	r5, [r4, #0]
 800a16e:	e004      	b.n	800a17a <_malloc_r+0x72>
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	42a2      	cmp	r2, r4
 800a174:	bf0c      	ite	eq
 800a176:	600b      	streq	r3, [r1, #0]
 800a178:	6053      	strne	r3, [r2, #4]
 800a17a:	4630      	mov	r0, r6
 800a17c:	f000 f910 	bl	800a3a0 <__malloc_unlock>
 800a180:	f104 000b 	add.w	r0, r4, #11
 800a184:	1d23      	adds	r3, r4, #4
 800a186:	f020 0007 	bic.w	r0, r0, #7
 800a18a:	1ac2      	subs	r2, r0, r3
 800a18c:	d0cc      	beq.n	800a128 <_malloc_r+0x20>
 800a18e:	1a1b      	subs	r3, r3, r0
 800a190:	50a3      	str	r3, [r4, r2]
 800a192:	e7c9      	b.n	800a128 <_malloc_r+0x20>
 800a194:	4622      	mov	r2, r4
 800a196:	6864      	ldr	r4, [r4, #4]
 800a198:	e7cc      	b.n	800a134 <_malloc_r+0x2c>
 800a19a:	1cc4      	adds	r4, r0, #3
 800a19c:	f024 0403 	bic.w	r4, r4, #3
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d0e3      	beq.n	800a16c <_malloc_r+0x64>
 800a1a4:	1a21      	subs	r1, r4, r0
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f808 	bl	800a1bc <_sbrk_r>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d1dd      	bne.n	800a16c <_malloc_r+0x64>
 800a1b0:	e7cf      	b.n	800a152 <_malloc_r+0x4a>
 800a1b2:	bf00      	nop
 800a1b4:	20000460 	.word	0x20000460
 800a1b8:	20000464 	.word	0x20000464

0800a1bc <_sbrk_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4d06      	ldr	r5, [pc, #24]	; (800a1d8 <_sbrk_r+0x1c>)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	602b      	str	r3, [r5, #0]
 800a1c8:	f7f9 f906 	bl	80033d8 <_sbrk>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d102      	bne.n	800a1d6 <_sbrk_r+0x1a>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	b103      	cbz	r3, 800a1d6 <_sbrk_r+0x1a>
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	200009fc 	.word	0x200009fc

0800a1dc <__sread>:
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	460c      	mov	r4, r1
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	f000 fa3c 	bl	800a660 <_read_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	bfab      	itete	ge
 800a1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a1f0:	181b      	addge	r3, r3, r0
 800a1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1f6:	bfac      	ite	ge
 800a1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1fa:	81a3      	strhlt	r3, [r4, #12]
 800a1fc:	bd10      	pop	{r4, pc}

0800a1fe <__swrite>:
 800a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a202:	461f      	mov	r7, r3
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	05db      	lsls	r3, r3, #23
 800a208:	4605      	mov	r5, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	4616      	mov	r6, r2
 800a20e:	d505      	bpl.n	800a21c <__swrite+0x1e>
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	2302      	movs	r3, #2
 800a216:	2200      	movs	r2, #0
 800a218:	f000 f898 	bl	800a34c <_lseek_r>
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	4632      	mov	r2, r6
 800a22a:	463b      	mov	r3, r7
 800a22c:	4628      	mov	r0, r5
 800a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	f000 b817 	b.w	800a264 <_write_r>

0800a236 <__sseek>:
 800a236:	b510      	push	{r4, lr}
 800a238:	460c      	mov	r4, r1
 800a23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23e:	f000 f885 	bl	800a34c <_lseek_r>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	bf15      	itete	ne
 800a248:	6560      	strne	r0, [r4, #84]	; 0x54
 800a24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a252:	81a3      	strheq	r3, [r4, #12]
 800a254:	bf18      	it	ne
 800a256:	81a3      	strhne	r3, [r4, #12]
 800a258:	bd10      	pop	{r4, pc}

0800a25a <__sclose>:
 800a25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25e:	f000 b831 	b.w	800a2c4 <_close_r>
	...

0800a264 <_write_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d07      	ldr	r5, [pc, #28]	; (800a284 <_write_r+0x20>)
 800a268:	4604      	mov	r4, r0
 800a26a:	4608      	mov	r0, r1
 800a26c:	4611      	mov	r1, r2
 800a26e:	2200      	movs	r2, #0
 800a270:	602a      	str	r2, [r5, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	f7f8 ff64 	bl	8003140 <_write>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_write_r+0x1e>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_write_r+0x1e>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	200009fc 	.word	0x200009fc

0800a288 <__assert_func>:
 800a288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a28a:	4614      	mov	r4, r2
 800a28c:	461a      	mov	r2, r3
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <__assert_func+0x2c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4605      	mov	r5, r0
 800a294:	68d8      	ldr	r0, [r3, #12]
 800a296:	b14c      	cbz	r4, 800a2ac <__assert_func+0x24>
 800a298:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <__assert_func+0x30>)
 800a29a:	9100      	str	r1, [sp, #0]
 800a29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a0:	4906      	ldr	r1, [pc, #24]	; (800a2bc <__assert_func+0x34>)
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	f000 f81e 	bl	800a2e4 <fiprintf>
 800a2a8:	f000 faba 	bl	800a820 <abort>
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <__assert_func+0x38>)
 800a2ae:	461c      	mov	r4, r3
 800a2b0:	e7f3      	b.n	800a29a <__assert_func+0x12>
 800a2b2:	bf00      	nop
 800a2b4:	20000254 	.word	0x20000254
 800a2b8:	0800d3cc 	.word	0x0800d3cc
 800a2bc:	0800d3d9 	.word	0x0800d3d9
 800a2c0:	0800d407 	.word	0x0800d407

0800a2c4 <_close_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d06      	ldr	r5, [pc, #24]	; (800a2e0 <_close_r+0x1c>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f8 ff62 	bl	8003198 <_close>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_close_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_close_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	200009fc 	.word	0x200009fc

0800a2e4 <fiprintf>:
 800a2e4:	b40e      	push	{r1, r2, r3}
 800a2e6:	b503      	push	{r0, r1, lr}
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	ab03      	add	r3, sp, #12
 800a2ec:	4805      	ldr	r0, [pc, #20]	; (800a304 <fiprintf+0x20>)
 800a2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f2:	6800      	ldr	r0, [r0, #0]
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	f000 f883 	bl	800a400 <_vfiprintf_r>
 800a2fa:	b002      	add	sp, #8
 800a2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a300:	b003      	add	sp, #12
 800a302:	4770      	bx	lr
 800a304:	20000254 	.word	0x20000254

0800a308 <_fstat_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_fstat_r+0x20>)
 800a30c:	2300      	movs	r3, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	4608      	mov	r0, r1
 800a312:	4611      	mov	r1, r2
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	f7f8 ff8f 	bl	8003238 <_fstat>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d102      	bne.n	800a324 <_fstat_r+0x1c>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	b103      	cbz	r3, 800a324 <_fstat_r+0x1c>
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	bd38      	pop	{r3, r4, r5, pc}
 800a326:	bf00      	nop
 800a328:	200009fc 	.word	0x200009fc

0800a32c <_isatty_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_isatty_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f8 feec 	bl	8003114 <_isatty>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_isatty_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_isatty_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	200009fc 	.word	0x200009fc

0800a34c <_lseek_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d07      	ldr	r5, [pc, #28]	; (800a36c <_lseek_r+0x20>)
 800a350:	4604      	mov	r4, r0
 800a352:	4608      	mov	r0, r1
 800a354:	4611      	mov	r1, r2
 800a356:	2200      	movs	r2, #0
 800a358:	602a      	str	r2, [r5, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f7f8 ff33 	bl	80031c6 <_lseek>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_lseek_r+0x1e>
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	b103      	cbz	r3, 800a36a <_lseek_r+0x1e>
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	200009fc 	.word	0x200009fc

0800a370 <__ascii_mbtowc>:
 800a370:	b082      	sub	sp, #8
 800a372:	b901      	cbnz	r1, 800a376 <__ascii_mbtowc+0x6>
 800a374:	a901      	add	r1, sp, #4
 800a376:	b142      	cbz	r2, 800a38a <__ascii_mbtowc+0x1a>
 800a378:	b14b      	cbz	r3, 800a38e <__ascii_mbtowc+0x1e>
 800a37a:	7813      	ldrb	r3, [r2, #0]
 800a37c:	600b      	str	r3, [r1, #0]
 800a37e:	7812      	ldrb	r2, [r2, #0]
 800a380:	1e10      	subs	r0, r2, #0
 800a382:	bf18      	it	ne
 800a384:	2001      	movne	r0, #1
 800a386:	b002      	add	sp, #8
 800a388:	4770      	bx	lr
 800a38a:	4610      	mov	r0, r2
 800a38c:	e7fb      	b.n	800a386 <__ascii_mbtowc+0x16>
 800a38e:	f06f 0001 	mvn.w	r0, #1
 800a392:	e7f8      	b.n	800a386 <__ascii_mbtowc+0x16>

0800a394 <__malloc_lock>:
 800a394:	4801      	ldr	r0, [pc, #4]	; (800a39c <__malloc_lock+0x8>)
 800a396:	f7ff ba5c 	b.w	8009852 <__retarget_lock_acquire_recursive>
 800a39a:	bf00      	nop
 800a39c:	200009f4 	.word	0x200009f4

0800a3a0 <__malloc_unlock>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	; (800a3a8 <__malloc_unlock+0x8>)
 800a3a2:	f7ff ba57 	b.w	8009854 <__retarget_lock_release_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	200009f4 	.word	0x200009f4

0800a3ac <__sfputc_r>:
 800a3ac:	6893      	ldr	r3, [r2, #8]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	b410      	push	{r4}
 800a3b4:	6093      	str	r3, [r2, #8]
 800a3b6:	da08      	bge.n	800a3ca <__sfputc_r+0x1e>
 800a3b8:	6994      	ldr	r4, [r2, #24]
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	db01      	blt.n	800a3c2 <__sfputc_r+0x16>
 800a3be:	290a      	cmp	r1, #10
 800a3c0:	d103      	bne.n	800a3ca <__sfputc_r+0x1e>
 800a3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c6:	f000 b95d 	b.w	800a684 <__swbuf_r>
 800a3ca:	6813      	ldr	r3, [r2, #0]
 800a3cc:	1c58      	adds	r0, r3, #1
 800a3ce:	6010      	str	r0, [r2, #0]
 800a3d0:	7019      	strb	r1, [r3, #0]
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <__sfputs_r>:
 800a3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3dc:	4606      	mov	r6, r0
 800a3de:	460f      	mov	r7, r1
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	18d5      	adds	r5, r2, r3
 800a3e4:	42ac      	cmp	r4, r5
 800a3e6:	d101      	bne.n	800a3ec <__sfputs_r+0x12>
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	e007      	b.n	800a3fc <__sfputs_r+0x22>
 800a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f0:	463a      	mov	r2, r7
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff ffda 	bl	800a3ac <__sfputc_r>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d1f3      	bne.n	800a3e4 <__sfputs_r+0xa>
 800a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a400 <_vfiprintf_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	460d      	mov	r5, r1
 800a406:	b09d      	sub	sp, #116	; 0x74
 800a408:	4614      	mov	r4, r2
 800a40a:	4698      	mov	r8, r3
 800a40c:	4606      	mov	r6, r0
 800a40e:	b118      	cbz	r0, 800a418 <_vfiprintf_r+0x18>
 800a410:	6983      	ldr	r3, [r0, #24]
 800a412:	b90b      	cbnz	r3, 800a418 <_vfiprintf_r+0x18>
 800a414:	f7ff f97a 	bl	800970c <__sinit>
 800a418:	4b89      	ldr	r3, [pc, #548]	; (800a640 <_vfiprintf_r+0x240>)
 800a41a:	429d      	cmp	r5, r3
 800a41c:	d11b      	bne.n	800a456 <_vfiprintf_r+0x56>
 800a41e:	6875      	ldr	r5, [r6, #4]
 800a420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a422:	07d9      	lsls	r1, r3, #31
 800a424:	d405      	bmi.n	800a432 <_vfiprintf_r+0x32>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	059a      	lsls	r2, r3, #22
 800a42a:	d402      	bmi.n	800a432 <_vfiprintf_r+0x32>
 800a42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42e:	f7ff fa10 	bl	8009852 <__retarget_lock_acquire_recursive>
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	071b      	lsls	r3, r3, #28
 800a436:	d501      	bpl.n	800a43c <_vfiprintf_r+0x3c>
 800a438:	692b      	ldr	r3, [r5, #16]
 800a43a:	b9eb      	cbnz	r3, 800a478 <_vfiprintf_r+0x78>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4630      	mov	r0, r6
 800a440:	f000 f980 	bl	800a744 <__swsetup_r>
 800a444:	b1c0      	cbz	r0, 800a478 <_vfiprintf_r+0x78>
 800a446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a448:	07dc      	lsls	r4, r3, #31
 800a44a:	d50e      	bpl.n	800a46a <_vfiprintf_r+0x6a>
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	b01d      	add	sp, #116	; 0x74
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	4b7b      	ldr	r3, [pc, #492]	; (800a644 <_vfiprintf_r+0x244>)
 800a458:	429d      	cmp	r5, r3
 800a45a:	d101      	bne.n	800a460 <_vfiprintf_r+0x60>
 800a45c:	68b5      	ldr	r5, [r6, #8]
 800a45e:	e7df      	b.n	800a420 <_vfiprintf_r+0x20>
 800a460:	4b79      	ldr	r3, [pc, #484]	; (800a648 <_vfiprintf_r+0x248>)
 800a462:	429d      	cmp	r5, r3
 800a464:	bf08      	it	eq
 800a466:	68f5      	ldreq	r5, [r6, #12]
 800a468:	e7da      	b.n	800a420 <_vfiprintf_r+0x20>
 800a46a:	89ab      	ldrh	r3, [r5, #12]
 800a46c:	0598      	lsls	r0, r3, #22
 800a46e:	d4ed      	bmi.n	800a44c <_vfiprintf_r+0x4c>
 800a470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a472:	f7ff f9ef 	bl	8009854 <__retarget_lock_release_recursive>
 800a476:	e7e9      	b.n	800a44c <_vfiprintf_r+0x4c>
 800a478:	2300      	movs	r3, #0
 800a47a:	9309      	str	r3, [sp, #36]	; 0x24
 800a47c:	2320      	movs	r3, #32
 800a47e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a482:	f8cd 800c 	str.w	r8, [sp, #12]
 800a486:	2330      	movs	r3, #48	; 0x30
 800a488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a64c <_vfiprintf_r+0x24c>
 800a48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a490:	f04f 0901 	mov.w	r9, #1
 800a494:	4623      	mov	r3, r4
 800a496:	469a      	mov	sl, r3
 800a498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49c:	b10a      	cbz	r2, 800a4a2 <_vfiprintf_r+0xa2>
 800a49e:	2a25      	cmp	r2, #37	; 0x25
 800a4a0:	d1f9      	bne.n	800a496 <_vfiprintf_r+0x96>
 800a4a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a6:	d00b      	beq.n	800a4c0 <_vfiprintf_r+0xc0>
 800a4a8:	465b      	mov	r3, fp
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ff93 	bl	800a3da <__sfputs_r>
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	f000 80aa 	beq.w	800a60e <_vfiprintf_r+0x20e>
 800a4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4bc:	445a      	add	r2, fp
 800a4be:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 80a2 	beq.w	800a60e <_vfiprintf_r+0x20e>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d4:	f10a 0a01 	add.w	sl, sl, #1
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	9307      	str	r3, [sp, #28]
 800a4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e2:	4654      	mov	r4, sl
 800a4e4:	2205      	movs	r2, #5
 800a4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ea:	4858      	ldr	r0, [pc, #352]	; (800a64c <_vfiprintf_r+0x24c>)
 800a4ec:	f7f5 fe98 	bl	8000220 <memchr>
 800a4f0:	9a04      	ldr	r2, [sp, #16]
 800a4f2:	b9d8      	cbnz	r0, 800a52c <_vfiprintf_r+0x12c>
 800a4f4:	06d1      	lsls	r1, r2, #27
 800a4f6:	bf44      	itt	mi
 800a4f8:	2320      	movmi	r3, #32
 800a4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fe:	0713      	lsls	r3, r2, #28
 800a500:	bf44      	itt	mi
 800a502:	232b      	movmi	r3, #43	; 0x2b
 800a504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a508:	f89a 3000 	ldrb.w	r3, [sl]
 800a50c:	2b2a      	cmp	r3, #42	; 0x2a
 800a50e:	d015      	beq.n	800a53c <_vfiprintf_r+0x13c>
 800a510:	9a07      	ldr	r2, [sp, #28]
 800a512:	4654      	mov	r4, sl
 800a514:	2000      	movs	r0, #0
 800a516:	f04f 0c0a 	mov.w	ip, #10
 800a51a:	4621      	mov	r1, r4
 800a51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a520:	3b30      	subs	r3, #48	; 0x30
 800a522:	2b09      	cmp	r3, #9
 800a524:	d94e      	bls.n	800a5c4 <_vfiprintf_r+0x1c4>
 800a526:	b1b0      	cbz	r0, 800a556 <_vfiprintf_r+0x156>
 800a528:	9207      	str	r2, [sp, #28]
 800a52a:	e014      	b.n	800a556 <_vfiprintf_r+0x156>
 800a52c:	eba0 0308 	sub.w	r3, r0, r8
 800a530:	fa09 f303 	lsl.w	r3, r9, r3
 800a534:	4313      	orrs	r3, r2
 800a536:	9304      	str	r3, [sp, #16]
 800a538:	46a2      	mov	sl, r4
 800a53a:	e7d2      	b.n	800a4e2 <_vfiprintf_r+0xe2>
 800a53c:	9b03      	ldr	r3, [sp, #12]
 800a53e:	1d19      	adds	r1, r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	9103      	str	r1, [sp, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfbb      	ittet	lt
 800a548:	425b      	neglt	r3, r3
 800a54a:	f042 0202 	orrlt.w	r2, r2, #2
 800a54e:	9307      	strge	r3, [sp, #28]
 800a550:	9307      	strlt	r3, [sp, #28]
 800a552:	bfb8      	it	lt
 800a554:	9204      	strlt	r2, [sp, #16]
 800a556:	7823      	ldrb	r3, [r4, #0]
 800a558:	2b2e      	cmp	r3, #46	; 0x2e
 800a55a:	d10c      	bne.n	800a576 <_vfiprintf_r+0x176>
 800a55c:	7863      	ldrb	r3, [r4, #1]
 800a55e:	2b2a      	cmp	r3, #42	; 0x2a
 800a560:	d135      	bne.n	800a5ce <_vfiprintf_r+0x1ce>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	1d1a      	adds	r2, r3, #4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	9203      	str	r2, [sp, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bfb8      	it	lt
 800a56e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a572:	3402      	adds	r4, #2
 800a574:	9305      	str	r3, [sp, #20]
 800a576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a65c <_vfiprintf_r+0x25c>
 800a57a:	7821      	ldrb	r1, [r4, #0]
 800a57c:	2203      	movs	r2, #3
 800a57e:	4650      	mov	r0, sl
 800a580:	f7f5 fe4e 	bl	8000220 <memchr>
 800a584:	b140      	cbz	r0, 800a598 <_vfiprintf_r+0x198>
 800a586:	2340      	movs	r3, #64	; 0x40
 800a588:	eba0 000a 	sub.w	r0, r0, sl
 800a58c:	fa03 f000 	lsl.w	r0, r3, r0
 800a590:	9b04      	ldr	r3, [sp, #16]
 800a592:	4303      	orrs	r3, r0
 800a594:	3401      	adds	r4, #1
 800a596:	9304      	str	r3, [sp, #16]
 800a598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59c:	482c      	ldr	r0, [pc, #176]	; (800a650 <_vfiprintf_r+0x250>)
 800a59e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a2:	2206      	movs	r2, #6
 800a5a4:	f7f5 fe3c 	bl	8000220 <memchr>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d03f      	beq.n	800a62c <_vfiprintf_r+0x22c>
 800a5ac:	4b29      	ldr	r3, [pc, #164]	; (800a654 <_vfiprintf_r+0x254>)
 800a5ae:	bb1b      	cbnz	r3, 800a5f8 <_vfiprintf_r+0x1f8>
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	3307      	adds	r3, #7
 800a5b4:	f023 0307 	bic.w	r3, r3, #7
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	9303      	str	r3, [sp, #12]
 800a5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5be:	443b      	add	r3, r7
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	e767      	b.n	800a494 <_vfiprintf_r+0x94>
 800a5c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	e7a5      	b.n	800a51a <_vfiprintf_r+0x11a>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	3401      	adds	r4, #1
 800a5d2:	9305      	str	r3, [sp, #20]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	f04f 0c0a 	mov.w	ip, #10
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e0:	3a30      	subs	r2, #48	; 0x30
 800a5e2:	2a09      	cmp	r2, #9
 800a5e4:	d903      	bls.n	800a5ee <_vfiprintf_r+0x1ee>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0c5      	beq.n	800a576 <_vfiprintf_r+0x176>
 800a5ea:	9105      	str	r1, [sp, #20]
 800a5ec:	e7c3      	b.n	800a576 <_vfiprintf_r+0x176>
 800a5ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e7f0      	b.n	800a5da <_vfiprintf_r+0x1da>
 800a5f8:	ab03      	add	r3, sp, #12
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	4b16      	ldr	r3, [pc, #88]	; (800a658 <_vfiprintf_r+0x258>)
 800a600:	a904      	add	r1, sp, #16
 800a602:	4630      	mov	r0, r6
 800a604:	f7fd fd16 	bl	8008034 <_printf_float>
 800a608:	4607      	mov	r7, r0
 800a60a:	1c78      	adds	r0, r7, #1
 800a60c:	d1d6      	bne.n	800a5bc <_vfiprintf_r+0x1bc>
 800a60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a610:	07d9      	lsls	r1, r3, #31
 800a612:	d405      	bmi.n	800a620 <_vfiprintf_r+0x220>
 800a614:	89ab      	ldrh	r3, [r5, #12]
 800a616:	059a      	lsls	r2, r3, #22
 800a618:	d402      	bmi.n	800a620 <_vfiprintf_r+0x220>
 800a61a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61c:	f7ff f91a 	bl	8009854 <__retarget_lock_release_recursive>
 800a620:	89ab      	ldrh	r3, [r5, #12]
 800a622:	065b      	lsls	r3, r3, #25
 800a624:	f53f af12 	bmi.w	800a44c <_vfiprintf_r+0x4c>
 800a628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a62a:	e711      	b.n	800a450 <_vfiprintf_r+0x50>
 800a62c:	ab03      	add	r3, sp, #12
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	462a      	mov	r2, r5
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <_vfiprintf_r+0x258>)
 800a634:	a904      	add	r1, sp, #16
 800a636:	4630      	mov	r0, r6
 800a638:	f7fd ffa0 	bl	800857c <_printf_i>
 800a63c:	e7e4      	b.n	800a608 <_vfiprintf_r+0x208>
 800a63e:	bf00      	nop
 800a640:	0800d230 	.word	0x0800d230
 800a644:	0800d250 	.word	0x0800d250
 800a648:	0800d210 	.word	0x0800d210
 800a64c:	0800d412 	.word	0x0800d412
 800a650:	0800d41c 	.word	0x0800d41c
 800a654:	08008035 	.word	0x08008035
 800a658:	0800a3db 	.word	0x0800a3db
 800a65c:	0800d418 	.word	0x0800d418

0800a660 <_read_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_read_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f8 fdba 	bl	80031e8 <_read>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_read_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_read_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	200009fc 	.word	0x200009fc

0800a684 <__swbuf_r>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	460e      	mov	r6, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	4605      	mov	r5, r0
 800a68c:	b118      	cbz	r0, 800a696 <__swbuf_r+0x12>
 800a68e:	6983      	ldr	r3, [r0, #24]
 800a690:	b90b      	cbnz	r3, 800a696 <__swbuf_r+0x12>
 800a692:	f7ff f83b 	bl	800970c <__sinit>
 800a696:	4b21      	ldr	r3, [pc, #132]	; (800a71c <__swbuf_r+0x98>)
 800a698:	429c      	cmp	r4, r3
 800a69a:	d12b      	bne.n	800a6f4 <__swbuf_r+0x70>
 800a69c:	686c      	ldr	r4, [r5, #4]
 800a69e:	69a3      	ldr	r3, [r4, #24]
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	071a      	lsls	r2, r3, #28
 800a6a6:	d52f      	bpl.n	800a708 <__swbuf_r+0x84>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	b36b      	cbz	r3, 800a708 <__swbuf_r+0x84>
 800a6ac:	6923      	ldr	r3, [r4, #16]
 800a6ae:	6820      	ldr	r0, [r4, #0]
 800a6b0:	1ac0      	subs	r0, r0, r3
 800a6b2:	6963      	ldr	r3, [r4, #20]
 800a6b4:	b2f6      	uxtb	r6, r6
 800a6b6:	4283      	cmp	r3, r0
 800a6b8:	4637      	mov	r7, r6
 800a6ba:	dc04      	bgt.n	800a6c6 <__swbuf_r+0x42>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f7fe ff90 	bl	80095e4 <_fflush_r>
 800a6c4:	bb30      	cbnz	r0, 800a714 <__swbuf_r+0x90>
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	60a3      	str	r3, [r4, #8]
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	6022      	str	r2, [r4, #0]
 800a6d2:	701e      	strb	r6, [r3, #0]
 800a6d4:	6963      	ldr	r3, [r4, #20]
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	4283      	cmp	r3, r0
 800a6da:	d004      	beq.n	800a6e6 <__swbuf_r+0x62>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	07db      	lsls	r3, r3, #31
 800a6e0:	d506      	bpl.n	800a6f0 <__swbuf_r+0x6c>
 800a6e2:	2e0a      	cmp	r6, #10
 800a6e4:	d104      	bne.n	800a6f0 <__swbuf_r+0x6c>
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f7fe ff7b 	bl	80095e4 <_fflush_r>
 800a6ee:	b988      	cbnz	r0, 800a714 <__swbuf_r+0x90>
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f4:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <__swbuf_r+0x9c>)
 800a6f6:	429c      	cmp	r4, r3
 800a6f8:	d101      	bne.n	800a6fe <__swbuf_r+0x7a>
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	e7cf      	b.n	800a69e <__swbuf_r+0x1a>
 800a6fe:	4b09      	ldr	r3, [pc, #36]	; (800a724 <__swbuf_r+0xa0>)
 800a700:	429c      	cmp	r4, r3
 800a702:	bf08      	it	eq
 800a704:	68ec      	ldreq	r4, [r5, #12]
 800a706:	e7ca      	b.n	800a69e <__swbuf_r+0x1a>
 800a708:	4621      	mov	r1, r4
 800a70a:	4628      	mov	r0, r5
 800a70c:	f000 f81a 	bl	800a744 <__swsetup_r>
 800a710:	2800      	cmp	r0, #0
 800a712:	d0cb      	beq.n	800a6ac <__swbuf_r+0x28>
 800a714:	f04f 37ff 	mov.w	r7, #4294967295
 800a718:	e7ea      	b.n	800a6f0 <__swbuf_r+0x6c>
 800a71a:	bf00      	nop
 800a71c:	0800d230 	.word	0x0800d230
 800a720:	0800d250 	.word	0x0800d250
 800a724:	0800d210 	.word	0x0800d210

0800a728 <__ascii_wctomb>:
 800a728:	b149      	cbz	r1, 800a73e <__ascii_wctomb+0x16>
 800a72a:	2aff      	cmp	r2, #255	; 0xff
 800a72c:	bf85      	ittet	hi
 800a72e:	238a      	movhi	r3, #138	; 0x8a
 800a730:	6003      	strhi	r3, [r0, #0]
 800a732:	700a      	strbls	r2, [r1, #0]
 800a734:	f04f 30ff 	movhi.w	r0, #4294967295
 800a738:	bf98      	it	ls
 800a73a:	2001      	movls	r0, #1
 800a73c:	4770      	bx	lr
 800a73e:	4608      	mov	r0, r1
 800a740:	4770      	bx	lr
	...

0800a744 <__swsetup_r>:
 800a744:	4b32      	ldr	r3, [pc, #200]	; (800a810 <__swsetup_r+0xcc>)
 800a746:	b570      	push	{r4, r5, r6, lr}
 800a748:	681d      	ldr	r5, [r3, #0]
 800a74a:	4606      	mov	r6, r0
 800a74c:	460c      	mov	r4, r1
 800a74e:	b125      	cbz	r5, 800a75a <__swsetup_r+0x16>
 800a750:	69ab      	ldr	r3, [r5, #24]
 800a752:	b913      	cbnz	r3, 800a75a <__swsetup_r+0x16>
 800a754:	4628      	mov	r0, r5
 800a756:	f7fe ffd9 	bl	800970c <__sinit>
 800a75a:	4b2e      	ldr	r3, [pc, #184]	; (800a814 <__swsetup_r+0xd0>)
 800a75c:	429c      	cmp	r4, r3
 800a75e:	d10f      	bne.n	800a780 <__swsetup_r+0x3c>
 800a760:	686c      	ldr	r4, [r5, #4]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a768:	0719      	lsls	r1, r3, #28
 800a76a:	d42c      	bmi.n	800a7c6 <__swsetup_r+0x82>
 800a76c:	06dd      	lsls	r5, r3, #27
 800a76e:	d411      	bmi.n	800a794 <__swsetup_r+0x50>
 800a770:	2309      	movs	r3, #9
 800a772:	6033      	str	r3, [r6, #0]
 800a774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a778:	81a3      	strh	r3, [r4, #12]
 800a77a:	f04f 30ff 	mov.w	r0, #4294967295
 800a77e:	e03e      	b.n	800a7fe <__swsetup_r+0xba>
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <__swsetup_r+0xd4>)
 800a782:	429c      	cmp	r4, r3
 800a784:	d101      	bne.n	800a78a <__swsetup_r+0x46>
 800a786:	68ac      	ldr	r4, [r5, #8]
 800a788:	e7eb      	b.n	800a762 <__swsetup_r+0x1e>
 800a78a:	4b24      	ldr	r3, [pc, #144]	; (800a81c <__swsetup_r+0xd8>)
 800a78c:	429c      	cmp	r4, r3
 800a78e:	bf08      	it	eq
 800a790:	68ec      	ldreq	r4, [r5, #12]
 800a792:	e7e6      	b.n	800a762 <__swsetup_r+0x1e>
 800a794:	0758      	lsls	r0, r3, #29
 800a796:	d512      	bpl.n	800a7be <__swsetup_r+0x7a>
 800a798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a79a:	b141      	cbz	r1, 800a7ae <__swsetup_r+0x6a>
 800a79c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7a0:	4299      	cmp	r1, r3
 800a7a2:	d002      	beq.n	800a7aa <__swsetup_r+0x66>
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff fc5f 	bl	800a068 <_free_r>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6063      	str	r3, [r4, #4]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	f043 0308 	orr.w	r3, r3, #8
 800a7c4:	81a3      	strh	r3, [r4, #12]
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	b94b      	cbnz	r3, 800a7de <__swsetup_r+0x9a>
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d4:	d003      	beq.n	800a7de <__swsetup_r+0x9a>
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff f861 	bl	80098a0 <__smakebuf_r>
 800a7de:	89a0      	ldrh	r0, [r4, #12]
 800a7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7e4:	f010 0301 	ands.w	r3, r0, #1
 800a7e8:	d00a      	beq.n	800a800 <__swsetup_r+0xbc>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	6963      	ldr	r3, [r4, #20]
 800a7f0:	425b      	negs	r3, r3
 800a7f2:	61a3      	str	r3, [r4, #24]
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	b943      	cbnz	r3, 800a80a <__swsetup_r+0xc6>
 800a7f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7fc:	d1ba      	bne.n	800a774 <__swsetup_r+0x30>
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	0781      	lsls	r1, r0, #30
 800a802:	bf58      	it	pl
 800a804:	6963      	ldrpl	r3, [r4, #20]
 800a806:	60a3      	str	r3, [r4, #8]
 800a808:	e7f4      	b.n	800a7f4 <__swsetup_r+0xb0>
 800a80a:	2000      	movs	r0, #0
 800a80c:	e7f7      	b.n	800a7fe <__swsetup_r+0xba>
 800a80e:	bf00      	nop
 800a810:	20000254 	.word	0x20000254
 800a814:	0800d230 	.word	0x0800d230
 800a818:	0800d250 	.word	0x0800d250
 800a81c:	0800d210 	.word	0x0800d210

0800a820 <abort>:
 800a820:	b508      	push	{r3, lr}
 800a822:	2006      	movs	r0, #6
 800a824:	f000 f82c 	bl	800a880 <raise>
 800a828:	2001      	movs	r0, #1
 800a82a:	f002 fbef 	bl	800d00c <_exit>

0800a82e <_raise_r>:
 800a82e:	291f      	cmp	r1, #31
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4604      	mov	r4, r0
 800a834:	460d      	mov	r5, r1
 800a836:	d904      	bls.n	800a842 <_raise_r+0x14>
 800a838:	2316      	movs	r3, #22
 800a83a:	6003      	str	r3, [r0, #0]
 800a83c:	f04f 30ff 	mov.w	r0, #4294967295
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a844:	b112      	cbz	r2, 800a84c <_raise_r+0x1e>
 800a846:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a84a:	b94b      	cbnz	r3, 800a860 <_raise_r+0x32>
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 f831 	bl	800a8b4 <_getpid_r>
 800a852:	462a      	mov	r2, r5
 800a854:	4601      	mov	r1, r0
 800a856:	4620      	mov	r0, r4
 800a858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a85c:	f000 b818 	b.w	800a890 <_kill_r>
 800a860:	2b01      	cmp	r3, #1
 800a862:	d00a      	beq.n	800a87a <_raise_r+0x4c>
 800a864:	1c59      	adds	r1, r3, #1
 800a866:	d103      	bne.n	800a870 <_raise_r+0x42>
 800a868:	2316      	movs	r3, #22
 800a86a:	6003      	str	r3, [r0, #0]
 800a86c:	2001      	movs	r0, #1
 800a86e:	e7e7      	b.n	800a840 <_raise_r+0x12>
 800a870:	2400      	movs	r4, #0
 800a872:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a876:	4628      	mov	r0, r5
 800a878:	4798      	blx	r3
 800a87a:	2000      	movs	r0, #0
 800a87c:	e7e0      	b.n	800a840 <_raise_r+0x12>
	...

0800a880 <raise>:
 800a880:	4b02      	ldr	r3, [pc, #8]	; (800a88c <raise+0xc>)
 800a882:	4601      	mov	r1, r0
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	f7ff bfd2 	b.w	800a82e <_raise_r>
 800a88a:	bf00      	nop
 800a88c:	20000254 	.word	0x20000254

0800a890 <_kill_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d07      	ldr	r5, [pc, #28]	; (800a8b0 <_kill_r+0x20>)
 800a894:	2300      	movs	r3, #0
 800a896:	4604      	mov	r4, r0
 800a898:	4608      	mov	r0, r1
 800a89a:	4611      	mov	r1, r2
 800a89c:	602b      	str	r3, [r5, #0]
 800a89e:	f002 fbad 	bl	800cffc <_kill>
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	d102      	bne.n	800a8ac <_kill_r+0x1c>
 800a8a6:	682b      	ldr	r3, [r5, #0]
 800a8a8:	b103      	cbz	r3, 800a8ac <_kill_r+0x1c>
 800a8aa:	6023      	str	r3, [r4, #0]
 800a8ac:	bd38      	pop	{r3, r4, r5, pc}
 800a8ae:	bf00      	nop
 800a8b0:	200009fc 	.word	0x200009fc

0800a8b4 <_getpid_r>:
 800a8b4:	f002 bb9a 	b.w	800cfec <_getpid>

0800a8b8 <cos>:
 800a8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8ba:	ec53 2b10 	vmov	r2, r3, d0
 800a8be:	4824      	ldr	r0, [pc, #144]	; (800a950 <cos+0x98>)
 800a8c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a8c4:	4281      	cmp	r1, r0
 800a8c6:	dc06      	bgt.n	800a8d6 <cos+0x1e>
 800a8c8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a948 <cos+0x90>
 800a8cc:	f001 fb78 	bl	800bfc0 <__kernel_cos>
 800a8d0:	ec51 0b10 	vmov	r0, r1, d0
 800a8d4:	e007      	b.n	800a8e6 <cos+0x2e>
 800a8d6:	481f      	ldr	r0, [pc, #124]	; (800a954 <cos+0x9c>)
 800a8d8:	4281      	cmp	r1, r0
 800a8da:	dd09      	ble.n	800a8f0 <cos+0x38>
 800a8dc:	ee10 0a10 	vmov	r0, s0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	f7f5 fcf1 	bl	80002c8 <__aeabi_dsub>
 800a8e6:	ec41 0b10 	vmov	d0, r0, r1
 800a8ea:	b005      	add	sp, #20
 800a8ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8f0:	4668      	mov	r0, sp
 800a8f2:	f001 f8a5 	bl	800ba40 <__ieee754_rem_pio2>
 800a8f6:	f000 0003 	and.w	r0, r0, #3
 800a8fa:	2801      	cmp	r0, #1
 800a8fc:	d007      	beq.n	800a90e <cos+0x56>
 800a8fe:	2802      	cmp	r0, #2
 800a900:	d012      	beq.n	800a928 <cos+0x70>
 800a902:	b9c0      	cbnz	r0, 800a936 <cos+0x7e>
 800a904:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a908:	ed9d 0b00 	vldr	d0, [sp]
 800a90c:	e7de      	b.n	800a8cc <cos+0x14>
 800a90e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a912:	ed9d 0b00 	vldr	d0, [sp]
 800a916:	f001 ff5b 	bl	800c7d0 <__kernel_sin>
 800a91a:	ec53 2b10 	vmov	r2, r3, d0
 800a91e:	ee10 0a10 	vmov	r0, s0
 800a922:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a926:	e7de      	b.n	800a8e6 <cos+0x2e>
 800a928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a92c:	ed9d 0b00 	vldr	d0, [sp]
 800a930:	f001 fb46 	bl	800bfc0 <__kernel_cos>
 800a934:	e7f1      	b.n	800a91a <cos+0x62>
 800a936:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a93a:	ed9d 0b00 	vldr	d0, [sp]
 800a93e:	2001      	movs	r0, #1
 800a940:	f001 ff46 	bl	800c7d0 <__kernel_sin>
 800a944:	e7c4      	b.n	800a8d0 <cos+0x18>
 800a946:	bf00      	nop
	...
 800a950:	3fe921fb 	.word	0x3fe921fb
 800a954:	7fefffff 	.word	0x7fefffff

0800a958 <sin>:
 800a958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a95a:	ec53 2b10 	vmov	r2, r3, d0
 800a95e:	4826      	ldr	r0, [pc, #152]	; (800a9f8 <sin+0xa0>)
 800a960:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a964:	4281      	cmp	r1, r0
 800a966:	dc07      	bgt.n	800a978 <sin+0x20>
 800a968:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a9f0 <sin+0x98>
 800a96c:	2000      	movs	r0, #0
 800a96e:	f001 ff2f 	bl	800c7d0 <__kernel_sin>
 800a972:	ec51 0b10 	vmov	r0, r1, d0
 800a976:	e007      	b.n	800a988 <sin+0x30>
 800a978:	4820      	ldr	r0, [pc, #128]	; (800a9fc <sin+0xa4>)
 800a97a:	4281      	cmp	r1, r0
 800a97c:	dd09      	ble.n	800a992 <sin+0x3a>
 800a97e:	ee10 0a10 	vmov	r0, s0
 800a982:	4619      	mov	r1, r3
 800a984:	f7f5 fca0 	bl	80002c8 <__aeabi_dsub>
 800a988:	ec41 0b10 	vmov	d0, r0, r1
 800a98c:	b005      	add	sp, #20
 800a98e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a992:	4668      	mov	r0, sp
 800a994:	f001 f854 	bl	800ba40 <__ieee754_rem_pio2>
 800a998:	f000 0003 	and.w	r0, r0, #3
 800a99c:	2801      	cmp	r0, #1
 800a99e:	d008      	beq.n	800a9b2 <sin+0x5a>
 800a9a0:	2802      	cmp	r0, #2
 800a9a2:	d00d      	beq.n	800a9c0 <sin+0x68>
 800a9a4:	b9d0      	cbnz	r0, 800a9dc <sin+0x84>
 800a9a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9aa:	ed9d 0b00 	vldr	d0, [sp]
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	e7dd      	b.n	800a96e <sin+0x16>
 800a9b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9b6:	ed9d 0b00 	vldr	d0, [sp]
 800a9ba:	f001 fb01 	bl	800bfc0 <__kernel_cos>
 800a9be:	e7d8      	b.n	800a972 <sin+0x1a>
 800a9c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9c4:	ed9d 0b00 	vldr	d0, [sp]
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f001 ff01 	bl	800c7d0 <__kernel_sin>
 800a9ce:	ec53 2b10 	vmov	r2, r3, d0
 800a9d2:	ee10 0a10 	vmov	r0, s0
 800a9d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a9da:	e7d5      	b.n	800a988 <sin+0x30>
 800a9dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a9e0:	ed9d 0b00 	vldr	d0, [sp]
 800a9e4:	f001 faec 	bl	800bfc0 <__kernel_cos>
 800a9e8:	e7f1      	b.n	800a9ce <sin+0x76>
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w
	...
 800a9f8:	3fe921fb 	.word	0x3fe921fb
 800a9fc:	7fefffff 	.word	0x7fefffff

0800aa00 <atan2>:
 800aa00:	f000 b91e 	b.w	800ac40 <__ieee754_atan2>

0800aa04 <fmod>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	ed2d 8b02 	vpush	{d8}
 800aa0a:	ec57 6b10 	vmov	r6, r7, d0
 800aa0e:	ec55 4b11 	vmov	r4, r5, d1
 800aa12:	f000 f9df 	bl	800add4 <__ieee754_fmod>
 800aa16:	4b18      	ldr	r3, [pc, #96]	; (800aa78 <fmod+0x74>)
 800aa18:	eeb0 8a40 	vmov.f32	s16, s0
 800aa1c:	eef0 8a60 	vmov.f32	s17, s1
 800aa20:	f993 3000 	ldrsb.w	r3, [r3]
 800aa24:	3301      	adds	r3, #1
 800aa26:	d020      	beq.n	800aa6a <fmod+0x66>
 800aa28:	4622      	mov	r2, r4
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f6 f89c 	bl	8000b6c <__aeabi_dcmpun>
 800aa34:	b9c8      	cbnz	r0, 800aa6a <fmod+0x66>
 800aa36:	4632      	mov	r2, r6
 800aa38:	463b      	mov	r3, r7
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	f7f6 f895 	bl	8000b6c <__aeabi_dcmpun>
 800aa42:	b990      	cbnz	r0, 800aa6a <fmod+0x66>
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	f7f6 f85c 	bl	8000b08 <__aeabi_dcmpeq>
 800aa50:	b158      	cbz	r0, 800aa6a <fmod+0x66>
 800aa52:	f7fd fa1d 	bl	8007e90 <__errno>
 800aa56:	2321      	movs	r3, #33	; 0x21
 800aa58:	6003      	str	r3, [r0, #0]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4610      	mov	r0, r2
 800aa60:	4619      	mov	r1, r3
 800aa62:	f7f5 ff13 	bl	800088c <__aeabi_ddiv>
 800aa66:	ec41 0b18 	vmov	d8, r0, r1
 800aa6a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa6e:	eef0 0a68 	vmov.f32	s1, s17
 800aa72:	ecbd 8b02 	vpop	{d8}
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	20000424 	.word	0x20000424

0800aa7c <pow>:
 800aa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa80:	ec59 8b10 	vmov	r8, r9, d0
 800aa84:	ec57 6b11 	vmov	r6, r7, d1
 800aa88:	f000 fab6 	bl	800aff8 <__ieee754_pow>
 800aa8c:	4b4e      	ldr	r3, [pc, #312]	; (800abc8 <pow+0x14c>)
 800aa8e:	f993 3000 	ldrsb.w	r3, [r3]
 800aa92:	3301      	adds	r3, #1
 800aa94:	ec55 4b10 	vmov	r4, r5, d0
 800aa98:	d015      	beq.n	800aac6 <pow+0x4a>
 800aa9a:	4632      	mov	r2, r6
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	f7f6 f863 	bl	8000b6c <__aeabi_dcmpun>
 800aaa6:	b970      	cbnz	r0, 800aac6 <pow+0x4a>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7f6 f85c 	bl	8000b6c <__aeabi_dcmpun>
 800aab4:	2200      	movs	r2, #0
 800aab6:	2300      	movs	r3, #0
 800aab8:	b148      	cbz	r0, 800aace <pow+0x52>
 800aaba:	4630      	mov	r0, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	f7f6 f823 	bl	8000b08 <__aeabi_dcmpeq>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d17d      	bne.n	800abc2 <pow+0x146>
 800aac6:	ec45 4b10 	vmov	d0, r4, r5
 800aaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aace:	4640      	mov	r0, r8
 800aad0:	4649      	mov	r1, r9
 800aad2:	f7f6 f819 	bl	8000b08 <__aeabi_dcmpeq>
 800aad6:	b1e0      	cbz	r0, 800ab12 <pow+0x96>
 800aad8:	2200      	movs	r2, #0
 800aada:	2300      	movs	r3, #0
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f6 f812 	bl	8000b08 <__aeabi_dcmpeq>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d16c      	bne.n	800abc2 <pow+0x146>
 800aae8:	ec47 6b10 	vmov	d0, r6, r7
 800aaec:	f002 f8d9 	bl	800cca2 <finite>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0e8      	beq.n	800aac6 <pow+0x4a>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f6 f80e 	bl	8000b1c <__aeabi_dcmplt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d0e0      	beq.n	800aac6 <pow+0x4a>
 800ab04:	f7fd f9c4 	bl	8007e90 <__errno>
 800ab08:	2321      	movs	r3, #33	; 0x21
 800ab0a:	6003      	str	r3, [r0, #0]
 800ab0c:	2400      	movs	r4, #0
 800ab0e:	4d2f      	ldr	r5, [pc, #188]	; (800abcc <pow+0x150>)
 800ab10:	e7d9      	b.n	800aac6 <pow+0x4a>
 800ab12:	ec45 4b10 	vmov	d0, r4, r5
 800ab16:	f002 f8c4 	bl	800cca2 <finite>
 800ab1a:	bbb8      	cbnz	r0, 800ab8c <pow+0x110>
 800ab1c:	ec49 8b10 	vmov	d0, r8, r9
 800ab20:	f002 f8bf 	bl	800cca2 <finite>
 800ab24:	b390      	cbz	r0, 800ab8c <pow+0x110>
 800ab26:	ec47 6b10 	vmov	d0, r6, r7
 800ab2a:	f002 f8ba 	bl	800cca2 <finite>
 800ab2e:	b368      	cbz	r0, 800ab8c <pow+0x110>
 800ab30:	4622      	mov	r2, r4
 800ab32:	462b      	mov	r3, r5
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f6 f818 	bl	8000b6c <__aeabi_dcmpun>
 800ab3c:	b160      	cbz	r0, 800ab58 <pow+0xdc>
 800ab3e:	f7fd f9a7 	bl	8007e90 <__errno>
 800ab42:	2321      	movs	r3, #33	; 0x21
 800ab44:	6003      	str	r3, [r0, #0]
 800ab46:	2200      	movs	r2, #0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	f7f5 fe9d 	bl	800088c <__aeabi_ddiv>
 800ab52:	4604      	mov	r4, r0
 800ab54:	460d      	mov	r5, r1
 800ab56:	e7b6      	b.n	800aac6 <pow+0x4a>
 800ab58:	f7fd f99a 	bl	8007e90 <__errno>
 800ab5c:	2322      	movs	r3, #34	; 0x22
 800ab5e:	6003      	str	r3, [r0, #0]
 800ab60:	2200      	movs	r2, #0
 800ab62:	2300      	movs	r3, #0
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 ffd8 	bl	8000b1c <__aeabi_dcmplt>
 800ab6c:	2400      	movs	r4, #0
 800ab6e:	b158      	cbz	r0, 800ab88 <pow+0x10c>
 800ab70:	ec47 6b10 	vmov	d0, r6, r7
 800ab74:	f002 f928 	bl	800cdc8 <rint>
 800ab78:	4632      	mov	r2, r6
 800ab7a:	ec51 0b10 	vmov	r0, r1, d0
 800ab7e:	463b      	mov	r3, r7
 800ab80:	f7f5 ffc2 	bl	8000b08 <__aeabi_dcmpeq>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d0c2      	beq.n	800ab0e <pow+0x92>
 800ab88:	4d11      	ldr	r5, [pc, #68]	; (800abd0 <pow+0x154>)
 800ab8a:	e79c      	b.n	800aac6 <pow+0x4a>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 ffb8 	bl	8000b08 <__aeabi_dcmpeq>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d094      	beq.n	800aac6 <pow+0x4a>
 800ab9c:	ec49 8b10 	vmov	d0, r8, r9
 800aba0:	f002 f87f 	bl	800cca2 <finite>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d08e      	beq.n	800aac6 <pow+0x4a>
 800aba8:	ec47 6b10 	vmov	d0, r6, r7
 800abac:	f002 f879 	bl	800cca2 <finite>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d088      	beq.n	800aac6 <pow+0x4a>
 800abb4:	f7fd f96c 	bl	8007e90 <__errno>
 800abb8:	2322      	movs	r3, #34	; 0x22
 800abba:	6003      	str	r3, [r0, #0]
 800abbc:	2400      	movs	r4, #0
 800abbe:	2500      	movs	r5, #0
 800abc0:	e781      	b.n	800aac6 <pow+0x4a>
 800abc2:	4d04      	ldr	r5, [pc, #16]	; (800abd4 <pow+0x158>)
 800abc4:	2400      	movs	r4, #0
 800abc6:	e77e      	b.n	800aac6 <pow+0x4a>
 800abc8:	20000424 	.word	0x20000424
 800abcc:	fff00000 	.word	0xfff00000
 800abd0:	7ff00000 	.word	0x7ff00000
 800abd4:	3ff00000 	.word	0x3ff00000

0800abd8 <sqrt>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	ed2d 8b02 	vpush	{d8}
 800abde:	ec55 4b10 	vmov	r4, r5, d0
 800abe2:	f001 f937 	bl	800be54 <__ieee754_sqrt>
 800abe6:	4b15      	ldr	r3, [pc, #84]	; (800ac3c <sqrt+0x64>)
 800abe8:	eeb0 8a40 	vmov.f32	s16, s0
 800abec:	eef0 8a60 	vmov.f32	s17, s1
 800abf0:	f993 3000 	ldrsb.w	r3, [r3]
 800abf4:	3301      	adds	r3, #1
 800abf6:	d019      	beq.n	800ac2c <sqrt+0x54>
 800abf8:	4622      	mov	r2, r4
 800abfa:	462b      	mov	r3, r5
 800abfc:	4620      	mov	r0, r4
 800abfe:	4629      	mov	r1, r5
 800ac00:	f7f5 ffb4 	bl	8000b6c <__aeabi_dcmpun>
 800ac04:	b990      	cbnz	r0, 800ac2c <sqrt+0x54>
 800ac06:	2200      	movs	r2, #0
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 ff85 	bl	8000b1c <__aeabi_dcmplt>
 800ac12:	b158      	cbz	r0, 800ac2c <sqrt+0x54>
 800ac14:	f7fd f93c 	bl	8007e90 <__errno>
 800ac18:	2321      	movs	r3, #33	; 0x21
 800ac1a:	6003      	str	r3, [r0, #0]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4610      	mov	r0, r2
 800ac22:	4619      	mov	r1, r3
 800ac24:	f7f5 fe32 	bl	800088c <__aeabi_ddiv>
 800ac28:	ec41 0b18 	vmov	d8, r0, r1
 800ac2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac30:	eef0 0a68 	vmov.f32	s1, s17
 800ac34:	ecbd 8b02 	vpop	{d8}
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000424 	.word	0x20000424

0800ac40 <__ieee754_atan2>:
 800ac40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac44:	ec57 6b11 	vmov	r6, r7, d1
 800ac48:	4273      	negs	r3, r6
 800ac4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800add0 <__ieee754_atan2+0x190>
 800ac4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ac52:	4333      	orrs	r3, r6
 800ac54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac58:	4573      	cmp	r3, lr
 800ac5a:	ec51 0b10 	vmov	r0, r1, d0
 800ac5e:	ee11 8a10 	vmov	r8, s2
 800ac62:	d80a      	bhi.n	800ac7a <__ieee754_atan2+0x3a>
 800ac64:	4244      	negs	r4, r0
 800ac66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac6a:	4304      	orrs	r4, r0
 800ac6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ac70:	4574      	cmp	r4, lr
 800ac72:	ee10 9a10 	vmov	r9, s0
 800ac76:	468c      	mov	ip, r1
 800ac78:	d907      	bls.n	800ac8a <__ieee754_atan2+0x4a>
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	463b      	mov	r3, r7
 800ac7e:	f7f5 fb25 	bl	80002cc <__adddf3>
 800ac82:	ec41 0b10 	vmov	d0, r0, r1
 800ac86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ac8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ac92:	4334      	orrs	r4, r6
 800ac94:	d103      	bne.n	800ac9e <__ieee754_atan2+0x5e>
 800ac96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9a:	f001 be59 	b.w	800c950 <atan>
 800ac9e:	17bc      	asrs	r4, r7, #30
 800aca0:	f004 0402 	and.w	r4, r4, #2
 800aca4:	ea53 0909 	orrs.w	r9, r3, r9
 800aca8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800acac:	d107      	bne.n	800acbe <__ieee754_atan2+0x7e>
 800acae:	2c02      	cmp	r4, #2
 800acb0:	d060      	beq.n	800ad74 <__ieee754_atan2+0x134>
 800acb2:	2c03      	cmp	r4, #3
 800acb4:	d1e5      	bne.n	800ac82 <__ieee754_atan2+0x42>
 800acb6:	a142      	add	r1, pc, #264	; (adr r1, 800adc0 <__ieee754_atan2+0x180>)
 800acb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acbc:	e7e1      	b.n	800ac82 <__ieee754_atan2+0x42>
 800acbe:	ea52 0808 	orrs.w	r8, r2, r8
 800acc2:	d106      	bne.n	800acd2 <__ieee754_atan2+0x92>
 800acc4:	f1bc 0f00 	cmp.w	ip, #0
 800acc8:	da5f      	bge.n	800ad8a <__ieee754_atan2+0x14a>
 800acca:	a13f      	add	r1, pc, #252	; (adr r1, 800adc8 <__ieee754_atan2+0x188>)
 800accc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd0:	e7d7      	b.n	800ac82 <__ieee754_atan2+0x42>
 800acd2:	4572      	cmp	r2, lr
 800acd4:	d10f      	bne.n	800acf6 <__ieee754_atan2+0xb6>
 800acd6:	4293      	cmp	r3, r2
 800acd8:	f104 34ff 	add.w	r4, r4, #4294967295
 800acdc:	d107      	bne.n	800acee <__ieee754_atan2+0xae>
 800acde:	2c02      	cmp	r4, #2
 800ace0:	d84c      	bhi.n	800ad7c <__ieee754_atan2+0x13c>
 800ace2:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <__ieee754_atan2+0x178>)
 800ace4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ace8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800acec:	e7c9      	b.n	800ac82 <__ieee754_atan2+0x42>
 800acee:	2c02      	cmp	r4, #2
 800acf0:	d848      	bhi.n	800ad84 <__ieee754_atan2+0x144>
 800acf2:	4b32      	ldr	r3, [pc, #200]	; (800adbc <__ieee754_atan2+0x17c>)
 800acf4:	e7f6      	b.n	800ace4 <__ieee754_atan2+0xa4>
 800acf6:	4573      	cmp	r3, lr
 800acf8:	d0e4      	beq.n	800acc4 <__ieee754_atan2+0x84>
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ad00:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad04:	da1e      	bge.n	800ad44 <__ieee754_atan2+0x104>
 800ad06:	2f00      	cmp	r7, #0
 800ad08:	da01      	bge.n	800ad0e <__ieee754_atan2+0xce>
 800ad0a:	323c      	adds	r2, #60	; 0x3c
 800ad0c:	db1e      	blt.n	800ad4c <__ieee754_atan2+0x10c>
 800ad0e:	4632      	mov	r2, r6
 800ad10:	463b      	mov	r3, r7
 800ad12:	f7f5 fdbb 	bl	800088c <__aeabi_ddiv>
 800ad16:	ec41 0b10 	vmov	d0, r0, r1
 800ad1a:	f001 ffb9 	bl	800cc90 <fabs>
 800ad1e:	f001 fe17 	bl	800c950 <atan>
 800ad22:	ec51 0b10 	vmov	r0, r1, d0
 800ad26:	2c01      	cmp	r4, #1
 800ad28:	d013      	beq.n	800ad52 <__ieee754_atan2+0x112>
 800ad2a:	2c02      	cmp	r4, #2
 800ad2c:	d015      	beq.n	800ad5a <__ieee754_atan2+0x11a>
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	d0a7      	beq.n	800ac82 <__ieee754_atan2+0x42>
 800ad32:	a319      	add	r3, pc, #100	; (adr r3, 800ad98 <__ieee754_atan2+0x158>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fac6 	bl	80002c8 <__aeabi_dsub>
 800ad3c:	a318      	add	r3, pc, #96	; (adr r3, 800ada0 <__ieee754_atan2+0x160>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	e014      	b.n	800ad6e <__ieee754_atan2+0x12e>
 800ad44:	a118      	add	r1, pc, #96	; (adr r1, 800ada8 <__ieee754_atan2+0x168>)
 800ad46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4a:	e7ec      	b.n	800ad26 <__ieee754_atan2+0xe6>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	2100      	movs	r1, #0
 800ad50:	e7e9      	b.n	800ad26 <__ieee754_atan2+0xe6>
 800ad52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad56:	4619      	mov	r1, r3
 800ad58:	e793      	b.n	800ac82 <__ieee754_atan2+0x42>
 800ad5a:	a30f      	add	r3, pc, #60	; (adr r3, 800ad98 <__ieee754_atan2+0x158>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fab2 	bl	80002c8 <__aeabi_dsub>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	a10d      	add	r1, pc, #52	; (adr r1, 800ada0 <__ieee754_atan2+0x160>)
 800ad6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6e:	f7f5 faab 	bl	80002c8 <__aeabi_dsub>
 800ad72:	e786      	b.n	800ac82 <__ieee754_atan2+0x42>
 800ad74:	a10a      	add	r1, pc, #40	; (adr r1, 800ada0 <__ieee754_atan2+0x160>)
 800ad76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad7a:	e782      	b.n	800ac82 <__ieee754_atan2+0x42>
 800ad7c:	a10c      	add	r1, pc, #48	; (adr r1, 800adb0 <__ieee754_atan2+0x170>)
 800ad7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad82:	e77e      	b.n	800ac82 <__ieee754_atan2+0x42>
 800ad84:	2000      	movs	r0, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	e77b      	b.n	800ac82 <__ieee754_atan2+0x42>
 800ad8a:	a107      	add	r1, pc, #28	; (adr r1, 800ada8 <__ieee754_atan2+0x168>)
 800ad8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad90:	e777      	b.n	800ac82 <__ieee754_atan2+0x42>
 800ad92:	bf00      	nop
 800ad94:	f3af 8000 	nop.w
 800ad98:	33145c07 	.word	0x33145c07
 800ad9c:	3ca1a626 	.word	0x3ca1a626
 800ada0:	54442d18 	.word	0x54442d18
 800ada4:	400921fb 	.word	0x400921fb
 800ada8:	54442d18 	.word	0x54442d18
 800adac:	3ff921fb 	.word	0x3ff921fb
 800adb0:	54442d18 	.word	0x54442d18
 800adb4:	3fe921fb 	.word	0x3fe921fb
 800adb8:	0800d428 	.word	0x0800d428
 800adbc:	0800d440 	.word	0x0800d440
 800adc0:	54442d18 	.word	0x54442d18
 800adc4:	c00921fb 	.word	0xc00921fb
 800adc8:	54442d18 	.word	0x54442d18
 800adcc:	bff921fb 	.word	0xbff921fb
 800add0:	7ff00000 	.word	0x7ff00000

0800add4 <__ieee754_fmod>:
 800add4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	ec53 2b11 	vmov	r2, r3, d1
 800addc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800ade0:	ea5e 0402 	orrs.w	r4, lr, r2
 800ade4:	ec51 0b10 	vmov	r0, r1, d0
 800ade8:	ee11 7a10 	vmov	r7, s2
 800adec:	ee11 ca10 	vmov	ip, s2
 800adf0:	461e      	mov	r6, r3
 800adf2:	d00d      	beq.n	800ae10 <__ieee754_fmod+0x3c>
 800adf4:	4c7a      	ldr	r4, [pc, #488]	; (800afe0 <__ieee754_fmod+0x20c>)
 800adf6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800adfa:	45a0      	cmp	r8, r4
 800adfc:	4689      	mov	r9, r1
 800adfe:	dc07      	bgt.n	800ae10 <__ieee754_fmod+0x3c>
 800ae00:	4254      	negs	r4, r2
 800ae02:	4d78      	ldr	r5, [pc, #480]	; (800afe4 <__ieee754_fmod+0x210>)
 800ae04:	4314      	orrs	r4, r2
 800ae06:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800ae0a:	42ac      	cmp	r4, r5
 800ae0c:	46ab      	mov	fp, r5
 800ae0e:	d909      	bls.n	800ae24 <__ieee754_fmod+0x50>
 800ae10:	f7f5 fc12 	bl	8000638 <__aeabi_dmul>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	f7f5 fd38 	bl	800088c <__aeabi_ddiv>
 800ae1c:	ec41 0b10 	vmov	d0, r0, r1
 800ae20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	45f0      	cmp	r8, lr
 800ae26:	ee10 aa10 	vmov	sl, s0
 800ae2a:	ee10 4a10 	vmov	r4, s0
 800ae2e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ae32:	dc0a      	bgt.n	800ae4a <__ieee754_fmod+0x76>
 800ae34:	dbf2      	blt.n	800ae1c <__ieee754_fmod+0x48>
 800ae36:	4290      	cmp	r0, r2
 800ae38:	d3f0      	bcc.n	800ae1c <__ieee754_fmod+0x48>
 800ae3a:	d106      	bne.n	800ae4a <__ieee754_fmod+0x76>
 800ae3c:	4a6a      	ldr	r2, [pc, #424]	; (800afe8 <__ieee754_fmod+0x214>)
 800ae3e:	0fed      	lsrs	r5, r5, #31
 800ae40:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ae44:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ae48:	e7e8      	b.n	800ae1c <__ieee754_fmod+0x48>
 800ae4a:	ea19 0f0b 	tst.w	r9, fp
 800ae4e:	d14a      	bne.n	800aee6 <__ieee754_fmod+0x112>
 800ae50:	f1b8 0f00 	cmp.w	r8, #0
 800ae54:	d13f      	bne.n	800aed6 <__ieee754_fmod+0x102>
 800ae56:	4965      	ldr	r1, [pc, #404]	; (800afec <__ieee754_fmod+0x218>)
 800ae58:	4653      	mov	r3, sl
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dc38      	bgt.n	800aed0 <__ieee754_fmod+0xfc>
 800ae5e:	4b61      	ldr	r3, [pc, #388]	; (800afe4 <__ieee754_fmod+0x210>)
 800ae60:	4033      	ands	r3, r6
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d14f      	bne.n	800af06 <__ieee754_fmod+0x132>
 800ae66:	f1be 0f00 	cmp.w	lr, #0
 800ae6a:	d144      	bne.n	800aef6 <__ieee754_fmod+0x122>
 800ae6c:	4a5f      	ldr	r2, [pc, #380]	; (800afec <__ieee754_fmod+0x218>)
 800ae6e:	463b      	mov	r3, r7
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dc3d      	bgt.n	800aef0 <__ieee754_fmod+0x11c>
 800ae74:	4b5e      	ldr	r3, [pc, #376]	; (800aff0 <__ieee754_fmod+0x21c>)
 800ae76:	4299      	cmp	r1, r3
 800ae78:	db4a      	blt.n	800af10 <__ieee754_fmod+0x13c>
 800ae7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae82:	485b      	ldr	r0, [pc, #364]	; (800aff0 <__ieee754_fmod+0x21c>)
 800ae84:	4282      	cmp	r2, r0
 800ae86:	db57      	blt.n	800af38 <__ieee754_fmod+0x164>
 800ae88:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ae8c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ae90:	1a89      	subs	r1, r1, r2
 800ae92:	1b98      	subs	r0, r3, r6
 800ae94:	eba4 070c 	sub.w	r7, r4, ip
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	d164      	bne.n	800af66 <__ieee754_fmod+0x192>
 800ae9c:	4564      	cmp	r4, ip
 800ae9e:	bf38      	it	cc
 800aea0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800aea4:	2800      	cmp	r0, #0
 800aea6:	bfa4      	itt	ge
 800aea8:	463c      	movge	r4, r7
 800aeaa:	4603      	movge	r3, r0
 800aeac:	ea53 0104 	orrs.w	r1, r3, r4
 800aeb0:	d0c4      	beq.n	800ae3c <__ieee754_fmod+0x68>
 800aeb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeb6:	db6b      	blt.n	800af90 <__ieee754_fmod+0x1bc>
 800aeb8:	494d      	ldr	r1, [pc, #308]	; (800aff0 <__ieee754_fmod+0x21c>)
 800aeba:	428a      	cmp	r2, r1
 800aebc:	db6e      	blt.n	800af9c <__ieee754_fmod+0x1c8>
 800aebe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aec2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800aec6:	431d      	orrs	r5, r3
 800aec8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800aecc:	4620      	mov	r0, r4
 800aece:	e7a5      	b.n	800ae1c <__ieee754_fmod+0x48>
 800aed0:	3901      	subs	r1, #1
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	e7c1      	b.n	800ae5a <__ieee754_fmod+0x86>
 800aed6:	4946      	ldr	r1, [pc, #280]	; (800aff0 <__ieee754_fmod+0x21c>)
 800aed8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800aedc:	2b00      	cmp	r3, #0
 800aede:	ddbe      	ble.n	800ae5e <__ieee754_fmod+0x8a>
 800aee0:	3901      	subs	r1, #1
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	e7fa      	b.n	800aedc <__ieee754_fmod+0x108>
 800aee6:	ea4f 5128 	mov.w	r1, r8, asr #20
 800aeea:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800aeee:	e7b6      	b.n	800ae5e <__ieee754_fmod+0x8a>
 800aef0:	3a01      	subs	r2, #1
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	e7bc      	b.n	800ae70 <__ieee754_fmod+0x9c>
 800aef6:	4a3e      	ldr	r2, [pc, #248]	; (800aff0 <__ieee754_fmod+0x21c>)
 800aef8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	ddb9      	ble.n	800ae74 <__ieee754_fmod+0xa0>
 800af00:	3a01      	subs	r2, #1
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	e7fa      	b.n	800aefc <__ieee754_fmod+0x128>
 800af06:	ea4f 522e 	mov.w	r2, lr, asr #20
 800af0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800af0e:	e7b1      	b.n	800ae74 <__ieee754_fmod+0xa0>
 800af10:	1a5c      	subs	r4, r3, r1
 800af12:	2c1f      	cmp	r4, #31
 800af14:	dc0a      	bgt.n	800af2c <__ieee754_fmod+0x158>
 800af16:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800af1a:	fa08 f804 	lsl.w	r8, r8, r4
 800af1e:	fa2a f303 	lsr.w	r3, sl, r3
 800af22:	ea43 0308 	orr.w	r3, r3, r8
 800af26:	fa0a f404 	lsl.w	r4, sl, r4
 800af2a:	e7aa      	b.n	800ae82 <__ieee754_fmod+0xae>
 800af2c:	4b31      	ldr	r3, [pc, #196]	; (800aff4 <__ieee754_fmod+0x220>)
 800af2e:	1a5b      	subs	r3, r3, r1
 800af30:	fa0a f303 	lsl.w	r3, sl, r3
 800af34:	2400      	movs	r4, #0
 800af36:	e7a4      	b.n	800ae82 <__ieee754_fmod+0xae>
 800af38:	eba0 0c02 	sub.w	ip, r0, r2
 800af3c:	f1bc 0f1f 	cmp.w	ip, #31
 800af40:	dc0a      	bgt.n	800af58 <__ieee754_fmod+0x184>
 800af42:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800af46:	fa0e fe0c 	lsl.w	lr, lr, ip
 800af4a:	fa27 f606 	lsr.w	r6, r7, r6
 800af4e:	ea46 060e 	orr.w	r6, r6, lr
 800af52:	fa07 fc0c 	lsl.w	ip, r7, ip
 800af56:	e79b      	b.n	800ae90 <__ieee754_fmod+0xbc>
 800af58:	4e26      	ldr	r6, [pc, #152]	; (800aff4 <__ieee754_fmod+0x220>)
 800af5a:	1ab6      	subs	r6, r6, r2
 800af5c:	fa07 f606 	lsl.w	r6, r7, r6
 800af60:	f04f 0c00 	mov.w	ip, #0
 800af64:	e794      	b.n	800ae90 <__ieee754_fmod+0xbc>
 800af66:	4564      	cmp	r4, ip
 800af68:	bf38      	it	cc
 800af6a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800af6e:	2800      	cmp	r0, #0
 800af70:	da05      	bge.n	800af7e <__ieee754_fmod+0x1aa>
 800af72:	0fe0      	lsrs	r0, r4, #31
 800af74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800af78:	0064      	lsls	r4, r4, #1
 800af7a:	3901      	subs	r1, #1
 800af7c:	e789      	b.n	800ae92 <__ieee754_fmod+0xbe>
 800af7e:	ea50 0307 	orrs.w	r3, r0, r7
 800af82:	f43f af5b 	beq.w	800ae3c <__ieee754_fmod+0x68>
 800af86:	0ffb      	lsrs	r3, r7, #31
 800af88:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800af8c:	007c      	lsls	r4, r7, #1
 800af8e:	e7f4      	b.n	800af7a <__ieee754_fmod+0x1a6>
 800af90:	0fe1      	lsrs	r1, r4, #31
 800af92:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800af96:	0064      	lsls	r4, r4, #1
 800af98:	3a01      	subs	r2, #1
 800af9a:	e78a      	b.n	800aeb2 <__ieee754_fmod+0xde>
 800af9c:	1a89      	subs	r1, r1, r2
 800af9e:	2914      	cmp	r1, #20
 800afa0:	dc0a      	bgt.n	800afb8 <__ieee754_fmod+0x1e4>
 800afa2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800afa6:	fa03 f202 	lsl.w	r2, r3, r2
 800afaa:	40cc      	lsrs	r4, r1
 800afac:	4322      	orrs	r2, r4
 800afae:	410b      	asrs	r3, r1
 800afb0:	ea43 0105 	orr.w	r1, r3, r5
 800afb4:	4610      	mov	r0, r2
 800afb6:	e731      	b.n	800ae1c <__ieee754_fmod+0x48>
 800afb8:	291f      	cmp	r1, #31
 800afba:	dc07      	bgt.n	800afcc <__ieee754_fmod+0x1f8>
 800afbc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800afc0:	40cc      	lsrs	r4, r1
 800afc2:	fa03 f202 	lsl.w	r2, r3, r2
 800afc6:	4322      	orrs	r2, r4
 800afc8:	462b      	mov	r3, r5
 800afca:	e7f1      	b.n	800afb0 <__ieee754_fmod+0x1dc>
 800afcc:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800afd0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800afd4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800afd8:	32e2      	adds	r2, #226	; 0xe2
 800afda:	fa43 f202 	asr.w	r2, r3, r2
 800afde:	e7f3      	b.n	800afc8 <__ieee754_fmod+0x1f4>
 800afe0:	7fefffff 	.word	0x7fefffff
 800afe4:	7ff00000 	.word	0x7ff00000
 800afe8:	0800d458 	.word	0x0800d458
 800afec:	fffffbed 	.word	0xfffffbed
 800aff0:	fffffc02 	.word	0xfffffc02
 800aff4:	fffffbe2 	.word	0xfffffbe2

0800aff8 <__ieee754_pow>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ed2d 8b06 	vpush	{d8-d10}
 800b000:	b08d      	sub	sp, #52	; 0x34
 800b002:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b006:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b00a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b00e:	ea56 0100 	orrs.w	r1, r6, r0
 800b012:	ec53 2b10 	vmov	r2, r3, d0
 800b016:	f000 84d1 	beq.w	800b9bc <__ieee754_pow+0x9c4>
 800b01a:	497f      	ldr	r1, [pc, #508]	; (800b218 <__ieee754_pow+0x220>)
 800b01c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b020:	428c      	cmp	r4, r1
 800b022:	ee10 8a10 	vmov	r8, s0
 800b026:	4699      	mov	r9, r3
 800b028:	dc09      	bgt.n	800b03e <__ieee754_pow+0x46>
 800b02a:	d103      	bne.n	800b034 <__ieee754_pow+0x3c>
 800b02c:	b97a      	cbnz	r2, 800b04e <__ieee754_pow+0x56>
 800b02e:	42a6      	cmp	r6, r4
 800b030:	dd02      	ble.n	800b038 <__ieee754_pow+0x40>
 800b032:	e00c      	b.n	800b04e <__ieee754_pow+0x56>
 800b034:	428e      	cmp	r6, r1
 800b036:	dc02      	bgt.n	800b03e <__ieee754_pow+0x46>
 800b038:	428e      	cmp	r6, r1
 800b03a:	d110      	bne.n	800b05e <__ieee754_pow+0x66>
 800b03c:	b178      	cbz	r0, 800b05e <__ieee754_pow+0x66>
 800b03e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b042:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b046:	ea54 0308 	orrs.w	r3, r4, r8
 800b04a:	f000 84b7 	beq.w	800b9bc <__ieee754_pow+0x9c4>
 800b04e:	4873      	ldr	r0, [pc, #460]	; (800b21c <__ieee754_pow+0x224>)
 800b050:	b00d      	add	sp, #52	; 0x34
 800b052:	ecbd 8b06 	vpop	{d8-d10}
 800b056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05a:	f001 bead 	b.w	800cdb8 <nan>
 800b05e:	f1b9 0f00 	cmp.w	r9, #0
 800b062:	da36      	bge.n	800b0d2 <__ieee754_pow+0xda>
 800b064:	496e      	ldr	r1, [pc, #440]	; (800b220 <__ieee754_pow+0x228>)
 800b066:	428e      	cmp	r6, r1
 800b068:	dc51      	bgt.n	800b10e <__ieee754_pow+0x116>
 800b06a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b06e:	428e      	cmp	r6, r1
 800b070:	f340 84af 	ble.w	800b9d2 <__ieee754_pow+0x9da>
 800b074:	1531      	asrs	r1, r6, #20
 800b076:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b07a:	2914      	cmp	r1, #20
 800b07c:	dd0f      	ble.n	800b09e <__ieee754_pow+0xa6>
 800b07e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b082:	fa20 fc01 	lsr.w	ip, r0, r1
 800b086:	fa0c f101 	lsl.w	r1, ip, r1
 800b08a:	4281      	cmp	r1, r0
 800b08c:	f040 84a1 	bne.w	800b9d2 <__ieee754_pow+0x9da>
 800b090:	f00c 0c01 	and.w	ip, ip, #1
 800b094:	f1cc 0102 	rsb	r1, ip, #2
 800b098:	9100      	str	r1, [sp, #0]
 800b09a:	b180      	cbz	r0, 800b0be <__ieee754_pow+0xc6>
 800b09c:	e059      	b.n	800b152 <__ieee754_pow+0x15a>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d155      	bne.n	800b14e <__ieee754_pow+0x156>
 800b0a2:	f1c1 0114 	rsb	r1, r1, #20
 800b0a6:	fa46 fc01 	asr.w	ip, r6, r1
 800b0aa:	fa0c f101 	lsl.w	r1, ip, r1
 800b0ae:	42b1      	cmp	r1, r6
 800b0b0:	f040 848c 	bne.w	800b9cc <__ieee754_pow+0x9d4>
 800b0b4:	f00c 0c01 	and.w	ip, ip, #1
 800b0b8:	f1cc 0102 	rsb	r1, ip, #2
 800b0bc:	9100      	str	r1, [sp, #0]
 800b0be:	4959      	ldr	r1, [pc, #356]	; (800b224 <__ieee754_pow+0x22c>)
 800b0c0:	428e      	cmp	r6, r1
 800b0c2:	d12d      	bne.n	800b120 <__ieee754_pow+0x128>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	da79      	bge.n	800b1bc <__ieee754_pow+0x1c4>
 800b0c8:	4956      	ldr	r1, [pc, #344]	; (800b224 <__ieee754_pow+0x22c>)
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	f7f5 fbde 	bl	800088c <__aeabi_ddiv>
 800b0d0:	e016      	b.n	800b100 <__ieee754_pow+0x108>
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	9100      	str	r1, [sp, #0]
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d13b      	bne.n	800b152 <__ieee754_pow+0x15a>
 800b0da:	494f      	ldr	r1, [pc, #316]	; (800b218 <__ieee754_pow+0x220>)
 800b0dc:	428e      	cmp	r6, r1
 800b0de:	d1ee      	bne.n	800b0be <__ieee754_pow+0xc6>
 800b0e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b0e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b0e8:	ea53 0308 	orrs.w	r3, r3, r8
 800b0ec:	f000 8466 	beq.w	800b9bc <__ieee754_pow+0x9c4>
 800b0f0:	4b4d      	ldr	r3, [pc, #308]	; (800b228 <__ieee754_pow+0x230>)
 800b0f2:	429c      	cmp	r4, r3
 800b0f4:	dd0d      	ble.n	800b112 <__ieee754_pow+0x11a>
 800b0f6:	2f00      	cmp	r7, #0
 800b0f8:	f280 8464 	bge.w	800b9c4 <__ieee754_pow+0x9cc>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	2100      	movs	r1, #0
 800b100:	ec41 0b10 	vmov	d0, r0, r1
 800b104:	b00d      	add	sp, #52	; 0x34
 800b106:	ecbd 8b06 	vpop	{d8-d10}
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	2102      	movs	r1, #2
 800b110:	e7e0      	b.n	800b0d4 <__ieee754_pow+0xdc>
 800b112:	2f00      	cmp	r7, #0
 800b114:	daf2      	bge.n	800b0fc <__ieee754_pow+0x104>
 800b116:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b11a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b11e:	e7ef      	b.n	800b100 <__ieee754_pow+0x108>
 800b120:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b124:	d104      	bne.n	800b130 <__ieee754_pow+0x138>
 800b126:	4610      	mov	r0, r2
 800b128:	4619      	mov	r1, r3
 800b12a:	f7f5 fa85 	bl	8000638 <__aeabi_dmul>
 800b12e:	e7e7      	b.n	800b100 <__ieee754_pow+0x108>
 800b130:	493e      	ldr	r1, [pc, #248]	; (800b22c <__ieee754_pow+0x234>)
 800b132:	428f      	cmp	r7, r1
 800b134:	d10d      	bne.n	800b152 <__ieee754_pow+0x15a>
 800b136:	f1b9 0f00 	cmp.w	r9, #0
 800b13a:	db0a      	blt.n	800b152 <__ieee754_pow+0x15a>
 800b13c:	ec43 2b10 	vmov	d0, r2, r3
 800b140:	b00d      	add	sp, #52	; 0x34
 800b142:	ecbd 8b06 	vpop	{d8-d10}
 800b146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	f000 be83 	b.w	800be54 <__ieee754_sqrt>
 800b14e:	2100      	movs	r1, #0
 800b150:	9100      	str	r1, [sp, #0]
 800b152:	ec43 2b10 	vmov	d0, r2, r3
 800b156:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b15a:	f001 fd99 	bl	800cc90 <fabs>
 800b15e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b162:	ec51 0b10 	vmov	r0, r1, d0
 800b166:	f1b8 0f00 	cmp.w	r8, #0
 800b16a:	d12a      	bne.n	800b1c2 <__ieee754_pow+0x1ca>
 800b16c:	b12c      	cbz	r4, 800b17a <__ieee754_pow+0x182>
 800b16e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b224 <__ieee754_pow+0x22c>
 800b172:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b176:	45e6      	cmp	lr, ip
 800b178:	d123      	bne.n	800b1c2 <__ieee754_pow+0x1ca>
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	da05      	bge.n	800b18a <__ieee754_pow+0x192>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	2000      	movs	r0, #0
 800b184:	4927      	ldr	r1, [pc, #156]	; (800b224 <__ieee754_pow+0x22c>)
 800b186:	f7f5 fb81 	bl	800088c <__aeabi_ddiv>
 800b18a:	f1b9 0f00 	cmp.w	r9, #0
 800b18e:	dab7      	bge.n	800b100 <__ieee754_pow+0x108>
 800b190:	9b00      	ldr	r3, [sp, #0]
 800b192:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b196:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b19a:	4323      	orrs	r3, r4
 800b19c:	d108      	bne.n	800b1b0 <__ieee754_pow+0x1b8>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	f7f5 f88f 	bl	80002c8 <__aeabi_dsub>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	e78d      	b.n	800b0cc <__ieee754_pow+0xd4>
 800b1b0:	9b00      	ldr	r3, [sp, #0]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d1a4      	bne.n	800b100 <__ieee754_pow+0x108>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4619      	mov	r1, r3
 800b1c0:	e79e      	b.n	800b100 <__ieee754_pow+0x108>
 800b1c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b1c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b1ca:	950a      	str	r5, [sp, #40]	; 0x28
 800b1cc:	9d00      	ldr	r5, [sp, #0]
 800b1ce:	46ac      	mov	ip, r5
 800b1d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b1d2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b1d6:	d0e4      	beq.n	800b1a2 <__ieee754_pow+0x1aa>
 800b1d8:	4b15      	ldr	r3, [pc, #84]	; (800b230 <__ieee754_pow+0x238>)
 800b1da:	429e      	cmp	r6, r3
 800b1dc:	f340 80fc 	ble.w	800b3d8 <__ieee754_pow+0x3e0>
 800b1e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b1e4:	429e      	cmp	r6, r3
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <__ieee754_pow+0x230>)
 800b1e8:	dd07      	ble.n	800b1fa <__ieee754_pow+0x202>
 800b1ea:	429c      	cmp	r4, r3
 800b1ec:	dc0a      	bgt.n	800b204 <__ieee754_pow+0x20c>
 800b1ee:	2f00      	cmp	r7, #0
 800b1f0:	da84      	bge.n	800b0fc <__ieee754_pow+0x104>
 800b1f2:	a307      	add	r3, pc, #28	; (adr r3, 800b210 <__ieee754_pow+0x218>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	e795      	b.n	800b126 <__ieee754_pow+0x12e>
 800b1fa:	429c      	cmp	r4, r3
 800b1fc:	dbf7      	blt.n	800b1ee <__ieee754_pow+0x1f6>
 800b1fe:	4b09      	ldr	r3, [pc, #36]	; (800b224 <__ieee754_pow+0x22c>)
 800b200:	429c      	cmp	r4, r3
 800b202:	dd17      	ble.n	800b234 <__ieee754_pow+0x23c>
 800b204:	2f00      	cmp	r7, #0
 800b206:	dcf4      	bgt.n	800b1f2 <__ieee754_pow+0x1fa>
 800b208:	e778      	b.n	800b0fc <__ieee754_pow+0x104>
 800b20a:	bf00      	nop
 800b20c:	f3af 8000 	nop.w
 800b210:	8800759c 	.word	0x8800759c
 800b214:	7e37e43c 	.word	0x7e37e43c
 800b218:	7ff00000 	.word	0x7ff00000
 800b21c:	0800d407 	.word	0x0800d407
 800b220:	433fffff 	.word	0x433fffff
 800b224:	3ff00000 	.word	0x3ff00000
 800b228:	3fefffff 	.word	0x3fefffff
 800b22c:	3fe00000 	.word	0x3fe00000
 800b230:	41e00000 	.word	0x41e00000
 800b234:	4b64      	ldr	r3, [pc, #400]	; (800b3c8 <__ieee754_pow+0x3d0>)
 800b236:	2200      	movs	r2, #0
 800b238:	f7f5 f846 	bl	80002c8 <__aeabi_dsub>
 800b23c:	a356      	add	r3, pc, #344	; (adr r3, 800b398 <__ieee754_pow+0x3a0>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	4604      	mov	r4, r0
 800b244:	460d      	mov	r5, r1
 800b246:	f7f5 f9f7 	bl	8000638 <__aeabi_dmul>
 800b24a:	a355      	add	r3, pc, #340	; (adr r3, 800b3a0 <__ieee754_pow+0x3a8>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	4620      	mov	r0, r4
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 f9ee 	bl	8000638 <__aeabi_dmul>
 800b25c:	4b5b      	ldr	r3, [pc, #364]	; (800b3cc <__ieee754_pow+0x3d4>)
 800b25e:	4682      	mov	sl, r0
 800b260:	468b      	mov	fp, r1
 800b262:	2200      	movs	r2, #0
 800b264:	4620      	mov	r0, r4
 800b266:	4629      	mov	r1, r5
 800b268:	f7f5 f9e6 	bl	8000638 <__aeabi_dmul>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	a14d      	add	r1, pc, #308	; (adr r1, 800b3a8 <__ieee754_pow+0x3b0>)
 800b272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b276:	f7f5 f827 	bl	80002c8 <__aeabi_dsub>
 800b27a:	4622      	mov	r2, r4
 800b27c:	462b      	mov	r3, r5
 800b27e:	f7f5 f9db 	bl	8000638 <__aeabi_dmul>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	2000      	movs	r0, #0
 800b288:	4951      	ldr	r1, [pc, #324]	; (800b3d0 <__ieee754_pow+0x3d8>)
 800b28a:	f7f5 f81d 	bl	80002c8 <__aeabi_dsub>
 800b28e:	4622      	mov	r2, r4
 800b290:	4680      	mov	r8, r0
 800b292:	4689      	mov	r9, r1
 800b294:	462b      	mov	r3, r5
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f5 f9cd 	bl	8000638 <__aeabi_dmul>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f5 f9c7 	bl	8000638 <__aeabi_dmul>
 800b2aa:	a341      	add	r3, pc, #260	; (adr r3, 800b3b0 <__ieee754_pow+0x3b8>)
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f7f5 f9c2 	bl	8000638 <__aeabi_dmul>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	4659      	mov	r1, fp
 800b2bc:	f7f5 f804 	bl	80002c8 <__aeabi_dsub>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4689      	mov	r9, r1
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f4 fffe 	bl	80002cc <__adddf3>
 800b2d0:	2400      	movs	r4, #0
 800b2d2:	4632      	mov	r2, r6
 800b2d4:	463b      	mov	r3, r7
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	460d      	mov	r5, r1
 800b2da:	f7f4 fff5 	bl	80002c8 <__aeabi_dsub>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	f7f4 ffef 	bl	80002c8 <__aeabi_dsub>
 800b2ea:	9b00      	ldr	r3, [sp, #0]
 800b2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	4682      	mov	sl, r0
 800b2f4:	468b      	mov	fp, r1
 800b2f6:	f040 81f1 	bne.w	800b6dc <__ieee754_pow+0x6e4>
 800b2fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b3b8 <__ieee754_pow+0x3c0>
 800b2fe:	eeb0 8a47 	vmov.f32	s16, s14
 800b302:	eef0 8a67 	vmov.f32	s17, s15
 800b306:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b30a:	2600      	movs	r6, #0
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b314:	f7f4 ffd8 	bl	80002c8 <__aeabi_dsub>
 800b318:	4622      	mov	r2, r4
 800b31a:	462b      	mov	r3, r5
 800b31c:	f7f5 f98c 	bl	8000638 <__aeabi_dmul>
 800b320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	4650      	mov	r0, sl
 800b32a:	4659      	mov	r1, fp
 800b32c:	f7f5 f984 	bl	8000638 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f4 ffc8 	bl	80002cc <__adddf3>
 800b33c:	4632      	mov	r2, r6
 800b33e:	463b      	mov	r3, r7
 800b340:	4680      	mov	r8, r0
 800b342:	4689      	mov	r9, r1
 800b344:	4620      	mov	r0, r4
 800b346:	4629      	mov	r1, r5
 800b348:	f7f5 f976 	bl	8000638 <__aeabi_dmul>
 800b34c:	460b      	mov	r3, r1
 800b34e:	4604      	mov	r4, r0
 800b350:	460d      	mov	r5, r1
 800b352:	4602      	mov	r2, r0
 800b354:	4649      	mov	r1, r9
 800b356:	4640      	mov	r0, r8
 800b358:	f7f4 ffb8 	bl	80002cc <__adddf3>
 800b35c:	4b1d      	ldr	r3, [pc, #116]	; (800b3d4 <__ieee754_pow+0x3dc>)
 800b35e:	4299      	cmp	r1, r3
 800b360:	ec45 4b19 	vmov	d9, r4, r5
 800b364:	4606      	mov	r6, r0
 800b366:	460f      	mov	r7, r1
 800b368:	468b      	mov	fp, r1
 800b36a:	f340 82fe 	ble.w	800b96a <__ieee754_pow+0x972>
 800b36e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b372:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b376:	4303      	orrs	r3, r0
 800b378:	f000 81f0 	beq.w	800b75c <__ieee754_pow+0x764>
 800b37c:	a310      	add	r3, pc, #64	; (adr r3, 800b3c0 <__ieee754_pow+0x3c8>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	ec51 0b18 	vmov	r0, r1, d8
 800b386:	f7f5 f957 	bl	8000638 <__aeabi_dmul>
 800b38a:	a30d      	add	r3, pc, #52	; (adr r3, 800b3c0 <__ieee754_pow+0x3c8>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	e6cb      	b.n	800b12a <__ieee754_pow+0x132>
 800b392:	bf00      	nop
 800b394:	f3af 8000 	nop.w
 800b398:	60000000 	.word	0x60000000
 800b39c:	3ff71547 	.word	0x3ff71547
 800b3a0:	f85ddf44 	.word	0xf85ddf44
 800b3a4:	3e54ae0b 	.word	0x3e54ae0b
 800b3a8:	55555555 	.word	0x55555555
 800b3ac:	3fd55555 	.word	0x3fd55555
 800b3b0:	652b82fe 	.word	0x652b82fe
 800b3b4:	3ff71547 	.word	0x3ff71547
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	bff00000 	.word	0xbff00000
 800b3c0:	8800759c 	.word	0x8800759c
 800b3c4:	7e37e43c 	.word	0x7e37e43c
 800b3c8:	3ff00000 	.word	0x3ff00000
 800b3cc:	3fd00000 	.word	0x3fd00000
 800b3d0:	3fe00000 	.word	0x3fe00000
 800b3d4:	408fffff 	.word	0x408fffff
 800b3d8:	4bd7      	ldr	r3, [pc, #860]	; (800b738 <__ieee754_pow+0x740>)
 800b3da:	ea03 0309 	and.w	r3, r3, r9
 800b3de:	2200      	movs	r2, #0
 800b3e0:	b92b      	cbnz	r3, 800b3ee <__ieee754_pow+0x3f6>
 800b3e2:	4bd6      	ldr	r3, [pc, #856]	; (800b73c <__ieee754_pow+0x744>)
 800b3e4:	f7f5 f928 	bl	8000638 <__aeabi_dmul>
 800b3e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	1523      	asrs	r3, r4, #20
 800b3f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b3f4:	4413      	add	r3, r2
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	4bd1      	ldr	r3, [pc, #836]	; (800b740 <__ieee754_pow+0x748>)
 800b3fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b3fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b402:	429c      	cmp	r4, r3
 800b404:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b408:	dd08      	ble.n	800b41c <__ieee754_pow+0x424>
 800b40a:	4bce      	ldr	r3, [pc, #824]	; (800b744 <__ieee754_pow+0x74c>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	f340 8163 	ble.w	800b6d8 <__ieee754_pow+0x6e0>
 800b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b414:	3301      	adds	r3, #1
 800b416:	9309      	str	r3, [sp, #36]	; 0x24
 800b418:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b41c:	2400      	movs	r4, #0
 800b41e:	00e3      	lsls	r3, r4, #3
 800b420:	930b      	str	r3, [sp, #44]	; 0x2c
 800b422:	4bc9      	ldr	r3, [pc, #804]	; (800b748 <__ieee754_pow+0x750>)
 800b424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b428:	ed93 7b00 	vldr	d7, [r3]
 800b42c:	4629      	mov	r1, r5
 800b42e:	ec53 2b17 	vmov	r2, r3, d7
 800b432:	eeb0 8a47 	vmov.f32	s16, s14
 800b436:	eef0 8a67 	vmov.f32	s17, s15
 800b43a:	4682      	mov	sl, r0
 800b43c:	f7f4 ff44 	bl	80002c8 <__aeabi_dsub>
 800b440:	4652      	mov	r2, sl
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	462b      	mov	r3, r5
 800b448:	ec51 0b18 	vmov	r0, r1, d8
 800b44c:	f7f4 ff3e 	bl	80002cc <__adddf3>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	2000      	movs	r0, #0
 800b456:	49bd      	ldr	r1, [pc, #756]	; (800b74c <__ieee754_pow+0x754>)
 800b458:	f7f5 fa18 	bl	800088c <__aeabi_ddiv>
 800b45c:	ec41 0b19 	vmov	d9, r0, r1
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 f8e6 	bl	8000638 <__aeabi_dmul>
 800b46c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b470:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b474:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b478:	2300      	movs	r3, #0
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b480:	46ab      	mov	fp, r5
 800b482:	106d      	asrs	r5, r5, #1
 800b484:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b488:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b48c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b490:	2200      	movs	r2, #0
 800b492:	4640      	mov	r0, r8
 800b494:	4649      	mov	r1, r9
 800b496:	4614      	mov	r4, r2
 800b498:	461d      	mov	r5, r3
 800b49a:	f7f5 f8cd 	bl	8000638 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	f7f4 ff0f 	bl	80002c8 <__aeabi_dsub>
 800b4aa:	ec53 2b18 	vmov	r2, r3, d8
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	f7f4 ff07 	bl	80002c8 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4650      	mov	r0, sl
 800b4c0:	4659      	mov	r1, fp
 800b4c2:	f7f4 ff01 	bl	80002c8 <__aeabi_dsub>
 800b4c6:	4642      	mov	r2, r8
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	f7f5 f8b5 	bl	8000638 <__aeabi_dmul>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	4639      	mov	r1, r7
 800b4d6:	f7f4 fef7 	bl	80002c8 <__aeabi_dsub>
 800b4da:	ec53 2b19 	vmov	r2, r3, d9
 800b4de:	f7f5 f8ab 	bl	8000638 <__aeabi_dmul>
 800b4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4e6:	ec41 0b18 	vmov	d8, r0, r1
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	f7f5 f8a3 	bl	8000638 <__aeabi_dmul>
 800b4f2:	a37d      	add	r3, pc, #500	; (adr r3, 800b6e8 <__ieee754_pow+0x6f0>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	f7f5 f89c 	bl	8000638 <__aeabi_dmul>
 800b500:	a37b      	add	r3, pc, #492	; (adr r3, 800b6f0 <__ieee754_pow+0x6f8>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f4 fee1 	bl	80002cc <__adddf3>
 800b50a:	4622      	mov	r2, r4
 800b50c:	462b      	mov	r3, r5
 800b50e:	f7f5 f893 	bl	8000638 <__aeabi_dmul>
 800b512:	a379      	add	r3, pc, #484	; (adr r3, 800b6f8 <__ieee754_pow+0x700>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f4 fed8 	bl	80002cc <__adddf3>
 800b51c:	4622      	mov	r2, r4
 800b51e:	462b      	mov	r3, r5
 800b520:	f7f5 f88a 	bl	8000638 <__aeabi_dmul>
 800b524:	a376      	add	r3, pc, #472	; (adr r3, 800b700 <__ieee754_pow+0x708>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 fecf 	bl	80002cc <__adddf3>
 800b52e:	4622      	mov	r2, r4
 800b530:	462b      	mov	r3, r5
 800b532:	f7f5 f881 	bl	8000638 <__aeabi_dmul>
 800b536:	a374      	add	r3, pc, #464	; (adr r3, 800b708 <__ieee754_pow+0x710>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 fec6 	bl	80002cc <__adddf3>
 800b540:	4622      	mov	r2, r4
 800b542:	462b      	mov	r3, r5
 800b544:	f7f5 f878 	bl	8000638 <__aeabi_dmul>
 800b548:	a371      	add	r3, pc, #452	; (adr r3, 800b710 <__ieee754_pow+0x718>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f4 febd 	bl	80002cc <__adddf3>
 800b552:	4622      	mov	r2, r4
 800b554:	4606      	mov	r6, r0
 800b556:	460f      	mov	r7, r1
 800b558:	462b      	mov	r3, r5
 800b55a:	4620      	mov	r0, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7f5 f86b 	bl	8000638 <__aeabi_dmul>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 f865 	bl	8000638 <__aeabi_dmul>
 800b56e:	4642      	mov	r2, r8
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	464b      	mov	r3, r9
 800b576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b57a:	f7f4 fea7 	bl	80002cc <__adddf3>
 800b57e:	ec53 2b18 	vmov	r2, r3, d8
 800b582:	f7f5 f859 	bl	8000638 <__aeabi_dmul>
 800b586:	4622      	mov	r2, r4
 800b588:	462b      	mov	r3, r5
 800b58a:	f7f4 fe9f 	bl	80002cc <__adddf3>
 800b58e:	4642      	mov	r2, r8
 800b590:	4682      	mov	sl, r0
 800b592:	468b      	mov	fp, r1
 800b594:	464b      	mov	r3, r9
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f5 f84d 	bl	8000638 <__aeabi_dmul>
 800b59e:	4b6c      	ldr	r3, [pc, #432]	; (800b750 <__ieee754_pow+0x758>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	f7f4 fe91 	bl	80002cc <__adddf3>
 800b5aa:	4652      	mov	r2, sl
 800b5ac:	465b      	mov	r3, fp
 800b5ae:	f7f4 fe8d 	bl	80002cc <__adddf3>
 800b5b2:	9c04      	ldr	r4, [sp, #16]
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4640      	mov	r0, r8
 800b5bc:	4649      	mov	r1, r9
 800b5be:	f7f5 f83b 	bl	8000638 <__aeabi_dmul>
 800b5c2:	4b63      	ldr	r3, [pc, #396]	; (800b750 <__ieee754_pow+0x758>)
 800b5c4:	4680      	mov	r8, r0
 800b5c6:	4689      	mov	r9, r1
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7f4 fe7b 	bl	80002c8 <__aeabi_dsub>
 800b5d2:	4632      	mov	r2, r6
 800b5d4:	463b      	mov	r3, r7
 800b5d6:	f7f4 fe77 	bl	80002c8 <__aeabi_dsub>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	4650      	mov	r0, sl
 800b5e0:	4659      	mov	r1, fp
 800b5e2:	f7f4 fe71 	bl	80002c8 <__aeabi_dsub>
 800b5e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5ea:	f7f5 f825 	bl	8000638 <__aeabi_dmul>
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	ec51 0b18 	vmov	r0, r1, d8
 800b5fa:	f7f5 f81d 	bl	8000638 <__aeabi_dmul>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	4630      	mov	r0, r6
 800b604:	4639      	mov	r1, r7
 800b606:	f7f4 fe61 	bl	80002cc <__adddf3>
 800b60a:	4606      	mov	r6, r0
 800b60c:	460f      	mov	r7, r1
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4640      	mov	r0, r8
 800b614:	4649      	mov	r1, r9
 800b616:	f7f4 fe59 	bl	80002cc <__adddf3>
 800b61a:	9c04      	ldr	r4, [sp, #16]
 800b61c:	a33e      	add	r3, pc, #248	; (adr r3, 800b718 <__ieee754_pow+0x720>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	4620      	mov	r0, r4
 800b624:	460d      	mov	r5, r1
 800b626:	f7f5 f807 	bl	8000638 <__aeabi_dmul>
 800b62a:	4642      	mov	r2, r8
 800b62c:	ec41 0b18 	vmov	d8, r0, r1
 800b630:	464b      	mov	r3, r9
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f7f4 fe47 	bl	80002c8 <__aeabi_dsub>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f4 fe41 	bl	80002c8 <__aeabi_dsub>
 800b646:	a336      	add	r3, pc, #216	; (adr r3, 800b720 <__ieee754_pow+0x728>)
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f7f4 fff4 	bl	8000638 <__aeabi_dmul>
 800b650:	a335      	add	r3, pc, #212	; (adr r3, 800b728 <__ieee754_pow+0x730>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	4606      	mov	r6, r0
 800b658:	460f      	mov	r7, r1
 800b65a:	4620      	mov	r0, r4
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f4 ffeb 	bl	8000638 <__aeabi_dmul>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f4 fe2f 	bl	80002cc <__adddf3>
 800b66e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b670:	4b38      	ldr	r3, [pc, #224]	; (800b754 <__ieee754_pow+0x75c>)
 800b672:	4413      	add	r3, r2
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	f7f4 fe28 	bl	80002cc <__adddf3>
 800b67c:	4682      	mov	sl, r0
 800b67e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b680:	468b      	mov	fp, r1
 800b682:	f7f4 ff6f 	bl	8000564 <__aeabi_i2d>
 800b686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b688:	4b33      	ldr	r3, [pc, #204]	; (800b758 <__ieee754_pow+0x760>)
 800b68a:	4413      	add	r3, r2
 800b68c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b690:	4606      	mov	r6, r0
 800b692:	460f      	mov	r7, r1
 800b694:	4652      	mov	r2, sl
 800b696:	465b      	mov	r3, fp
 800b698:	ec51 0b18 	vmov	r0, r1, d8
 800b69c:	f7f4 fe16 	bl	80002cc <__adddf3>
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	f7f4 fe12 	bl	80002cc <__adddf3>
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	463b      	mov	r3, r7
 800b6ac:	f7f4 fe0e 	bl	80002cc <__adddf3>
 800b6b0:	9c04      	ldr	r4, [sp, #16]
 800b6b2:	4632      	mov	r2, r6
 800b6b4:	463b      	mov	r3, r7
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	460d      	mov	r5, r1
 800b6ba:	f7f4 fe05 	bl	80002c8 <__aeabi_dsub>
 800b6be:	4642      	mov	r2, r8
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	f7f4 fe01 	bl	80002c8 <__aeabi_dsub>
 800b6c6:	ec53 2b18 	vmov	r2, r3, d8
 800b6ca:	f7f4 fdfd 	bl	80002c8 <__aeabi_dsub>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	4659      	mov	r1, fp
 800b6d6:	e606      	b.n	800b2e6 <__ieee754_pow+0x2ee>
 800b6d8:	2401      	movs	r4, #1
 800b6da:	e6a0      	b.n	800b41e <__ieee754_pow+0x426>
 800b6dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b730 <__ieee754_pow+0x738>
 800b6e0:	e60d      	b.n	800b2fe <__ieee754_pow+0x306>
 800b6e2:	bf00      	nop
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	4a454eef 	.word	0x4a454eef
 800b6ec:	3fca7e28 	.word	0x3fca7e28
 800b6f0:	93c9db65 	.word	0x93c9db65
 800b6f4:	3fcd864a 	.word	0x3fcd864a
 800b6f8:	a91d4101 	.word	0xa91d4101
 800b6fc:	3fd17460 	.word	0x3fd17460
 800b700:	518f264d 	.word	0x518f264d
 800b704:	3fd55555 	.word	0x3fd55555
 800b708:	db6fabff 	.word	0xdb6fabff
 800b70c:	3fdb6db6 	.word	0x3fdb6db6
 800b710:	33333303 	.word	0x33333303
 800b714:	3fe33333 	.word	0x3fe33333
 800b718:	e0000000 	.word	0xe0000000
 800b71c:	3feec709 	.word	0x3feec709
 800b720:	dc3a03fd 	.word	0xdc3a03fd
 800b724:	3feec709 	.word	0x3feec709
 800b728:	145b01f5 	.word	0x145b01f5
 800b72c:	be3e2fe0 	.word	0xbe3e2fe0
 800b730:	00000000 	.word	0x00000000
 800b734:	3ff00000 	.word	0x3ff00000
 800b738:	7ff00000 	.word	0x7ff00000
 800b73c:	43400000 	.word	0x43400000
 800b740:	0003988e 	.word	0x0003988e
 800b744:	000bb679 	.word	0x000bb679
 800b748:	0800d468 	.word	0x0800d468
 800b74c:	3ff00000 	.word	0x3ff00000
 800b750:	40080000 	.word	0x40080000
 800b754:	0800d488 	.word	0x0800d488
 800b758:	0800d478 	.word	0x0800d478
 800b75c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ba34 <__ieee754_pow+0xa3c>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	f7f4 fdb1 	bl	80002cc <__adddf3>
 800b76a:	4622      	mov	r2, r4
 800b76c:	ec41 0b1a 	vmov	d10, r0, r1
 800b770:	462b      	mov	r3, r5
 800b772:	4630      	mov	r0, r6
 800b774:	4639      	mov	r1, r7
 800b776:	f7f4 fda7 	bl	80002c8 <__aeabi_dsub>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	ec51 0b1a 	vmov	r0, r1, d10
 800b782:	f7f5 f9e9 	bl	8000b58 <__aeabi_dcmpgt>
 800b786:	2800      	cmp	r0, #0
 800b788:	f47f adf8 	bne.w	800b37c <__ieee754_pow+0x384>
 800b78c:	4aa4      	ldr	r2, [pc, #656]	; (800ba20 <__ieee754_pow+0xa28>)
 800b78e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b792:	4293      	cmp	r3, r2
 800b794:	f340 810b 	ble.w	800b9ae <__ieee754_pow+0x9b6>
 800b798:	151b      	asrs	r3, r3, #20
 800b79a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b79e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b7a2:	fa4a f303 	asr.w	r3, sl, r3
 800b7a6:	445b      	add	r3, fp
 800b7a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b7ac:	4e9d      	ldr	r6, [pc, #628]	; (800ba24 <__ieee754_pow+0xa2c>)
 800b7ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b7b2:	4116      	asrs	r6, r2
 800b7b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	ea23 0106 	bic.w	r1, r3, r6
 800b7be:	f1c2 0214 	rsb	r2, r2, #20
 800b7c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b7c6:	fa4a fa02 	asr.w	sl, sl, r2
 800b7ca:	f1bb 0f00 	cmp.w	fp, #0
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	bfb8      	it	lt
 800b7d8:	f1ca 0a00 	rsblt	sl, sl, #0
 800b7dc:	f7f4 fd74 	bl	80002c8 <__aeabi_dsub>
 800b7e0:	ec41 0b19 	vmov	d9, r0, r1
 800b7e4:	4642      	mov	r2, r8
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	ec51 0b19 	vmov	r0, r1, d9
 800b7ec:	f7f4 fd6e 	bl	80002cc <__adddf3>
 800b7f0:	2400      	movs	r4, #0
 800b7f2:	a379      	add	r3, pc, #484	; (adr r3, 800b9d8 <__ieee754_pow+0x9e0>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	460d      	mov	r5, r1
 800b7fc:	f7f4 ff1c 	bl	8000638 <__aeabi_dmul>
 800b800:	ec53 2b19 	vmov	r2, r3, d9
 800b804:	4606      	mov	r6, r0
 800b806:	460f      	mov	r7, r1
 800b808:	4620      	mov	r0, r4
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fd5c 	bl	80002c8 <__aeabi_dsub>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4640      	mov	r0, r8
 800b816:	4649      	mov	r1, r9
 800b818:	f7f4 fd56 	bl	80002c8 <__aeabi_dsub>
 800b81c:	a370      	add	r3, pc, #448	; (adr r3, 800b9e0 <__ieee754_pow+0x9e8>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f7f4 ff09 	bl	8000638 <__aeabi_dmul>
 800b826:	a370      	add	r3, pc, #448	; (adr r3, 800b9e8 <__ieee754_pow+0x9f0>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	4620      	mov	r0, r4
 800b832:	4629      	mov	r1, r5
 800b834:	f7f4 ff00 	bl	8000638 <__aeabi_dmul>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f4 fd44 	bl	80002cc <__adddf3>
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4630      	mov	r0, r6
 800b84e:	4639      	mov	r1, r7
 800b850:	f7f4 fd3c 	bl	80002cc <__adddf3>
 800b854:	4632      	mov	r2, r6
 800b856:	463b      	mov	r3, r7
 800b858:	4680      	mov	r8, r0
 800b85a:	4689      	mov	r9, r1
 800b85c:	f7f4 fd34 	bl	80002c8 <__aeabi_dsub>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4620      	mov	r0, r4
 800b866:	4629      	mov	r1, r5
 800b868:	f7f4 fd2e 	bl	80002c8 <__aeabi_dsub>
 800b86c:	4642      	mov	r2, r8
 800b86e:	4606      	mov	r6, r0
 800b870:	460f      	mov	r7, r1
 800b872:	464b      	mov	r3, r9
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f4 fede 	bl	8000638 <__aeabi_dmul>
 800b87c:	a35c      	add	r3, pc, #368	; (adr r3, 800b9f0 <__ieee754_pow+0x9f8>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	4604      	mov	r4, r0
 800b884:	460d      	mov	r5, r1
 800b886:	f7f4 fed7 	bl	8000638 <__aeabi_dmul>
 800b88a:	a35b      	add	r3, pc, #364	; (adr r3, 800b9f8 <__ieee754_pow+0xa00>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fd1a 	bl	80002c8 <__aeabi_dsub>
 800b894:	4622      	mov	r2, r4
 800b896:	462b      	mov	r3, r5
 800b898:	f7f4 fece 	bl	8000638 <__aeabi_dmul>
 800b89c:	a358      	add	r3, pc, #352	; (adr r3, 800ba00 <__ieee754_pow+0xa08>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f7f4 fd13 	bl	80002cc <__adddf3>
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	f7f4 fec5 	bl	8000638 <__aeabi_dmul>
 800b8ae:	a356      	add	r3, pc, #344	; (adr r3, 800ba08 <__ieee754_pow+0xa10>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7f4 fd08 	bl	80002c8 <__aeabi_dsub>
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	f7f4 febc 	bl	8000638 <__aeabi_dmul>
 800b8c0:	a353      	add	r3, pc, #332	; (adr r3, 800ba10 <__ieee754_pow+0xa18>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fd01 	bl	80002cc <__adddf3>
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	f7f4 feb3 	bl	8000638 <__aeabi_dmul>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	4649      	mov	r1, r9
 800b8da:	f7f4 fcf5 	bl	80002c8 <__aeabi_dsub>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	460d      	mov	r5, r1
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	f7f4 fea5 	bl	8000638 <__aeabi_dmul>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	ec41 0b19 	vmov	d9, r0, r1
 800b8f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f4 fce4 	bl	80002c8 <__aeabi_dsub>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	ec51 0b19 	vmov	r0, r1, d9
 800b908:	f7f4 ffc0 	bl	800088c <__aeabi_ddiv>
 800b90c:	4632      	mov	r2, r6
 800b90e:	4604      	mov	r4, r0
 800b910:	460d      	mov	r5, r1
 800b912:	463b      	mov	r3, r7
 800b914:	4640      	mov	r0, r8
 800b916:	4649      	mov	r1, r9
 800b918:	f7f4 fe8e 	bl	8000638 <__aeabi_dmul>
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	f7f4 fcd4 	bl	80002cc <__adddf3>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4620      	mov	r0, r4
 800b92a:	4629      	mov	r1, r5
 800b92c:	f7f4 fccc 	bl	80002c8 <__aeabi_dsub>
 800b930:	4642      	mov	r2, r8
 800b932:	464b      	mov	r3, r9
 800b934:	f7f4 fcc8 	bl	80002c8 <__aeabi_dsub>
 800b938:	460b      	mov	r3, r1
 800b93a:	4602      	mov	r2, r0
 800b93c:	493a      	ldr	r1, [pc, #232]	; (800ba28 <__ieee754_pow+0xa30>)
 800b93e:	2000      	movs	r0, #0
 800b940:	f7f4 fcc2 	bl	80002c8 <__aeabi_dsub>
 800b944:	e9cd 0100 	strd	r0, r1, [sp]
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b94e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b952:	da2f      	bge.n	800b9b4 <__ieee754_pow+0x9bc>
 800b954:	4650      	mov	r0, sl
 800b956:	ed9d 0b00 	vldr	d0, [sp]
 800b95a:	f001 fac1 	bl	800cee0 <scalbn>
 800b95e:	ec51 0b10 	vmov	r0, r1, d0
 800b962:	ec53 2b18 	vmov	r2, r3, d8
 800b966:	f7ff bbe0 	b.w	800b12a <__ieee754_pow+0x132>
 800b96a:	4b30      	ldr	r3, [pc, #192]	; (800ba2c <__ieee754_pow+0xa34>)
 800b96c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b970:	429e      	cmp	r6, r3
 800b972:	f77f af0b 	ble.w	800b78c <__ieee754_pow+0x794>
 800b976:	4b2e      	ldr	r3, [pc, #184]	; (800ba30 <__ieee754_pow+0xa38>)
 800b978:	440b      	add	r3, r1
 800b97a:	4303      	orrs	r3, r0
 800b97c:	d00b      	beq.n	800b996 <__ieee754_pow+0x99e>
 800b97e:	a326      	add	r3, pc, #152	; (adr r3, 800ba18 <__ieee754_pow+0xa20>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	ec51 0b18 	vmov	r0, r1, d8
 800b988:	f7f4 fe56 	bl	8000638 <__aeabi_dmul>
 800b98c:	a322      	add	r3, pc, #136	; (adr r3, 800ba18 <__ieee754_pow+0xa20>)
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f7ff bbca 	b.w	800b12a <__ieee754_pow+0x132>
 800b996:	4622      	mov	r2, r4
 800b998:	462b      	mov	r3, r5
 800b99a:	f7f4 fc95 	bl	80002c8 <__aeabi_dsub>
 800b99e:	4642      	mov	r2, r8
 800b9a0:	464b      	mov	r3, r9
 800b9a2:	f7f5 f8cf 	bl	8000b44 <__aeabi_dcmpge>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f aef0 	beq.w	800b78c <__ieee754_pow+0x794>
 800b9ac:	e7e7      	b.n	800b97e <__ieee754_pow+0x986>
 800b9ae:	f04f 0a00 	mov.w	sl, #0
 800b9b2:	e717      	b.n	800b7e4 <__ieee754_pow+0x7ec>
 800b9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	e7d2      	b.n	800b962 <__ieee754_pow+0x96a>
 800b9bc:	491a      	ldr	r1, [pc, #104]	; (800ba28 <__ieee754_pow+0xa30>)
 800b9be:	2000      	movs	r0, #0
 800b9c0:	f7ff bb9e 	b.w	800b100 <__ieee754_pow+0x108>
 800b9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9c8:	f7ff bb9a 	b.w	800b100 <__ieee754_pow+0x108>
 800b9cc:	9000      	str	r0, [sp, #0]
 800b9ce:	f7ff bb76 	b.w	800b0be <__ieee754_pow+0xc6>
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	f7ff bb60 	b.w	800b098 <__ieee754_pow+0xa0>
 800b9d8:	00000000 	.word	0x00000000
 800b9dc:	3fe62e43 	.word	0x3fe62e43
 800b9e0:	fefa39ef 	.word	0xfefa39ef
 800b9e4:	3fe62e42 	.word	0x3fe62e42
 800b9e8:	0ca86c39 	.word	0x0ca86c39
 800b9ec:	be205c61 	.word	0xbe205c61
 800b9f0:	72bea4d0 	.word	0x72bea4d0
 800b9f4:	3e663769 	.word	0x3e663769
 800b9f8:	c5d26bf1 	.word	0xc5d26bf1
 800b9fc:	3ebbbd41 	.word	0x3ebbbd41
 800ba00:	af25de2c 	.word	0xaf25de2c
 800ba04:	3f11566a 	.word	0x3f11566a
 800ba08:	16bebd93 	.word	0x16bebd93
 800ba0c:	3f66c16c 	.word	0x3f66c16c
 800ba10:	5555553e 	.word	0x5555553e
 800ba14:	3fc55555 	.word	0x3fc55555
 800ba18:	c2f8f359 	.word	0xc2f8f359
 800ba1c:	01a56e1f 	.word	0x01a56e1f
 800ba20:	3fe00000 	.word	0x3fe00000
 800ba24:	000fffff 	.word	0x000fffff
 800ba28:	3ff00000 	.word	0x3ff00000
 800ba2c:	4090cbff 	.word	0x4090cbff
 800ba30:	3f6f3400 	.word	0x3f6f3400
 800ba34:	652b82fe 	.word	0x652b82fe
 800ba38:	3c971547 	.word	0x3c971547
 800ba3c:	00000000 	.word	0x00000000

0800ba40 <__ieee754_rem_pio2>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	ed2d 8b02 	vpush	{d8}
 800ba48:	ec55 4b10 	vmov	r4, r5, d0
 800ba4c:	4bca      	ldr	r3, [pc, #808]	; (800bd78 <__ieee754_rem_pio2+0x338>)
 800ba4e:	b08b      	sub	sp, #44	; 0x2c
 800ba50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ba54:	4598      	cmp	r8, r3
 800ba56:	4682      	mov	sl, r0
 800ba58:	9502      	str	r5, [sp, #8]
 800ba5a:	dc08      	bgt.n	800ba6e <__ieee754_rem_pio2+0x2e>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2300      	movs	r3, #0
 800ba60:	ed80 0b00 	vstr	d0, [r0]
 800ba64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba68:	f04f 0b00 	mov.w	fp, #0
 800ba6c:	e028      	b.n	800bac0 <__ieee754_rem_pio2+0x80>
 800ba6e:	4bc3      	ldr	r3, [pc, #780]	; (800bd7c <__ieee754_rem_pio2+0x33c>)
 800ba70:	4598      	cmp	r8, r3
 800ba72:	dc78      	bgt.n	800bb66 <__ieee754_rem_pio2+0x126>
 800ba74:	9b02      	ldr	r3, [sp, #8]
 800ba76:	4ec2      	ldr	r6, [pc, #776]	; (800bd80 <__ieee754_rem_pio2+0x340>)
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	ee10 0a10 	vmov	r0, s0
 800ba7e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bd40 <__ieee754_rem_pio2+0x300>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	4629      	mov	r1, r5
 800ba86:	dd39      	ble.n	800bafc <__ieee754_rem_pio2+0xbc>
 800ba88:	f7f4 fc1e 	bl	80002c8 <__aeabi_dsub>
 800ba8c:	45b0      	cmp	r8, r6
 800ba8e:	4604      	mov	r4, r0
 800ba90:	460d      	mov	r5, r1
 800ba92:	d01b      	beq.n	800bacc <__ieee754_rem_pio2+0x8c>
 800ba94:	a3ac      	add	r3, pc, #688	; (adr r3, 800bd48 <__ieee754_rem_pio2+0x308>)
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f7f4 fc15 	bl	80002c8 <__aeabi_dsub>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	e9ca 2300 	strd	r2, r3, [sl]
 800baa6:	4620      	mov	r0, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	f7f4 fc0d 	bl	80002c8 <__aeabi_dsub>
 800baae:	a3a6      	add	r3, pc, #664	; (adr r3, 800bd48 <__ieee754_rem_pio2+0x308>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	f7f4 fc08 	bl	80002c8 <__aeabi_dsub>
 800bab8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800babc:	f04f 0b01 	mov.w	fp, #1
 800bac0:	4658      	mov	r0, fp
 800bac2:	b00b      	add	sp, #44	; 0x2c
 800bac4:	ecbd 8b02 	vpop	{d8}
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bacc:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd50 <__ieee754_rem_pio2+0x310>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	f7f4 fbf9 	bl	80002c8 <__aeabi_dsub>
 800bad6:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd58 <__ieee754_rem_pio2+0x318>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	f7f4 fbf2 	bl	80002c8 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	e9ca 2300 	strd	r2, r3, [sl]
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	f7f4 fbea 	bl	80002c8 <__aeabi_dsub>
 800baf4:	a398      	add	r3, pc, #608	; (adr r3, 800bd58 <__ieee754_rem_pio2+0x318>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	e7db      	b.n	800bab4 <__ieee754_rem_pio2+0x74>
 800bafc:	f7f4 fbe6 	bl	80002cc <__adddf3>
 800bb00:	45b0      	cmp	r8, r6
 800bb02:	4604      	mov	r4, r0
 800bb04:	460d      	mov	r5, r1
 800bb06:	d016      	beq.n	800bb36 <__ieee754_rem_pio2+0xf6>
 800bb08:	a38f      	add	r3, pc, #572	; (adr r3, 800bd48 <__ieee754_rem_pio2+0x308>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fbdd 	bl	80002cc <__adddf3>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	e9ca 2300 	strd	r2, r3, [sl]
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7f4 fbd3 	bl	80002c8 <__aeabi_dsub>
 800bb22:	a389      	add	r3, pc, #548	; (adr r3, 800bd48 <__ieee754_rem_pio2+0x308>)
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	f7f4 fbd0 	bl	80002cc <__adddf3>
 800bb2c:	f04f 3bff 	mov.w	fp, #4294967295
 800bb30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb34:	e7c4      	b.n	800bac0 <__ieee754_rem_pio2+0x80>
 800bb36:	a386      	add	r3, pc, #536	; (adr r3, 800bd50 <__ieee754_rem_pio2+0x310>)
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f7f4 fbc6 	bl	80002cc <__adddf3>
 800bb40:	a385      	add	r3, pc, #532	; (adr r3, 800bd58 <__ieee754_rem_pio2+0x318>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	4604      	mov	r4, r0
 800bb48:	460d      	mov	r5, r1
 800bb4a:	f7f4 fbbf 	bl	80002cc <__adddf3>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	460b      	mov	r3, r1
 800bb52:	e9ca 2300 	strd	r2, r3, [sl]
 800bb56:	4620      	mov	r0, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	f7f4 fbb5 	bl	80002c8 <__aeabi_dsub>
 800bb5e:	a37e      	add	r3, pc, #504	; (adr r3, 800bd58 <__ieee754_rem_pio2+0x318>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	e7e0      	b.n	800bb28 <__ieee754_rem_pio2+0xe8>
 800bb66:	4b87      	ldr	r3, [pc, #540]	; (800bd84 <__ieee754_rem_pio2+0x344>)
 800bb68:	4598      	cmp	r8, r3
 800bb6a:	f300 80d9 	bgt.w	800bd20 <__ieee754_rem_pio2+0x2e0>
 800bb6e:	f001 f88f 	bl	800cc90 <fabs>
 800bb72:	ec55 4b10 	vmov	r4, r5, d0
 800bb76:	ee10 0a10 	vmov	r0, s0
 800bb7a:	a379      	add	r3, pc, #484	; (adr r3, 800bd60 <__ieee754_rem_pio2+0x320>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 fd59 	bl	8000638 <__aeabi_dmul>
 800bb86:	4b80      	ldr	r3, [pc, #512]	; (800bd88 <__ieee754_rem_pio2+0x348>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f7f4 fb9f 	bl	80002cc <__adddf3>
 800bb8e:	f7f5 f803 	bl	8000b98 <__aeabi_d2iz>
 800bb92:	4683      	mov	fp, r0
 800bb94:	f7f4 fce6 	bl	8000564 <__aeabi_i2d>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	ec43 2b18 	vmov	d8, r2, r3
 800bba0:	a367      	add	r3, pc, #412	; (adr r3, 800bd40 <__ieee754_rem_pio2+0x300>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f7f4 fd47 	bl	8000638 <__aeabi_dmul>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f4 fb89 	bl	80002c8 <__aeabi_dsub>
 800bbb6:	a364      	add	r3, pc, #400	; (adr r3, 800bd48 <__ieee754_rem_pio2+0x308>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	ec51 0b18 	vmov	r0, r1, d8
 800bbc4:	f7f4 fd38 	bl	8000638 <__aeabi_dmul>
 800bbc8:	f1bb 0f1f 	cmp.w	fp, #31
 800bbcc:	4604      	mov	r4, r0
 800bbce:	460d      	mov	r5, r1
 800bbd0:	dc0d      	bgt.n	800bbee <__ieee754_rem_pio2+0x1ae>
 800bbd2:	4b6e      	ldr	r3, [pc, #440]	; (800bd8c <__ieee754_rem_pio2+0x34c>)
 800bbd4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbdc:	4543      	cmp	r3, r8
 800bbde:	d006      	beq.n	800bbee <__ieee754_rem_pio2+0x1ae>
 800bbe0:	4622      	mov	r2, r4
 800bbe2:	462b      	mov	r3, r5
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	f7f4 fb6e 	bl	80002c8 <__aeabi_dsub>
 800bbec:	e00f      	b.n	800bc0e <__ieee754_rem_pio2+0x1ce>
 800bbee:	462b      	mov	r3, r5
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 fb67 	bl	80002c8 <__aeabi_dsub>
 800bbfa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbfe:	9303      	str	r3, [sp, #12]
 800bc00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bc08:	f1b8 0f10 	cmp.w	r8, #16
 800bc0c:	dc02      	bgt.n	800bc14 <__ieee754_rem_pio2+0x1d4>
 800bc0e:	e9ca 0100 	strd	r0, r1, [sl]
 800bc12:	e039      	b.n	800bc88 <__ieee754_rem_pio2+0x248>
 800bc14:	a34e      	add	r3, pc, #312	; (adr r3, 800bd50 <__ieee754_rem_pio2+0x310>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	ec51 0b18 	vmov	r0, r1, d8
 800bc1e:	f7f4 fd0b 	bl	8000638 <__aeabi_dmul>
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	f7f4 fb4b 	bl	80002c8 <__aeabi_dsub>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	4680      	mov	r8, r0
 800bc38:	4689      	mov	r9, r1
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fb43 	bl	80002c8 <__aeabi_dsub>
 800bc42:	4622      	mov	r2, r4
 800bc44:	462b      	mov	r3, r5
 800bc46:	f7f4 fb3f 	bl	80002c8 <__aeabi_dsub>
 800bc4a:	a343      	add	r3, pc, #268	; (adr r3, 800bd58 <__ieee754_rem_pio2+0x318>)
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	ec51 0b18 	vmov	r0, r1, d8
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	462b      	mov	r3, r5
 800bc60:	f7f4 fb32 	bl	80002c8 <__aeabi_dsub>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	4640      	mov	r0, r8
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7f4 fb2a 	bl	80002c8 <__aeabi_dsub>
 800bc74:	9a03      	ldr	r2, [sp, #12]
 800bc76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	2b31      	cmp	r3, #49	; 0x31
 800bc7e:	dc24      	bgt.n	800bcca <__ieee754_rem_pio2+0x28a>
 800bc80:	e9ca 0100 	strd	r0, r1, [sl]
 800bc84:	4646      	mov	r6, r8
 800bc86:	464f      	mov	r7, r9
 800bc88:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4642      	mov	r2, r8
 800bc90:	464b      	mov	r3, r9
 800bc92:	4639      	mov	r1, r7
 800bc94:	f7f4 fb18 	bl	80002c8 <__aeabi_dsub>
 800bc98:	462b      	mov	r3, r5
 800bc9a:	4622      	mov	r2, r4
 800bc9c:	f7f4 fb14 	bl	80002c8 <__aeabi_dsub>
 800bca0:	9b02      	ldr	r3, [sp, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bca8:	f6bf af0a 	bge.w	800bac0 <__ieee754_rem_pio2+0x80>
 800bcac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bcb0:	f8ca 3004 	str.w	r3, [sl, #4]
 800bcb4:	f8ca 8000 	str.w	r8, [sl]
 800bcb8:	f8ca 0008 	str.w	r0, [sl, #8]
 800bcbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcc0:	f8ca 300c 	str.w	r3, [sl, #12]
 800bcc4:	f1cb 0b00 	rsb	fp, fp, #0
 800bcc8:	e6fa      	b.n	800bac0 <__ieee754_rem_pio2+0x80>
 800bcca:	a327      	add	r3, pc, #156	; (adr r3, 800bd68 <__ieee754_rem_pio2+0x328>)
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	ec51 0b18 	vmov	r0, r1, d8
 800bcd4:	f7f4 fcb0 	bl	8000638 <__aeabi_dmul>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4640      	mov	r0, r8
 800bce2:	4649      	mov	r1, r9
 800bce4:	f7f4 faf0 	bl	80002c8 <__aeabi_dsub>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4606      	mov	r6, r0
 800bcee:	460f      	mov	r7, r1
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	f7f4 fae8 	bl	80002c8 <__aeabi_dsub>
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	462b      	mov	r3, r5
 800bcfc:	f7f4 fae4 	bl	80002c8 <__aeabi_dsub>
 800bd00:	a31b      	add	r3, pc, #108	; (adr r3, 800bd70 <__ieee754_rem_pio2+0x330>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	4604      	mov	r4, r0
 800bd08:	460d      	mov	r5, r1
 800bd0a:	ec51 0b18 	vmov	r0, r1, d8
 800bd0e:	f7f4 fc93 	bl	8000638 <__aeabi_dmul>
 800bd12:	4622      	mov	r2, r4
 800bd14:	462b      	mov	r3, r5
 800bd16:	f7f4 fad7 	bl	80002c8 <__aeabi_dsub>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	e75f      	b.n	800bbe0 <__ieee754_rem_pio2+0x1a0>
 800bd20:	4b1b      	ldr	r3, [pc, #108]	; (800bd90 <__ieee754_rem_pio2+0x350>)
 800bd22:	4598      	cmp	r8, r3
 800bd24:	dd36      	ble.n	800bd94 <__ieee754_rem_pio2+0x354>
 800bd26:	ee10 2a10 	vmov	r2, s0
 800bd2a:	462b      	mov	r3, r5
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f7f4 faca 	bl	80002c8 <__aeabi_dsub>
 800bd34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd38:	e9ca 0100 	strd	r0, r1, [sl]
 800bd3c:	e694      	b.n	800ba68 <__ieee754_rem_pio2+0x28>
 800bd3e:	bf00      	nop
 800bd40:	54400000 	.word	0x54400000
 800bd44:	3ff921fb 	.word	0x3ff921fb
 800bd48:	1a626331 	.word	0x1a626331
 800bd4c:	3dd0b461 	.word	0x3dd0b461
 800bd50:	1a600000 	.word	0x1a600000
 800bd54:	3dd0b461 	.word	0x3dd0b461
 800bd58:	2e037073 	.word	0x2e037073
 800bd5c:	3ba3198a 	.word	0x3ba3198a
 800bd60:	6dc9c883 	.word	0x6dc9c883
 800bd64:	3fe45f30 	.word	0x3fe45f30
 800bd68:	2e000000 	.word	0x2e000000
 800bd6c:	3ba3198a 	.word	0x3ba3198a
 800bd70:	252049c1 	.word	0x252049c1
 800bd74:	397b839a 	.word	0x397b839a
 800bd78:	3fe921fb 	.word	0x3fe921fb
 800bd7c:	4002d97b 	.word	0x4002d97b
 800bd80:	3ff921fb 	.word	0x3ff921fb
 800bd84:	413921fb 	.word	0x413921fb
 800bd88:	3fe00000 	.word	0x3fe00000
 800bd8c:	0800d498 	.word	0x0800d498
 800bd90:	7fefffff 	.word	0x7fefffff
 800bd94:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd9c:	ee10 0a10 	vmov	r0, s0
 800bda0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bda4:	ee10 6a10 	vmov	r6, s0
 800bda8:	460f      	mov	r7, r1
 800bdaa:	f7f4 fef5 	bl	8000b98 <__aeabi_d2iz>
 800bdae:	f7f4 fbd9 	bl	8000564 <__aeabi_i2d>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdbe:	f7f4 fa83 	bl	80002c8 <__aeabi_dsub>
 800bdc2:	4b22      	ldr	r3, [pc, #136]	; (800be4c <__ieee754_rem_pio2+0x40c>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f7f4 fc37 	bl	8000638 <__aeabi_dmul>
 800bdca:	460f      	mov	r7, r1
 800bdcc:	4606      	mov	r6, r0
 800bdce:	f7f4 fee3 	bl	8000b98 <__aeabi_d2iz>
 800bdd2:	f7f4 fbc7 	bl	8000564 <__aeabi_i2d>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4630      	mov	r0, r6
 800bddc:	4639      	mov	r1, r7
 800bdde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bde2:	f7f4 fa71 	bl	80002c8 <__aeabi_dsub>
 800bde6:	4b19      	ldr	r3, [pc, #100]	; (800be4c <__ieee754_rem_pio2+0x40c>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	f7f4 fc25 	bl	8000638 <__aeabi_dmul>
 800bdee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bdf2:	ad04      	add	r5, sp, #16
 800bdf4:	f04f 0803 	mov.w	r8, #3
 800bdf8:	46a9      	mov	r9, r5
 800bdfa:	2600      	movs	r6, #0
 800bdfc:	2700      	movs	r7, #0
 800bdfe:	4632      	mov	r2, r6
 800be00:	463b      	mov	r3, r7
 800be02:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800be06:	46c3      	mov	fp, r8
 800be08:	3d08      	subs	r5, #8
 800be0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800be0e:	f7f4 fe7b 	bl	8000b08 <__aeabi_dcmpeq>
 800be12:	2800      	cmp	r0, #0
 800be14:	d1f3      	bne.n	800bdfe <__ieee754_rem_pio2+0x3be>
 800be16:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <__ieee754_rem_pio2+0x410>)
 800be18:	9301      	str	r3, [sp, #4]
 800be1a:	2302      	movs	r3, #2
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	4622      	mov	r2, r4
 800be20:	465b      	mov	r3, fp
 800be22:	4651      	mov	r1, sl
 800be24:	4648      	mov	r0, r9
 800be26:	f000 f993 	bl	800c150 <__kernel_rem_pio2>
 800be2a:	9b02      	ldr	r3, [sp, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	4683      	mov	fp, r0
 800be30:	f6bf ae46 	bge.w	800bac0 <__ieee754_rem_pio2+0x80>
 800be34:	f8da 3004 	ldr.w	r3, [sl, #4]
 800be38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be3c:	f8ca 3004 	str.w	r3, [sl, #4]
 800be40:	f8da 300c 	ldr.w	r3, [sl, #12]
 800be44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be48:	e73a      	b.n	800bcc0 <__ieee754_rem_pio2+0x280>
 800be4a:	bf00      	nop
 800be4c:	41700000 	.word	0x41700000
 800be50:	0800d518 	.word	0x0800d518

0800be54 <__ieee754_sqrt>:
 800be54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be58:	ec55 4b10 	vmov	r4, r5, d0
 800be5c:	4e56      	ldr	r6, [pc, #344]	; (800bfb8 <__ieee754_sqrt+0x164>)
 800be5e:	43ae      	bics	r6, r5
 800be60:	ee10 0a10 	vmov	r0, s0
 800be64:	ee10 3a10 	vmov	r3, s0
 800be68:	4629      	mov	r1, r5
 800be6a:	462a      	mov	r2, r5
 800be6c:	d110      	bne.n	800be90 <__ieee754_sqrt+0x3c>
 800be6e:	ee10 2a10 	vmov	r2, s0
 800be72:	462b      	mov	r3, r5
 800be74:	f7f4 fbe0 	bl	8000638 <__aeabi_dmul>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4620      	mov	r0, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	f7f4 fa24 	bl	80002cc <__adddf3>
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	ec45 4b10 	vmov	d0, r4, r5
 800be8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be90:	2d00      	cmp	r5, #0
 800be92:	dc10      	bgt.n	800beb6 <__ieee754_sqrt+0x62>
 800be94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be98:	4330      	orrs	r0, r6
 800be9a:	d0f5      	beq.n	800be88 <__ieee754_sqrt+0x34>
 800be9c:	b15d      	cbz	r5, 800beb6 <__ieee754_sqrt+0x62>
 800be9e:	ee10 2a10 	vmov	r2, s0
 800bea2:	462b      	mov	r3, r5
 800bea4:	ee10 0a10 	vmov	r0, s0
 800bea8:	f7f4 fa0e 	bl	80002c8 <__aeabi_dsub>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	f7f4 fcec 	bl	800088c <__aeabi_ddiv>
 800beb4:	e7e6      	b.n	800be84 <__ieee754_sqrt+0x30>
 800beb6:	1509      	asrs	r1, r1, #20
 800beb8:	d076      	beq.n	800bfa8 <__ieee754_sqrt+0x154>
 800beba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bebe:	07ce      	lsls	r6, r1, #31
 800bec0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bec4:	bf5e      	ittt	pl
 800bec6:	0fda      	lsrpl	r2, r3, #31
 800bec8:	005b      	lslpl	r3, r3, #1
 800beca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bece:	0fda      	lsrs	r2, r3, #31
 800bed0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bed4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bed8:	2000      	movs	r0, #0
 800beda:	106d      	asrs	r5, r5, #1
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	f04f 0e16 	mov.w	lr, #22
 800bee2:	4684      	mov	ip, r0
 800bee4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bee8:	eb0c 0401 	add.w	r4, ip, r1
 800beec:	4294      	cmp	r4, r2
 800beee:	bfde      	ittt	le
 800bef0:	1b12      	suble	r2, r2, r4
 800bef2:	eb04 0c01 	addle.w	ip, r4, r1
 800bef6:	1840      	addle	r0, r0, r1
 800bef8:	0052      	lsls	r2, r2, #1
 800befa:	f1be 0e01 	subs.w	lr, lr, #1
 800befe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bf02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bf06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf0a:	d1ed      	bne.n	800bee8 <__ieee754_sqrt+0x94>
 800bf0c:	4671      	mov	r1, lr
 800bf0e:	2720      	movs	r7, #32
 800bf10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bf14:	4562      	cmp	r2, ip
 800bf16:	eb04 060e 	add.w	r6, r4, lr
 800bf1a:	dc02      	bgt.n	800bf22 <__ieee754_sqrt+0xce>
 800bf1c:	d113      	bne.n	800bf46 <__ieee754_sqrt+0xf2>
 800bf1e:	429e      	cmp	r6, r3
 800bf20:	d811      	bhi.n	800bf46 <__ieee754_sqrt+0xf2>
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	eb06 0e04 	add.w	lr, r6, r4
 800bf28:	da43      	bge.n	800bfb2 <__ieee754_sqrt+0x15e>
 800bf2a:	f1be 0f00 	cmp.w	lr, #0
 800bf2e:	db40      	blt.n	800bfb2 <__ieee754_sqrt+0x15e>
 800bf30:	f10c 0801 	add.w	r8, ip, #1
 800bf34:	eba2 020c 	sub.w	r2, r2, ip
 800bf38:	429e      	cmp	r6, r3
 800bf3a:	bf88      	it	hi
 800bf3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bf40:	1b9b      	subs	r3, r3, r6
 800bf42:	4421      	add	r1, r4
 800bf44:	46c4      	mov	ip, r8
 800bf46:	0052      	lsls	r2, r2, #1
 800bf48:	3f01      	subs	r7, #1
 800bf4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bf4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf56:	d1dd      	bne.n	800bf14 <__ieee754_sqrt+0xc0>
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	d006      	beq.n	800bf6a <__ieee754_sqrt+0x116>
 800bf5c:	1c4c      	adds	r4, r1, #1
 800bf5e:	bf13      	iteet	ne
 800bf60:	3101      	addne	r1, #1
 800bf62:	3001      	addeq	r0, #1
 800bf64:	4639      	moveq	r1, r7
 800bf66:	f021 0101 	bicne.w	r1, r1, #1
 800bf6a:	1043      	asrs	r3, r0, #1
 800bf6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bf70:	0849      	lsrs	r1, r1, #1
 800bf72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bf76:	07c2      	lsls	r2, r0, #31
 800bf78:	bf48      	it	mi
 800bf7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bf7e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bf82:	460c      	mov	r4, r1
 800bf84:	463d      	mov	r5, r7
 800bf86:	e77f      	b.n	800be88 <__ieee754_sqrt+0x34>
 800bf88:	0ada      	lsrs	r2, r3, #11
 800bf8a:	3815      	subs	r0, #21
 800bf8c:	055b      	lsls	r3, r3, #21
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	d0fa      	beq.n	800bf88 <__ieee754_sqrt+0x134>
 800bf92:	02d7      	lsls	r7, r2, #11
 800bf94:	d50a      	bpl.n	800bfac <__ieee754_sqrt+0x158>
 800bf96:	f1c1 0420 	rsb	r4, r1, #32
 800bf9a:	fa23 f404 	lsr.w	r4, r3, r4
 800bf9e:	1e4d      	subs	r5, r1, #1
 800bfa0:	408b      	lsls	r3, r1
 800bfa2:	4322      	orrs	r2, r4
 800bfa4:	1b41      	subs	r1, r0, r5
 800bfa6:	e788      	b.n	800beba <__ieee754_sqrt+0x66>
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	e7f0      	b.n	800bf8e <__ieee754_sqrt+0x13a>
 800bfac:	0052      	lsls	r2, r2, #1
 800bfae:	3101      	adds	r1, #1
 800bfb0:	e7ef      	b.n	800bf92 <__ieee754_sqrt+0x13e>
 800bfb2:	46e0      	mov	r8, ip
 800bfb4:	e7be      	b.n	800bf34 <__ieee754_sqrt+0xe0>
 800bfb6:	bf00      	nop
 800bfb8:	7ff00000 	.word	0x7ff00000
 800bfbc:	00000000 	.word	0x00000000

0800bfc0 <__kernel_cos>:
 800bfc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	ec57 6b10 	vmov	r6, r7, d0
 800bfc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bfcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bfd0:	ed8d 1b00 	vstr	d1, [sp]
 800bfd4:	da07      	bge.n	800bfe6 <__kernel_cos+0x26>
 800bfd6:	ee10 0a10 	vmov	r0, s0
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 fddc 	bl	8000b98 <__aeabi_d2iz>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f000 8088 	beq.w	800c0f6 <__kernel_cos+0x136>
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 fb23 	bl	8000638 <__aeabi_dmul>
 800bff2:	4b51      	ldr	r3, [pc, #324]	; (800c138 <__kernel_cos+0x178>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	460d      	mov	r5, r1
 800bffa:	f7f4 fb1d 	bl	8000638 <__aeabi_dmul>
 800bffe:	a340      	add	r3, pc, #256	; (adr r3, 800c100 <__kernel_cos+0x140>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	4682      	mov	sl, r0
 800c006:	468b      	mov	fp, r1
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 fb14 	bl	8000638 <__aeabi_dmul>
 800c010:	a33d      	add	r3, pc, #244	; (adr r3, 800c108 <__kernel_cos+0x148>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f7f4 f959 	bl	80002cc <__adddf3>
 800c01a:	4622      	mov	r2, r4
 800c01c:	462b      	mov	r3, r5
 800c01e:	f7f4 fb0b 	bl	8000638 <__aeabi_dmul>
 800c022:	a33b      	add	r3, pc, #236	; (adr r3, 800c110 <__kernel_cos+0x150>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	f7f4 f94e 	bl	80002c8 <__aeabi_dsub>
 800c02c:	4622      	mov	r2, r4
 800c02e:	462b      	mov	r3, r5
 800c030:	f7f4 fb02 	bl	8000638 <__aeabi_dmul>
 800c034:	a338      	add	r3, pc, #224	; (adr r3, 800c118 <__kernel_cos+0x158>)
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f7f4 f947 	bl	80002cc <__adddf3>
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	f7f4 faf9 	bl	8000638 <__aeabi_dmul>
 800c046:	a336      	add	r3, pc, #216	; (adr r3, 800c120 <__kernel_cos+0x160>)
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	f7f4 f93c 	bl	80002c8 <__aeabi_dsub>
 800c050:	4622      	mov	r2, r4
 800c052:	462b      	mov	r3, r5
 800c054:	f7f4 faf0 	bl	8000638 <__aeabi_dmul>
 800c058:	a333      	add	r3, pc, #204	; (adr r3, 800c128 <__kernel_cos+0x168>)
 800c05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05e:	f7f4 f935 	bl	80002cc <__adddf3>
 800c062:	4622      	mov	r2, r4
 800c064:	462b      	mov	r3, r5
 800c066:	f7f4 fae7 	bl	8000638 <__aeabi_dmul>
 800c06a:	4622      	mov	r2, r4
 800c06c:	462b      	mov	r3, r5
 800c06e:	f7f4 fae3 	bl	8000638 <__aeabi_dmul>
 800c072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c076:	4604      	mov	r4, r0
 800c078:	460d      	mov	r5, r1
 800c07a:	4630      	mov	r0, r6
 800c07c:	4639      	mov	r1, r7
 800c07e:	f7f4 fadb 	bl	8000638 <__aeabi_dmul>
 800c082:	460b      	mov	r3, r1
 800c084:	4602      	mov	r2, r0
 800c086:	4629      	mov	r1, r5
 800c088:	4620      	mov	r0, r4
 800c08a:	f7f4 f91d 	bl	80002c8 <__aeabi_dsub>
 800c08e:	4b2b      	ldr	r3, [pc, #172]	; (800c13c <__kernel_cos+0x17c>)
 800c090:	4598      	cmp	r8, r3
 800c092:	4606      	mov	r6, r0
 800c094:	460f      	mov	r7, r1
 800c096:	dc10      	bgt.n	800c0ba <__kernel_cos+0xfa>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4650      	mov	r0, sl
 800c09e:	4659      	mov	r1, fp
 800c0a0:	f7f4 f912 	bl	80002c8 <__aeabi_dsub>
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4926      	ldr	r1, [pc, #152]	; (800c140 <__kernel_cos+0x180>)
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	f7f4 f90c 	bl	80002c8 <__aeabi_dsub>
 800c0b0:	ec41 0b10 	vmov	d0, r0, r1
 800c0b4:	b003      	add	sp, #12
 800c0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ba:	4b22      	ldr	r3, [pc, #136]	; (800c144 <__kernel_cos+0x184>)
 800c0bc:	4920      	ldr	r1, [pc, #128]	; (800c140 <__kernel_cos+0x180>)
 800c0be:	4598      	cmp	r8, r3
 800c0c0:	bfcc      	ite	gt
 800c0c2:	4d21      	ldrgt	r5, [pc, #132]	; (800c148 <__kernel_cos+0x188>)
 800c0c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c0c8:	2400      	movs	r4, #0
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f7f4 f8fa 	bl	80002c8 <__aeabi_dsub>
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	4689      	mov	r9, r1
 800c0da:	462b      	mov	r3, r5
 800c0dc:	4650      	mov	r0, sl
 800c0de:	4659      	mov	r1, fp
 800c0e0:	f7f4 f8f2 	bl	80002c8 <__aeabi_dsub>
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	f7f4 f8ee 	bl	80002c8 <__aeabi_dsub>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	4649      	mov	r1, r9
 800c0f4:	e7da      	b.n	800c0ac <__kernel_cos+0xec>
 800c0f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c130 <__kernel_cos+0x170>
 800c0fa:	e7db      	b.n	800c0b4 <__kernel_cos+0xf4>
 800c0fc:	f3af 8000 	nop.w
 800c100:	be8838d4 	.word	0xbe8838d4
 800c104:	bda8fae9 	.word	0xbda8fae9
 800c108:	bdb4b1c4 	.word	0xbdb4b1c4
 800c10c:	3e21ee9e 	.word	0x3e21ee9e
 800c110:	809c52ad 	.word	0x809c52ad
 800c114:	3e927e4f 	.word	0x3e927e4f
 800c118:	19cb1590 	.word	0x19cb1590
 800c11c:	3efa01a0 	.word	0x3efa01a0
 800c120:	16c15177 	.word	0x16c15177
 800c124:	3f56c16c 	.word	0x3f56c16c
 800c128:	5555554c 	.word	0x5555554c
 800c12c:	3fa55555 	.word	0x3fa55555
 800c130:	00000000 	.word	0x00000000
 800c134:	3ff00000 	.word	0x3ff00000
 800c138:	3fe00000 	.word	0x3fe00000
 800c13c:	3fd33332 	.word	0x3fd33332
 800c140:	3ff00000 	.word	0x3ff00000
 800c144:	3fe90000 	.word	0x3fe90000
 800c148:	3fd20000 	.word	0x3fd20000
 800c14c:	00000000 	.word	0x00000000

0800c150 <__kernel_rem_pio2>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	ed2d 8b02 	vpush	{d8}
 800c158:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c15c:	f112 0f14 	cmn.w	r2, #20
 800c160:	9308      	str	r3, [sp, #32]
 800c162:	9101      	str	r1, [sp, #4]
 800c164:	4bc6      	ldr	r3, [pc, #792]	; (800c480 <__kernel_rem_pio2+0x330>)
 800c166:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c168:	9009      	str	r0, [sp, #36]	; 0x24
 800c16a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c16e:	9304      	str	r3, [sp, #16]
 800c170:	9b08      	ldr	r3, [sp, #32]
 800c172:	f103 33ff 	add.w	r3, r3, #4294967295
 800c176:	bfa8      	it	ge
 800c178:	1ed4      	subge	r4, r2, #3
 800c17a:	9306      	str	r3, [sp, #24]
 800c17c:	bfb2      	itee	lt
 800c17e:	2400      	movlt	r4, #0
 800c180:	2318      	movge	r3, #24
 800c182:	fb94 f4f3 	sdivge	r4, r4, r3
 800c186:	f06f 0317 	mvn.w	r3, #23
 800c18a:	fb04 3303 	mla	r3, r4, r3, r3
 800c18e:	eb03 0a02 	add.w	sl, r3, r2
 800c192:	9b04      	ldr	r3, [sp, #16]
 800c194:	9a06      	ldr	r2, [sp, #24]
 800c196:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c470 <__kernel_rem_pio2+0x320>
 800c19a:	eb03 0802 	add.w	r8, r3, r2
 800c19e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c1a0:	1aa7      	subs	r7, r4, r2
 800c1a2:	ae20      	add	r6, sp, #128	; 0x80
 800c1a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	4545      	cmp	r5, r8
 800c1ac:	dd18      	ble.n	800c1e0 <__kernel_rem_pio2+0x90>
 800c1ae:	9b08      	ldr	r3, [sp, #32]
 800c1b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c1b4:	aa20      	add	r2, sp, #128	; 0x80
 800c1b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c470 <__kernel_rem_pio2+0x320>
 800c1ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c1be:	f1c3 0301 	rsb	r3, r3, #1
 800c1c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c1c6:	9307      	str	r3, [sp, #28]
 800c1c8:	9b07      	ldr	r3, [sp, #28]
 800c1ca:	9a04      	ldr	r2, [sp, #16]
 800c1cc:	4443      	add	r3, r8
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	db2f      	blt.n	800c232 <__kernel_rem_pio2+0xe2>
 800c1d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c1da:	462f      	mov	r7, r5
 800c1dc:	2600      	movs	r6, #0
 800c1de:	e01b      	b.n	800c218 <__kernel_rem_pio2+0xc8>
 800c1e0:	42ef      	cmn	r7, r5
 800c1e2:	d407      	bmi.n	800c1f4 <__kernel_rem_pio2+0xa4>
 800c1e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c1e8:	f7f4 f9bc 	bl	8000564 <__aeabi_i2d>
 800c1ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	e7da      	b.n	800c1aa <__kernel_rem_pio2+0x5a>
 800c1f4:	ec51 0b18 	vmov	r0, r1, d8
 800c1f8:	e7f8      	b.n	800c1ec <__kernel_rem_pio2+0x9c>
 800c1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c202:	f7f4 fa19 	bl	8000638 <__aeabi_dmul>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20e:	f7f4 f85d 	bl	80002cc <__adddf3>
 800c212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c216:	3601      	adds	r6, #1
 800c218:	9b06      	ldr	r3, [sp, #24]
 800c21a:	429e      	cmp	r6, r3
 800c21c:	f1a7 0708 	sub.w	r7, r7, #8
 800c220:	ddeb      	ble.n	800c1fa <__kernel_rem_pio2+0xaa>
 800c222:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c226:	3508      	adds	r5, #8
 800c228:	ecab 7b02 	vstmia	fp!, {d7}
 800c22c:	f108 0801 	add.w	r8, r8, #1
 800c230:	e7ca      	b.n	800c1c8 <__kernel_rem_pio2+0x78>
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	aa0c      	add	r2, sp, #48	; 0x30
 800c236:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c23a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c23c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c23e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c242:	9c04      	ldr	r4, [sp, #16]
 800c244:	930a      	str	r3, [sp, #40]	; 0x28
 800c246:	ab98      	add	r3, sp, #608	; 0x260
 800c248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c24c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c250:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c254:	f8cd b008 	str.w	fp, [sp, #8]
 800c258:	4625      	mov	r5, r4
 800c25a:	2d00      	cmp	r5, #0
 800c25c:	dc78      	bgt.n	800c350 <__kernel_rem_pio2+0x200>
 800c25e:	ec47 6b10 	vmov	d0, r6, r7
 800c262:	4650      	mov	r0, sl
 800c264:	f000 fe3c 	bl	800cee0 <scalbn>
 800c268:	ec57 6b10 	vmov	r6, r7, d0
 800c26c:	2200      	movs	r2, #0
 800c26e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c272:	ee10 0a10 	vmov	r0, s0
 800c276:	4639      	mov	r1, r7
 800c278:	f7f4 f9de 	bl	8000638 <__aeabi_dmul>
 800c27c:	ec41 0b10 	vmov	d0, r0, r1
 800c280:	f000 fd1a 	bl	800ccb8 <floor>
 800c284:	4b7f      	ldr	r3, [pc, #508]	; (800c484 <__kernel_rem_pio2+0x334>)
 800c286:	ec51 0b10 	vmov	r0, r1, d0
 800c28a:	2200      	movs	r2, #0
 800c28c:	f7f4 f9d4 	bl	8000638 <__aeabi_dmul>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f7f4 f816 	bl	80002c8 <__aeabi_dsub>
 800c29c:	460f      	mov	r7, r1
 800c29e:	4606      	mov	r6, r0
 800c2a0:	f7f4 fc7a 	bl	8000b98 <__aeabi_d2iz>
 800c2a4:	9007      	str	r0, [sp, #28]
 800c2a6:	f7f4 f95d 	bl	8000564 <__aeabi_i2d>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	f7f4 f809 	bl	80002c8 <__aeabi_dsub>
 800c2b6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	dd70      	ble.n	800c3a2 <__kernel_rem_pio2+0x252>
 800c2c0:	1e62      	subs	r2, r4, #1
 800c2c2:	ab0c      	add	r3, sp, #48	; 0x30
 800c2c4:	9d07      	ldr	r5, [sp, #28]
 800c2c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c2ca:	f1ca 0118 	rsb	r1, sl, #24
 800c2ce:	fa40 f301 	asr.w	r3, r0, r1
 800c2d2:	441d      	add	r5, r3
 800c2d4:	408b      	lsls	r3, r1
 800c2d6:	1ac0      	subs	r0, r0, r3
 800c2d8:	ab0c      	add	r3, sp, #48	; 0x30
 800c2da:	9507      	str	r5, [sp, #28]
 800c2dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c2e0:	f1ca 0317 	rsb	r3, sl, #23
 800c2e4:	fa40 f303 	asr.w	r3, r0, r3
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	dd66      	ble.n	800c3be <__kernel_rem_pio2+0x26e>
 800c2f0:	9b07      	ldr	r3, [sp, #28]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	9307      	str	r3, [sp, #28]
 800c2f8:	4615      	mov	r5, r2
 800c2fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c2fe:	4294      	cmp	r4, r2
 800c300:	f300 8099 	bgt.w	800c436 <__kernel_rem_pio2+0x2e6>
 800c304:	f1ba 0f00 	cmp.w	sl, #0
 800c308:	dd07      	ble.n	800c31a <__kernel_rem_pio2+0x1ca>
 800c30a:	f1ba 0f01 	cmp.w	sl, #1
 800c30e:	f000 80a5 	beq.w	800c45c <__kernel_rem_pio2+0x30c>
 800c312:	f1ba 0f02 	cmp.w	sl, #2
 800c316:	f000 80c1 	beq.w	800c49c <__kernel_rem_pio2+0x34c>
 800c31a:	9b02      	ldr	r3, [sp, #8]
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d14e      	bne.n	800c3be <__kernel_rem_pio2+0x26e>
 800c320:	4632      	mov	r2, r6
 800c322:	463b      	mov	r3, r7
 800c324:	4958      	ldr	r1, [pc, #352]	; (800c488 <__kernel_rem_pio2+0x338>)
 800c326:	2000      	movs	r0, #0
 800c328:	f7f3 ffce 	bl	80002c8 <__aeabi_dsub>
 800c32c:	4606      	mov	r6, r0
 800c32e:	460f      	mov	r7, r1
 800c330:	2d00      	cmp	r5, #0
 800c332:	d044      	beq.n	800c3be <__kernel_rem_pio2+0x26e>
 800c334:	4650      	mov	r0, sl
 800c336:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c478 <__kernel_rem_pio2+0x328>
 800c33a:	f000 fdd1 	bl	800cee0 <scalbn>
 800c33e:	4630      	mov	r0, r6
 800c340:	4639      	mov	r1, r7
 800c342:	ec53 2b10 	vmov	r2, r3, d0
 800c346:	f7f3 ffbf 	bl	80002c8 <__aeabi_dsub>
 800c34a:	4606      	mov	r6, r0
 800c34c:	460f      	mov	r7, r1
 800c34e:	e036      	b.n	800c3be <__kernel_rem_pio2+0x26e>
 800c350:	4b4e      	ldr	r3, [pc, #312]	; (800c48c <__kernel_rem_pio2+0x33c>)
 800c352:	2200      	movs	r2, #0
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f4 f96e 	bl	8000638 <__aeabi_dmul>
 800c35c:	f7f4 fc1c 	bl	8000b98 <__aeabi_d2iz>
 800c360:	f7f4 f900 	bl	8000564 <__aeabi_i2d>
 800c364:	4b4a      	ldr	r3, [pc, #296]	; (800c490 <__kernel_rem_pio2+0x340>)
 800c366:	2200      	movs	r2, #0
 800c368:	4680      	mov	r8, r0
 800c36a:	4689      	mov	r9, r1
 800c36c:	f7f4 f964 	bl	8000638 <__aeabi_dmul>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4630      	mov	r0, r6
 800c376:	4639      	mov	r1, r7
 800c378:	f7f3 ffa6 	bl	80002c8 <__aeabi_dsub>
 800c37c:	f7f4 fc0c 	bl	8000b98 <__aeabi_d2iz>
 800c380:	9b02      	ldr	r3, [sp, #8]
 800c382:	f843 0b04 	str.w	r0, [r3], #4
 800c386:	3d01      	subs	r5, #1
 800c388:	9302      	str	r3, [sp, #8]
 800c38a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c38c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f3 ff98 	bl	80002cc <__adddf3>
 800c39c:	4606      	mov	r6, r0
 800c39e:	460f      	mov	r7, r1
 800c3a0:	e75b      	b.n	800c25a <__kernel_rem_pio2+0x10a>
 800c3a2:	d105      	bne.n	800c3b0 <__kernel_rem_pio2+0x260>
 800c3a4:	1e63      	subs	r3, r4, #1
 800c3a6:	aa0c      	add	r2, sp, #48	; 0x30
 800c3a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c3ac:	15c3      	asrs	r3, r0, #23
 800c3ae:	e79b      	b.n	800c2e8 <__kernel_rem_pio2+0x198>
 800c3b0:	4b38      	ldr	r3, [pc, #224]	; (800c494 <__kernel_rem_pio2+0x344>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f7f4 fbc6 	bl	8000b44 <__aeabi_dcmpge>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d139      	bne.n	800c430 <__kernel_rem_pio2+0x2e0>
 800c3bc:	9002      	str	r0, [sp, #8]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	f7f4 fb9f 	bl	8000b08 <__aeabi_dcmpeq>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	f000 80b4 	beq.w	800c538 <__kernel_rem_pio2+0x3e8>
 800c3d0:	f104 3bff 	add.w	fp, r4, #4294967295
 800c3d4:	465b      	mov	r3, fp
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	9904      	ldr	r1, [sp, #16]
 800c3da:	428b      	cmp	r3, r1
 800c3dc:	da65      	bge.n	800c4aa <__kernel_rem_pio2+0x35a>
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	d07b      	beq.n	800c4da <__kernel_rem_pio2+0x38a>
 800c3e2:	ab0c      	add	r3, sp, #48	; 0x30
 800c3e4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c3e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 80a0 	beq.w	800c532 <__kernel_rem_pio2+0x3e2>
 800c3f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c478 <__kernel_rem_pio2+0x328>
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	f000 fd72 	bl	800cee0 <scalbn>
 800c3fc:	4f23      	ldr	r7, [pc, #140]	; (800c48c <__kernel_rem_pio2+0x33c>)
 800c3fe:	ec55 4b10 	vmov	r4, r5, d0
 800c402:	46d8      	mov	r8, fp
 800c404:	2600      	movs	r6, #0
 800c406:	f1b8 0f00 	cmp.w	r8, #0
 800c40a:	f280 80cf 	bge.w	800c5ac <__kernel_rem_pio2+0x45c>
 800c40e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c470 <__kernel_rem_pio2+0x320>
 800c412:	465f      	mov	r7, fp
 800c414:	f04f 0800 	mov.w	r8, #0
 800c418:	2f00      	cmp	r7, #0
 800c41a:	f2c0 80fd 	blt.w	800c618 <__kernel_rem_pio2+0x4c8>
 800c41e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c420:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c498 <__kernel_rem_pio2+0x348>
 800c424:	ec55 4b18 	vmov	r4, r5, d8
 800c428:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c42c:	2600      	movs	r6, #0
 800c42e:	e0e5      	b.n	800c5fc <__kernel_rem_pio2+0x4ac>
 800c430:	2302      	movs	r3, #2
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	e75c      	b.n	800c2f0 <__kernel_rem_pio2+0x1a0>
 800c436:	f8db 3000 	ldr.w	r3, [fp]
 800c43a:	b955      	cbnz	r5, 800c452 <__kernel_rem_pio2+0x302>
 800c43c:	b123      	cbz	r3, 800c448 <__kernel_rem_pio2+0x2f8>
 800c43e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c442:	f8cb 3000 	str.w	r3, [fp]
 800c446:	2301      	movs	r3, #1
 800c448:	3201      	adds	r2, #1
 800c44a:	f10b 0b04 	add.w	fp, fp, #4
 800c44e:	461d      	mov	r5, r3
 800c450:	e755      	b.n	800c2fe <__kernel_rem_pio2+0x1ae>
 800c452:	1acb      	subs	r3, r1, r3
 800c454:	f8cb 3000 	str.w	r3, [fp]
 800c458:	462b      	mov	r3, r5
 800c45a:	e7f5      	b.n	800c448 <__kernel_rem_pio2+0x2f8>
 800c45c:	1e62      	subs	r2, r4, #1
 800c45e:	ab0c      	add	r3, sp, #48	; 0x30
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c468:	a90c      	add	r1, sp, #48	; 0x30
 800c46a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c46e:	e754      	b.n	800c31a <__kernel_rem_pio2+0x1ca>
	...
 800c47c:	3ff00000 	.word	0x3ff00000
 800c480:	0800d660 	.word	0x0800d660
 800c484:	40200000 	.word	0x40200000
 800c488:	3ff00000 	.word	0x3ff00000
 800c48c:	3e700000 	.word	0x3e700000
 800c490:	41700000 	.word	0x41700000
 800c494:	3fe00000 	.word	0x3fe00000
 800c498:	0800d620 	.word	0x0800d620
 800c49c:	1e62      	subs	r2, r4, #1
 800c49e:	ab0c      	add	r3, sp, #48	; 0x30
 800c4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c4a8:	e7de      	b.n	800c468 <__kernel_rem_pio2+0x318>
 800c4aa:	a90c      	add	r1, sp, #48	; 0x30
 800c4ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	e790      	b.n	800c3d8 <__kernel_rem_pio2+0x288>
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	d0fa      	beq.n	800c4b6 <__kernel_rem_pio2+0x366>
 800c4c0:	9a08      	ldr	r2, [sp, #32]
 800c4c2:	18e3      	adds	r3, r4, r3
 800c4c4:	18a6      	adds	r6, r4, r2
 800c4c6:	aa20      	add	r2, sp, #128	; 0x80
 800c4c8:	1c65      	adds	r5, r4, #1
 800c4ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c4ce:	9302      	str	r3, [sp, #8]
 800c4d0:	9b02      	ldr	r3, [sp, #8]
 800c4d2:	42ab      	cmp	r3, r5
 800c4d4:	da04      	bge.n	800c4e0 <__kernel_rem_pio2+0x390>
 800c4d6:	461c      	mov	r4, r3
 800c4d8:	e6b5      	b.n	800c246 <__kernel_rem_pio2+0xf6>
 800c4da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e7eb      	b.n	800c4b8 <__kernel_rem_pio2+0x368>
 800c4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4e6:	f7f4 f83d 	bl	8000564 <__aeabi_i2d>
 800c4ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f0:	46b3      	mov	fp, r6
 800c4f2:	461c      	mov	r4, r3
 800c4f4:	2700      	movs	r7, #0
 800c4f6:	f04f 0800 	mov.w	r8, #0
 800c4fa:	f04f 0900 	mov.w	r9, #0
 800c4fe:	9b06      	ldr	r3, [sp, #24]
 800c500:	429f      	cmp	r7, r3
 800c502:	dd06      	ble.n	800c512 <__kernel_rem_pio2+0x3c2>
 800c504:	ab70      	add	r3, sp, #448	; 0x1c0
 800c506:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c50a:	e9c3 8900 	strd	r8, r9, [r3]
 800c50e:	3501      	adds	r5, #1
 800c510:	e7de      	b.n	800c4d0 <__kernel_rem_pio2+0x380>
 800c512:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c516:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c51a:	f7f4 f88d 	bl	8000638 <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4640      	mov	r0, r8
 800c524:	4649      	mov	r1, r9
 800c526:	f7f3 fed1 	bl	80002cc <__adddf3>
 800c52a:	3701      	adds	r7, #1
 800c52c:	4680      	mov	r8, r0
 800c52e:	4689      	mov	r9, r1
 800c530:	e7e5      	b.n	800c4fe <__kernel_rem_pio2+0x3ae>
 800c532:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c536:	e754      	b.n	800c3e2 <__kernel_rem_pio2+0x292>
 800c538:	ec47 6b10 	vmov	d0, r6, r7
 800c53c:	f1ca 0000 	rsb	r0, sl, #0
 800c540:	f000 fcce 	bl	800cee0 <scalbn>
 800c544:	ec57 6b10 	vmov	r6, r7, d0
 800c548:	4b9f      	ldr	r3, [pc, #636]	; (800c7c8 <__kernel_rem_pio2+0x678>)
 800c54a:	ee10 0a10 	vmov	r0, s0
 800c54e:	2200      	movs	r2, #0
 800c550:	4639      	mov	r1, r7
 800c552:	f7f4 faf7 	bl	8000b44 <__aeabi_dcmpge>
 800c556:	b300      	cbz	r0, 800c59a <__kernel_rem_pio2+0x44a>
 800c558:	4b9c      	ldr	r3, [pc, #624]	; (800c7cc <__kernel_rem_pio2+0x67c>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	4630      	mov	r0, r6
 800c55e:	4639      	mov	r1, r7
 800c560:	f7f4 f86a 	bl	8000638 <__aeabi_dmul>
 800c564:	f7f4 fb18 	bl	8000b98 <__aeabi_d2iz>
 800c568:	4605      	mov	r5, r0
 800c56a:	f7f3 fffb 	bl	8000564 <__aeabi_i2d>
 800c56e:	4b96      	ldr	r3, [pc, #600]	; (800c7c8 <__kernel_rem_pio2+0x678>)
 800c570:	2200      	movs	r2, #0
 800c572:	f7f4 f861 	bl	8000638 <__aeabi_dmul>
 800c576:	460b      	mov	r3, r1
 800c578:	4602      	mov	r2, r0
 800c57a:	4639      	mov	r1, r7
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7f3 fea3 	bl	80002c8 <__aeabi_dsub>
 800c582:	f7f4 fb09 	bl	8000b98 <__aeabi_d2iz>
 800c586:	f104 0b01 	add.w	fp, r4, #1
 800c58a:	ab0c      	add	r3, sp, #48	; 0x30
 800c58c:	f10a 0a18 	add.w	sl, sl, #24
 800c590:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c594:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c598:	e72b      	b.n	800c3f2 <__kernel_rem_pio2+0x2a2>
 800c59a:	4630      	mov	r0, r6
 800c59c:	4639      	mov	r1, r7
 800c59e:	f7f4 fafb 	bl	8000b98 <__aeabi_d2iz>
 800c5a2:	ab0c      	add	r3, sp, #48	; 0x30
 800c5a4:	46a3      	mov	fp, r4
 800c5a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c5aa:	e722      	b.n	800c3f2 <__kernel_rem_pio2+0x2a2>
 800c5ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800c5ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c5b2:	ab0c      	add	r3, sp, #48	; 0x30
 800c5b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c5b8:	f7f3 ffd4 	bl	8000564 <__aeabi_i2d>
 800c5bc:	4622      	mov	r2, r4
 800c5be:	462b      	mov	r3, r5
 800c5c0:	f7f4 f83a 	bl	8000638 <__aeabi_dmul>
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	e9c9 0100 	strd	r0, r1, [r9]
 800c5ca:	463b      	mov	r3, r7
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f4 f832 	bl	8000638 <__aeabi_dmul>
 800c5d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5d8:	4604      	mov	r4, r0
 800c5da:	460d      	mov	r5, r1
 800c5dc:	e713      	b.n	800c406 <__kernel_rem_pio2+0x2b6>
 800c5de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c5e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c5e6:	f7f4 f827 	bl	8000638 <__aeabi_dmul>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	f7f3 fe6b 	bl	80002cc <__adddf3>
 800c5f6:	3601      	adds	r6, #1
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	9b04      	ldr	r3, [sp, #16]
 800c5fe:	429e      	cmp	r6, r3
 800c600:	dc01      	bgt.n	800c606 <__kernel_rem_pio2+0x4b6>
 800c602:	45b0      	cmp	r8, r6
 800c604:	daeb      	bge.n	800c5de <__kernel_rem_pio2+0x48e>
 800c606:	ab48      	add	r3, sp, #288	; 0x120
 800c608:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c60c:	e9c3 4500 	strd	r4, r5, [r3]
 800c610:	3f01      	subs	r7, #1
 800c612:	f108 0801 	add.w	r8, r8, #1
 800c616:	e6ff      	b.n	800c418 <__kernel_rem_pio2+0x2c8>
 800c618:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	dc0b      	bgt.n	800c636 <__kernel_rem_pio2+0x4e6>
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dc6e      	bgt.n	800c700 <__kernel_rem_pio2+0x5b0>
 800c622:	d045      	beq.n	800c6b0 <__kernel_rem_pio2+0x560>
 800c624:	9b07      	ldr	r3, [sp, #28]
 800c626:	f003 0007 	and.w	r0, r3, #7
 800c62a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c62e:	ecbd 8b02 	vpop	{d8}
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d1f3      	bne.n	800c624 <__kernel_rem_pio2+0x4d4>
 800c63c:	ab48      	add	r3, sp, #288	; 0x120
 800c63e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c642:	46d0      	mov	r8, sl
 800c644:	46d9      	mov	r9, fp
 800c646:	f1b9 0f00 	cmp.w	r9, #0
 800c64a:	f1a8 0808 	sub.w	r8, r8, #8
 800c64e:	dc64      	bgt.n	800c71a <__kernel_rem_pio2+0x5ca>
 800c650:	465c      	mov	r4, fp
 800c652:	2c01      	cmp	r4, #1
 800c654:	f1aa 0a08 	sub.w	sl, sl, #8
 800c658:	dc7e      	bgt.n	800c758 <__kernel_rem_pio2+0x608>
 800c65a:	2000      	movs	r0, #0
 800c65c:	2100      	movs	r1, #0
 800c65e:	f1bb 0f01 	cmp.w	fp, #1
 800c662:	f300 8097 	bgt.w	800c794 <__kernel_rem_pio2+0x644>
 800c666:	9b02      	ldr	r3, [sp, #8]
 800c668:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c66c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 8099 	bne.w	800c7a8 <__kernel_rem_pio2+0x658>
 800c676:	9b01      	ldr	r3, [sp, #4]
 800c678:	e9c3 5600 	strd	r5, r6, [r3]
 800c67c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c680:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c684:	e7ce      	b.n	800c624 <__kernel_rem_pio2+0x4d4>
 800c686:	ab48      	add	r3, sp, #288	; 0x120
 800c688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f3 fe1c 	bl	80002cc <__adddf3>
 800c694:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c698:	f1bb 0f00 	cmp.w	fp, #0
 800c69c:	daf3      	bge.n	800c686 <__kernel_rem_pio2+0x536>
 800c69e:	9b02      	ldr	r3, [sp, #8]
 800c6a0:	b113      	cbz	r3, 800c6a8 <__kernel_rem_pio2+0x558>
 800c6a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	e9c3 0100 	strd	r0, r1, [r3]
 800c6ae:	e7b9      	b.n	800c624 <__kernel_rem_pio2+0x4d4>
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	e7f0      	b.n	800c698 <__kernel_rem_pio2+0x548>
 800c6b6:	ab48      	add	r3, sp, #288	; 0x120
 800c6b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7f3 fe04 	bl	80002cc <__adddf3>
 800c6c4:	3c01      	subs	r4, #1
 800c6c6:	2c00      	cmp	r4, #0
 800c6c8:	daf5      	bge.n	800c6b6 <__kernel_rem_pio2+0x566>
 800c6ca:	9b02      	ldr	r3, [sp, #8]
 800c6cc:	b1e3      	cbz	r3, 800c708 <__kernel_rem_pio2+0x5b8>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d4:	9c01      	ldr	r4, [sp, #4]
 800c6d6:	e9c4 2300 	strd	r2, r3, [r4]
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c6e2:	f7f3 fdf1 	bl	80002c8 <__aeabi_dsub>
 800c6e6:	ad4a      	add	r5, sp, #296	; 0x128
 800c6e8:	2401      	movs	r4, #1
 800c6ea:	45a3      	cmp	fp, r4
 800c6ec:	da0f      	bge.n	800c70e <__kernel_rem_pio2+0x5be>
 800c6ee:	9b02      	ldr	r3, [sp, #8]
 800c6f0:	b113      	cbz	r3, 800c6f8 <__kernel_rem_pio2+0x5a8>
 800c6f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	9b01      	ldr	r3, [sp, #4]
 800c6fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c6fe:	e791      	b.n	800c624 <__kernel_rem_pio2+0x4d4>
 800c700:	465c      	mov	r4, fp
 800c702:	2000      	movs	r0, #0
 800c704:	2100      	movs	r1, #0
 800c706:	e7de      	b.n	800c6c6 <__kernel_rem_pio2+0x576>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	e7e2      	b.n	800c6d4 <__kernel_rem_pio2+0x584>
 800c70e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c712:	f7f3 fddb 	bl	80002cc <__adddf3>
 800c716:	3401      	adds	r4, #1
 800c718:	e7e7      	b.n	800c6ea <__kernel_rem_pio2+0x59a>
 800c71a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c71e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c722:	4620      	mov	r0, r4
 800c724:	4632      	mov	r2, r6
 800c726:	463b      	mov	r3, r7
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f3 fdcf 	bl	80002cc <__adddf3>
 800c72e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	4620      	mov	r0, r4
 800c738:	4629      	mov	r1, r5
 800c73a:	f7f3 fdc5 	bl	80002c8 <__aeabi_dsub>
 800c73e:	4632      	mov	r2, r6
 800c740:	463b      	mov	r3, r7
 800c742:	f7f3 fdc3 	bl	80002cc <__adddf3>
 800c746:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c74a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c74e:	ed88 7b00 	vstr	d7, [r8]
 800c752:	f109 39ff 	add.w	r9, r9, #4294967295
 800c756:	e776      	b.n	800c646 <__kernel_rem_pio2+0x4f6>
 800c758:	e9da 8900 	ldrd	r8, r9, [sl]
 800c75c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c760:	4640      	mov	r0, r8
 800c762:	4632      	mov	r2, r6
 800c764:	463b      	mov	r3, r7
 800c766:	4649      	mov	r1, r9
 800c768:	f7f3 fdb0 	bl	80002cc <__adddf3>
 800c76c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	4640      	mov	r0, r8
 800c776:	4649      	mov	r1, r9
 800c778:	f7f3 fda6 	bl	80002c8 <__aeabi_dsub>
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	f7f3 fda4 	bl	80002cc <__adddf3>
 800c784:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c788:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c78c:	ed8a 7b00 	vstr	d7, [sl]
 800c790:	3c01      	subs	r4, #1
 800c792:	e75e      	b.n	800c652 <__kernel_rem_pio2+0x502>
 800c794:	ab48      	add	r3, sp, #288	; 0x120
 800c796:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f3 fd95 	bl	80002cc <__adddf3>
 800c7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7a6:	e75a      	b.n	800c65e <__kernel_rem_pio2+0x50e>
 800c7a8:	9b01      	ldr	r3, [sp, #4]
 800c7aa:	9a01      	ldr	r2, [sp, #4]
 800c7ac:	601d      	str	r5, [r3, #0]
 800c7ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c7b2:	605c      	str	r4, [r3, #4]
 800c7b4:	609f      	str	r7, [r3, #8]
 800c7b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c7ba:	60d3      	str	r3, [r2, #12]
 800c7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c0:	6110      	str	r0, [r2, #16]
 800c7c2:	6153      	str	r3, [r2, #20]
 800c7c4:	e72e      	b.n	800c624 <__kernel_rem_pio2+0x4d4>
 800c7c6:	bf00      	nop
 800c7c8:	41700000 	.word	0x41700000
 800c7cc:	3e700000 	.word	0x3e700000

0800c7d0 <__kernel_sin>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	ed2d 8b04 	vpush	{d8-d9}
 800c7d8:	eeb0 8a41 	vmov.f32	s16, s2
 800c7dc:	eef0 8a61 	vmov.f32	s17, s3
 800c7e0:	ec55 4b10 	vmov	r4, r5, d0
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c7ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c7ee:	9001      	str	r0, [sp, #4]
 800c7f0:	da06      	bge.n	800c800 <__kernel_sin+0x30>
 800c7f2:	ee10 0a10 	vmov	r0, s0
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f4 f9ce 	bl	8000b98 <__aeabi_d2iz>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d051      	beq.n	800c8a4 <__kernel_sin+0xd4>
 800c800:	4622      	mov	r2, r4
 800c802:	462b      	mov	r3, r5
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 ff16 	bl	8000638 <__aeabi_dmul>
 800c80c:	4682      	mov	sl, r0
 800c80e:	468b      	mov	fp, r1
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4620      	mov	r0, r4
 800c816:	4629      	mov	r1, r5
 800c818:	f7f3 ff0e 	bl	8000638 <__aeabi_dmul>
 800c81c:	a341      	add	r3, pc, #260	; (adr r3, 800c924 <__kernel_sin+0x154>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	4680      	mov	r8, r0
 800c824:	4689      	mov	r9, r1
 800c826:	4650      	mov	r0, sl
 800c828:	4659      	mov	r1, fp
 800c82a:	f7f3 ff05 	bl	8000638 <__aeabi_dmul>
 800c82e:	a33f      	add	r3, pc, #252	; (adr r3, 800c92c <__kernel_sin+0x15c>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fd48 	bl	80002c8 <__aeabi_dsub>
 800c838:	4652      	mov	r2, sl
 800c83a:	465b      	mov	r3, fp
 800c83c:	f7f3 fefc 	bl	8000638 <__aeabi_dmul>
 800c840:	a33c      	add	r3, pc, #240	; (adr r3, 800c934 <__kernel_sin+0x164>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fd41 	bl	80002cc <__adddf3>
 800c84a:	4652      	mov	r2, sl
 800c84c:	465b      	mov	r3, fp
 800c84e:	f7f3 fef3 	bl	8000638 <__aeabi_dmul>
 800c852:	a33a      	add	r3, pc, #232	; (adr r3, 800c93c <__kernel_sin+0x16c>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fd36 	bl	80002c8 <__aeabi_dsub>
 800c85c:	4652      	mov	r2, sl
 800c85e:	465b      	mov	r3, fp
 800c860:	f7f3 feea 	bl	8000638 <__aeabi_dmul>
 800c864:	a337      	add	r3, pc, #220	; (adr r3, 800c944 <__kernel_sin+0x174>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fd2f 	bl	80002cc <__adddf3>
 800c86e:	9b01      	ldr	r3, [sp, #4]
 800c870:	4606      	mov	r6, r0
 800c872:	460f      	mov	r7, r1
 800c874:	b9eb      	cbnz	r3, 800c8b2 <__kernel_sin+0xe2>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4650      	mov	r0, sl
 800c87c:	4659      	mov	r1, fp
 800c87e:	f7f3 fedb 	bl	8000638 <__aeabi_dmul>
 800c882:	a325      	add	r3, pc, #148	; (adr r3, 800c918 <__kernel_sin+0x148>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 fd1e 	bl	80002c8 <__aeabi_dsub>
 800c88c:	4642      	mov	r2, r8
 800c88e:	464b      	mov	r3, r9
 800c890:	f7f3 fed2 	bl	8000638 <__aeabi_dmul>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4620      	mov	r0, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 fd16 	bl	80002cc <__adddf3>
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	460d      	mov	r5, r1
 800c8a4:	ec45 4b10 	vmov	d0, r4, r5
 800c8a8:	b003      	add	sp, #12
 800c8aa:	ecbd 8b04 	vpop	{d8-d9}
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	4b1b      	ldr	r3, [pc, #108]	; (800c920 <__kernel_sin+0x150>)
 800c8b4:	ec51 0b18 	vmov	r0, r1, d8
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f7f3 febd 	bl	8000638 <__aeabi_dmul>
 800c8be:	4632      	mov	r2, r6
 800c8c0:	ec41 0b19 	vmov	d9, r0, r1
 800c8c4:	463b      	mov	r3, r7
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	f7f3 feb5 	bl	8000638 <__aeabi_dmul>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	ec51 0b19 	vmov	r0, r1, d9
 800c8d6:	f7f3 fcf7 	bl	80002c8 <__aeabi_dsub>
 800c8da:	4652      	mov	r2, sl
 800c8dc:	465b      	mov	r3, fp
 800c8de:	f7f3 feab 	bl	8000638 <__aeabi_dmul>
 800c8e2:	ec53 2b18 	vmov	r2, r3, d8
 800c8e6:	f7f3 fcef 	bl	80002c8 <__aeabi_dsub>
 800c8ea:	a30b      	add	r3, pc, #44	; (adr r3, 800c918 <__kernel_sin+0x148>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	460f      	mov	r7, r1
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	f7f3 fe9e 	bl	8000638 <__aeabi_dmul>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	4630      	mov	r0, r6
 800c902:	4639      	mov	r1, r7
 800c904:	f7f3 fce2 	bl	80002cc <__adddf3>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fcda 	bl	80002c8 <__aeabi_dsub>
 800c914:	e7c4      	b.n	800c8a0 <__kernel_sin+0xd0>
 800c916:	bf00      	nop
 800c918:	55555549 	.word	0x55555549
 800c91c:	3fc55555 	.word	0x3fc55555
 800c920:	3fe00000 	.word	0x3fe00000
 800c924:	5acfd57c 	.word	0x5acfd57c
 800c928:	3de5d93a 	.word	0x3de5d93a
 800c92c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c930:	3e5ae5e6 	.word	0x3e5ae5e6
 800c934:	57b1fe7d 	.word	0x57b1fe7d
 800c938:	3ec71de3 	.word	0x3ec71de3
 800c93c:	19c161d5 	.word	0x19c161d5
 800c940:	3f2a01a0 	.word	0x3f2a01a0
 800c944:	1110f8a6 	.word	0x1110f8a6
 800c948:	3f811111 	.word	0x3f811111
 800c94c:	00000000 	.word	0x00000000

0800c950 <atan>:
 800c950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	ec55 4b10 	vmov	r4, r5, d0
 800c958:	4bc3      	ldr	r3, [pc, #780]	; (800cc68 <atan+0x318>)
 800c95a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c95e:	429e      	cmp	r6, r3
 800c960:	46ab      	mov	fp, r5
 800c962:	dd18      	ble.n	800c996 <atan+0x46>
 800c964:	4bc1      	ldr	r3, [pc, #772]	; (800cc6c <atan+0x31c>)
 800c966:	429e      	cmp	r6, r3
 800c968:	dc01      	bgt.n	800c96e <atan+0x1e>
 800c96a:	d109      	bne.n	800c980 <atan+0x30>
 800c96c:	b144      	cbz	r4, 800c980 <atan+0x30>
 800c96e:	4622      	mov	r2, r4
 800c970:	462b      	mov	r3, r5
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f3 fca9 	bl	80002cc <__adddf3>
 800c97a:	4604      	mov	r4, r0
 800c97c:	460d      	mov	r5, r1
 800c97e:	e006      	b.n	800c98e <atan+0x3e>
 800c980:	f1bb 0f00 	cmp.w	fp, #0
 800c984:	f300 8131 	bgt.w	800cbea <atan+0x29a>
 800c988:	a59b      	add	r5, pc, #620	; (adr r5, 800cbf8 <atan+0x2a8>)
 800c98a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c98e:	ec45 4b10 	vmov	d0, r4, r5
 800c992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c996:	4bb6      	ldr	r3, [pc, #728]	; (800cc70 <atan+0x320>)
 800c998:	429e      	cmp	r6, r3
 800c99a:	dc14      	bgt.n	800c9c6 <atan+0x76>
 800c99c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c9a0:	429e      	cmp	r6, r3
 800c9a2:	dc0d      	bgt.n	800c9c0 <atan+0x70>
 800c9a4:	a396      	add	r3, pc, #600	; (adr r3, 800cc00 <atan+0x2b0>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	ee10 0a10 	vmov	r0, s0
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	f7f3 fc8c 	bl	80002cc <__adddf3>
 800c9b4:	4baf      	ldr	r3, [pc, #700]	; (800cc74 <atan+0x324>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f7f4 f8ce 	bl	8000b58 <__aeabi_dcmpgt>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d1e6      	bne.n	800c98e <atan+0x3e>
 800c9c0:	f04f 3aff 	mov.w	sl, #4294967295
 800c9c4:	e02b      	b.n	800ca1e <atan+0xce>
 800c9c6:	f000 f963 	bl	800cc90 <fabs>
 800c9ca:	4bab      	ldr	r3, [pc, #684]	; (800cc78 <atan+0x328>)
 800c9cc:	429e      	cmp	r6, r3
 800c9ce:	ec55 4b10 	vmov	r4, r5, d0
 800c9d2:	f300 80bf 	bgt.w	800cb54 <atan+0x204>
 800c9d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c9da:	429e      	cmp	r6, r3
 800c9dc:	f300 80a0 	bgt.w	800cb20 <atan+0x1d0>
 800c9e0:	ee10 2a10 	vmov	r2, s0
 800c9e4:	ee10 0a10 	vmov	r0, s0
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7f3 fc6e 	bl	80002cc <__adddf3>
 800c9f0:	4ba0      	ldr	r3, [pc, #640]	; (800cc74 <atan+0x324>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f7f3 fc68 	bl	80002c8 <__aeabi_dsub>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca02:	4620      	mov	r0, r4
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7f3 fc61 	bl	80002cc <__adddf3>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4630      	mov	r0, r6
 800ca10:	4639      	mov	r1, r7
 800ca12:	f7f3 ff3b 	bl	800088c <__aeabi_ddiv>
 800ca16:	f04f 0a00 	mov.w	sl, #0
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	460d      	mov	r5, r1
 800ca1e:	4622      	mov	r2, r4
 800ca20:	462b      	mov	r3, r5
 800ca22:	4620      	mov	r0, r4
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7f3 fe07 	bl	8000638 <__aeabi_dmul>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	f7f3 fe01 	bl	8000638 <__aeabi_dmul>
 800ca36:	a374      	add	r3, pc, #464	; (adr r3, 800cc08 <atan+0x2b8>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	460f      	mov	r7, r1
 800ca40:	f7f3 fdfa 	bl	8000638 <__aeabi_dmul>
 800ca44:	a372      	add	r3, pc, #456	; (adr r3, 800cc10 <atan+0x2c0>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f7f3 fc3f 	bl	80002cc <__adddf3>
 800ca4e:	4632      	mov	r2, r6
 800ca50:	463b      	mov	r3, r7
 800ca52:	f7f3 fdf1 	bl	8000638 <__aeabi_dmul>
 800ca56:	a370      	add	r3, pc, #448	; (adr r3, 800cc18 <atan+0x2c8>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	f7f3 fc36 	bl	80002cc <__adddf3>
 800ca60:	4632      	mov	r2, r6
 800ca62:	463b      	mov	r3, r7
 800ca64:	f7f3 fde8 	bl	8000638 <__aeabi_dmul>
 800ca68:	a36d      	add	r3, pc, #436	; (adr r3, 800cc20 <atan+0x2d0>)
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f7f3 fc2d 	bl	80002cc <__adddf3>
 800ca72:	4632      	mov	r2, r6
 800ca74:	463b      	mov	r3, r7
 800ca76:	f7f3 fddf 	bl	8000638 <__aeabi_dmul>
 800ca7a:	a36b      	add	r3, pc, #428	; (adr r3, 800cc28 <atan+0x2d8>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	f7f3 fc24 	bl	80002cc <__adddf3>
 800ca84:	4632      	mov	r2, r6
 800ca86:	463b      	mov	r3, r7
 800ca88:	f7f3 fdd6 	bl	8000638 <__aeabi_dmul>
 800ca8c:	a368      	add	r3, pc, #416	; (adr r3, 800cc30 <atan+0x2e0>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f3 fc1b 	bl	80002cc <__adddf3>
 800ca96:	4642      	mov	r2, r8
 800ca98:	464b      	mov	r3, r9
 800ca9a:	f7f3 fdcd 	bl	8000638 <__aeabi_dmul>
 800ca9e:	a366      	add	r3, pc, #408	; (adr r3, 800cc38 <atan+0x2e8>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	4680      	mov	r8, r0
 800caa6:	4689      	mov	r9, r1
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 fdc4 	bl	8000638 <__aeabi_dmul>
 800cab0:	a363      	add	r3, pc, #396	; (adr r3, 800cc40 <atan+0x2f0>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fc07 	bl	80002c8 <__aeabi_dsub>
 800caba:	4632      	mov	r2, r6
 800cabc:	463b      	mov	r3, r7
 800cabe:	f7f3 fdbb 	bl	8000638 <__aeabi_dmul>
 800cac2:	a361      	add	r3, pc, #388	; (adr r3, 800cc48 <atan+0x2f8>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fbfe 	bl	80002c8 <__aeabi_dsub>
 800cacc:	4632      	mov	r2, r6
 800cace:	463b      	mov	r3, r7
 800cad0:	f7f3 fdb2 	bl	8000638 <__aeabi_dmul>
 800cad4:	a35e      	add	r3, pc, #376	; (adr r3, 800cc50 <atan+0x300>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7f3 fbf5 	bl	80002c8 <__aeabi_dsub>
 800cade:	4632      	mov	r2, r6
 800cae0:	463b      	mov	r3, r7
 800cae2:	f7f3 fda9 	bl	8000638 <__aeabi_dmul>
 800cae6:	a35c      	add	r3, pc, #368	; (adr r3, 800cc58 <atan+0x308>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	f7f3 fbec 	bl	80002c8 <__aeabi_dsub>
 800caf0:	4632      	mov	r2, r6
 800caf2:	463b      	mov	r3, r7
 800caf4:	f7f3 fda0 	bl	8000638 <__aeabi_dmul>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4640      	mov	r0, r8
 800cafe:	4649      	mov	r1, r9
 800cb00:	f7f3 fbe4 	bl	80002cc <__adddf3>
 800cb04:	4622      	mov	r2, r4
 800cb06:	462b      	mov	r3, r5
 800cb08:	f7f3 fd96 	bl	8000638 <__aeabi_dmul>
 800cb0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	d14b      	bne.n	800cbae <atan+0x25e>
 800cb16:	4620      	mov	r0, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	f7f3 fbd5 	bl	80002c8 <__aeabi_dsub>
 800cb1e:	e72c      	b.n	800c97a <atan+0x2a>
 800cb20:	ee10 0a10 	vmov	r0, s0
 800cb24:	4b53      	ldr	r3, [pc, #332]	; (800cc74 <atan+0x324>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	4629      	mov	r1, r5
 800cb2a:	f7f3 fbcd 	bl	80002c8 <__aeabi_dsub>
 800cb2e:	4b51      	ldr	r3, [pc, #324]	; (800cc74 <atan+0x324>)
 800cb30:	4606      	mov	r6, r0
 800cb32:	460f      	mov	r7, r1
 800cb34:	2200      	movs	r2, #0
 800cb36:	4620      	mov	r0, r4
 800cb38:	4629      	mov	r1, r5
 800cb3a:	f7f3 fbc7 	bl	80002cc <__adddf3>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4630      	mov	r0, r6
 800cb44:	4639      	mov	r1, r7
 800cb46:	f7f3 fea1 	bl	800088c <__aeabi_ddiv>
 800cb4a:	f04f 0a01 	mov.w	sl, #1
 800cb4e:	4604      	mov	r4, r0
 800cb50:	460d      	mov	r5, r1
 800cb52:	e764      	b.n	800ca1e <atan+0xce>
 800cb54:	4b49      	ldr	r3, [pc, #292]	; (800cc7c <atan+0x32c>)
 800cb56:	429e      	cmp	r6, r3
 800cb58:	da1d      	bge.n	800cb96 <atan+0x246>
 800cb5a:	ee10 0a10 	vmov	r0, s0
 800cb5e:	4b48      	ldr	r3, [pc, #288]	; (800cc80 <atan+0x330>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fbb0 	bl	80002c8 <__aeabi_dsub>
 800cb68:	4b45      	ldr	r3, [pc, #276]	; (800cc80 <atan+0x330>)
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	2200      	movs	r2, #0
 800cb70:	4620      	mov	r0, r4
 800cb72:	4629      	mov	r1, r5
 800cb74:	f7f3 fd60 	bl	8000638 <__aeabi_dmul>
 800cb78:	4b3e      	ldr	r3, [pc, #248]	; (800cc74 <atan+0x324>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f7f3 fba6 	bl	80002cc <__adddf3>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f7f3 fe80 	bl	800088c <__aeabi_ddiv>
 800cb8c:	f04f 0a02 	mov.w	sl, #2
 800cb90:	4604      	mov	r4, r0
 800cb92:	460d      	mov	r5, r1
 800cb94:	e743      	b.n	800ca1e <atan+0xce>
 800cb96:	462b      	mov	r3, r5
 800cb98:	ee10 2a10 	vmov	r2, s0
 800cb9c:	4939      	ldr	r1, [pc, #228]	; (800cc84 <atan+0x334>)
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f7f3 fe74 	bl	800088c <__aeabi_ddiv>
 800cba4:	f04f 0a03 	mov.w	sl, #3
 800cba8:	4604      	mov	r4, r0
 800cbaa:	460d      	mov	r5, r1
 800cbac:	e737      	b.n	800ca1e <atan+0xce>
 800cbae:	4b36      	ldr	r3, [pc, #216]	; (800cc88 <atan+0x338>)
 800cbb0:	4e36      	ldr	r6, [pc, #216]	; (800cc8c <atan+0x33c>)
 800cbb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cbb6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cbba:	e9da 2300 	ldrd	r2, r3, [sl]
 800cbbe:	f7f3 fb83 	bl	80002c8 <__aeabi_dsub>
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	f7f3 fb7f 	bl	80002c8 <__aeabi_dsub>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cbd2:	f7f3 fb79 	bl	80002c8 <__aeabi_dsub>
 800cbd6:	f1bb 0f00 	cmp.w	fp, #0
 800cbda:	4604      	mov	r4, r0
 800cbdc:	460d      	mov	r5, r1
 800cbde:	f6bf aed6 	bge.w	800c98e <atan+0x3e>
 800cbe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbe6:	461d      	mov	r5, r3
 800cbe8:	e6d1      	b.n	800c98e <atan+0x3e>
 800cbea:	a51d      	add	r5, pc, #116	; (adr r5, 800cc60 <atan+0x310>)
 800cbec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbf0:	e6cd      	b.n	800c98e <atan+0x3e>
 800cbf2:	bf00      	nop
 800cbf4:	f3af 8000 	nop.w
 800cbf8:	54442d18 	.word	0x54442d18
 800cbfc:	bff921fb 	.word	0xbff921fb
 800cc00:	8800759c 	.word	0x8800759c
 800cc04:	7e37e43c 	.word	0x7e37e43c
 800cc08:	e322da11 	.word	0xe322da11
 800cc0c:	3f90ad3a 	.word	0x3f90ad3a
 800cc10:	24760deb 	.word	0x24760deb
 800cc14:	3fa97b4b 	.word	0x3fa97b4b
 800cc18:	a0d03d51 	.word	0xa0d03d51
 800cc1c:	3fb10d66 	.word	0x3fb10d66
 800cc20:	c54c206e 	.word	0xc54c206e
 800cc24:	3fb745cd 	.word	0x3fb745cd
 800cc28:	920083ff 	.word	0x920083ff
 800cc2c:	3fc24924 	.word	0x3fc24924
 800cc30:	5555550d 	.word	0x5555550d
 800cc34:	3fd55555 	.word	0x3fd55555
 800cc38:	2c6a6c2f 	.word	0x2c6a6c2f
 800cc3c:	bfa2b444 	.word	0xbfa2b444
 800cc40:	52defd9a 	.word	0x52defd9a
 800cc44:	3fadde2d 	.word	0x3fadde2d
 800cc48:	af749a6d 	.word	0xaf749a6d
 800cc4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cc50:	fe231671 	.word	0xfe231671
 800cc54:	3fbc71c6 	.word	0x3fbc71c6
 800cc58:	9998ebc4 	.word	0x9998ebc4
 800cc5c:	3fc99999 	.word	0x3fc99999
 800cc60:	54442d18 	.word	0x54442d18
 800cc64:	3ff921fb 	.word	0x3ff921fb
 800cc68:	440fffff 	.word	0x440fffff
 800cc6c:	7ff00000 	.word	0x7ff00000
 800cc70:	3fdbffff 	.word	0x3fdbffff
 800cc74:	3ff00000 	.word	0x3ff00000
 800cc78:	3ff2ffff 	.word	0x3ff2ffff
 800cc7c:	40038000 	.word	0x40038000
 800cc80:	3ff80000 	.word	0x3ff80000
 800cc84:	bff00000 	.word	0xbff00000
 800cc88:	0800d690 	.word	0x0800d690
 800cc8c:	0800d670 	.word	0x0800d670

0800cc90 <fabs>:
 800cc90:	ec51 0b10 	vmov	r0, r1, d0
 800cc94:	ee10 2a10 	vmov	r2, s0
 800cc98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc9c:	ec43 2b10 	vmov	d0, r2, r3
 800cca0:	4770      	bx	lr

0800cca2 <finite>:
 800cca2:	b082      	sub	sp, #8
 800cca4:	ed8d 0b00 	vstr	d0, [sp]
 800cca8:	9801      	ldr	r0, [sp, #4]
 800ccaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ccae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ccb2:	0fc0      	lsrs	r0, r0, #31
 800ccb4:	b002      	add	sp, #8
 800ccb6:	4770      	bx	lr

0800ccb8 <floor>:
 800ccb8:	ec51 0b10 	vmov	r0, r1, d0
 800ccbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ccc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ccc8:	2e13      	cmp	r6, #19
 800ccca:	ee10 5a10 	vmov	r5, s0
 800ccce:	ee10 8a10 	vmov	r8, s0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	dc32      	bgt.n	800cd3c <floor+0x84>
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	da14      	bge.n	800cd04 <floor+0x4c>
 800ccda:	a333      	add	r3, pc, #204	; (adr r3, 800cda8 <floor+0xf0>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 faf4 	bl	80002cc <__adddf3>
 800cce4:	2200      	movs	r2, #0
 800cce6:	2300      	movs	r3, #0
 800cce8:	f7f3 ff36 	bl	8000b58 <__aeabi_dcmpgt>
 800ccec:	b138      	cbz	r0, 800ccfe <floor+0x46>
 800ccee:	2c00      	cmp	r4, #0
 800ccf0:	da57      	bge.n	800cda2 <floor+0xea>
 800ccf2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ccf6:	431d      	orrs	r5, r3
 800ccf8:	d001      	beq.n	800ccfe <floor+0x46>
 800ccfa:	4c2d      	ldr	r4, [pc, #180]	; (800cdb0 <floor+0xf8>)
 800ccfc:	2500      	movs	r5, #0
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	e025      	b.n	800cd50 <floor+0x98>
 800cd04:	4f2b      	ldr	r7, [pc, #172]	; (800cdb4 <floor+0xfc>)
 800cd06:	4137      	asrs	r7, r6
 800cd08:	ea01 0307 	and.w	r3, r1, r7
 800cd0c:	4303      	orrs	r3, r0
 800cd0e:	d01f      	beq.n	800cd50 <floor+0x98>
 800cd10:	a325      	add	r3, pc, #148	; (adr r3, 800cda8 <floor+0xf0>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	f7f3 fad9 	bl	80002cc <__adddf3>
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	f7f3 ff1b 	bl	8000b58 <__aeabi_dcmpgt>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d0eb      	beq.n	800ccfe <floor+0x46>
 800cd26:	2c00      	cmp	r4, #0
 800cd28:	bfbe      	ittt	lt
 800cd2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd2e:	fa43 f606 	asrlt.w	r6, r3, r6
 800cd32:	19a4      	addlt	r4, r4, r6
 800cd34:	ea24 0407 	bic.w	r4, r4, r7
 800cd38:	2500      	movs	r5, #0
 800cd3a:	e7e0      	b.n	800ccfe <floor+0x46>
 800cd3c:	2e33      	cmp	r6, #51	; 0x33
 800cd3e:	dd0b      	ble.n	800cd58 <floor+0xa0>
 800cd40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd44:	d104      	bne.n	800cd50 <floor+0x98>
 800cd46:	ee10 2a10 	vmov	r2, s0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	f7f3 fabe 	bl	80002cc <__adddf3>
 800cd50:	ec41 0b10 	vmov	d0, r0, r1
 800cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd60:	fa23 f707 	lsr.w	r7, r3, r7
 800cd64:	4207      	tst	r7, r0
 800cd66:	d0f3      	beq.n	800cd50 <floor+0x98>
 800cd68:	a30f      	add	r3, pc, #60	; (adr r3, 800cda8 <floor+0xf0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 faad 	bl	80002cc <__adddf3>
 800cd72:	2200      	movs	r2, #0
 800cd74:	2300      	movs	r3, #0
 800cd76:	f7f3 feef 	bl	8000b58 <__aeabi_dcmpgt>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d0bf      	beq.n	800ccfe <floor+0x46>
 800cd7e:	2c00      	cmp	r4, #0
 800cd80:	da02      	bge.n	800cd88 <floor+0xd0>
 800cd82:	2e14      	cmp	r6, #20
 800cd84:	d103      	bne.n	800cd8e <floor+0xd6>
 800cd86:	3401      	adds	r4, #1
 800cd88:	ea25 0507 	bic.w	r5, r5, r7
 800cd8c:	e7b7      	b.n	800ccfe <floor+0x46>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd94:	fa03 f606 	lsl.w	r6, r3, r6
 800cd98:	4435      	add	r5, r6
 800cd9a:	4545      	cmp	r5, r8
 800cd9c:	bf38      	it	cc
 800cd9e:	18e4      	addcc	r4, r4, r3
 800cda0:	e7f2      	b.n	800cd88 <floor+0xd0>
 800cda2:	2500      	movs	r5, #0
 800cda4:	462c      	mov	r4, r5
 800cda6:	e7aa      	b.n	800ccfe <floor+0x46>
 800cda8:	8800759c 	.word	0x8800759c
 800cdac:	7e37e43c 	.word	0x7e37e43c
 800cdb0:	bff00000 	.word	0xbff00000
 800cdb4:	000fffff 	.word	0x000fffff

0800cdb8 <nan>:
 800cdb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cdc0 <nan+0x8>
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	00000000 	.word	0x00000000
 800cdc4:	7ff80000 	.word	0x7ff80000

0800cdc8 <rint>:
 800cdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdca:	ec51 0b10 	vmov	r0, r1, d0
 800cdce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cdd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cdd6:	2e13      	cmp	r6, #19
 800cdd8:	ee10 4a10 	vmov	r4, s0
 800cddc:	460b      	mov	r3, r1
 800cdde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cde2:	dc58      	bgt.n	800ce96 <rint+0xce>
 800cde4:	2e00      	cmp	r6, #0
 800cde6:	da2b      	bge.n	800ce40 <rint+0x78>
 800cde8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cdec:	4302      	orrs	r2, r0
 800cdee:	d023      	beq.n	800ce38 <rint+0x70>
 800cdf0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cdf4:	4302      	orrs	r2, r0
 800cdf6:	4254      	negs	r4, r2
 800cdf8:	4314      	orrs	r4, r2
 800cdfa:	0c4b      	lsrs	r3, r1, #17
 800cdfc:	0b24      	lsrs	r4, r4, #12
 800cdfe:	045b      	lsls	r3, r3, #17
 800ce00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ce04:	ea44 0103 	orr.w	r1, r4, r3
 800ce08:	4b32      	ldr	r3, [pc, #200]	; (800ced4 <rint+0x10c>)
 800ce0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ce0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fa57 	bl	80002cc <__adddf3>
 800ce1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ce22:	463b      	mov	r3, r7
 800ce24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce28:	4632      	mov	r2, r6
 800ce2a:	f7f3 fa4d 	bl	80002c8 <__aeabi_dsub>
 800ce2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ce36:	4639      	mov	r1, r7
 800ce38:	ec41 0b10 	vmov	d0, r0, r1
 800ce3c:	b003      	add	sp, #12
 800ce3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce40:	4a25      	ldr	r2, [pc, #148]	; (800ced8 <rint+0x110>)
 800ce42:	4132      	asrs	r2, r6
 800ce44:	ea01 0702 	and.w	r7, r1, r2
 800ce48:	4307      	orrs	r7, r0
 800ce4a:	d0f5      	beq.n	800ce38 <rint+0x70>
 800ce4c:	0851      	lsrs	r1, r2, #1
 800ce4e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ce52:	4314      	orrs	r4, r2
 800ce54:	d00c      	beq.n	800ce70 <rint+0xa8>
 800ce56:	ea23 0201 	bic.w	r2, r3, r1
 800ce5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ce5e:	2e13      	cmp	r6, #19
 800ce60:	fa43 f606 	asr.w	r6, r3, r6
 800ce64:	bf0c      	ite	eq
 800ce66:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ce6a:	2400      	movne	r4, #0
 800ce6c:	ea42 0306 	orr.w	r3, r2, r6
 800ce70:	4918      	ldr	r1, [pc, #96]	; (800ced4 <rint+0x10c>)
 800ce72:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ce76:	4622      	mov	r2, r4
 800ce78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	4629      	mov	r1, r5
 800ce80:	f7f3 fa24 	bl	80002cc <__adddf3>
 800ce84:	e9cd 0100 	strd	r0, r1, [sp]
 800ce88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	462b      	mov	r3, r5
 800ce90:	f7f3 fa1a 	bl	80002c8 <__aeabi_dsub>
 800ce94:	e7d0      	b.n	800ce38 <rint+0x70>
 800ce96:	2e33      	cmp	r6, #51	; 0x33
 800ce98:	dd07      	ble.n	800ceaa <rint+0xe2>
 800ce9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ce9e:	d1cb      	bne.n	800ce38 <rint+0x70>
 800cea0:	ee10 2a10 	vmov	r2, s0
 800cea4:	f7f3 fa12 	bl	80002cc <__adddf3>
 800cea8:	e7c6      	b.n	800ce38 <rint+0x70>
 800ceaa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ceae:	f04f 36ff 	mov.w	r6, #4294967295
 800ceb2:	40d6      	lsrs	r6, r2
 800ceb4:	4230      	tst	r0, r6
 800ceb6:	d0bf      	beq.n	800ce38 <rint+0x70>
 800ceb8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cebc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cec0:	bf1f      	itttt	ne
 800cec2:	ea24 0101 	bicne.w	r1, r4, r1
 800cec6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ceca:	fa44 f202 	asrne.w	r2, r4, r2
 800cece:	ea41 0402 	orrne.w	r4, r1, r2
 800ced2:	e7cd      	b.n	800ce70 <rint+0xa8>
 800ced4:	0800d6b0 	.word	0x0800d6b0
 800ced8:	000fffff 	.word	0x000fffff
 800cedc:	00000000 	.word	0x00000000

0800cee0 <scalbn>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	ec55 4b10 	vmov	r4, r5, d0
 800cee6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ceea:	4606      	mov	r6, r0
 800ceec:	462b      	mov	r3, r5
 800ceee:	b99a      	cbnz	r2, 800cf18 <scalbn+0x38>
 800cef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cef4:	4323      	orrs	r3, r4
 800cef6:	d036      	beq.n	800cf66 <scalbn+0x86>
 800cef8:	4b39      	ldr	r3, [pc, #228]	; (800cfe0 <scalbn+0x100>)
 800cefa:	4629      	mov	r1, r5
 800cefc:	ee10 0a10 	vmov	r0, s0
 800cf00:	2200      	movs	r2, #0
 800cf02:	f7f3 fb99 	bl	8000638 <__aeabi_dmul>
 800cf06:	4b37      	ldr	r3, [pc, #220]	; (800cfe4 <scalbn+0x104>)
 800cf08:	429e      	cmp	r6, r3
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	da10      	bge.n	800cf32 <scalbn+0x52>
 800cf10:	a32b      	add	r3, pc, #172	; (adr r3, 800cfc0 <scalbn+0xe0>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	e03a      	b.n	800cf8e <scalbn+0xae>
 800cf18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf1c:	428a      	cmp	r2, r1
 800cf1e:	d10c      	bne.n	800cf3a <scalbn+0x5a>
 800cf20:	ee10 2a10 	vmov	r2, s0
 800cf24:	4620      	mov	r0, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	f7f3 f9d0 	bl	80002cc <__adddf3>
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	e019      	b.n	800cf66 <scalbn+0x86>
 800cf32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf36:	460b      	mov	r3, r1
 800cf38:	3a36      	subs	r2, #54	; 0x36
 800cf3a:	4432      	add	r2, r6
 800cf3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf40:	428a      	cmp	r2, r1
 800cf42:	dd08      	ble.n	800cf56 <scalbn+0x76>
 800cf44:	2d00      	cmp	r5, #0
 800cf46:	a120      	add	r1, pc, #128	; (adr r1, 800cfc8 <scalbn+0xe8>)
 800cf48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4c:	da1c      	bge.n	800cf88 <scalbn+0xa8>
 800cf4e:	a120      	add	r1, pc, #128	; (adr r1, 800cfd0 <scalbn+0xf0>)
 800cf50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf54:	e018      	b.n	800cf88 <scalbn+0xa8>
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	dd08      	ble.n	800cf6c <scalbn+0x8c>
 800cf5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf66:	ec45 4b10 	vmov	d0, r4, r5
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cf70:	da19      	bge.n	800cfa6 <scalbn+0xc6>
 800cf72:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cf76:	429e      	cmp	r6, r3
 800cf78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cf7c:	dd0a      	ble.n	800cf94 <scalbn+0xb4>
 800cf7e:	a112      	add	r1, pc, #72	; (adr r1, 800cfc8 <scalbn+0xe8>)
 800cf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1e2      	bne.n	800cf4e <scalbn+0x6e>
 800cf88:	a30f      	add	r3, pc, #60	; (adr r3, 800cfc8 <scalbn+0xe8>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f7f3 fb53 	bl	8000638 <__aeabi_dmul>
 800cf92:	e7cb      	b.n	800cf2c <scalbn+0x4c>
 800cf94:	a10a      	add	r1, pc, #40	; (adr r1, 800cfc0 <scalbn+0xe0>)
 800cf96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d0b8      	beq.n	800cf10 <scalbn+0x30>
 800cf9e:	a10e      	add	r1, pc, #56	; (adr r1, 800cfd8 <scalbn+0xf8>)
 800cfa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa4:	e7b4      	b.n	800cf10 <scalbn+0x30>
 800cfa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfaa:	3236      	adds	r2, #54	; 0x36
 800cfac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4b0c      	ldr	r3, [pc, #48]	; (800cfe8 <scalbn+0x108>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	e7e8      	b.n	800cf8e <scalbn+0xae>
 800cfbc:	f3af 8000 	nop.w
 800cfc0:	c2f8f359 	.word	0xc2f8f359
 800cfc4:	01a56e1f 	.word	0x01a56e1f
 800cfc8:	8800759c 	.word	0x8800759c
 800cfcc:	7e37e43c 	.word	0x7e37e43c
 800cfd0:	8800759c 	.word	0x8800759c
 800cfd4:	fe37e43c 	.word	0xfe37e43c
 800cfd8:	c2f8f359 	.word	0xc2f8f359
 800cfdc:	81a56e1f 	.word	0x81a56e1f
 800cfe0:	43500000 	.word	0x43500000
 800cfe4:	ffff3cb0 	.word	0xffff3cb0
 800cfe8:	3c900000 	.word	0x3c900000

0800cfec <_getpid>:
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <_getpid+0xc>)
 800cfee:	2258      	movs	r2, #88	; 0x58
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	f04f 30ff 	mov.w	r0, #4294967295
 800cff6:	4770      	bx	lr
 800cff8:	200009fc 	.word	0x200009fc

0800cffc <_kill>:
 800cffc:	4b02      	ldr	r3, [pc, #8]	; (800d008 <_kill+0xc>)
 800cffe:	2258      	movs	r2, #88	; 0x58
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	f04f 30ff 	mov.w	r0, #4294967295
 800d006:	4770      	bx	lr
 800d008:	200009fc 	.word	0x200009fc

0800d00c <_exit>:
 800d00c:	e7fe      	b.n	800d00c <_exit>
	...

0800d010 <_init>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	bf00      	nop
 800d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d016:	bc08      	pop	{r3}
 800d018:	469e      	mov	lr, r3
 800d01a:	4770      	bx	lr

0800d01c <_fini>:
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	bf00      	nop
 800d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d022:	bc08      	pop	{r3}
 800d024:	469e      	mov	lr, r3
 800d026:	4770      	bx	lr
