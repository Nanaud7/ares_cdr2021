
lidar_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c924  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800caf8  0800caf8  0001caf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf6c  0800cf6c  00020498  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf74  0800cf74  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf74  0800cf74  0001cf74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  0800cf7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000498  0800d414  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800d414  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c924  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003178  00000000  00000000  0003cdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0003ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00040ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002527b  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015125  00000000  00000000  000671c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31f7  00000000  00000000  0007c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005614  00000000  00000000  0014f534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00154b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00154b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000498 	.word	0x20000498
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cadc 	.word	0x0800cadc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000049c 	.word	0x2000049c
 800020c:	0800cadc 	.word	0x0800cadc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b54      	ldr	r3, [pc, #336]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a53      	ldr	r2, [pc, #332]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b4d      	ldr	r3, [pc, #308]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a4c      	ldr	r2, [pc, #304]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b4a      	ldr	r3, [pc, #296]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b46      	ldr	r3, [pc, #280]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a45      	ldr	r2, [pc, #276]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b43      	ldr	r3, [pc, #268]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a3e      	ldr	r2, [pc, #248]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <MX_GPIO_Init+0x16c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4839      	ldr	r0, [pc, #228]	; (8001090 <MX_GPIO_Init+0x170>)
 8000fac:	f001 fc4a 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4837      	ldr	r0, [pc, #220]	; (8001094 <MX_GPIO_Init+0x174>)
 8000fb6:	f001 fc45 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4836      	ldr	r0, [pc, #216]	; (8001098 <MX_GPIO_Init+0x178>)
 8000fc0:	f001 fc40 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fca:	4b34      	ldr	r3, [pc, #208]	; (800109c <MX_GPIO_Init+0x17c>)
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	482d      	ldr	r0, [pc, #180]	; (8001090 <MX_GPIO_Init+0x170>)
 8000fda:	f001 fa9f 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4826      	ldr	r0, [pc, #152]	; (8001090 <MX_GPIO_Init+0x170>)
 8000ff6:	f001 fa91 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <MX_GPIO_Init+0x180>)
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4820      	ldr	r0, [pc, #128]	; (8001090 <MX_GPIO_Init+0x170>)
 800100e:	f001 fa85 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001012:	2310      	movs	r3, #16
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_GPIO_Init+0x180>)
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	481b      	ldr	r0, [pc, #108]	; (8001094 <MX_GPIO_Init+0x174>)
 8001026:	f001 fa79 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800102a:	2320      	movs	r3, #32
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_GPIO_Init+0x174>)
 8001042:	f001 fa6b 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_GPIO_Init+0x178>)
 800105e:	f001 fa5d 	bl	800251c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2007      	movs	r0, #7
 8001068:	f001 fa21 	bl	80024ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800106c:	2007      	movs	r0, #7
 800106e:	f001 fa3a 	bl	80024e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	200a      	movs	r0, #10
 8001078:	f001 fa19 	bl	80024ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800107c:	200a      	movs	r0, #10
 800107e:	f001 fa32 	bl	80024e6 <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	10210000 	.word	0x10210000
 80010a0:	10110000 	.word	0x10110000

080010a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f001 fbed 	bl	80028c0 <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 fbaa 	bl	8001844 <Error_Handler>
  }

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200004c8 	.word	0x200004c8
 80010f8:	40005400 	.word	0x40005400
 80010fc:	00061a80 	.word	0x00061a80

08001100 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_I2C_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001150:	2304      	movs	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_I2C_MspInit+0x8c>)
 800115c:	f001 f9de 	bl	800251c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400

08001190 <vl_xshut_init>:

#include "lib_vl53l0x.h"

/* Fonctions utilisateurs */

void vl_xshut_init(VL53L0X_Struct* vl53l0x, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	80fb      	strh	r3, [r7, #6]
	vl53l0x->xshut.GPIOx = GPIOx;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	vl53l0x->xshut.GPIO_Pin = GPIO_Pin;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	HAL_GPIO_WritePin(vl53l0x->xshut.GPIOx, vl53l0x->xshut.GPIO_Pin, GPIO_PIN_RESET);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	f001 fb41 	bl	8002844 <HAL_GPIO_WritePin>
	HAL_Delay(TOGGLE_GPIO_TIME);
 80011c2:	2014      	movs	r0, #20
 80011c4:	f001 f874 	bl	80022b0 <HAL_Delay>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <vl_sensors_init>:

void vl_sensors_init(VL53L0X_Struct vl53l0x[], I2C_HandleTypeDef* i2c, uint8_t nbOfSensors){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	71fb      	strb	r3, [r7, #7]

	for(int i=0; i<nbOfSensors; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e04b      	b.n	800127c <vl_sensors_init+0xac>
		vl53l0x[i].i2c = i2c;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		HAL_Delay(TOGGLE_GPIO_TIME);
 80011f8:	2014      	movs	r0, #20
 80011fa:	f001 f859 	bl	80022b0 <HAL_Delay>

		HAL_GPIO_WritePin(vl53l0x[i].xshut.GPIOx, vl53l0x[i].xshut.GPIO_Pin, GPIO_PIN_SET);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	f001 fb0d 	bl	8002844 <HAL_GPIO_WritePin>
		HAL_Delay(TOGGLE_GPIO_TIME);
 800122a:	2014      	movs	r0, #20
 800122c:	f001 f840 	bl	80022b0 <HAL_Delay>

		vl53l0x_Init(&vl53l0x[i].VL53L0X_Dev_t, vl53l0x->i2c);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4413      	add	r3, r2
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001246:	4619      	mov	r1, r3
 8001248:	4610      	mov	r0, r2
 800124a:	f000 f847 	bl	80012dc <vl53l0x_Init>
		vl53l0x_SetDeviceAddress(&vl53l0x[i].VL53L0X_Dev_t, 0x54+i*2);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	461a      	mov	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	332a      	adds	r3, #42	; 0x2a
 8001262:	b2db      	uxtb	r3, r3
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f000 f897 	bl	800139e <vl53l0x_SetDeviceAddress>
		HAL_Delay(TOGGLE_GPIO_TIME);
 8001270:	2014      	movs	r0, #20
 8001272:	f001 f81d 	bl	80022b0 <HAL_Delay>
	for(int i=0; i<nbOfSensors; i++){
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbaf      	blt.n	80011e4 <vl_sensors_init+0x14>
	}
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <vl_clear_it_mask>:

void vl_clear_it_mask(VL53L0X_Struct* vl53l0x){
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
	VL53L0X_ClearInterruptMask(&vl53l0x->VL53L0X_Dev_t, 0);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f005 f9f4 	bl	8006688 <VL53L0X_ClearInterruptMask>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <vl_perform_ranging>:

uint16_t vl_perform_ranging(VL53L0X_Struct* vl53l0x){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	return vl53l0x_PerformRangingMeasurement(&vl53l0x->VL53L0X_Dev_t);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f864 	bl	8001380 <vl53l0x_PerformRangingMeasurement>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <vl_perform_ranging_it>:

uint16_t vl_perform_ranging_it(VL53L0X_Struct* vl53l0x){
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	return vl53l0x_PerformRangingMeasurement_IT(&vl53l0x->VL53L0X_Dev_t);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f87b 	bl	80013c8 <vl53l0x_PerformRangingMeasurement_IT>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <vl53l0x_Init>:



/* Fonctions intermédiaires */

uint8_t vl53l0x_Init(VL53L0X_Dev_t* dev, I2C_HandleTypeDef* i2c){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

	dev->I2cHandle = i2c;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	dev->I2cDevAddr = 0x52;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2252      	movs	r2, #82	; 0x52
 80012f2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	dev->comms_speed_khz = 400;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012fc:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
	dev->comms_type = 1;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	// Device initialization
	vl53l0x_Device_Initialization(dev);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f881 	bl	8001410 <vl53l0x_Device_Initialization>

	// Calibration data loading
	vl53l0x_Calibration_Data_Load(dev);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f8ac 	bl	800146c <vl53l0x_Calibration_Data_Load>

	// System settings
	vl53l0x_System_Settings(dev);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f8c2 	bl	800149e <vl53l0x_System_Settings>

	/* Polling and interrupt mode */
#if INTERRUPT_MODE == 1
	VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
 800131a:	2301      	movs	r3, #1
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2304      	movs	r3, #4
 8001320:	2201      	movs	r2, #1
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f005 f855 	bl	80063d4 <VL53L0X_SetGpioConfig>
			VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
#endif

	// Start Measurement
	VL53L0X_StartMeasurement(dev);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f004 fdec 	bl	8005f08 <VL53L0X_StartMeasurement>

	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <vl53l0x_PerformMeasurement>:

uint8_t vl53l0x_PerformMeasurement(VL53L0X_Dev_t* dev, VL53L0X_RangingMeasurementData_t* VL53L0X_RangingMeasurementData){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]

	VL53L0X_WaitDeviceReadyForNewMeasurement(dev, 100);
 800134a:	2164      	movs	r1, #100	; 0x64
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f004 fedd 	bl	800610c <VL53L0X_WaitDeviceReadyForNewMeasurement>

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, VL53L0X_RangingMeasurementData))){
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f004 fee9 	bl	800612c <VL53L0X_GetRangingMeasurementData>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <vl53l0x_PerformMeasurement+0x36>
		printf("Error GetRangingMeasurementData() : %d\r\n",status);
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4619      	mov	r1, r3
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <vl53l0x_PerformMeasurement+0x40>)
 800136a:	f009 f9ef 	bl	800a74c <iprintf>
		return 1;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <vl53l0x_PerformMeasurement+0x38>
	}

	return 0;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0800caf8 	.word	0x0800caf8

08001380 <vl53l0x_PerformRangingMeasurement>:

uint16_t vl53l0x_PerformRangingMeasurement(VL53L0X_Dev_t* dev){
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	vl53l0x_PerformMeasurement(dev, &VL53L0X_RangingMeasurementData);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffd4 	bl	800133c <vl53l0x_PerformMeasurement>

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8001394:	8abb      	ldrh	r3, [r7, #20]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <vl53l0x_SetDeviceAddress>:

uint8_t vl53l0x_SetDeviceAddress(VL53L0X_Dev_t* dev, uint8_t deviceAddress){
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_SetDeviceAddress(dev, deviceAddress);
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f003 fd1d 	bl	8004dee <VL53L0X_SetDeviceAddress>
	dev->I2cDevAddr = deviceAddress;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <vl53l0x_PerformRangingMeasurement_IT>:

uint16_t vl53l0x_PerformRangingMeasurement_IT(VL53L0X_Dev_t* dev){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, &VL53L0X_RangingMeasurementData))){
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f004 fea5 	bl	800612c <VL53L0X_GetRangingMeasurementData>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <vl53l0x_PerformRangingMeasurement_IT+0x38>
		printf("Error GetRangingMeasurementData() : %d\r\n",status);
 80013f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <vl53l0x_PerformRangingMeasurement_IT+0x44>)
 80013f8:	f009 f9a8 	bl	800a74c <iprintf>
		return 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <vl53l0x_PerformRangingMeasurement_IT+0x3a>
	}

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8001400:	8a3b      	ldrh	r3, [r7, #16]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800caf8 	.word	0x0800caf8

08001410 <vl53l0x_Device_Initialization>:


/* DEVICE FUNCTIONS */

uint8_t vl53l0x_Device_Initialization(VL53L0X_Dev_t* dev){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]

	/* DataInit */
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_DataInit(dev))){
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f003 fcff 	bl	8004e20 <VL53L0X_DataInit>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <vl53l0x_Device_Initialization+0x2a>
		printf("Error DataInit() : %d\r\n",status);
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <vl53l0x_Device_Initialization+0x54>)
 8001432:	f009 f98b 	bl	800a74c <iprintf>
		return 1;
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <vl53l0x_Device_Initialization+0x4a>
	}

	/* StaticInit */
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_StaticInit(dev))){
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f003 fe54 	bl	80050e8 <VL53L0X_StaticInit>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <vl53l0x_Device_Initialization+0x48>
		printf("Error StaticInit() : %d\r\n",status);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <vl53l0x_Device_Initialization+0x58>)
 8001450:	f009 f97c 	bl	800a74c <iprintf>
		return 1;
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <vl53l0x_Device_Initialization+0x4a>
	}

	return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800cb24 	.word	0x0800cb24
 8001468:	0800cb3c 	.word	0x0800cb3c

0800146c <vl53l0x_Calibration_Data_Load>:


uint8_t vl53l0x_Calibration_Data_Load(VL53L0X_Dev_t* dev){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	//uint8_t status = VL53L0X_ERROR_NONE;

	/* Reference SPADs */
	uint32_t count; uint8_t isApertureSpads;
	VL53L0X_PerformRefSpadManagement(dev, &count, &isApertureSpads);
 8001474:	f107 020b 	add.w	r2, r7, #11
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f005 f964 	bl	800674c <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetReferenceSpads(dev, count, isApertureSpads);
	//VL53L0X_GetReferenceSpads(dev, &count, &isApertureSpads);

	/* Ref calibration */
    uint8_t VhvSettings, PhaseCal;
	VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 8001484:	f107 0209 	add.w	r2, r7, #9
 8001488:	f107 030a 	add.w	r3, r7, #10
 800148c:	4619      	mov	r1, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f004 fcbe 	bl	8005e10 <VL53L0X_PerformRefCalibration>

	/* Offset calibration */

	/* Cross-talk correction */

	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <vl53l0x_System_Settings>:


uint8_t vl53l0x_System_Settings(VL53L0X_Dev_t* dev){
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	/* Device Mode */
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80014a6:	2101      	movs	r1, #1
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f004 f82f 	bl	800550c <VL53L0X_SetDeviceMode>

	/* API range profiles */
	vl53l0x_Range_Profiles(dev);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f806 	bl	80014c0 <vl53l0x_Range_Profiles>

	return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <vl53l0x_Range_Profiles>:


uint8_t vl53l0x_Range_Profiles(VL53L0X_Dev_t* dev){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 80014c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014cc:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 80014ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014d2:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 80014d4:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80014d8:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 80014da:	230e      	movs	r3, #14
 80014dc:	72fb      	strb	r3, [r7, #11]
	uint8_t finalRangeVcselPeriod = 10;
 80014de:	230a      	movs	r3, #10
 80014e0:	72bb      	strb	r3, [r7, #10]
		timingBudget = 33000;
		preRangeVcselPeriod = 18;
		finalRangeVcselPeriod = 14;
		break;
	case HIGH_ACCURACY:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 80014e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e6:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(18*65536);
 80014e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014ec:	613b      	str	r3, [r7, #16]
		timingBudget = 200000;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <vl53l0x_Range_Profiles+0x7c>)
 80014f0:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 80014f2:	230e      	movs	r3, #14
 80014f4:	72fb      	strb	r3, [r7, #11]
		finalRangeVcselPeriod = 10;
 80014f6:	230a      	movs	r3, #10
 80014f8:	72bb      	strb	r3, [r7, #10]
		break;
 80014fa:	bf00      	nop
		break;
	default:
		printf("Not Supported");
	}

	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	2101      	movs	r1, #1
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f004 fb2f 	bl	8005b64 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	2100      	movs	r1, #0
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f004 fb2a 	bl	8005b64 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 8001510:	68f9      	ldr	r1, [r7, #12]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f004 f858 	bl	80055c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8001518:	7afb      	ldrb	r3, [r7, #11]
 800151a:	461a      	mov	r2, r3
 800151c:	2100      	movs	r1, #0
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f004 f878 	bl	8005614 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8001524:	7abb      	ldrb	r3, [r7, #10]
 8001526:	461a      	mov	r2, r3
 8001528:	2101      	movs	r1, #1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f004 f872 	bl	8005614 <VL53L0X_SetVcselPulsePeriod>

	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	00030d40 	.word	0x00030d40

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001544:	b088      	sub	sp, #32
 8001546:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f000 fe40 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f90c 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f7ff fce6 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001554:	f000 fb14 	bl	8001b80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001558:	f7ff fda4 	bl	80010a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800155c:	f000 fb3a 	bl	8001bd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001560:	486f      	ldr	r0, [pc, #444]	; (8001720 <main+0x1e0>)
 8001562:	f000 f975 	bl	8001850 <RetargetInit>
  printf("lidar_f446re\r\n");
 8001566:	486f      	ldr	r0, [pc, #444]	; (8001724 <main+0x1e4>)
 8001568:	f009 f976 	bl	800a858 <puts>
#if NB_OF_SENSORS == 1
  vl_xshut_init(&vl53l0x[0], GPIOC, GPIO_PIN_0); 			// XSHUT = PC0
  vl_sensors_init(&vl53l0x[0], &hi2c1, NB_OF_SENSORS);
#endif
#if NB_OF_SENSORS == 2
  vl_xshut_init(&vl53l0x[0], GPIOC, GPIO_PIN_0); 			// XSHUT = PC0
 800156c:	2201      	movs	r2, #1
 800156e:	496e      	ldr	r1, [pc, #440]	; (8001728 <main+0x1e8>)
 8001570:	486e      	ldr	r0, [pc, #440]	; (800172c <main+0x1ec>)
 8001572:	f7ff fe0d 	bl	8001190 <vl_xshut_init>
  vl_xshut_init(&vl53l0x[1], GPIOB, GPIO_PIN_0); 			// XSHUT = PB0
 8001576:	2201      	movs	r2, #1
 8001578:	496d      	ldr	r1, [pc, #436]	; (8001730 <main+0x1f0>)
 800157a:	486e      	ldr	r0, [pc, #440]	; (8001734 <main+0x1f4>)
 800157c:	f7ff fe08 	bl	8001190 <vl_xshut_init>
  vl_sensors_init(vl53l0x, &hi2c1, NB_OF_SENSORS);
 8001580:	2202      	movs	r2, #2
 8001582:	496d      	ldr	r1, [pc, #436]	; (8001738 <main+0x1f8>)
 8001584:	4869      	ldr	r0, [pc, #420]	; (800172c <main+0x1ec>)
 8001586:	f7ff fe23 	bl	80011d0 <vl_sensors_init>
#endif

  ///// AX-12 /////
#if AX12_ENABLE
  AX12_Init(&ax12, &huart3, 1, BR_250K);
 800158a:	2307      	movs	r3, #7
 800158c:	2201      	movs	r2, #1
 800158e:	496b      	ldr	r1, [pc, #428]	; (800173c <main+0x1fc>)
 8001590:	486b      	ldr	r0, [pc, #428]	; (8001740 <main+0x200>)
 8001592:	f000 fbf0 	bl	8001d76 <AX12_Init>
  AX12_TorqueE_D(&ax12, TRUE);
 8001596:	2101      	movs	r1, #1
 8001598:	4869      	ldr	r0, [pc, #420]	; (8001740 <main+0x200>)
 800159a:	f000 fc71 	bl	8001e80 <AX12_TorqueE_D>
  AX12_setMaxTorque(&ax12,50);
 800159e:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001744 <main+0x204>
 80015a2:	4867      	ldr	r0, [pc, #412]	; (8001740 <main+0x200>)
 80015a4:	f000 fc40 	bl	8001e28 <AX12_setMaxTorque>

  AX12_setRangeAngle(&ax12,0,300);
 80015a8:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001748 <main+0x208>
 80015ac:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800174c <main+0x20c>
 80015b0:	4863      	ldr	r0, [pc, #396]	; (8001740 <main+0x200>)
 80015b2:	f000 fbfd 	bl	8001db0 <AX12_setRangeAngle>
  AX12_setMovingSpeed(&ax12, 114);
 80015b6:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001750 <main+0x210>
 80015ba:	4861      	ldr	r0, [pc, #388]	; (8001740 <main+0x200>)
 80015bc:	f000 fc9c 	bl	8001ef8 <AX12_setMovingSpeed>
  AX12_setPosition(&ax12, 0);
 80015c0:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800174c <main+0x20c>
 80015c4:	485e      	ldr	r0, [pc, #376]	; (8001740 <main+0x200>)
 80015c6:	f000 fc6b 	bl	8001ea0 <AX12_setPosition>


while (1)
  {
#if IT_MODE == 0
	  for(float k = AX12_POS_MIN+AX12_POS_JUMP; k <= AX12_POS_MAX; k += AX12_POS_JUMP){
 80015ca:	4b62      	ldr	r3, [pc, #392]	; (8001754 <main+0x214>)
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e049      	b.n	8001664 <main+0x124>
		  for(int i=0; i<NB_OF_SENSORS; i++){
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	e017      	b.n	8001606 <main+0xc6>
			  results[i] = (float)vl_perform_ranging(&vl53l0x[i]);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <main+0x1ec>)
 80015e2:	4413      	add	r3, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fe5f 	bl	80012a8 <vl_perform_ranging>
 80015ea:	4603      	mov	r3, r0
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <main+0x218>)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	edc3 7a00 	vstr	s15, [r3]
		  for(int i=0; i<NB_OF_SENSORS; i++){
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3301      	adds	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	dde4      	ble.n	80015d6 <main+0x96>
		  }
#if NB_OF_SENSORS == 1
		  printf("%f %f\r\n", k, results[0]);
#endif
#if NB_OF_SENSORS == 2
		  printf("%f %f %f\r\n", k, results[0], results[1]);
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7fe ffbb 	bl	8000588 <__aeabi_f2d>
 8001612:	4680      	mov	r8, r0
 8001614:	4689      	mov	r9, r1
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <main+0x218>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ffb4 	bl	8000588 <__aeabi_f2d>
 8001620:	4604      	mov	r4, r0
 8001622:	460d      	mov	r5, r1
 8001624:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <main+0x218>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ffad 	bl	8000588 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001636:	e9cd 4500 	strd	r4, r5, [sp]
 800163a:	4642      	mov	r2, r8
 800163c:	464b      	mov	r3, r9
 800163e:	4847      	ldr	r0, [pc, #284]	; (800175c <main+0x21c>)
 8001640:	f009 f884 	bl	800a74c <iprintf>
#endif
#if AX12_ENABLE
		  AX12_setPosition(&ax12, k);
 8001644:	ed97 0a03 	vldr	s0, [r7, #12]
 8001648:	483d      	ldr	r0, [pc, #244]	; (8001740 <main+0x200>)
 800164a:	f000 fc29 	bl	8001ea0 <AX12_setPosition>
#endif
		  HAL_Delay(AX12_TIME_JUMP);
 800164e:	2064      	movs	r0, #100	; 0x64
 8001650:	f000 fe2e 	bl	80022b0 <HAL_Delay>
	  for(float k = AX12_POS_MIN+AX12_POS_JUMP; k <= AX12_POS_MAX; k += AX12_POS_JUMP){
 8001654:	edd7 7a03 	vldr	s15, [r7, #12]
 8001658:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800165c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001660:	edc7 7a03 	vstr	s15, [r7, #12]
 8001664:	edd7 7a03 	vldr	s15, [r7, #12]
 8001668:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001760 <main+0x220>
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	d9ac      	bls.n	80015d0 <main+0x90>
	  }

	  for(float k = AX12_POS_MAX-AX12_POS_JUMP; k >= AX12_POS_MIN; k -= AX12_POS_JUMP){
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <main+0x224>)
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	e049      	b.n	8001710 <main+0x1d0>
		  for(int i=0; i<NB_OF_SENSORS; i++){
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	e017      	b.n	80016b2 <main+0x172>
			  results[i] = (float)vl_perform_ranging(&vl53l0x[i]);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <main+0x1ec>)
 800168e:	4413      	add	r3, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe09 	bl	80012a8 <vl_perform_ranging>
 8001696:	4603      	mov	r3, r0
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a0:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <main+0x218>)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	edc3 7a00 	vstr	s15, [r3]
		  for(int i=0; i<NB_OF_SENSORS; i++){
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	dde4      	ble.n	8001682 <main+0x142>
		  }
#if NB_OF_SENSORS == 1
		  printf("%f %f\r\n", k, results[0]);
#endif
#if NB_OF_SENSORS == 2
		  printf("%f %f %f\r\n", k, results[0], results[1]);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7fe ff65 	bl	8000588 <__aeabi_f2d>
 80016be:	4680      	mov	r8, r0
 80016c0:	4689      	mov	r9, r1
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <main+0x218>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff5e 	bl	8000588 <__aeabi_f2d>
 80016cc:	4604      	mov	r4, r0
 80016ce:	460d      	mov	r5, r1
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <main+0x218>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff57 	bl	8000588 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016e2:	e9cd 4500 	strd	r4, r5, [sp]
 80016e6:	4642      	mov	r2, r8
 80016e8:	464b      	mov	r3, r9
 80016ea:	481c      	ldr	r0, [pc, #112]	; (800175c <main+0x21c>)
 80016ec:	f009 f82e 	bl	800a74c <iprintf>
#endif
#if AX12_ENABLE
		  AX12_setPosition(&ax12, k);
 80016f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <main+0x200>)
 80016f6:	f000 fbd3 	bl	8001ea0 <AX12_setPosition>
#endif
		  HAL_Delay(AX12_TIME_JUMP);
 80016fa:	2064      	movs	r0, #100	; 0x64
 80016fc:	f000 fdd8 	bl	80022b0 <HAL_Delay>
	  for(float k = AX12_POS_MAX-AX12_POS_JUMP; k >= AX12_POS_MIN; k -= AX12_POS_JUMP){
 8001700:	edd7 7a01 	vldr	s15, [r7, #4]
 8001704:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800170c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001710:	edd7 7a01 	vldr	s15, [r7, #4]
 8001714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	daae      	bge.n	800167c <main+0x13c>
	  for(float k = AX12_POS_MIN+AX12_POS_JUMP; k <= AX12_POS_MAX; k += AX12_POS_JUMP){
 800171e:	e754      	b.n	80015ca <main+0x8a>
 8001720:	200008a8 	.word	0x200008a8
 8001724:	0800cb58 	.word	0x0800cb58
 8001728:	40020800 	.word	0x40020800
 800172c:	20000524 	.word	0x20000524
 8001730:	40020400 	.word	0x40020400
 8001734:	200006c4 	.word	0x200006c4
 8001738:	200004c8 	.word	0x200004c8
 800173c:	20000868 	.word	0x20000868
 8001740:	2000051c 	.word	0x2000051c
 8001744:	42480000 	.word	0x42480000
 8001748:	43960000 	.word	0x43960000
 800174c:	00000000 	.word	0x00000000
 8001750:	42e40000 	.word	0x42e40000
 8001754:	40a00000 	.word	0x40a00000
 8001758:	200004b4 	.word	0x200004b4
 800175c:	0800cb68 	.word	0x0800cb68
 8001760:	42f00000 	.word	0x42f00000
 8001764:	42e60000 	.word	0x42e60000

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	; 0x50
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	2234      	movs	r2, #52	; 0x34
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f008 fb76 	bl	8009e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <SystemClock_Config+0xd4>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a29      	ldr	r2, [pc, #164]	; (800183c <SystemClock_Config+0xd4>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <SystemClock_Config+0xd4>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <SystemClock_Config+0xd8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <SystemClock_Config+0xd8>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <SystemClock_Config+0xd8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d0:	2310      	movs	r3, #16
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d4:	2302      	movs	r3, #2
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017dc:	2310      	movs	r3, #16
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017e6:	2304      	movs	r3, #4
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fac4 	bl	8003d84 <HAL_RCC_OscConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001802:	f000 f81f 	bl	8001844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001806:	230f      	movs	r3, #15
 8001808:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180a:	2302      	movs	r3, #2
 800180c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	2102      	movs	r1, #2
 8001822:	4618      	mov	r0, r3
 8001824:	f001 ffe2 	bl	80037ec <HAL_RCC_ClockConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800182e:	f000 f809 	bl	8001844 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3750      	adds	r7, #80	; 0x50
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <RetargetInit+0x28>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <RetargetInit+0x2c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6898      	ldr	r0, [r3, #8]
 8001864:	2300      	movs	r3, #0
 8001866:	2202      	movs	r2, #2
 8001868:	2100      	movs	r1, #0
 800186a:	f008 fffd 	bl	800a868 <setvbuf>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000864 	.word	0x20000864
 800187c:	200002c8 	.word	0x200002c8

08001880 <_isatty>:

int _isatty(int fd) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db04      	blt.n	8001898 <_isatty+0x18>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	dc01      	bgt.n	8001898 <_isatty+0x18>
    return 1;
 8001894:	2301      	movs	r3, #1
 8001896:	e005      	b.n	80018a4 <_isatty+0x24>

  errno = EBADF;
 8001898:	f008 faae 	bl	8009df8 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	2209      	movs	r2, #9
 80018a0:	601a      	str	r2, [r3, #0]
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_write>:

int _write(int fd, char* ptr, int len) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d002      	beq.n	80018c4 <_write+0x18>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d111      	bne.n	80018e8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <_write+0x54>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	f002 fd53 	bl	800437c <HAL_UART_Transmit>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <_write+0x38>
      return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	e008      	b.n	80018f6 <_write+0x4a>
    else
      return EIO;
 80018e4:	2305      	movs	r3, #5
 80018e6:	e006      	b.n	80018f6 <_write+0x4a>
  }
  errno = EBADF;
 80018e8:	f008 fa86 	bl	8009df8 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2209      	movs	r2, #9
 80018f0:	601a      	str	r2, [r3, #0]
  return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000864 	.word	0x20000864

08001904 <_close>:

int _close(int fd) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db04      	blt.n	800191c <_close+0x18>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b02      	cmp	r3, #2
 8001916:	dc01      	bgt.n	800191c <_close+0x18>
    return 0;
 8001918:	2300      	movs	r3, #0
 800191a:	e006      	b.n	800192a <_close+0x26>

  errno = EBADF;
 800191c:	f008 fa6c 	bl	8009df8 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	2209      	movs	r2, #9
 8001924:	601a      	str	r2, [r3, #0]
  return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800193e:	f008 fa5b 	bl	8009df8 <__errno>
 8001942:	4603      	mov	r3, r0
 8001944:	2209      	movs	r2, #9
 8001946:	601a      	str	r2, [r3, #0]
  return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_read>:

int _read(int fd, char* ptr, int len) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d110      	bne.n	8001988 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <_read+0x4c>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	2201      	movs	r2, #1
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	f002 fd9c 	bl	80044ae <HAL_UART_Receive>
 8001976:	4603      	mov	r3, r0
 8001978:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <_read+0x30>
      return 1;
 8001980:	2301      	movs	r3, #1
 8001982:	e008      	b.n	8001996 <_read+0x42>
    else
      return EIO;
 8001984:	2305      	movs	r3, #5
 8001986:	e006      	b.n	8001996 <_read+0x42>
  }
  errno = EBADF;
 8001988:	f008 fa36 	bl	8009df8 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	2209      	movs	r2, #9
 8001990:	601a      	str	r2, [r3, #0]
  return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000864 	.word	0x20000864

080019a4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db08      	blt.n	80019c6 <_fstat+0x22>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	dc05      	bgt.n	80019c6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c0:	605a      	str	r2, [r3, #4]
    return 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e005      	b.n	80019d2 <_fstat+0x2e>
  }

  errno = EBADF;
 80019c6:	f008 fa17 	bl	8009df8 <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2209      	movs	r2, #9
 80019ce:	601a      	str	r2, [r3, #0]
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_MspInit+0x4c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a1a:	2007      	movs	r0, #7
 8001a1c:	f000 fd3c 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 fbfa 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	vl_clear_it_mask(&vl53l0x[0]);
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <EXTI1_IRQHandler+0x2c>)
 8001a86:	f7ff fc02 	bl	800128e <vl_clear_it_mask>
	results[0] = vl_perform_ranging_it(&vl53l0x[0]);
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <EXTI1_IRQHandler+0x2c>)
 8001a8c:	f7ff fc19 	bl	80012c2 <vl_perform_ranging_it>
 8001a90:	4603      	mov	r3, r0
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <EXTI1_IRQHandler+0x30>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
	//printf("Sensor 1 : %d\r\n", vl_perform_ranging_it(&vl53l0x[0]));
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f000 fee9 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000524 	.word	0x20000524
 8001ab0:	200004b4 	.word	0x200004b4

08001ab4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	vl_clear_it_mask(&vl53l0x[1]);
 8001ab8:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <EXTI4_IRQHandler+0x2c>)
 8001aba:	f7ff fbe8 	bl	800128e <vl_clear_it_mask>
	results[1] = vl_perform_ranging_it(&vl53l0x[1]);
 8001abe:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <EXTI4_IRQHandler+0x2c>)
 8001ac0:	f7ff fbff 	bl	80012c2 <vl_perform_ranging_it>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <EXTI4_IRQHandler+0x30>)
 8001ad0:	edc3 7a01 	vstr	s15, [r3, #4]
	//printf("Sensor 2 : %d\r\n", vl_perform_ranging_it(&vl53l0x[1]));
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f000 fecf 	bl	8002878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200006c4 	.word	0x200006c4
 8001ae4:	200004b4 	.word	0x200004b4

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f008 f96e 	bl	8009df8 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20020000 	.word	0x20020000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	200004bc 	.word	0x200004bc
 8001b50:	20000940 	.word	0x20000940

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <SystemInit+0x28>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <SystemInit+0x28>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SystemInit+0x28>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART2_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART2_UART_Init+0x4c>)
 8001bb8:	f002 fb3e 	bl	8004238 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bc2:	f7ff fe3f 	bl	8001844 <Error_Handler>
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200008a8 	.word	0x200008a8
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <MX_USART3_UART_Init+0x4c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 250000;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <MX_USART3_UART_Init+0x50>)
 8001be2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_USART3_UART_Init+0x48>)
 8001c0a:	f002 fb62 	bl	80042d2 <HAL_HalfDuplex_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001c14:	f7ff fe16 	bl	8001844 <Error_Handler>
  }

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000868 	.word	0x20000868
 8001c20:	40004800 	.word	0x40004800
 8001c24:	0003d090 	.word	0x0003d090

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a32      	ldr	r2, [pc, #200]	; (8001d10 <HAL_UART_MspInit+0xe8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12c      	bne.n	8001ca4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c82:	230c      	movs	r3, #12
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c92:	2307      	movs	r3, #7
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481e      	ldr	r0, [pc, #120]	; (8001d18 <HAL_UART_MspInit+0xf0>)
 8001c9e:	f000 fc3d 	bl	800251c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ca2:	e031      	b.n	8001d08 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_UART_MspInit+0xf4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12c      	bne.n	8001d08 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <HAL_UART_MspInit+0xec>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cec:	2312      	movs	r3, #18
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	; (8001d20 <HAL_UART_MspInit+0xf8>)
 8001d04:	f000 fc0a 	bl	800251c <HAL_GPIO_Init>
}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40004400 	.word	0x40004400
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	40020400 	.word	0x40020400

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d2a:	e003      	b.n	8001d34 <LoopCopyDataInit>

08001d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d32:	3104      	adds	r1, #4

08001d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d3c:	d3f6      	bcc.n	8001d2c <CopyDataInit>
  ldr  r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d40:	e002      	b.n	8001d48 <LoopFillZerobss>

08001d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d44:	f842 3b04 	str.w	r3, [r2], #4

08001d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d4c:	d3f9      	bcc.n	8001d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff ff01 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f008 f857 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7ff fbf3 	bl	8001540 <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d60:	0800cf7c 	.word	0x0800cf7c
  ldr  r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d68:	20000498 	.word	0x20000498
  ldr  r2, =_sbss
 8001d6c:	20000498 	.word	0x20000498
  ldr  r3, = _ebss
 8001d70:	2000093c 	.word	0x2000093c

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>

08001d76 <AX12_Init>:
#include "servoAX12.h"


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	79ba      	ldrb	r2, [r7, #6]
 8001d9c:	715a      	strb	r2, [r3, #5]

}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	0000      	movs	r0, r0
 8001dac:	0000      	movs	r0, r0
	...

08001db0 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dbc:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f7fe fbe1 	bl	8000588 <__aeabi_f2d>
 8001dc6:	a316      	add	r3, pc, #88	; (adr r3, 8001e20 <AX12_setRangeAngle+0x70>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fd5e 	bl	800088c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe ff06 	bl	8000be8 <__aeabi_d2uiz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe fbd1 	bl	8000588 <__aeabi_f2d>
 8001de6:	a30e      	add	r3, pc, #56	; (adr r3, 8001e20 <AX12_setRangeAngle+0x70>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fd4e 	bl	800088c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fef6 	bl	8000be8 <__aeabi_d2uiz>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001e00:	8afb      	ldrh	r3, [r7, #22]
 8001e02:	461a      	mov	r2, r3
 8001e04:	2106      	movs	r1, #6
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f9c2 	bl	8002190 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 8001e0c:	8abb      	ldrh	r3, [r7, #20]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2108      	movs	r1, #8
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f9bc 	bl	8002190 <AX12_sendTram2Byte>

}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2c54bf16 	.word	0x2c54bf16
 8001e24:	3fd2c4b1 	.word	0x3fd2c4b1

08001e28 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 8001e34:	edd7 7a00 	vldr	s15, [r7]
 8001e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3c:	ee17 3a90 	vmov	r3, s15
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb8e 	bl	8000564 <__aeabi_i2d>
 8001e48:	a30b      	add	r3, pc, #44	; (adr r3, 8001e78 <AX12_setMaxTorque+0x50>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fd1d 	bl	800088c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fec5 	bl	8000be8 <__aeabi_d2uiz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	461a      	mov	r2, r3
 8001e66:	210e      	movs	r1, #14
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f991 	bl	8002190 <AX12_sendTram2Byte>
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	905eab89 	.word	0x905eab89
 8001e7c:	3fb90641 	.word	0x3fb90641

08001e80 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2118      	movs	r1, #24
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f966 	bl	8002164 <AX12_sendTram1Byte>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 8001eac:	edd7 7a00 	vldr	s15, [r7]
 8001eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb52 	bl	8000564 <__aeabi_i2d>
 8001ec0:	a30b      	add	r3, pc, #44	; (adr r3, 8001ef0 <AX12_setPosition+0x50>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f7fe fce1 	bl	800088c <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe89 	bl	8000be8 <__aeabi_d2uiz>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	461a      	mov	r2, r3
 8001ede:	211e      	movs	r1, #30
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f955 	bl	8002190 <AX12_sendTram2Byte>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2c54bf16 	.word	0x2c54bf16
 8001ef4:	3fd2c4b1 	.word	0x3fd2c4b1

08001ef8 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 8001f04:	edd7 7a00 	vldr	s15, [r7]
 8001f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0c:	ee17 3a90 	vmov	r3, s15
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb26 	bl	8000564 <__aeabi_i2d>
 8001f18:	a30b      	add	r3, pc, #44	; (adr r3, 8001f48 <AX12_setMovingSpeed+0x50>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe5d 	bl	8000be8 <__aeabi_d2uiz>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	461a      	mov	r2, r3
 8001f36:	2120      	movs	r1, #32
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f929 	bl	8002190 <AX12_sendTram2Byte>
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	c83ed809 	.word	0xc83ed809
 8001f4c:	3fbc8721 	.word	0x3fbc8721

08001f50 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001f50:	b408      	push	{r3}
 8001f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
 8001f60:	4613      	mov	r3, r2
 8001f62:	70bb      	strb	r3, [r7, #2]
 8001f64:	466b      	mov	r3, sp
 8001f66:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 8001f68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f6c:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 8001f6e:	78fc      	ldrb	r4, [r7, #3]
 8001f70:	4623      	mov	r3, r4
 8001f72:	3b01      	subs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	b2e0      	uxtb	r0, r4
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	00cb      	lsls	r3, r1, #3
 8001f86:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f8a:	00c2      	lsls	r2, r0, #3
 8001f8c:	b2e0      	uxtb	r0, r4
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	00cb      	lsls	r3, r1, #3
 8001f9c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fa0:	00c2      	lsls	r2, r0, #3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	3307      	adds	r3, #7
 8001fa6:	08db      	lsrs	r3, r3, #3
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	ebad 0d03 	sub.w	sp, sp, r3
 8001fae:	ab02      	add	r3, sp, #8
 8001fb0:	3300      	adds	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	22ff      	movs	r2, #255	; 0xff
 8001fb8:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	791a      	ldrb	r2, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 8001fc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fcc:	3302      	adds	r3, #2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	78ba      	ldrb	r2, [r7, #2]
 8001fd8:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
 8001fde:	e00b      	b.n	8001ff8 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	60ba      	str	r2, [r7, #8]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	3305      	adds	r3, #5
 8001fec:	b2d1      	uxtb	r1, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
 8001ff8:	7dfa      	ldrb	r2, [r7, #23]
 8001ffa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3ee      	bcc.n	8001fe0 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 8002002:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002006:	2b03      	cmp	r3, #3
 8002008:	d867      	bhi.n	80020da <AX12_sendData+0x18a>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <AX12_sendData+0xc0>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	08002021 	.word	0x08002021
 8002014:	08002049 	.word	0x08002049
 8002018:	08002075 	.word	0x08002075
 800201c:	080020a5 	.word	0x080020a5
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	7898      	ldrb	r0, [r3, #2]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	78d9      	ldrb	r1, [r3, #3]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	791a      	ldrb	r2, [r3, #4]
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	1e5c      	subs	r4, r3, #1
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2300      	movs	r3, #0
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2300      	movs	r3, #0
 800203a:	f000 f861 	bl	8002100 <AX12_calculChecksum>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	551a      	strb	r2, [r3, r4]
 8002046:	e049      	b.n	80020dc <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7898      	ldrb	r0, [r3, #2]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	78d9      	ldrb	r1, [r3, #3]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	791a      	ldrb	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	795d      	ldrb	r5, [r3, #5]
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	1e5c      	subs	r4, r3, #1
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2300      	movs	r3, #0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	462b      	mov	r3, r5
 8002066:	f000 f84b 	bl	8002100 <AX12_calculChecksum>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	551a      	strb	r2, [r3, r4]
 8002072:	e033      	b.n	80020dc <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	7898      	ldrb	r0, [r3, #2]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	78d9      	ldrb	r1, [r3, #3]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	791d      	ldrb	r5, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	795e      	ldrb	r6, [r3, #5]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	799b      	ldrb	r3, [r3, #6]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	1e54      	subs	r4, r2, #1
 800208c:	2200      	movs	r2, #0
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4633      	mov	r3, r6
 8002094:	462a      	mov	r2, r5
 8002096:	f000 f833 	bl	8002100 <AX12_calculChecksum>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	551a      	strb	r2, [r3, r4]
 80020a2:	e01b      	b.n	80020dc <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	7898      	ldrb	r0, [r3, #2]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	78dd      	ldrb	r5, [r3, #3]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	791e      	ldrb	r6, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 c005 	ldrb.w	ip, [r3, #5]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	799b      	ldrb	r3, [r3, #6]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	79d2      	ldrb	r2, [r2, #7]
 80020be:	78f9      	ldrb	r1, [r7, #3]
 80020c0:	1e4c      	subs	r4, r1, #1
 80020c2:	9201      	str	r2, [sp, #4]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4663      	mov	r3, ip
 80020c8:	4632      	mov	r2, r6
 80020ca:	4629      	mov	r1, r5
 80020cc:	f000 f818 	bl	8002100 <AX12_calculChecksum>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	551a      	strb	r2, [r3, r4]
 80020d8:	e000      	b.n	80020dc <AX12_sendData+0x18c>
	default : break;
 80020da:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020ea:	f002 f947 	bl	800437c <HAL_UART_Transmit>
 80020ee:	46c5      	mov	sp, r8
}
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020fa:	b001      	add	sp, #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop

08002100 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8002100:	b490      	push	{r4, r7}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4623      	mov	r3, r4
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	4603      	mov	r3, r0
 8002114:	71bb      	strb	r3, [r7, #6]
 8002116:	460b      	mov	r3, r1
 8002118:	717b      	strb	r3, [r7, #5]
 800211a:	4613      	mov	r3, r2
 800211c:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	b29a      	uxth	r2, r3
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b29a      	uxth	r2, r3
 800212a:	797b      	ldrb	r3, [r7, #5]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4413      	add	r3, r2
 8002130:	b29a      	uxth	r2, r3
 8002132:	793b      	ldrb	r3, [r7, #4]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4413      	add	r3, r2
 8002138:	b29a      	uxth	r2, r3
 800213a:	7e3b      	ldrb	r3, [r7, #24]
 800213c:	b29b      	uxth	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b29a      	uxth	r2, r3
 8002142:	7f3b      	ldrb	r3, [r7, #28]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4413      	add	r3, r2
 8002148:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	43db      	mvns	r3, r3
 800214e:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8002150:	89fb      	ldrh	r3, [r7, #14]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	b2db      	uxtb	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bc90      	pop	{r4, r7}
 8002162:	4770      	bx	lr

08002164 <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
 8002170:	4613      	mov	r3, r2
 8002172:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	78ba      	ldrb	r2, [r7, #2]
 8002178:	9201      	str	r2, [sp, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2302      	movs	r3, #2
 800217e:	2203      	movs	r2, #3
 8002180:	2108      	movs	r1, #8
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fee4 	bl	8001f50 <AX12_sendData>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af04      	add	r7, sp, #16
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
 800219c:	4613      	mov	r3, r2
 800219e:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 80021a0:	883b      	ldrh	r3, [r7, #0]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 80021a8:	883b      	ldrh	r3, [r7, #0]
 80021aa:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	7bba      	ldrb	r2, [r7, #14]
 80021b0:	7bf9      	ldrb	r1, [r7, #15]
 80021b2:	9102      	str	r1, [sp, #8]
 80021b4:	9201      	str	r2, [sp, #4]
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2303      	movs	r3, #3
 80021ba:	2203      	movs	r2, #3
 80021bc:	2109      	movs	r1, #9
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fec6 	bl	8001f50 <AX12_sendData>
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_Init+0x40>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_Init+0x40>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_Init+0x40>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 f94f 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fbec 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f967 	bl	8002502 <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 f92f 	bl	80024ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000000 	.word	0x20000000
 8002268:	20000008 	.word	0x20000008
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000008 	.word	0x20000008
 8002294:	200008e8 	.word	0x200008e8

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200008e8 	.word	0x200008e8

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff29 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff3e 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff31 	bl	800235c <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e165      	b.n	8002804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8154 	bne.w	80027fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d00b      	beq.n	8002576 <HAL_GPIO_Init+0x5a>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256a:	2b11      	cmp	r3, #17
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b12      	cmp	r3, #18
 8002574:	d130      	bne.n	80025d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 0201 	and.w	r2, r3, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0xfc>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b12      	cmp	r3, #18
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80ae 	beq.w	80027fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_GPIO_Init+0x300>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_GPIO_Init+0x300>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_GPIO_Init+0x300>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_GPIO_Init+0x304>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <HAL_GPIO_Init+0x308>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d025      	beq.n	8002736 <HAL_GPIO_Init+0x21a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4e      	ldr	r2, [pc, #312]	; (8002828 <HAL_GPIO_Init+0x30c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01f      	beq.n	8002732 <HAL_GPIO_Init+0x216>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4d      	ldr	r2, [pc, #308]	; (800282c <HAL_GPIO_Init+0x310>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x212>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <HAL_GPIO_Init+0x314>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x20e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4b      	ldr	r2, [pc, #300]	; (8002834 <HAL_GPIO_Init+0x318>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x20a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <HAL_GPIO_Init+0x31c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x206>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a49      	ldr	r2, [pc, #292]	; (800283c <HAL_GPIO_Init+0x320>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x202>
 800271a:	2306      	movs	r3, #6
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 800271e:	2307      	movs	r3, #7
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	; (8002820 <HAL_GPIO_Init+0x304>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_GPIO_Init+0x324>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277a:	4a31      	ldr	r2, [pc, #196]	; (8002840 <HAL_GPIO_Init+0x324>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_GPIO_Init+0x324>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a4:	4a26      	ldr	r2, [pc, #152]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f ae96 	bls.w	8002538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40021400 	.word	0x40021400
 800283c:	40021800 	.word	0x40021800
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002860:	e003      	b.n	800286a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f806 	bl	80028a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40013c00 	.word	0x40013c00

080028a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e12b      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fc0a 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002924:	f001 f854 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a81      	ldr	r2, [pc, #516]	; (8002b34 <HAL_I2C_Init+0x274>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d807      	bhi.n	8002944 <HAL_I2C_Init+0x84>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_I2C_Init+0x278>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e006      	b.n	8002952 <HAL_I2C_Init+0x92>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_I2C_Init+0x27c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0e7      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <HAL_I2C_Init+0x280>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_I2C_Init+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d802      	bhi.n	8002994 <HAL_I2C_Init+0xd4>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3301      	adds	r3, #1
 8002992:	e009      	b.n	80029a8 <HAL_I2C_Init+0xe8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_I2C_Init+0x284>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	3301      	adds	r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	495c      	ldr	r1, [pc, #368]	; (8002b34 <HAL_I2C_Init+0x274>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d819      	bhi.n	80029fc <HAL_I2C_Init+0x13c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e59      	subs	r1, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029dc:	400b      	ands	r3, r1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_I2C_Init+0x138>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e59      	subs	r1, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	e051      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e04f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <HAL_I2C_Init+0x168>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e012      	b.n	8002a4e <HAL_I2C_Init+0x18e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Init+0x196>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <HAL_I2C_Init+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e58      	subs	r0, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6911      	ldr	r1, [r2, #16]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	001e847f 	.word	0x001e847f
 8002b3c:	003d08ff 	.word	0x003d08ff
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff fb9c 	bl	8002298 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80e0 	bne.w	8002d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	4970      	ldr	r1, [pc, #448]	; (8002d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fc58 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0d3      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x50>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	; 0x21
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fac2 	bl	8003190 <I2C_MasterRequestWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08d      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c2c:	e066      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fcd2 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fcc2 	bl	800365e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d107      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d194      	bne.n	8002c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d58:	f7ff fa9e 	bl	8002298 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 820b 	bne.w	8003182 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	497c      	ldr	r1, [pc, #496]	; (8002f68 <HAL_I2C_Master_Receive+0x224>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fb5a 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	e1fe      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2C_Master_Receive+0x50>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e1f7      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d007      	beq.n	8002dba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2222      	movs	r2, #34	; 0x22
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a5c      	ldr	r2, [pc, #368]	; (8002f6c <HAL_I2C_Master_Receive+0x228>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa46 	bl	8003294 <I2C_MasterRequestRead>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1b8      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e18c      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d11b      	bne.n	8002e82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e16c      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d11b      	bne.n	8002ec2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	e14c      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ee8:	e138      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	f200 80f1 	bhi.w	80030d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d123      	bne.n	8002f44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fbed 	bl	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e139      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f42:	e10b      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d14e      	bne.n	8002fea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	4906      	ldr	r1, [pc, #24]	; (8002f70 <HAL_I2C_Master_Receive+0x22c>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa6a 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e10e      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
 8002f66:	bf00      	nop
 8002f68:	00100002 	.word	0x00100002
 8002f6c:	ffff0000 	.word	0xffff0000
 8002f70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe8:	e0b8      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4966      	ldr	r1, [pc, #408]	; (800318c <HAL_I2C_Master_Receive+0x448>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fa1b 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0bf      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2200      	movs	r2, #0
 800304e:	494f      	ldr	r1, [pc, #316]	; (800318c <HAL_I2C_Master_Receive+0x448>)
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f9ed 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e091      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d4:	e042      	b.n	800315c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fb00 	bl	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e04c      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b04      	cmp	r3, #4
 8003128:	d118      	bne.n	800315c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	f47f aec2 	bne.w	8002eea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	00010004 	.word	0x00010004

08003190 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	460b      	mov	r3, r1
 800319e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d006      	beq.n	80031ba <I2C_MasterRequestWrite+0x2a>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d003      	beq.n	80031ba <I2C_MasterRequestWrite+0x2a>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031b8:	d108      	bne.n	80031cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00b      	b.n	80031e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	2b12      	cmp	r3, #18
 80031d2:	d107      	bne.n	80031e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f91d 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320a:	d103      	bne.n	8003214 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e035      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003220:	d108      	bne.n	8003234 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003230:	611a      	str	r2, [r3, #16]
 8003232:	e01b      	b.n	800326c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	11db      	asrs	r3, r3, #7
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 0306 	and.w	r3, r3, #6
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f063 030f 	orn	r3, r3, #15
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <I2C_MasterRequestWrite+0xfc>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f943 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e010      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4907      	ldr	r1, [pc, #28]	; (8003290 <I2C_MasterRequestWrite+0x100>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f933 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00010008 	.word	0x00010008
 8003290:	00010002 	.word	0x00010002

08003294 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d006      	beq.n	80032ce <I2C_MasterRequestRead+0x3a>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d003      	beq.n	80032ce <I2C_MasterRequestRead+0x3a>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032cc:	d108      	bne.n	80032e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e00b      	b.n	80032f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	2b11      	cmp	r3, #17
 80032e6:	d107      	bne.n	80032f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f893 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d103      	bne.n	8003328 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e079      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003334:	d108      	bne.n	8003348 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e05f      	b.n	8003408 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003348:	897b      	ldrh	r3, [r7, #10]
 800334a:	11db      	asrs	r3, r3, #7
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 0306 	and.w	r3, r3, #6
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f063 030f 	orn	r3, r3, #15
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4930      	ldr	r1, [pc, #192]	; (8003428 <I2C_MasterRequestRead+0x194>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f8b9 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e054      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4929      	ldr	r1, [pc, #164]	; (800342c <I2C_MasterRequestRead+0x198>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f8a9 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e044      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f831 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00d      	beq.n	80033f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d103      	bne.n	80033ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e017      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033f0:	897b      	ldrh	r3, [r7, #10]
 80033f2:	11db      	asrs	r3, r3, #7
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0306 	and.w	r3, r3, #6
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f063 030e 	orn	r3, r3, #14
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4907      	ldr	r1, [pc, #28]	; (800342c <I2C_MasterRequestRead+0x198>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f865 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	00010008 	.word	0x00010008
 800342c:	00010002 	.word	0x00010002

08003430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003440:	e025      	b.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d021      	beq.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe ff25 	bl	8002298 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e023      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10d      	bne.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	e00c      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d0b6      	beq.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ec:	e051      	b.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fc:	d123      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003516:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e046      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d021      	beq.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fe fea3 	bl	8002298 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e020      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10c      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e00b      	b.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d18d      	bne.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e8:	e02d      	b.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8ce 	bl	800378c <I2C_IsAcknowledgeFailed>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e02d      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d021      	beq.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fe fe49 	bl	8002298 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d1ca      	bne.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366a:	e02d      	b.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f88d 	bl	800378c <I2C_IsAcknowledgeFailed>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e02d      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d021      	beq.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe fe08 	bl	8002298 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d1ca      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036ec:	e042      	b.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d119      	bne.n	8003730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0210 	mvn.w	r2, #16
 8003704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e029      	b.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003730:	f7fe fdb2 	bl	8002298 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e007      	b.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d1b5      	bne.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d11b      	bne.n	80037dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0cc      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d90c      	bls.n	8003828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b65      	ldr	r3, [pc, #404]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e067      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4934      	ldr	r1, [pc, #208]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe fcdc 	bl	8002298 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fe fcd8 	bl	8002298 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e04f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d20c      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f855 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fc3c 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800cb74 	.word	0x0800cb74
 80039b0:	20000000 	.word	0x20000000
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	0800cb84 	.word	0x0800cb84

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffdc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	0800cb84 	.word	0x0800cb84

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b088      	sub	sp, #32
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	4bce      	ldr	r3, [pc, #824]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	f200 818d 	bhi.w	8003d64 <HAL_RCC_GetSysClockFreq+0x344>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_RCC_GetSysClockFreq+0x30>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003d65 	.word	0x08003d65
 8003a58:	08003d65 	.word	0x08003d65
 8003a5c:	08003d65 	.word	0x08003d65
 8003a60:	08003a8b 	.word	0x08003a8b
 8003a64:	08003d65 	.word	0x08003d65
 8003a68:	08003d65 	.word	0x08003d65
 8003a6c:	08003d65 	.word	0x08003d65
 8003a70:	08003a91 	.word	0x08003a91
 8003a74:	08003d65 	.word	0x08003d65
 8003a78:	08003d65 	.word	0x08003d65
 8003a7c:	08003d65 	.word	0x08003d65
 8003a80:	08003c05 	.word	0x08003c05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a84:	4bbd      	ldr	r3, [pc, #756]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a86:	61bb      	str	r3, [r7, #24]
       break;
 8003a88:	e16f      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8a:	4bbd      	ldr	r3, [pc, #756]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x360>)
 8003a8c:	61bb      	str	r3, [r7, #24]
      break;
 8003a8e:	e16c      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a90:	4bb9      	ldr	r3, [pc, #740]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a98:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9a:	4bb7      	ldr	r3, [pc, #732]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d053      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa6:	4bb4      	ldr	r3, [pc, #720]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	099b      	lsrs	r3, r3, #6
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	ea02 0400 	and.w	r4, r2, r0
 8003abe:	603c      	str	r4, [r7, #0]
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ac8:	4620      	mov	r0, r4
 8003aca:	4629      	mov	r1, r5
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	014b      	lsls	r3, r1, #5
 8003ad6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ada:	0142      	lsls	r2, r0, #5
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	1ac0      	subs	r0, r0, r3
 8003ae4:	462b      	mov	r3, r5
 8003ae6:	eb61 0103 	sbc.w	r1, r1, r3
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	018b      	lsls	r3, r1, #6
 8003af4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003af8:	0182      	lsls	r2, r0, #6
 8003afa:	1a12      	subs	r2, r2, r0
 8003afc:	eb63 0301 	sbc.w	r3, r3, r1
 8003b00:	f04f 0000 	mov.w	r0, #0
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	00d9      	lsls	r1, r3, #3
 8003b0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0e:	00d0      	lsls	r0, r2, #3
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4621      	mov	r1, r4
 8003b16:	1852      	adds	r2, r2, r1
 8003b18:	4629      	mov	r1, r5
 8003b1a:	eb43 0101 	adc.w	r1, r3, r1
 8003b1e:	460b      	mov	r3, r1
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0259      	lsls	r1, r3, #9
 8003b2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b2e:	0250      	lsls	r0, r2, #9
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f7fd f872 	bl	8000c28 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e04c      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	461a      	mov	r2, r3
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	ea02 0a00 	and.w	sl, r2, r0
 8003b66:	ea03 0b01 	and.w	fp, r3, r1
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	014b      	lsls	r3, r1, #5
 8003b78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b7c:	0142      	lsls	r2, r0, #5
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	ebb0 000a 	subs.w	r0, r0, sl
 8003b86:	eb61 010b 	sbc.w	r1, r1, fp
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	018b      	lsls	r3, r1, #6
 8003b94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b98:	0182      	lsls	r2, r0, #6
 8003b9a:	1a12      	subs	r2, r2, r0
 8003b9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba0:	f04f 0000 	mov.w	r0, #0
 8003ba4:	f04f 0100 	mov.w	r1, #0
 8003ba8:	00d9      	lsls	r1, r3, #3
 8003baa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bae:	00d0      	lsls	r0, r2, #3
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	eb12 020a 	adds.w	r2, r2, sl
 8003bb8:	eb43 030b 	adc.w	r3, r3, fp
 8003bbc:	f04f 0000 	mov.w	r0, #0
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	0299      	lsls	r1, r3, #10
 8003bc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bca:	0290      	lsls	r0, r2, #10
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	f7fd f824 	bl	8000c28 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4613      	mov	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003be8:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	61bb      	str	r3, [r7, #24]
      break;
 8003c02:	e0b2      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c04:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0e:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04d      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1a:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	461a      	mov	r2, r3
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	ea02 0800 	and.w	r8, r2, r0
 8003c32:	ea03 0901 	and.w	r9, r3, r1
 8003c36:	4640      	mov	r0, r8
 8003c38:	4649      	mov	r1, r9
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	014b      	lsls	r3, r1, #5
 8003c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c48:	0142      	lsls	r2, r0, #5
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	ebb0 0008 	subs.w	r0, r0, r8
 8003c52:	eb61 0109 	sbc.w	r1, r1, r9
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	018b      	lsls	r3, r1, #6
 8003c60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c64:	0182      	lsls	r2, r0, #6
 8003c66:	1a12      	subs	r2, r2, r0
 8003c68:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	00d9      	lsls	r1, r3, #3
 8003c76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c7a:	00d0      	lsls	r0, r2, #3
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	eb12 0208 	adds.w	r2, r2, r8
 8003c84:	eb43 0309 	adc.w	r3, r3, r9
 8003c88:	f04f 0000 	mov.w	r0, #0
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	0259      	lsls	r1, r3, #9
 8003c92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c96:	0250      	lsls	r0, r2, #9
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	f7fc ffbe 	bl	8000c28 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e04a      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	ea02 0400 	and.w	r4, r2, r0
 8003cce:	ea03 0501 	and.w	r5, r3, r1
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	014b      	lsls	r3, r1, #5
 8003ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ce4:	0142      	lsls	r2, r0, #5
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	1b00      	subs	r0, r0, r4
 8003cec:	eb61 0105 	sbc.w	r1, r1, r5
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	018b      	lsls	r3, r1, #6
 8003cfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cfe:	0182      	lsls	r2, r0, #6
 8003d00:	1a12      	subs	r2, r2, r0
 8003d02:	eb63 0301 	sbc.w	r3, r3, r1
 8003d06:	f04f 0000 	mov.w	r0, #0
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	00d9      	lsls	r1, r3, #3
 8003d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d14:	00d0      	lsls	r0, r2, #3
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	1912      	adds	r2, r2, r4
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	0299      	lsls	r1, r3, #10
 8003d2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d2e:	0290      	lsls	r0, r2, #10
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	f7fc ff72 	bl	8000c28 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0f1b      	lsrs	r3, r3, #28
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	61bb      	str	r3, [r7, #24]
      break;
 8003d62:	e002      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d66:	61bb      	str	r3, [r7, #24]
      break;
 8003d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6a:	69bb      	ldr	r3, [r7, #24]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400
 8003d80:	007a1200 	.word	0x007a1200

08003d84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8083 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d9e:	4b95      	ldr	r3, [pc, #596]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d019      	beq.n	8003dde <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003daa:	4b92      	ldr	r3, [pc, #584]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db6:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d00c      	beq.n	8003dde <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc4:	4b8b      	ldr	r3, [pc, #556]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d112      	bne.n	8003df6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd0:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ddc:	d10b      	bne.n	8003df6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dde:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d05b      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x11e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d157      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e216      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x8a>
 8003e00:	4b7c      	ldr	r3, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7b      	ldr	r2, [pc, #492]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	e01d      	b.n	8003e4a <HAL_RCC_OscConfig+0xc6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCC_OscConfig+0xae>
 8003e18:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a75      	ldr	r2, [pc, #468]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a72      	ldr	r2, [pc, #456]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e00b      	b.n	8003e4a <HAL_RCC_OscConfig+0xc6>
 8003e32:	4b70      	ldr	r3, [pc, #448]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6f      	ldr	r2, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6c      	ldr	r2, [pc, #432]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fe fa21 	bl	8002298 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fa1d 	bl	8002298 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	; 0x64
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1db      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0xd6>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fa0d 	bl	8002298 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e82:	f7fe fa09 	bl	8002298 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	; 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1c7      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e94:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0xfe>
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d06f      	beq.n	8003f90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ebc:	4b4d      	ldr	r3, [pc, #308]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec8:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed4:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	d11c      	bne.n	8003f1a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee0:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eec:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_OscConfig+0x180>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e18f      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4938      	ldr	r1, [pc, #224]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f18:	e03a      	b.n	8003f90 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d020      	beq.n	8003f64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f22:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <HAL_RCC_OscConfig+0x274>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe f9b6 	bl	8002298 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fe f9b2 	bl	8002298 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e170      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b29      	ldr	r3, [pc, #164]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4925      	ldr	r1, [pc, #148]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
 8003f62:	e015      	b.n	8003f90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x274>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fe f995 	bl	8002298 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fe f991 	bl	8002298 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e14f      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d037      	beq.n	800400c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_RCC_OscConfig+0x278>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fe f975 	bl	8002298 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb2:	f7fe f971 	bl	8002298 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e12f      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x22e>
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCC_OscConfig+0x278>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd8:	f7fe f95e 	bl	8002298 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fde:	e00f      	b.n	8004000 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fe f95a 	bl	8002298 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d908      	bls.n	8004000 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e118      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470000 	.word	0x42470000
 8003ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b8a      	ldr	r3, [pc, #552]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e9      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8097 	beq.w	8004148 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b83      	ldr	r3, [pc, #524]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a7e      	ldr	r2, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b7c      	ldr	r3, [pc, #496]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b79      	ldr	r3, [pc, #484]	; (8004230 <HAL_RCC_OscConfig+0x4ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	; (8004230 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fe f919 	bl	8002298 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fe f915 	bl	8002298 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0d3      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b6c      	ldr	r3, [pc, #432]	; (8004230 <HAL_RCC_OscConfig+0x4ac>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x31a>
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a65      	ldr	r2, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	e01c      	b.n	80040d8 <HAL_RCC_OscConfig+0x354>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x33c>
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a60      	ldr	r2, [pc, #384]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
 80040b2:	4b5e      	ldr	r3, [pc, #376]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a5d      	ldr	r2, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x354>
 80040c0:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a59      	ldr	r2, [pc, #356]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a56      	ldr	r2, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fe f8da 	bl	8002298 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fe f8d6 	bl	8002298 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e092      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ee      	beq.n	80040e8 <HAL_RCC_OscConfig+0x364>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fe f8c4 	bl	8002298 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fe f8c0 	bl	8002298 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e07c      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412a:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ee      	bne.n	8004114 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	4a3a      	ldr	r2, [pc, #232]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004146:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d068      	beq.n	8004222 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004150:	4b36      	ldr	r3, [pc, #216]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 030c 	and.w	r3, r3, #12
 8004158:	2b08      	cmp	r3, #8
 800415a:	d060      	beq.n	800421e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d145      	bne.n	80041f0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b33      	ldr	r3, [pc, #204]	; (8004234 <HAL_RCC_OscConfig+0x4b0>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe f895 	bl	8002298 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004172:	f7fe f891 	bl	8002298 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e04f      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	019b      	lsls	r3, r3, #6
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	3b01      	subs	r3, #1
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	071b      	lsls	r3, r3, #28
 80041bc:	491b      	ldr	r1, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <HAL_RCC_OscConfig+0x4b0>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe f866 	bl	8002298 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d0:	f7fe f862 	bl	8002298 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e020      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x44c>
 80041ee:	e018      	b.n	8004222 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f0:	4b10      	ldr	r3, [pc, #64]	; (8004234 <HAL_RCC_OscConfig+0x4b0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe f84f 	bl	8002298 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fe f84b 	bl	8002298 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e009      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_OscConfig+0x4a8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x47a>
 800421c:	e001      	b.n	8004222 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000
 8004234:	42470060 	.word	0x42470060

08004238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e03f      	b.n	80042ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd fce2 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2224      	movs	r2, #36	; 0x24
 8004268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800427a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fa07 	bl	8004690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e047      	b.n	8004374 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fd fc95 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2224      	movs	r2, #36	; 0x24
 8004302:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004314:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9ba 	bl	8004690 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800432a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800433a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0208 	orr.w	r2, r2, #8
 800434a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800435a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b20      	cmp	r3, #32
 800439a:	f040 8083 	bne.w	80044a4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_UART_Transmit+0x2e>
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07b      	b.n	80044a6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Transmit+0x40>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e074      	b.n	80044a6 <HAL_UART_Transmit+0x12a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2221      	movs	r2, #33	; 0x21
 80043ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043d2:	f7fd ff61 	bl	8002298 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80043ec:	e042      	b.n	8004474 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d122      	bne.n	800444c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f8f2 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e042      	b.n	80044a6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004432:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3302      	adds	r3, #2
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	e017      	b.n	8004474 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3301      	adds	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	e013      	b.n	8004474 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2200      	movs	r2, #0
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f8cf 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e01f      	b.n	80044a6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	60ba      	str	r2, [r7, #8]
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1b7      	bne.n	80043ee <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	2140      	movs	r1, #64	; 0x40
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f8b6 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e006      	b.n	80044a6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b088      	sub	sp, #32
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	f040 8090 	bne.w	80045f0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Receive+0x2e>
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e088      	b.n	80045f2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Receive+0x40>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e081      	b.n	80045f2 <HAL_UART_Receive+0x144>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2222      	movs	r2, #34	; 0x22
 8004500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004504:	f7fd fec8 	bl	8002298 <HAL_GetTick>
 8004508:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800451e:	e05c      	b.n	80045da <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d12b      	bne.n	8004590 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	2120      	movs	r1, #32
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f859 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10c      	bne.n	8004578 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	b29b      	uxth	r3, r3
 8004566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456a:	b29a      	uxth	r2, r3
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3302      	adds	r3, #2
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	e030      	b.n	80045da <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b29b      	uxth	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	b29a      	uxth	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3301      	adds	r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	e024      	b.n	80045da <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	2120      	movs	r1, #32
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f82d 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e023      	b.n	80045f2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	60ba      	str	r2, [r7, #8]
 80045be:	b2ca      	uxtb	r2, r1
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e00a      	b.n	80045da <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d19d      	bne.n	8004520 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	e02c      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d028      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	f7fd fe3d 	bl	8002298 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	429a      	cmp	r2, r3
 8004628:	d21d      	bcs.n	8004666 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004638:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d0c3      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	b0bd      	sub	sp, #244	; 0xf4
 8004696:	af00      	add	r7, sp, #0
 8004698:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	68d9      	ldr	r1, [r3, #12]
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	ea40 0301 	orr.w	r3, r0, r1
 80046b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046e8:	f021 010c 	bic.w	r1, r1, #12
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046f6:	430b      	orrs	r3, r1
 80046f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	6999      	ldr	r1, [r3, #24]
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	ea40 0301 	orr.w	r3, r0, r1
 8004716:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004722:	f040 81a5 	bne.w	8004a70 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4bcd      	ldr	r3, [pc, #820]	; (8004a64 <UART_SetConfig+0x3d4>)
 800472e:	429a      	cmp	r2, r3
 8004730:	d006      	beq.n	8004740 <UART_SetConfig+0xb0>
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4bcb      	ldr	r3, [pc, #812]	; (8004a68 <UART_SetConfig+0x3d8>)
 800473a:	429a      	cmp	r2, r3
 800473c:	f040 80cb 	bne.w	80048d6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7ff f95a 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8004744:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004748:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800474c:	461c      	mov	r4, r3
 800474e:	f04f 0500 	mov.w	r5, #0
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	1891      	adds	r1, r2, r2
 8004758:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800475c:	415b      	adcs	r3, r3
 800475e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004762:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004766:	1912      	adds	r2, r2, r4
 8004768:	eb45 0303 	adc.w	r3, r5, r3
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	00d9      	lsls	r1, r3, #3
 8004776:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800477a:	00d0      	lsls	r0, r2, #3
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	1911      	adds	r1, r2, r4
 8004782:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004786:	416b      	adcs	r3, r5
 8004788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	1891      	adds	r1, r2, r2
 800479a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800479e:	415b      	adcs	r3, r3
 80047a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80047a8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80047ac:	f7fc fa3c 	bl	8000c28 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4bad      	ldr	r3, [pc, #692]	; (8004a6c <UART_SetConfig+0x3dc>)
 80047b6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	011e      	lsls	r6, r3, #4
 80047be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047c2:	461c      	mov	r4, r3
 80047c4:	f04f 0500 	mov.w	r5, #0
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	1891      	adds	r1, r2, r2
 80047ce:	67b9      	str	r1, [r7, #120]	; 0x78
 80047d0:	415b      	adcs	r3, r3
 80047d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80047d8:	1912      	adds	r2, r2, r4
 80047da:	eb45 0303 	adc.w	r3, r5, r3
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	00d9      	lsls	r1, r3, #3
 80047e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ec:	00d0      	lsls	r0, r2, #3
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	1911      	adds	r1, r2, r4
 80047f4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80047f8:	416b      	adcs	r3, r5
 80047fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	1891      	adds	r1, r2, r2
 800480c:	6739      	str	r1, [r7, #112]	; 0x70
 800480e:	415b      	adcs	r3, r3
 8004810:	677b      	str	r3, [r7, #116]	; 0x74
 8004812:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004816:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800481a:	f7fc fa05 	bl	8000c28 <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4b92      	ldr	r3, [pc, #584]	; (8004a6c <UART_SetConfig+0x3dc>)
 8004824:	fba3 1302 	umull	r1, r3, r3, r2
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	3332      	adds	r3, #50	; 0x32
 8004836:	4a8d      	ldr	r2, [pc, #564]	; (8004a6c <UART_SetConfig+0x3dc>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004844:	441e      	add	r6, r3
 8004846:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800484a:	4618      	mov	r0, r3
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	1894      	adds	r4, r2, r2
 8004856:	66bc      	str	r4, [r7, #104]	; 0x68
 8004858:	415b      	adcs	r3, r3
 800485a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800485c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004860:	1812      	adds	r2, r2, r0
 8004862:	eb41 0303 	adc.w	r3, r1, r3
 8004866:	f04f 0400 	mov.w	r4, #0
 800486a:	f04f 0500 	mov.w	r5, #0
 800486e:	00dd      	lsls	r5, r3, #3
 8004870:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004874:	00d4      	lsls	r4, r2, #3
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	1814      	adds	r4, r2, r0
 800487c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004880:	414b      	adcs	r3, r1
 8004882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	461a      	mov	r2, r3
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	1891      	adds	r1, r2, r2
 8004894:	6639      	str	r1, [r7, #96]	; 0x60
 8004896:	415b      	adcs	r3, r3
 8004898:	667b      	str	r3, [r7, #100]	; 0x64
 800489a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800489e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048a2:	f7fc f9c1 	bl	8000c28 <__aeabi_uldivmod>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4b70      	ldr	r3, [pc, #448]	; (8004a6c <UART_SetConfig+0x3dc>)
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	2164      	movs	r1, #100	; 0x64
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	3332      	adds	r3, #50	; 0x32
 80048be:	4a6b      	ldr	r2, [pc, #428]	; (8004a6c <UART_SetConfig+0x3dc>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	f003 0207 	and.w	r2, r3, #7
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4432      	add	r2, r6
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	e26d      	b.n	8004db2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048d6:	f7ff f87b 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80048da:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048e2:	461c      	mov	r4, r3
 80048e4:	f04f 0500 	mov.w	r5, #0
 80048e8:	4622      	mov	r2, r4
 80048ea:	462b      	mov	r3, r5
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80048f0:	415b      	adcs	r3, r3
 80048f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048f8:	1912      	adds	r2, r2, r4
 80048fa:	eb45 0303 	adc.w	r3, r5, r3
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	00d9      	lsls	r1, r3, #3
 8004908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800490c:	00d0      	lsls	r0, r2, #3
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	1911      	adds	r1, r2, r4
 8004914:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004918:	416b      	adcs	r3, r5
 800491a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	461a      	mov	r2, r3
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	1891      	adds	r1, r2, r2
 800492c:	6539      	str	r1, [r7, #80]	; 0x50
 800492e:	415b      	adcs	r3, r3
 8004930:	657b      	str	r3, [r7, #84]	; 0x54
 8004932:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004936:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800493a:	f7fc f975 	bl	8000c28 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <UART_SetConfig+0x3dc>)
 8004944:	fba3 2302 	umull	r2, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	011e      	lsls	r6, r3, #4
 800494c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004950:	461c      	mov	r4, r3
 8004952:	f04f 0500 	mov.w	r5, #0
 8004956:	4622      	mov	r2, r4
 8004958:	462b      	mov	r3, r5
 800495a:	1891      	adds	r1, r2, r2
 800495c:	64b9      	str	r1, [r7, #72]	; 0x48
 800495e:	415b      	adcs	r3, r3
 8004960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004962:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004966:	1912      	adds	r2, r2, r4
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	f04f 0000 	mov.w	r0, #0
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	00d9      	lsls	r1, r3, #3
 8004976:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800497a:	00d0      	lsls	r0, r2, #3
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	1911      	adds	r1, r2, r4
 8004982:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004986:	416b      	adcs	r3, r5
 8004988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	461a      	mov	r2, r3
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	1891      	adds	r1, r2, r2
 800499a:	6439      	str	r1, [r7, #64]	; 0x40
 800499c:	415b      	adcs	r3, r3
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
 80049a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049a4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80049a8:	f7fc f93e 	bl	8000c28 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <UART_SetConfig+0x3dc>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	; 0x64
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <UART_SetConfig+0x3dc>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d2:	441e      	add	r6, r3
 80049d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049d8:	4618      	mov	r0, r3
 80049da:	f04f 0100 	mov.w	r1, #0
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	1894      	adds	r4, r2, r2
 80049e4:	63bc      	str	r4, [r7, #56]	; 0x38
 80049e6:	415b      	adcs	r3, r3
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049ee:	1812      	adds	r2, r2, r0
 80049f0:	eb41 0303 	adc.w	r3, r1, r3
 80049f4:	f04f 0400 	mov.w	r4, #0
 80049f8:	f04f 0500 	mov.w	r5, #0
 80049fc:	00dd      	lsls	r5, r3, #3
 80049fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a02:	00d4      	lsls	r4, r2, #3
 8004a04:	4622      	mov	r2, r4
 8004a06:	462b      	mov	r3, r5
 8004a08:	1814      	adds	r4, r2, r0
 8004a0a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004a0e:	414b      	adcs	r3, r1
 8004a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	6339      	str	r1, [r7, #48]	; 0x30
 8004a24:	415b      	adcs	r3, r3
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
 8004a28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a2c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a30:	f7fc f8fa 	bl	8000c28 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <UART_SetConfig+0x3dc>)
 8004a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2164      	movs	r1, #100	; 0x64
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	3332      	adds	r3, #50	; 0x32
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <UART_SetConfig+0x3dc>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	f003 0207 	and.w	r2, r3, #7
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4432      	add	r2, r6
 8004a60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a62:	e1a6      	b.n	8004db2 <UART_SetConfig+0x722>
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4bd1      	ldr	r3, [pc, #836]	; (8004dbc <UART_SetConfig+0x72c>)
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d006      	beq.n	8004a8a <UART_SetConfig+0x3fa>
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4bcf      	ldr	r3, [pc, #828]	; (8004dc0 <UART_SetConfig+0x730>)
 8004a84:	429a      	cmp	r2, r3
 8004a86:	f040 80ca 	bne.w	8004c1e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a8a:	f7fe ffb5 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8004a8e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a96:	461c      	mov	r4, r3
 8004a98:	f04f 0500 	mov.w	r5, #0
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aac:	1912      	adds	r2, r2, r4
 8004aae:	eb45 0303 	adc.w	r3, r5, r3
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	00d9      	lsls	r1, r3, #3
 8004abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac0:	00d0      	lsls	r0, r2, #3
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	eb12 0a04 	adds.w	sl, r2, r4
 8004aca:	eb43 0b05 	adc.w	fp, r3, r5
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ae8:	0082      	lsls	r2, r0, #2
 8004aea:	4650      	mov	r0, sl
 8004aec:	4659      	mov	r1, fp
 8004aee:	f7fc f89b 	bl	8000c28 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4bb3      	ldr	r3, [pc, #716]	; (8004dc4 <UART_SetConfig+0x734>)
 8004af8:	fba3 2302 	umull	r2, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	011e      	lsls	r6, r3, #4
 8004b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b04:	4618      	mov	r0, r3
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	1894      	adds	r4, r2, r2
 8004b10:	623c      	str	r4, [r7, #32]
 8004b12:	415b      	adcs	r3, r3
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b1a:	1812      	adds	r2, r2, r0
 8004b1c:	eb41 0303 	adc.w	r3, r1, r3
 8004b20:	f04f 0400 	mov.w	r4, #0
 8004b24:	f04f 0500 	mov.w	r5, #0
 8004b28:	00dd      	lsls	r5, r3, #3
 8004b2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b2e:	00d4      	lsls	r4, r2, #3
 8004b30:	4622      	mov	r2, r4
 8004b32:	462b      	mov	r3, r5
 8004b34:	1814      	adds	r4, r2, r0
 8004b36:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004b3a:	414b      	adcs	r3, r1
 8004b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	008b      	lsls	r3, r1, #2
 8004b56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b5a:	0082      	lsls	r2, r0, #2
 8004b5c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004b60:	f7fc f862 	bl	8000c28 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4b96      	ldr	r3, [pc, #600]	; (8004dc4 <UART_SetConfig+0x734>)
 8004b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2164      	movs	r1, #100	; 0x64
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	3332      	adds	r3, #50	; 0x32
 8004b7c:	4a91      	ldr	r2, [pc, #580]	; (8004dc4 <UART_SetConfig+0x734>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b88:	441e      	add	r6, r3
 8004b8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	1894      	adds	r4, r2, r2
 8004b9a:	61bc      	str	r4, [r7, #24]
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba4:	1812      	adds	r2, r2, r0
 8004ba6:	eb41 0303 	adc.w	r3, r1, r3
 8004baa:	f04f 0400 	mov.w	r4, #0
 8004bae:	f04f 0500 	mov.w	r5, #0
 8004bb2:	00dd      	lsls	r5, r3, #3
 8004bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bb8:	00d4      	lsls	r4, r2, #3
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	1814      	adds	r4, r2, r0
 8004bc0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004bc4:	414b      	adcs	r3, r1
 8004bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	008b      	lsls	r3, r1, #2
 8004be0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004be4:	0082      	lsls	r2, r0, #2
 8004be6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004bea:	f7fc f81d 	bl	8000c28 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4b74      	ldr	r3, [pc, #464]	; (8004dc4 <UART_SetConfig+0x734>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	; 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	3332      	adds	r3, #50	; 0x32
 8004c06:	4a6f      	ldr	r2, [pc, #444]	; (8004dc4 <UART_SetConfig+0x734>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	f003 020f 	and.w	r2, r3, #15
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4432      	add	r2, r6
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	e0c9      	b.n	8004db2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f7fe fed7 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8004c22:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c2a:	461c      	mov	r4, r3
 8004c2c:	f04f 0500 	mov.w	r5, #0
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	6139      	str	r1, [r7, #16]
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c40:	1912      	adds	r2, r2, r4
 8004c42:	eb45 0303 	adc.w	r3, r5, r3
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	00d9      	lsls	r1, r3, #3
 8004c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c54:	00d0      	lsls	r0, r2, #3
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	eb12 0804 	adds.w	r8, r2, r4
 8004c5e:	eb43 0905 	adc.w	r9, r3, r5
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	008b      	lsls	r3, r1, #2
 8004c78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c7c:	0082      	lsls	r2, r0, #2
 8004c7e:	4640      	mov	r0, r8
 8004c80:	4649      	mov	r1, r9
 8004c82:	f7fb ffd1 	bl	8000c28 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4b4e      	ldr	r3, [pc, #312]	; (8004dc4 <UART_SetConfig+0x734>)
 8004c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	011e      	lsls	r6, r3, #4
 8004c94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	1894      	adds	r4, r2, r2
 8004ca4:	60bc      	str	r4, [r7, #8]
 8004ca6:	415b      	adcs	r3, r3
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cae:	1812      	adds	r2, r2, r0
 8004cb0:	eb41 0303 	adc.w	r3, r1, r3
 8004cb4:	f04f 0400 	mov.w	r4, #0
 8004cb8:	f04f 0500 	mov.w	r5, #0
 8004cbc:	00dd      	lsls	r5, r3, #3
 8004cbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cc2:	00d4      	lsls	r4, r2, #3
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	1814      	adds	r4, r2, r0
 8004cca:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004cce:	414b      	adcs	r3, r1
 8004cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cee:	0082      	lsls	r2, r0, #2
 8004cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cf4:	f7fb ff98 	bl	8000c28 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <UART_SetConfig+0x734>)
 8004cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2164      	movs	r1, #100	; 0x64
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	3332      	adds	r3, #50	; 0x32
 8004d10:	4a2c      	ldr	r2, [pc, #176]	; (8004dc4 <UART_SetConfig+0x734>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d1c:	441e      	add	r6, r3
 8004d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d22:	4618      	mov	r0, r3
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	1894      	adds	r4, r2, r2
 8004d2e:	603c      	str	r4, [r7, #0]
 8004d30:	415b      	adcs	r3, r3
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d38:	1812      	adds	r2, r2, r0
 8004d3a:	eb41 0303 	adc.w	r3, r1, r3
 8004d3e:	f04f 0400 	mov.w	r4, #0
 8004d42:	f04f 0500 	mov.w	r5, #0
 8004d46:	00dd      	lsls	r5, r3, #3
 8004d48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d4c:	00d4      	lsls	r4, r2, #3
 8004d4e:	4622      	mov	r2, r4
 8004d50:	462b      	mov	r3, r5
 8004d52:	1814      	adds	r4, r2, r0
 8004d54:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	008b      	lsls	r3, r1, #2
 8004d74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d78:	0082      	lsls	r2, r0, #2
 8004d7a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004d7e:	f7fb ff53 	bl	8000c28 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <UART_SetConfig+0x734>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	; 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <UART_SetConfig+0x734>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4432      	add	r2, r6
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	e7ff      	b.n	8004db2 <UART_SetConfig+0x722>
 8004db2:	bf00      	nop
 8004db4:	37f4      	adds	r7, #244	; 0xf4
 8004db6:	46bd      	mov	sp, r7
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dbc:	40011000 	.word	0x40011000
 8004dc0:	40011400 	.word	0x40011400
 8004dc4:	51eb851f 	.word	0x51eb851f

08004dc8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 fccc 	bl	8006776 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	218a      	movs	r1, #138	; 0x8a
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f004 fec5 	bl	8009b98 <VL53L0X_WrByte>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b096      	sub	sp, #88	; 0x58
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004e2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d107      	bne.n	8004e46 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2188      	movs	r1, #136	; 0x88
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f004 feac 	bl	8009b98 <VL53L0X_WrByte>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e54:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004e5e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a9e      	ldr	r2, [pc, #632]	; (80050e0 <VL53L0X_DataInit+0x2c0>)
 8004e66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a9d      	ldr	r2, [pc, #628]	; (80050e4 <VL53L0X_DataInit+0x2c4>)
 8004e6e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004e78:	f107 0310 	add.w	r3, r7, #16
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fab4 	bl	80053ec <VL53L0X_GetDeviceParameters>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004e8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d112      	bne.n	8004eb8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004e92:	2300      	movs	r3, #0
 8004e94:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004e96:	2300      	movs	r3, #0
 8004e98:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f103 0410 	add.w	r4, r3, #16
 8004ea0:	f107 0510 	add.w	r5, r7, #16
 8004ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2264      	movs	r2, #100	; 0x64
 8004ebc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004ec6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ed0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004eda:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f004 fe54 	bl	8009b98 <VL53L0X_WrByte>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004efe:	2201      	movs	r2, #1
 8004f00:	21ff      	movs	r1, #255	; 0xff
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f004 fe48 	bl	8009b98 <VL53L0X_WrByte>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f16:	2200      	movs	r2, #0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f004 fe3c 	bl	8009b98 <VL53L0X_WrByte>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004f2e:	f107 030f 	add.w	r3, r7, #15
 8004f32:	461a      	mov	r2, r3
 8004f34:	2191      	movs	r1, #145	; 0x91
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f004 feb0 	bl	8009c9c <VL53L0X_RdByte>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004f52:	2201      	movs	r2, #1
 8004f54:	2100      	movs	r1, #0
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f004 fe1e 	bl	8009b98 <VL53L0X_WrByte>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	21ff      	movs	r1, #255	; 0xff
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f004 fe12 	bl	8009b98 <VL53L0X_WrByte>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004f82:	2200      	movs	r2, #0
 8004f84:	2180      	movs	r1, #128	; 0x80
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f004 fe06 	bl	8009b98 <VL53L0X_WrByte>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f9e:	e014      	b.n	8004fca <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004fa0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d114      	bne.n	8004fd2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fd27 	bl	8005a04 <VL53L0X_SetLimitCheckEnable>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	653b      	str	r3, [r7, #80]	; 0x50
 8004fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	dde7      	ble.n	8004fa0 <VL53L0X_DataInit+0x180>
 8004fd0:	e000      	b.n	8004fd4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004fd2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004fd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d107      	bne.n	8004fec <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2102      	movs	r1, #2
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fd0f 	bl	8005a04 <VL53L0X_SetLimitCheckEnable>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004fec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2103      	movs	r1, #3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fd03 	bl	8005a04 <VL53L0X_SetLimitCheckEnable>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800500c:	2200      	movs	r2, #0
 800500e:	2104      	movs	r1, #4
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fcf7 	bl	8005a04 <VL53L0X_SetLimitCheckEnable>
 8005016:	4603      	mov	r3, r0
 8005018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800501c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005020:	2b00      	cmp	r3, #0
 8005022:	d107      	bne.n	8005034 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005024:	2200      	movs	r2, #0
 8005026:	2105      	movs	r1, #5
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fceb 	bl	8005a04 <VL53L0X_SetLimitCheckEnable>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005034:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005038:	2b00      	cmp	r3, #0
 800503a:	d108      	bne.n	800504e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800503c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fd8e 	bl	8005b64 <VL53L0X_SetLimitCheckValue>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800504e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005052:	2b00      	cmp	r3, #0
 8005054:	d108      	bne.n	8005068 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800505a:	2101      	movs	r1, #1
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fd81 	bl	8005b64 <VL53L0X_SetLimitCheckValue>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005068:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005070:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005074:	2102      	movs	r1, #2
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fd74 	bl	8005b64 <VL53L0X_SetLimitCheckValue>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005082:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800508a:	2200      	movs	r2, #0
 800508c:	2103      	movs	r1, #3
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd68 	bl	8005b64 <VL53L0X_SetLimitCheckValue>
 8005094:	4603      	mov	r3, r0
 8005096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800509a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050aa:	22ff      	movs	r2, #255	; 0xff
 80050ac:	2101      	movs	r1, #1
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f004 fd72 	bl	8009b98 <VL53L0X_WrByte>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80050c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80050d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3758      	adds	r7, #88	; 0x58
 80050da:	46bd      	mov	sp, r7
 80050dc:	bdb0      	pop	{r4, r5, r7, pc}
 80050de:	bf00      	nop
 80050e0:	00016b85 	.word	0x00016b85
 80050e4:	000970a4 	.word	0x000970a4

080050e8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80050e8:	b5b0      	push	{r4, r5, r7, lr}
 80050ea:	b09e      	sub	sp, #120	; 0x78
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80050f6:	f107 031c 	add.w	r3, r7, #28
 80050fa:	2240      	movs	r2, #64	; 0x40
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 feb2 	bl	8009e68 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005124:	2101      	movs	r1, #1
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f002 fa7b 	bl	8007622 <VL53L0X_get_info_from_device>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005138:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005148:	2b01      	cmp	r3, #1
 800514a:	d80d      	bhi.n	8005168 <VL53L0X_StaticInit+0x80>
 800514c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005150:	2b01      	cmp	r3, #1
 8005152:	d102      	bne.n	800515a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005156:	2b20      	cmp	r3, #32
 8005158:	d806      	bhi.n	8005168 <VL53L0X_StaticInit+0x80>
 800515a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10e      	bne.n	8005180 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d90b      	bls.n	8005180 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005168:	f107 0218 	add.w	r2, r7, #24
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 fcfa 	bl	8006b6c <VL53L0X_perform_ref_spad_management>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800517e:	e009      	b.n	8005194 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005184:	461a      	mov	r2, r3
 8005186:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fefb 	bl	8006f84 <VL53L0X_set_reference_spads>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005194:	4b94      	ldr	r3, [pc, #592]	; (80053e8 <VL53L0X_StaticInit+0x300>)
 8005196:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005198:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10f      	bne.n	80051c0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80051a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80051aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80051b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ba:	e001      	b.n	80051c0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80051bc:	4b8a      	ldr	r3, [pc, #552]	; (80053e8 <VL53L0X_StaticInit+0x300>)
 80051be:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80051c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80051c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f003 fdce 	bl	8008d6c <VL53L0X_load_tuning_settings>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80051d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80051de:	2300      	movs	r3, #0
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	2304      	movs	r3, #4
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f001 f8f3 	bl	80063d4 <VL53L0X_SetGpioConfig>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80051f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d121      	bne.n	8005240 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80051fc:	2201      	movs	r2, #1
 80051fe:	21ff      	movs	r1, #255	; 0xff
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f004 fcc9 	bl	8009b98 <VL53L0X_WrByte>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800520c:	f107 031a 	add.w	r3, r7, #26
 8005210:	461a      	mov	r2, r3
 8005212:	2184      	movs	r1, #132	; 0x84
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f004 fd6b 	bl	8009cf0 <VL53L0X_RdWord>
 800521a:	4603      	mov	r3, r0
 800521c:	461a      	mov	r2, r3
 800521e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005222:	4313      	orrs	r3, r2
 8005224:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005228:	2200      	movs	r2, #0
 800522a:	21ff      	movs	r1, #255	; 0xff
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f004 fcb3 	bl	8009b98 <VL53L0X_WrByte>
 8005232:	4603      	mov	r3, r0
 8005234:	461a      	mov	r2, r3
 8005236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800523a:	4313      	orrs	r3, r2
 800523c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005240:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005248:	8b7b      	ldrh	r3, [r7, #26]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005254:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800525c:	f107 031c 	add.w	r3, r7, #28
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8c2 	bl	80053ec <VL53L0X_GetDeviceParameters>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800526e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005272:	2b00      	cmp	r3, #0
 8005274:	d110      	bne.n	8005298 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005276:	f107 0319 	add.w	r3, r7, #25
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f984 	bl	800558a <VL53L0X_GetFractionEnable>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005288:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005290:	7e7a      	ldrb	r2, [r7, #25]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005298:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10e      	bne.n	80052be <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f103 0410 	add.w	r4, r3, #16
 80052a6:	f107 051c 	add.w	r5, r7, #28
 80052aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80052ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80052be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d111      	bne.n	80052ea <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80052c6:	f107 0319 	add.w	r3, r7, #25
 80052ca:	461a      	mov	r2, r3
 80052cc:	2101      	movs	r1, #1
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f004 fce4 	bl	8009c9c <VL53L0X_RdByte>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80052da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d103      	bne.n	80052ea <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80052e2:	7e7a      	ldrb	r2, [r7, #25]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80052ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d107      	bne.n	8005302 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9bc 	bl	8005674 <VL53L0X_SetSequenceStepEnable>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005302:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005306:	2b00      	cmp	r3, #0
 8005308:	d107      	bne.n	800531a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800530a:	2200      	movs	r2, #0
 800530c:	2102      	movs	r1, #2
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f9b0 	bl	8005674 <VL53L0X_SetSequenceStepEnable>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800531a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800531e:	2b00      	cmp	r3, #0
 8005320:	d103      	bne.n	800532a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2203      	movs	r2, #3
 8005326:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800532a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005332:	f107 0313 	add.w	r3, r7, #19
 8005336:	461a      	mov	r2, r3
 8005338:	2100      	movs	r1, #0
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f982 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005346:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800534e:	7cfa      	ldrb	r2, [r7, #19]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005356:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800535e:	f107 0313 	add.w	r3, r7, #19
 8005362:	461a      	mov	r2, r3
 8005364:	2101      	movs	r1, #1
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f96c 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005372:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800537a:	7cfa      	ldrb	r2, [r7, #19]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005382:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	461a      	mov	r2, r3
 8005390:	2103      	movs	r1, #3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f002 fec6 	bl	8008124 <get_sequence_step_timeout>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800539e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80053ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80053b6:	f107 030c 	add.w	r3, r7, #12
 80053ba:	461a      	mov	r2, r3
 80053bc:	2104      	movs	r1, #4
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f002 feb0 	bl	8008124 <get_sequence_step_timeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80053ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3770      	adds	r7, #112	; 0x70
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bdb0      	pop	{r4, r5, r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c

080053ec <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f8b0 	bl	8005564 <VL53L0X_GetDeviceMode>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa78 	bl	800590c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800542e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d107      	bne.n	8005446 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	3310      	adds	r3, #16
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 faae 	bl	800599e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005442:	4603      	mov	r3, r0
 8005444:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff fcb7 	bl	8004dc8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800545a:	4603      	mov	r3, r0
 800545c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d134      	bne.n	80054d0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	e02a      	b.n	80054c2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800546c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d12a      	bne.n	80054ca <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	b299      	uxth	r1, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	3308      	adds	r3, #8
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	461a      	mov	r2, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fbce 	bl	8005c28 <VL53L0X_GetLimitCheckValue>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	4313      	orrs	r3, r2
 8005494:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d117      	bne.n	80054ce <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	b299      	uxth	r1, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3318      	adds	r3, #24
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	461a      	mov	r2, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb35 	bl	8005b1c <VL53L0X_GetLimitCheckEnable>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	3301      	adds	r3, #1
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b05      	cmp	r3, #5
 80054c6:	ddd1      	ble.n	800546c <VL53L0X_GetDeviceParameters+0x80>
 80054c8:	e002      	b.n	80054d0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80054ca:	bf00      	nop
 80054cc:	e000      	b.n	80054d0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80054ce:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	333c      	adds	r3, #60	; 0x3c
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fc30 	bl	8005d44 <VL53L0X_GetWrapAroundCheckEnable>
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80054e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f879 	bl	80055ee <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005518:	2300      	movs	r3, #0
 800551a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b15      	cmp	r3, #21
 8005520:	bf8c      	ite	hi
 8005522:	2201      	movhi	r2, #1
 8005524:	2200      	movls	r2, #0
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	2a00      	cmp	r2, #0
 800552a:	d10e      	bne.n	800554a <VL53L0X_SetDeviceMode+0x3e>
 800552c:	2201      	movs	r2, #1
 800552e:	409a      	lsls	r2, r3
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <VL53L0X_SetDeviceMode+0x54>)
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	741a      	strb	r2, [r3, #16]
		break;
 8005548:	e001      	b.n	800554e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800554a:	23f8      	movs	r3, #248	; 0xf8
 800554c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	0030000b 	.word	0x0030000b

08005564 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7c1a      	ldrb	r2, [r3, #16]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800557a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	2109      	movs	r1, #9
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f004 fb7d 	bl	8009c9c <VL53L0X_RdByte>
 80055a2:	4603      	mov	r3, r0
 80055a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80055a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80055bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f003 fa36 	bl	8008a4a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80055e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f003 fb03 	bl	8008c0a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
 8005620:	4613      	mov	r3, r2
 8005622:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005628:	78ba      	ldrb	r2, [r7, #2]
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f002 ff4b 	bl	80084ca <VL53L0X_set_vcsel_pulse_period>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	460b      	mov	r3, r1
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005656:	7afb      	ldrb	r3, [r7, #11]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4619      	mov	r1, r3
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f003 f9bd 	bl	80089dc <VL53L0X_get_vcsel_pulse_period>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
 8005680:	4613      	mov	r3, r2
 8005682:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005684:	2300      	movs	r3, #0
 8005686:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005690:	f107 030f 	add.w	r3, r7, #15
 8005694:	461a      	mov	r2, r3
 8005696:	2101      	movs	r1, #1
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f004 faff 	bl	8009c9c <VL53L0X_RdByte>
 800569e:	4603      	mov	r3, r0
 80056a0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80056a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d15a      	bne.n	8005764 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80056ae:	78bb      	ldrb	r3, [r7, #2]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d12b      	bne.n	800570c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d825      	bhi.n	8005706 <VL53L0X_SetSequenceStepEnable+0x92>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d5 	.word	0x080056d5
 80056c4:	080056df 	.word	0x080056df
 80056c8:	080056e9 	.word	0x080056e9
 80056cc:	080056f3 	.word	0x080056f3
 80056d0:	080056fd 	.word	0x080056fd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80056d4:	7dbb      	ldrb	r3, [r7, #22]
 80056d6:	f043 0310 	orr.w	r3, r3, #16
 80056da:	75bb      	strb	r3, [r7, #22]
				break;
 80056dc:	e043      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80056de:	7dbb      	ldrb	r3, [r7, #22]
 80056e0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80056e4:	75bb      	strb	r3, [r7, #22]
				break;
 80056e6:	e03e      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80056e8:	7dbb      	ldrb	r3, [r7, #22]
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	75bb      	strb	r3, [r7, #22]
				break;
 80056f0:	e039      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80056f2:	7dbb      	ldrb	r3, [r7, #22]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	75bb      	strb	r3, [r7, #22]
				break;
 80056fa:	e034      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80056fc:	7dbb      	ldrb	r3, [r7, #22]
 80056fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005702:	75bb      	strb	r3, [r7, #22]
				break;
 8005704:	e02f      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005706:	23fc      	movs	r3, #252	; 0xfc
 8005708:	75fb      	strb	r3, [r7, #23]
 800570a:	e02c      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	2b04      	cmp	r3, #4
 8005710:	d825      	bhi.n	800575e <VL53L0X_SetSequenceStepEnable+0xea>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	0800572d 	.word	0x0800572d
 800571c:	08005737 	.word	0x08005737
 8005720:	08005741 	.word	0x08005741
 8005724:	0800574b 	.word	0x0800574b
 8005728:	08005755 	.word	0x08005755
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800572c:	7dbb      	ldrb	r3, [r7, #22]
 800572e:	f023 0310 	bic.w	r3, r3, #16
 8005732:	75bb      	strb	r3, [r7, #22]
				break;
 8005734:	e017      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005736:	7dbb      	ldrb	r3, [r7, #22]
 8005738:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800573c:	75bb      	strb	r3, [r7, #22]
				break;
 800573e:	e012      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005740:	7dbb      	ldrb	r3, [r7, #22]
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	75bb      	strb	r3, [r7, #22]
				break;
 8005748:	e00d      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800574a:	7dbb      	ldrb	r3, [r7, #22]
 800574c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005750:	75bb      	strb	r3, [r7, #22]
				break;
 8005752:	e008      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005754:	7dbb      	ldrb	r3, [r7, #22]
 8005756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575a:	75bb      	strb	r3, [r7, #22]
				break;
 800575c:	e003      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800575e:	23fc      	movs	r3, #252	; 0xfc
 8005760:	75fb      	strb	r3, [r7, #23]
 8005762:	e000      	b.n	8005766 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005764:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	7dba      	ldrb	r2, [r7, #22]
 800576a:	429a      	cmp	r2, r3
 800576c:	d01e      	beq.n	80057ac <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800576e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	461a      	mov	r2, r3
 800577a:	2101      	movs	r1, #1
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f004 fa0b 	bl	8009b98 <VL53L0X_WrByte>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	7dba      	ldrb	r2, [r7, #22]
 8005792:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80057a4:	6939      	ldr	r1, [r7, #16]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff ff0e 	bl	80055c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80057ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	72fb      	strb	r3, [r7, #11]
 80057c6:	4613      	mov	r3, r2
 80057c8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d836      	bhi.n	8005848 <sequence_step_enabled+0x90>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <sequence_step_enabled+0x28>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	080057f5 	.word	0x080057f5
 80057e4:	08005807 	.word	0x08005807
 80057e8:	08005819 	.word	0x08005819
 80057ec:	0800582b 	.word	0x0800582b
 80057f0:	0800583d 	.word	0x0800583d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80057f4:	7abb      	ldrb	r3, [r7, #10]
 80057f6:	111b      	asrs	r3, r3, #4
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	701a      	strb	r2, [r3, #0]
		break;
 8005804:	e022      	b.n	800584c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005806:	7abb      	ldrb	r3, [r7, #10]
 8005808:	10db      	asrs	r3, r3, #3
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	b2da      	uxtb	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	701a      	strb	r2, [r3, #0]
		break;
 8005816:	e019      	b.n	800584c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005818:	7abb      	ldrb	r3, [r7, #10]
 800581a:	109b      	asrs	r3, r3, #2
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	701a      	strb	r2, [r3, #0]
		break;
 8005828:	e010      	b.n	800584c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800582a:	7abb      	ldrb	r3, [r7, #10]
 800582c:	119b      	asrs	r3, r3, #6
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	b2da      	uxtb	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	701a      	strb	r2, [r3, #0]
		break;
 800583a:	e007      	b.n	800584c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800583c:	7abb      	ldrb	r3, [r7, #10]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	b2da      	uxtb	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	701a      	strb	r2, [r3, #0]
		break;
 8005846:	e001      	b.n	800584c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005848:	23fc      	movs	r3, #252	; 0xfc
 800584a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800584c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005850:	4618      	mov	r0, r3
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800586e:	f107 030e 	add.w	r3, r7, #14
 8005872:	461a      	mov	r2, r3
 8005874:	2101      	movs	r1, #1
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f004 fa10 	bl	8009c9c <VL53L0X_RdByte>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005888:	7bba      	ldrb	r2, [r7, #14]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2100      	movs	r1, #0
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ff92 	bl	80057b8 <sequence_step_enabled>
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80058a0:	7bba      	ldrb	r2, [r7, #14]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	3302      	adds	r3, #2
 80058a6:	2101      	movs	r1, #1
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ff85 	bl	80057b8 <sequence_step_enabled>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80058b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d108      	bne.n	80058cc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80058ba:	7bba      	ldrb	r2, [r7, #14]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	2102      	movs	r1, #2
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ff78 	bl	80057b8 <sequence_step_enabled>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80058cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80058d4:	7bba      	ldrb	r2, [r7, #14]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	3303      	adds	r3, #3
 80058da:	2103      	movs	r1, #3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff6b 	bl	80057b8 <sequence_step_enabled>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80058e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d108      	bne.n	8005900 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80058ee:	7bba      	ldrb	r2, [r7, #14]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3304      	adds	r3, #4
 80058f4:	2104      	movs	r1, #4
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff5e 	bl	80057b8 <sequence_step_enabled>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800591a:	f107 030c 	add.w	r3, r7, #12
 800591e:	461a      	mov	r2, r3
 8005920:	21f8      	movs	r1, #248	; 0xf8
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f004 f9e4 	bl	8009cf0 <VL53L0X_RdWord>
 8005928:	4603      	mov	r3, r0
 800592a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800592c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d108      	bne.n	8005946 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005934:	f107 0308 	add.w	r3, r7, #8
 8005938:	461a      	mov	r2, r3
 800593a:	2104      	movs	r1, #4
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f004 fa0f 	bl	8009d60 <VL53L0X_RdDWord>
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800594e:	89bb      	ldrh	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	89ba      	ldrh	r2, [r7, #12]
 8005958:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	7f1b      	ldrb	r3, [r3, #28]
 8005986:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	7bba      	ldrb	r2, [r7, #14]
 800598c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800598e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80059ac:	f107 030e 	add.w	r3, r7, #14
 80059b0:	461a      	mov	r2, r3
 80059b2:	2120      	movs	r1, #32
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f004 f99b 	bl	8009cf0 <VL53L0X_RdWord>
 80059ba:	4603      	mov	r3, r0
 80059bc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80059be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d118      	bne.n	80059f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80059c6:	89fb      	ldrh	r3, [r7, #14]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	771a      	strb	r2, [r3, #28]
 80059de:	e00b      	b.n	80059f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80059e0:	89fb      	ldrh	r3, [r7, #14]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
 8005a10:	4613      	mov	r3, r2
 8005a12:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005a24:	887b      	ldrh	r3, [r7, #2]
 8005a26:	2b05      	cmp	r3, #5
 8005a28:	d902      	bls.n	8005a30 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a2a:	23fc      	movs	r3, #252	; 0xfc
 8005a2c:	75fb      	strb	r3, [r7, #23]
 8005a2e:	e05b      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005a30:	787b      	ldrb	r3, [r7, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73bb      	strb	r3, [r7, #14]
 8005a42:	e00a      	b.n	8005a5a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a44:	887b      	ldrh	r3, [r7, #2]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	330c      	adds	r3, #12
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d841      	bhi.n	8005ae4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <VL53L0X_SetLimitCheckEnable+0x64>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005a8b 	.word	0x08005a8b
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005ab5 	.word	0x08005ab5
 8005a7c:	08005acd 	.word	0x08005acd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005a88:	e02e      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	2144      	movs	r1, #68	; 0x44
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f004 f8a3 	bl	8009be0 <VL53L0X_WrWord>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]

			break;
 8005a9e:	e023      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7bfa      	ldrb	r2, [r7, #15]
 8005aa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005aa8:	e01e      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005ab2:	e019      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005aba:	7b7b      	ldrb	r3, [r7, #13]
 8005abc:	22fe      	movs	r2, #254	; 0xfe
 8005abe:	2160      	movs	r1, #96	; 0x60
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f004 f8b7 	bl	8009c34 <VL53L0X_UpdateByte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005aca:	e00d      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005ad2:	7b7b      	ldrb	r3, [r7, #13]
 8005ad4:	22ef      	movs	r2, #239	; 0xef
 8005ad6:	2160      	movs	r1, #96	; 0x60
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f004 f8ab 	bl	8009c34 <VL53L0X_UpdateByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005ae2:	e001      	b.n	8005ae8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ae4:	23fc      	movs	r3, #252	; 0xfc
 8005ae6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10f      	bne.n	8005b10 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005af0:	787b      	ldrb	r3, [r7, #1]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b02:	e005      	b.n	8005b10 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b04:	887b      	ldrh	r3, [r7, #2]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	460b      	mov	r3, r1
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005b2e:	897b      	ldrh	r3, [r7, #10]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d905      	bls.n	8005b40 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b34:	23fc      	movs	r3, #252	; 0xfc
 8005b36:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e008      	b.n	8005b52 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b40:	897b      	ldrh	r3, [r7, #10]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b4a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	7dba      	ldrb	r2, [r7, #22]
 8005b50:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b80:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005b82:	7dbb      	ldrb	r3, [r7, #22]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d107      	bne.n	8005b98 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b88:	897b      	ldrh	r3, [r7, #10]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	e040      	b.n	8005c1a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005b98:	897b      	ldrh	r3, [r7, #10]
 8005b9a:	2b05      	cmp	r3, #5
 8005b9c:	d830      	bhi.n	8005c00 <VL53L0X_SetLimitCheckValue+0x9c>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <VL53L0X_SetLimitCheckValue+0x40>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bbd 	.word	0x08005bbd
 8005ba8:	08005bc5 	.word	0x08005bc5
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	08005be3 	.word	0x08005be3
 8005bb4:	08005beb 	.word	0x08005beb
 8005bb8:	08005beb 	.word	0x08005beb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005bc2:	e01f      	b.n	8005c04 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2144      	movs	r1, #68	; 0x44
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f004 f806 	bl	8009be0 <VL53L0X_WrWord>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005bd8:	e014      	b.n	8005c04 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005be0:	e010      	b.n	8005c04 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005be8:	e00c      	b.n	8005c04 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f003 fff3 	bl	8009be0 <VL53L0X_WrWord>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005bfe:	e001      	b.n	8005c04 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c00:	23fc      	movs	r3, #252	; 0xfc
 8005c02:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c0c:	897b      	ldrh	r3, [r7, #10]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	330c      	adds	r3, #12
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop

08005c28 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	460b      	mov	r3, r1
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d847      	bhi.n	8005cd4 <VL53L0X_GetLimitCheckValue+0xac>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <VL53L0X_GetLimitCheckValue+0x24>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c65 	.word	0x08005c65
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005c97 	.word	0x08005c97
 8005c58:	08005ca3 	.word	0x08005ca3
 8005c5c:	08005caf 	.word	0x08005caf
 8005c60:	08005caf 	.word	0x08005caf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	77bb      	strb	r3, [r7, #30]
		break;
 8005c6e:	e033      	b.n	8005cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005c70:	f107 0316 	add.w	r3, r7, #22
 8005c74:	461a      	mov	r2, r3
 8005c76:	2144      	movs	r1, #68	; 0x44
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f004 f839 	bl	8009cf0 <VL53L0X_RdWord>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005c82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005c8a:	8afb      	ldrh	r3, [r7, #22]
 8005c8c:	025b      	lsls	r3, r3, #9
 8005c8e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005c90:	2301      	movs	r3, #1
 8005c92:	77bb      	strb	r3, [r7, #30]
		break;
 8005c94:	e020      	b.n	8005cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	77bb      	strb	r3, [r7, #30]
		break;
 8005ca0:	e01a      	b.n	8005cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	77bb      	strb	r3, [r7, #30]
		break;
 8005cac:	e014      	b.n	8005cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005cae:	f107 0316 	add.w	r3, r7, #22
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2164      	movs	r1, #100	; 0x64
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f004 f81a 	bl	8009cf0 <VL53L0X_RdWord>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005cc8:	8afb      	ldrh	r3, [r7, #22]
 8005cca:	025b      	lsls	r3, r3, #9
 8005ccc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	77bb      	strb	r3, [r7, #30]
		break;
 8005cd2:	e001      	b.n	8005cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005cd4:	23fc      	movs	r3, #252	; 0xfc
 8005cd6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d12a      	bne.n	8005d36 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005ce0:	7fbb      	ldrb	r3, [r7, #30]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d124      	bne.n	8005d30 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005cec:	897b      	ldrh	r3, [r7, #10]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005d00:	897b      	ldrh	r3, [r7, #10]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005d0c:	e013      	b.n	8005d36 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005d14:	897b      	ldrh	r3, [r7, #10]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005d2e:	e002      	b.n	8005d36 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d36:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop

08005d44 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005d52:	f107 030e 	add.w	r3, r7, #14
 8005d56:	461a      	mov	r2, r3
 8005d58:	2101      	movs	r1, #1
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f003 ff9e 	bl	8009c9c <VL53L0X_RdByte>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10e      	bne.n	8005d8a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005d6c:	7bba      	ldrb	r2, [r7, #14]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da03      	bge.n	8005d84 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005db4:	f107 030e 	add.w	r3, r7, #14
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fbd2 	bl	8005564 <VL53L0X_GetDeviceMode>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d107      	bne.n	8005ddc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f898 	bl	8005f08 <VL53L0X_StartMeasurement>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d104      	bne.n	8005dee <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 fb4f 	bl	8007488 <VL53L0X_measurement_poll_for_completion>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005e20:	2301      	movs	r3, #1
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f001 faf1 	bl	800740e <VL53L0X_perform_ref_calibration>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005e52:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005e54:	7dbb      	ldrb	r3, [r7, #22]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d005      	beq.n	8005e66 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005e5a:	7dbb      	ldrb	r3, [r7, #22]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d002      	beq.n	8005e66 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005e60:	7dbb      	ldrb	r3, [r7, #22]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d147      	bne.n	8005ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	f107 0210 	add.w	r2, r7, #16
 8005e6e:	2101      	movs	r1, #1
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbd3 	bl	800661c <VL53L0X_GetInterruptThresholds>
 8005e76:	4603      	mov	r3, r0
 8005e78:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005e80:	d803      	bhi.n	8005e8a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005e82:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005e84:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005e88:	d935      	bls.n	8005ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d131      	bne.n	8005ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d006      	beq.n	8005ea6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005e98:	491a      	ldr	r1, [pc, #104]	; (8005f04 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f002 ff66 	bl	8008d6c <VL53L0X_load_tuning_settings>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]
 8005ea4:	e027      	b.n	8005ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	21ff      	movs	r1, #255	; 0xff
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f003 fe74 	bl	8009b98 <VL53L0X_WrByte>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2170      	movs	r1, #112	; 0x70
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f003 fe6a 	bl	8009b98 <VL53L0X_WrByte>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ece:	2200      	movs	r2, #0
 8005ed0:	21ff      	movs	r1, #255	; 0xff
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f003 fe60 	bl	8009b98 <VL53L0X_WrByte>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2180      	movs	r1, #128	; 0x80
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f003 fe56 	bl	8009b98 <VL53L0X_WrByte>
 8005eec:	4603      	mov	r3, r0
 8005eee:	461a      	mov	r2, r3
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000100 	.word	0x20000100

08005f08 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005f18:	f107 030e 	add.w	r3, r7, #14
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fb20 	bl	8005564 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005f24:	2201      	movs	r2, #1
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f003 fe35 	bl	8009b98 <VL53L0X_WrByte>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f32:	2201      	movs	r2, #1
 8005f34:	21ff      	movs	r1, #255	; 0xff
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f003 fe2e 	bl	8009b98 <VL53L0X_WrByte>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005f40:	2200      	movs	r2, #0
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f003 fe27 	bl	8009b98 <VL53L0X_WrByte>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005f54:	461a      	mov	r2, r3
 8005f56:	2191      	movs	r1, #145	; 0x91
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f003 fe1d 	bl	8009b98 <VL53L0X_WrByte>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005f62:	2201      	movs	r2, #1
 8005f64:	2100      	movs	r1, #0
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f003 fe16 	bl	8009b98 <VL53L0X_WrByte>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005f70:	2200      	movs	r2, #0
 8005f72:	21ff      	movs	r1, #255	; 0xff
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f003 fe0f 	bl	8009b98 <VL53L0X_WrByte>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2180      	movs	r1, #128	; 0x80
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f003 fe08 	bl	8009b98 <VL53L0X_WrByte>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d054      	beq.n	800603c <VL53L0X_StartMeasurement+0x134>
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	dc6c      	bgt.n	8006070 <VL53L0X_StartMeasurement+0x168>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <VL53L0X_StartMeasurement+0x98>
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d034      	beq.n	8006008 <VL53L0X_StartMeasurement+0x100>
 8005f9e:	e067      	b.n	8006070 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f003 fdf7 	bl	8009b98 <VL53L0X_WrByte>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d15d      	bne.n	8006076 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005fc4:	f107 030d 	add.w	r3, r7, #13
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2100      	movs	r1, #0
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f003 fe65 	bl	8009c9c <VL53L0X_RdByte>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005fdc:	7b7a      	ldrb	r2, [r7, #13]
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d107      	bne.n	8005ffa <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005ff8:	d3e1      	bcc.n	8005fbe <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006000:	d339      	bcc.n	8006076 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006002:	23f9      	movs	r3, #249	; 0xf9
 8006004:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006006:	e036      	b.n	8006076 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff12 	bl	8005e3c <VL53L0X_CheckAndLoadInterruptSettings>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800601c:	2202      	movs	r2, #2
 800601e:	2100      	movs	r1, #0
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f003 fdb9 	bl	8009b98 <VL53L0X_WrByte>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800602a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d123      	bne.n	800607a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800603a:	e01e      	b.n	800607a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800603c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fef8 	bl	8005e3c <VL53L0X_CheckAndLoadInterruptSettings>
 800604c:	4603      	mov	r3, r0
 800604e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006050:	2204      	movs	r2, #4
 8006052:	2100      	movs	r1, #0
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f003 fd9f 	bl	8009b98 <VL53L0X_WrByte>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800605e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800606e:	e006      	b.n	800607e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006070:	23f8      	movs	r3, #248	; 0xf8
 8006072:	75fb      	strb	r3, [r7, #23]
 8006074:	e004      	b.n	8006080 <VL53L0X_StartMeasurement+0x178>
		break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <VL53L0X_StartMeasurement+0x178>
		break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <VL53L0X_StartMeasurement+0x178>
		break;
 800607e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80060a0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d112      	bne.n	80060ce <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80060a8:	f107 0308 	add.w	r3, r7, #8
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fb2a 	bl	8006708 <VL53L0X_GetInterruptMaskStatus>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d103      	bne.n	80060c6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e01c      	b.n	8006100 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e018      	b.n	8006100 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80060ce:	f107 030d 	add.w	r3, r7, #13
 80060d2:	461a      	mov	r2, r3
 80060d4:	2114      	movs	r1, #20
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f003 fde0 	bl	8009c9c <VL53L0X_RdByte>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80060e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80060e8:	7b7b      	ldrb	r3, [r7, #13]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e002      	b.n	8006100 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <VL53L0X_WaitDeviceReadyForNewMeasurement>:

VL53L0X_Error VL53L0X_WaitDeviceReadyForNewMeasurement(VL53L0X_DEV Dev,
	uint32_t MaxLoop)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006116:	239d      	movs	r3, #157	; 0x9d
 8006118:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented for VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800611a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <VL53L0X_GetRangingMeasurementData>:


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800612c:	b5b0      	push	{r4, r5, r7, lr}
 800612e:	b096      	sub	sp, #88	; 0x58
 8006130:	af02      	add	r7, sp, #8
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800613c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006140:	230c      	movs	r3, #12
 8006142:	2114      	movs	r1, #20
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f003 fcfb 	bl	8009b40 <VL53L0X_ReadMulti>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006150:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 80d1 	bne.w	80062fc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2200      	movs	r2, #0
 800615e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006166:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800616a:	b29b      	uxth	r3, r3
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	b29a      	uxth	r2, r3
 8006170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006174:	b29b      	uxth	r3, r3
 8006176:	4413      	add	r3, r2
 8006178:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006182:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006186:	b29b      	uxth	r3, r3
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	b29a      	uxth	r2, r3
 800618c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006190:	b29b      	uxth	r3, r3
 8006192:	4413      	add	r3, r2
 8006194:	b29b      	uxth	r3, r3
 8006196:	025b      	lsls	r3, r3, #9
 8006198:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800619e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80061a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80061b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ba:	025b      	lsls	r3, r3, #9
 80061bc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80061c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4413      	add	r3, r2
 80061d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80061de:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80061e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80061ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80061f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80061fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80061fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006200:	d046      	beq.n	8006290 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006202:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006204:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006210:	4a57      	ldr	r2, [pc, #348]	; (8006370 <VL53L0X_GetRangingMeasurementData+0x244>)
 8006212:	fb82 1203 	smull	r1, r2, r2, r3
 8006216:	1192      	asrs	r2, r2, #6
 8006218:	17db      	asrs	r3, r3, #31
 800621a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800621c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7f1b      	ldrb	r3, [r3, #28]
 800622a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800622e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006232:	2b00      	cmp	r3, #0
 8006234:	d02c      	beq.n	8006290 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006236:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006238:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006244:	429a      	cmp	r2, r3
 8006246:	d10d      	bne.n	8006264 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006248:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006250:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006254:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006258:	e016      	b.n	8006288 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800625a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800625e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006262:	e011      	b.n	8006288 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006264:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800626a:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800626e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006270:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006274:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006278:	121b      	asrs	r3, r3, #8
 800627a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800627c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006284:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800628c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006290:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006298:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80062a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	019b      	lsls	r3, r3, #6
 80062ac:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	75da      	strb	r2, [r3, #23]
 80062b2:	e006      	b.n	80062c2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80062ba:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80062c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80062c6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80062ca:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f003 f9e5 	bl	80096a8 <VL53L0X_get_pal_range_status>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80062ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80062f4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006300:	2b00      	cmp	r3, #0
 8006302:	d12f      	bne.n	8006364 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f107 040c 	add.w	r4, r7, #12
 800630a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800630e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006316:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800631e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800632c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006332:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006338:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800633e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006344:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800634a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006354:	f107 050c 	add.w	r5, r7, #12
 8006358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800635a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006364:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006368:	4618      	mov	r0, r3
 800636a:	3750      	adds	r7, #80	; 0x50
 800636c:	46bd      	mov	sp, r7
 800636e:	bdb0      	pop	{r4, r5, r7, pc}
 8006370:	10624dd3 	.word	0x10624dd3

08006374 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006382:	2100      	movs	r1, #0
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff f8c1 	bl	800550c <VL53L0X_SetDeviceMode>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800638e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff fd06 	bl	8005da8 <VL53L0X_PerformSingleMeasurement>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80063a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff febe 	bl	800612c <VL53L0X_GetRangingMeasurementData>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80063b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f962 	bl	8006688 <VL53L0X_ClearInterruptMask>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80063c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	70fb      	strb	r3, [r7, #3]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70bb      	strb	r3, [r7, #2]
 80063ea:	4613      	mov	r3, r2
 80063ec:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80063f8:	23f6      	movs	r3, #246	; 0xf6
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	e107      	b.n	800660e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80063fe:	78bb      	ldrb	r3, [r7, #2]
 8006400:	2b14      	cmp	r3, #20
 8006402:	d110      	bne.n	8006426 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006404:	7e3b      	ldrb	r3, [r7, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800640a:	2310      	movs	r3, #16
 800640c:	73bb      	strb	r3, [r7, #14]
 800640e:	e001      	b.n	8006414 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	461a      	mov	r2, r3
 8006418:	2184      	movs	r1, #132	; 0x84
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f003 fbbc 	bl	8009b98 <VL53L0X_WrByte>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	e0f3      	b.n	800660e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006426:	78bb      	ldrb	r3, [r7, #2]
 8006428:	2b15      	cmp	r3, #21
 800642a:	f040 8097 	bne.w	800655c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800642e:	2201      	movs	r2, #1
 8006430:	21ff      	movs	r1, #255	; 0xff
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f003 fbb0 	bl	8009b98 <VL53L0X_WrByte>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	4313      	orrs	r3, r2
 8006440:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006442:	2200      	movs	r2, #0
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f003 fba6 	bl	8009b98 <VL53L0X_WrByte>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	4313      	orrs	r3, r2
 8006454:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006456:	2200      	movs	r2, #0
 8006458:	21ff      	movs	r1, #255	; 0xff
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f003 fb9c 	bl	8009b98 <VL53L0X_WrByte>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	4313      	orrs	r3, r2
 8006468:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800646a:	2201      	movs	r2, #1
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f003 fb92 	bl	8009b98 <VL53L0X_WrByte>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	4313      	orrs	r3, r2
 800647c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800647e:	2202      	movs	r2, #2
 8006480:	2185      	movs	r1, #133	; 0x85
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f003 fb88 	bl	8009b98 <VL53L0X_WrByte>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4313      	orrs	r3, r2
 8006490:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006492:	2204      	movs	r2, #4
 8006494:	21ff      	movs	r1, #255	; 0xff
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f003 fb7e 	bl	8009b98 <VL53L0X_WrByte>
 800649c:	4603      	mov	r3, r0
 800649e:	461a      	mov	r2, r3
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80064a6:	2200      	movs	r2, #0
 80064a8:	21cd      	movs	r1, #205	; 0xcd
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f003 fb74 	bl	8009b98 <VL53L0X_WrByte>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80064ba:	2211      	movs	r2, #17
 80064bc:	21cc      	movs	r1, #204	; 0xcc
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f003 fb6a 	bl	8009b98 <VL53L0X_WrByte>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80064ce:	2207      	movs	r2, #7
 80064d0:	21ff      	movs	r1, #255	; 0xff
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f003 fb60 	bl	8009b98 <VL53L0X_WrByte>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	4313      	orrs	r3, r2
 80064e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80064e2:	2200      	movs	r2, #0
 80064e4:	21be      	movs	r1, #190	; 0xbe
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f003 fb56 	bl	8009b98 <VL53L0X_WrByte>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80064f6:	2206      	movs	r2, #6
 80064f8:	21ff      	movs	r1, #255	; 0xff
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f003 fb4c 	bl	8009b98 <VL53L0X_WrByte>
 8006500:	4603      	mov	r3, r0
 8006502:	461a      	mov	r2, r3
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	4313      	orrs	r3, r2
 8006508:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800650a:	2209      	movs	r2, #9
 800650c:	21cc      	movs	r1, #204	; 0xcc
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f003 fb42 	bl	8009b98 <VL53L0X_WrByte>
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	4313      	orrs	r3, r2
 800651c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800651e:	2200      	movs	r2, #0
 8006520:	21ff      	movs	r1, #255	; 0xff
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f003 fb38 	bl	8009b98 <VL53L0X_WrByte>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	4313      	orrs	r3, r2
 8006530:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006532:	2201      	movs	r2, #1
 8006534:	21ff      	movs	r1, #255	; 0xff
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f003 fb2e 	bl	8009b98 <VL53L0X_WrByte>
 800653c:	4603      	mov	r3, r0
 800653e:	461a      	mov	r2, r3
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	4313      	orrs	r3, r2
 8006544:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006546:	2200      	movs	r2, #0
 8006548:	2100      	movs	r1, #0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f003 fb24 	bl	8009b98 <VL53L0X_WrByte>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	4313      	orrs	r3, r2
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e058      	b.n	800660e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800655c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d121      	bne.n	80065a8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006564:	787b      	ldrb	r3, [r7, #1]
 8006566:	2b04      	cmp	r3, #4
 8006568:	d81b      	bhi.n	80065a2 <VL53L0X_SetGpioConfig+0x1ce>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <VL53L0X_SetGpioConfig+0x19c>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006585 	.word	0x08006585
 8006574:	0800658b 	.word	0x0800658b
 8006578:	08006591 	.word	0x08006591
 800657c:	08006597 	.word	0x08006597
 8006580:	0800659d 	.word	0x0800659d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006584:	2300      	movs	r3, #0
 8006586:	73bb      	strb	r3, [r7, #14]
				break;
 8006588:	e00f      	b.n	80065aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800658a:	2301      	movs	r3, #1
 800658c:	73bb      	strb	r3, [r7, #14]
				break;
 800658e:	e00c      	b.n	80065aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006590:	2302      	movs	r3, #2
 8006592:	73bb      	strb	r3, [r7, #14]
				break;
 8006594:	e009      	b.n	80065aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006596:	2303      	movs	r3, #3
 8006598:	73bb      	strb	r3, [r7, #14]
				break;
 800659a:	e006      	b.n	80065aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800659c:	2304      	movs	r3, #4
 800659e:	73bb      	strb	r3, [r7, #14]
				break;
 80065a0:	e003      	b.n	80065aa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80065a2:	23f5      	movs	r3, #245	; 0xf5
 80065a4:	73fb      	strb	r3, [r7, #15]
 80065a6:	e000      	b.n	80065aa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80065a8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80065aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	461a      	mov	r2, r3
 80065b6:	210a      	movs	r1, #10
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f003 faed 	bl	8009b98 <VL53L0X_WrByte>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80065c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10f      	bne.n	80065ea <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80065ca:	7e3b      	ldrb	r3, [r7, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73bb      	strb	r3, [r7, #14]
 80065d4:	e001      	b.n	80065da <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80065d6:	2310      	movs	r3, #16
 80065d8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	22ef      	movs	r2, #239	; 0xef
 80065de:	2184      	movs	r1, #132	; 0x84
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f003 fb27 	bl	8009c34 <VL53L0X_UpdateByte>
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80065ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	787a      	ldrb	r2, [r7, #1]
 80065f6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80065fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006602:	2100      	movs	r1, #0
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f83f 	bl	8006688 <VL53L0X_ClearInterruptMask>
 800660a:	4603      	mov	r3, r0
 800660c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800660e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop

0800661c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	460b      	mov	r3, r1
 800662a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800662c:	2300      	movs	r3, #0
 800662e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006630:	f107 0314 	add.w	r3, r7, #20
 8006634:	461a      	mov	r2, r3
 8006636:	210e      	movs	r1, #14
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f003 fb59 	bl	8009cf0 <VL53L0X_RdWord>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006642:	8abb      	ldrh	r3, [r7, #20]
 8006644:	045b      	lsls	r3, r3, #17
 8006646:	461a      	mov	r2, r3
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <VL53L0X_GetInterruptThresholds+0x68>)
 800664a:	4013      	ands	r3, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10f      	bne.n	8006678 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	461a      	mov	r2, r3
 800665e:	210c      	movs	r1, #12
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f003 fb45 	bl	8009cf0 <VL53L0X_RdWord>
 8006666:	4603      	mov	r3, r0
 8006668:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800666a:	8abb      	ldrh	r3, [r7, #20]
 800666c:	045b      	lsls	r3, r3, #17
 800666e:	461a      	mov	r2, r3
 8006670:	4b04      	ldr	r3, [pc, #16]	; (8006684 <VL53L0X_GetInterruptThresholds+0x68>)
 8006672:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	1ffe0000 	.word	0x1ffe0000

08006688 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800669a:	2201      	movs	r2, #1
 800669c:	210b      	movs	r1, #11
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f003 fa7a 	bl	8009b98 <VL53L0X_WrByte>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80066a8:	2200      	movs	r2, #0
 80066aa:	210b      	movs	r1, #11
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f003 fa73 	bl	8009b98 <VL53L0X_WrByte>
 80066b2:	4603      	mov	r3, r0
 80066b4:	461a      	mov	r2, r3
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80066bc:	f107 030d 	add.w	r3, r7, #13
 80066c0:	461a      	mov	r2, r3
 80066c2:	2113      	movs	r1, #19
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f003 fae9 	bl	8009c9c <VL53L0X_RdByte>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	3301      	adds	r3, #1
 80066d8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80066da:	7b7b      	ldrb	r3, [r7, #13]
 80066dc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d803      	bhi.n	80066f2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80066ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0d3      	beq.n	800669a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80066f8:	23f4      	movs	r3, #244	; 0xf4
 80066fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80066fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006716:	f107 030e 	add.w	r3, r7, #14
 800671a:	461a      	mov	r2, r3
 800671c:	2113      	movs	r1, #19
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f003 fabc 	bl	8009c9c <VL53L0X_RdByte>
 8006724:	4603      	mov	r3, r0
 8006726:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	f003 0207 	and.w	r2, r3, #7
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	f003 0318 	and.w	r3, r3, #24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800673c:	23fa      	movs	r3, #250	; 0xfa
 800673e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006758:	2300      	movs	r3, #0
 800675a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 fa03 	bl	8006b6c <VL53L0X_perform_ref_spad_management>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800676a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006784:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006788:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800678a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800678e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006790:	f107 0308 	add.w	r3, r7, #8
 8006794:	461a      	mov	r2, r3
 8006796:	2128      	movs	r1, #40	; 0x28
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f003 faa9 	bl	8009cf0 <VL53L0X_RdWord>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80067a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11e      	bne.n	80067e8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80067aa:	893b      	ldrh	r3, [r7, #8]
 80067ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80067b4:	893b      	ldrh	r3, [r7, #8]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	dd0b      	ble.n	80067d8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80067c0:	893a      	ldrh	r2, [r7, #8]
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	b21b      	sxth	r3, r3
 80067ca:	461a      	mov	r2, r3
					* 250;
 80067cc:	23fa      	movs	r3, #250	; 0xfa
 80067ce:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e007      	b.n	80067e8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80067d8:	893b      	ldrh	r3, [r7, #8]
 80067da:	b21b      	sxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	23fa      	movs	r3, #250	; 0xfa
 80067e0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80067e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b08b      	sub	sp, #44	; 0x2c
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006802:	2308      	movs	r3, #8
 8006804:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f04f 32ff 	mov.w	r2, #4294967295
 8006810:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	fbb3 f2f2 	udiv	r2, r3, r2
 8006824:	69b9      	ldr	r1, [r7, #24]
 8006826:	fb01 f202 	mul.w	r2, r1, r2
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
 8006832:	e030      	b.n	8006896 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	4413      	add	r3, r2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	429a      	cmp	r2, r3
 8006848:	d11e      	bne.n	8006888 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800684a:	7ffa      	ldrb	r2, [r7, #31]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	fa42 f303 	asr.w	r3, r2, r3
 8006852:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006858:	e016      	b.n	8006888 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800685a:	7ffb      	ldrb	r3, [r7, #31]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <get_next_good_spad+0x88>
				success = 1;
 8006864:	2301      	movs	r3, #1
 8006866:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	fb02 f203 	mul.w	r2, r2, r3
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	4413      	add	r3, r2
 8006874:	461a      	mov	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	601a      	str	r2, [r3, #0]
				break;
 800687a:	e009      	b.n	8006890 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800687c:	7ffb      	ldrb	r3, [r7, #31]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	3301      	adds	r3, #1
 8006886:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	d3e4      	bcc.n	800685a <get_next_good_spad+0x66>
				coarseIndex++) {
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	3301      	adds	r3, #1
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	d202      	bcs.n	80068a4 <get_next_good_spad+0xb0>
 800689e:	7fbb      	ldrb	r3, [r7, #30]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0c7      	beq.n	8006834 <get_next_good_spad+0x40>
		}
	}
}
 80068a4:	bf00      	nop
 80068a6:	372c      	adds	r7, #44	; 0x2c
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	099b      	lsrs	r3, r3, #6
 80068c0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80068c2:	4a07      	ldr	r2, [pc, #28]	; (80068e0 <is_aperture+0x30>)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <is_aperture+0x22>
		isAperture = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200002b8 	.word	0x200002b8

080068e4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b089      	sub	sp, #36	; 0x24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80068f4:	2308      	movs	r3, #8
 80068f6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	fbb3 f2f2 	udiv	r2, r3, r2
 800690a:	69b9      	ldr	r1, [r7, #24]
 800690c:	fb01 f202 	mul.w	r2, r1, r2
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800691c:	23ce      	movs	r3, #206	; 0xce
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e010      	b.n	8006944 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	b25a      	sxtb	r2, r3
 800692c:	2101      	movs	r1, #1
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	fa01 f303 	lsl.w	r3, r1, r3
 8006934:	b25b      	sxtb	r3, r3
 8006936:	4313      	orrs	r3, r2
 8006938:	b259      	sxtb	r1, r3
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	b2ca      	uxtb	r2, r1
 8006942:	701a      	strb	r2, [r3, #0]

	return status;
 8006944:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3724      	adds	r7, #36	; 0x24
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800695e:	2306      	movs	r3, #6
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	21b0      	movs	r1, #176	; 0xb0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f003 f8bb 	bl	8009ae0 <VL53L0X_WriteMulti>
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800696e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006984:	2306      	movs	r3, #6
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	21b0      	movs	r1, #176	; 0xb0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f003 f8d8 	bl	8009b40 <VL53L0X_ReadMulti>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006994:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08c      	sub	sp, #48	; 0x30
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	460b      	mov	r3, r1
 80069ae:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80069b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80069ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069bc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80069be:	2300      	movs	r3, #0
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c2:	e02b      	b.n	8006a1c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80069c4:	f107 031c 	add.w	r3, r7, #28
 80069c8:	6a3a      	ldr	r2, [r7, #32]
 80069ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ff11 	bl	80067f4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d103      	bne.n	80069e2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80069da:	23ce      	movs	r3, #206	; 0xce
 80069dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80069e0:	e020      	b.n	8006a24 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e8:	4413      	add	r3, r2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff ff60 	bl	80068b0 <is_aperture>
 80069f0:	4603      	mov	r3, r0
 80069f2:	461a      	mov	r2, r3
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80069fa:	23ce      	movs	r3, #206	; 0xce
 80069fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006a00:	e010      	b.n	8006a24 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a0a:	6838      	ldr	r0, [r7, #0]
 8006a0c:	f7ff ff6a 	bl	80068e4 <enable_spad_bit>
		currentSpad++;
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	3301      	adds	r3, #1
 8006a14:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	3301      	adds	r3, #1
 8006a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d3cf      	bcc.n	80069c4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006a2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff ff8d 	bl	8006954 <set_ref_spad_map>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006a40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d121      	bne.n	8006a8c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff ff93 	bl	800697a <get_ref_spad_map>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006a5e:	e011      	b.n	8006a84 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	4413      	add	r3, r2
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	f107 0114 	add.w	r1, r7, #20
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	440b      	add	r3, r1
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d003      	beq.n	8006a7e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a76:	23ce      	movs	r3, #206	; 0xce
 8006a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006a7c:	e006      	b.n	8006a8c <enable_ref_spads+0xec>
			}
			i++;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	3301      	adds	r3, #1
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d3e9      	bcc.n	8006a60 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006a8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3730      	adds	r7, #48	; 0x30
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006ab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d107      	bne.n	8006ad0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006ac0:	22c0      	movs	r2, #192	; 0xc0
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 f867 	bl	8009b98 <VL53L0X_WrByte>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006ad0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d108      	bne.n	8006aea <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006ad8:	f107 0308 	add.w	r3, r7, #8
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fc48 	bl	8006374 <VL53L0X_PerformSingleRangingMeasurement>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006aea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006af2:	2201      	movs	r2, #1
 8006af4:	21ff      	movs	r1, #255	; 0xff
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f003 f84e 	bl	8009b98 <VL53L0X_WrByte>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d107      	bne.n	8006b1a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	21b6      	movs	r1, #182	; 0xb6
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f003 f8ee 	bl	8009cf0 <VL53L0X_RdWord>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006b1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006b22:	2200      	movs	r2, #0
 8006b24:	21ff      	movs	r1, #255	; 0xff
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f003 f836 	bl	8009b98 <VL53L0X_WrByte>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006b32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d112      	bne.n	8006b60 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006b3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2101      	movs	r1, #1
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f003 f828 	bl	8009b98 <VL53L0X_WrByte>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006b4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b5c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3728      	adds	r7, #40	; 0x28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b09d      	sub	sp, #116	; 0x74
 8006b70:	af06      	add	r7, sp, #24
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006b7e:	23b4      	movs	r3, #180	; 0xb4
 8006b80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006b84:	2303      	movs	r3, #3
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006b88:	232c      	movs	r3, #44	; 0x2c
 8006b8a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006b98:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006ba6:	2306      	movs	r3, #6
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006bd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd6:	e009      	b.n	8006bec <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be8:	3301      	adds	r3, #1
 8006bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d3f1      	bcc.n	8006bd8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	21ff      	movs	r1, #255	; 0xff
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f002 ffcd 	bl	8009b98 <VL53L0X_WrByte>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006c04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d107      	bne.n	8006c1c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	214f      	movs	r1, #79	; 0x4f
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f002 ffc1 	bl	8009b98 <VL53L0X_WrByte>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006c1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006c24:	222c      	movs	r2, #44	; 0x2c
 8006c26:	214e      	movs	r1, #78	; 0x4e
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f002 ffb5 	bl	8009b98 <VL53L0X_WrByte>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	21ff      	movs	r1, #255	; 0xff
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f002 ffa9 	bl	8009b98 <VL53L0X_WrByte>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006c4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006c54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006c58:	461a      	mov	r2, r3
 8006c5a:	21b6      	movs	r1, #182	; 0xb6
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f002 ff9b 	bl	8009b98 <VL53L0X_WrByte>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006c68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006c70:	2200      	movs	r2, #0
 8006c72:	2180      	movs	r1, #128	; 0x80
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f002 ff8f 	bl	8009b98 <VL53L0X_WrByte>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006c80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006c88:	f107 0210 	add.w	r2, r7, #16
 8006c8c:	f107 0111 	add.w	r1, r7, #17
 8006c90:	2300      	movs	r3, #0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fbbb 	bl	800740e <VL53L0X_perform_ref_calibration>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006c9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d121      	bne.n	8006cea <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006cc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006cc6:	f107 0218 	add.w	r2, r7, #24
 8006cca:	9204      	str	r2, [sp, #16]
 8006ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cce:	9203      	str	r2, [sp, #12]
 8006cd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cd2:	9202      	str	r2, [sp, #8]
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	4623      	mov	r3, r4
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fe5e 	bl	80069a0 <enable_ref_spads>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d174      	bne.n	8006ddc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006cf6:	f107 0312 	add.w	r3, r7, #18
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fecb 	bl	8006a98 <perform_ref_signal_measurement>
 8006d02:	4603      	mov	r3, r0
 8006d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006d08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d161      	bne.n	8006dd4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006d10:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006d12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d25d      	bcs.n	8006dd4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d1c:	e009      	b.n	8006d32 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2e:	3301      	adds	r3, #1
 8006d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3f1      	bcc.n	8006d1e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006d3a:	e002      	b.n	8006d42 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3e:	3301      	adds	r3, #1
 8006d40:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006d42:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d48:	4413      	add	r3, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fdb0 	bl	80068b0 <is_aperture>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006d56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d3ee      	bcc.n	8006d3c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d64:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006d72:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006d76:	f107 0218 	add.w	r2, r7, #24
 8006d7a:	9204      	str	r2, [sp, #16]
 8006d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d7e:	9203      	str	r2, [sp, #12]
 8006d80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	4623      	mov	r3, r4
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fe06 	bl	80069a0 <enable_ref_spads>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006d9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d11b      	bne.n	8006dda <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006da6:	f107 0312 	add.w	r3, r7, #18
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fe73 	bl	8006a98 <perform_ref_signal_measurement>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006db8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006dc0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006dc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d208      	bcs.n	8006dda <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006dd2:	e002      	b.n	8006dda <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd8:	e000      	b.n	8006ddc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006dda:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006ddc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 80af 	bne.w	8006f44 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006de6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006de8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006dea:	429a      	cmp	r2, r3
 8006dec:	f240 80aa 	bls.w	8006f44 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006e00:	f107 031c 	add.w	r3, r7, #28
 8006e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e06:	4618      	mov	r0, r3
 8006e08:	f003 f820 	bl	8009e4c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006e0c:	8a7b      	ldrh	r3, [r7, #18]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfb8      	it	lt
 8006e18:	425b      	neglt	r3, r3
 8006e1a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006e22:	e086      	b.n	8006f32 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006e2a:	f107 0314 	add.w	r3, r7, #20
 8006e2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e32:	f7ff fcdf 	bl	80067f4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d103      	bne.n	8006e46 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006e3e:	23ce      	movs	r3, #206	; 0xce
 8006e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006e44:	e07e      	b.n	8006f44 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006e46:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff fd2e 	bl	80068b0 <is_aperture>
 8006e54:	4603      	mov	r3, r0
 8006e56:	461a      	mov	r2, r3
 8006e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006e64:	e06e      	b.n	8006f44 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e68:	3301      	adds	r3, #1
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fd32 	bl	80068e4 <enable_spad_bit>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006e86:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10c      	bne.n	8006ea8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e90:	3301      	adds	r3, #1
 8006e92:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fd59 	bl	8006954 <set_ref_spad_map>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006ea8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d146      	bne.n	8006f3e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006eb0:	f107 0312 	add.w	r3, r7, #18
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fdee 	bl	8006a98 <perform_ref_signal_measurement>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006ec2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d13b      	bne.n	8006f42 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006eca:	8a7b      	ldrh	r3, [r7, #18]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bfb8      	it	lt
 8006ed6:	425b      	neglt	r3, r3
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006eda:	8a7b      	ldrh	r3, [r7, #18]
 8006edc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d21c      	bcs.n	8006f1c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d914      	bls.n	8006f14 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006eea:	f107 031c 	add.w	r3, r7, #28
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff fd2f 	bl	8006954 <set_ref_spad_map>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006f02:	f107 011c 	add.w	r1, r7, #28
 8006f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f002 ff9f 	bl	8009e4c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f10:	3b01      	subs	r3, #1
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e00a      	b.n	8006f32 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006f26:	f107 031c 	add.w	r3, r7, #28
 8006f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f002 ff8d 	bl	8009e4c <memcpy>
		while (!complete) {
 8006f32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f43f af74 	beq.w	8006e24 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006f3c:	e002      	b.n	8006f44 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006f42:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d115      	bne.n	8006f78 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f50:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006f58:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006f78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	375c      	adds	r7, #92	; 0x5c
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd90      	pop	{r4, r7, pc}

08006f84 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006f84:	b590      	push	{r4, r7, lr}
 8006f86:	b093      	sub	sp, #76	; 0x4c
 8006f88:	af06      	add	r7, sp, #24
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006f9c:	23b4      	movs	r3, #180	; 0xb4
 8006f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006fa2:	2306      	movs	r3, #6
 8006fa4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006fa6:	232c      	movs	r3, #44	; 0x2c
 8006fa8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006faa:	2201      	movs	r2, #1
 8006fac:	21ff      	movs	r1, #255	; 0xff
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f002 fdf2 	bl	8009b98 <VL53L0X_WrByte>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006fba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d107      	bne.n	8006fd2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	214f      	movs	r1, #79	; 0x4f
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f002 fde6 	bl	8009b98 <VL53L0X_WrByte>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006fd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d107      	bne.n	8006fea <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006fda:	222c      	movs	r2, #44	; 0x2c
 8006fdc:	214e      	movs	r1, #78	; 0x4e
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f002 fdda 	bl	8009b98 <VL53L0X_WrByte>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006fea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d107      	bne.n	8007002 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	21ff      	movs	r1, #255	; 0xff
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f002 fdce 	bl	8009b98 <VL53L0X_WrByte>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007002:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800700a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800700e:	461a      	mov	r2, r3
 8007010:	21b6      	movs	r1, #182	; 0xb6
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f002 fdc0 	bl	8009b98 <VL53L0X_WrByte>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800701e:	2300      	movs	r3, #0
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
 8007022:	e009      	b.n	8007038 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	4413      	add	r3, r2
 800702a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	3301      	adds	r3, #1
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3f1      	bcc.n	8007024 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d011      	beq.n	800706a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007046:	e002      	b.n	800704e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	3301      	adds	r3, #1
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800704e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	4413      	add	r3, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fc2a 	bl	80068b0 <is_aperture>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <VL53L0X_set_reference_spads+0xe6>
 8007062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	429a      	cmp	r2, r3
 8007068:	d3ee      	bcc.n	8007048 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800707a:	79f9      	ldrb	r1, [r7, #7]
 800707c:	f107 0214 	add.w	r2, r7, #20
 8007080:	9204      	str	r2, [sp, #16]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	9203      	str	r2, [sp, #12]
 8007086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007088:	9202      	str	r2, [sp, #8]
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4623      	mov	r3, r4
 8007092:	4602      	mov	r2, r0
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff fc83 	bl	80069a0 <enable_ref_spads>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80070a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10c      	bne.n	80070c2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80070c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3734      	adds	r7, #52	; 0x34
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}

080070ce <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80070de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	f043 0301 	orr.w	r3, r3, #1
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	2100      	movs	r1, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f002 fd50 	bl	8009b98 <VL53L0X_WrByte>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80070fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f9bf 	bl	8007488 <VL53L0X_measurement_poll_for_completion>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800710e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007116:	2100      	movs	r1, #0
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff fab5 	bl	8006688 <VL53L0X_ClearInterruptMask>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f002 fd32 	bl	8009b98 <VL53L0X_WrByte>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	70fb      	strb	r3, [r7, #3]
 8007156:	460b      	mov	r3, r1
 8007158:	70bb      	strb	r3, [r7, #2]
 800715a:	4613      	mov	r3, r2
 800715c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007166:	2201      	movs	r2, #1
 8007168:	21ff      	movs	r1, #255	; 0xff
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 fd14 	bl	8009b98 <VL53L0X_WrByte>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	4313      	orrs	r3, r2
 8007178:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f002 fd0a 	bl	8009b98 <VL53L0X_WrByte>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4313      	orrs	r3, r2
 800718c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800718e:	2200      	movs	r2, #0
 8007190:	21ff      	movs	r1, #255	; 0xff
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f002 fd00 	bl	8009b98 <VL53L0X_WrByte>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	4313      	orrs	r3, r2
 80071a0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01e      	beq.n	80071e6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80071a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	21cb      	movs	r1, #203	; 0xcb
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f002 fd71 	bl	8009c9c <VL53L0X_RdByte>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80071c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d02a      	beq.n	8007222 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80071cc:	f107 030e 	add.w	r3, r7, #14
 80071d0:	461a      	mov	r2, r3
 80071d2:	21ee      	movs	r1, #238	; 0xee
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f002 fd61 	bl	8009c9c <VL53L0X_RdByte>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	e01d      	b.n	8007222 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80071e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80071ee:	78bb      	ldrb	r3, [r7, #2]
 80071f0:	461a      	mov	r2, r3
 80071f2:	21cb      	movs	r1, #203	; 0xcb
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 fccf 	bl	8009b98 <VL53L0X_WrByte>
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	4313      	orrs	r3, r2
 8007202:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800720c:	787b      	ldrb	r3, [r7, #1]
 800720e:	2280      	movs	r2, #128	; 0x80
 8007210:	21ee      	movs	r1, #238	; 0xee
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 fd0e 	bl	8009c34 <VL53L0X_UpdateByte>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	4313      	orrs	r3, r2
 8007220:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007222:	2201      	movs	r2, #1
 8007224:	21ff      	movs	r1, #255	; 0xff
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f002 fcb6 	bl	8009b98 <VL53L0X_WrByte>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	4313      	orrs	r3, r2
 8007234:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007236:	2201      	movs	r2, #1
 8007238:	2100      	movs	r1, #0
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f002 fcac 	bl	8009b98 <VL53L0X_WrByte>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4313      	orrs	r3, r2
 8007248:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800724a:	2200      	movs	r2, #0
 800724c:	21ff      	movs	r1, #255	; 0xff
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f002 fca2 	bl	8009b98 <VL53L0X_WrByte>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	4313      	orrs	r3, r2
 800725c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	f023 0310 	bic.w	r3, r3, #16
 8007264:	b2da      	uxtb	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	701a      	strb	r2, [r3, #0]

	return Status;
 800726a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b08a      	sub	sp, #40	; 0x28
 800727a:	af04      	add	r7, sp, #16
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	4611      	mov	r1, r2
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	71fb      	strb	r3, [r7, #7]
 8007288:	4613      	mov	r3, r2
 800728a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80072a0:	79bb      	ldrb	r3, [r7, #6]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80072ac:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80072ae:	2201      	movs	r2, #1
 80072b0:	2101      	movs	r1, #1
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f002 fc70 	bl	8009b98 <VL53L0X_WrByte>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80072bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80072c4:	2140      	movs	r1, #64	; 0x40
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff ff01 	bl	80070ce <VL53L0X_perform_single_ref_calibration>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80072d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d115      	bne.n	8007304 <VL53L0X_perform_vhv_calibration+0x8e>
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d112      	bne.n	8007304 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80072de:	7d39      	ldrb	r1, [r7, #20]
 80072e0:	7d7a      	ldrb	r2, [r7, #21]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9303      	str	r3, [sp, #12]
 80072e6:	2301      	movs	r3, #1
 80072e8:	9302      	str	r3, [sp, #8]
 80072ea:	f107 0313 	add.w	r3, r7, #19
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	460b      	mov	r3, r1
 80072f6:	2101      	movs	r1, #1
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff ff23 	bl	8007144 <VL53L0X_ref_calibration_io>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]
 8007302:	e002      	b.n	800730a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800730a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d112      	bne.n	8007338 <VL53L0X_perform_vhv_calibration+0xc2>
 8007312:	79bb      	ldrb	r3, [r7, #6]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00f      	beq.n	8007338 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007318:	7dbb      	ldrb	r3, [r7, #22]
 800731a:	461a      	mov	r2, r3
 800731c:	2101      	movs	r1, #1
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f002 fc3a 	bl	8009b98 <VL53L0X_WrByte>
 8007324:	4603      	mov	r3, r0
 8007326:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d103      	bne.n	8007338 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7dba      	ldrb	r2, [r7, #22]
 8007334:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08a      	sub	sp, #40	; 0x28
 8007348:	af04      	add	r7, sp, #16
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4611      	mov	r1, r2
 8007350:	461a      	mov	r2, r3
 8007352:	460b      	mov	r3, r1
 8007354:	71fb      	strb	r3, [r7, #7]
 8007356:	4613      	mov	r3, r2
 8007358:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800736a:	79bb      	ldrb	r3, [r7, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007376:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007378:	2202      	movs	r2, #2
 800737a:	2101      	movs	r1, #1
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f002 fc0b 	bl	8009b98 <VL53L0X_WrByte>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d105      	bne.n	800739a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800738e:	2100      	movs	r1, #0
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fe9c 	bl	80070ce <VL53L0X_perform_single_ref_calibration>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800739a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d115      	bne.n	80073ce <VL53L0X_perform_phase_calibration+0x8a>
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d112      	bne.n	80073ce <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80073a8:	7d39      	ldrb	r1, [r7, #20]
 80073aa:	7d7a      	ldrb	r2, [r7, #21]
 80073ac:	2301      	movs	r3, #1
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	2300      	movs	r3, #0
 80073b2:	9302      	str	r3, [sp, #8]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	f107 0313 	add.w	r3, r7, #19
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	460b      	mov	r3, r1
 80073c0:	2101      	movs	r1, #1
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff febe 	bl	8007144 <VL53L0X_ref_calibration_io>
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]
 80073cc:	e002      	b.n	80073d4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80073d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d112      	bne.n	8007402 <VL53L0X_perform_phase_calibration+0xbe>
 80073dc:	79bb      	ldrb	r3, [r7, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00f      	beq.n	8007402 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80073e2:	7dbb      	ldrb	r3, [r7, #22]
 80073e4:	461a      	mov	r2, r3
 80073e6:	2101      	movs	r1, #1
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f002 fbd5 	bl	8009b98 <VL53L0X_WrByte>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80073f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	7dba      	ldrb	r2, [r7, #22]
 80073fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800742a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	2300      	movs	r3, #0
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff ff1f 	bl	8007276 <VL53L0X_perform_vhv_calibration>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800743c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d107      	bne.n	8007454 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	2300      	movs	r3, #0
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff ff7a 	bl	8007344 <VL53L0X_perform_phase_calibration>
 8007450:	4603      	mov	r3, r0
 8007452:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10f      	bne.n	800747c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800745c:	7dbb      	ldrb	r3, [r7, #22]
 800745e:	461a      	mov	r2, r3
 8007460:	2101      	movs	r1, #1
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f002 fb98 	bl	8009b98 <VL53L0X_WrByte>
 8007468:	4603      	mov	r3, r0
 800746a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800746c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	7dba      	ldrb	r2, [r7, #22]
 8007478:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800747c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800749c:	f107 030f 	add.w	r3, r7, #15
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fe fdf2 	bl	800608c <VL53L0X_GetMeasurementDataReady>
 80074a8:	4603      	mov	r3, r0
 80074aa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80074ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d110      	bne.n	80074d6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d00f      	beq.n	80074da <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	3301      	adds	r3, #1
 80074be:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80074c6:	d302      	bcc.n	80074ce <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80074c8:	23f9      	movs	r3, #249	; 0xf9
 80074ca:	75fb      	strb	r3, [r7, #23]
			break;
 80074cc:	e006      	b.n	80074dc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f002 fc82 	bl	8009dd8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80074d4:	e7e2      	b.n	800749c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80074da:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80074dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	3301      	adds	r3, #1
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	4603      	mov	r3, r0
 8007516:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007544:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007546:	e002      	b.n	800754e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d8f8      	bhi.n	8007548 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007556:	e017      	b.n	8007588 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4413      	add	r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d30b      	bcc.n	800757c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4413      	add	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	4413      	add	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	e002      	b.n	8007582 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	089b      	lsrs	r3, r3, #2
 8007586:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e4      	bne.n	8007558 <VL53L0X_isqrt+0x24>
	}

	return res;
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80075a8:	2200      	movs	r2, #0
 80075aa:	2183      	movs	r1, #131	; 0x83
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f002 faf3 	bl	8009b98 <VL53L0X_WrByte>
 80075b2:	4603      	mov	r3, r0
 80075b4:	461a      	mov	r2, r3
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80075bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d11e      	bne.n	8007602 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80075c8:	f107 030f 	add.w	r3, r7, #15
 80075cc:	461a      	mov	r2, r3
 80075ce:	2183      	movs	r1, #131	; 0x83
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f002 fb63 	bl	8009c9c <VL53L0X_RdByte>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <VL53L0X_device_read_strobe+0x5a>
 80075e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80075f4:	d3e8      	bcc.n	80075c8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80075fc:	d301      	bcc.n	8007602 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80075fe:	23f9      	movs	r3, #249	; 0xf9
 8007600:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007602:	2201      	movs	r2, #1
 8007604:	2183      	movs	r1, #131	; 0x83
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 fac6 	bl	8009b98 <VL53L0X_WrByte>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	4313      	orrs	r3, r2
 8007614:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007616:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b098      	sub	sp, #96	; 0x60
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007652:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007656:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800766a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800766e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007672:	2b07      	cmp	r3, #7
 8007674:	f000 8408 	beq.w	8007e88 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007678:	2201      	movs	r2, #1
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f002 fa8b 	bl	8009b98 <VL53L0X_WrByte>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800768a:	4313      	orrs	r3, r2
 800768c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007690:	2201      	movs	r2, #1
 8007692:	21ff      	movs	r1, #255	; 0xff
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f002 fa7f 	bl	8009b98 <VL53L0X_WrByte>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f002 fa73 	bl	8009b98 <VL53L0X_WrByte>
 80076b2:	4603      	mov	r3, r0
 80076b4:	461a      	mov	r2, r3
 80076b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80076c0:	2206      	movs	r2, #6
 80076c2:	21ff      	movs	r1, #255	; 0xff
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f002 fa67 	bl	8009b98 <VL53L0X_WrByte>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80076d8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80076dc:	461a      	mov	r2, r3
 80076de:	2183      	movs	r1, #131	; 0x83
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 fadb 	bl	8009c9c <VL53L0X_RdByte>
 80076e6:	4603      	mov	r3, r0
 80076e8:	461a      	mov	r2, r3
 80076ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80076f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076f8:	f043 0304 	orr.w	r3, r3, #4
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	2183      	movs	r1, #131	; 0x83
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 fa48 	bl	8009b98 <VL53L0X_WrByte>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007710:	4313      	orrs	r3, r2
 8007712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007716:	2207      	movs	r2, #7
 8007718:	21ff      	movs	r1, #255	; 0xff
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 fa3c 	bl	8009b98 <VL53L0X_WrByte>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007728:	4313      	orrs	r3, r2
 800772a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800772e:	2201      	movs	r2, #1
 8007730:	2181      	movs	r1, #129	; 0x81
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f002 fa30 	bl	8009b98 <VL53L0X_WrByte>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007740:	4313      	orrs	r3, r2
 8007742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 fb46 	bl	8009dd8 <VL53L0X_PollingDelay>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007754:	4313      	orrs	r3, r2
 8007756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800775a:	2201      	movs	r2, #1
 800775c:	2180      	movs	r1, #128	; 0x80
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f002 fa1a 	bl	8009b98 <VL53L0X_WrByte>
 8007764:	4603      	mov	r3, r0
 8007766:	461a      	mov	r2, r3
 8007768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800776c:	4313      	orrs	r3, r2
 800776e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8098 	beq.w	80078ae <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800777e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007782:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007786:	2b00      	cmp	r3, #0
 8007788:	f040 8091 	bne.w	80078ae <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800778c:	226b      	movs	r2, #107	; 0x6b
 800778e:	2194      	movs	r1, #148	; 0x94
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f002 fa01 	bl	8009b98 <VL53L0X_WrByte>
 8007796:	4603      	mov	r3, r0
 8007798:	461a      	mov	r2, r3
 800779a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800779e:	4313      	orrs	r3, r2
 80077a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff fef9 	bl	800759c <VL53L0X_device_read_strobe>
 80077aa:	4603      	mov	r3, r0
 80077ac:	461a      	mov	r2, r3
 80077ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077bc:	461a      	mov	r2, r3
 80077be:	2190      	movs	r1, #144	; 0x90
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f002 facd 	bl	8009d60 <VL53L0X_RdDWord>
 80077c6:	4603      	mov	r3, r0
 80077c8:	461a      	mov	r2, r3
 80077ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077de:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	0bdb      	lsrs	r3, r3, #15
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80077f0:	2224      	movs	r2, #36	; 0x24
 80077f2:	2194      	movs	r1, #148	; 0x94
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f002 f9cf 	bl	8009b98 <VL53L0X_WrByte>
 80077fa:	4603      	mov	r3, r0
 80077fc:	461a      	mov	r2, r3
 80077fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007802:	4313      	orrs	r3, r2
 8007804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7ff fec7 	bl	800759c <VL53L0X_device_read_strobe>
 800780e:	4603      	mov	r3, r0
 8007810:	461a      	mov	r2, r3
 8007812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007816:	4313      	orrs	r3, r2
 8007818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800781c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007820:	461a      	mov	r2, r3
 8007822:	2190      	movs	r1, #144	; 0x90
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f002 fa9b 	bl	8009d60 <VL53L0X_RdDWord>
 800782a:	4603      	mov	r3, r0
 800782c:	461a      	mov	r2, r3
 800782e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007832:	4313      	orrs	r3, r2
 8007834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	0e1b      	lsrs	r3, r3, #24
 800783c:	b2db      	uxtb	r3, r3
 800783e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b2db      	uxtb	r3, r3
 8007846:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	b2db      	uxtb	r3, r3
 800784e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	b2db      	uxtb	r3, r3
 8007854:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007856:	2225      	movs	r2, #37	; 0x25
 8007858:	2194      	movs	r1, #148	; 0x94
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f002 f99c 	bl	8009b98 <VL53L0X_WrByte>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007868:	4313      	orrs	r3, r2
 800786a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff fe94 	bl	800759c <VL53L0X_device_read_strobe>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800787c:	4313      	orrs	r3, r2
 800787e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007886:	461a      	mov	r2, r3
 8007888:	2190      	movs	r1, #144	; 0x90
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f002 fa68 	bl	8009d60 <VL53L0X_RdDWord>
 8007890:	4603      	mov	r3, r0
 8007892:	461a      	mov	r2, r3
 8007894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007898:	4313      	orrs	r3, r2
 800789a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	0e1b      	lsrs	r3, r3, #24
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	0c1b      	lsrs	r3, r3, #16
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8189 	beq.w	8007bcc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80078ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078be:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f040 8182 	bne.w	8007bcc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80078c8:	2202      	movs	r2, #2
 80078ca:	2194      	movs	r1, #148	; 0x94
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f002 f963 	bl	8009b98 <VL53L0X_WrByte>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078da:	4313      	orrs	r3, r2
 80078dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff fe5b 	bl	800759c <VL53L0X_device_read_strobe>
 80078e6:	4603      	mov	r3, r0
 80078e8:	461a      	mov	r2, r3
 80078ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80078f4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80078f8:	461a      	mov	r2, r3
 80078fa:	2190      	movs	r1, #144	; 0x90
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f002 f9cd 	bl	8009c9c <VL53L0X_RdByte>
 8007902:	4603      	mov	r3, r0
 8007904:	461a      	mov	r2, r3
 8007906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800790a:	4313      	orrs	r3, r2
 800790c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007910:	227b      	movs	r2, #123	; 0x7b
 8007912:	2194      	movs	r1, #148	; 0x94
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f002 f93f 	bl	8009b98 <VL53L0X_WrByte>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007922:	4313      	orrs	r3, r2
 8007924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff fe37 	bl	800759c <VL53L0X_device_read_strobe>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007936:	4313      	orrs	r3, r2
 8007938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800793c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007940:	461a      	mov	r2, r3
 8007942:	2190      	movs	r1, #144	; 0x90
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f002 f9a9 	bl	8009c9c <VL53L0X_RdByte>
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007952:	4313      	orrs	r3, r2
 8007954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007958:	2277      	movs	r2, #119	; 0x77
 800795a:	2194      	movs	r1, #148	; 0x94
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 f91b 	bl	8009b98 <VL53L0X_WrByte>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800796a:	4313      	orrs	r3, r2
 800796c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fe13 	bl	800759c <VL53L0X_device_read_strobe>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800797e:	4313      	orrs	r3, r2
 8007980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007988:	461a      	mov	r2, r3
 800798a:	2190      	movs	r1, #144	; 0x90
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 f9e7 	bl	8009d60 <VL53L0X_RdDWord>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800799a:	4313      	orrs	r3, r2
 800799c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	0e5b      	lsrs	r3, r3, #25
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	0c9b      	lsrs	r3, r3, #18
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	0adb      	lsrs	r3, r3, #11
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	091b      	lsrs	r3, r3, #4
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80079ea:	2278      	movs	r2, #120	; 0x78
 80079ec:	2194      	movs	r1, #148	; 0x94
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f002 f8d2 	bl	8009b98 <VL53L0X_WrByte>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fdca 	bl	800759c <VL53L0X_device_read_strobe>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	2190      	movs	r1, #144	; 0x90
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f002 f99e 	bl	8009d60 <VL53L0X_RdDWord>
 8007a24:	4603      	mov	r3, r0
 8007a26:	461a      	mov	r2, r3
 8007a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	0f5b      	lsrs	r3, r3, #29
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a42:	4413      	add	r3, r2
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	0d9b      	lsrs	r3, r3, #22
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	0bdb      	lsrs	r3, r3, #15
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	019b      	lsls	r3, r3, #6
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007a92:	2279      	movs	r2, #121	; 0x79
 8007a94:	2194      	movs	r1, #148	; 0x94
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f002 f87e 	bl	8009b98 <VL53L0X_WrByte>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fd76 	bl	800759c <VL53L0X_device_read_strobe>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	2190      	movs	r1, #144	; 0x90
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 f94a 	bl	8009d60 <VL53L0X_RdDWord>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	0e9b      	lsrs	r3, r3, #26
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aea:	4413      	add	r3, r2
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	0cdb      	lsrs	r3, r3, #19
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	0b1b      	lsrs	r3, r3, #12
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007b2c:	227a      	movs	r2, #122	; 0x7a
 8007b2e:	2194      	movs	r1, #148	; 0x94
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f002 f831 	bl	8009b98 <VL53L0X_WrByte>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fd29 	bl	800759c <VL53L0X_device_read_strobe>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007b58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2190      	movs	r1, #144	; 0x90
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 f8fd 	bl	8009d60 <VL53L0X_RdDWord>
 8007b66:	4603      	mov	r3, r0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	0f9b      	lsrs	r3, r3, #30
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b84:	4413      	add	r3, r2
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	0ddb      	lsrs	r3, r3, #23
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	0c1b      	lsrs	r3, r3, #16
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	0a5b      	lsrs	r3, r3, #9
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80f1 	beq.w	8007dba <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007bdc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 80ea 	bne.w	8007dba <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007be6:	227b      	movs	r2, #123	; 0x7b
 8007be8:	2194      	movs	r1, #148	; 0x94
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 ffd4 	bl	8009b98 <VL53L0X_WrByte>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff fccc 	bl	800759c <VL53L0X_device_read_strobe>
 8007c04:	4603      	mov	r3, r0
 8007c06:	461a      	mov	r2, r3
 8007c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c16:	461a      	mov	r2, r3
 8007c18:	2190      	movs	r1, #144	; 0x90
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f002 f8a0 	bl	8009d60 <VL53L0X_RdDWord>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007c2e:	227c      	movs	r2, #124	; 0x7c
 8007c30:	2194      	movs	r1, #148	; 0x94
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 ffb0 	bl	8009b98 <VL53L0X_WrByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff fca8 	bl	800759c <VL53L0X_device_read_strobe>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c5e:	461a      	mov	r2, r3
 8007c60:	2190      	movs	r1, #144	; 0x90
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f002 f87c 	bl	8009d60 <VL53L0X_RdDWord>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007c76:	2273      	movs	r2, #115	; 0x73
 8007c78:	2194      	movs	r1, #148	; 0x94
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 ff8c 	bl	8009b98 <VL53L0X_WrByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fc84 	bl	800759c <VL53L0X_device_read_strobe>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	2190      	movs	r1, #144	; 0x90
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f002 f858 	bl	8009d60 <VL53L0X_RdDWord>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007cc6:	2274      	movs	r2, #116	; 0x74
 8007cc8:	2194      	movs	r1, #148	; 0x94
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 ff64 	bl	8009b98 <VL53L0X_WrByte>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff fc5c 	bl	800759c <VL53L0X_device_read_strobe>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007cf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2190      	movs	r1, #144	; 0x90
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f002 f830 	bl	8009d60 <VL53L0X_RdDWord>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007d12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d14:	4313      	orrs	r3, r2
 8007d16:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007d18:	2275      	movs	r2, #117	; 0x75
 8007d1a:	2194      	movs	r1, #148	; 0x94
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 ff3b 	bl	8009b98 <VL53L0X_WrByte>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff fc33 	bl	800759c <VL53L0X_device_read_strobe>
 8007d36:	4603      	mov	r3, r0
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2190      	movs	r1, #144	; 0x90
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f002 f807 	bl	8009d60 <VL53L0X_RdDWord>
 8007d52:	4603      	mov	r3, r0
 8007d54:	461a      	mov	r2, r3
 8007d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007d68:	2276      	movs	r2, #118	; 0x76
 8007d6a:	2194      	movs	r1, #148	; 0x94
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 ff13 	bl	8009b98 <VL53L0X_WrByte>
 8007d72:	4603      	mov	r3, r0
 8007d74:	461a      	mov	r2, r3
 8007d76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff fc0b 	bl	800759c <VL53L0X_device_read_strobe>
 8007d86:	4603      	mov	r3, r0
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007d94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d98:	461a      	mov	r2, r3
 8007d9a:	2190      	movs	r1, #144	; 0x90
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 ffdf 	bl	8009d60 <VL53L0X_RdDWord>
 8007da2:	4603      	mov	r3, r0
 8007da4:	461a      	mov	r2, r3
 8007da6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007db6:	4313      	orrs	r3, r2
 8007db8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2181      	movs	r1, #129	; 0x81
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 feea 	bl	8009b98 <VL53L0X_WrByte>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007dd2:	2206      	movs	r2, #6
 8007dd4:	21ff      	movs	r1, #255	; 0xff
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 fede 	bl	8009b98 <VL53L0X_WrByte>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007dea:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007dee:	461a      	mov	r2, r3
 8007df0:	2183      	movs	r1, #131	; 0x83
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 ff52 	bl	8009c9c <VL53L0X_RdByte>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e0a:	f023 0304 	bic.w	r3, r3, #4
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	2183      	movs	r1, #131	; 0x83
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 febf 	bl	8009b98 <VL53L0X_WrByte>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e28:	2201      	movs	r2, #1
 8007e2a:	21ff      	movs	r1, #255	; 0xff
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 feb3 	bl	8009b98 <VL53L0X_WrByte>
 8007e32:	4603      	mov	r3, r0
 8007e34:	461a      	mov	r2, r3
 8007e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007e40:	2201      	movs	r2, #1
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fea7 	bl	8009b98 <VL53L0X_WrByte>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	21ff      	movs	r1, #255	; 0xff
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fe9b 	bl	8009b98 <VL53L0X_WrByte>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007e70:	2200      	movs	r2, #0
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fe8f 	bl	8009b98 <VL53L0X_WrByte>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007e88:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f040 808f 	bne.w	8007fb0 <VL53L0X_get_info_from_device+0x98e>
 8007e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e96:	2b07      	cmp	r3, #7
 8007e98:	f000 808a 	beq.w	8007fb0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d024      	beq.n	8007ef0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007ea6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007eaa:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d11e      	bne.n	8007ef0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007eb8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007ec2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eca:	e00e      	b.n	8007eea <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007ecc:	f107 0208 	add.w	r2, r7, #8
 8007ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed2:	4413      	add	r3, r2
 8007ed4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	dded      	ble.n	8007ecc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d018      	beq.n	8007f2c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007efa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007efe:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d112      	bne.n	8007f2c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f06:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f10:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	33f3      	adds	r3, #243	; 0xf3
 8007f1e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007f20:	f107 0310 	add.w	r3, r7, #16
 8007f24:	4619      	mov	r1, r3
 8007f26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f28:	f002 fd64 	bl	800a9f4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d030      	beq.n	8007f98 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007f36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f3a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d12a      	bne.n	8007f98 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f54:	025b      	lsls	r3, r3, #9
 8007f56:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f5c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d011      	beq.n	8007f90 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f7a:	fb02 f303 	mul.w	r3, r2, r3
 8007f7e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007f80:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007f84:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007f88:	425b      	negs	r3, r3
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007f90:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007f98:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007fa6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007fb0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3760      	adds	r7, #96	; 0x60
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007fc8:	f240 6277 	movw	r2, #1655	; 0x677
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007fd4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007fd8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	fb02 f303 	mul.w	r3, r2, r3
 8007fe8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007fea:	68bb      	ldr	r3, [r7, #8]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d017      	beq.n	8008042 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3b01      	subs	r3, #1
 8008016:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008018:	e005      	b.n	8008026 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	3301      	adds	r3, #1
 8008024:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f4      	bne.n	800801a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	b29b      	uxth	r3, r3
 800803a:	b2db      	uxtb	r3, r3
 800803c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800803e:	4413      	add	r3, r2
 8008040:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008042:	8afb      	ldrh	r3, [r7, #22]

}
 8008044:	4618      	mov	r0, r3
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	0a12      	lsrs	r2, r2, #8
 8008066:	b292      	uxth	r2, r2
 8008068:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800806e:	68fb      	ldr	r3, [r7, #12]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	4613      	mov	r3, r2
 8008088:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff ff92 	bl	8007fbc <VL53L0X_calc_macro_period_ps>
 8008098:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <VL53L0X_calc_timeout_mclks+0x50>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080b0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
	timeout_period_mclks =
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80080c2:	69fb      	ldr	r3, [r7, #28]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	10624dd3 	.word	0x10624dd3

080080d0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
 80080dc:	4613      	mov	r3, r2
 80080de:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80080e4:	787b      	ldrb	r3, [r7, #1]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff67 	bl	8007fbc <VL53L0X_calc_macro_period_ps>
 80080ee:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080f6:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <VL53L0X_calc_timeout_us+0x50>)
 80080f8:	fba2 2303 	umull	r2, r3, r2, r3
 80080fc:	099b      	lsrs	r3, r3, #6
 80080fe:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008100:	887b      	ldrh	r3, [r7, #2]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	fb02 f303 	mul.w	r3, r2, r3
 8008108:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800810c:	4a04      	ldr	r2, [pc, #16]	; (8008120 <VL53L0X_calc_timeout_us+0x50>)
 800810e:	fba2 2303 	umull	r2, r3, r2, r3
 8008112:	099b      	lsrs	r3, r3, #6
 8008114:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008116:	697b      	ldr	r3, [r7, #20]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	10624dd3 	.word	0x10624dd3

08008124 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08c      	sub	sp, #48	; 0x30
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	460b      	mov	r3, r1
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <get_sequence_step_timeout+0x38>
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d002      	beq.n	800815c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d128      	bne.n	80081ae <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800815c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008160:	461a      	mov	r2, r3
 8008162:	2100      	movs	r1, #0
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7fd fa6d 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008170:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008178:	f107 0320 	add.w	r3, r7, #32
 800817c:	461a      	mov	r2, r3
 800817e:	2146      	movs	r1, #70	; 0x46
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f001 fd8b 	bl	8009c9c <VL53L0X_RdByte>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800818c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008190:	b29b      	uxth	r3, r3
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff ff5c 	bl	8008050 <VL53L0X_decode_timeout>
 8008198:	4603      	mov	r3, r0
 800819a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800819c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80081a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081a2:	4619      	mov	r1, r3
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ff93 	bl	80080d0 <VL53L0X_calc_timeout_us>
 80081aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80081ac:	e092      	b.n	80082d4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d135      	bne.n	8008220 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80081b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80081b8:	461a      	mov	r2, r3
 80081ba:	2100      	movs	r1, #0
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7fd fa41 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80081c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8081 	bne.w	80082d4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80081d2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80081d6:	461a      	mov	r2, r3
 80081d8:	2100      	movs	r1, #0
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7fd fa32 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80081e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d109      	bne.n	8008202 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80081ee:	f107 031e 	add.w	r3, r7, #30
 80081f2:	461a      	mov	r2, r3
 80081f4:	2151      	movs	r1, #81	; 0x51
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f001 fd7a 	bl	8009cf0 <VL53L0X_RdWord>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008202:	8bfb      	ldrh	r3, [r7, #30]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ff23 	bl	8008050 <VL53L0X_decode_timeout>
 800820a:	4603      	mov	r3, r0
 800820c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800820e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008214:	4619      	mov	r1, r3
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff ff5a 	bl	80080d0 <VL53L0X_calc_timeout_us>
 800821c:	62b8      	str	r0, [r7, #40]	; 0x28
 800821e:	e059      	b.n	80082d4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	2b04      	cmp	r3, #4
 8008224:	d156      	bne.n	80082d4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008226:	f107 0314 	add.w	r3, r7, #20
 800822a:	4619      	mov	r1, r3
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f7fd fb15 	bl	800585c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01d      	beq.n	8008278 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800823c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008240:	461a      	mov	r2, r3
 8008242:	2100      	movs	r1, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7fd f9fd 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008250:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10f      	bne.n	8008278 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008258:	f107 031e 	add.w	r3, r7, #30
 800825c:	461a      	mov	r2, r3
 800825e:	2151      	movs	r1, #81	; 0x51
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f001 fd45 	bl	8009cf0 <VL53L0X_RdWord>
 8008266:	4603      	mov	r3, r0
 8008268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800826c:	8bfb      	ldrh	r3, [r7, #30]
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff feee 	bl	8008050 <VL53L0X_decode_timeout>
 8008274:	4603      	mov	r3, r0
 8008276:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008278:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800827c:	2b00      	cmp	r3, #0
 800827e:	d109      	bne.n	8008294 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008280:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008284:	461a      	mov	r2, r3
 8008286:	2101      	movs	r1, #1
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7fd f9db 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10f      	bne.n	80082bc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800829c:	f107 031c 	add.w	r3, r7, #28
 80082a0:	461a      	mov	r2, r3
 80082a2:	2171      	movs	r1, #113	; 0x71
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 fd23 	bl	8009cf0 <VL53L0X_RdWord>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80082b0:	8bbb      	ldrh	r3, [r7, #28]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fecc 	bl	8008050 <VL53L0X_decode_timeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80082bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80082c4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80082c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082ca:	4619      	mov	r1, r3
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff feff 	bl	80080d0 <VL53L0X_calc_timeout_us>
 80082d2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d8:	601a      	str	r2, [r3, #0]

	return Status;
 80082da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3730      	adds	r7, #48	; 0x30
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b08a      	sub	sp, #40	; 0x28
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	460b      	mov	r3, r1
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <set_sequence_step_timeout+0x26>
 8008300:	7afb      	ldrb	r3, [r7, #11]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d002      	beq.n	800830c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d138      	bne.n	800837e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800830c:	f107 031b 	add.w	r3, r7, #27
 8008310:	461a      	mov	r2, r3
 8008312:	2100      	movs	r1, #0
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7fd f995 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008324:	2b00      	cmp	r3, #0
 8008326:	d11a      	bne.n	800835e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008328:	7efb      	ldrb	r3, [r7, #27]
 800832a:	461a      	mov	r2, r3
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fea4 	bl	800807c <VL53L0X_calc_timeout_mclks>
 8008334:	4603      	mov	r3, r0
 8008336:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008338:	8bbb      	ldrh	r3, [r7, #28]
 800833a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833e:	d903      	bls.n	8008348 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008340:	23ff      	movs	r3, #255	; 0xff
 8008342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008346:	e004      	b.n	8008352 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008348:	8bbb      	ldrh	r3, [r7, #28]
 800834a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800834c:	3b01      	subs	r3, #1
 800834e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008352:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800835e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008362:	2b00      	cmp	r3, #0
 8008364:	f040 80ab 	bne.w	80084be <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800836c:	461a      	mov	r2, r3
 800836e:	2146      	movs	r1, #70	; 0x46
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f001 fc11 	bl	8009b98 <VL53L0X_WrByte>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800837c:	e09f      	b.n	80084be <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	2b03      	cmp	r3, #3
 8008382:	d135      	bne.n	80083f0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008388:	2b00      	cmp	r3, #0
 800838a:	d11b      	bne.n	80083c4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800838c:	f107 031b 	add.w	r3, r7, #27
 8008390:	461a      	mov	r2, r3
 8008392:	2100      	movs	r1, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7fd f955 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800839a:	4603      	mov	r3, r0
 800839c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80083a0:	7efb      	ldrb	r3, [r7, #27]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff fe68 	bl	800807c <VL53L0X_calc_timeout_mclks>
 80083ac:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80083ae:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80083b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff fe20 	bl	8007ff8 <VL53L0X_encode_timeout>
 80083b8:	4603      	mov	r3, r0
 80083ba:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80083bc:	8b3a      	ldrh	r2, [r7, #24]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80083c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d108      	bne.n	80083de <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80083cc:	8b3b      	ldrh	r3, [r7, #24]
 80083ce:	461a      	mov	r2, r3
 80083d0:	2151      	movs	r1, #81	; 0x51
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f001 fc04 	bl	8009be0 <VL53L0X_WrWord>
 80083d8:	4603      	mov	r3, r0
 80083da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80083de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d16b      	bne.n	80084be <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80083ee:	e066      	b.n	80084be <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d160      	bne.n	80084b8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80083f6:	f107 0310 	add.w	r3, r7, #16
 80083fa:	4619      	mov	r1, r3
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7fd fa2d 	bl	800585c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008406:	7cfb      	ldrb	r3, [r7, #19]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01d      	beq.n	8008448 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800840c:	f107 031b 	add.w	r3, r7, #27
 8008410:	461a      	mov	r2, r3
 8008412:	2100      	movs	r1, #0
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7fd f915 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10f      	bne.n	8008448 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008428:	f107 0318 	add.w	r3, r7, #24
 800842c:	461a      	mov	r2, r3
 800842e:	2151      	movs	r1, #81	; 0x51
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f001 fc5d 	bl	8009cf0 <VL53L0X_RdWord>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800843c:	8b3b      	ldrh	r3, [r7, #24]
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff fe06 	bl	8008050 <VL53L0X_decode_timeout>
 8008444:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008446:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008448:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800844c:	2b00      	cmp	r3, #0
 800844e:	d109      	bne.n	8008464 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008450:	f107 031b 	add.w	r3, r7, #27
 8008454:	461a      	mov	r2, r3
 8008456:	2101      	movs	r1, #1
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7fd f8f3 	bl	8005644 <VL53L0X_GetVcselPulsePeriod>
 800845e:	4603      	mov	r3, r0
 8008460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008468:	2b00      	cmp	r3, #0
 800846a:	d128      	bne.n	80084be <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800846c:	7efb      	ldrb	r3, [r7, #27]
 800846e:	461a      	mov	r2, r3
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff fe02 	bl	800807c <VL53L0X_calc_timeout_mclks>
 8008478:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800847a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	4413      	add	r3, r2
 8008480:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008482:	6a38      	ldr	r0, [r7, #32]
 8008484:	f7ff fdb8 	bl	8007ff8 <VL53L0X_encode_timeout>
 8008488:	4603      	mov	r3, r0
 800848a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800848c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008490:	2b00      	cmp	r3, #0
 8008492:	d108      	bne.n	80084a6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008494:	8bfb      	ldrh	r3, [r7, #30]
 8008496:	461a      	mov	r2, r3
 8008498:	2171      	movs	r1, #113	; 0x71
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f001 fba0 	bl	8009be0 <VL53L0X_WrWord>
 80084a0:	4603      	mov	r3, r0
 80084a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80084a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d107      	bne.n	80084be <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80084b6:	e002      	b.n	80084be <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084b8:	23fc      	movs	r3, #252	; 0xfc
 80084ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80084be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3728      	adds	r7, #40	; 0x28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b08a      	sub	sp, #40	; 0x28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
 80084d6:	4613      	mov	r3, r2
 80084d8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084da:	2300      	movs	r3, #0
 80084dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80084e0:	230c      	movs	r3, #12
 80084e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80084e6:	2312      	movs	r3, #18
 80084e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80084f2:	230e      	movs	r3, #14
 80084f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80084fc:	78bb      	ldrb	r3, [r7, #2]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008508:	23fc      	movs	r3, #252	; 0xfc
 800850a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800850e:	e020      	b.n	8008552 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <VL53L0X_set_vcsel_pulse_period+0x68>
 8008516:	78ba      	ldrb	r2, [r7, #2]
 8008518:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800851c:	429a      	cmp	r2, r3
 800851e:	d304      	bcc.n	800852a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008520:	78ba      	ldrb	r2, [r7, #2]
 8008522:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008526:	429a      	cmp	r2, r3
 8008528:	d903      	bls.n	8008532 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800852a:	23fc      	movs	r3, #252	; 0xfc
 800852c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008530:	e00f      	b.n	8008552 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d10c      	bne.n	8008552 <VL53L0X_set_vcsel_pulse_period+0x88>
 8008538:	78ba      	ldrb	r2, [r7, #2]
 800853a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800853e:	429a      	cmp	r2, r3
 8008540:	d304      	bcc.n	800854c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8008542:	78ba      	ldrb	r2, [r7, #2]
 8008544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008548:	429a      	cmp	r2, r3
 800854a:	d902      	bls.n	8008552 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800854c:	23fc      	movs	r3, #252	; 0xfc
 800854e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8008552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800855a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800855e:	e239      	b.n	80089d4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d150      	bne.n	8008608 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8008566:	78bb      	ldrb	r3, [r7, #2]
 8008568:	2b0c      	cmp	r3, #12
 800856a:	d110      	bne.n	800858e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800856c:	2218      	movs	r2, #24
 800856e:	2157      	movs	r1, #87	; 0x57
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 fb11 	bl	8009b98 <VL53L0X_WrByte>
 8008576:	4603      	mov	r3, r0
 8008578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800857c:	2208      	movs	r2, #8
 800857e:	2156      	movs	r1, #86	; 0x56
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 fb09 	bl	8009b98 <VL53L0X_WrByte>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800858c:	e17f      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800858e:	78bb      	ldrb	r3, [r7, #2]
 8008590:	2b0e      	cmp	r3, #14
 8008592:	d110      	bne.n	80085b6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008594:	2230      	movs	r2, #48	; 0x30
 8008596:	2157      	movs	r1, #87	; 0x57
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 fafd 	bl	8009b98 <VL53L0X_WrByte>
 800859e:	4603      	mov	r3, r0
 80085a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80085a4:	2208      	movs	r2, #8
 80085a6:	2156      	movs	r1, #86	; 0x56
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 faf5 	bl	8009b98 <VL53L0X_WrByte>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085b4:	e16b      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80085b6:	78bb      	ldrb	r3, [r7, #2]
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d110      	bne.n	80085de <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80085bc:	2240      	movs	r2, #64	; 0x40
 80085be:	2157      	movs	r1, #87	; 0x57
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fae9 	bl	8009b98 <VL53L0X_WrByte>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80085cc:	2208      	movs	r2, #8
 80085ce:	2156      	movs	r1, #86	; 0x56
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fae1 	bl	8009b98 <VL53L0X_WrByte>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085dc:	e157      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80085de:	78bb      	ldrb	r3, [r7, #2]
 80085e0:	2b12      	cmp	r3, #18
 80085e2:	f040 8154 	bne.w	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80085e6:	2250      	movs	r2, #80	; 0x50
 80085e8:	2157      	movs	r1, #87	; 0x57
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fad4 	bl	8009b98 <VL53L0X_WrByte>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80085f6:	2208      	movs	r2, #8
 80085f8:	2156      	movs	r1, #86	; 0x56
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 facc 	bl	8009b98 <VL53L0X_WrByte>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008606:	e142      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	2b01      	cmp	r3, #1
 800860c:	f040 813f 	bne.w	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8008610:	78bb      	ldrb	r3, [r7, #2]
 8008612:	2b08      	cmp	r3, #8
 8008614:	d14c      	bne.n	80086b0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8008616:	2210      	movs	r2, #16
 8008618:	2148      	movs	r1, #72	; 0x48
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fabc 	bl	8009b98 <VL53L0X_WrByte>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8008626:	2208      	movs	r2, #8
 8008628:	2147      	movs	r1, #71	; 0x47
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fab4 	bl	8009b98 <VL53L0X_WrByte>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008636:	2202      	movs	r2, #2
 8008638:	2132      	movs	r1, #50	; 0x32
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 faac 	bl	8009b98 <VL53L0X_WrByte>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008648:	4313      	orrs	r3, r2
 800864a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800864e:	220c      	movs	r2, #12
 8008650:	2130      	movs	r1, #48	; 0x30
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 faa0 	bl	8009b98 <VL53L0X_WrByte>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008660:	4313      	orrs	r3, r2
 8008662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008666:	2201      	movs	r2, #1
 8008668:	21ff      	movs	r1, #255	; 0xff
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fa94 	bl	8009b98 <VL53L0X_WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008678:	4313      	orrs	r3, r2
 800867a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800867e:	2230      	movs	r2, #48	; 0x30
 8008680:	2130      	movs	r1, #48	; 0x30
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fa88 	bl	8009b98 <VL53L0X_WrByte>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008690:	4313      	orrs	r3, r2
 8008692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008696:	2200      	movs	r2, #0
 8008698:	21ff      	movs	r1, #255	; 0xff
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fa7c 	bl	8009b98 <VL53L0X_WrByte>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086ae:	e0ee      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80086b0:	78bb      	ldrb	r3, [r7, #2]
 80086b2:	2b0a      	cmp	r3, #10
 80086b4:	d14c      	bne.n	8008750 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80086b6:	2228      	movs	r2, #40	; 0x28
 80086b8:	2148      	movs	r1, #72	; 0x48
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fa6c 	bl	8009b98 <VL53L0X_WrByte>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80086c6:	2208      	movs	r2, #8
 80086c8:	2147      	movs	r1, #71	; 0x47
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fa64 	bl	8009b98 <VL53L0X_WrByte>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80086d6:	2203      	movs	r2, #3
 80086d8:	2132      	movs	r1, #50	; 0x32
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 fa5c 	bl	8009b98 <VL53L0X_WrByte>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086e8:	4313      	orrs	r3, r2
 80086ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80086ee:	2209      	movs	r2, #9
 80086f0:	2130      	movs	r1, #48	; 0x30
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fa50 	bl	8009b98 <VL53L0X_WrByte>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008700:	4313      	orrs	r3, r2
 8008702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008706:	2201      	movs	r2, #1
 8008708:	21ff      	movs	r1, #255	; 0xff
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 fa44 	bl	8009b98 <VL53L0X_WrByte>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008718:	4313      	orrs	r3, r2
 800871a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800871e:	2220      	movs	r2, #32
 8008720:	2130      	movs	r1, #48	; 0x30
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fa38 	bl	8009b98 <VL53L0X_WrByte>
 8008728:	4603      	mov	r3, r0
 800872a:	461a      	mov	r2, r3
 800872c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008730:	4313      	orrs	r3, r2
 8008732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008736:	2200      	movs	r2, #0
 8008738:	21ff      	movs	r1, #255	; 0xff
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fa2c 	bl	8009b98 <VL53L0X_WrByte>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008748:	4313      	orrs	r3, r2
 800874a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800874e:	e09e      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8008750:	78bb      	ldrb	r3, [r7, #2]
 8008752:	2b0c      	cmp	r3, #12
 8008754:	d14c      	bne.n	80087f0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8008756:	2238      	movs	r2, #56	; 0x38
 8008758:	2148      	movs	r1, #72	; 0x48
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fa1c 	bl	8009b98 <VL53L0X_WrByte>
 8008760:	4603      	mov	r3, r0
 8008762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8008766:	2208      	movs	r2, #8
 8008768:	2147      	movs	r1, #71	; 0x47
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fa14 	bl	8009b98 <VL53L0X_WrByte>
 8008770:	4603      	mov	r3, r0
 8008772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008776:	2203      	movs	r2, #3
 8008778:	2132      	movs	r1, #50	; 0x32
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fa0c 	bl	8009b98 <VL53L0X_WrByte>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008788:	4313      	orrs	r3, r2
 800878a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800878e:	2208      	movs	r2, #8
 8008790:	2130      	movs	r1, #48	; 0x30
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fa00 	bl	8009b98 <VL53L0X_WrByte>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80087a6:	2201      	movs	r2, #1
 80087a8:	21ff      	movs	r1, #255	; 0xff
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f9f4 	bl	8009b98 <VL53L0X_WrByte>
 80087b0:	4603      	mov	r3, r0
 80087b2:	461a      	mov	r2, r3
 80087b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80087be:	2220      	movs	r2, #32
 80087c0:	2130      	movs	r1, #48	; 0x30
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f9e8 	bl	8009b98 <VL53L0X_WrByte>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80087d6:	2200      	movs	r2, #0
 80087d8:	21ff      	movs	r1, #255	; 0xff
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f9dc 	bl	8009b98 <VL53L0X_WrByte>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461a      	mov	r2, r3
 80087e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087ee:	e04e      	b.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80087f0:	78bb      	ldrb	r3, [r7, #2]
 80087f2:	2b0e      	cmp	r3, #14
 80087f4:	d14b      	bne.n	800888e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80087f6:	2248      	movs	r2, #72	; 0x48
 80087f8:	2148      	movs	r1, #72	; 0x48
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 f9cc 	bl	8009b98 <VL53L0X_WrByte>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008806:	2208      	movs	r2, #8
 8008808:	2147      	movs	r1, #71	; 0x47
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 f9c4 	bl	8009b98 <VL53L0X_WrByte>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008816:	2203      	movs	r2, #3
 8008818:	2132      	movs	r1, #50	; 0x32
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 f9bc 	bl	8009b98 <VL53L0X_WrByte>
 8008820:	4603      	mov	r3, r0
 8008822:	461a      	mov	r2, r3
 8008824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008828:	4313      	orrs	r3, r2
 800882a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800882e:	2207      	movs	r2, #7
 8008830:	2130      	movs	r1, #48	; 0x30
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 f9b0 	bl	8009b98 <VL53L0X_WrByte>
 8008838:	4603      	mov	r3, r0
 800883a:	461a      	mov	r2, r3
 800883c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008840:	4313      	orrs	r3, r2
 8008842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008846:	2201      	movs	r2, #1
 8008848:	21ff      	movs	r1, #255	; 0xff
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 f9a4 	bl	8009b98 <VL53L0X_WrByte>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008858:	4313      	orrs	r3, r2
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800885e:	2220      	movs	r2, #32
 8008860:	2130      	movs	r1, #48	; 0x30
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 f998 	bl	8009b98 <VL53L0X_WrByte>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008870:	4313      	orrs	r3, r2
 8008872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008876:	2200      	movs	r2, #0
 8008878:	21ff      	movs	r1, #255	; 0xff
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 f98c 	bl	8009b98 <VL53L0X_WrByte>
 8008880:	4603      	mov	r3, r0
 8008882:	461a      	mov	r2, r3
 8008884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008888:	4313      	orrs	r3, r2
 800888a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800888e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008892:	2b00      	cmp	r3, #0
 8008894:	d17f      	bne.n	8008996 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008896:	78bb      	ldrb	r3, [r7, #2]
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fe38 	bl	800750e <VL53L0X_encode_vcsel_period>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d045      	beq.n	800893a <VL53L0X_set_vcsel_pulse_period+0x470>
 80088ae:	e06e      	b.n	800898e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	461a      	mov	r2, r3
 80088b6:	2103      	movs	r1, #3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fc33 	bl	8008124 <get_sequence_step_timeout>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80088c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80088cc:	f107 0310 	add.w	r3, r7, #16
 80088d0:	461a      	mov	r2, r3
 80088d2:	2102      	movs	r1, #2
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fc25 	bl	8008124 <get_sequence_step_timeout>
 80088da:	4603      	mov	r3, r0
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80088e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d109      	bne.n	80088fc <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80088e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80088ec:	461a      	mov	r2, r3
 80088ee:	2150      	movs	r1, #80	; 0x50
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f951 	bl	8009b98 <VL53L0X_WrByte>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80088fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008900:	2b00      	cmp	r3, #0
 8008902:	d108      	bne.n	8008916 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	461a      	mov	r2, r3
 8008908:	2103      	movs	r1, #3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff fceb 	bl	80082e6 <set_sequence_step_timeout>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008916:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800891a:	2b00      	cmp	r3, #0
 800891c:	d108      	bne.n	8008930 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	461a      	mov	r2, r3
 8008922:	2102      	movs	r1, #2
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fcde 	bl	80082e6 <set_sequence_step_timeout>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	78ba      	ldrb	r2, [r7, #2]
 8008934:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008938:	e02e      	b.n	8008998 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800893a:	f107 0318 	add.w	r3, r7, #24
 800893e:	461a      	mov	r2, r3
 8008940:	2104      	movs	r1, #4
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff fbee 	bl	8008124 <get_sequence_step_timeout>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800894e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8008956:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800895a:	461a      	mov	r2, r3
 800895c:	2170      	movs	r1, #112	; 0x70
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 f91a 	bl	8009b98 <VL53L0X_WrByte>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800896a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800896e:	2b00      	cmp	r3, #0
 8008970:	d108      	bne.n	8008984 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	461a      	mov	r2, r3
 8008976:	2104      	movs	r1, #4
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fcb4 	bl	80082e6 <set_sequence_step_timeout>
 800897e:	4603      	mov	r3, r0
 8008980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	78ba      	ldrb	r2, [r7, #2]
 8008988:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800898c:	e004      	b.n	8008998 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800898e:	23fc      	movs	r3, #252	; 0xfc
 8008990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008994:	e000      	b.n	8008998 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8008996:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800899c:	2b00      	cmp	r3, #0
 800899e:	d109      	bne.n	80089b4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80089a6:	69f9      	ldr	r1, [r7, #28]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7fc fe0d 	bl	80055c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80089b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80089bc:	f107 010f 	add.w	r1, r7, #15
 80089c0:	2301      	movs	r3, #1
 80089c2:	2200      	movs	r2, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fe fcbd 	bl	8007344 <VL53L0X_perform_phase_calibration>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80089d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3728      	adds	r7, #40	; 0x28
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	460b      	mov	r3, r1
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80089ee:	7afb      	ldrb	r3, [r7, #11]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <VL53L0X_get_vcsel_pulse_period+0x1e>
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d00a      	beq.n	8008a0e <VL53L0X_get_vcsel_pulse_period+0x32>
 80089f8:	e013      	b.n	8008a22 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80089fa:	f107 0316 	add.w	r3, r7, #22
 80089fe:	461a      	mov	r2, r3
 8008a00:	2150      	movs	r1, #80	; 0x50
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f001 f94a 	bl	8009c9c <VL53L0X_RdByte>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008a0c:	e00b      	b.n	8008a26 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008a0e:	f107 0316 	add.w	r3, r7, #22
 8008a12:	461a      	mov	r2, r3
 8008a14:	2170      	movs	r1, #112	; 0x70
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f001 f940 	bl	8009c9c <VL53L0X_RdByte>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008a20:	e001      	b.n	8008a26 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a22:	23fc      	movs	r3, #252	; 0xfc
 8008a24:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008a2e:	7dbb      	ldrb	r3, [r7, #22]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fd59 	bl	80074e8 <VL53L0X_decode_vcsel_period>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	701a      	strb	r2, [r3, #0]

	return Status;
 8008a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b092      	sub	sp, #72	; 0x48
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008a5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008a5e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008a60:	f240 7376 	movw	r3, #1910	; 0x776
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008a66:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008a6c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008a70:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008a72:	f240 234e 	movw	r3, #590	; 0x24e
 8008a76:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008a78:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008a7e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008a84:	f240 2326 	movw	r3, #550	; 0x226
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008a8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008a92:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d205      	bcs.n	8008aac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008aa0:	23fc      	movs	r3, #252	; 0xfc
 8008aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008aa6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008aaa:	e0aa      	b.n	8008c02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fc fecc 	bl	800585c <VL53L0X_GetSequenceStepEnables>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008aca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d15b      	bne.n	8008b8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008ad2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d105      	bne.n	8008ae4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008ad8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d102      	bne.n	8008ae4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008ade:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d052      	beq.n	8008b8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008ae4:	f107 0310 	add.w	r3, r7, #16
 8008ae8:	461a      	mov	r2, r3
 8008aea:	2102      	movs	r1, #2
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fb19 	bl	8008124 <get_sequence_step_timeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008af8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008b00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008b04:	e07d      	b.n	8008c02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008b06:	7d3b      	ldrb	r3, [r7, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00f      	beq.n	8008b2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008b0c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b10:	4413      	add	r3, r2
 8008b12:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008b14:	69fa      	ldr	r2, [r7, #28]
 8008b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d204      	bcs.n	8008b26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	643b      	str	r3, [r7, #64]	; 0x40
 8008b24:	e002      	b.n	8008b2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b26:	23fc      	movs	r3, #252	; 0xfc
 8008b28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008b2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008b34:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008b38:	e063      	b.n	8008c02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008b3a:	7dbb      	ldrb	r3, [r7, #22]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d011      	beq.n	8008b64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	4413      	add	r3, r2
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d204      	bcs.n	8008b5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	643b      	str	r3, [r7, #64]	; 0x40
 8008b5a:	e016      	b.n	8008b8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b5c:	23fc      	movs	r3, #252	; 0xfc
 8008b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b62:	e012      	b.n	8008b8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008b64:	7d7b      	ldrb	r3, [r7, #21]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00f      	beq.n	8008b8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b6e:	4413      	add	r3, r2
 8008b70:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d204      	bcs.n	8008b84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	643b      	str	r3, [r7, #64]	; 0x40
 8008b82:	e002      	b.n	8008b8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b84:	23fc      	movs	r3, #252	; 0xfc
 8008b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008b8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008b92:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008b96:	e034      	b.n	8008c02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d019      	beq.n	8008bd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008b9e:	f107 030c 	add.w	r3, r7, #12
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff fabc 	bl	8008124 <get_sequence_step_timeout>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb6:	4413      	add	r3, r2
 8008bb8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d204      	bcs.n	8008bcc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8008bca:	e002      	b.n	8008bd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008bcc:	23fc      	movs	r3, #252	; 0xfc
 8008bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008bd2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d111      	bne.n	8008bfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008bda:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00e      	beq.n	8008bfe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bea:	2104      	movs	r1, #4
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff fb7a 	bl	80082e6 <set_sequence_step_timeout>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008bfe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3748      	adds	r7, #72	; 0x48
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b090      	sub	sp, #64	; 0x40
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008c1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008c1e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008c20:	f240 7376 	movw	r3, #1910	; 0x776
 8008c24:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008c26:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008c2a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008c2c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008c30:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008c32:	f240 234e 	movw	r3, #590	; 0x24e
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008c38:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008c3e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008c44:	f240 2326 	movw	r3, #550	; 0x226
 8008c48:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c52:	441a      	add	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008c58:	f107 0318 	add.w	r3, r7, #24
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7fc fdfc 	bl	800585c <VL53L0X_GetSequenceStepEnables>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008c6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008c72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c76:	e075      	b.n	8008d64 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008c78:	7e3b      	ldrb	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008c7e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008c84:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d030      	beq.n	8008cec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008c8a:	f107 0310 	add.w	r3, r7, #16
 8008c8e:	461a      	mov	r2, r3
 8008c90:	2102      	movs	r1, #2
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fa46 	bl	8008124 <get_sequence_step_timeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008c9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d122      	bne.n	8008cec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008ca6:	7e3b      	ldrb	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008cb0:	6939      	ldr	r1, [r7, #16]
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008cb6:	441a      	add	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008cbc:	7ebb      	ldrb	r3, [r7, #26]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008cc6:	6939      	ldr	r1, [r7, #16]
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	440b      	add	r3, r1
 8008ccc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008cce:	441a      	add	r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e00a      	b.n	8008cec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008cd6:	7e7b      	ldrb	r3, [r7, #25]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d007      	beq.n	8008cec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008ce0:	6939      	ldr	r1, [r7, #16]
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008ce6:	441a      	add	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008cec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d114      	bne.n	8008d1e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008cf4:	7efb      	ldrb	r3, [r7, #27]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d011      	beq.n	8008d1e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008cfa:	f107 030c 	add.w	r3, r7, #12
 8008cfe:	461a      	mov	r2, r3
 8008d00:	2103      	movs	r1, #3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff fa0e 	bl	8008124 <get_sequence_step_timeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008d18:	441a      	add	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d114      	bne.n	8008d50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008d26:	7f3b      	ldrb	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	461a      	mov	r2, r3
 8008d32:	2104      	movs	r1, #4
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff f9f5 	bl	8008124 <get_sequence_step_timeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008d44:	6979      	ldr	r1, [r7, #20]
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008d4a:	441a      	add	r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d103      	bne.n	8008d60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3740      	adds	r7, #64	; 0x40
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008d7e:	e0c6      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	4413      	add	r3, r2
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2bff      	cmp	r3, #255	; 0xff
 8008d94:	f040 808d 	bne.w	8008eb2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	747b      	strb	r3, [r7, #17]
			Index++;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	3301      	adds	r3, #1
 8008da6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008da8:	7c7b      	ldrb	r3, [r7, #17]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d87e      	bhi.n	8008eac <VL53L0X_load_tuning_settings+0x140>
 8008dae:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <VL53L0X_load_tuning_settings+0x48>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008dff 	.word	0x08008dff
 8008dbc:	08008e39 	.word	0x08008e39
 8008dc0:	08008e73 	.word	0x08008e73
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	743b      	strb	r3, [r7, #16]
				Index++;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	4413      	add	r3, r2
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	3301      	adds	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008de4:	7c3b      	ldrb	r3, [r7, #16]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	4413      	add	r3, r2
 8008df2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	89ba      	ldrh	r2, [r7, #12]
 8008df8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008dfc:	e087      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	4413      	add	r3, r2
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	743b      	strb	r3, [r7, #16]
				Index++;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	4413      	add	r3, r2
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008e1e:	7c3b      	ldrb	r3, [r7, #16]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	89ba      	ldrh	r2, [r7, #12]
 8008e32:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008e36:	e06a      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	743b      	strb	r3, [r7, #16]
				Index++;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	3301      	adds	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	3301      	adds	r3, #1
 8008e56:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008e58:	7c3b      	ldrb	r3, [r7, #16]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4413      	add	r3, r2
 8008e66:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	89ba      	ldrh	r2, [r7, #12]
 8008e6c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008e70:	e04d      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	4413      	add	r3, r2
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	743b      	strb	r3, [r7, #16]
				Index++;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	4413      	add	r3, r2
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008e92:	7c3b      	ldrb	r3, [r7, #16]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	89ba      	ldrh	r2, [r7, #12]
 8008ea6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008eaa:	e030      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008eac:	23fc      	movs	r3, #252	; 0xfc
 8008eae:	77fb      	strb	r3, [r7, #31]
 8008eb0:	e02d      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008eb2:	7cfb      	ldrb	r3, [r7, #19]
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d828      	bhi.n	8008f0a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	e00f      	b.n	8008eee <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	7819      	ldrb	r1, [r3, #0]
 8008ed6:	f107 0208 	add.w	r2, r7, #8
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	4413      	add	r3, r2
 8008ede:	460a      	mov	r2, r1
 8008ee0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	7cfb      	ldrb	r3, [r7, #19]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	dbeb      	blt.n	8008ece <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008ef6:	7cfb      	ldrb	r3, [r7, #19]
 8008ef8:	f107 0208 	add.w	r2, r7, #8
 8008efc:	7cb9      	ldrb	r1, [r7, #18]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fdee 	bl	8009ae0 <VL53L0X_WriteMulti>
 8008f04:	4603      	mov	r3, r0
 8008f06:	77fb      	strb	r3, [r7, #31]
 8008f08:	e001      	b.n	8008f0e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f0a:	23fc      	movs	r3, #252	; 0xfc
 8008f0c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	4413      	add	r3, r2
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <VL53L0X_load_tuning_settings+0x1b8>
 8008f1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f43f af2e 	beq.w	8008d80 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008f46:	f107 0313 	add.w	r3, r7, #19
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7fc fd11 	bl	8005974 <VL53L0X_GetXTalkCompensationEnable>
 8008f52:	4603      	mov	r3, r0
 8008f54:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d111      	bne.n	8008f82 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008f5e:	7cfb      	ldrb	r3, [r7, #19]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00e      	beq.n	8008f82 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	8a9b      	ldrh	r3, [r3, #20]
 8008f6e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
 8008f76:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3380      	adds	r3, #128	; 0x80
 8008f7c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008f82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008fa6:	f107 0310 	add.w	r3, r7, #16
 8008faa:	461a      	mov	r2, r3
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff ffbe 	bl	8008f30 <VL53L0X_get_total_xtalk_rate>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	441a      	add	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	601a      	str	r2, [r3, #0]

	return Status;
 8008fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b09a      	sub	sp, #104	; 0x68
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008fe6:	2312      	movs	r3, #18
 8008fe8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fee:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008ff0:	2342      	movs	r3, #66	; 0x42
 8008ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008ff4:	2306      	movs	r3, #6
 8008ff6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008ff8:	2307      	movs	r3, #7
 8008ffa:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009010:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	3380      	adds	r3, #128	; 0x80
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009028:	fb02 f303 	mul.w	r3, r2, r3
 800902c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01a      	beq.n	800906e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	029b      	lsls	r3, r3, #10
 800903c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009044:	4413      	add	r3, r2
 8009046:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009048:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009050:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009052:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009054:	4613      	mov	r3, r2
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	4413      	add	r3, r2
 800905a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800905c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800905e:	fb03 f303 	mul.w	r3, r3, r3
 8009062:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009066:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800906a:	0c1b      	lsrs	r3, r3, #16
 800906c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009072:	fb02 f303 	mul.w	r3, r2, r3
 8009076:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800907e:	0c1b      	lsrs	r3, r3, #16
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	fb03 f303 	mul.w	r3, r3, r3
 8009088:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800908a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800908c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009090:	0c1b      	lsrs	r3, r3, #16
 8009092:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009096:	085a      	lsrs	r2, r3, #1
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	441a      	add	r2, r3
 800909c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909e:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a8:	fb02 f303 	mul.w	r3, r2, r3
 80090ac:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b4:	d302      	bcc.n	80090bc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80090b6:	4b54      	ldr	r3, [pc, #336]	; (8009208 <VL53L0X_calc_dmax+0x230>)
 80090b8:	663b      	str	r3, [r7, #96]	; 0x60
 80090ba:	e015      	b.n	80090e8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80090bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090be:	085a      	lsrs	r2, r3, #1
 80090c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c2:	441a      	add	r2, r3
 80090c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ca:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80090cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090d0:	fb02 f303 	mul.w	r3, r2, r3
 80090d4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80090d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80090e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e2:	fb03 f303 	mul.w	r3, r3, r3
 80090e6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80090e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ea:	039b      	lsls	r3, r3, #14
 80090ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090f0:	4a46      	ldr	r2, [pc, #280]	; (800920c <VL53L0X_calc_dmax+0x234>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	099b      	lsrs	r3, r3, #6
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	fb03 f303 	mul.w	r3, r3, r3
 8009100:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009104:	fb03 f303 	mul.w	r3, r3, r3
 8009108:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	3308      	adds	r3, #8
 800910e:	091b      	lsrs	r3, r3, #4
 8009110:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800911a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911c:	4613      	mov	r3, r2
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	4413      	add	r3, r2
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800912c:	0b9b      	lsrs	r3, r3, #14
 800912e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009134:	4413      	add	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	4413      	add	r3, r2
 8009140:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009146:	fbb2 f3f3 	udiv	r3, r2, r3
 800914a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	039b      	lsls	r3, r3, #14
 8009150:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4413      	add	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	fbb2 f3f3 	udiv	r3, r2, r3
 8009164:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800916a:	fb02 f303 	mul.w	r3, r2, r3
 800916e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009176:	4a25      	ldr	r2, [pc, #148]	; (800920c <VL53L0X_calc_dmax+0x234>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	099b      	lsrs	r3, r3, #6
 800917e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <VL53L0X_calc_dmax+0x234>)
 800918e:	fba2 2303 	umull	r2, r3, r2, r3
 8009192:	099b      	lsrs	r3, r3, #6
 8009194:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009198:	3380      	adds	r3, #128	; 0x80
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	085a      	lsrs	r2, r3, #1
 80091a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091aa:	441a      	add	r2, r3
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80091b4:	e001      	b.n	80091ba <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80091ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80091bc:	f7fe f9ba 	bl	8007534 <VL53L0X_isqrt>
 80091c0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d008      	beq.n	80091da <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	085a      	lsrs	r2, r3, #1
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ce:	441a      	add	r2, r3
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d8:	e001      	b.n	80091de <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80091de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80091e0:	f7fe f9a8 	bl	8007534 <VL53L0X_isqrt>
 80091e4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80091e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d902      	bls.n	80091fa <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80091f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091f8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80091fa:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3768      	adds	r7, #104	; 0x68
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	fff00000 	.word	0xfff00000
 800920c:	10624dd3 	.word	0x10624dd3

08009210 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b0b4      	sub	sp, #208	; 0xd0
 8009214:	af04      	add	r7, sp, #16
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800921e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009226:	f44f 7316 	mov.w	r3, #600	; 0x258
 800922a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800922e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009236:	f241 235c 	movw	r3, #4700	; 0x125c
 800923a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800923e:	4b9e      	ldr	r3, [pc, #632]	; (80094b8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009244:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009248:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800924a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800924e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009252:	fbb2 f3f3 	udiv	r3, r2, r3
 8009256:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009258:	4b98      	ldr	r3, [pc, #608]	; (80094bc <VL53L0X_calc_sigma_estimate+0x2ac>)
 800925a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800925c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009260:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009262:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009266:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009268:	f240 6377 	movw	r3, #1655	; 0x677
 800926c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800926e:	2300      	movs	r3, #0
 8009270:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009282:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009290:	f107 0310 	add.w	r3, r7, #16
 8009294:	461a      	mov	r2, r3
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fe78 	bl	8008f8e <VL53L0X_get_total_signal_rate>
 800929e:	4603      	mov	r3, r0
 80092a0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80092a4:	f107 0314 	add.w	r3, r7, #20
 80092a8:	461a      	mov	r2, r3
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff fe3f 	bl	8008f30 <VL53L0X_get_total_xtalk_rate>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80092c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80092ca:	0c1b      	lsrs	r3, r3, #16
 80092cc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092d4:	fb02 f303 	mul.w	r3, r2, r3
 80092d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80092dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80092e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d902      	bls.n	80092ec <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80092e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80092ec:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d168      	bne.n	80093c6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009304:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009308:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800930c:	461a      	mov	r2, r3
 800930e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7fe feb2 	bl	800807c <VL53L0X_calc_timeout_mclks>
 8009318:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800932a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800932e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009332:	461a      	mov	r2, r3
 8009334:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7fe fe9f 	bl	800807c <VL53L0X_calc_timeout_mclks>
 800933e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009340:	2303      	movs	r3, #3
 8009342:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009346:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800934a:	2b08      	cmp	r3, #8
 800934c:	d102      	bne.n	8009354 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800934e:	2302      	movs	r3, #2
 8009350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009358:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800935a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800935e:	fb02 f303 	mul.w	r3, r2, r3
 8009362:	02db      	lsls	r3, r3, #11
 8009364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800936c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009370:	4a53      	ldr	r2, [pc, #332]	; (80094c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009372:	fba2 2303 	umull	r2, r3, r2, r3
 8009376:	099b      	lsrs	r3, r3, #6
 8009378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800937c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009380:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009382:	fb02 f303 	mul.w	r3, r2, r3
 8009386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800938a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800938e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009392:	4a4b      	ldr	r2, [pc, #300]	; (80094c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009394:	fba2 2303 	umull	r2, r3, r2, r3
 8009398:	099b      	lsrs	r3, r3, #6
 800939a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	3380      	adds	r3, #128	; 0x80
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093ac:	fb02 f303 	mul.w	r3, r2, r3
 80093b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80093b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093b8:	3380      	adds	r3, #128	; 0x80
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80093c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80093ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80093d2:	e15e      	b.n	8009692 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80093d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10c      	bne.n	80093f4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093e0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093e8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	e14c      	b.n	800968e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80093f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009406:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800940a:	041a      	lsls	r2, r3, #16
 800940c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800940e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800941a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800941c:	429a      	cmp	r2, r3
 800941e:	d902      	bls.n	8009426 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800942a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009436:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800943a:	4613      	mov	r3, r2
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe f876 	bl	8007534 <VL53L0X_isqrt>
 8009448:	4603      	mov	r3, r0
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	891b      	ldrh	r3, [r3, #8]
 8009452:	461a      	mov	r2, r3
 8009454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009456:	fb02 f303 	mul.w	r3, r2, r3
 800945a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800945c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800945e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009460:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009464:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009466:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009468:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800946c:	4a14      	ldr	r2, [pc, #80]	; (80094c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800946e:	fba2 2303 	umull	r2, r3, r2, r3
 8009472:	099b      	lsrs	r3, r3, #6
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009478:	041b      	lsls	r3, r3, #16
 800947a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800947e:	4a10      	ldr	r2, [pc, #64]	; (80094c0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009480:	fba2 2303 	umull	r2, r3, r2, r3
 8009484:	099b      	lsrs	r3, r3, #6
 8009486:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800948e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	fbb2 f3f3 	udiv	r3, r2, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfb8      	it	lt
 800949a:	425b      	neglt	r3, r3
 800949c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800949e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	7e1b      	ldrb	r3, [r3, #24]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80094ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094b4:	e033      	b.n	800951e <VL53L0X_calc_sigma_estimate+0x30e>
 80094b6:	bf00      	nop
 80094b8:	028f87ae 	.word	0x028f87ae
 80094bc:	0006999a 	.word	0x0006999a
 80094c0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80094c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80094d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80094d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094dc:	fb02 f303 	mul.w	r3, r2, r3
 80094e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80094e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80094e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094ea:	4413      	add	r3, r2
 80094ec:	0c1b      	lsrs	r3, r3, #16
 80094ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80094f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80094fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80094fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800950c:	fb03 f303 	mul.w	r3, r3, r3
 8009510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009518:	0b9b      	lsrs	r3, r3, #14
 800951a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800951e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009530:	0c1b      	lsrs	r3, r3, #16
 8009532:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	fb03 f303 	mul.w	r3, r3, r3
 800953a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800953c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009540:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009548:	0c1b      	lsrs	r3, r3, #16
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	fb03 f303 	mul.w	r3, r3, r3
 8009552:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8009554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	4413      	add	r3, r2
 800955a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800955c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800955e:	f7fd ffe9 	bl	8007534 <VL53L0X_isqrt>
 8009562:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	3332      	adds	r3, #50	; 0x32
 800956e:	4a4b      	ldr	r2, [pc, #300]	; (800969c <VL53L0X_calc_sigma_estimate+0x48c>)
 8009570:	fba2 2303 	umull	r2, r3, r2, r3
 8009574:	095a      	lsrs	r2, r3, #5
 8009576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009584:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009588:	fb02 f303 	mul.w	r3, r2, r3
 800958c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009594:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009598:	3308      	adds	r3, #8
 800959a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800959e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095a2:	4a3f      	ldr	r2, [pc, #252]	; (80096a0 <VL53L0X_calc_sigma_estimate+0x490>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	0b5b      	lsrs	r3, r3, #13
 80095aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80095ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d902      	bls.n	80095be <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80095b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80095be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80095c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80095cc:	4a35      	ldr	r2, [pc, #212]	; (80096a4 <VL53L0X_calc_sigma_estimate+0x494>)
 80095ce:	fba2 2303 	umull	r2, r3, r2, r3
 80095d2:	099b      	lsrs	r3, r3, #6
 80095d4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80095da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095de:	441a      	add	r2, r3
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fd ffa4 	bl	8007534 <VL53L0X_isqrt>
 80095ec:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095fa:	4a2a      	ldr	r2, [pc, #168]	; (80096a4 <VL53L0X_calc_sigma_estimate+0x494>)
 80095fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009600:	099b      	lsrs	r3, r3, #6
 8009602:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009608:	fb03 f303 	mul.w	r3, r3, r3
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	fb03 f303 	mul.w	r3, r3, r3
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961a:	4413      	add	r3, r2
 800961c:	4618      	mov	r0, r3
 800961e:	f7fd ff89 	bl	8007534 <VL53L0X_isqrt>
 8009622:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8009632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009634:	2b00      	cmp	r3, #0
 8009636:	d009      	beq.n	800964c <VL53L0X_calc_sigma_estimate+0x43c>
 8009638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <VL53L0X_calc_sigma_estimate+0x43c>
 8009640:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009648:	429a      	cmp	r2, r3
 800964a:	d903      	bls.n	8009654 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800964c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800965a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009666:	6939      	ldr	r1, [r7, #16]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009670:	9302      	str	r3, [sp, #8]
 8009672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff fca8 	bl	8008fd8 <VL53L0X_calc_dmax>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800968e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009692:	4618      	mov	r0, r3
 8009694:	37c0      	adds	r7, #192	; 0xc0
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	51eb851f 	.word	0x51eb851f
 80096a0:	d1b71759 	.word	0xd1b71759
 80096a4:	10624dd3 	.word	0x10624dd3

080096a8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b090      	sub	sp, #64	; 0x40
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	461a      	mov	r2, r3
 80096b4:	460b      	mov	r3, r1
 80096b6:	72fb      	strb	r3, [r7, #11]
 80096b8:	4613      	mov	r3, r2
 80096ba:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	10db      	asrs	r3, r3, #3
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009708:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d017      	beq.n	8009740 <VL53L0X_get_pal_range_status+0x98>
 8009710:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009714:	2b05      	cmp	r3, #5
 8009716:	d013      	beq.n	8009740 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009718:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800971c:	2b07      	cmp	r3, #7
 800971e:	d00f      	beq.n	8009740 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009720:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009724:	2b0c      	cmp	r3, #12
 8009726:	d00b      	beq.n	8009740 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009728:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800972c:	2b0d      	cmp	r3, #13
 800972e:	d007      	beq.n	8009740 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009730:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009734:	2b0e      	cmp	r3, #14
 8009736:	d003      	beq.n	8009740 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009738:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800973c:	2b0f      	cmp	r3, #15
 800973e:	d103      	bne.n	8009748 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009746:	e002      	b.n	800974e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800974e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009756:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800975a:	461a      	mov	r2, r3
 800975c:	2100      	movs	r1, #0
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7fc f9dc 	bl	8005b1c <VL53L0X_GetLimitCheckEnable>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800976a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800976e:	2b00      	cmp	r3, #0
 8009770:	d02e      	beq.n	80097d0 <VL53L0X_get_pal_range_status+0x128>
 8009772:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009776:	2b00      	cmp	r3, #0
 8009778:	d12a      	bne.n	80097d0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800977a:	f107 0310 	add.w	r3, r7, #16
 800977e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009782:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff fd43 	bl	8009210 <VL53L0X_calc_sigma_estimate>
 800978a:	4603      	mov	r3, r0
 800978c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	b29a      	uxth	r2, r3
 800979c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80097a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d113      	bne.n	80097d0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80097a8:	f107 0320 	add.w	r3, r7, #32
 80097ac:	461a      	mov	r2, r3
 80097ae:	2100      	movs	r1, #0
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7fc fa39 	bl	8005c28 <VL53L0X_GetLimitCheckValue>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d006      	beq.n	80097d0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80097c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d902      	bls.n	80097d0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80097d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80097d8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80097dc:	461a      	mov	r2, r3
 80097de:	2102      	movs	r1, #2
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7fc f99b 	bl	8005b1c <VL53L0X_GetLimitCheckEnable>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80097ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d044      	beq.n	800987e <VL53L0X_get_pal_range_status+0x1d6>
 80097f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d140      	bne.n	800987e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80097fc:	f107 031c 	add.w	r3, r7, #28
 8009800:	461a      	mov	r2, r3
 8009802:	2102      	movs	r1, #2
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7fc fa0f 	bl	8005c28 <VL53L0X_GetLimitCheckValue>
 800980a:	4603      	mov	r3, r0
 800980c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009810:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009814:	2b00      	cmp	r3, #0
 8009816:	d107      	bne.n	8009828 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009818:	2201      	movs	r2, #1
 800981a:	21ff      	movs	r1, #255	; 0xff
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f9bb 	bl	8009b98 <VL53L0X_WrByte>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009828:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800982c:	2b00      	cmp	r3, #0
 800982e:	d109      	bne.n	8009844 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009830:	f107 0316 	add.w	r3, r7, #22
 8009834:	461a      	mov	r2, r3
 8009836:	21b6      	movs	r1, #182	; 0xb6
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fa59 	bl	8009cf0 <VL53L0X_RdWord>
 800983e:	4603      	mov	r3, r0
 8009840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009844:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009848:	2b00      	cmp	r3, #0
 800984a:	d107      	bne.n	800985c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800984c:	2200      	movs	r2, #0
 800984e:	21ff      	movs	r1, #255	; 0xff
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 f9a1 	bl	8009b98 <VL53L0X_WrByte>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800985c:	8afb      	ldrh	r3, [r7, #22]
 800985e:	025b      	lsls	r3, r3, #9
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009866:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d006      	beq.n	800987e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009870:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8009872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009874:	429a      	cmp	r2, r3
 8009876:	d902      	bls.n	800987e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800987e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009882:	2b00      	cmp	r3, #0
 8009884:	d109      	bne.n	800989a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800988a:	461a      	mov	r2, r3
 800988c:	2103      	movs	r1, #3
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7fc f944 	bl	8005b1c <VL53L0X_GetLimitCheckEnable>
 8009894:	4603      	mov	r3, r0
 8009896:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800989a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d023      	beq.n	80098ea <VL53L0X_get_pal_range_status+0x242>
 80098a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d11f      	bne.n	80098ea <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80098aa:	893b      	ldrh	r3, [r7, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
 80098b4:	e005      	b.n	80098c2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	021a      	lsls	r2, r3, #8
 80098ba:	893b      	ldrh	r3, [r7, #8]
 80098bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80098c2:	f107 0318 	add.w	r3, r7, #24
 80098c6:	461a      	mov	r2, r3
 80098c8:	2103      	movs	r1, #3
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7fc f9ac 	bl	8005c28 <VL53L0X_GetLimitCheckValue>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d006      	beq.n	80098ea <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80098dc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80098de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d202      	bcs.n	80098ea <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80098e4:	2301      	movs	r3, #1
 80098e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d14a      	bne.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80098f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d103      	bne.n	8009902 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80098fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098fc:	22ff      	movs	r2, #255	; 0xff
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	e042      	b.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009902:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009906:	2b01      	cmp	r3, #1
 8009908:	d007      	beq.n	800991a <VL53L0X_get_pal_range_status+0x272>
 800990a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800990e:	2b02      	cmp	r3, #2
 8009910:	d003      	beq.n	800991a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009912:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009916:	2b03      	cmp	r3, #3
 8009918:	d103      	bne.n	8009922 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800991a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991c:	2205      	movs	r2, #5
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	e032      	b.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009922:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009926:	2b06      	cmp	r3, #6
 8009928:	d003      	beq.n	8009932 <VL53L0X_get_pal_range_status+0x28a>
 800992a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800992e:	2b09      	cmp	r3, #9
 8009930:	d103      	bne.n	800993a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009934:	2204      	movs	r2, #4
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	e026      	b.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800993a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800993e:	2b08      	cmp	r3, #8
 8009940:	d007      	beq.n	8009952 <VL53L0X_get_pal_range_status+0x2aa>
 8009942:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009946:	2b0a      	cmp	r3, #10
 8009948:	d003      	beq.n	8009952 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800994a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800994e:	2b01      	cmp	r3, #1
 8009950:	d103      	bne.n	800995a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009954:	2203      	movs	r2, #3
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	e016      	b.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800995a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800995e:	2b04      	cmp	r3, #4
 8009960:	d003      	beq.n	800996a <VL53L0X_get_pal_range_status+0x2c2>
 8009962:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009966:	2b01      	cmp	r3, #1
 8009968:	d103      	bne.n	8009972 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800996a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996c:	2202      	movs	r2, #2
 800996e:	701a      	strb	r2, [r3, #0]
 8009970:	e00a      	b.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009972:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009976:	2b01      	cmp	r3, #1
 8009978:	d103      	bne.n	8009982 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800997a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997c:	2201      	movs	r2, #1
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e002      	b.n	8009988 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009992:	2200      	movs	r2, #0
 8009994:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009996:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800999a:	461a      	mov	r2, r3
 800999c:	2101      	movs	r1, #1
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7fc f8bc 	bl	8005b1c <VL53L0X_GetLimitCheckEnable>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80099aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d14f      	bne.n	8009a52 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80099b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <VL53L0X_get_pal_range_status+0x31a>
 80099ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d103      	bne.n	80099ca <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80099c2:	2301      	movs	r3, #1
 80099c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c8:	e002      	b.n	80099d0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80099d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80099da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d003      	beq.n	80099ea <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80099e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d103      	bne.n	80099f2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f0:	e002      	b.n	80099f8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80099fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009a02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <VL53L0X_get_pal_range_status+0x36a>
 8009a0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d103      	bne.n	8009a1a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a18:	e002      	b.n	8009a20 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <VL53L0X_get_pal_range_status+0x392>
 8009a32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d103      	bne.n	8009a42 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a40:	e002      	b.n	8009a48 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009a4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3740      	adds	r7, #64	; 0x40
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b088      	sub	sp, #32
 8009a62:	af02      	add	r7, sp, #8
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	60b9      	str	r1, [r7, #8]
 8009a68:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	330a      	adds	r3, #10
 8009a6e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009a7c:	b299      	uxth	r1, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4613      	mov	r3, r2
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	f7f9 f85d 	bl	8002b48 <HAL_I2C_Master_Transmit>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009a92:	693b      	ldr	r3, [r7, #16]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	330a      	adds	r3, #10
 8009aac:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009aba:	f043 0301 	orr.w	r3, r3, #1
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	b299      	uxth	r1, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	4613      	mov	r3, r2
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	f7f9 f939 	bl	8002d44 <HAL_I2C_Master_Receive>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009ad6:	693b      	ldr	r3, [r7, #16]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	607a      	str	r2, [r7, #4]
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	460b      	mov	r3, r1
 8009aee:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b3f      	cmp	r3, #63	; 0x3f
 8009af8:	d902      	bls.n	8009b00 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009afa:	f06f 0303 	mvn.w	r3, #3
 8009afe:	e016      	b.n	8009b2e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009b00:	4a0d      	ldr	r2, [pc, #52]	; (8009b38 <VL53L0X_WriteMulti+0x58>)
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	480c      	ldr	r0, [pc, #48]	; (8009b3c <VL53L0X_WriteMulti+0x5c>)
 8009b0c:	f000 f99e 	bl	8009e4c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	461a      	mov	r2, r3
 8009b16:	4908      	ldr	r1, [pc, #32]	; (8009b38 <VL53L0X_WriteMulti+0x58>)
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7ff ffa0 	bl	8009a5e <_I2CWrite>
 8009b1e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b26:	23ec      	movs	r3, #236	; 0xec
 8009b28:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200008ec 	.word	0x200008ec
 8009b3c:	200008ed 	.word	0x200008ed

08009b40 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009b54:	f107 030b 	add.w	r3, r7, #11
 8009b58:	2201      	movs	r2, #1
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7ff ff7e 	bl	8009a5e <_I2CWrite>
 8009b62:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b6a:	23ec      	movs	r3, #236	; 0xec
 8009b6c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009b6e:	e00c      	b.n	8009b8a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff ff91 	bl	8009a9c <_I2CRead>
 8009b7a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009b82:	23ec      	movs	r3, #236	; 0xec
 8009b84:	75fb      	strb	r3, [r7, #23]
 8009b86:	e000      	b.n	8009b8a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009b88:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009bac:	4a0b      	ldr	r2, [pc, #44]	; (8009bdc <VL53L0X_WrByte+0x44>)
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8009bb2:	4a0a      	ldr	r2, [pc, #40]	; (8009bdc <VL53L0X_WrByte+0x44>)
 8009bb4:	78bb      	ldrb	r3, [r7, #2]
 8009bb6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009bb8:	2202      	movs	r2, #2
 8009bba:	4908      	ldr	r1, [pc, #32]	; (8009bdc <VL53L0X_WrByte+0x44>)
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ff4e 	bl	8009a5e <_I2CWrite>
 8009bc2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009bca:	23ec      	movs	r3, #236	; 0xec
 8009bcc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	200008ec 	.word	0x200008ec

08009be0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
 8009bec:	4613      	mov	r3, r2
 8009bee:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009bf4:	4a0e      	ldr	r2, [pc, #56]	; (8009c30 <VL53L0X_WrWord+0x50>)
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009bfa:	883b      	ldrh	r3, [r7, #0]
 8009bfc:	0a1b      	lsrs	r3, r3, #8
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <VL53L0X_WrWord+0x50>)
 8009c04:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8009c06:	883b      	ldrh	r3, [r7, #0]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <VL53L0X_WrWord+0x50>)
 8009c0c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009c0e:	2203      	movs	r2, #3
 8009c10:	4907      	ldr	r1, [pc, #28]	; (8009c30 <VL53L0X_WrWord+0x50>)
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff ff23 	bl	8009a5e <_I2CWrite>
 8009c18:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009c20:	23ec      	movs	r3, #236	; 0xec
 8009c22:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	200008ec 	.word	0x200008ec

08009c34 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	4611      	mov	r1, r2
 8009c40:	461a      	mov	r2, r3
 8009c42:	4603      	mov	r3, r0
 8009c44:	70fb      	strb	r3, [r7, #3]
 8009c46:	460b      	mov	r3, r1
 8009c48:	70bb      	strb	r3, [r7, #2]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009c52:	f107 020e 	add.w	r2, r7, #14
 8009c56:	78fb      	ldrb	r3, [r7, #3]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f81e 	bl	8009c9c <VL53L0X_RdByte>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d110      	bne.n	8009c8e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009c6c:	7bba      	ldrb	r2, [r7, #14]
 8009c6e:	78bb      	ldrb	r3, [r7, #2]
 8009c70:	4013      	ands	r3, r2
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	787b      	ldrb	r3, [r7, #1]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009c7c:	7bba      	ldrb	r2, [r7, #14]
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff ff88 	bl	8009b98 <VL53L0X_WrByte>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]
 8009c8c:	e000      	b.n	8009c90 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009c8e:	bf00      	nop
done:
    return Status;
 8009c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009cae:	f107 030b 	add.w	r3, r7, #11
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f7ff fed1 	bl	8009a5e <_I2CWrite>
 8009cbc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009cc4:	23ec      	movs	r3, #236	; 0xec
 8009cc6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009cc8:	e00c      	b.n	8009ce4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009cca:	2201      	movs	r2, #1
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff fee4 	bl	8009a9c <_I2CRead>
 8009cd4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009cdc:	23ec      	movs	r3, #236	; 0xec
 8009cde:	75fb      	strb	r3, [r7, #23]
 8009ce0:	e000      	b.n	8009ce4 <VL53L0X_RdByte+0x48>
    }
done:
 8009ce2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009d02:	f107 030b 	add.w	r3, r7, #11
 8009d06:	2201      	movs	r2, #1
 8009d08:	4619      	mov	r1, r3
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff fea7 	bl	8009a5e <_I2CWrite>
 8009d10:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009d18:	23ec      	movs	r3, #236	; 0xec
 8009d1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009d1c:	e017      	b.n	8009d4e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009d1e:	2202      	movs	r2, #2
 8009d20:	490e      	ldr	r1, [pc, #56]	; (8009d5c <VL53L0X_RdWord+0x6c>)
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff feba 	bl	8009a9c <_I2CRead>
 8009d28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009d30:	23ec      	movs	r3, #236	; 0xec
 8009d32:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009d34:	e00b      	b.n	8009d4e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <VL53L0X_RdWord+0x6c>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <VL53L0X_RdWord+0x6c>)
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200008ec 	.word	0x200008ec

08009d60 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009d72:	f107 030b 	add.w	r3, r7, #11
 8009d76:	2201      	movs	r2, #1
 8009d78:	4619      	mov	r1, r3
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f7ff fe6f 	bl	8009a5e <_I2CWrite>
 8009d80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009d88:	23ec      	movs	r3, #236	; 0xec
 8009d8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009d8c:	e01b      	b.n	8009dc6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009d8e:	2204      	movs	r2, #4
 8009d90:	4910      	ldr	r1, [pc, #64]	; (8009dd4 <VL53L0X_RdDWord+0x74>)
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f7ff fe82 	bl	8009a9c <_I2CRead>
 8009d98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009da0:	23ec      	movs	r3, #236	; 0xec
 8009da2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009da4:	e00f      	b.n	8009dc6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <VL53L0X_RdDWord+0x74>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	061a      	lsls	r2, r3, #24
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <VL53L0X_RdDWord+0x74>)
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	041b      	lsls	r3, r3, #16
 8009db2:	441a      	add	r2, r3
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <VL53L0X_RdDWord+0x74>)
 8009db6:	789b      	ldrb	r3, [r3, #2]
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	4413      	add	r3, r2
 8009dbc:	4a05      	ldr	r2, [pc, #20]	; (8009dd4 <VL53L0X_RdDWord+0x74>)
 8009dbe:	78d2      	ldrb	r2, [r2, #3]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200008ec 	.word	0x200008ec

08009dd8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009de4:	2002      	movs	r0, #2
 8009de6:	f7f8 fa63 	bl	80022b0 <HAL_Delay>
    return status;
 8009dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	200002c8 	.word	0x200002c8

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	4d0d      	ldr	r5, [pc, #52]	; (8009e3c <__libc_init_array+0x38>)
 8009e08:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0a:	1b64      	subs	r4, r4, r5
 8009e0c:	10a4      	asrs	r4, r4, #2
 8009e0e:	2600      	movs	r6, #0
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	4d0b      	ldr	r5, [pc, #44]	; (8009e44 <__libc_init_array+0x40>)
 8009e16:	4c0c      	ldr	r4, [pc, #48]	; (8009e48 <__libc_init_array+0x44>)
 8009e18:	f002 fe60 	bl	800cadc <_init>
 8009e1c:	1b64      	subs	r4, r4, r5
 8009e1e:	10a4      	asrs	r4, r4, #2
 8009e20:	2600      	movs	r6, #0
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800cf74 	.word	0x0800cf74
 8009e40:	0800cf74 	.word	0x0800cf74
 8009e44:	0800cf74 	.word	0x0800cf74
 8009e48:	0800cf78 	.word	0x0800cf78

08009e4c <memcpy>:
 8009e4c:	440a      	add	r2, r1
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e54:	d100      	bne.n	8009e58 <memcpy+0xc>
 8009e56:	4770      	bx	lr
 8009e58:	b510      	push	{r4, lr}
 8009e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e62:	4291      	cmp	r1, r2
 8009e64:	d1f9      	bne.n	8009e5a <memcpy+0xe>
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <memset>:
 8009e68:	4402      	add	r2, r0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d100      	bne.n	8009e72 <memset+0xa>
 8009e70:	4770      	bx	lr
 8009e72:	f803 1b01 	strb.w	r1, [r3], #1
 8009e76:	e7f9      	b.n	8009e6c <memset+0x4>

08009e78 <__cvt>:
 8009e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	ec55 4b10 	vmov	r4, r5, d0
 8009e80:	2d00      	cmp	r5, #0
 8009e82:	460e      	mov	r6, r1
 8009e84:	4619      	mov	r1, r3
 8009e86:	462b      	mov	r3, r5
 8009e88:	bfbb      	ittet	lt
 8009e8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e8e:	461d      	movlt	r5, r3
 8009e90:	2300      	movge	r3, #0
 8009e92:	232d      	movlt	r3, #45	; 0x2d
 8009e94:	700b      	strb	r3, [r1, #0]
 8009e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e9c:	4691      	mov	r9, r2
 8009e9e:	f023 0820 	bic.w	r8, r3, #32
 8009ea2:	bfbc      	itt	lt
 8009ea4:	4622      	movlt	r2, r4
 8009ea6:	4614      	movlt	r4, r2
 8009ea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009eac:	d005      	beq.n	8009eba <__cvt+0x42>
 8009eae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eb2:	d100      	bne.n	8009eb6 <__cvt+0x3e>
 8009eb4:	3601      	adds	r6, #1
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	e000      	b.n	8009ebc <__cvt+0x44>
 8009eba:	2103      	movs	r1, #3
 8009ebc:	ab03      	add	r3, sp, #12
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	ab02      	add	r3, sp, #8
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	ec45 4b10 	vmov	d0, r4, r5
 8009ec8:	4653      	mov	r3, sl
 8009eca:	4632      	mov	r2, r6
 8009ecc:	f000 fee8 	bl	800aca0 <_dtoa_r>
 8009ed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	d102      	bne.n	8009ede <__cvt+0x66>
 8009ed8:	f019 0f01 	tst.w	r9, #1
 8009edc:	d022      	beq.n	8009f24 <__cvt+0xac>
 8009ede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ee2:	eb07 0906 	add.w	r9, r7, r6
 8009ee6:	d110      	bne.n	8009f0a <__cvt+0x92>
 8009ee8:	783b      	ldrb	r3, [r7, #0]
 8009eea:	2b30      	cmp	r3, #48	; 0x30
 8009eec:	d10a      	bne.n	8009f04 <__cvt+0x8c>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7f6 fe07 	bl	8000b08 <__aeabi_dcmpeq>
 8009efa:	b918      	cbnz	r0, 8009f04 <__cvt+0x8c>
 8009efc:	f1c6 0601 	rsb	r6, r6, #1
 8009f00:	f8ca 6000 	str.w	r6, [sl]
 8009f04:	f8da 3000 	ldr.w	r3, [sl]
 8009f08:	4499      	add	r9, r3
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 8009f16:	b108      	cbz	r0, 8009f1c <__cvt+0xa4>
 8009f18:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f1c:	2230      	movs	r2, #48	; 0x30
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	454b      	cmp	r3, r9
 8009f22:	d307      	bcc.n	8009f34 <__cvt+0xbc>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f28:	1bdb      	subs	r3, r3, r7
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	b004      	add	sp, #16
 8009f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f34:	1c59      	adds	r1, r3, #1
 8009f36:	9103      	str	r1, [sp, #12]
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	e7f0      	b.n	8009f1e <__cvt+0xa6>

08009f3c <__exponent>:
 8009f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2900      	cmp	r1, #0
 8009f42:	bfb8      	it	lt
 8009f44:	4249      	neglt	r1, r1
 8009f46:	f803 2b02 	strb.w	r2, [r3], #2
 8009f4a:	bfb4      	ite	lt
 8009f4c:	222d      	movlt	r2, #45	; 0x2d
 8009f4e:	222b      	movge	r2, #43	; 0x2b
 8009f50:	2909      	cmp	r1, #9
 8009f52:	7042      	strb	r2, [r0, #1]
 8009f54:	dd2a      	ble.n	8009fac <__exponent+0x70>
 8009f56:	f10d 0407 	add.w	r4, sp, #7
 8009f5a:	46a4      	mov	ip, r4
 8009f5c:	270a      	movs	r7, #10
 8009f5e:	46a6      	mov	lr, r4
 8009f60:	460a      	mov	r2, r1
 8009f62:	fb91 f6f7 	sdiv	r6, r1, r7
 8009f66:	fb07 1516 	mls	r5, r7, r6, r1
 8009f6a:	3530      	adds	r5, #48	; 0x30
 8009f6c:	2a63      	cmp	r2, #99	; 0x63
 8009f6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009f72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009f76:	4631      	mov	r1, r6
 8009f78:	dcf1      	bgt.n	8009f5e <__exponent+0x22>
 8009f7a:	3130      	adds	r1, #48	; 0x30
 8009f7c:	f1ae 0502 	sub.w	r5, lr, #2
 8009f80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009f84:	1c44      	adds	r4, r0, #1
 8009f86:	4629      	mov	r1, r5
 8009f88:	4561      	cmp	r1, ip
 8009f8a:	d30a      	bcc.n	8009fa2 <__exponent+0x66>
 8009f8c:	f10d 0209 	add.w	r2, sp, #9
 8009f90:	eba2 020e 	sub.w	r2, r2, lr
 8009f94:	4565      	cmp	r5, ip
 8009f96:	bf88      	it	hi
 8009f98:	2200      	movhi	r2, #0
 8009f9a:	4413      	add	r3, r2
 8009f9c:	1a18      	subs	r0, r3, r0
 8009f9e:	b003      	add	sp, #12
 8009fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009faa:	e7ed      	b.n	8009f88 <__exponent+0x4c>
 8009fac:	2330      	movs	r3, #48	; 0x30
 8009fae:	3130      	adds	r1, #48	; 0x30
 8009fb0:	7083      	strb	r3, [r0, #2]
 8009fb2:	70c1      	strb	r1, [r0, #3]
 8009fb4:	1d03      	adds	r3, r0, #4
 8009fb6:	e7f1      	b.n	8009f9c <__exponent+0x60>

08009fb8 <_printf_float>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	ed2d 8b02 	vpush	{d8}
 8009fc0:	b08d      	sub	sp, #52	; 0x34
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009fc8:	4616      	mov	r6, r2
 8009fca:	461f      	mov	r7, r3
 8009fcc:	4605      	mov	r5, r0
 8009fce:	f001 fe0b 	bl	800bbe8 <_localeconv_r>
 8009fd2:	f8d0 a000 	ldr.w	sl, [r0]
 8009fd6:	4650      	mov	r0, sl
 8009fd8:	f7f6 f91a 	bl	8000210 <strlen>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	9305      	str	r3, [sp, #20]
 8009fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009fec:	3307      	adds	r3, #7
 8009fee:	f023 0307 	bic.w	r3, r3, #7
 8009ff2:	f103 0208 	add.w	r2, r3, #8
 8009ff6:	f8c8 2000 	str.w	r2, [r8]
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a002:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a00a:	9307      	str	r3, [sp, #28]
 800a00c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a010:	ee08 0a10 	vmov	s16, r0
 800a014:	4b9f      	ldr	r3, [pc, #636]	; (800a294 <_printf_float+0x2dc>)
 800a016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	f7f6 fda5 	bl	8000b6c <__aeabi_dcmpun>
 800a022:	bb88      	cbnz	r0, 800a088 <_printf_float+0xd0>
 800a024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a028:	4b9a      	ldr	r3, [pc, #616]	; (800a294 <_printf_float+0x2dc>)
 800a02a:	f04f 32ff 	mov.w	r2, #4294967295
 800a02e:	f7f6 fd7f 	bl	8000b30 <__aeabi_dcmple>
 800a032:	bb48      	cbnz	r0, 800a088 <_printf_float+0xd0>
 800a034:	2200      	movs	r2, #0
 800a036:	2300      	movs	r3, #0
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 fd6e 	bl	8000b1c <__aeabi_dcmplt>
 800a040:	b110      	cbz	r0, 800a048 <_printf_float+0x90>
 800a042:	232d      	movs	r3, #45	; 0x2d
 800a044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a048:	4b93      	ldr	r3, [pc, #588]	; (800a298 <_printf_float+0x2e0>)
 800a04a:	4894      	ldr	r0, [pc, #592]	; (800a29c <_printf_float+0x2e4>)
 800a04c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a050:	bf94      	ite	ls
 800a052:	4698      	movls	r8, r3
 800a054:	4680      	movhi	r8, r0
 800a056:	2303      	movs	r3, #3
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	f023 0204 	bic.w	r2, r3, #4
 800a060:	6022      	str	r2, [r4, #0]
 800a062:	f04f 0900 	mov.w	r9, #0
 800a066:	9700      	str	r7, [sp, #0]
 800a068:	4633      	mov	r3, r6
 800a06a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a06c:	4621      	mov	r1, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 f9d8 	bl	800a424 <_printf_common>
 800a074:	3001      	adds	r0, #1
 800a076:	f040 8090 	bne.w	800a19a <_printf_float+0x1e2>
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295
 800a07e:	b00d      	add	sp, #52	; 0x34
 800a080:	ecbd 8b02 	vpop	{d8}
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	4640      	mov	r0, r8
 800a08e:	4649      	mov	r1, r9
 800a090:	f7f6 fd6c 	bl	8000b6c <__aeabi_dcmpun>
 800a094:	b140      	cbz	r0, 800a0a8 <_printf_float+0xf0>
 800a096:	464b      	mov	r3, r9
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfbc      	itt	lt
 800a09c:	232d      	movlt	r3, #45	; 0x2d
 800a09e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0a2:	487f      	ldr	r0, [pc, #508]	; (800a2a0 <_printf_float+0x2e8>)
 800a0a4:	4b7f      	ldr	r3, [pc, #508]	; (800a2a4 <_printf_float+0x2ec>)
 800a0a6:	e7d1      	b.n	800a04c <_printf_float+0x94>
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0ae:	9206      	str	r2, [sp, #24]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	d13f      	bne.n	800a134 <_printf_float+0x17c>
 800a0b4:	2306      	movs	r3, #6
 800a0b6:	6063      	str	r3, [r4, #4]
 800a0b8:	9b05      	ldr	r3, [sp, #20]
 800a0ba:	6861      	ldr	r1, [r4, #4]
 800a0bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9303      	str	r3, [sp, #12]
 800a0c4:	ab0a      	add	r3, sp, #40	; 0x28
 800a0c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0ca:	ab09      	add	r3, sp, #36	; 0x24
 800a0cc:	ec49 8b10 	vmov	d0, r8, r9
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff fecd 	bl	8009e78 <__cvt>
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0e2:	2b47      	cmp	r3, #71	; 0x47
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	d108      	bne.n	800a0fa <_printf_float+0x142>
 800a0e8:	1cc8      	adds	r0, r1, #3
 800a0ea:	db02      	blt.n	800a0f2 <_printf_float+0x13a>
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	dd41      	ble.n	800a176 <_printf_float+0x1be>
 800a0f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a0f6:	fa5f fb8b 	uxtb.w	fp, fp
 800a0fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0fe:	d820      	bhi.n	800a142 <_printf_float+0x18a>
 800a100:	3901      	subs	r1, #1
 800a102:	465a      	mov	r2, fp
 800a104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a108:	9109      	str	r1, [sp, #36]	; 0x24
 800a10a:	f7ff ff17 	bl	8009f3c <__exponent>
 800a10e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a110:	1813      	adds	r3, r2, r0
 800a112:	2a01      	cmp	r2, #1
 800a114:	4681      	mov	r9, r0
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	dc02      	bgt.n	800a120 <_printf_float+0x168>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	07d2      	lsls	r2, r2, #31
 800a11e:	d501      	bpl.n	800a124 <_printf_float+0x16c>
 800a120:	3301      	adds	r3, #1
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d09c      	beq.n	800a066 <_printf_float+0xae>
 800a12c:	232d      	movs	r3, #45	; 0x2d
 800a12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a132:	e798      	b.n	800a066 <_printf_float+0xae>
 800a134:	9a06      	ldr	r2, [sp, #24]
 800a136:	2a47      	cmp	r2, #71	; 0x47
 800a138:	d1be      	bne.n	800a0b8 <_printf_float+0x100>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1bc      	bne.n	800a0b8 <_printf_float+0x100>
 800a13e:	2301      	movs	r3, #1
 800a140:	e7b9      	b.n	800a0b6 <_printf_float+0xfe>
 800a142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a146:	d118      	bne.n	800a17a <_printf_float+0x1c2>
 800a148:	2900      	cmp	r1, #0
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	dd0b      	ble.n	800a166 <_printf_float+0x1ae>
 800a14e:	6121      	str	r1, [r4, #16]
 800a150:	b913      	cbnz	r3, 800a158 <_printf_float+0x1a0>
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	07d0      	lsls	r0, r2, #31
 800a156:	d502      	bpl.n	800a15e <_printf_float+0x1a6>
 800a158:	3301      	adds	r3, #1
 800a15a:	440b      	add	r3, r1
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a160:	f04f 0900 	mov.w	r9, #0
 800a164:	e7de      	b.n	800a124 <_printf_float+0x16c>
 800a166:	b913      	cbnz	r3, 800a16e <_printf_float+0x1b6>
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	07d2      	lsls	r2, r2, #31
 800a16c:	d501      	bpl.n	800a172 <_printf_float+0x1ba>
 800a16e:	3302      	adds	r3, #2
 800a170:	e7f4      	b.n	800a15c <_printf_float+0x1a4>
 800a172:	2301      	movs	r3, #1
 800a174:	e7f2      	b.n	800a15c <_printf_float+0x1a4>
 800a176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a17c:	4299      	cmp	r1, r3
 800a17e:	db05      	blt.n	800a18c <_printf_float+0x1d4>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	6121      	str	r1, [r4, #16]
 800a184:	07d8      	lsls	r0, r3, #31
 800a186:	d5ea      	bpl.n	800a15e <_printf_float+0x1a6>
 800a188:	1c4b      	adds	r3, r1, #1
 800a18a:	e7e7      	b.n	800a15c <_printf_float+0x1a4>
 800a18c:	2900      	cmp	r1, #0
 800a18e:	bfd4      	ite	le
 800a190:	f1c1 0202 	rsble	r2, r1, #2
 800a194:	2201      	movgt	r2, #1
 800a196:	4413      	add	r3, r2
 800a198:	e7e0      	b.n	800a15c <_printf_float+0x1a4>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	055a      	lsls	r2, r3, #21
 800a19e:	d407      	bmi.n	800a1b0 <_printf_float+0x1f8>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	4642      	mov	r2, r8
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b8      	blx	r7
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d12c      	bne.n	800a208 <_printf_float+0x250>
 800a1ae:	e764      	b.n	800a07a <_printf_float+0xc2>
 800a1b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1b4:	f240 80e0 	bls.w	800a378 <_printf_float+0x3c0>
 800a1b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f7f6 fca2 	bl	8000b08 <__aeabi_dcmpeq>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d034      	beq.n	800a232 <_printf_float+0x27a>
 800a1c8:	4a37      	ldr	r2, [pc, #220]	; (800a2a8 <_printf_float+0x2f0>)
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b8      	blx	r7
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f43f af51 	beq.w	800a07a <_printf_float+0xc2>
 800a1d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	db02      	blt.n	800a1e6 <_printf_float+0x22e>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	07d8      	lsls	r0, r3, #31
 800a1e4:	d510      	bpl.n	800a208 <_printf_float+0x250>
 800a1e6:	ee18 3a10 	vmov	r3, s16
 800a1ea:	4652      	mov	r2, sl
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	47b8      	blx	r7
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f43f af41 	beq.w	800a07a <_printf_float+0xc2>
 800a1f8:	f04f 0800 	mov.w	r8, #0
 800a1fc:	f104 091a 	add.w	r9, r4, #26
 800a200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a202:	3b01      	subs	r3, #1
 800a204:	4543      	cmp	r3, r8
 800a206:	dc09      	bgt.n	800a21c <_printf_float+0x264>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	079b      	lsls	r3, r3, #30
 800a20c:	f100 8105 	bmi.w	800a41a <_printf_float+0x462>
 800a210:	68e0      	ldr	r0, [r4, #12]
 800a212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a214:	4298      	cmp	r0, r3
 800a216:	bfb8      	it	lt
 800a218:	4618      	movlt	r0, r3
 800a21a:	e730      	b.n	800a07e <_printf_float+0xc6>
 800a21c:	2301      	movs	r3, #1
 800a21e:	464a      	mov	r2, r9
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	47b8      	blx	r7
 800a226:	3001      	adds	r0, #1
 800a228:	f43f af27 	beq.w	800a07a <_printf_float+0xc2>
 800a22c:	f108 0801 	add.w	r8, r8, #1
 800a230:	e7e6      	b.n	800a200 <_printf_float+0x248>
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	dc39      	bgt.n	800a2ac <_printf_float+0x2f4>
 800a238:	4a1b      	ldr	r2, [pc, #108]	; (800a2a8 <_printf_float+0x2f0>)
 800a23a:	2301      	movs	r3, #1
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	f43f af19 	beq.w	800a07a <_printf_float+0xc2>
 800a248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a24c:	4313      	orrs	r3, r2
 800a24e:	d102      	bne.n	800a256 <_printf_float+0x29e>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	07d9      	lsls	r1, r3, #31
 800a254:	d5d8      	bpl.n	800a208 <_printf_float+0x250>
 800a256:	ee18 3a10 	vmov	r3, s16
 800a25a:	4652      	mov	r2, sl
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f af09 	beq.w	800a07a <_printf_float+0xc2>
 800a268:	f04f 0900 	mov.w	r9, #0
 800a26c:	f104 0a1a 	add.w	sl, r4, #26
 800a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a272:	425b      	negs	r3, r3
 800a274:	454b      	cmp	r3, r9
 800a276:	dc01      	bgt.n	800a27c <_printf_float+0x2c4>
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	e792      	b.n	800a1a2 <_printf_float+0x1ea>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4652      	mov	r2, sl
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f aef7 	beq.w	800a07a <_printf_float+0xc2>
 800a28c:	f109 0901 	add.w	r9, r9, #1
 800a290:	e7ee      	b.n	800a270 <_printf_float+0x2b8>
 800a292:	bf00      	nop
 800a294:	7fefffff 	.word	0x7fefffff
 800a298:	0800cb90 	.word	0x0800cb90
 800a29c:	0800cb94 	.word	0x0800cb94
 800a2a0:	0800cb9c 	.word	0x0800cb9c
 800a2a4:	0800cb98 	.word	0x0800cb98
 800a2a8:	0800cba0 	.word	0x0800cba0
 800a2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	bfa8      	it	ge
 800a2b4:	461a      	movge	r2, r3
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	4691      	mov	r9, r2
 800a2ba:	dc37      	bgt.n	800a32c <_printf_float+0x374>
 800a2bc:	f04f 0b00 	mov.w	fp, #0
 800a2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2c4:	f104 021a 	add.w	r2, r4, #26
 800a2c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ca:	9305      	str	r3, [sp, #20]
 800a2cc:	eba3 0309 	sub.w	r3, r3, r9
 800a2d0:	455b      	cmp	r3, fp
 800a2d2:	dc33      	bgt.n	800a33c <_printf_float+0x384>
 800a2d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	db3b      	blt.n	800a354 <_printf_float+0x39c>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	07da      	lsls	r2, r3, #31
 800a2e0:	d438      	bmi.n	800a354 <_printf_float+0x39c>
 800a2e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2e4:	9b05      	ldr	r3, [sp, #20]
 800a2e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	eba2 0901 	sub.w	r9, r2, r1
 800a2ee:	4599      	cmp	r9, r3
 800a2f0:	bfa8      	it	ge
 800a2f2:	4699      	movge	r9, r3
 800a2f4:	f1b9 0f00 	cmp.w	r9, #0
 800a2f8:	dc35      	bgt.n	800a366 <_printf_float+0x3ae>
 800a2fa:	f04f 0800 	mov.w	r8, #0
 800a2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a302:	f104 0a1a 	add.w	sl, r4, #26
 800a306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	eba3 0309 	sub.w	r3, r3, r9
 800a310:	4543      	cmp	r3, r8
 800a312:	f77f af79 	ble.w	800a208 <_printf_float+0x250>
 800a316:	2301      	movs	r3, #1
 800a318:	4652      	mov	r2, sl
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f aeaa 	beq.w	800a07a <_printf_float+0xc2>
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	e7ec      	b.n	800a306 <_printf_float+0x34e>
 800a32c:	4613      	mov	r3, r2
 800a32e:	4631      	mov	r1, r6
 800a330:	4642      	mov	r2, r8
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	d1c0      	bne.n	800a2bc <_printf_float+0x304>
 800a33a:	e69e      	b.n	800a07a <_printf_float+0xc2>
 800a33c:	2301      	movs	r3, #1
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	9205      	str	r2, [sp, #20]
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	f43f ae97 	beq.w	800a07a <_printf_float+0xc2>
 800a34c:	9a05      	ldr	r2, [sp, #20]
 800a34e:	f10b 0b01 	add.w	fp, fp, #1
 800a352:	e7b9      	b.n	800a2c8 <_printf_float+0x310>
 800a354:	ee18 3a10 	vmov	r3, s16
 800a358:	4652      	mov	r2, sl
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	d1be      	bne.n	800a2e2 <_printf_float+0x32a>
 800a364:	e689      	b.n	800a07a <_printf_float+0xc2>
 800a366:	9a05      	ldr	r2, [sp, #20]
 800a368:	464b      	mov	r3, r9
 800a36a:	4442      	add	r2, r8
 800a36c:	4631      	mov	r1, r6
 800a36e:	4628      	mov	r0, r5
 800a370:	47b8      	blx	r7
 800a372:	3001      	adds	r0, #1
 800a374:	d1c1      	bne.n	800a2fa <_printf_float+0x342>
 800a376:	e680      	b.n	800a07a <_printf_float+0xc2>
 800a378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37a:	2a01      	cmp	r2, #1
 800a37c:	dc01      	bgt.n	800a382 <_printf_float+0x3ca>
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d538      	bpl.n	800a3f4 <_printf_float+0x43c>
 800a382:	2301      	movs	r3, #1
 800a384:	4642      	mov	r2, r8
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae74 	beq.w	800a07a <_printf_float+0xc2>
 800a392:	ee18 3a10 	vmov	r3, s16
 800a396:	4652      	mov	r2, sl
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b8      	blx	r7
 800a39e:	3001      	adds	r0, #1
 800a3a0:	f43f ae6b 	beq.w	800a07a <_printf_float+0xc2>
 800a3a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f7f6 fbac 	bl	8000b08 <__aeabi_dcmpeq>
 800a3b0:	b9d8      	cbnz	r0, 800a3ea <_printf_float+0x432>
 800a3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b4:	f108 0201 	add.w	r2, r8, #1
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d10e      	bne.n	800a3e2 <_printf_float+0x42a>
 800a3c4:	e659      	b.n	800a07a <_printf_float+0xc2>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4652      	mov	r2, sl
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f43f ae52 	beq.w	800a07a <_printf_float+0xc2>
 800a3d6:	f108 0801 	add.w	r8, r8, #1
 800a3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	4543      	cmp	r3, r8
 800a3e0:	dcf1      	bgt.n	800a3c6 <_printf_float+0x40e>
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3e8:	e6dc      	b.n	800a1a4 <_printf_float+0x1ec>
 800a3ea:	f04f 0800 	mov.w	r8, #0
 800a3ee:	f104 0a1a 	add.w	sl, r4, #26
 800a3f2:	e7f2      	b.n	800a3da <_printf_float+0x422>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	4642      	mov	r2, r8
 800a3f8:	e7df      	b.n	800a3ba <_printf_float+0x402>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	464a      	mov	r2, r9
 800a3fe:	4631      	mov	r1, r6
 800a400:	4628      	mov	r0, r5
 800a402:	47b8      	blx	r7
 800a404:	3001      	adds	r0, #1
 800a406:	f43f ae38 	beq.w	800a07a <_printf_float+0xc2>
 800a40a:	f108 0801 	add.w	r8, r8, #1
 800a40e:	68e3      	ldr	r3, [r4, #12]
 800a410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a412:	1a5b      	subs	r3, r3, r1
 800a414:	4543      	cmp	r3, r8
 800a416:	dcf0      	bgt.n	800a3fa <_printf_float+0x442>
 800a418:	e6fa      	b.n	800a210 <_printf_float+0x258>
 800a41a:	f04f 0800 	mov.w	r8, #0
 800a41e:	f104 0919 	add.w	r9, r4, #25
 800a422:	e7f4      	b.n	800a40e <_printf_float+0x456>

0800a424 <_printf_common>:
 800a424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a428:	4616      	mov	r6, r2
 800a42a:	4699      	mov	r9, r3
 800a42c:	688a      	ldr	r2, [r1, #8]
 800a42e:	690b      	ldr	r3, [r1, #16]
 800a430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a434:	4293      	cmp	r3, r2
 800a436:	bfb8      	it	lt
 800a438:	4613      	movlt	r3, r2
 800a43a:	6033      	str	r3, [r6, #0]
 800a43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a440:	4607      	mov	r7, r0
 800a442:	460c      	mov	r4, r1
 800a444:	b10a      	cbz	r2, 800a44a <_printf_common+0x26>
 800a446:	3301      	adds	r3, #1
 800a448:	6033      	str	r3, [r6, #0]
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	0699      	lsls	r1, r3, #26
 800a44e:	bf42      	ittt	mi
 800a450:	6833      	ldrmi	r3, [r6, #0]
 800a452:	3302      	addmi	r3, #2
 800a454:	6033      	strmi	r3, [r6, #0]
 800a456:	6825      	ldr	r5, [r4, #0]
 800a458:	f015 0506 	ands.w	r5, r5, #6
 800a45c:	d106      	bne.n	800a46c <_printf_common+0x48>
 800a45e:	f104 0a19 	add.w	sl, r4, #25
 800a462:	68e3      	ldr	r3, [r4, #12]
 800a464:	6832      	ldr	r2, [r6, #0]
 800a466:	1a9b      	subs	r3, r3, r2
 800a468:	42ab      	cmp	r3, r5
 800a46a:	dc26      	bgt.n	800a4ba <_printf_common+0x96>
 800a46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a470:	1e13      	subs	r3, r2, #0
 800a472:	6822      	ldr	r2, [r4, #0]
 800a474:	bf18      	it	ne
 800a476:	2301      	movne	r3, #1
 800a478:	0692      	lsls	r2, r2, #26
 800a47a:	d42b      	bmi.n	800a4d4 <_printf_common+0xb0>
 800a47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a480:	4649      	mov	r1, r9
 800a482:	4638      	mov	r0, r7
 800a484:	47c0      	blx	r8
 800a486:	3001      	adds	r0, #1
 800a488:	d01e      	beq.n	800a4c8 <_printf_common+0xa4>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	68e5      	ldr	r5, [r4, #12]
 800a48e:	6832      	ldr	r2, [r6, #0]
 800a490:	f003 0306 	and.w	r3, r3, #6
 800a494:	2b04      	cmp	r3, #4
 800a496:	bf08      	it	eq
 800a498:	1aad      	subeq	r5, r5, r2
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	6922      	ldr	r2, [r4, #16]
 800a49e:	bf0c      	ite	eq
 800a4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4a4:	2500      	movne	r5, #0
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	bfc4      	itt	gt
 800a4aa:	1a9b      	subgt	r3, r3, r2
 800a4ac:	18ed      	addgt	r5, r5, r3
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	341a      	adds	r4, #26
 800a4b2:	42b5      	cmp	r5, r6
 800a4b4:	d11a      	bne.n	800a4ec <_printf_common+0xc8>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	e008      	b.n	800a4cc <_printf_common+0xa8>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4652      	mov	r2, sl
 800a4be:	4649      	mov	r1, r9
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	47c0      	blx	r8
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d103      	bne.n	800a4d0 <_printf_common+0xac>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	e7c6      	b.n	800a462 <_printf_common+0x3e>
 800a4d4:	18e1      	adds	r1, r4, r3
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	2030      	movs	r0, #48	; 0x30
 800a4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4de:	4422      	add	r2, r4
 800a4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4e8:	3302      	adds	r3, #2
 800a4ea:	e7c7      	b.n	800a47c <_printf_common+0x58>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	47c0      	blx	r8
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d0e6      	beq.n	800a4c8 <_printf_common+0xa4>
 800a4fa:	3601      	adds	r6, #1
 800a4fc:	e7d9      	b.n	800a4b2 <_printf_common+0x8e>
	...

0800a500 <_printf_i>:
 800a500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	460c      	mov	r4, r1
 800a506:	4691      	mov	r9, r2
 800a508:	7e27      	ldrb	r7, [r4, #24]
 800a50a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a50c:	2f78      	cmp	r7, #120	; 0x78
 800a50e:	4680      	mov	r8, r0
 800a510:	469a      	mov	sl, r3
 800a512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a516:	d807      	bhi.n	800a528 <_printf_i+0x28>
 800a518:	2f62      	cmp	r7, #98	; 0x62
 800a51a:	d80a      	bhi.n	800a532 <_printf_i+0x32>
 800a51c:	2f00      	cmp	r7, #0
 800a51e:	f000 80d8 	beq.w	800a6d2 <_printf_i+0x1d2>
 800a522:	2f58      	cmp	r7, #88	; 0x58
 800a524:	f000 80a3 	beq.w	800a66e <_printf_i+0x16e>
 800a528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a530:	e03a      	b.n	800a5a8 <_printf_i+0xa8>
 800a532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a536:	2b15      	cmp	r3, #21
 800a538:	d8f6      	bhi.n	800a528 <_printf_i+0x28>
 800a53a:	a001      	add	r0, pc, #4	; (adr r0, 800a540 <_printf_i+0x40>)
 800a53c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a540:	0800a599 	.word	0x0800a599
 800a544:	0800a5ad 	.word	0x0800a5ad
 800a548:	0800a529 	.word	0x0800a529
 800a54c:	0800a529 	.word	0x0800a529
 800a550:	0800a529 	.word	0x0800a529
 800a554:	0800a529 	.word	0x0800a529
 800a558:	0800a5ad 	.word	0x0800a5ad
 800a55c:	0800a529 	.word	0x0800a529
 800a560:	0800a529 	.word	0x0800a529
 800a564:	0800a529 	.word	0x0800a529
 800a568:	0800a529 	.word	0x0800a529
 800a56c:	0800a6b9 	.word	0x0800a6b9
 800a570:	0800a5dd 	.word	0x0800a5dd
 800a574:	0800a69b 	.word	0x0800a69b
 800a578:	0800a529 	.word	0x0800a529
 800a57c:	0800a529 	.word	0x0800a529
 800a580:	0800a6db 	.word	0x0800a6db
 800a584:	0800a529 	.word	0x0800a529
 800a588:	0800a5dd 	.word	0x0800a5dd
 800a58c:	0800a529 	.word	0x0800a529
 800a590:	0800a529 	.word	0x0800a529
 800a594:	0800a6a3 	.word	0x0800a6a3
 800a598:	680b      	ldr	r3, [r1, #0]
 800a59a:	1d1a      	adds	r2, r3, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	600a      	str	r2, [r1, #0]
 800a5a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e0a3      	b.n	800a6f4 <_printf_i+0x1f4>
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	6808      	ldr	r0, [r1, #0]
 800a5b0:	062e      	lsls	r6, r5, #24
 800a5b2:	f100 0304 	add.w	r3, r0, #4
 800a5b6:	d50a      	bpl.n	800a5ce <_printf_i+0xce>
 800a5b8:	6805      	ldr	r5, [r0, #0]
 800a5ba:	600b      	str	r3, [r1, #0]
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	da03      	bge.n	800a5c8 <_printf_i+0xc8>
 800a5c0:	232d      	movs	r3, #45	; 0x2d
 800a5c2:	426d      	negs	r5, r5
 800a5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c8:	485e      	ldr	r0, [pc, #376]	; (800a744 <_printf_i+0x244>)
 800a5ca:	230a      	movs	r3, #10
 800a5cc:	e019      	b.n	800a602 <_printf_i+0x102>
 800a5ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a5d2:	6805      	ldr	r5, [r0, #0]
 800a5d4:	600b      	str	r3, [r1, #0]
 800a5d6:	bf18      	it	ne
 800a5d8:	b22d      	sxthne	r5, r5
 800a5da:	e7ef      	b.n	800a5bc <_printf_i+0xbc>
 800a5dc:	680b      	ldr	r3, [r1, #0]
 800a5de:	6825      	ldr	r5, [r4, #0]
 800a5e0:	1d18      	adds	r0, r3, #4
 800a5e2:	6008      	str	r0, [r1, #0]
 800a5e4:	0628      	lsls	r0, r5, #24
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0xec>
 800a5e8:	681d      	ldr	r5, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <_printf_i+0xf2>
 800a5ec:	0669      	lsls	r1, r5, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0xe8>
 800a5f0:	881d      	ldrh	r5, [r3, #0]
 800a5f2:	4854      	ldr	r0, [pc, #336]	; (800a744 <_printf_i+0x244>)
 800a5f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2308      	moveq	r3, #8
 800a5fa:	230a      	movne	r3, #10
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a602:	6866      	ldr	r6, [r4, #4]
 800a604:	60a6      	str	r6, [r4, #8]
 800a606:	2e00      	cmp	r6, #0
 800a608:	bfa2      	ittt	ge
 800a60a:	6821      	ldrge	r1, [r4, #0]
 800a60c:	f021 0104 	bicge.w	r1, r1, #4
 800a610:	6021      	strge	r1, [r4, #0]
 800a612:	b90d      	cbnz	r5, 800a618 <_printf_i+0x118>
 800a614:	2e00      	cmp	r6, #0
 800a616:	d04d      	beq.n	800a6b4 <_printf_i+0x1b4>
 800a618:	4616      	mov	r6, r2
 800a61a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a61e:	fb03 5711 	mls	r7, r3, r1, r5
 800a622:	5dc7      	ldrb	r7, [r0, r7]
 800a624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a628:	462f      	mov	r7, r5
 800a62a:	42bb      	cmp	r3, r7
 800a62c:	460d      	mov	r5, r1
 800a62e:	d9f4      	bls.n	800a61a <_printf_i+0x11a>
 800a630:	2b08      	cmp	r3, #8
 800a632:	d10b      	bne.n	800a64c <_printf_i+0x14c>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	07df      	lsls	r7, r3, #31
 800a638:	d508      	bpl.n	800a64c <_printf_i+0x14c>
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	6861      	ldr	r1, [r4, #4]
 800a63e:	4299      	cmp	r1, r3
 800a640:	bfde      	ittt	le
 800a642:	2330      	movle	r3, #48	; 0x30
 800a644:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a648:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a64c:	1b92      	subs	r2, r2, r6
 800a64e:	6122      	str	r2, [r4, #16]
 800a650:	f8cd a000 	str.w	sl, [sp]
 800a654:	464b      	mov	r3, r9
 800a656:	aa03      	add	r2, sp, #12
 800a658:	4621      	mov	r1, r4
 800a65a:	4640      	mov	r0, r8
 800a65c:	f7ff fee2 	bl	800a424 <_printf_common>
 800a660:	3001      	adds	r0, #1
 800a662:	d14c      	bne.n	800a6fe <_printf_i+0x1fe>
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	b004      	add	sp, #16
 800a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66e:	4835      	ldr	r0, [pc, #212]	; (800a744 <_printf_i+0x244>)
 800a670:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	680e      	ldr	r6, [r1, #0]
 800a678:	061f      	lsls	r7, r3, #24
 800a67a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a67e:	600e      	str	r6, [r1, #0]
 800a680:	d514      	bpl.n	800a6ac <_printf_i+0x1ac>
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	bf44      	itt	mi
 800a686:	f043 0320 	orrmi.w	r3, r3, #32
 800a68a:	6023      	strmi	r3, [r4, #0]
 800a68c:	b91d      	cbnz	r5, 800a696 <_printf_i+0x196>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	f023 0320 	bic.w	r3, r3, #32
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	2310      	movs	r3, #16
 800a698:	e7b0      	b.n	800a5fc <_printf_i+0xfc>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	f043 0320 	orr.w	r3, r3, #32
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	2378      	movs	r3, #120	; 0x78
 800a6a4:	4828      	ldr	r0, [pc, #160]	; (800a748 <_printf_i+0x248>)
 800a6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6aa:	e7e3      	b.n	800a674 <_printf_i+0x174>
 800a6ac:	065e      	lsls	r6, r3, #25
 800a6ae:	bf48      	it	mi
 800a6b0:	b2ad      	uxthmi	r5, r5
 800a6b2:	e7e6      	b.n	800a682 <_printf_i+0x182>
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	e7bb      	b.n	800a630 <_printf_i+0x130>
 800a6b8:	680b      	ldr	r3, [r1, #0]
 800a6ba:	6826      	ldr	r6, [r4, #0]
 800a6bc:	6960      	ldr	r0, [r4, #20]
 800a6be:	1d1d      	adds	r5, r3, #4
 800a6c0:	600d      	str	r5, [r1, #0]
 800a6c2:	0635      	lsls	r5, r6, #24
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	d501      	bpl.n	800a6cc <_printf_i+0x1cc>
 800a6c8:	6018      	str	r0, [r3, #0]
 800a6ca:	e002      	b.n	800a6d2 <_printf_i+0x1d2>
 800a6cc:	0671      	lsls	r1, r6, #25
 800a6ce:	d5fb      	bpl.n	800a6c8 <_printf_i+0x1c8>
 800a6d0:	8018      	strh	r0, [r3, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	e7ba      	b.n	800a650 <_printf_i+0x150>
 800a6da:	680b      	ldr	r3, [r1, #0]
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	600a      	str	r2, [r1, #0]
 800a6e0:	681e      	ldr	r6, [r3, #0]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7f5 fd9a 	bl	8000220 <memchr>
 800a6ec:	b108      	cbz	r0, 800a6f2 <_printf_i+0x1f2>
 800a6ee:	1b80      	subs	r0, r0, r6
 800a6f0:	6060      	str	r0, [r4, #4]
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6fc:	e7a8      	b.n	800a650 <_printf_i+0x150>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	4632      	mov	r2, r6
 800a702:	4649      	mov	r1, r9
 800a704:	4640      	mov	r0, r8
 800a706:	47d0      	blx	sl
 800a708:	3001      	adds	r0, #1
 800a70a:	d0ab      	beq.n	800a664 <_printf_i+0x164>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	079b      	lsls	r3, r3, #30
 800a710:	d413      	bmi.n	800a73a <_printf_i+0x23a>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	4298      	cmp	r0, r3
 800a718:	bfb8      	it	lt
 800a71a:	4618      	movlt	r0, r3
 800a71c:	e7a4      	b.n	800a668 <_printf_i+0x168>
 800a71e:	2301      	movs	r3, #1
 800a720:	4632      	mov	r2, r6
 800a722:	4649      	mov	r1, r9
 800a724:	4640      	mov	r0, r8
 800a726:	47d0      	blx	sl
 800a728:	3001      	adds	r0, #1
 800a72a:	d09b      	beq.n	800a664 <_printf_i+0x164>
 800a72c:	3501      	adds	r5, #1
 800a72e:	68e3      	ldr	r3, [r4, #12]
 800a730:	9903      	ldr	r1, [sp, #12]
 800a732:	1a5b      	subs	r3, r3, r1
 800a734:	42ab      	cmp	r3, r5
 800a736:	dcf2      	bgt.n	800a71e <_printf_i+0x21e>
 800a738:	e7eb      	b.n	800a712 <_printf_i+0x212>
 800a73a:	2500      	movs	r5, #0
 800a73c:	f104 0619 	add.w	r6, r4, #25
 800a740:	e7f5      	b.n	800a72e <_printf_i+0x22e>
 800a742:	bf00      	nop
 800a744:	0800cba2 	.word	0x0800cba2
 800a748:	0800cbb3 	.word	0x0800cbb3

0800a74c <iprintf>:
 800a74c:	b40f      	push	{r0, r1, r2, r3}
 800a74e:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <iprintf+0x2c>)
 800a750:	b513      	push	{r0, r1, r4, lr}
 800a752:	681c      	ldr	r4, [r3, #0]
 800a754:	b124      	cbz	r4, 800a760 <iprintf+0x14>
 800a756:	69a3      	ldr	r3, [r4, #24]
 800a758:	b913      	cbnz	r3, 800a760 <iprintf+0x14>
 800a75a:	4620      	mov	r0, r4
 800a75c:	f001 f9a6 	bl	800baac <__sinit>
 800a760:	ab05      	add	r3, sp, #20
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	68a1      	ldr	r1, [r4, #8]
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	4620      	mov	r0, r4
 800a76a:	f001 ff13 	bl	800c594 <_vfiprintf_r>
 800a76e:	b002      	add	sp, #8
 800a770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a774:	b004      	add	sp, #16
 800a776:	4770      	bx	lr
 800a778:	200002c8 	.word	0x200002c8

0800a77c <_puts_r>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	460e      	mov	r6, r1
 800a780:	4605      	mov	r5, r0
 800a782:	b118      	cbz	r0, 800a78c <_puts_r+0x10>
 800a784:	6983      	ldr	r3, [r0, #24]
 800a786:	b90b      	cbnz	r3, 800a78c <_puts_r+0x10>
 800a788:	f001 f990 	bl	800baac <__sinit>
 800a78c:	69ab      	ldr	r3, [r5, #24]
 800a78e:	68ac      	ldr	r4, [r5, #8]
 800a790:	b913      	cbnz	r3, 800a798 <_puts_r+0x1c>
 800a792:	4628      	mov	r0, r5
 800a794:	f001 f98a 	bl	800baac <__sinit>
 800a798:	4b2c      	ldr	r3, [pc, #176]	; (800a84c <_puts_r+0xd0>)
 800a79a:	429c      	cmp	r4, r3
 800a79c:	d120      	bne.n	800a7e0 <_puts_r+0x64>
 800a79e:	686c      	ldr	r4, [r5, #4]
 800a7a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d405      	bmi.n	800a7b2 <_puts_r+0x36>
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	0598      	lsls	r0, r3, #22
 800a7aa:	d402      	bmi.n	800a7b2 <_puts_r+0x36>
 800a7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ae:	f001 fa20 	bl	800bbf2 <__retarget_lock_acquire_recursive>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	0719      	lsls	r1, r3, #28
 800a7b6:	d51d      	bpl.n	800a7f4 <_puts_r+0x78>
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	b1db      	cbz	r3, 800a7f4 <_puts_r+0x78>
 800a7bc:	3e01      	subs	r6, #1
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	bb39      	cbnz	r1, 800a81a <_puts_r+0x9e>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	da38      	bge.n	800a840 <_puts_r+0xc4>
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	210a      	movs	r1, #10
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 f916 	bl	800aa04 <__swbuf_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d011      	beq.n	800a800 <_puts_r+0x84>
 800a7dc:	250a      	movs	r5, #10
 800a7de:	e011      	b.n	800a804 <_puts_r+0x88>
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <_puts_r+0xd4>)
 800a7e2:	429c      	cmp	r4, r3
 800a7e4:	d101      	bne.n	800a7ea <_puts_r+0x6e>
 800a7e6:	68ac      	ldr	r4, [r5, #8]
 800a7e8:	e7da      	b.n	800a7a0 <_puts_r+0x24>
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	; (800a854 <_puts_r+0xd8>)
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	bf08      	it	eq
 800a7f0:	68ec      	ldreq	r4, [r5, #12]
 800a7f2:	e7d5      	b.n	800a7a0 <_puts_r+0x24>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f000 f956 	bl	800aaa8 <__swsetup_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d0dd      	beq.n	800a7bc <_puts_r+0x40>
 800a800:	f04f 35ff 	mov.w	r5, #4294967295
 800a804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a806:	07da      	lsls	r2, r3, #31
 800a808:	d405      	bmi.n	800a816 <_puts_r+0x9a>
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	059b      	lsls	r3, r3, #22
 800a80e:	d402      	bmi.n	800a816 <_puts_r+0x9a>
 800a810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a812:	f001 f9ef 	bl	800bbf4 <__retarget_lock_release_recursive>
 800a816:	4628      	mov	r0, r5
 800a818:	bd70      	pop	{r4, r5, r6, pc}
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	da04      	bge.n	800a828 <_puts_r+0xac>
 800a81e:	69a2      	ldr	r2, [r4, #24]
 800a820:	429a      	cmp	r2, r3
 800a822:	dc06      	bgt.n	800a832 <_puts_r+0xb6>
 800a824:	290a      	cmp	r1, #10
 800a826:	d004      	beq.n	800a832 <_puts_r+0xb6>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	6022      	str	r2, [r4, #0]
 800a82e:	7019      	strb	r1, [r3, #0]
 800a830:	e7c5      	b.n	800a7be <_puts_r+0x42>
 800a832:	4622      	mov	r2, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f8e5 	bl	800aa04 <__swbuf_r>
 800a83a:	3001      	adds	r0, #1
 800a83c:	d1bf      	bne.n	800a7be <_puts_r+0x42>
 800a83e:	e7df      	b.n	800a800 <_puts_r+0x84>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	250a      	movs	r5, #10
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	701d      	strb	r5, [r3, #0]
 800a84a:	e7db      	b.n	800a804 <_puts_r+0x88>
 800a84c:	0800cc78 	.word	0x0800cc78
 800a850:	0800cc98 	.word	0x0800cc98
 800a854:	0800cc58 	.word	0x0800cc58

0800a858 <puts>:
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <puts+0xc>)
 800a85a:	4601      	mov	r1, r0
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f7ff bf8d 	b.w	800a77c <_puts_r>
 800a862:	bf00      	nop
 800a864:	200002c8 	.word	0x200002c8

0800a868 <setvbuf>:
 800a868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a86c:	461d      	mov	r5, r3
 800a86e:	4b5d      	ldr	r3, [pc, #372]	; (800a9e4 <setvbuf+0x17c>)
 800a870:	681f      	ldr	r7, [r3, #0]
 800a872:	4604      	mov	r4, r0
 800a874:	460e      	mov	r6, r1
 800a876:	4690      	mov	r8, r2
 800a878:	b127      	cbz	r7, 800a884 <setvbuf+0x1c>
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	b913      	cbnz	r3, 800a884 <setvbuf+0x1c>
 800a87e:	4638      	mov	r0, r7
 800a880:	f001 f914 	bl	800baac <__sinit>
 800a884:	4b58      	ldr	r3, [pc, #352]	; (800a9e8 <setvbuf+0x180>)
 800a886:	429c      	cmp	r4, r3
 800a888:	d167      	bne.n	800a95a <setvbuf+0xf2>
 800a88a:	687c      	ldr	r4, [r7, #4]
 800a88c:	f1b8 0f02 	cmp.w	r8, #2
 800a890:	d006      	beq.n	800a8a0 <setvbuf+0x38>
 800a892:	f1b8 0f01 	cmp.w	r8, #1
 800a896:	f200 809f 	bhi.w	800a9d8 <setvbuf+0x170>
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	f2c0 809c 	blt.w	800a9d8 <setvbuf+0x170>
 800a8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8a2:	07db      	lsls	r3, r3, #31
 800a8a4:	d405      	bmi.n	800a8b2 <setvbuf+0x4a>
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	0598      	lsls	r0, r3, #22
 800a8aa:	d402      	bmi.n	800a8b2 <setvbuf+0x4a>
 800a8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ae:	f001 f9a0 	bl	800bbf2 <__retarget_lock_acquire_recursive>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	f001 f865 	bl	800b984 <_fflush_r>
 800a8ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8bc:	b141      	cbz	r1, 800a8d0 <setvbuf+0x68>
 800a8be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	d002      	beq.n	800a8cc <setvbuf+0x64>
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	f001 fd90 	bl	800c3ec <_free_r>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61a3      	str	r3, [r4, #24]
 800a8d4:	6063      	str	r3, [r4, #4]
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	0619      	lsls	r1, r3, #24
 800a8da:	d503      	bpl.n	800a8e4 <setvbuf+0x7c>
 800a8dc:	6921      	ldr	r1, [r4, #16]
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f001 fd84 	bl	800c3ec <_free_r>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	f1b8 0f02 	cmp.w	r8, #2
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	d06c      	beq.n	800a9d0 <setvbuf+0x168>
 800a8f6:	ab01      	add	r3, sp, #4
 800a8f8:	466a      	mov	r2, sp
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	f001 f97a 	bl	800bbf6 <__swhatbuf_r>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	4318      	orrs	r0, r3
 800a906:	81a0      	strh	r0, [r4, #12]
 800a908:	2d00      	cmp	r5, #0
 800a90a:	d130      	bne.n	800a96e <setvbuf+0x106>
 800a90c:	9d00      	ldr	r5, [sp, #0]
 800a90e:	4628      	mov	r0, r5
 800a910:	f001 f9d6 	bl	800bcc0 <malloc>
 800a914:	4606      	mov	r6, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	d155      	bne.n	800a9c6 <setvbuf+0x15e>
 800a91a:	f8dd 9000 	ldr.w	r9, [sp]
 800a91e:	45a9      	cmp	r9, r5
 800a920:	d14a      	bne.n	800a9b8 <setvbuf+0x150>
 800a922:	f04f 35ff 	mov.w	r5, #4294967295
 800a926:	2200      	movs	r2, #0
 800a928:	60a2      	str	r2, [r4, #8]
 800a92a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a92e:	6022      	str	r2, [r4, #0]
 800a930:	6122      	str	r2, [r4, #16]
 800a932:	2201      	movs	r2, #1
 800a934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a938:	6162      	str	r2, [r4, #20]
 800a93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a93c:	f043 0302 	orr.w	r3, r3, #2
 800a940:	07d2      	lsls	r2, r2, #31
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	d405      	bmi.n	800a952 <setvbuf+0xea>
 800a946:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a94a:	d102      	bne.n	800a952 <setvbuf+0xea>
 800a94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a94e:	f001 f951 	bl	800bbf4 <__retarget_lock_release_recursive>
 800a952:	4628      	mov	r0, r5
 800a954:	b003      	add	sp, #12
 800a956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a95a:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <setvbuf+0x184>)
 800a95c:	429c      	cmp	r4, r3
 800a95e:	d101      	bne.n	800a964 <setvbuf+0xfc>
 800a960:	68bc      	ldr	r4, [r7, #8]
 800a962:	e793      	b.n	800a88c <setvbuf+0x24>
 800a964:	4b22      	ldr	r3, [pc, #136]	; (800a9f0 <setvbuf+0x188>)
 800a966:	429c      	cmp	r4, r3
 800a968:	bf08      	it	eq
 800a96a:	68fc      	ldreq	r4, [r7, #12]
 800a96c:	e78e      	b.n	800a88c <setvbuf+0x24>
 800a96e:	2e00      	cmp	r6, #0
 800a970:	d0cd      	beq.n	800a90e <setvbuf+0xa6>
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	b913      	cbnz	r3, 800a97c <setvbuf+0x114>
 800a976:	4638      	mov	r0, r7
 800a978:	f001 f898 	bl	800baac <__sinit>
 800a97c:	f1b8 0f01 	cmp.w	r8, #1
 800a980:	bf08      	it	eq
 800a982:	89a3      	ldrheq	r3, [r4, #12]
 800a984:	6026      	str	r6, [r4, #0]
 800a986:	bf04      	itt	eq
 800a988:	f043 0301 	orreq.w	r3, r3, #1
 800a98c:	81a3      	strheq	r3, [r4, #12]
 800a98e:	89a2      	ldrh	r2, [r4, #12]
 800a990:	f012 0308 	ands.w	r3, r2, #8
 800a994:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a998:	d01c      	beq.n	800a9d4 <setvbuf+0x16c>
 800a99a:	07d3      	lsls	r3, r2, #31
 800a99c:	bf41      	itttt	mi
 800a99e:	2300      	movmi	r3, #0
 800a9a0:	426d      	negmi	r5, r5
 800a9a2:	60a3      	strmi	r3, [r4, #8]
 800a9a4:	61a5      	strmi	r5, [r4, #24]
 800a9a6:	bf58      	it	pl
 800a9a8:	60a5      	strpl	r5, [r4, #8]
 800a9aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a9ac:	f015 0501 	ands.w	r5, r5, #1
 800a9b0:	d115      	bne.n	800a9de <setvbuf+0x176>
 800a9b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a9b6:	e7c8      	b.n	800a94a <setvbuf+0xe2>
 800a9b8:	4648      	mov	r0, r9
 800a9ba:	f001 f981 	bl	800bcc0 <malloc>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d0ae      	beq.n	800a922 <setvbuf+0xba>
 800a9c4:	464d      	mov	r5, r9
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9cc:	81a3      	strh	r3, [r4, #12]
 800a9ce:	e7d0      	b.n	800a972 <setvbuf+0x10a>
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	e7a8      	b.n	800a926 <setvbuf+0xbe>
 800a9d4:	60a3      	str	r3, [r4, #8]
 800a9d6:	e7e8      	b.n	800a9aa <setvbuf+0x142>
 800a9d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a9dc:	e7b9      	b.n	800a952 <setvbuf+0xea>
 800a9de:	2500      	movs	r5, #0
 800a9e0:	e7b7      	b.n	800a952 <setvbuf+0xea>
 800a9e2:	bf00      	nop
 800a9e4:	200002c8 	.word	0x200002c8
 800a9e8:	0800cc78 	.word	0x0800cc78
 800a9ec:	0800cc98 	.word	0x0800cc98
 800a9f0:	0800cc58 	.word	0x0800cc58

0800a9f4 <strcpy>:
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9fa:	f803 2b01 	strb.w	r2, [r3], #1
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	d1f9      	bne.n	800a9f6 <strcpy+0x2>
 800aa02:	4770      	bx	lr

0800aa04 <__swbuf_r>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	460e      	mov	r6, r1
 800aa08:	4614      	mov	r4, r2
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	b118      	cbz	r0, 800aa16 <__swbuf_r+0x12>
 800aa0e:	6983      	ldr	r3, [r0, #24]
 800aa10:	b90b      	cbnz	r3, 800aa16 <__swbuf_r+0x12>
 800aa12:	f001 f84b 	bl	800baac <__sinit>
 800aa16:	4b21      	ldr	r3, [pc, #132]	; (800aa9c <__swbuf_r+0x98>)
 800aa18:	429c      	cmp	r4, r3
 800aa1a:	d12b      	bne.n	800aa74 <__swbuf_r+0x70>
 800aa1c:	686c      	ldr	r4, [r5, #4]
 800aa1e:	69a3      	ldr	r3, [r4, #24]
 800aa20:	60a3      	str	r3, [r4, #8]
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	071a      	lsls	r2, r3, #28
 800aa26:	d52f      	bpl.n	800aa88 <__swbuf_r+0x84>
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	b36b      	cbz	r3, 800aa88 <__swbuf_r+0x84>
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	6820      	ldr	r0, [r4, #0]
 800aa30:	1ac0      	subs	r0, r0, r3
 800aa32:	6963      	ldr	r3, [r4, #20]
 800aa34:	b2f6      	uxtb	r6, r6
 800aa36:	4283      	cmp	r3, r0
 800aa38:	4637      	mov	r7, r6
 800aa3a:	dc04      	bgt.n	800aa46 <__swbuf_r+0x42>
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f000 ffa0 	bl	800b984 <_fflush_r>
 800aa44:	bb30      	cbnz	r0, 800aa94 <__swbuf_r+0x90>
 800aa46:	68a3      	ldr	r3, [r4, #8]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	60a3      	str	r3, [r4, #8]
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	6022      	str	r2, [r4, #0]
 800aa52:	701e      	strb	r6, [r3, #0]
 800aa54:	6963      	ldr	r3, [r4, #20]
 800aa56:	3001      	adds	r0, #1
 800aa58:	4283      	cmp	r3, r0
 800aa5a:	d004      	beq.n	800aa66 <__swbuf_r+0x62>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	07db      	lsls	r3, r3, #31
 800aa60:	d506      	bpl.n	800aa70 <__swbuf_r+0x6c>
 800aa62:	2e0a      	cmp	r6, #10
 800aa64:	d104      	bne.n	800aa70 <__swbuf_r+0x6c>
 800aa66:	4621      	mov	r1, r4
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f000 ff8b 	bl	800b984 <_fflush_r>
 800aa6e:	b988      	cbnz	r0, 800aa94 <__swbuf_r+0x90>
 800aa70:	4638      	mov	r0, r7
 800aa72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <__swbuf_r+0x9c>)
 800aa76:	429c      	cmp	r4, r3
 800aa78:	d101      	bne.n	800aa7e <__swbuf_r+0x7a>
 800aa7a:	68ac      	ldr	r4, [r5, #8]
 800aa7c:	e7cf      	b.n	800aa1e <__swbuf_r+0x1a>
 800aa7e:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <__swbuf_r+0xa0>)
 800aa80:	429c      	cmp	r4, r3
 800aa82:	bf08      	it	eq
 800aa84:	68ec      	ldreq	r4, [r5, #12]
 800aa86:	e7ca      	b.n	800aa1e <__swbuf_r+0x1a>
 800aa88:	4621      	mov	r1, r4
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f000 f80c 	bl	800aaa8 <__swsetup_r>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d0cb      	beq.n	800aa2c <__swbuf_r+0x28>
 800aa94:	f04f 37ff 	mov.w	r7, #4294967295
 800aa98:	e7ea      	b.n	800aa70 <__swbuf_r+0x6c>
 800aa9a:	bf00      	nop
 800aa9c:	0800cc78 	.word	0x0800cc78
 800aaa0:	0800cc98 	.word	0x0800cc98
 800aaa4:	0800cc58 	.word	0x0800cc58

0800aaa8 <__swsetup_r>:
 800aaa8:	4b32      	ldr	r3, [pc, #200]	; (800ab74 <__swsetup_r+0xcc>)
 800aaaa:	b570      	push	{r4, r5, r6, lr}
 800aaac:	681d      	ldr	r5, [r3, #0]
 800aaae:	4606      	mov	r6, r0
 800aab0:	460c      	mov	r4, r1
 800aab2:	b125      	cbz	r5, 800aabe <__swsetup_r+0x16>
 800aab4:	69ab      	ldr	r3, [r5, #24]
 800aab6:	b913      	cbnz	r3, 800aabe <__swsetup_r+0x16>
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 fff7 	bl	800baac <__sinit>
 800aabe:	4b2e      	ldr	r3, [pc, #184]	; (800ab78 <__swsetup_r+0xd0>)
 800aac0:	429c      	cmp	r4, r3
 800aac2:	d10f      	bne.n	800aae4 <__swsetup_r+0x3c>
 800aac4:	686c      	ldr	r4, [r5, #4]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aacc:	0719      	lsls	r1, r3, #28
 800aace:	d42c      	bmi.n	800ab2a <__swsetup_r+0x82>
 800aad0:	06dd      	lsls	r5, r3, #27
 800aad2:	d411      	bmi.n	800aaf8 <__swsetup_r+0x50>
 800aad4:	2309      	movs	r3, #9
 800aad6:	6033      	str	r3, [r6, #0]
 800aad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	f04f 30ff 	mov.w	r0, #4294967295
 800aae2:	e03e      	b.n	800ab62 <__swsetup_r+0xba>
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <__swsetup_r+0xd4>)
 800aae6:	429c      	cmp	r4, r3
 800aae8:	d101      	bne.n	800aaee <__swsetup_r+0x46>
 800aaea:	68ac      	ldr	r4, [r5, #8]
 800aaec:	e7eb      	b.n	800aac6 <__swsetup_r+0x1e>
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <__swsetup_r+0xd8>)
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	bf08      	it	eq
 800aaf4:	68ec      	ldreq	r4, [r5, #12]
 800aaf6:	e7e6      	b.n	800aac6 <__swsetup_r+0x1e>
 800aaf8:	0758      	lsls	r0, r3, #29
 800aafa:	d512      	bpl.n	800ab22 <__swsetup_r+0x7a>
 800aafc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aafe:	b141      	cbz	r1, 800ab12 <__swsetup_r+0x6a>
 800ab00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab04:	4299      	cmp	r1, r3
 800ab06:	d002      	beq.n	800ab0e <__swsetup_r+0x66>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f001 fc6f 	bl	800c3ec <_free_r>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	6363      	str	r3, [r4, #52]	; 0x34
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab18:	81a3      	strh	r3, [r4, #12]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6063      	str	r3, [r4, #4]
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	f043 0308 	orr.w	r3, r3, #8
 800ab28:	81a3      	strh	r3, [r4, #12]
 800ab2a:	6923      	ldr	r3, [r4, #16]
 800ab2c:	b94b      	cbnz	r3, 800ab42 <__swsetup_r+0x9a>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab38:	d003      	beq.n	800ab42 <__swsetup_r+0x9a>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f001 f87f 	bl	800bc40 <__smakebuf_r>
 800ab42:	89a0      	ldrh	r0, [r4, #12]
 800ab44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab48:	f010 0301 	ands.w	r3, r0, #1
 800ab4c:	d00a      	beq.n	800ab64 <__swsetup_r+0xbc>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60a3      	str	r3, [r4, #8]
 800ab52:	6963      	ldr	r3, [r4, #20]
 800ab54:	425b      	negs	r3, r3
 800ab56:	61a3      	str	r3, [r4, #24]
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	b943      	cbnz	r3, 800ab6e <__swsetup_r+0xc6>
 800ab5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab60:	d1ba      	bne.n	800aad8 <__swsetup_r+0x30>
 800ab62:	bd70      	pop	{r4, r5, r6, pc}
 800ab64:	0781      	lsls	r1, r0, #30
 800ab66:	bf58      	it	pl
 800ab68:	6963      	ldrpl	r3, [r4, #20]
 800ab6a:	60a3      	str	r3, [r4, #8]
 800ab6c:	e7f4      	b.n	800ab58 <__swsetup_r+0xb0>
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e7f7      	b.n	800ab62 <__swsetup_r+0xba>
 800ab72:	bf00      	nop
 800ab74:	200002c8 	.word	0x200002c8
 800ab78:	0800cc78 	.word	0x0800cc78
 800ab7c:	0800cc98 	.word	0x0800cc98
 800ab80:	0800cc58 	.word	0x0800cc58

0800ab84 <quorem>:
 800ab84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	6903      	ldr	r3, [r0, #16]
 800ab8a:	690c      	ldr	r4, [r1, #16]
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	4607      	mov	r7, r0
 800ab90:	f2c0 8081 	blt.w	800ac96 <quorem+0x112>
 800ab94:	3c01      	subs	r4, #1
 800ab96:	f101 0814 	add.w	r8, r1, #20
 800ab9a:	f100 0514 	add.w	r5, r0, #20
 800ab9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aba2:	9301      	str	r3, [sp, #4]
 800aba4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abac:	3301      	adds	r3, #1
 800abae:	429a      	cmp	r2, r3
 800abb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800abbc:	d331      	bcc.n	800ac22 <quorem+0x9e>
 800abbe:	f04f 0e00 	mov.w	lr, #0
 800abc2:	4640      	mov	r0, r8
 800abc4:	46ac      	mov	ip, r5
 800abc6:	46f2      	mov	sl, lr
 800abc8:	f850 2b04 	ldr.w	r2, [r0], #4
 800abcc:	b293      	uxth	r3, r2
 800abce:	fb06 e303 	mla	r3, r6, r3, lr
 800abd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	ebaa 0303 	sub.w	r3, sl, r3
 800abdc:	0c12      	lsrs	r2, r2, #16
 800abde:	f8dc a000 	ldr.w	sl, [ip]
 800abe2:	fb06 e202 	mla	r2, r6, r2, lr
 800abe6:	fa13 f38a 	uxtah	r3, r3, sl
 800abea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abee:	fa1f fa82 	uxth.w	sl, r2
 800abf2:	f8dc 2000 	ldr.w	r2, [ip]
 800abf6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800abfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac04:	4581      	cmp	r9, r0
 800ac06:	f84c 3b04 	str.w	r3, [ip], #4
 800ac0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac0e:	d2db      	bcs.n	800abc8 <quorem+0x44>
 800ac10:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac14:	b92b      	cbnz	r3, 800ac22 <quorem+0x9e>
 800ac16:	9b01      	ldr	r3, [sp, #4]
 800ac18:	3b04      	subs	r3, #4
 800ac1a:	429d      	cmp	r5, r3
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	d32e      	bcc.n	800ac7e <quorem+0xfa>
 800ac20:	613c      	str	r4, [r7, #16]
 800ac22:	4638      	mov	r0, r7
 800ac24:	f001 fad2 	bl	800c1cc <__mcmp>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	db24      	blt.n	800ac76 <quorem+0xf2>
 800ac2c:	3601      	adds	r6, #1
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f04f 0c00 	mov.w	ip, #0
 800ac34:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac38:	f8d0 e000 	ldr.w	lr, [r0]
 800ac3c:	b293      	uxth	r3, r2
 800ac3e:	ebac 0303 	sub.w	r3, ip, r3
 800ac42:	0c12      	lsrs	r2, r2, #16
 800ac44:	fa13 f38e 	uxtah	r3, r3, lr
 800ac48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac56:	45c1      	cmp	r9, r8
 800ac58:	f840 3b04 	str.w	r3, [r0], #4
 800ac5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac60:	d2e8      	bcs.n	800ac34 <quorem+0xb0>
 800ac62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac6a:	b922      	cbnz	r2, 800ac76 <quorem+0xf2>
 800ac6c:	3b04      	subs	r3, #4
 800ac6e:	429d      	cmp	r5, r3
 800ac70:	461a      	mov	r2, r3
 800ac72:	d30a      	bcc.n	800ac8a <quorem+0x106>
 800ac74:	613c      	str	r4, [r7, #16]
 800ac76:	4630      	mov	r0, r6
 800ac78:	b003      	add	sp, #12
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	2a00      	cmp	r2, #0
 800ac84:	d1cc      	bne.n	800ac20 <quorem+0x9c>
 800ac86:	3c01      	subs	r4, #1
 800ac88:	e7c7      	b.n	800ac1a <quorem+0x96>
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	3b04      	subs	r3, #4
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	d1f0      	bne.n	800ac74 <quorem+0xf0>
 800ac92:	3c01      	subs	r4, #1
 800ac94:	e7eb      	b.n	800ac6e <quorem+0xea>
 800ac96:	2000      	movs	r0, #0
 800ac98:	e7ee      	b.n	800ac78 <quorem+0xf4>
 800ac9a:	0000      	movs	r0, r0
 800ac9c:	0000      	movs	r0, r0
	...

0800aca0 <_dtoa_r>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	ed2d 8b02 	vpush	{d8}
 800aca8:	ec57 6b10 	vmov	r6, r7, d0
 800acac:	b095      	sub	sp, #84	; 0x54
 800acae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800acb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acb4:	9105      	str	r1, [sp, #20]
 800acb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800acba:	4604      	mov	r4, r0
 800acbc:	9209      	str	r2, [sp, #36]	; 0x24
 800acbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc0:	b975      	cbnz	r5, 800ace0 <_dtoa_r+0x40>
 800acc2:	2010      	movs	r0, #16
 800acc4:	f000 fffc 	bl	800bcc0 <malloc>
 800acc8:	4602      	mov	r2, r0
 800acca:	6260      	str	r0, [r4, #36]	; 0x24
 800accc:	b920      	cbnz	r0, 800acd8 <_dtoa_r+0x38>
 800acce:	4bb2      	ldr	r3, [pc, #712]	; (800af98 <_dtoa_r+0x2f8>)
 800acd0:	21ea      	movs	r1, #234	; 0xea
 800acd2:	48b2      	ldr	r0, [pc, #712]	; (800af9c <_dtoa_r+0x2fc>)
 800acd4:	f001 fdf4 	bl	800c8c0 <__assert_func>
 800acd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acdc:	6005      	str	r5, [r0, #0]
 800acde:	60c5      	str	r5, [r0, #12]
 800ace0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace2:	6819      	ldr	r1, [r3, #0]
 800ace4:	b151      	cbz	r1, 800acfc <_dtoa_r+0x5c>
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	604a      	str	r2, [r1, #4]
 800acea:	2301      	movs	r3, #1
 800acec:	4093      	lsls	r3, r2
 800acee:	608b      	str	r3, [r1, #8]
 800acf0:	4620      	mov	r0, r4
 800acf2:	f001 f82d 	bl	800bd50 <_Bfree>
 800acf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	1e3b      	subs	r3, r7, #0
 800acfe:	bfb9      	ittee	lt
 800ad00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad04:	9303      	strlt	r3, [sp, #12]
 800ad06:	2300      	movge	r3, #0
 800ad08:	f8c8 3000 	strge.w	r3, [r8]
 800ad0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ad10:	4ba3      	ldr	r3, [pc, #652]	; (800afa0 <_dtoa_r+0x300>)
 800ad12:	bfbc      	itt	lt
 800ad14:	2201      	movlt	r2, #1
 800ad16:	f8c8 2000 	strlt.w	r2, [r8]
 800ad1a:	ea33 0309 	bics.w	r3, r3, r9
 800ad1e:	d11b      	bne.n	800ad58 <_dtoa_r+0xb8>
 800ad20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad2c:	4333      	orrs	r3, r6
 800ad2e:	f000 857a 	beq.w	800b826 <_dtoa_r+0xb86>
 800ad32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad34:	b963      	cbnz	r3, 800ad50 <_dtoa_r+0xb0>
 800ad36:	4b9b      	ldr	r3, [pc, #620]	; (800afa4 <_dtoa_r+0x304>)
 800ad38:	e024      	b.n	800ad84 <_dtoa_r+0xe4>
 800ad3a:	4b9b      	ldr	r3, [pc, #620]	; (800afa8 <_dtoa_r+0x308>)
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	9800      	ldr	r0, [sp, #0]
 800ad46:	b015      	add	sp, #84	; 0x54
 800ad48:	ecbd 8b02 	vpop	{d8}
 800ad4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad50:	4b94      	ldr	r3, [pc, #592]	; (800afa4 <_dtoa_r+0x304>)
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	3303      	adds	r3, #3
 800ad56:	e7f3      	b.n	800ad40 <_dtoa_r+0xa0>
 800ad58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	ec51 0b17 	vmov	r0, r1, d7
 800ad62:	2300      	movs	r3, #0
 800ad64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ad68:	f7f5 fece 	bl	8000b08 <__aeabi_dcmpeq>
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	b158      	cbz	r0, 800ad88 <_dtoa_r+0xe8>
 800ad70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad72:	2301      	movs	r3, #1
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8551 	beq.w	800b820 <_dtoa_r+0xb80>
 800ad7e:	488b      	ldr	r0, [pc, #556]	; (800afac <_dtoa_r+0x30c>)
 800ad80:	6018      	str	r0, [r3, #0]
 800ad82:	1e43      	subs	r3, r0, #1
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	e7dd      	b.n	800ad44 <_dtoa_r+0xa4>
 800ad88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ad8c:	aa12      	add	r2, sp, #72	; 0x48
 800ad8e:	a913      	add	r1, sp, #76	; 0x4c
 800ad90:	4620      	mov	r0, r4
 800ad92:	f001 fabf 	bl	800c314 <__d2b>
 800ad96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad9a:	4683      	mov	fp, r0
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	d07c      	beq.n	800ae9a <_dtoa_r+0x1fa>
 800ada0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ada6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800adae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800adb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800adb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800adba:	4b7d      	ldr	r3, [pc, #500]	; (800afb0 <_dtoa_r+0x310>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	4630      	mov	r0, r6
 800adc0:	4639      	mov	r1, r7
 800adc2:	f7f5 fa81 	bl	80002c8 <__aeabi_dsub>
 800adc6:	a36e      	add	r3, pc, #440	; (adr r3, 800af80 <_dtoa_r+0x2e0>)
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	f7f5 fc34 	bl	8000638 <__aeabi_dmul>
 800add0:	a36d      	add	r3, pc, #436	; (adr r3, 800af88 <_dtoa_r+0x2e8>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	f7f5 fa79 	bl	80002cc <__adddf3>
 800adda:	4606      	mov	r6, r0
 800addc:	4628      	mov	r0, r5
 800adde:	460f      	mov	r7, r1
 800ade0:	f7f5 fbc0 	bl	8000564 <__aeabi_i2d>
 800ade4:	a36a      	add	r3, pc, #424	; (adr r3, 800af90 <_dtoa_r+0x2f0>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fc25 	bl	8000638 <__aeabi_dmul>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fa69 	bl	80002cc <__adddf3>
 800adfa:	4606      	mov	r6, r0
 800adfc:	460f      	mov	r7, r1
 800adfe:	f7f5 fecb 	bl	8000b98 <__aeabi_d2iz>
 800ae02:	2200      	movs	r2, #0
 800ae04:	4682      	mov	sl, r0
 800ae06:	2300      	movs	r3, #0
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fe86 	bl	8000b1c <__aeabi_dcmplt>
 800ae10:	b148      	cbz	r0, 800ae26 <_dtoa_r+0x186>
 800ae12:	4650      	mov	r0, sl
 800ae14:	f7f5 fba6 	bl	8000564 <__aeabi_i2d>
 800ae18:	4632      	mov	r2, r6
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	f7f5 fe74 	bl	8000b08 <__aeabi_dcmpeq>
 800ae20:	b908      	cbnz	r0, 800ae26 <_dtoa_r+0x186>
 800ae22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae26:	f1ba 0f16 	cmp.w	sl, #22
 800ae2a:	d854      	bhi.n	800aed6 <_dtoa_r+0x236>
 800ae2c:	4b61      	ldr	r3, [pc, #388]	; (800afb4 <_dtoa_r+0x314>)
 800ae2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae3a:	f7f5 fe6f 	bl	8000b1c <__aeabi_dcmplt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d04b      	beq.n	800aeda <_dtoa_r+0x23a>
 800ae42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae46:	2300      	movs	r3, #0
 800ae48:	930e      	str	r3, [sp, #56]	; 0x38
 800ae4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae4c:	1b5d      	subs	r5, r3, r5
 800ae4e:	1e6b      	subs	r3, r5, #1
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	bf43      	ittte	mi
 800ae54:	2300      	movmi	r3, #0
 800ae56:	f1c5 0801 	rsbmi	r8, r5, #1
 800ae5a:	9304      	strmi	r3, [sp, #16]
 800ae5c:	f04f 0800 	movpl.w	r8, #0
 800ae60:	f1ba 0f00 	cmp.w	sl, #0
 800ae64:	db3b      	blt.n	800aede <_dtoa_r+0x23e>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ae6c:	4453      	add	r3, sl
 800ae6e:	9304      	str	r3, [sp, #16]
 800ae70:	2300      	movs	r3, #0
 800ae72:	9306      	str	r3, [sp, #24]
 800ae74:	9b05      	ldr	r3, [sp, #20]
 800ae76:	2b09      	cmp	r3, #9
 800ae78:	d869      	bhi.n	800af4e <_dtoa_r+0x2ae>
 800ae7a:	2b05      	cmp	r3, #5
 800ae7c:	bfc4      	itt	gt
 800ae7e:	3b04      	subgt	r3, #4
 800ae80:	9305      	strgt	r3, [sp, #20]
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	f1a3 0302 	sub.w	r3, r3, #2
 800ae88:	bfcc      	ite	gt
 800ae8a:	2500      	movgt	r5, #0
 800ae8c:	2501      	movle	r5, #1
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d869      	bhi.n	800af66 <_dtoa_r+0x2c6>
 800ae92:	e8df f003 	tbb	[pc, r3]
 800ae96:	4e2c      	.short	0x4e2c
 800ae98:	5a4c      	.short	0x5a4c
 800ae9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ae9e:	441d      	add	r5, r3
 800aea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	bfc1      	itttt	gt
 800aea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aeac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aeb0:	fa09 f303 	lslgt.w	r3, r9, r3
 800aeb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aeb8:	bfda      	itte	le
 800aeba:	f1c3 0320 	rsble	r3, r3, #32
 800aebe:	fa06 f003 	lslle.w	r0, r6, r3
 800aec2:	4318      	orrgt	r0, r3
 800aec4:	f7f5 fb3e 	bl	8000544 <__aeabi_ui2d>
 800aec8:	2301      	movs	r3, #1
 800aeca:	4606      	mov	r6, r0
 800aecc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aed0:	3d01      	subs	r5, #1
 800aed2:	9310      	str	r3, [sp, #64]	; 0x40
 800aed4:	e771      	b.n	800adba <_dtoa_r+0x11a>
 800aed6:	2301      	movs	r3, #1
 800aed8:	e7b6      	b.n	800ae48 <_dtoa_r+0x1a8>
 800aeda:	900e      	str	r0, [sp, #56]	; 0x38
 800aedc:	e7b5      	b.n	800ae4a <_dtoa_r+0x1aa>
 800aede:	f1ca 0300 	rsb	r3, sl, #0
 800aee2:	9306      	str	r3, [sp, #24]
 800aee4:	2300      	movs	r3, #0
 800aee6:	eba8 080a 	sub.w	r8, r8, sl
 800aeea:	930d      	str	r3, [sp, #52]	; 0x34
 800aeec:	e7c2      	b.n	800ae74 <_dtoa_r+0x1d4>
 800aeee:	2300      	movs	r3, #0
 800aef0:	9308      	str	r3, [sp, #32]
 800aef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dc39      	bgt.n	800af6c <_dtoa_r+0x2cc>
 800aef8:	f04f 0901 	mov.w	r9, #1
 800aefc:	f8cd 9004 	str.w	r9, [sp, #4]
 800af00:	464b      	mov	r3, r9
 800af02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800af06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af08:	2200      	movs	r2, #0
 800af0a:	6042      	str	r2, [r0, #4]
 800af0c:	2204      	movs	r2, #4
 800af0e:	f102 0614 	add.w	r6, r2, #20
 800af12:	429e      	cmp	r6, r3
 800af14:	6841      	ldr	r1, [r0, #4]
 800af16:	d92f      	bls.n	800af78 <_dtoa_r+0x2d8>
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fed9 	bl	800bcd0 <_Balloc>
 800af1e:	9000      	str	r0, [sp, #0]
 800af20:	2800      	cmp	r0, #0
 800af22:	d14b      	bne.n	800afbc <_dtoa_r+0x31c>
 800af24:	4b24      	ldr	r3, [pc, #144]	; (800afb8 <_dtoa_r+0x318>)
 800af26:	4602      	mov	r2, r0
 800af28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af2c:	e6d1      	b.n	800acd2 <_dtoa_r+0x32>
 800af2e:	2301      	movs	r3, #1
 800af30:	e7de      	b.n	800aef0 <_dtoa_r+0x250>
 800af32:	2300      	movs	r3, #0
 800af34:	9308      	str	r3, [sp, #32]
 800af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af38:	eb0a 0903 	add.w	r9, sl, r3
 800af3c:	f109 0301 	add.w	r3, r9, #1
 800af40:	2b01      	cmp	r3, #1
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	bfb8      	it	lt
 800af46:	2301      	movlt	r3, #1
 800af48:	e7dd      	b.n	800af06 <_dtoa_r+0x266>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e7f2      	b.n	800af34 <_dtoa_r+0x294>
 800af4e:	2501      	movs	r5, #1
 800af50:	2300      	movs	r3, #0
 800af52:	9305      	str	r3, [sp, #20]
 800af54:	9508      	str	r5, [sp, #32]
 800af56:	f04f 39ff 	mov.w	r9, #4294967295
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800af60:	2312      	movs	r3, #18
 800af62:	9209      	str	r2, [sp, #36]	; 0x24
 800af64:	e7cf      	b.n	800af06 <_dtoa_r+0x266>
 800af66:	2301      	movs	r3, #1
 800af68:	9308      	str	r3, [sp, #32]
 800af6a:	e7f4      	b.n	800af56 <_dtoa_r+0x2b6>
 800af6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800af70:	f8cd 9004 	str.w	r9, [sp, #4]
 800af74:	464b      	mov	r3, r9
 800af76:	e7c6      	b.n	800af06 <_dtoa_r+0x266>
 800af78:	3101      	adds	r1, #1
 800af7a:	6041      	str	r1, [r0, #4]
 800af7c:	0052      	lsls	r2, r2, #1
 800af7e:	e7c6      	b.n	800af0e <_dtoa_r+0x26e>
 800af80:	636f4361 	.word	0x636f4361
 800af84:	3fd287a7 	.word	0x3fd287a7
 800af88:	8b60c8b3 	.word	0x8b60c8b3
 800af8c:	3fc68a28 	.word	0x3fc68a28
 800af90:	509f79fb 	.word	0x509f79fb
 800af94:	3fd34413 	.word	0x3fd34413
 800af98:	0800cbd1 	.word	0x0800cbd1
 800af9c:	0800cbe8 	.word	0x0800cbe8
 800afa0:	7ff00000 	.word	0x7ff00000
 800afa4:	0800cbcd 	.word	0x0800cbcd
 800afa8:	0800cbc4 	.word	0x0800cbc4
 800afac:	0800cba1 	.word	0x0800cba1
 800afb0:	3ff80000 	.word	0x3ff80000
 800afb4:	0800cd40 	.word	0x0800cd40
 800afb8:	0800cc47 	.word	0x0800cc47
 800afbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afbe:	9a00      	ldr	r2, [sp, #0]
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	9b01      	ldr	r3, [sp, #4]
 800afc4:	2b0e      	cmp	r3, #14
 800afc6:	f200 80ad 	bhi.w	800b124 <_dtoa_r+0x484>
 800afca:	2d00      	cmp	r5, #0
 800afcc:	f000 80aa 	beq.w	800b124 <_dtoa_r+0x484>
 800afd0:	f1ba 0f00 	cmp.w	sl, #0
 800afd4:	dd36      	ble.n	800b044 <_dtoa_r+0x3a4>
 800afd6:	4ac3      	ldr	r2, [pc, #780]	; (800b2e4 <_dtoa_r+0x644>)
 800afd8:	f00a 030f 	and.w	r3, sl, #15
 800afdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afe0:	ed93 7b00 	vldr	d7, [r3]
 800afe4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800afe8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800afec:	eeb0 8a47 	vmov.f32	s16, s14
 800aff0:	eef0 8a67 	vmov.f32	s17, s15
 800aff4:	d016      	beq.n	800b024 <_dtoa_r+0x384>
 800aff6:	4bbc      	ldr	r3, [pc, #752]	; (800b2e8 <_dtoa_r+0x648>)
 800aff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800affc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b000:	f7f5 fc44 	bl	800088c <__aeabi_ddiv>
 800b004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b008:	f007 070f 	and.w	r7, r7, #15
 800b00c:	2503      	movs	r5, #3
 800b00e:	4eb6      	ldr	r6, [pc, #728]	; (800b2e8 <_dtoa_r+0x648>)
 800b010:	b957      	cbnz	r7, 800b028 <_dtoa_r+0x388>
 800b012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b016:	ec53 2b18 	vmov	r2, r3, d8
 800b01a:	f7f5 fc37 	bl	800088c <__aeabi_ddiv>
 800b01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b022:	e029      	b.n	800b078 <_dtoa_r+0x3d8>
 800b024:	2502      	movs	r5, #2
 800b026:	e7f2      	b.n	800b00e <_dtoa_r+0x36e>
 800b028:	07f9      	lsls	r1, r7, #31
 800b02a:	d508      	bpl.n	800b03e <_dtoa_r+0x39e>
 800b02c:	ec51 0b18 	vmov	r0, r1, d8
 800b030:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b034:	f7f5 fb00 	bl	8000638 <__aeabi_dmul>
 800b038:	ec41 0b18 	vmov	d8, r0, r1
 800b03c:	3501      	adds	r5, #1
 800b03e:	107f      	asrs	r7, r7, #1
 800b040:	3608      	adds	r6, #8
 800b042:	e7e5      	b.n	800b010 <_dtoa_r+0x370>
 800b044:	f000 80a6 	beq.w	800b194 <_dtoa_r+0x4f4>
 800b048:	f1ca 0600 	rsb	r6, sl, #0
 800b04c:	4ba5      	ldr	r3, [pc, #660]	; (800b2e4 <_dtoa_r+0x644>)
 800b04e:	4fa6      	ldr	r7, [pc, #664]	; (800b2e8 <_dtoa_r+0x648>)
 800b050:	f006 020f 	and.w	r2, r6, #15
 800b054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b060:	f7f5 faea 	bl	8000638 <__aeabi_dmul>
 800b064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b068:	1136      	asrs	r6, r6, #4
 800b06a:	2300      	movs	r3, #0
 800b06c:	2502      	movs	r5, #2
 800b06e:	2e00      	cmp	r6, #0
 800b070:	f040 8085 	bne.w	800b17e <_dtoa_r+0x4de>
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1d2      	bne.n	800b01e <_dtoa_r+0x37e>
 800b078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 808c 	beq.w	800b198 <_dtoa_r+0x4f8>
 800b080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b084:	4b99      	ldr	r3, [pc, #612]	; (800b2ec <_dtoa_r+0x64c>)
 800b086:	2200      	movs	r2, #0
 800b088:	4630      	mov	r0, r6
 800b08a:	4639      	mov	r1, r7
 800b08c:	f7f5 fd46 	bl	8000b1c <__aeabi_dcmplt>
 800b090:	2800      	cmp	r0, #0
 800b092:	f000 8081 	beq.w	800b198 <_dtoa_r+0x4f8>
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d07d      	beq.n	800b198 <_dtoa_r+0x4f8>
 800b09c:	f1b9 0f00 	cmp.w	r9, #0
 800b0a0:	dd3c      	ble.n	800b11c <_dtoa_r+0x47c>
 800b0a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	4b91      	ldr	r3, [pc, #580]	; (800b2f0 <_dtoa_r+0x650>)
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	f7f5 fac2 	bl	8000638 <__aeabi_dmul>
 800b0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b8:	3501      	adds	r5, #1
 800b0ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b0be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f7f5 fa4e 	bl	8000564 <__aeabi_i2d>
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	f7f5 fab4 	bl	8000638 <__aeabi_dmul>
 800b0d0:	4b88      	ldr	r3, [pc, #544]	; (800b2f4 <_dtoa_r+0x654>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f7f5 f8fa 	bl	80002cc <__adddf3>
 800b0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0e0:	9303      	str	r3, [sp, #12]
 800b0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d15c      	bne.n	800b1a2 <_dtoa_r+0x502>
 800b0e8:	4b83      	ldr	r3, [pc, #524]	; (800b2f8 <_dtoa_r+0x658>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	f7f5 f8ea 	bl	80002c8 <__aeabi_dsub>
 800b0f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	f7f5 fd2c 	bl	8000b58 <__aeabi_dcmpgt>
 800b100:	2800      	cmp	r0, #0
 800b102:	f040 8296 	bne.w	800b632 <_dtoa_r+0x992>
 800b106:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b10a:	4630      	mov	r0, r6
 800b10c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b110:	4639      	mov	r1, r7
 800b112:	f7f5 fd03 	bl	8000b1c <__aeabi_dcmplt>
 800b116:	2800      	cmp	r0, #0
 800b118:	f040 8288 	bne.w	800b62c <_dtoa_r+0x98c>
 800b11c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b126:	2b00      	cmp	r3, #0
 800b128:	f2c0 8158 	blt.w	800b3dc <_dtoa_r+0x73c>
 800b12c:	f1ba 0f0e 	cmp.w	sl, #14
 800b130:	f300 8154 	bgt.w	800b3dc <_dtoa_r+0x73c>
 800b134:	4b6b      	ldr	r3, [pc, #428]	; (800b2e4 <_dtoa_r+0x644>)
 800b136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b13a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	f280 80e3 	bge.w	800b30c <_dtoa_r+0x66c>
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f300 80df 	bgt.w	800b30c <_dtoa_r+0x66c>
 800b14e:	f040 826d 	bne.w	800b62c <_dtoa_r+0x98c>
 800b152:	4b69      	ldr	r3, [pc, #420]	; (800b2f8 <_dtoa_r+0x658>)
 800b154:	2200      	movs	r2, #0
 800b156:	4640      	mov	r0, r8
 800b158:	4649      	mov	r1, r9
 800b15a:	f7f5 fa6d 	bl	8000638 <__aeabi_dmul>
 800b15e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b162:	f7f5 fcef 	bl	8000b44 <__aeabi_dcmpge>
 800b166:	9e01      	ldr	r6, [sp, #4]
 800b168:	4637      	mov	r7, r6
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f040 8243 	bne.w	800b5f6 <_dtoa_r+0x956>
 800b170:	9d00      	ldr	r5, [sp, #0]
 800b172:	2331      	movs	r3, #49	; 0x31
 800b174:	f805 3b01 	strb.w	r3, [r5], #1
 800b178:	f10a 0a01 	add.w	sl, sl, #1
 800b17c:	e23f      	b.n	800b5fe <_dtoa_r+0x95e>
 800b17e:	07f2      	lsls	r2, r6, #31
 800b180:	d505      	bpl.n	800b18e <_dtoa_r+0x4ee>
 800b182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b186:	f7f5 fa57 	bl	8000638 <__aeabi_dmul>
 800b18a:	3501      	adds	r5, #1
 800b18c:	2301      	movs	r3, #1
 800b18e:	1076      	asrs	r6, r6, #1
 800b190:	3708      	adds	r7, #8
 800b192:	e76c      	b.n	800b06e <_dtoa_r+0x3ce>
 800b194:	2502      	movs	r5, #2
 800b196:	e76f      	b.n	800b078 <_dtoa_r+0x3d8>
 800b198:	9b01      	ldr	r3, [sp, #4]
 800b19a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b19e:	930c      	str	r3, [sp, #48]	; 0x30
 800b1a0:	e78d      	b.n	800b0be <_dtoa_r+0x41e>
 800b1a2:	9900      	ldr	r1, [sp, #0]
 800b1a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a8:	4b4e      	ldr	r3, [pc, #312]	; (800b2e4 <_dtoa_r+0x644>)
 800b1aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1ae:	4401      	add	r1, r0
 800b1b0:	9102      	str	r1, [sp, #8]
 800b1b2:	9908      	ldr	r1, [sp, #32]
 800b1b4:	eeb0 8a47 	vmov.f32	s16, s14
 800b1b8:	eef0 8a67 	vmov.f32	s17, s15
 800b1bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1c4:	2900      	cmp	r1, #0
 800b1c6:	d045      	beq.n	800b254 <_dtoa_r+0x5b4>
 800b1c8:	494c      	ldr	r1, [pc, #304]	; (800b2fc <_dtoa_r+0x65c>)
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	f7f5 fb5e 	bl	800088c <__aeabi_ddiv>
 800b1d0:	ec53 2b18 	vmov	r2, r3, d8
 800b1d4:	f7f5 f878 	bl	80002c8 <__aeabi_dsub>
 800b1d8:	9d00      	ldr	r5, [sp, #0]
 800b1da:	ec41 0b18 	vmov	d8, r0, r1
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7f5 fcd9 	bl	8000b98 <__aeabi_d2iz>
 800b1e6:	900c      	str	r0, [sp, #48]	; 0x30
 800b1e8:	f7f5 f9bc 	bl	8000564 <__aeabi_i2d>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	f7f5 f868 	bl	80002c8 <__aeabi_dsub>
 800b1f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1fa:	3330      	adds	r3, #48	; 0x30
 800b1fc:	f805 3b01 	strb.w	r3, [r5], #1
 800b200:	ec53 2b18 	vmov	r2, r3, d8
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	f7f5 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d165      	bne.n	800b2dc <_dtoa_r+0x63c>
 800b210:	4632      	mov	r2, r6
 800b212:	463b      	mov	r3, r7
 800b214:	4935      	ldr	r1, [pc, #212]	; (800b2ec <_dtoa_r+0x64c>)
 800b216:	2000      	movs	r0, #0
 800b218:	f7f5 f856 	bl	80002c8 <__aeabi_dsub>
 800b21c:	ec53 2b18 	vmov	r2, r3, d8
 800b220:	f7f5 fc7c 	bl	8000b1c <__aeabi_dcmplt>
 800b224:	2800      	cmp	r0, #0
 800b226:	f040 80b9 	bne.w	800b39c <_dtoa_r+0x6fc>
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	429d      	cmp	r5, r3
 800b22e:	f43f af75 	beq.w	800b11c <_dtoa_r+0x47c>
 800b232:	4b2f      	ldr	r3, [pc, #188]	; (800b2f0 <_dtoa_r+0x650>)
 800b234:	ec51 0b18 	vmov	r0, r1, d8
 800b238:	2200      	movs	r2, #0
 800b23a:	f7f5 f9fd 	bl	8000638 <__aeabi_dmul>
 800b23e:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <_dtoa_r+0x650>)
 800b240:	ec41 0b18 	vmov	d8, r0, r1
 800b244:	2200      	movs	r2, #0
 800b246:	4630      	mov	r0, r6
 800b248:	4639      	mov	r1, r7
 800b24a:	f7f5 f9f5 	bl	8000638 <__aeabi_dmul>
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	e7c4      	b.n	800b1de <_dtoa_r+0x53e>
 800b254:	ec51 0b17 	vmov	r0, r1, d7
 800b258:	f7f5 f9ee 	bl	8000638 <__aeabi_dmul>
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	9d00      	ldr	r5, [sp, #0]
 800b260:	930c      	str	r3, [sp, #48]	; 0x30
 800b262:	ec41 0b18 	vmov	d8, r0, r1
 800b266:	4639      	mov	r1, r7
 800b268:	4630      	mov	r0, r6
 800b26a:	f7f5 fc95 	bl	8000b98 <__aeabi_d2iz>
 800b26e:	9011      	str	r0, [sp, #68]	; 0x44
 800b270:	f7f5 f978 	bl	8000564 <__aeabi_i2d>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4630      	mov	r0, r6
 800b27a:	4639      	mov	r1, r7
 800b27c:	f7f5 f824 	bl	80002c8 <__aeabi_dsub>
 800b280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b282:	3330      	adds	r3, #48	; 0x30
 800b284:	f805 3b01 	strb.w	r3, [r5], #1
 800b288:	9b02      	ldr	r3, [sp, #8]
 800b28a:	429d      	cmp	r5, r3
 800b28c:	4606      	mov	r6, r0
 800b28e:	460f      	mov	r7, r1
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	d134      	bne.n	800b300 <_dtoa_r+0x660>
 800b296:	4b19      	ldr	r3, [pc, #100]	; (800b2fc <_dtoa_r+0x65c>)
 800b298:	ec51 0b18 	vmov	r0, r1, d8
 800b29c:	f7f5 f816 	bl	80002cc <__adddf3>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f5 fc56 	bl	8000b58 <__aeabi_dcmpgt>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d175      	bne.n	800b39c <_dtoa_r+0x6fc>
 800b2b0:	ec53 2b18 	vmov	r2, r3, d8
 800b2b4:	4911      	ldr	r1, [pc, #68]	; (800b2fc <_dtoa_r+0x65c>)
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	f7f5 f806 	bl	80002c8 <__aeabi_dsub>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	f7f5 fc2a 	bl	8000b1c <__aeabi_dcmplt>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	f43f af27 	beq.w	800b11c <_dtoa_r+0x47c>
 800b2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2d0:	1e6b      	subs	r3, r5, #1
 800b2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2d8:	2b30      	cmp	r3, #48	; 0x30
 800b2da:	d0f8      	beq.n	800b2ce <_dtoa_r+0x62e>
 800b2dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b2e0:	e04a      	b.n	800b378 <_dtoa_r+0x6d8>
 800b2e2:	bf00      	nop
 800b2e4:	0800cd40 	.word	0x0800cd40
 800b2e8:	0800cd18 	.word	0x0800cd18
 800b2ec:	3ff00000 	.word	0x3ff00000
 800b2f0:	40240000 	.word	0x40240000
 800b2f4:	401c0000 	.word	0x401c0000
 800b2f8:	40140000 	.word	0x40140000
 800b2fc:	3fe00000 	.word	0x3fe00000
 800b300:	4baf      	ldr	r3, [pc, #700]	; (800b5c0 <_dtoa_r+0x920>)
 800b302:	f7f5 f999 	bl	8000638 <__aeabi_dmul>
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	e7ac      	b.n	800b266 <_dtoa_r+0x5c6>
 800b30c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b310:	9d00      	ldr	r5, [sp, #0]
 800b312:	4642      	mov	r2, r8
 800b314:	464b      	mov	r3, r9
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f5 fab7 	bl	800088c <__aeabi_ddiv>
 800b31e:	f7f5 fc3b 	bl	8000b98 <__aeabi_d2iz>
 800b322:	9002      	str	r0, [sp, #8]
 800b324:	f7f5 f91e 	bl	8000564 <__aeabi_i2d>
 800b328:	4642      	mov	r2, r8
 800b32a:	464b      	mov	r3, r9
 800b32c:	f7f5 f984 	bl	8000638 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4630      	mov	r0, r6
 800b336:	4639      	mov	r1, r7
 800b338:	f7f4 ffc6 	bl	80002c8 <__aeabi_dsub>
 800b33c:	9e02      	ldr	r6, [sp, #8]
 800b33e:	9f01      	ldr	r7, [sp, #4]
 800b340:	3630      	adds	r6, #48	; 0x30
 800b342:	f805 6b01 	strb.w	r6, [r5], #1
 800b346:	9e00      	ldr	r6, [sp, #0]
 800b348:	1bae      	subs	r6, r5, r6
 800b34a:	42b7      	cmp	r7, r6
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	d137      	bne.n	800b3c2 <_dtoa_r+0x722>
 800b352:	f7f4 ffbb 	bl	80002cc <__adddf3>
 800b356:	4642      	mov	r2, r8
 800b358:	464b      	mov	r3, r9
 800b35a:	4606      	mov	r6, r0
 800b35c:	460f      	mov	r7, r1
 800b35e:	f7f5 fbfb 	bl	8000b58 <__aeabi_dcmpgt>
 800b362:	b9c8      	cbnz	r0, 800b398 <_dtoa_r+0x6f8>
 800b364:	4642      	mov	r2, r8
 800b366:	464b      	mov	r3, r9
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f5 fbcc 	bl	8000b08 <__aeabi_dcmpeq>
 800b370:	b110      	cbz	r0, 800b378 <_dtoa_r+0x6d8>
 800b372:	9b02      	ldr	r3, [sp, #8]
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d40f      	bmi.n	800b398 <_dtoa_r+0x6f8>
 800b378:	4620      	mov	r0, r4
 800b37a:	4659      	mov	r1, fp
 800b37c:	f000 fce8 	bl	800bd50 <_Bfree>
 800b380:	2300      	movs	r3, #0
 800b382:	702b      	strb	r3, [r5, #0]
 800b384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b386:	f10a 0001 	add.w	r0, sl, #1
 800b38a:	6018      	str	r0, [r3, #0]
 800b38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f43f acd8 	beq.w	800ad44 <_dtoa_r+0xa4>
 800b394:	601d      	str	r5, [r3, #0]
 800b396:	e4d5      	b.n	800ad44 <_dtoa_r+0xa4>
 800b398:	f8cd a01c 	str.w	sl, [sp, #28]
 800b39c:	462b      	mov	r3, r5
 800b39e:	461d      	mov	r5, r3
 800b3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3a4:	2a39      	cmp	r2, #57	; 0x39
 800b3a6:	d108      	bne.n	800b3ba <_dtoa_r+0x71a>
 800b3a8:	9a00      	ldr	r2, [sp, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d1f7      	bne.n	800b39e <_dtoa_r+0x6fe>
 800b3ae:	9a07      	ldr	r2, [sp, #28]
 800b3b0:	9900      	ldr	r1, [sp, #0]
 800b3b2:	3201      	adds	r2, #1
 800b3b4:	9207      	str	r2, [sp, #28]
 800b3b6:	2230      	movs	r2, #48	; 0x30
 800b3b8:	700a      	strb	r2, [r1, #0]
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	3201      	adds	r2, #1
 800b3be:	701a      	strb	r2, [r3, #0]
 800b3c0:	e78c      	b.n	800b2dc <_dtoa_r+0x63c>
 800b3c2:	4b7f      	ldr	r3, [pc, #508]	; (800b5c0 <_dtoa_r+0x920>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f7f5 f937 	bl	8000638 <__aeabi_dmul>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	f7f5 fb99 	bl	8000b08 <__aeabi_dcmpeq>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d09b      	beq.n	800b312 <_dtoa_r+0x672>
 800b3da:	e7cd      	b.n	800b378 <_dtoa_r+0x6d8>
 800b3dc:	9a08      	ldr	r2, [sp, #32]
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	f000 80c4 	beq.w	800b56c <_dtoa_r+0x8cc>
 800b3e4:	9a05      	ldr	r2, [sp, #20]
 800b3e6:	2a01      	cmp	r2, #1
 800b3e8:	f300 80a8 	bgt.w	800b53c <_dtoa_r+0x89c>
 800b3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	f000 80a0 	beq.w	800b534 <_dtoa_r+0x894>
 800b3f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3f8:	9e06      	ldr	r6, [sp, #24]
 800b3fa:	4645      	mov	r5, r8
 800b3fc:	9a04      	ldr	r2, [sp, #16]
 800b3fe:	2101      	movs	r1, #1
 800b400:	441a      	add	r2, r3
 800b402:	4620      	mov	r0, r4
 800b404:	4498      	add	r8, r3
 800b406:	9204      	str	r2, [sp, #16]
 800b408:	f000 fd5e 	bl	800bec8 <__i2b>
 800b40c:	4607      	mov	r7, r0
 800b40e:	2d00      	cmp	r5, #0
 800b410:	dd0b      	ble.n	800b42a <_dtoa_r+0x78a>
 800b412:	9b04      	ldr	r3, [sp, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	dd08      	ble.n	800b42a <_dtoa_r+0x78a>
 800b418:	42ab      	cmp	r3, r5
 800b41a:	9a04      	ldr	r2, [sp, #16]
 800b41c:	bfa8      	it	ge
 800b41e:	462b      	movge	r3, r5
 800b420:	eba8 0803 	sub.w	r8, r8, r3
 800b424:	1aed      	subs	r5, r5, r3
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	9b06      	ldr	r3, [sp, #24]
 800b42c:	b1fb      	cbz	r3, 800b46e <_dtoa_r+0x7ce>
 800b42e:	9b08      	ldr	r3, [sp, #32]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 809f 	beq.w	800b574 <_dtoa_r+0x8d4>
 800b436:	2e00      	cmp	r6, #0
 800b438:	dd11      	ble.n	800b45e <_dtoa_r+0x7be>
 800b43a:	4639      	mov	r1, r7
 800b43c:	4632      	mov	r2, r6
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 fdfe 	bl	800c040 <__pow5mult>
 800b444:	465a      	mov	r2, fp
 800b446:	4601      	mov	r1, r0
 800b448:	4607      	mov	r7, r0
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 fd52 	bl	800bef4 <__multiply>
 800b450:	4659      	mov	r1, fp
 800b452:	9007      	str	r0, [sp, #28]
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fc7b 	bl	800bd50 <_Bfree>
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	469b      	mov	fp, r3
 800b45e:	9b06      	ldr	r3, [sp, #24]
 800b460:	1b9a      	subs	r2, r3, r6
 800b462:	d004      	beq.n	800b46e <_dtoa_r+0x7ce>
 800b464:	4659      	mov	r1, fp
 800b466:	4620      	mov	r0, r4
 800b468:	f000 fdea 	bl	800c040 <__pow5mult>
 800b46c:	4683      	mov	fp, r0
 800b46e:	2101      	movs	r1, #1
 800b470:	4620      	mov	r0, r4
 800b472:	f000 fd29 	bl	800bec8 <__i2b>
 800b476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b478:	2b00      	cmp	r3, #0
 800b47a:	4606      	mov	r6, r0
 800b47c:	dd7c      	ble.n	800b578 <_dtoa_r+0x8d8>
 800b47e:	461a      	mov	r2, r3
 800b480:	4601      	mov	r1, r0
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fddc 	bl	800c040 <__pow5mult>
 800b488:	9b05      	ldr	r3, [sp, #20]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	4606      	mov	r6, r0
 800b48e:	dd76      	ble.n	800b57e <_dtoa_r+0x8de>
 800b490:	2300      	movs	r3, #0
 800b492:	9306      	str	r3, [sp, #24]
 800b494:	6933      	ldr	r3, [r6, #16]
 800b496:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b49a:	6918      	ldr	r0, [r3, #16]
 800b49c:	f000 fcc4 	bl	800be28 <__hi0bits>
 800b4a0:	f1c0 0020 	rsb	r0, r0, #32
 800b4a4:	9b04      	ldr	r3, [sp, #16]
 800b4a6:	4418      	add	r0, r3
 800b4a8:	f010 001f 	ands.w	r0, r0, #31
 800b4ac:	f000 8086 	beq.w	800b5bc <_dtoa_r+0x91c>
 800b4b0:	f1c0 0320 	rsb	r3, r0, #32
 800b4b4:	2b04      	cmp	r3, #4
 800b4b6:	dd7f      	ble.n	800b5b8 <_dtoa_r+0x918>
 800b4b8:	f1c0 001c 	rsb	r0, r0, #28
 800b4bc:	9b04      	ldr	r3, [sp, #16]
 800b4be:	4403      	add	r3, r0
 800b4c0:	4480      	add	r8, r0
 800b4c2:	4405      	add	r5, r0
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ca:	dd05      	ble.n	800b4d8 <_dtoa_r+0x838>
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fe0f 	bl	800c0f4 <__lshift>
 800b4d6:	4683      	mov	fp, r0
 800b4d8:	9b04      	ldr	r3, [sp, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	dd05      	ble.n	800b4ea <_dtoa_r+0x84a>
 800b4de:	4631      	mov	r1, r6
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fe06 	bl	800c0f4 <__lshift>
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d069      	beq.n	800b5c4 <_dtoa_r+0x924>
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fe6a 	bl	800c1cc <__mcmp>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	da63      	bge.n	800b5c4 <_dtoa_r+0x924>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	4659      	mov	r1, fp
 800b500:	220a      	movs	r2, #10
 800b502:	4620      	mov	r0, r4
 800b504:	f000 fc46 	bl	800bd94 <__multadd>
 800b508:	9b08      	ldr	r3, [sp, #32]
 800b50a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b50e:	4683      	mov	fp, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 818f 	beq.w	800b834 <_dtoa_r+0xb94>
 800b516:	4639      	mov	r1, r7
 800b518:	2300      	movs	r3, #0
 800b51a:	220a      	movs	r2, #10
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 fc39 	bl	800bd94 <__multadd>
 800b522:	f1b9 0f00 	cmp.w	r9, #0
 800b526:	4607      	mov	r7, r0
 800b528:	f300 808e 	bgt.w	800b648 <_dtoa_r+0x9a8>
 800b52c:	9b05      	ldr	r3, [sp, #20]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	dc50      	bgt.n	800b5d4 <_dtoa_r+0x934>
 800b532:	e089      	b.n	800b648 <_dtoa_r+0x9a8>
 800b534:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b53a:	e75d      	b.n	800b3f8 <_dtoa_r+0x758>
 800b53c:	9b01      	ldr	r3, [sp, #4]
 800b53e:	1e5e      	subs	r6, r3, #1
 800b540:	9b06      	ldr	r3, [sp, #24]
 800b542:	42b3      	cmp	r3, r6
 800b544:	bfbf      	itttt	lt
 800b546:	9b06      	ldrlt	r3, [sp, #24]
 800b548:	9606      	strlt	r6, [sp, #24]
 800b54a:	1af2      	sublt	r2, r6, r3
 800b54c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b54e:	bfb6      	itet	lt
 800b550:	189b      	addlt	r3, r3, r2
 800b552:	1b9e      	subge	r6, r3, r6
 800b554:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	bfb8      	it	lt
 800b55a:	2600      	movlt	r6, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb5      	itete	lt
 800b560:	eba8 0503 	sublt.w	r5, r8, r3
 800b564:	9b01      	ldrge	r3, [sp, #4]
 800b566:	2300      	movlt	r3, #0
 800b568:	4645      	movge	r5, r8
 800b56a:	e747      	b.n	800b3fc <_dtoa_r+0x75c>
 800b56c:	9e06      	ldr	r6, [sp, #24]
 800b56e:	9f08      	ldr	r7, [sp, #32]
 800b570:	4645      	mov	r5, r8
 800b572:	e74c      	b.n	800b40e <_dtoa_r+0x76e>
 800b574:	9a06      	ldr	r2, [sp, #24]
 800b576:	e775      	b.n	800b464 <_dtoa_r+0x7c4>
 800b578:	9b05      	ldr	r3, [sp, #20]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	dc18      	bgt.n	800b5b0 <_dtoa_r+0x910>
 800b57e:	9b02      	ldr	r3, [sp, #8]
 800b580:	b9b3      	cbnz	r3, 800b5b0 <_dtoa_r+0x910>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b588:	b9a3      	cbnz	r3, 800b5b4 <_dtoa_r+0x914>
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b590:	0d1b      	lsrs	r3, r3, #20
 800b592:	051b      	lsls	r3, r3, #20
 800b594:	b12b      	cbz	r3, 800b5a2 <_dtoa_r+0x902>
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	3301      	adds	r3, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	f108 0801 	add.w	r8, r8, #1
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	9306      	str	r3, [sp, #24]
 800b5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f47f af74 	bne.w	800b494 <_dtoa_r+0x7f4>
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	e779      	b.n	800b4a4 <_dtoa_r+0x804>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e7f6      	b.n	800b5a2 <_dtoa_r+0x902>
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	e7f4      	b.n	800b5a2 <_dtoa_r+0x902>
 800b5b8:	d085      	beq.n	800b4c6 <_dtoa_r+0x826>
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	301c      	adds	r0, #28
 800b5be:	e77d      	b.n	800b4bc <_dtoa_r+0x81c>
 800b5c0:	40240000 	.word	0x40240000
 800b5c4:	9b01      	ldr	r3, [sp, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	dc38      	bgt.n	800b63c <_dtoa_r+0x99c>
 800b5ca:	9b05      	ldr	r3, [sp, #20]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	dd35      	ble.n	800b63c <_dtoa_r+0x99c>
 800b5d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b5d4:	f1b9 0f00 	cmp.w	r9, #0
 800b5d8:	d10d      	bne.n	800b5f6 <_dtoa_r+0x956>
 800b5da:	4631      	mov	r1, r6
 800b5dc:	464b      	mov	r3, r9
 800b5de:	2205      	movs	r2, #5
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fbd7 	bl	800bd94 <__multadd>
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	4658      	mov	r0, fp
 800b5ec:	f000 fdee 	bl	800c1cc <__mcmp>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f73f adbd 	bgt.w	800b170 <_dtoa_r+0x4d0>
 800b5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f8:	9d00      	ldr	r5, [sp, #0]
 800b5fa:	ea6f 0a03 	mvn.w	sl, r3
 800b5fe:	f04f 0800 	mov.w	r8, #0
 800b602:	4631      	mov	r1, r6
 800b604:	4620      	mov	r0, r4
 800b606:	f000 fba3 	bl	800bd50 <_Bfree>
 800b60a:	2f00      	cmp	r7, #0
 800b60c:	f43f aeb4 	beq.w	800b378 <_dtoa_r+0x6d8>
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	d005      	beq.n	800b622 <_dtoa_r+0x982>
 800b616:	45b8      	cmp	r8, r7
 800b618:	d003      	beq.n	800b622 <_dtoa_r+0x982>
 800b61a:	4641      	mov	r1, r8
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fb97 	bl	800bd50 <_Bfree>
 800b622:	4639      	mov	r1, r7
 800b624:	4620      	mov	r0, r4
 800b626:	f000 fb93 	bl	800bd50 <_Bfree>
 800b62a:	e6a5      	b.n	800b378 <_dtoa_r+0x6d8>
 800b62c:	2600      	movs	r6, #0
 800b62e:	4637      	mov	r7, r6
 800b630:	e7e1      	b.n	800b5f6 <_dtoa_r+0x956>
 800b632:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b638:	4637      	mov	r7, r6
 800b63a:	e599      	b.n	800b170 <_dtoa_r+0x4d0>
 800b63c:	9b08      	ldr	r3, [sp, #32]
 800b63e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 80fd 	beq.w	800b842 <_dtoa_r+0xba2>
 800b648:	2d00      	cmp	r5, #0
 800b64a:	dd05      	ble.n	800b658 <_dtoa_r+0x9b8>
 800b64c:	4639      	mov	r1, r7
 800b64e:	462a      	mov	r2, r5
 800b650:	4620      	mov	r0, r4
 800b652:	f000 fd4f 	bl	800c0f4 <__lshift>
 800b656:	4607      	mov	r7, r0
 800b658:	9b06      	ldr	r3, [sp, #24]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d05c      	beq.n	800b718 <_dtoa_r+0xa78>
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	4620      	mov	r0, r4
 800b662:	f000 fb35 	bl	800bcd0 <_Balloc>
 800b666:	4605      	mov	r5, r0
 800b668:	b928      	cbnz	r0, 800b676 <_dtoa_r+0x9d6>
 800b66a:	4b80      	ldr	r3, [pc, #512]	; (800b86c <_dtoa_r+0xbcc>)
 800b66c:	4602      	mov	r2, r0
 800b66e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b672:	f7ff bb2e 	b.w	800acd2 <_dtoa_r+0x32>
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	3202      	adds	r2, #2
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	f107 010c 	add.w	r1, r7, #12
 800b680:	300c      	adds	r0, #12
 800b682:	f7fe fbe3 	bl	8009e4c <memcpy>
 800b686:	2201      	movs	r2, #1
 800b688:	4629      	mov	r1, r5
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fd32 	bl	800c0f4 <__lshift>
 800b690:	9b00      	ldr	r3, [sp, #0]
 800b692:	3301      	adds	r3, #1
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	9b00      	ldr	r3, [sp, #0]
 800b698:	444b      	add	r3, r9
 800b69a:	9307      	str	r3, [sp, #28]
 800b69c:	9b02      	ldr	r3, [sp, #8]
 800b69e:	f003 0301 	and.w	r3, r3, #1
 800b6a2:	46b8      	mov	r8, r7
 800b6a4:	9306      	str	r3, [sp, #24]
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	9b01      	ldr	r3, [sp, #4]
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	4658      	mov	r0, fp
 800b6b0:	9302      	str	r3, [sp, #8]
 800b6b2:	f7ff fa67 	bl	800ab84 <quorem>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	3330      	adds	r3, #48	; 0x30
 800b6ba:	9004      	str	r0, [sp, #16]
 800b6bc:	4641      	mov	r1, r8
 800b6be:	4658      	mov	r0, fp
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	f000 fd83 	bl	800c1cc <__mcmp>
 800b6c6:	463a      	mov	r2, r7
 800b6c8:	4681      	mov	r9, r0
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 fd99 	bl	800c204 <__mdiff>
 800b6d2:	68c2      	ldr	r2, [r0, #12]
 800b6d4:	9b08      	ldr	r3, [sp, #32]
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	bb02      	cbnz	r2, 800b71c <_dtoa_r+0xa7c>
 800b6da:	4601      	mov	r1, r0
 800b6dc:	4658      	mov	r0, fp
 800b6de:	f000 fd75 	bl	800c1cc <__mcmp>
 800b6e2:	9b08      	ldr	r3, [sp, #32]
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b6ee:	f000 fb2f 	bl	800bd50 <_Bfree>
 800b6f2:	9b05      	ldr	r3, [sp, #20]
 800b6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6f6:	9d01      	ldr	r5, [sp, #4]
 800b6f8:	ea43 0102 	orr.w	r1, r3, r2
 800b6fc:	9b06      	ldr	r3, [sp, #24]
 800b6fe:	430b      	orrs	r3, r1
 800b700:	9b08      	ldr	r3, [sp, #32]
 800b702:	d10d      	bne.n	800b720 <_dtoa_r+0xa80>
 800b704:	2b39      	cmp	r3, #57	; 0x39
 800b706:	d029      	beq.n	800b75c <_dtoa_r+0xabc>
 800b708:	f1b9 0f00 	cmp.w	r9, #0
 800b70c:	dd01      	ble.n	800b712 <_dtoa_r+0xa72>
 800b70e:	9b04      	ldr	r3, [sp, #16]
 800b710:	3331      	adds	r3, #49	; 0x31
 800b712:	9a02      	ldr	r2, [sp, #8]
 800b714:	7013      	strb	r3, [r2, #0]
 800b716:	e774      	b.n	800b602 <_dtoa_r+0x962>
 800b718:	4638      	mov	r0, r7
 800b71a:	e7b9      	b.n	800b690 <_dtoa_r+0x9f0>
 800b71c:	2201      	movs	r2, #1
 800b71e:	e7e2      	b.n	800b6e6 <_dtoa_r+0xa46>
 800b720:	f1b9 0f00 	cmp.w	r9, #0
 800b724:	db06      	blt.n	800b734 <_dtoa_r+0xa94>
 800b726:	9905      	ldr	r1, [sp, #20]
 800b728:	ea41 0909 	orr.w	r9, r1, r9
 800b72c:	9906      	ldr	r1, [sp, #24]
 800b72e:	ea59 0101 	orrs.w	r1, r9, r1
 800b732:	d120      	bne.n	800b776 <_dtoa_r+0xad6>
 800b734:	2a00      	cmp	r2, #0
 800b736:	ddec      	ble.n	800b712 <_dtoa_r+0xa72>
 800b738:	4659      	mov	r1, fp
 800b73a:	2201      	movs	r2, #1
 800b73c:	4620      	mov	r0, r4
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	f000 fcd8 	bl	800c0f4 <__lshift>
 800b744:	4631      	mov	r1, r6
 800b746:	4683      	mov	fp, r0
 800b748:	f000 fd40 	bl	800c1cc <__mcmp>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	dc02      	bgt.n	800b758 <_dtoa_r+0xab8>
 800b752:	d1de      	bne.n	800b712 <_dtoa_r+0xa72>
 800b754:	07da      	lsls	r2, r3, #31
 800b756:	d5dc      	bpl.n	800b712 <_dtoa_r+0xa72>
 800b758:	2b39      	cmp	r3, #57	; 0x39
 800b75a:	d1d8      	bne.n	800b70e <_dtoa_r+0xa6e>
 800b75c:	9a02      	ldr	r2, [sp, #8]
 800b75e:	2339      	movs	r3, #57	; 0x39
 800b760:	7013      	strb	r3, [r2, #0]
 800b762:	462b      	mov	r3, r5
 800b764:	461d      	mov	r5, r3
 800b766:	3b01      	subs	r3, #1
 800b768:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b76c:	2a39      	cmp	r2, #57	; 0x39
 800b76e:	d050      	beq.n	800b812 <_dtoa_r+0xb72>
 800b770:	3201      	adds	r2, #1
 800b772:	701a      	strb	r2, [r3, #0]
 800b774:	e745      	b.n	800b602 <_dtoa_r+0x962>
 800b776:	2a00      	cmp	r2, #0
 800b778:	dd03      	ble.n	800b782 <_dtoa_r+0xae2>
 800b77a:	2b39      	cmp	r3, #57	; 0x39
 800b77c:	d0ee      	beq.n	800b75c <_dtoa_r+0xabc>
 800b77e:	3301      	adds	r3, #1
 800b780:	e7c7      	b.n	800b712 <_dtoa_r+0xa72>
 800b782:	9a01      	ldr	r2, [sp, #4]
 800b784:	9907      	ldr	r1, [sp, #28]
 800b786:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b78a:	428a      	cmp	r2, r1
 800b78c:	d02a      	beq.n	800b7e4 <_dtoa_r+0xb44>
 800b78e:	4659      	mov	r1, fp
 800b790:	2300      	movs	r3, #0
 800b792:	220a      	movs	r2, #10
 800b794:	4620      	mov	r0, r4
 800b796:	f000 fafd 	bl	800bd94 <__multadd>
 800b79a:	45b8      	cmp	r8, r7
 800b79c:	4683      	mov	fp, r0
 800b79e:	f04f 0300 	mov.w	r3, #0
 800b7a2:	f04f 020a 	mov.w	r2, #10
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	d107      	bne.n	800b7bc <_dtoa_r+0xb1c>
 800b7ac:	f000 faf2 	bl	800bd94 <__multadd>
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	e775      	b.n	800b6a8 <_dtoa_r+0xa08>
 800b7bc:	f000 faea 	bl	800bd94 <__multadd>
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	220a      	movs	r2, #10
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fae3 	bl	800bd94 <__multadd>
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	e7f0      	b.n	800b7b4 <_dtoa_r+0xb14>
 800b7d2:	f1b9 0f00 	cmp.w	r9, #0
 800b7d6:	9a00      	ldr	r2, [sp, #0]
 800b7d8:	bfcc      	ite	gt
 800b7da:	464d      	movgt	r5, r9
 800b7dc:	2501      	movle	r5, #1
 800b7de:	4415      	add	r5, r2
 800b7e0:	f04f 0800 	mov.w	r8, #0
 800b7e4:	4659      	mov	r1, fp
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	f000 fc82 	bl	800c0f4 <__lshift>
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4683      	mov	fp, r0
 800b7f4:	f000 fcea 	bl	800c1cc <__mcmp>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	dcb2      	bgt.n	800b762 <_dtoa_r+0xac2>
 800b7fc:	d102      	bne.n	800b804 <_dtoa_r+0xb64>
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	07db      	lsls	r3, r3, #31
 800b802:	d4ae      	bmi.n	800b762 <_dtoa_r+0xac2>
 800b804:	462b      	mov	r3, r5
 800b806:	461d      	mov	r5, r3
 800b808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b80c:	2a30      	cmp	r2, #48	; 0x30
 800b80e:	d0fa      	beq.n	800b806 <_dtoa_r+0xb66>
 800b810:	e6f7      	b.n	800b602 <_dtoa_r+0x962>
 800b812:	9a00      	ldr	r2, [sp, #0]
 800b814:	429a      	cmp	r2, r3
 800b816:	d1a5      	bne.n	800b764 <_dtoa_r+0xac4>
 800b818:	f10a 0a01 	add.w	sl, sl, #1
 800b81c:	2331      	movs	r3, #49	; 0x31
 800b81e:	e779      	b.n	800b714 <_dtoa_r+0xa74>
 800b820:	4b13      	ldr	r3, [pc, #76]	; (800b870 <_dtoa_r+0xbd0>)
 800b822:	f7ff baaf 	b.w	800ad84 <_dtoa_r+0xe4>
 800b826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f47f aa86 	bne.w	800ad3a <_dtoa_r+0x9a>
 800b82e:	4b11      	ldr	r3, [pc, #68]	; (800b874 <_dtoa_r+0xbd4>)
 800b830:	f7ff baa8 	b.w	800ad84 <_dtoa_r+0xe4>
 800b834:	f1b9 0f00 	cmp.w	r9, #0
 800b838:	dc03      	bgt.n	800b842 <_dtoa_r+0xba2>
 800b83a:	9b05      	ldr	r3, [sp, #20]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	f73f aec9 	bgt.w	800b5d4 <_dtoa_r+0x934>
 800b842:	9d00      	ldr	r5, [sp, #0]
 800b844:	4631      	mov	r1, r6
 800b846:	4658      	mov	r0, fp
 800b848:	f7ff f99c 	bl	800ab84 <quorem>
 800b84c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b850:	f805 3b01 	strb.w	r3, [r5], #1
 800b854:	9a00      	ldr	r2, [sp, #0]
 800b856:	1aaa      	subs	r2, r5, r2
 800b858:	4591      	cmp	r9, r2
 800b85a:	ddba      	ble.n	800b7d2 <_dtoa_r+0xb32>
 800b85c:	4659      	mov	r1, fp
 800b85e:	2300      	movs	r3, #0
 800b860:	220a      	movs	r2, #10
 800b862:	4620      	mov	r0, r4
 800b864:	f000 fa96 	bl	800bd94 <__multadd>
 800b868:	4683      	mov	fp, r0
 800b86a:	e7eb      	b.n	800b844 <_dtoa_r+0xba4>
 800b86c:	0800cc47 	.word	0x0800cc47
 800b870:	0800cba0 	.word	0x0800cba0
 800b874:	0800cbc4 	.word	0x0800cbc4

0800b878 <__sflush_r>:
 800b878:	898a      	ldrh	r2, [r1, #12]
 800b87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	4605      	mov	r5, r0
 800b880:	0710      	lsls	r0, r2, #28
 800b882:	460c      	mov	r4, r1
 800b884:	d458      	bmi.n	800b938 <__sflush_r+0xc0>
 800b886:	684b      	ldr	r3, [r1, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dc05      	bgt.n	800b898 <__sflush_r+0x20>
 800b88c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	dc02      	bgt.n	800b898 <__sflush_r+0x20>
 800b892:	2000      	movs	r0, #0
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b89a:	2e00      	cmp	r6, #0
 800b89c:	d0f9      	beq.n	800b892 <__sflush_r+0x1a>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8a4:	682f      	ldr	r7, [r5, #0]
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	d032      	beq.n	800b910 <__sflush_r+0x98>
 800b8aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	075a      	lsls	r2, r3, #29
 800b8b0:	d505      	bpl.n	800b8be <__sflush_r+0x46>
 800b8b2:	6863      	ldr	r3, [r4, #4]
 800b8b4:	1ac0      	subs	r0, r0, r3
 800b8b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b8:	b10b      	cbz	r3, 800b8be <__sflush_r+0x46>
 800b8ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8bc:	1ac0      	subs	r0, r0, r3
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8c4:	6a21      	ldr	r1, [r4, #32]
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	47b0      	blx	r6
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	d106      	bne.n	800b8de <__sflush_r+0x66>
 800b8d0:	6829      	ldr	r1, [r5, #0]
 800b8d2:	291d      	cmp	r1, #29
 800b8d4:	d82c      	bhi.n	800b930 <__sflush_r+0xb8>
 800b8d6:	4a2a      	ldr	r2, [pc, #168]	; (800b980 <__sflush_r+0x108>)
 800b8d8:	40ca      	lsrs	r2, r1
 800b8da:	07d6      	lsls	r6, r2, #31
 800b8dc:	d528      	bpl.n	800b930 <__sflush_r+0xb8>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	6062      	str	r2, [r4, #4]
 800b8e2:	04d9      	lsls	r1, r3, #19
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	6022      	str	r2, [r4, #0]
 800b8e8:	d504      	bpl.n	800b8f4 <__sflush_r+0x7c>
 800b8ea:	1c42      	adds	r2, r0, #1
 800b8ec:	d101      	bne.n	800b8f2 <__sflush_r+0x7a>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	b903      	cbnz	r3, 800b8f4 <__sflush_r+0x7c>
 800b8f2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f6:	602f      	str	r7, [r5, #0]
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	d0ca      	beq.n	800b892 <__sflush_r+0x1a>
 800b8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b900:	4299      	cmp	r1, r3
 800b902:	d002      	beq.n	800b90a <__sflush_r+0x92>
 800b904:	4628      	mov	r0, r5
 800b906:	f000 fd71 	bl	800c3ec <_free_r>
 800b90a:	2000      	movs	r0, #0
 800b90c:	6360      	str	r0, [r4, #52]	; 0x34
 800b90e:	e7c1      	b.n	800b894 <__sflush_r+0x1c>
 800b910:	6a21      	ldr	r1, [r4, #32]
 800b912:	2301      	movs	r3, #1
 800b914:	4628      	mov	r0, r5
 800b916:	47b0      	blx	r6
 800b918:	1c41      	adds	r1, r0, #1
 800b91a:	d1c7      	bne.n	800b8ac <__sflush_r+0x34>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0c4      	beq.n	800b8ac <__sflush_r+0x34>
 800b922:	2b1d      	cmp	r3, #29
 800b924:	d001      	beq.n	800b92a <__sflush_r+0xb2>
 800b926:	2b16      	cmp	r3, #22
 800b928:	d101      	bne.n	800b92e <__sflush_r+0xb6>
 800b92a:	602f      	str	r7, [r5, #0]
 800b92c:	e7b1      	b.n	800b892 <__sflush_r+0x1a>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	e7ad      	b.n	800b894 <__sflush_r+0x1c>
 800b938:	690f      	ldr	r7, [r1, #16]
 800b93a:	2f00      	cmp	r7, #0
 800b93c:	d0a9      	beq.n	800b892 <__sflush_r+0x1a>
 800b93e:	0793      	lsls	r3, r2, #30
 800b940:	680e      	ldr	r6, [r1, #0]
 800b942:	bf08      	it	eq
 800b944:	694b      	ldreq	r3, [r1, #20]
 800b946:	600f      	str	r7, [r1, #0]
 800b948:	bf18      	it	ne
 800b94a:	2300      	movne	r3, #0
 800b94c:	eba6 0807 	sub.w	r8, r6, r7
 800b950:	608b      	str	r3, [r1, #8]
 800b952:	f1b8 0f00 	cmp.w	r8, #0
 800b956:	dd9c      	ble.n	800b892 <__sflush_r+0x1a>
 800b958:	6a21      	ldr	r1, [r4, #32]
 800b95a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b95c:	4643      	mov	r3, r8
 800b95e:	463a      	mov	r2, r7
 800b960:	4628      	mov	r0, r5
 800b962:	47b0      	blx	r6
 800b964:	2800      	cmp	r0, #0
 800b966:	dc06      	bgt.n	800b976 <__sflush_r+0xfe>
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	e78e      	b.n	800b894 <__sflush_r+0x1c>
 800b976:	4407      	add	r7, r0
 800b978:	eba8 0800 	sub.w	r8, r8, r0
 800b97c:	e7e9      	b.n	800b952 <__sflush_r+0xda>
 800b97e:	bf00      	nop
 800b980:	20400001 	.word	0x20400001

0800b984 <_fflush_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	690b      	ldr	r3, [r1, #16]
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b913      	cbnz	r3, 800b994 <_fflush_r+0x10>
 800b98e:	2500      	movs	r5, #0
 800b990:	4628      	mov	r0, r5
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	b118      	cbz	r0, 800b99e <_fflush_r+0x1a>
 800b996:	6983      	ldr	r3, [r0, #24]
 800b998:	b90b      	cbnz	r3, 800b99e <_fflush_r+0x1a>
 800b99a:	f000 f887 	bl	800baac <__sinit>
 800b99e:	4b14      	ldr	r3, [pc, #80]	; (800b9f0 <_fflush_r+0x6c>)
 800b9a0:	429c      	cmp	r4, r3
 800b9a2:	d11b      	bne.n	800b9dc <_fflush_r+0x58>
 800b9a4:	686c      	ldr	r4, [r5, #4]
 800b9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0ef      	beq.n	800b98e <_fflush_r+0xa>
 800b9ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9b0:	07d0      	lsls	r0, r2, #31
 800b9b2:	d404      	bmi.n	800b9be <_fflush_r+0x3a>
 800b9b4:	0599      	lsls	r1, r3, #22
 800b9b6:	d402      	bmi.n	800b9be <_fflush_r+0x3a>
 800b9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ba:	f000 f91a 	bl	800bbf2 <__retarget_lock_acquire_recursive>
 800b9be:	4628      	mov	r0, r5
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	f7ff ff59 	bl	800b878 <__sflush_r>
 800b9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c8:	07da      	lsls	r2, r3, #31
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	d4e0      	bmi.n	800b990 <_fflush_r+0xc>
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	059b      	lsls	r3, r3, #22
 800b9d2:	d4dd      	bmi.n	800b990 <_fflush_r+0xc>
 800b9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d6:	f000 f90d 	bl	800bbf4 <__retarget_lock_release_recursive>
 800b9da:	e7d9      	b.n	800b990 <_fflush_r+0xc>
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <_fflush_r+0x70>)
 800b9de:	429c      	cmp	r4, r3
 800b9e0:	d101      	bne.n	800b9e6 <_fflush_r+0x62>
 800b9e2:	68ac      	ldr	r4, [r5, #8]
 800b9e4:	e7df      	b.n	800b9a6 <_fflush_r+0x22>
 800b9e6:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <_fflush_r+0x74>)
 800b9e8:	429c      	cmp	r4, r3
 800b9ea:	bf08      	it	eq
 800b9ec:	68ec      	ldreq	r4, [r5, #12]
 800b9ee:	e7da      	b.n	800b9a6 <_fflush_r+0x22>
 800b9f0:	0800cc78 	.word	0x0800cc78
 800b9f4:	0800cc98 	.word	0x0800cc98
 800b9f8:	0800cc58 	.word	0x0800cc58

0800b9fc <std>:
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	b510      	push	{r4, lr}
 800ba00:	4604      	mov	r4, r0
 800ba02:	e9c0 3300 	strd	r3, r3, [r0]
 800ba06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba0a:	6083      	str	r3, [r0, #8]
 800ba0c:	8181      	strh	r1, [r0, #12]
 800ba0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ba10:	81c2      	strh	r2, [r0, #14]
 800ba12:	6183      	str	r3, [r0, #24]
 800ba14:	4619      	mov	r1, r3
 800ba16:	2208      	movs	r2, #8
 800ba18:	305c      	adds	r0, #92	; 0x5c
 800ba1a:	f7fe fa25 	bl	8009e68 <memset>
 800ba1e:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <std+0x38>)
 800ba20:	6263      	str	r3, [r4, #36]	; 0x24
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <std+0x3c>)
 800ba24:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba26:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <std+0x40>)
 800ba28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <std+0x44>)
 800ba2c:	6224      	str	r4, [r4, #32]
 800ba2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	bf00      	nop
 800ba34:	0800c815 	.word	0x0800c815
 800ba38:	0800c837 	.word	0x0800c837
 800ba3c:	0800c86f 	.word	0x0800c86f
 800ba40:	0800c893 	.word	0x0800c893

0800ba44 <_cleanup_r>:
 800ba44:	4901      	ldr	r1, [pc, #4]	; (800ba4c <_cleanup_r+0x8>)
 800ba46:	f000 b8af 	b.w	800bba8 <_fwalk_reent>
 800ba4a:	bf00      	nop
 800ba4c:	0800b985 	.word	0x0800b985

0800ba50 <__sfmoreglue>:
 800ba50:	b570      	push	{r4, r5, r6, lr}
 800ba52:	1e4a      	subs	r2, r1, #1
 800ba54:	2568      	movs	r5, #104	; 0x68
 800ba56:	4355      	muls	r5, r2
 800ba58:	460e      	mov	r6, r1
 800ba5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba5e:	f000 fd15 	bl	800c48c <_malloc_r>
 800ba62:	4604      	mov	r4, r0
 800ba64:	b140      	cbz	r0, 800ba78 <__sfmoreglue+0x28>
 800ba66:	2100      	movs	r1, #0
 800ba68:	e9c0 1600 	strd	r1, r6, [r0]
 800ba6c:	300c      	adds	r0, #12
 800ba6e:	60a0      	str	r0, [r4, #8]
 800ba70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba74:	f7fe f9f8 	bl	8009e68 <memset>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}

0800ba7c <__sfp_lock_acquire>:
 800ba7c:	4801      	ldr	r0, [pc, #4]	; (800ba84 <__sfp_lock_acquire+0x8>)
 800ba7e:	f000 b8b8 	b.w	800bbf2 <__retarget_lock_acquire_recursive>
 800ba82:	bf00      	nop
 800ba84:	20000934 	.word	0x20000934

0800ba88 <__sfp_lock_release>:
 800ba88:	4801      	ldr	r0, [pc, #4]	; (800ba90 <__sfp_lock_release+0x8>)
 800ba8a:	f000 b8b3 	b.w	800bbf4 <__retarget_lock_release_recursive>
 800ba8e:	bf00      	nop
 800ba90:	20000934 	.word	0x20000934

0800ba94 <__sinit_lock_acquire>:
 800ba94:	4801      	ldr	r0, [pc, #4]	; (800ba9c <__sinit_lock_acquire+0x8>)
 800ba96:	f000 b8ac 	b.w	800bbf2 <__retarget_lock_acquire_recursive>
 800ba9a:	bf00      	nop
 800ba9c:	2000092f 	.word	0x2000092f

0800baa0 <__sinit_lock_release>:
 800baa0:	4801      	ldr	r0, [pc, #4]	; (800baa8 <__sinit_lock_release+0x8>)
 800baa2:	f000 b8a7 	b.w	800bbf4 <__retarget_lock_release_recursive>
 800baa6:	bf00      	nop
 800baa8:	2000092f 	.word	0x2000092f

0800baac <__sinit>:
 800baac:	b510      	push	{r4, lr}
 800baae:	4604      	mov	r4, r0
 800bab0:	f7ff fff0 	bl	800ba94 <__sinit_lock_acquire>
 800bab4:	69a3      	ldr	r3, [r4, #24]
 800bab6:	b11b      	cbz	r3, 800bac0 <__sinit+0x14>
 800bab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800babc:	f7ff bff0 	b.w	800baa0 <__sinit_lock_release>
 800bac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bac4:	6523      	str	r3, [r4, #80]	; 0x50
 800bac6:	4b13      	ldr	r3, [pc, #76]	; (800bb14 <__sinit+0x68>)
 800bac8:	4a13      	ldr	r2, [pc, #76]	; (800bb18 <__sinit+0x6c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bace:	42a3      	cmp	r3, r4
 800bad0:	bf04      	itt	eq
 800bad2:	2301      	moveq	r3, #1
 800bad4:	61a3      	streq	r3, [r4, #24]
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 f820 	bl	800bb1c <__sfp>
 800badc:	6060      	str	r0, [r4, #4]
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 f81c 	bl	800bb1c <__sfp>
 800bae4:	60a0      	str	r0, [r4, #8]
 800bae6:	4620      	mov	r0, r4
 800bae8:	f000 f818 	bl	800bb1c <__sfp>
 800baec:	2200      	movs	r2, #0
 800baee:	60e0      	str	r0, [r4, #12]
 800baf0:	2104      	movs	r1, #4
 800baf2:	6860      	ldr	r0, [r4, #4]
 800baf4:	f7ff ff82 	bl	800b9fc <std>
 800baf8:	68a0      	ldr	r0, [r4, #8]
 800bafa:	2201      	movs	r2, #1
 800bafc:	2109      	movs	r1, #9
 800bafe:	f7ff ff7d 	bl	800b9fc <std>
 800bb02:	68e0      	ldr	r0, [r4, #12]
 800bb04:	2202      	movs	r2, #2
 800bb06:	2112      	movs	r1, #18
 800bb08:	f7ff ff78 	bl	800b9fc <std>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	61a3      	str	r3, [r4, #24]
 800bb10:	e7d2      	b.n	800bab8 <__sinit+0xc>
 800bb12:	bf00      	nop
 800bb14:	0800cb8c 	.word	0x0800cb8c
 800bb18:	0800ba45 	.word	0x0800ba45

0800bb1c <__sfp>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	4607      	mov	r7, r0
 800bb20:	f7ff ffac 	bl	800ba7c <__sfp_lock_acquire>
 800bb24:	4b1e      	ldr	r3, [pc, #120]	; (800bba0 <__sfp+0x84>)
 800bb26:	681e      	ldr	r6, [r3, #0]
 800bb28:	69b3      	ldr	r3, [r6, #24]
 800bb2a:	b913      	cbnz	r3, 800bb32 <__sfp+0x16>
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7ff ffbd 	bl	800baac <__sinit>
 800bb32:	3648      	adds	r6, #72	; 0x48
 800bb34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	d503      	bpl.n	800bb44 <__sfp+0x28>
 800bb3c:	6833      	ldr	r3, [r6, #0]
 800bb3e:	b30b      	cbz	r3, 800bb84 <__sfp+0x68>
 800bb40:	6836      	ldr	r6, [r6, #0]
 800bb42:	e7f7      	b.n	800bb34 <__sfp+0x18>
 800bb44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb48:	b9d5      	cbnz	r5, 800bb80 <__sfp+0x64>
 800bb4a:	4b16      	ldr	r3, [pc, #88]	; (800bba4 <__sfp+0x88>)
 800bb4c:	60e3      	str	r3, [r4, #12]
 800bb4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb52:	6665      	str	r5, [r4, #100]	; 0x64
 800bb54:	f000 f84c 	bl	800bbf0 <__retarget_lock_init_recursive>
 800bb58:	f7ff ff96 	bl	800ba88 <__sfp_lock_release>
 800bb5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb64:	6025      	str	r5, [r4, #0]
 800bb66:	61a5      	str	r5, [r4, #24]
 800bb68:	2208      	movs	r2, #8
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb70:	f7fe f97a 	bl	8009e68 <memset>
 800bb74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb80:	3468      	adds	r4, #104	; 0x68
 800bb82:	e7d9      	b.n	800bb38 <__sfp+0x1c>
 800bb84:	2104      	movs	r1, #4
 800bb86:	4638      	mov	r0, r7
 800bb88:	f7ff ff62 	bl	800ba50 <__sfmoreglue>
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	6030      	str	r0, [r6, #0]
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d1d5      	bne.n	800bb40 <__sfp+0x24>
 800bb94:	f7ff ff78 	bl	800ba88 <__sfp_lock_release>
 800bb98:	230c      	movs	r3, #12
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	e7ee      	b.n	800bb7c <__sfp+0x60>
 800bb9e:	bf00      	nop
 800bba0:	0800cb8c 	.word	0x0800cb8c
 800bba4:	ffff0001 	.word	0xffff0001

0800bba8 <_fwalk_reent>:
 800bba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbac:	4606      	mov	r6, r0
 800bbae:	4688      	mov	r8, r1
 800bbb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbb4:	2700      	movs	r7, #0
 800bbb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbba:	f1b9 0901 	subs.w	r9, r9, #1
 800bbbe:	d505      	bpl.n	800bbcc <_fwalk_reent+0x24>
 800bbc0:	6824      	ldr	r4, [r4, #0]
 800bbc2:	2c00      	cmp	r4, #0
 800bbc4:	d1f7      	bne.n	800bbb6 <_fwalk_reent+0xe>
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbcc:	89ab      	ldrh	r3, [r5, #12]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d907      	bls.n	800bbe2 <_fwalk_reent+0x3a>
 800bbd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	d003      	beq.n	800bbe2 <_fwalk_reent+0x3a>
 800bbda:	4629      	mov	r1, r5
 800bbdc:	4630      	mov	r0, r6
 800bbde:	47c0      	blx	r8
 800bbe0:	4307      	orrs	r7, r0
 800bbe2:	3568      	adds	r5, #104	; 0x68
 800bbe4:	e7e9      	b.n	800bbba <_fwalk_reent+0x12>
	...

0800bbe8 <_localeconv_r>:
 800bbe8:	4800      	ldr	r0, [pc, #0]	; (800bbec <_localeconv_r+0x4>)
 800bbea:	4770      	bx	lr
 800bbec:	2000041c 	.word	0x2000041c

0800bbf0 <__retarget_lock_init_recursive>:
 800bbf0:	4770      	bx	lr

0800bbf2 <__retarget_lock_acquire_recursive>:
 800bbf2:	4770      	bx	lr

0800bbf4 <__retarget_lock_release_recursive>:
 800bbf4:	4770      	bx	lr

0800bbf6 <__swhatbuf_r>:
 800bbf6:	b570      	push	{r4, r5, r6, lr}
 800bbf8:	460e      	mov	r6, r1
 800bbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbfe:	2900      	cmp	r1, #0
 800bc00:	b096      	sub	sp, #88	; 0x58
 800bc02:	4614      	mov	r4, r2
 800bc04:	461d      	mov	r5, r3
 800bc06:	da07      	bge.n	800bc18 <__swhatbuf_r+0x22>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	89b3      	ldrh	r3, [r6, #12]
 800bc0e:	061a      	lsls	r2, r3, #24
 800bc10:	d410      	bmi.n	800bc34 <__swhatbuf_r+0x3e>
 800bc12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc16:	e00e      	b.n	800bc36 <__swhatbuf_r+0x40>
 800bc18:	466a      	mov	r2, sp
 800bc1a:	f000 fe91 	bl	800c940 <_fstat_r>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	dbf2      	blt.n	800bc08 <__swhatbuf_r+0x12>
 800bc22:	9a01      	ldr	r2, [sp, #4]
 800bc24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc2c:	425a      	negs	r2, r3
 800bc2e:	415a      	adcs	r2, r3
 800bc30:	602a      	str	r2, [r5, #0]
 800bc32:	e7ee      	b.n	800bc12 <__swhatbuf_r+0x1c>
 800bc34:	2340      	movs	r3, #64	; 0x40
 800bc36:	2000      	movs	r0, #0
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	b016      	add	sp, #88	; 0x58
 800bc3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc40 <__smakebuf_r>:
 800bc40:	898b      	ldrh	r3, [r1, #12]
 800bc42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc44:	079d      	lsls	r5, r3, #30
 800bc46:	4606      	mov	r6, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	d507      	bpl.n	800bc5c <__smakebuf_r+0x1c>
 800bc4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	6123      	str	r3, [r4, #16]
 800bc54:	2301      	movs	r3, #1
 800bc56:	6163      	str	r3, [r4, #20]
 800bc58:	b002      	add	sp, #8
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	ab01      	add	r3, sp, #4
 800bc5e:	466a      	mov	r2, sp
 800bc60:	f7ff ffc9 	bl	800bbf6 <__swhatbuf_r>
 800bc64:	9900      	ldr	r1, [sp, #0]
 800bc66:	4605      	mov	r5, r0
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f000 fc0f 	bl	800c48c <_malloc_r>
 800bc6e:	b948      	cbnz	r0, 800bc84 <__smakebuf_r+0x44>
 800bc70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc74:	059a      	lsls	r2, r3, #22
 800bc76:	d4ef      	bmi.n	800bc58 <__smakebuf_r+0x18>
 800bc78:	f023 0303 	bic.w	r3, r3, #3
 800bc7c:	f043 0302 	orr.w	r3, r3, #2
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	e7e3      	b.n	800bc4c <__smakebuf_r+0xc>
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <__smakebuf_r+0x7c>)
 800bc86:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	6020      	str	r0, [r4, #0]
 800bc8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	9b00      	ldr	r3, [sp, #0]
 800bc94:	6163      	str	r3, [r4, #20]
 800bc96:	9b01      	ldr	r3, [sp, #4]
 800bc98:	6120      	str	r0, [r4, #16]
 800bc9a:	b15b      	cbz	r3, 800bcb4 <__smakebuf_r+0x74>
 800bc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bca0:	4630      	mov	r0, r6
 800bca2:	f000 fe5f 	bl	800c964 <_isatty_r>
 800bca6:	b128      	cbz	r0, 800bcb4 <__smakebuf_r+0x74>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	f023 0303 	bic.w	r3, r3, #3
 800bcae:	f043 0301 	orr.w	r3, r3, #1
 800bcb2:	81a3      	strh	r3, [r4, #12]
 800bcb4:	89a0      	ldrh	r0, [r4, #12]
 800bcb6:	4305      	orrs	r5, r0
 800bcb8:	81a5      	strh	r5, [r4, #12]
 800bcba:	e7cd      	b.n	800bc58 <__smakebuf_r+0x18>
 800bcbc:	0800ba45 	.word	0x0800ba45

0800bcc0 <malloc>:
 800bcc0:	4b02      	ldr	r3, [pc, #8]	; (800bccc <malloc+0xc>)
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	6818      	ldr	r0, [r3, #0]
 800bcc6:	f000 bbe1 	b.w	800c48c <_malloc_r>
 800bcca:	bf00      	nop
 800bccc:	200002c8 	.word	0x200002c8

0800bcd0 <_Balloc>:
 800bcd0:	b570      	push	{r4, r5, r6, lr}
 800bcd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	b976      	cbnz	r6, 800bcf8 <_Balloc+0x28>
 800bcda:	2010      	movs	r0, #16
 800bcdc:	f7ff fff0 	bl	800bcc0 <malloc>
 800bce0:	4602      	mov	r2, r0
 800bce2:	6260      	str	r0, [r4, #36]	; 0x24
 800bce4:	b920      	cbnz	r0, 800bcf0 <_Balloc+0x20>
 800bce6:	4b18      	ldr	r3, [pc, #96]	; (800bd48 <_Balloc+0x78>)
 800bce8:	4818      	ldr	r0, [pc, #96]	; (800bd4c <_Balloc+0x7c>)
 800bcea:	2166      	movs	r1, #102	; 0x66
 800bcec:	f000 fde8 	bl	800c8c0 <__assert_func>
 800bcf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf4:	6006      	str	r6, [r0, #0]
 800bcf6:	60c6      	str	r6, [r0, #12]
 800bcf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcfa:	68f3      	ldr	r3, [r6, #12]
 800bcfc:	b183      	cbz	r3, 800bd20 <_Balloc+0x50>
 800bcfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd06:	b9b8      	cbnz	r0, 800bd38 <_Balloc+0x68>
 800bd08:	2101      	movs	r1, #1
 800bd0a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd0e:	1d72      	adds	r2, r6, #5
 800bd10:	0092      	lsls	r2, r2, #2
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 fb5a 	bl	800c3cc <_calloc_r>
 800bd18:	b160      	cbz	r0, 800bd34 <_Balloc+0x64>
 800bd1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd1e:	e00e      	b.n	800bd3e <_Balloc+0x6e>
 800bd20:	2221      	movs	r2, #33	; 0x21
 800bd22:	2104      	movs	r1, #4
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 fb51 	bl	800c3cc <_calloc_r>
 800bd2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd2c:	60f0      	str	r0, [r6, #12]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e4      	bne.n	800bcfe <_Balloc+0x2e>
 800bd34:	2000      	movs	r0, #0
 800bd36:	bd70      	pop	{r4, r5, r6, pc}
 800bd38:	6802      	ldr	r2, [r0, #0]
 800bd3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd44:	e7f7      	b.n	800bd36 <_Balloc+0x66>
 800bd46:	bf00      	nop
 800bd48:	0800cbd1 	.word	0x0800cbd1
 800bd4c:	0800ccb8 	.word	0x0800ccb8

0800bd50 <_Bfree>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd54:	4605      	mov	r5, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	b976      	cbnz	r6, 800bd78 <_Bfree+0x28>
 800bd5a:	2010      	movs	r0, #16
 800bd5c:	f7ff ffb0 	bl	800bcc0 <malloc>
 800bd60:	4602      	mov	r2, r0
 800bd62:	6268      	str	r0, [r5, #36]	; 0x24
 800bd64:	b920      	cbnz	r0, 800bd70 <_Bfree+0x20>
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <_Bfree+0x3c>)
 800bd68:	4809      	ldr	r0, [pc, #36]	; (800bd90 <_Bfree+0x40>)
 800bd6a:	218a      	movs	r1, #138	; 0x8a
 800bd6c:	f000 fda8 	bl	800c8c0 <__assert_func>
 800bd70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd74:	6006      	str	r6, [r0, #0]
 800bd76:	60c6      	str	r6, [r0, #12]
 800bd78:	b13c      	cbz	r4, 800bd8a <_Bfree+0x3a>
 800bd7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd7c:	6862      	ldr	r2, [r4, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd84:	6021      	str	r1, [r4, #0]
 800bd86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	0800cbd1 	.word	0x0800cbd1
 800bd90:	0800ccb8 	.word	0x0800ccb8

0800bd94 <__multadd>:
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd98:	690e      	ldr	r6, [r1, #16]
 800bd9a:	4607      	mov	r7, r0
 800bd9c:	4698      	mov	r8, r3
 800bd9e:	460c      	mov	r4, r1
 800bda0:	f101 0014 	add.w	r0, r1, #20
 800bda4:	2300      	movs	r3, #0
 800bda6:	6805      	ldr	r5, [r0, #0]
 800bda8:	b2a9      	uxth	r1, r5
 800bdaa:	fb02 8101 	mla	r1, r2, r1, r8
 800bdae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bdb2:	0c2d      	lsrs	r5, r5, #16
 800bdb4:	fb02 c505 	mla	r5, r2, r5, ip
 800bdb8:	b289      	uxth	r1, r1
 800bdba:	3301      	adds	r3, #1
 800bdbc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bdc0:	429e      	cmp	r6, r3
 800bdc2:	f840 1b04 	str.w	r1, [r0], #4
 800bdc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bdca:	dcec      	bgt.n	800bda6 <__multadd+0x12>
 800bdcc:	f1b8 0f00 	cmp.w	r8, #0
 800bdd0:	d022      	beq.n	800be18 <__multadd+0x84>
 800bdd2:	68a3      	ldr	r3, [r4, #8]
 800bdd4:	42b3      	cmp	r3, r6
 800bdd6:	dc19      	bgt.n	800be0c <__multadd+0x78>
 800bdd8:	6861      	ldr	r1, [r4, #4]
 800bdda:	4638      	mov	r0, r7
 800bddc:	3101      	adds	r1, #1
 800bdde:	f7ff ff77 	bl	800bcd0 <_Balloc>
 800bde2:	4605      	mov	r5, r0
 800bde4:	b928      	cbnz	r0, 800bdf2 <__multadd+0x5e>
 800bde6:	4602      	mov	r2, r0
 800bde8:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <__multadd+0x8c>)
 800bdea:	480e      	ldr	r0, [pc, #56]	; (800be24 <__multadd+0x90>)
 800bdec:	21b5      	movs	r1, #181	; 0xb5
 800bdee:	f000 fd67 	bl	800c8c0 <__assert_func>
 800bdf2:	6922      	ldr	r2, [r4, #16]
 800bdf4:	3202      	adds	r2, #2
 800bdf6:	f104 010c 	add.w	r1, r4, #12
 800bdfa:	0092      	lsls	r2, r2, #2
 800bdfc:	300c      	adds	r0, #12
 800bdfe:	f7fe f825 	bl	8009e4c <memcpy>
 800be02:	4621      	mov	r1, r4
 800be04:	4638      	mov	r0, r7
 800be06:	f7ff ffa3 	bl	800bd50 <_Bfree>
 800be0a:	462c      	mov	r4, r5
 800be0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800be10:	3601      	adds	r6, #1
 800be12:	f8c3 8014 	str.w	r8, [r3, #20]
 800be16:	6126      	str	r6, [r4, #16]
 800be18:	4620      	mov	r0, r4
 800be1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1e:	bf00      	nop
 800be20:	0800cc47 	.word	0x0800cc47
 800be24:	0800ccb8 	.word	0x0800ccb8

0800be28 <__hi0bits>:
 800be28:	0c03      	lsrs	r3, r0, #16
 800be2a:	041b      	lsls	r3, r3, #16
 800be2c:	b9d3      	cbnz	r3, 800be64 <__hi0bits+0x3c>
 800be2e:	0400      	lsls	r0, r0, #16
 800be30:	2310      	movs	r3, #16
 800be32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be36:	bf04      	itt	eq
 800be38:	0200      	lsleq	r0, r0, #8
 800be3a:	3308      	addeq	r3, #8
 800be3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be40:	bf04      	itt	eq
 800be42:	0100      	lsleq	r0, r0, #4
 800be44:	3304      	addeq	r3, #4
 800be46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be4a:	bf04      	itt	eq
 800be4c:	0080      	lsleq	r0, r0, #2
 800be4e:	3302      	addeq	r3, #2
 800be50:	2800      	cmp	r0, #0
 800be52:	db05      	blt.n	800be60 <__hi0bits+0x38>
 800be54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be58:	f103 0301 	add.w	r3, r3, #1
 800be5c:	bf08      	it	eq
 800be5e:	2320      	moveq	r3, #32
 800be60:	4618      	mov	r0, r3
 800be62:	4770      	bx	lr
 800be64:	2300      	movs	r3, #0
 800be66:	e7e4      	b.n	800be32 <__hi0bits+0xa>

0800be68 <__lo0bits>:
 800be68:	6803      	ldr	r3, [r0, #0]
 800be6a:	f013 0207 	ands.w	r2, r3, #7
 800be6e:	4601      	mov	r1, r0
 800be70:	d00b      	beq.n	800be8a <__lo0bits+0x22>
 800be72:	07da      	lsls	r2, r3, #31
 800be74:	d424      	bmi.n	800bec0 <__lo0bits+0x58>
 800be76:	0798      	lsls	r0, r3, #30
 800be78:	bf49      	itett	mi
 800be7a:	085b      	lsrmi	r3, r3, #1
 800be7c:	089b      	lsrpl	r3, r3, #2
 800be7e:	2001      	movmi	r0, #1
 800be80:	600b      	strmi	r3, [r1, #0]
 800be82:	bf5c      	itt	pl
 800be84:	600b      	strpl	r3, [r1, #0]
 800be86:	2002      	movpl	r0, #2
 800be88:	4770      	bx	lr
 800be8a:	b298      	uxth	r0, r3
 800be8c:	b9b0      	cbnz	r0, 800bebc <__lo0bits+0x54>
 800be8e:	0c1b      	lsrs	r3, r3, #16
 800be90:	2010      	movs	r0, #16
 800be92:	f013 0fff 	tst.w	r3, #255	; 0xff
 800be96:	bf04      	itt	eq
 800be98:	0a1b      	lsreq	r3, r3, #8
 800be9a:	3008      	addeq	r0, #8
 800be9c:	071a      	lsls	r2, r3, #28
 800be9e:	bf04      	itt	eq
 800bea0:	091b      	lsreq	r3, r3, #4
 800bea2:	3004      	addeq	r0, #4
 800bea4:	079a      	lsls	r2, r3, #30
 800bea6:	bf04      	itt	eq
 800bea8:	089b      	lsreq	r3, r3, #2
 800beaa:	3002      	addeq	r0, #2
 800beac:	07da      	lsls	r2, r3, #31
 800beae:	d403      	bmi.n	800beb8 <__lo0bits+0x50>
 800beb0:	085b      	lsrs	r3, r3, #1
 800beb2:	f100 0001 	add.w	r0, r0, #1
 800beb6:	d005      	beq.n	800bec4 <__lo0bits+0x5c>
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	4770      	bx	lr
 800bebc:	4610      	mov	r0, r2
 800bebe:	e7e8      	b.n	800be92 <__lo0bits+0x2a>
 800bec0:	2000      	movs	r0, #0
 800bec2:	4770      	bx	lr
 800bec4:	2020      	movs	r0, #32
 800bec6:	4770      	bx	lr

0800bec8 <__i2b>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	2101      	movs	r1, #1
 800bece:	f7ff feff 	bl	800bcd0 <_Balloc>
 800bed2:	4602      	mov	r2, r0
 800bed4:	b928      	cbnz	r0, 800bee2 <__i2b+0x1a>
 800bed6:	4b05      	ldr	r3, [pc, #20]	; (800beec <__i2b+0x24>)
 800bed8:	4805      	ldr	r0, [pc, #20]	; (800bef0 <__i2b+0x28>)
 800beda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bede:	f000 fcef 	bl	800c8c0 <__assert_func>
 800bee2:	2301      	movs	r3, #1
 800bee4:	6144      	str	r4, [r0, #20]
 800bee6:	6103      	str	r3, [r0, #16]
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	bf00      	nop
 800beec:	0800cc47 	.word	0x0800cc47
 800bef0:	0800ccb8 	.word	0x0800ccb8

0800bef4 <__multiply>:
 800bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef8:	4614      	mov	r4, r2
 800befa:	690a      	ldr	r2, [r1, #16]
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	429a      	cmp	r2, r3
 800bf00:	bfb8      	it	lt
 800bf02:	460b      	movlt	r3, r1
 800bf04:	460d      	mov	r5, r1
 800bf06:	bfbc      	itt	lt
 800bf08:	4625      	movlt	r5, r4
 800bf0a:	461c      	movlt	r4, r3
 800bf0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bf10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bf14:	68ab      	ldr	r3, [r5, #8]
 800bf16:	6869      	ldr	r1, [r5, #4]
 800bf18:	eb0a 0709 	add.w	r7, sl, r9
 800bf1c:	42bb      	cmp	r3, r7
 800bf1e:	b085      	sub	sp, #20
 800bf20:	bfb8      	it	lt
 800bf22:	3101      	addlt	r1, #1
 800bf24:	f7ff fed4 	bl	800bcd0 <_Balloc>
 800bf28:	b930      	cbnz	r0, 800bf38 <__multiply+0x44>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	4b42      	ldr	r3, [pc, #264]	; (800c038 <__multiply+0x144>)
 800bf2e:	4843      	ldr	r0, [pc, #268]	; (800c03c <__multiply+0x148>)
 800bf30:	f240 115d 	movw	r1, #349	; 0x15d
 800bf34:	f000 fcc4 	bl	800c8c0 <__assert_func>
 800bf38:	f100 0614 	add.w	r6, r0, #20
 800bf3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bf40:	4633      	mov	r3, r6
 800bf42:	2200      	movs	r2, #0
 800bf44:	4543      	cmp	r3, r8
 800bf46:	d31e      	bcc.n	800bf86 <__multiply+0x92>
 800bf48:	f105 0c14 	add.w	ip, r5, #20
 800bf4c:	f104 0314 	add.w	r3, r4, #20
 800bf50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bf54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bf58:	9202      	str	r2, [sp, #8]
 800bf5a:	ebac 0205 	sub.w	r2, ip, r5
 800bf5e:	3a15      	subs	r2, #21
 800bf60:	f022 0203 	bic.w	r2, r2, #3
 800bf64:	3204      	adds	r2, #4
 800bf66:	f105 0115 	add.w	r1, r5, #21
 800bf6a:	458c      	cmp	ip, r1
 800bf6c:	bf38      	it	cc
 800bf6e:	2204      	movcc	r2, #4
 800bf70:	9201      	str	r2, [sp, #4]
 800bf72:	9a02      	ldr	r2, [sp, #8]
 800bf74:	9303      	str	r3, [sp, #12]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d808      	bhi.n	800bf8c <__multiply+0x98>
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	dc55      	bgt.n	800c02a <__multiply+0x136>
 800bf7e:	6107      	str	r7, [r0, #16]
 800bf80:	b005      	add	sp, #20
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	f843 2b04 	str.w	r2, [r3], #4
 800bf8a:	e7db      	b.n	800bf44 <__multiply+0x50>
 800bf8c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf90:	f1ba 0f00 	cmp.w	sl, #0
 800bf94:	d020      	beq.n	800bfd8 <__multiply+0xe4>
 800bf96:	f105 0e14 	add.w	lr, r5, #20
 800bf9a:	46b1      	mov	r9, r6
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bfa2:	f8d9 b000 	ldr.w	fp, [r9]
 800bfa6:	b2a1      	uxth	r1, r4
 800bfa8:	fa1f fb8b 	uxth.w	fp, fp
 800bfac:	fb0a b101 	mla	r1, sl, r1, fp
 800bfb0:	4411      	add	r1, r2
 800bfb2:	f8d9 2000 	ldr.w	r2, [r9]
 800bfb6:	0c24      	lsrs	r4, r4, #16
 800bfb8:	0c12      	lsrs	r2, r2, #16
 800bfba:	fb0a 2404 	mla	r4, sl, r4, r2
 800bfbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bfc2:	b289      	uxth	r1, r1
 800bfc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bfc8:	45f4      	cmp	ip, lr
 800bfca:	f849 1b04 	str.w	r1, [r9], #4
 800bfce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bfd2:	d8e4      	bhi.n	800bf9e <__multiply+0xaa>
 800bfd4:	9901      	ldr	r1, [sp, #4]
 800bfd6:	5072      	str	r2, [r6, r1]
 800bfd8:	9a03      	ldr	r2, [sp, #12]
 800bfda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	f1b9 0f00 	cmp.w	r9, #0
 800bfe4:	d01f      	beq.n	800c026 <__multiply+0x132>
 800bfe6:	6834      	ldr	r4, [r6, #0]
 800bfe8:	f105 0114 	add.w	r1, r5, #20
 800bfec:	46b6      	mov	lr, r6
 800bfee:	f04f 0a00 	mov.w	sl, #0
 800bff2:	880a      	ldrh	r2, [r1, #0]
 800bff4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bff8:	fb09 b202 	mla	r2, r9, r2, fp
 800bffc:	4492      	add	sl, r2
 800bffe:	b2a4      	uxth	r4, r4
 800c000:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c004:	f84e 4b04 	str.w	r4, [lr], #4
 800c008:	f851 4b04 	ldr.w	r4, [r1], #4
 800c00c:	f8be 2000 	ldrh.w	r2, [lr]
 800c010:	0c24      	lsrs	r4, r4, #16
 800c012:	fb09 2404 	mla	r4, r9, r4, r2
 800c016:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c01a:	458c      	cmp	ip, r1
 800c01c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c020:	d8e7      	bhi.n	800bff2 <__multiply+0xfe>
 800c022:	9a01      	ldr	r2, [sp, #4]
 800c024:	50b4      	str	r4, [r6, r2]
 800c026:	3604      	adds	r6, #4
 800c028:	e7a3      	b.n	800bf72 <__multiply+0x7e>
 800c02a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1a5      	bne.n	800bf7e <__multiply+0x8a>
 800c032:	3f01      	subs	r7, #1
 800c034:	e7a1      	b.n	800bf7a <__multiply+0x86>
 800c036:	bf00      	nop
 800c038:	0800cc47 	.word	0x0800cc47
 800c03c:	0800ccb8 	.word	0x0800ccb8

0800c040 <__pow5mult>:
 800c040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c044:	4615      	mov	r5, r2
 800c046:	f012 0203 	ands.w	r2, r2, #3
 800c04a:	4606      	mov	r6, r0
 800c04c:	460f      	mov	r7, r1
 800c04e:	d007      	beq.n	800c060 <__pow5mult+0x20>
 800c050:	4c25      	ldr	r4, [pc, #148]	; (800c0e8 <__pow5mult+0xa8>)
 800c052:	3a01      	subs	r2, #1
 800c054:	2300      	movs	r3, #0
 800c056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c05a:	f7ff fe9b 	bl	800bd94 <__multadd>
 800c05e:	4607      	mov	r7, r0
 800c060:	10ad      	asrs	r5, r5, #2
 800c062:	d03d      	beq.n	800c0e0 <__pow5mult+0xa0>
 800c064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c066:	b97c      	cbnz	r4, 800c088 <__pow5mult+0x48>
 800c068:	2010      	movs	r0, #16
 800c06a:	f7ff fe29 	bl	800bcc0 <malloc>
 800c06e:	4602      	mov	r2, r0
 800c070:	6270      	str	r0, [r6, #36]	; 0x24
 800c072:	b928      	cbnz	r0, 800c080 <__pow5mult+0x40>
 800c074:	4b1d      	ldr	r3, [pc, #116]	; (800c0ec <__pow5mult+0xac>)
 800c076:	481e      	ldr	r0, [pc, #120]	; (800c0f0 <__pow5mult+0xb0>)
 800c078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c07c:	f000 fc20 	bl	800c8c0 <__assert_func>
 800c080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c084:	6004      	str	r4, [r0, #0]
 800c086:	60c4      	str	r4, [r0, #12]
 800c088:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c08c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c090:	b94c      	cbnz	r4, 800c0a6 <__pow5mult+0x66>
 800c092:	f240 2171 	movw	r1, #625	; 0x271
 800c096:	4630      	mov	r0, r6
 800c098:	f7ff ff16 	bl	800bec8 <__i2b>
 800c09c:	2300      	movs	r3, #0
 800c09e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	6003      	str	r3, [r0, #0]
 800c0a6:	f04f 0900 	mov.w	r9, #0
 800c0aa:	07eb      	lsls	r3, r5, #31
 800c0ac:	d50a      	bpl.n	800c0c4 <__pow5mult+0x84>
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f7ff ff1e 	bl	800bef4 <__multiply>
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	4680      	mov	r8, r0
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f7ff fe47 	bl	800bd50 <_Bfree>
 800c0c2:	4647      	mov	r7, r8
 800c0c4:	106d      	asrs	r5, r5, #1
 800c0c6:	d00b      	beq.n	800c0e0 <__pow5mult+0xa0>
 800c0c8:	6820      	ldr	r0, [r4, #0]
 800c0ca:	b938      	cbnz	r0, 800c0dc <__pow5mult+0x9c>
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7ff ff0f 	bl	800bef4 <__multiply>
 800c0d6:	6020      	str	r0, [r4, #0]
 800c0d8:	f8c0 9000 	str.w	r9, [r0]
 800c0dc:	4604      	mov	r4, r0
 800c0de:	e7e4      	b.n	800c0aa <__pow5mult+0x6a>
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e6:	bf00      	nop
 800c0e8:	0800ce08 	.word	0x0800ce08
 800c0ec:	0800cbd1 	.word	0x0800cbd1
 800c0f0:	0800ccb8 	.word	0x0800ccb8

0800c0f4 <__lshift>:
 800c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	6849      	ldr	r1, [r1, #4]
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	4607      	mov	r7, r0
 800c106:	4691      	mov	r9, r2
 800c108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c10c:	f108 0601 	add.w	r6, r8, #1
 800c110:	42b3      	cmp	r3, r6
 800c112:	db0b      	blt.n	800c12c <__lshift+0x38>
 800c114:	4638      	mov	r0, r7
 800c116:	f7ff fddb 	bl	800bcd0 <_Balloc>
 800c11a:	4605      	mov	r5, r0
 800c11c:	b948      	cbnz	r0, 800c132 <__lshift+0x3e>
 800c11e:	4602      	mov	r2, r0
 800c120:	4b28      	ldr	r3, [pc, #160]	; (800c1c4 <__lshift+0xd0>)
 800c122:	4829      	ldr	r0, [pc, #164]	; (800c1c8 <__lshift+0xd4>)
 800c124:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c128:	f000 fbca 	bl	800c8c0 <__assert_func>
 800c12c:	3101      	adds	r1, #1
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	e7ee      	b.n	800c110 <__lshift+0x1c>
 800c132:	2300      	movs	r3, #0
 800c134:	f100 0114 	add.w	r1, r0, #20
 800c138:	f100 0210 	add.w	r2, r0, #16
 800c13c:	4618      	mov	r0, r3
 800c13e:	4553      	cmp	r3, sl
 800c140:	db33      	blt.n	800c1aa <__lshift+0xb6>
 800c142:	6920      	ldr	r0, [r4, #16]
 800c144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c148:	f104 0314 	add.w	r3, r4, #20
 800c14c:	f019 091f 	ands.w	r9, r9, #31
 800c150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c158:	d02b      	beq.n	800c1b2 <__lshift+0xbe>
 800c15a:	f1c9 0e20 	rsb	lr, r9, #32
 800c15e:	468a      	mov	sl, r1
 800c160:	2200      	movs	r2, #0
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	fa00 f009 	lsl.w	r0, r0, r9
 800c168:	4302      	orrs	r2, r0
 800c16a:	f84a 2b04 	str.w	r2, [sl], #4
 800c16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c172:	459c      	cmp	ip, r3
 800c174:	fa22 f20e 	lsr.w	r2, r2, lr
 800c178:	d8f3      	bhi.n	800c162 <__lshift+0x6e>
 800c17a:	ebac 0304 	sub.w	r3, ip, r4
 800c17e:	3b15      	subs	r3, #21
 800c180:	f023 0303 	bic.w	r3, r3, #3
 800c184:	3304      	adds	r3, #4
 800c186:	f104 0015 	add.w	r0, r4, #21
 800c18a:	4584      	cmp	ip, r0
 800c18c:	bf38      	it	cc
 800c18e:	2304      	movcc	r3, #4
 800c190:	50ca      	str	r2, [r1, r3]
 800c192:	b10a      	cbz	r2, 800c198 <__lshift+0xa4>
 800c194:	f108 0602 	add.w	r6, r8, #2
 800c198:	3e01      	subs	r6, #1
 800c19a:	4638      	mov	r0, r7
 800c19c:	612e      	str	r6, [r5, #16]
 800c19e:	4621      	mov	r1, r4
 800c1a0:	f7ff fdd6 	bl	800bd50 <_Bfree>
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	e7c5      	b.n	800c13e <__lshift+0x4a>
 800c1b2:	3904      	subs	r1, #4
 800c1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1bc:	459c      	cmp	ip, r3
 800c1be:	d8f9      	bhi.n	800c1b4 <__lshift+0xc0>
 800c1c0:	e7ea      	b.n	800c198 <__lshift+0xa4>
 800c1c2:	bf00      	nop
 800c1c4:	0800cc47 	.word	0x0800cc47
 800c1c8:	0800ccb8 	.word	0x0800ccb8

0800c1cc <__mcmp>:
 800c1cc:	b530      	push	{r4, r5, lr}
 800c1ce:	6902      	ldr	r2, [r0, #16]
 800c1d0:	690c      	ldr	r4, [r1, #16]
 800c1d2:	1b12      	subs	r2, r2, r4
 800c1d4:	d10e      	bne.n	800c1f4 <__mcmp+0x28>
 800c1d6:	f100 0314 	add.w	r3, r0, #20
 800c1da:	3114      	adds	r1, #20
 800c1dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1ec:	42a5      	cmp	r5, r4
 800c1ee:	d003      	beq.n	800c1f8 <__mcmp+0x2c>
 800c1f0:	d305      	bcc.n	800c1fe <__mcmp+0x32>
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	bd30      	pop	{r4, r5, pc}
 800c1f8:	4283      	cmp	r3, r0
 800c1fa:	d3f3      	bcc.n	800c1e4 <__mcmp+0x18>
 800c1fc:	e7fa      	b.n	800c1f4 <__mcmp+0x28>
 800c1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c202:	e7f7      	b.n	800c1f4 <__mcmp+0x28>

0800c204 <__mdiff>:
 800c204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	460c      	mov	r4, r1
 800c20a:	4606      	mov	r6, r0
 800c20c:	4611      	mov	r1, r2
 800c20e:	4620      	mov	r0, r4
 800c210:	4617      	mov	r7, r2
 800c212:	f7ff ffdb 	bl	800c1cc <__mcmp>
 800c216:	1e05      	subs	r5, r0, #0
 800c218:	d110      	bne.n	800c23c <__mdiff+0x38>
 800c21a:	4629      	mov	r1, r5
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7ff fd57 	bl	800bcd0 <_Balloc>
 800c222:	b930      	cbnz	r0, 800c232 <__mdiff+0x2e>
 800c224:	4b39      	ldr	r3, [pc, #228]	; (800c30c <__mdiff+0x108>)
 800c226:	4602      	mov	r2, r0
 800c228:	f240 2132 	movw	r1, #562	; 0x232
 800c22c:	4838      	ldr	r0, [pc, #224]	; (800c310 <__mdiff+0x10c>)
 800c22e:	f000 fb47 	bl	800c8c0 <__assert_func>
 800c232:	2301      	movs	r3, #1
 800c234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23c:	bfa4      	itt	ge
 800c23e:	463b      	movge	r3, r7
 800c240:	4627      	movge	r7, r4
 800c242:	4630      	mov	r0, r6
 800c244:	6879      	ldr	r1, [r7, #4]
 800c246:	bfa6      	itte	ge
 800c248:	461c      	movge	r4, r3
 800c24a:	2500      	movge	r5, #0
 800c24c:	2501      	movlt	r5, #1
 800c24e:	f7ff fd3f 	bl	800bcd0 <_Balloc>
 800c252:	b920      	cbnz	r0, 800c25e <__mdiff+0x5a>
 800c254:	4b2d      	ldr	r3, [pc, #180]	; (800c30c <__mdiff+0x108>)
 800c256:	4602      	mov	r2, r0
 800c258:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c25c:	e7e6      	b.n	800c22c <__mdiff+0x28>
 800c25e:	693e      	ldr	r6, [r7, #16]
 800c260:	60c5      	str	r5, [r0, #12]
 800c262:	6925      	ldr	r5, [r4, #16]
 800c264:	f107 0114 	add.w	r1, r7, #20
 800c268:	f104 0914 	add.w	r9, r4, #20
 800c26c:	f100 0e14 	add.w	lr, r0, #20
 800c270:	f107 0210 	add.w	r2, r7, #16
 800c274:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c278:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c27c:	46f2      	mov	sl, lr
 800c27e:	2700      	movs	r7, #0
 800c280:	f859 3b04 	ldr.w	r3, [r9], #4
 800c284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c288:	fa1f f883 	uxth.w	r8, r3
 800c28c:	fa17 f78b 	uxtah	r7, r7, fp
 800c290:	0c1b      	lsrs	r3, r3, #16
 800c292:	eba7 0808 	sub.w	r8, r7, r8
 800c296:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c29a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c29e:	fa1f f888 	uxth.w	r8, r8
 800c2a2:	141f      	asrs	r7, r3, #16
 800c2a4:	454d      	cmp	r5, r9
 800c2a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2aa:	f84a 3b04 	str.w	r3, [sl], #4
 800c2ae:	d8e7      	bhi.n	800c280 <__mdiff+0x7c>
 800c2b0:	1b2b      	subs	r3, r5, r4
 800c2b2:	3b15      	subs	r3, #21
 800c2b4:	f023 0303 	bic.w	r3, r3, #3
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	3415      	adds	r4, #21
 800c2bc:	42a5      	cmp	r5, r4
 800c2be:	bf38      	it	cc
 800c2c0:	2304      	movcc	r3, #4
 800c2c2:	4419      	add	r1, r3
 800c2c4:	4473      	add	r3, lr
 800c2c6:	469e      	mov	lr, r3
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	4565      	cmp	r5, ip
 800c2cc:	d30e      	bcc.n	800c2ec <__mdiff+0xe8>
 800c2ce:	f10c 0203 	add.w	r2, ip, #3
 800c2d2:	1a52      	subs	r2, r2, r1
 800c2d4:	f022 0203 	bic.w	r2, r2, #3
 800c2d8:	3903      	subs	r1, #3
 800c2da:	458c      	cmp	ip, r1
 800c2dc:	bf38      	it	cc
 800c2de:	2200      	movcc	r2, #0
 800c2e0:	441a      	add	r2, r3
 800c2e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c2e6:	b17b      	cbz	r3, 800c308 <__mdiff+0x104>
 800c2e8:	6106      	str	r6, [r0, #16]
 800c2ea:	e7a5      	b.n	800c238 <__mdiff+0x34>
 800c2ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800c2f0:	fa17 f488 	uxtah	r4, r7, r8
 800c2f4:	1422      	asrs	r2, r4, #16
 800c2f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c2fa:	b2a4      	uxth	r4, r4
 800c2fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c300:	f84e 4b04 	str.w	r4, [lr], #4
 800c304:	1417      	asrs	r7, r2, #16
 800c306:	e7e0      	b.n	800c2ca <__mdiff+0xc6>
 800c308:	3e01      	subs	r6, #1
 800c30a:	e7ea      	b.n	800c2e2 <__mdiff+0xde>
 800c30c:	0800cc47 	.word	0x0800cc47
 800c310:	0800ccb8 	.word	0x0800ccb8

0800c314 <__d2b>:
 800c314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c318:	4689      	mov	r9, r1
 800c31a:	2101      	movs	r1, #1
 800c31c:	ec57 6b10 	vmov	r6, r7, d0
 800c320:	4690      	mov	r8, r2
 800c322:	f7ff fcd5 	bl	800bcd0 <_Balloc>
 800c326:	4604      	mov	r4, r0
 800c328:	b930      	cbnz	r0, 800c338 <__d2b+0x24>
 800c32a:	4602      	mov	r2, r0
 800c32c:	4b25      	ldr	r3, [pc, #148]	; (800c3c4 <__d2b+0xb0>)
 800c32e:	4826      	ldr	r0, [pc, #152]	; (800c3c8 <__d2b+0xb4>)
 800c330:	f240 310a 	movw	r1, #778	; 0x30a
 800c334:	f000 fac4 	bl	800c8c0 <__assert_func>
 800c338:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c33c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c340:	bb35      	cbnz	r5, 800c390 <__d2b+0x7c>
 800c342:	2e00      	cmp	r6, #0
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	d028      	beq.n	800c39a <__d2b+0x86>
 800c348:	4668      	mov	r0, sp
 800c34a:	9600      	str	r6, [sp, #0]
 800c34c:	f7ff fd8c 	bl	800be68 <__lo0bits>
 800c350:	9900      	ldr	r1, [sp, #0]
 800c352:	b300      	cbz	r0, 800c396 <__d2b+0x82>
 800c354:	9a01      	ldr	r2, [sp, #4]
 800c356:	f1c0 0320 	rsb	r3, r0, #32
 800c35a:	fa02 f303 	lsl.w	r3, r2, r3
 800c35e:	430b      	orrs	r3, r1
 800c360:	40c2      	lsrs	r2, r0
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	9201      	str	r2, [sp, #4]
 800c366:	9b01      	ldr	r3, [sp, #4]
 800c368:	61a3      	str	r3, [r4, #24]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bf14      	ite	ne
 800c36e:	2202      	movne	r2, #2
 800c370:	2201      	moveq	r2, #1
 800c372:	6122      	str	r2, [r4, #16]
 800c374:	b1d5      	cbz	r5, 800c3ac <__d2b+0x98>
 800c376:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c37a:	4405      	add	r5, r0
 800c37c:	f8c9 5000 	str.w	r5, [r9]
 800c380:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c384:	f8c8 0000 	str.w	r0, [r8]
 800c388:	4620      	mov	r0, r4
 800c38a:	b003      	add	sp, #12
 800c38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c394:	e7d5      	b.n	800c342 <__d2b+0x2e>
 800c396:	6161      	str	r1, [r4, #20]
 800c398:	e7e5      	b.n	800c366 <__d2b+0x52>
 800c39a:	a801      	add	r0, sp, #4
 800c39c:	f7ff fd64 	bl	800be68 <__lo0bits>
 800c3a0:	9b01      	ldr	r3, [sp, #4]
 800c3a2:	6163      	str	r3, [r4, #20]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	6122      	str	r2, [r4, #16]
 800c3a8:	3020      	adds	r0, #32
 800c3aa:	e7e3      	b.n	800c374 <__d2b+0x60>
 800c3ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3b4:	f8c9 0000 	str.w	r0, [r9]
 800c3b8:	6918      	ldr	r0, [r3, #16]
 800c3ba:	f7ff fd35 	bl	800be28 <__hi0bits>
 800c3be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3c2:	e7df      	b.n	800c384 <__d2b+0x70>
 800c3c4:	0800cc47 	.word	0x0800cc47
 800c3c8:	0800ccb8 	.word	0x0800ccb8

0800c3cc <_calloc_r>:
 800c3cc:	b513      	push	{r0, r1, r4, lr}
 800c3ce:	434a      	muls	r2, r1
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	9201      	str	r2, [sp, #4]
 800c3d4:	f000 f85a 	bl	800c48c <_malloc_r>
 800c3d8:	4604      	mov	r4, r0
 800c3da:	b118      	cbz	r0, 800c3e4 <_calloc_r+0x18>
 800c3dc:	9a01      	ldr	r2, [sp, #4]
 800c3de:	2100      	movs	r1, #0
 800c3e0:	f7fd fd42 	bl	8009e68 <memset>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	b002      	add	sp, #8
 800c3e8:	bd10      	pop	{r4, pc}
	...

0800c3ec <_free_r>:
 800c3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ee:	2900      	cmp	r1, #0
 800c3f0:	d048      	beq.n	800c484 <_free_r+0x98>
 800c3f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3f6:	9001      	str	r0, [sp, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f1a1 0404 	sub.w	r4, r1, #4
 800c3fe:	bfb8      	it	lt
 800c400:	18e4      	addlt	r4, r4, r3
 800c402:	f000 fae3 	bl	800c9cc <__malloc_lock>
 800c406:	4a20      	ldr	r2, [pc, #128]	; (800c488 <_free_r+0x9c>)
 800c408:	9801      	ldr	r0, [sp, #4]
 800c40a:	6813      	ldr	r3, [r2, #0]
 800c40c:	4615      	mov	r5, r2
 800c40e:	b933      	cbnz	r3, 800c41e <_free_r+0x32>
 800c410:	6063      	str	r3, [r4, #4]
 800c412:	6014      	str	r4, [r2, #0]
 800c414:	b003      	add	sp, #12
 800c416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c41a:	f000 badd 	b.w	800c9d8 <__malloc_unlock>
 800c41e:	42a3      	cmp	r3, r4
 800c420:	d90b      	bls.n	800c43a <_free_r+0x4e>
 800c422:	6821      	ldr	r1, [r4, #0]
 800c424:	1862      	adds	r2, r4, r1
 800c426:	4293      	cmp	r3, r2
 800c428:	bf04      	itt	eq
 800c42a:	681a      	ldreq	r2, [r3, #0]
 800c42c:	685b      	ldreq	r3, [r3, #4]
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	bf04      	itt	eq
 800c432:	1852      	addeq	r2, r2, r1
 800c434:	6022      	streq	r2, [r4, #0]
 800c436:	602c      	str	r4, [r5, #0]
 800c438:	e7ec      	b.n	800c414 <_free_r+0x28>
 800c43a:	461a      	mov	r2, r3
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	b10b      	cbz	r3, 800c444 <_free_r+0x58>
 800c440:	42a3      	cmp	r3, r4
 800c442:	d9fa      	bls.n	800c43a <_free_r+0x4e>
 800c444:	6811      	ldr	r1, [r2, #0]
 800c446:	1855      	adds	r5, r2, r1
 800c448:	42a5      	cmp	r5, r4
 800c44a:	d10b      	bne.n	800c464 <_free_r+0x78>
 800c44c:	6824      	ldr	r4, [r4, #0]
 800c44e:	4421      	add	r1, r4
 800c450:	1854      	adds	r4, r2, r1
 800c452:	42a3      	cmp	r3, r4
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	d1dd      	bne.n	800c414 <_free_r+0x28>
 800c458:	681c      	ldr	r4, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	6053      	str	r3, [r2, #4]
 800c45e:	4421      	add	r1, r4
 800c460:	6011      	str	r1, [r2, #0]
 800c462:	e7d7      	b.n	800c414 <_free_r+0x28>
 800c464:	d902      	bls.n	800c46c <_free_r+0x80>
 800c466:	230c      	movs	r3, #12
 800c468:	6003      	str	r3, [r0, #0]
 800c46a:	e7d3      	b.n	800c414 <_free_r+0x28>
 800c46c:	6825      	ldr	r5, [r4, #0]
 800c46e:	1961      	adds	r1, r4, r5
 800c470:	428b      	cmp	r3, r1
 800c472:	bf04      	itt	eq
 800c474:	6819      	ldreq	r1, [r3, #0]
 800c476:	685b      	ldreq	r3, [r3, #4]
 800c478:	6063      	str	r3, [r4, #4]
 800c47a:	bf04      	itt	eq
 800c47c:	1949      	addeq	r1, r1, r5
 800c47e:	6021      	streq	r1, [r4, #0]
 800c480:	6054      	str	r4, [r2, #4]
 800c482:	e7c7      	b.n	800c414 <_free_r+0x28>
 800c484:	b003      	add	sp, #12
 800c486:	bd30      	pop	{r4, r5, pc}
 800c488:	200004c0 	.word	0x200004c0

0800c48c <_malloc_r>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	1ccd      	adds	r5, r1, #3
 800c490:	f025 0503 	bic.w	r5, r5, #3
 800c494:	3508      	adds	r5, #8
 800c496:	2d0c      	cmp	r5, #12
 800c498:	bf38      	it	cc
 800c49a:	250c      	movcc	r5, #12
 800c49c:	2d00      	cmp	r5, #0
 800c49e:	4606      	mov	r6, r0
 800c4a0:	db01      	blt.n	800c4a6 <_malloc_r+0x1a>
 800c4a2:	42a9      	cmp	r1, r5
 800c4a4:	d903      	bls.n	800c4ae <_malloc_r+0x22>
 800c4a6:	230c      	movs	r3, #12
 800c4a8:	6033      	str	r3, [r6, #0]
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ae:	f000 fa8d 	bl	800c9cc <__malloc_lock>
 800c4b2:	4921      	ldr	r1, [pc, #132]	; (800c538 <_malloc_r+0xac>)
 800c4b4:	680a      	ldr	r2, [r1, #0]
 800c4b6:	4614      	mov	r4, r2
 800c4b8:	b99c      	cbnz	r4, 800c4e2 <_malloc_r+0x56>
 800c4ba:	4f20      	ldr	r7, [pc, #128]	; (800c53c <_malloc_r+0xb0>)
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	b923      	cbnz	r3, 800c4ca <_malloc_r+0x3e>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f000 f996 	bl	800c7f4 <_sbrk_r>
 800c4c8:	6038      	str	r0, [r7, #0]
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f000 f991 	bl	800c7f4 <_sbrk_r>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	d123      	bne.n	800c51e <_malloc_r+0x92>
 800c4d6:	230c      	movs	r3, #12
 800c4d8:	6033      	str	r3, [r6, #0]
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f000 fa7c 	bl	800c9d8 <__malloc_unlock>
 800c4e0:	e7e3      	b.n	800c4aa <_malloc_r+0x1e>
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	1b5b      	subs	r3, r3, r5
 800c4e6:	d417      	bmi.n	800c518 <_malloc_r+0x8c>
 800c4e8:	2b0b      	cmp	r3, #11
 800c4ea:	d903      	bls.n	800c4f4 <_malloc_r+0x68>
 800c4ec:	6023      	str	r3, [r4, #0]
 800c4ee:	441c      	add	r4, r3
 800c4f0:	6025      	str	r5, [r4, #0]
 800c4f2:	e004      	b.n	800c4fe <_malloc_r+0x72>
 800c4f4:	6863      	ldr	r3, [r4, #4]
 800c4f6:	42a2      	cmp	r2, r4
 800c4f8:	bf0c      	ite	eq
 800c4fa:	600b      	streq	r3, [r1, #0]
 800c4fc:	6053      	strne	r3, [r2, #4]
 800c4fe:	4630      	mov	r0, r6
 800c500:	f000 fa6a 	bl	800c9d8 <__malloc_unlock>
 800c504:	f104 000b 	add.w	r0, r4, #11
 800c508:	1d23      	adds	r3, r4, #4
 800c50a:	f020 0007 	bic.w	r0, r0, #7
 800c50e:	1ac2      	subs	r2, r0, r3
 800c510:	d0cc      	beq.n	800c4ac <_malloc_r+0x20>
 800c512:	1a1b      	subs	r3, r3, r0
 800c514:	50a3      	str	r3, [r4, r2]
 800c516:	e7c9      	b.n	800c4ac <_malloc_r+0x20>
 800c518:	4622      	mov	r2, r4
 800c51a:	6864      	ldr	r4, [r4, #4]
 800c51c:	e7cc      	b.n	800c4b8 <_malloc_r+0x2c>
 800c51e:	1cc4      	adds	r4, r0, #3
 800c520:	f024 0403 	bic.w	r4, r4, #3
 800c524:	42a0      	cmp	r0, r4
 800c526:	d0e3      	beq.n	800c4f0 <_malloc_r+0x64>
 800c528:	1a21      	subs	r1, r4, r0
 800c52a:	4630      	mov	r0, r6
 800c52c:	f000 f962 	bl	800c7f4 <_sbrk_r>
 800c530:	3001      	adds	r0, #1
 800c532:	d1dd      	bne.n	800c4f0 <_malloc_r+0x64>
 800c534:	e7cf      	b.n	800c4d6 <_malloc_r+0x4a>
 800c536:	bf00      	nop
 800c538:	200004c0 	.word	0x200004c0
 800c53c:	200004c4 	.word	0x200004c4

0800c540 <__sfputc_r>:
 800c540:	6893      	ldr	r3, [r2, #8]
 800c542:	3b01      	subs	r3, #1
 800c544:	2b00      	cmp	r3, #0
 800c546:	b410      	push	{r4}
 800c548:	6093      	str	r3, [r2, #8]
 800c54a:	da08      	bge.n	800c55e <__sfputc_r+0x1e>
 800c54c:	6994      	ldr	r4, [r2, #24]
 800c54e:	42a3      	cmp	r3, r4
 800c550:	db01      	blt.n	800c556 <__sfputc_r+0x16>
 800c552:	290a      	cmp	r1, #10
 800c554:	d103      	bne.n	800c55e <__sfputc_r+0x1e>
 800c556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55a:	f7fe ba53 	b.w	800aa04 <__swbuf_r>
 800c55e:	6813      	ldr	r3, [r2, #0]
 800c560:	1c58      	adds	r0, r3, #1
 800c562:	6010      	str	r0, [r2, #0]
 800c564:	7019      	strb	r1, [r3, #0]
 800c566:	4608      	mov	r0, r1
 800c568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <__sfputs_r>:
 800c56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c570:	4606      	mov	r6, r0
 800c572:	460f      	mov	r7, r1
 800c574:	4614      	mov	r4, r2
 800c576:	18d5      	adds	r5, r2, r3
 800c578:	42ac      	cmp	r4, r5
 800c57a:	d101      	bne.n	800c580 <__sfputs_r+0x12>
 800c57c:	2000      	movs	r0, #0
 800c57e:	e007      	b.n	800c590 <__sfputs_r+0x22>
 800c580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c584:	463a      	mov	r2, r7
 800c586:	4630      	mov	r0, r6
 800c588:	f7ff ffda 	bl	800c540 <__sfputc_r>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d1f3      	bne.n	800c578 <__sfputs_r+0xa>
 800c590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c594 <_vfiprintf_r>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	460d      	mov	r5, r1
 800c59a:	b09d      	sub	sp, #116	; 0x74
 800c59c:	4614      	mov	r4, r2
 800c59e:	4698      	mov	r8, r3
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	b118      	cbz	r0, 800c5ac <_vfiprintf_r+0x18>
 800c5a4:	6983      	ldr	r3, [r0, #24]
 800c5a6:	b90b      	cbnz	r3, 800c5ac <_vfiprintf_r+0x18>
 800c5a8:	f7ff fa80 	bl	800baac <__sinit>
 800c5ac:	4b89      	ldr	r3, [pc, #548]	; (800c7d4 <_vfiprintf_r+0x240>)
 800c5ae:	429d      	cmp	r5, r3
 800c5b0:	d11b      	bne.n	800c5ea <_vfiprintf_r+0x56>
 800c5b2:	6875      	ldr	r5, [r6, #4]
 800c5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b6:	07d9      	lsls	r1, r3, #31
 800c5b8:	d405      	bmi.n	800c5c6 <_vfiprintf_r+0x32>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	059a      	lsls	r2, r3, #22
 800c5be:	d402      	bmi.n	800c5c6 <_vfiprintf_r+0x32>
 800c5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5c2:	f7ff fb16 	bl	800bbf2 <__retarget_lock_acquire_recursive>
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	071b      	lsls	r3, r3, #28
 800c5ca:	d501      	bpl.n	800c5d0 <_vfiprintf_r+0x3c>
 800c5cc:	692b      	ldr	r3, [r5, #16]
 800c5ce:	b9eb      	cbnz	r3, 800c60c <_vfiprintf_r+0x78>
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7fe fa68 	bl	800aaa8 <__swsetup_r>
 800c5d8:	b1c0      	cbz	r0, 800c60c <_vfiprintf_r+0x78>
 800c5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5dc:	07dc      	lsls	r4, r3, #31
 800c5de:	d50e      	bpl.n	800c5fe <_vfiprintf_r+0x6a>
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e4:	b01d      	add	sp, #116	; 0x74
 800c5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ea:	4b7b      	ldr	r3, [pc, #492]	; (800c7d8 <_vfiprintf_r+0x244>)
 800c5ec:	429d      	cmp	r5, r3
 800c5ee:	d101      	bne.n	800c5f4 <_vfiprintf_r+0x60>
 800c5f0:	68b5      	ldr	r5, [r6, #8]
 800c5f2:	e7df      	b.n	800c5b4 <_vfiprintf_r+0x20>
 800c5f4:	4b79      	ldr	r3, [pc, #484]	; (800c7dc <_vfiprintf_r+0x248>)
 800c5f6:	429d      	cmp	r5, r3
 800c5f8:	bf08      	it	eq
 800c5fa:	68f5      	ldreq	r5, [r6, #12]
 800c5fc:	e7da      	b.n	800c5b4 <_vfiprintf_r+0x20>
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	0598      	lsls	r0, r3, #22
 800c602:	d4ed      	bmi.n	800c5e0 <_vfiprintf_r+0x4c>
 800c604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c606:	f7ff faf5 	bl	800bbf4 <__retarget_lock_release_recursive>
 800c60a:	e7e9      	b.n	800c5e0 <_vfiprintf_r+0x4c>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9309      	str	r3, [sp, #36]	; 0x24
 800c610:	2320      	movs	r3, #32
 800c612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c616:	f8cd 800c 	str.w	r8, [sp, #12]
 800c61a:	2330      	movs	r3, #48	; 0x30
 800c61c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7e0 <_vfiprintf_r+0x24c>
 800c620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c624:	f04f 0901 	mov.w	r9, #1
 800c628:	4623      	mov	r3, r4
 800c62a:	469a      	mov	sl, r3
 800c62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c630:	b10a      	cbz	r2, 800c636 <_vfiprintf_r+0xa2>
 800c632:	2a25      	cmp	r2, #37	; 0x25
 800c634:	d1f9      	bne.n	800c62a <_vfiprintf_r+0x96>
 800c636:	ebba 0b04 	subs.w	fp, sl, r4
 800c63a:	d00b      	beq.n	800c654 <_vfiprintf_r+0xc0>
 800c63c:	465b      	mov	r3, fp
 800c63e:	4622      	mov	r2, r4
 800c640:	4629      	mov	r1, r5
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ff93 	bl	800c56e <__sfputs_r>
 800c648:	3001      	adds	r0, #1
 800c64a:	f000 80aa 	beq.w	800c7a2 <_vfiprintf_r+0x20e>
 800c64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c650:	445a      	add	r2, fp
 800c652:	9209      	str	r2, [sp, #36]	; 0x24
 800c654:	f89a 3000 	ldrb.w	r3, [sl]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 80a2 	beq.w	800c7a2 <_vfiprintf_r+0x20e>
 800c65e:	2300      	movs	r3, #0
 800c660:	f04f 32ff 	mov.w	r2, #4294967295
 800c664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c668:	f10a 0a01 	add.w	sl, sl, #1
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c674:	931a      	str	r3, [sp, #104]	; 0x68
 800c676:	4654      	mov	r4, sl
 800c678:	2205      	movs	r2, #5
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	4858      	ldr	r0, [pc, #352]	; (800c7e0 <_vfiprintf_r+0x24c>)
 800c680:	f7f3 fdce 	bl	8000220 <memchr>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	b9d8      	cbnz	r0, 800c6c0 <_vfiprintf_r+0x12c>
 800c688:	06d1      	lsls	r1, r2, #27
 800c68a:	bf44      	itt	mi
 800c68c:	2320      	movmi	r3, #32
 800c68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c692:	0713      	lsls	r3, r2, #28
 800c694:	bf44      	itt	mi
 800c696:	232b      	movmi	r3, #43	; 0x2b
 800c698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a2:	d015      	beq.n	800c6d0 <_vfiprintf_r+0x13c>
 800c6a4:	9a07      	ldr	r2, [sp, #28]
 800c6a6:	4654      	mov	r4, sl
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f04f 0c0a 	mov.w	ip, #10
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b4:	3b30      	subs	r3, #48	; 0x30
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d94e      	bls.n	800c758 <_vfiprintf_r+0x1c4>
 800c6ba:	b1b0      	cbz	r0, 800c6ea <_vfiprintf_r+0x156>
 800c6bc:	9207      	str	r2, [sp, #28]
 800c6be:	e014      	b.n	800c6ea <_vfiprintf_r+0x156>
 800c6c0:	eba0 0308 	sub.w	r3, r0, r8
 800c6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	46a2      	mov	sl, r4
 800c6ce:	e7d2      	b.n	800c676 <_vfiprintf_r+0xe2>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	1d19      	adds	r1, r3, #4
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	9103      	str	r1, [sp, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bfbb      	ittet	lt
 800c6dc:	425b      	neglt	r3, r3
 800c6de:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e2:	9307      	strge	r3, [sp, #28]
 800c6e4:	9307      	strlt	r3, [sp, #28]
 800c6e6:	bfb8      	it	lt
 800c6e8:	9204      	strlt	r2, [sp, #16]
 800c6ea:	7823      	ldrb	r3, [r4, #0]
 800c6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ee:	d10c      	bne.n	800c70a <_vfiprintf_r+0x176>
 800c6f0:	7863      	ldrb	r3, [r4, #1]
 800c6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f4:	d135      	bne.n	800c762 <_vfiprintf_r+0x1ce>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	9203      	str	r2, [sp, #12]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfb8      	it	lt
 800c702:	f04f 33ff 	movlt.w	r3, #4294967295
 800c706:	3402      	adds	r4, #2
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7f0 <_vfiprintf_r+0x25c>
 800c70e:	7821      	ldrb	r1, [r4, #0]
 800c710:	2203      	movs	r2, #3
 800c712:	4650      	mov	r0, sl
 800c714:	f7f3 fd84 	bl	8000220 <memchr>
 800c718:	b140      	cbz	r0, 800c72c <_vfiprintf_r+0x198>
 800c71a:	2340      	movs	r3, #64	; 0x40
 800c71c:	eba0 000a 	sub.w	r0, r0, sl
 800c720:	fa03 f000 	lsl.w	r0, r3, r0
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	4303      	orrs	r3, r0
 800c728:	3401      	adds	r4, #1
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c730:	482c      	ldr	r0, [pc, #176]	; (800c7e4 <_vfiprintf_r+0x250>)
 800c732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c736:	2206      	movs	r2, #6
 800c738:	f7f3 fd72 	bl	8000220 <memchr>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d03f      	beq.n	800c7c0 <_vfiprintf_r+0x22c>
 800c740:	4b29      	ldr	r3, [pc, #164]	; (800c7e8 <_vfiprintf_r+0x254>)
 800c742:	bb1b      	cbnz	r3, 800c78c <_vfiprintf_r+0x1f8>
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	3307      	adds	r3, #7
 800c748:	f023 0307 	bic.w	r3, r3, #7
 800c74c:	3308      	adds	r3, #8
 800c74e:	9303      	str	r3, [sp, #12]
 800c750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c752:	443b      	add	r3, r7
 800c754:	9309      	str	r3, [sp, #36]	; 0x24
 800c756:	e767      	b.n	800c628 <_vfiprintf_r+0x94>
 800c758:	fb0c 3202 	mla	r2, ip, r2, r3
 800c75c:	460c      	mov	r4, r1
 800c75e:	2001      	movs	r0, #1
 800c760:	e7a5      	b.n	800c6ae <_vfiprintf_r+0x11a>
 800c762:	2300      	movs	r3, #0
 800c764:	3401      	adds	r4, #1
 800c766:	9305      	str	r3, [sp, #20]
 800c768:	4619      	mov	r1, r3
 800c76a:	f04f 0c0a 	mov.w	ip, #10
 800c76e:	4620      	mov	r0, r4
 800c770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c774:	3a30      	subs	r2, #48	; 0x30
 800c776:	2a09      	cmp	r2, #9
 800c778:	d903      	bls.n	800c782 <_vfiprintf_r+0x1ee>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0c5      	beq.n	800c70a <_vfiprintf_r+0x176>
 800c77e:	9105      	str	r1, [sp, #20]
 800c780:	e7c3      	b.n	800c70a <_vfiprintf_r+0x176>
 800c782:	fb0c 2101 	mla	r1, ip, r1, r2
 800c786:	4604      	mov	r4, r0
 800c788:	2301      	movs	r3, #1
 800c78a:	e7f0      	b.n	800c76e <_vfiprintf_r+0x1da>
 800c78c:	ab03      	add	r3, sp, #12
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	462a      	mov	r2, r5
 800c792:	4b16      	ldr	r3, [pc, #88]	; (800c7ec <_vfiprintf_r+0x258>)
 800c794:	a904      	add	r1, sp, #16
 800c796:	4630      	mov	r0, r6
 800c798:	f7fd fc0e 	bl	8009fb8 <_printf_float>
 800c79c:	4607      	mov	r7, r0
 800c79e:	1c78      	adds	r0, r7, #1
 800c7a0:	d1d6      	bne.n	800c750 <_vfiprintf_r+0x1bc>
 800c7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a4:	07d9      	lsls	r1, r3, #31
 800c7a6:	d405      	bmi.n	800c7b4 <_vfiprintf_r+0x220>
 800c7a8:	89ab      	ldrh	r3, [r5, #12]
 800c7aa:	059a      	lsls	r2, r3, #22
 800c7ac:	d402      	bmi.n	800c7b4 <_vfiprintf_r+0x220>
 800c7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b0:	f7ff fa20 	bl	800bbf4 <__retarget_lock_release_recursive>
 800c7b4:	89ab      	ldrh	r3, [r5, #12]
 800c7b6:	065b      	lsls	r3, r3, #25
 800c7b8:	f53f af12 	bmi.w	800c5e0 <_vfiprintf_r+0x4c>
 800c7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7be:	e711      	b.n	800c5e4 <_vfiprintf_r+0x50>
 800c7c0:	ab03      	add	r3, sp, #12
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4b09      	ldr	r3, [pc, #36]	; (800c7ec <_vfiprintf_r+0x258>)
 800c7c8:	a904      	add	r1, sp, #16
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f7fd fe98 	bl	800a500 <_printf_i>
 800c7d0:	e7e4      	b.n	800c79c <_vfiprintf_r+0x208>
 800c7d2:	bf00      	nop
 800c7d4:	0800cc78 	.word	0x0800cc78
 800c7d8:	0800cc98 	.word	0x0800cc98
 800c7dc:	0800cc58 	.word	0x0800cc58
 800c7e0:	0800ce14 	.word	0x0800ce14
 800c7e4:	0800ce1e 	.word	0x0800ce1e
 800c7e8:	08009fb9 	.word	0x08009fb9
 800c7ec:	0800c56f 	.word	0x0800c56f
 800c7f0:	0800ce1a 	.word	0x0800ce1a

0800c7f4 <_sbrk_r>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	4d06      	ldr	r5, [pc, #24]	; (800c810 <_sbrk_r+0x1c>)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	f7f5 f972 	bl	8001ae8 <_sbrk>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d102      	bne.n	800c80e <_sbrk_r+0x1a>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	b103      	cbz	r3, 800c80e <_sbrk_r+0x1a>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	20000938 	.word	0x20000938

0800c814 <__sread>:
 800c814:	b510      	push	{r4, lr}
 800c816:	460c      	mov	r4, r1
 800c818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81c:	f000 f8e2 	bl	800c9e4 <_read_r>
 800c820:	2800      	cmp	r0, #0
 800c822:	bfab      	itete	ge
 800c824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c826:	89a3      	ldrhlt	r3, [r4, #12]
 800c828:	181b      	addge	r3, r3, r0
 800c82a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c82e:	bfac      	ite	ge
 800c830:	6563      	strge	r3, [r4, #84]	; 0x54
 800c832:	81a3      	strhlt	r3, [r4, #12]
 800c834:	bd10      	pop	{r4, pc}

0800c836 <__swrite>:
 800c836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c83a:	461f      	mov	r7, r3
 800c83c:	898b      	ldrh	r3, [r1, #12]
 800c83e:	05db      	lsls	r3, r3, #23
 800c840:	4605      	mov	r5, r0
 800c842:	460c      	mov	r4, r1
 800c844:	4616      	mov	r6, r2
 800c846:	d505      	bpl.n	800c854 <__swrite+0x1e>
 800c848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84c:	2302      	movs	r3, #2
 800c84e:	2200      	movs	r2, #0
 800c850:	f000 f898 	bl	800c984 <_lseek_r>
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c85a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	4632      	mov	r2, r6
 800c862:	463b      	mov	r3, r7
 800c864:	4628      	mov	r0, r5
 800c866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c86a:	f000 b817 	b.w	800c89c <_write_r>

0800c86e <__sseek>:
 800c86e:	b510      	push	{r4, lr}
 800c870:	460c      	mov	r4, r1
 800c872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c876:	f000 f885 	bl	800c984 <_lseek_r>
 800c87a:	1c43      	adds	r3, r0, #1
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	bf15      	itete	ne
 800c880:	6560      	strne	r0, [r4, #84]	; 0x54
 800c882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c88a:	81a3      	strheq	r3, [r4, #12]
 800c88c:	bf18      	it	ne
 800c88e:	81a3      	strhne	r3, [r4, #12]
 800c890:	bd10      	pop	{r4, pc}

0800c892 <__sclose>:
 800c892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c896:	f000 b831 	b.w	800c8fc <_close_r>
	...

0800c89c <_write_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d07      	ldr	r5, [pc, #28]	; (800c8bc <_write_r+0x20>)
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	4608      	mov	r0, r1
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	602a      	str	r2, [r5, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	f7f4 fffe 	bl	80018ac <_write>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_write_r+0x1e>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_write_r+0x1e>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	20000938 	.word	0x20000938

0800c8c0 <__assert_func>:
 800c8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8c2:	4614      	mov	r4, r2
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4b09      	ldr	r3, [pc, #36]	; (800c8ec <__assert_func+0x2c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	68d8      	ldr	r0, [r3, #12]
 800c8ce:	b14c      	cbz	r4, 800c8e4 <__assert_func+0x24>
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <__assert_func+0x30>)
 800c8d2:	9100      	str	r1, [sp, #0]
 800c8d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8d8:	4906      	ldr	r1, [pc, #24]	; (800c8f4 <__assert_func+0x34>)
 800c8da:	462b      	mov	r3, r5
 800c8dc:	f000 f81e 	bl	800c91c <fiprintf>
 800c8e0:	f000 f89f 	bl	800ca22 <abort>
 800c8e4:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <__assert_func+0x38>)
 800c8e6:	461c      	mov	r4, r3
 800c8e8:	e7f3      	b.n	800c8d2 <__assert_func+0x12>
 800c8ea:	bf00      	nop
 800c8ec:	200002c8 	.word	0x200002c8
 800c8f0:	0800ce25 	.word	0x0800ce25
 800c8f4:	0800ce32 	.word	0x0800ce32
 800c8f8:	0800ce60 	.word	0x0800ce60

0800c8fc <_close_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d06      	ldr	r5, [pc, #24]	; (800c918 <_close_r+0x1c>)
 800c900:	2300      	movs	r3, #0
 800c902:	4604      	mov	r4, r0
 800c904:	4608      	mov	r0, r1
 800c906:	602b      	str	r3, [r5, #0]
 800c908:	f7f4 fffc 	bl	8001904 <_close>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_close_r+0x1a>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b103      	cbz	r3, 800c916 <_close_r+0x1a>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	20000938 	.word	0x20000938

0800c91c <fiprintf>:
 800c91c:	b40e      	push	{r1, r2, r3}
 800c91e:	b503      	push	{r0, r1, lr}
 800c920:	4601      	mov	r1, r0
 800c922:	ab03      	add	r3, sp, #12
 800c924:	4805      	ldr	r0, [pc, #20]	; (800c93c <fiprintf+0x20>)
 800c926:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92a:	6800      	ldr	r0, [r0, #0]
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	f7ff fe31 	bl	800c594 <_vfiprintf_r>
 800c932:	b002      	add	sp, #8
 800c934:	f85d eb04 	ldr.w	lr, [sp], #4
 800c938:	b003      	add	sp, #12
 800c93a:	4770      	bx	lr
 800c93c:	200002c8 	.word	0x200002c8

0800c940 <_fstat_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_fstat_r+0x20>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	4611      	mov	r1, r2
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	f7f5 f829 	bl	80019a4 <_fstat>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	d102      	bne.n	800c95c <_fstat_r+0x1c>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	b103      	cbz	r3, 800c95c <_fstat_r+0x1c>
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	bd38      	pop	{r3, r4, r5, pc}
 800c95e:	bf00      	nop
 800c960:	20000938 	.word	0x20000938

0800c964 <_isatty_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d06      	ldr	r5, [pc, #24]	; (800c980 <_isatty_r+0x1c>)
 800c968:	2300      	movs	r3, #0
 800c96a:	4604      	mov	r4, r0
 800c96c:	4608      	mov	r0, r1
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	f7f4 ff86 	bl	8001880 <_isatty>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_isatty_r+0x1a>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_isatty_r+0x1a>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	20000938 	.word	0x20000938

0800c984 <_lseek_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4d07      	ldr	r5, [pc, #28]	; (800c9a4 <_lseek_r+0x20>)
 800c988:	4604      	mov	r4, r0
 800c98a:	4608      	mov	r0, r1
 800c98c:	4611      	mov	r1, r2
 800c98e:	2200      	movs	r2, #0
 800c990:	602a      	str	r2, [r5, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	f7f4 ffcd 	bl	8001932 <_lseek>
 800c998:	1c43      	adds	r3, r0, #1
 800c99a:	d102      	bne.n	800c9a2 <_lseek_r+0x1e>
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	b103      	cbz	r3, 800c9a2 <_lseek_r+0x1e>
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	bd38      	pop	{r3, r4, r5, pc}
 800c9a4:	20000938 	.word	0x20000938

0800c9a8 <__ascii_mbtowc>:
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	b901      	cbnz	r1, 800c9ae <__ascii_mbtowc+0x6>
 800c9ac:	a901      	add	r1, sp, #4
 800c9ae:	b142      	cbz	r2, 800c9c2 <__ascii_mbtowc+0x1a>
 800c9b0:	b14b      	cbz	r3, 800c9c6 <__ascii_mbtowc+0x1e>
 800c9b2:	7813      	ldrb	r3, [r2, #0]
 800c9b4:	600b      	str	r3, [r1, #0]
 800c9b6:	7812      	ldrb	r2, [r2, #0]
 800c9b8:	1e10      	subs	r0, r2, #0
 800c9ba:	bf18      	it	ne
 800c9bc:	2001      	movne	r0, #1
 800c9be:	b002      	add	sp, #8
 800c9c0:	4770      	bx	lr
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	e7fb      	b.n	800c9be <__ascii_mbtowc+0x16>
 800c9c6:	f06f 0001 	mvn.w	r0, #1
 800c9ca:	e7f8      	b.n	800c9be <__ascii_mbtowc+0x16>

0800c9cc <__malloc_lock>:
 800c9cc:	4801      	ldr	r0, [pc, #4]	; (800c9d4 <__malloc_lock+0x8>)
 800c9ce:	f7ff b910 	b.w	800bbf2 <__retarget_lock_acquire_recursive>
 800c9d2:	bf00      	nop
 800c9d4:	20000930 	.word	0x20000930

0800c9d8 <__malloc_unlock>:
 800c9d8:	4801      	ldr	r0, [pc, #4]	; (800c9e0 <__malloc_unlock+0x8>)
 800c9da:	f7ff b90b 	b.w	800bbf4 <__retarget_lock_release_recursive>
 800c9de:	bf00      	nop
 800c9e0:	20000930 	.word	0x20000930

0800c9e4 <_read_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d07      	ldr	r5, [pc, #28]	; (800ca04 <_read_r+0x20>)
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	602a      	str	r2, [r5, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f7f4 ffae 	bl	8001954 <_read>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_read_r+0x1e>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_read_r+0x1e>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	20000938 	.word	0x20000938

0800ca08 <__ascii_wctomb>:
 800ca08:	b149      	cbz	r1, 800ca1e <__ascii_wctomb+0x16>
 800ca0a:	2aff      	cmp	r2, #255	; 0xff
 800ca0c:	bf85      	ittet	hi
 800ca0e:	238a      	movhi	r3, #138	; 0x8a
 800ca10:	6003      	strhi	r3, [r0, #0]
 800ca12:	700a      	strbls	r2, [r1, #0]
 800ca14:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca18:	bf98      	it	ls
 800ca1a:	2001      	movls	r0, #1
 800ca1c:	4770      	bx	lr
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4770      	bx	lr

0800ca22 <abort>:
 800ca22:	b508      	push	{r3, lr}
 800ca24:	2006      	movs	r0, #6
 800ca26:	f000 f82b 	bl	800ca80 <raise>
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	f000 f854 	bl	800cad8 <_exit>

0800ca30 <_raise_r>:
 800ca30:	291f      	cmp	r1, #31
 800ca32:	b538      	push	{r3, r4, r5, lr}
 800ca34:	4604      	mov	r4, r0
 800ca36:	460d      	mov	r5, r1
 800ca38:	d904      	bls.n	800ca44 <_raise_r+0x14>
 800ca3a:	2316      	movs	r3, #22
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca46:	b112      	cbz	r2, 800ca4e <_raise_r+0x1e>
 800ca48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca4c:	b94b      	cbnz	r3, 800ca62 <_raise_r+0x32>
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f830 	bl	800cab4 <_getpid_r>
 800ca54:	462a      	mov	r2, r5
 800ca56:	4601      	mov	r1, r0
 800ca58:	4620      	mov	r0, r4
 800ca5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca5e:	f000 b817 	b.w	800ca90 <_kill_r>
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d00a      	beq.n	800ca7c <_raise_r+0x4c>
 800ca66:	1c59      	adds	r1, r3, #1
 800ca68:	d103      	bne.n	800ca72 <_raise_r+0x42>
 800ca6a:	2316      	movs	r3, #22
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	2001      	movs	r0, #1
 800ca70:	e7e7      	b.n	800ca42 <_raise_r+0x12>
 800ca72:	2400      	movs	r4, #0
 800ca74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	4798      	blx	r3
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7e0      	b.n	800ca42 <_raise_r+0x12>

0800ca80 <raise>:
 800ca80:	4b02      	ldr	r3, [pc, #8]	; (800ca8c <raise+0xc>)
 800ca82:	4601      	mov	r1, r0
 800ca84:	6818      	ldr	r0, [r3, #0]
 800ca86:	f7ff bfd3 	b.w	800ca30 <_raise_r>
 800ca8a:	bf00      	nop
 800ca8c:	200002c8 	.word	0x200002c8

0800ca90 <_kill_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d07      	ldr	r5, [pc, #28]	; (800cab0 <_kill_r+0x20>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	f000 f813 	bl	800cac8 <_kill>
 800caa2:	1c43      	adds	r3, r0, #1
 800caa4:	d102      	bne.n	800caac <_kill_r+0x1c>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b103      	cbz	r3, 800caac <_kill_r+0x1c>
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	bd38      	pop	{r3, r4, r5, pc}
 800caae:	bf00      	nop
 800cab0:	20000938 	.word	0x20000938

0800cab4 <_getpid_r>:
 800cab4:	f000 b800 	b.w	800cab8 <_getpid>

0800cab8 <_getpid>:
 800cab8:	4b02      	ldr	r3, [pc, #8]	; (800cac4 <_getpid+0xc>)
 800caba:	2258      	movs	r2, #88	; 0x58
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	f04f 30ff 	mov.w	r0, #4294967295
 800cac2:	4770      	bx	lr
 800cac4:	20000938 	.word	0x20000938

0800cac8 <_kill>:
 800cac8:	4b02      	ldr	r3, [pc, #8]	; (800cad4 <_kill+0xc>)
 800caca:	2258      	movs	r2, #88	; 0x58
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	f04f 30ff 	mov.w	r0, #4294967295
 800cad2:	4770      	bx	lr
 800cad4:	20000938 	.word	0x20000938

0800cad8 <_exit>:
 800cad8:	e7fe      	b.n	800cad8 <_exit>
	...

0800cadc <_init>:
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cade:	bf00      	nop
 800cae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cae2:	bc08      	pop	{r3}
 800cae4:	469e      	mov	lr, r3
 800cae6:	4770      	bx	lr

0800cae8 <_fini>:
 800cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caea:	bf00      	nop
 800caec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caee:	bc08      	pop	{r3}
 800caf0:	469e      	mov	lr, r3
 800caf2:	4770      	bx	lr
