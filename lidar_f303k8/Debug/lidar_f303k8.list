
lidar_f303k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c514  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800c6a8  0800c6a8  0001c6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cadc  0800cadc  00020498  2**0
                  CONTENTS
  4 .ARM          00000000  0800cadc  0800cadc  00020498  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cadc  0800cadc  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cadc  0800cadc  0001cadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae0  0800cae0  0001cae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  0800cae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000498  0800cf7c  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  0800cf7c  000209bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d163  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b2  00000000  00000000  0003d62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000409e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00041aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7b3  00000000  00000000  00042a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151be  00000000  00000000  000611db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c50  00000000  00000000  00076399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011afe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005628  00000000  00000000  0011b03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00120664  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001206a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000498 	.word	0x20000498
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c68c 	.word	0x0800c68c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000049c 	.word	0x2000049c
 80001cc:	0800c68c 	.word	0x0800c68c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_GPIO_Init+0xe0>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2130      	movs	r1, #48	; 0x30
 8000c4a:	4820      	ldr	r0, [pc, #128]	; (8000ccc <MX_GPIO_Init+0xe4>)
 8000c4c:	f001 fae4 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_GPIO_Init+0xe8>)
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 f964 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_GPIO_Init+0xe8>)
 8000c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <MX_GPIO_Init+0xe4>)
 8000c80:	f001 f958 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c84:	2330      	movs	r3, #48	; 0x30
 8000c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_GPIO_Init+0xe4>)
 8000c9c:	f001 f94a 	bl	8001f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2009      	movs	r0, #9
 8000ca6:	f001 f90e 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000caa:	2009      	movs	r0, #9
 8000cac:	f001 f927 	bl	8001efe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2028      	movs	r0, #40	; 0x28
 8000cb6:	f001 f906 	bl	8001ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cba:	2028      	movs	r0, #40	; 0x28
 8000cbc:	f001 f91f 	bl	8001efe <HAL_NVIC_EnableIRQ>

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	10110000 	.word	0x10110000

08000cd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <MX_I2C1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000ce0:	f240 220b 	movw	r2, #523	; 0x20b
 8000ce4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d12:	f001 fabc 	bl	800228e <HAL_I2C_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 faa0 	bl	8001260 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d24:	f001 ff0c 	bl	8002b40 <HAL_I2CEx_ConfigAnalogFilter>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d2e:	f000 fa97 	bl	8001260 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d36:	f001 ff4e 	bl	8002bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d40:	f000 fa8e 	bl	8001260 <Error_Handler>
  }

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200004c8 	.word	0x200004c8
 8000d4c:	40005400 	.word	0x40005400

08000d50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_I2C_MspInit+0x7c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d127      	bne.n	8000dc2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8a:	23c0      	movs	r3, #192	; 0xc0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <HAL_I2C_MspInit+0x84>)
 8000da6:	f001 f8c5 	bl	8001f34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_I2C_MspInit+0x80>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <vl_xshut_init>:

#include "lib_vl53l0x.h"

/* Fonctions utilisateurs */

void vl_xshut_init(VL53L0X_Struct* vl53l0x, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	4613      	mov	r3, r2
 8000de4:	80fb      	strh	r3, [r7, #6]
	vl53l0x->xshut.GPIOx = GPIOx;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	vl53l0x->xshut.GPIO_Pin = GPIO_Pin;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	HAL_GPIO_WritePin(vl53l0x->xshut.GPIOx, vl53l0x->xshut.GPIO_Pin, GPIO_PIN_RESET);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e02:	2200      	movs	r2, #0
 8000e04:	4619      	mov	r1, r3
 8000e06:	f001 fa07 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_Delay(TOGGLE_GPIO_TIME);
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f000 ff5c 	bl	8001cc8 <HAL_Delay>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <vl_sensors_init>:

void vl_sensors_init(VL53L0X_Struct vl53l0x[], I2C_HandleTypeDef* i2c, uint8_t nbOfSensors){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	4613      	mov	r3, r2
 8000e24:	71fb      	strb	r3, [r7, #7]

	for(int i=0; i<nbOfSensors; i++){
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e04b      	b.n	8000ec4 <vl_sensors_init+0xac>
		vl53l0x[i].i2c = i2c;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		HAL_Delay(TOGGLE_GPIO_TIME);
 8000e40:	2014      	movs	r0, #20
 8000e42:	f000 ff41 	bl	8001cc8 <HAL_Delay>

		HAL_GPIO_WritePin(vl53l0x[i].xshut.GPIOx, vl53l0x[i].xshut.GPIO_Pin, GPIO_PIN_SET);
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	f8d3 0198 	ldr.w	r0, [r3, #408]	; 0x198
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	4413      	add	r3, r2
 8000e66:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f001 f9d3 	bl	8002218 <HAL_GPIO_WritePin>
		HAL_Delay(TOGGLE_GPIO_TIME);
 8000e72:	2014      	movs	r0, #20
 8000e74:	f000 ff28 	bl	8001cc8 <HAL_Delay>

		vl53l0x_Init(&vl53l0x[i].VL53L0X_Dev_t, vl53l0x->i2c);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4413      	add	r3, r2
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4610      	mov	r0, r2
 8000e92:	f000 f83a 	bl	8000f0a <vl53l0x_Init>
		vl53l0x_SetDeviceAddress(&vl53l0x[i].VL53L0X_Dev_t, 0x54+i*2);
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	332a      	adds	r3, #42	; 0x2a
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f000 f858 	bl	8000f68 <vl53l0x_SetDeviceAddress>
		HAL_Delay(TOGGLE_GPIO_TIME);
 8000eb8:	2014      	movs	r0, #20
 8000eba:	f000 ff05 	bl	8001cc8 <HAL_Delay>
	for(int i=0; i<nbOfSensors; i++){
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbaf      	blt.n	8000e2c <vl_sensors_init+0x14>
	}
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <vl_clear_it_mask>:

void vl_clear_it_mask(VL53L0X_Struct* vl53l0x){
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	VL53L0X_ClearInterruptMask(&vl53l0x->VL53L0X_Dev_t, 0);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f005 fa1e 	bl	8006324 <VL53L0X_ClearInterruptMask>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <vl_perform_ranging_it>:

uint16_t vl_perform_ranging(VL53L0X_Struct* vl53l0x){
	return vl53l0x_PerformRangingMeasurement(&vl53l0x->VL53L0X_Dev_t);
}

uint16_t vl_perform_ranging_it(VL53L0X_Struct* vl53l0x){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	return vl53l0x_PerformRangingMeasurement_IT(&vl53l0x->VL53L0X_Dev_t);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f848 	bl	8000f90 <vl53l0x_PerformRangingMeasurement_IT>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <vl53l0x_Init>:



/* Fonctions intermédiaires */

uint8_t vl53l0x_Init(VL53L0X_Dev_t* dev, I2C_HandleTypeDef* i2c){
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]

	dev->I2cHandle = i2c;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	dev->I2cDevAddr = 0x52;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2252      	movs	r2, #82	; 0x52
 8000f20:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	dev->comms_speed_khz = 400;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f2a:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
	dev->comms_type = 1;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174

	// Device initialization
	vl53l0x_Device_Initialization(dev);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f845 	bl	8000fc6 <vl53l0x_Device_Initialization>

	// Calibration data loading
	vl53l0x_Calibration_Data_Load(dev);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f861 	bl	8001004 <vl53l0x_Calibration_Data_Load>

	// System settings
	vl53l0x_System_Settings(dev);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f877 	bl	8001036 <vl53l0x_System_Settings>

	/* Polling and interrupt mode */
#if INTERRUPT_MODE == 1
	VL53L0X_SetGpioConfig(dev, 0, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f005 f88c 	bl	8006070 <VL53L0X_SetGpioConfig>
			VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY, VL53L0X_INTERRUPTPOLARITY_HIGH);
#endif

	// Start Measurement
	VL53L0X_StartMeasurement(dev);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f004 fe33 	bl	8005bc4 <VL53L0X_StartMeasurement>

	return 0;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <vl53l0x_SetDeviceAddress>:
	vl53l0x_PerformMeasurement(dev, &VL53L0X_RangingMeasurementData);

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
}

uint8_t vl53l0x_SetDeviceAddress(VL53L0X_Dev_t* dev, uint8_t deviceAddress){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	VL53L0X_SetDeviceAddress(dev, deviceAddress);
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	4619      	mov	r1, r3
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f003 fd97 	bl	8004aac <VL53L0X_SetDeviceAddress>
	dev->I2cDevAddr = deviceAddress;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	78fa      	ldrb	r2, [r7, #3]
 8000f82:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <vl53l0x_PerformRangingMeasurement_IT>:

uint16_t vl53l0x_PerformRangingMeasurement_IT(VL53L0X_Dev_t* dev){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t VL53L0X_RangingMeasurementData;

	if(VL53L0X_ERROR_NONE != (status = VL53L0X_GetRangingMeasurementData(dev, &VL53L0X_RangingMeasurementData))){
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f004 ff0f 	bl	8005dc8 <VL53L0X_GetRangingMeasurementData>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <vl53l0x_PerformRangingMeasurement_IT+0x2c>
		//printf("Error GetRangingMeasurementData() : %d\r\n",status);
		return 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <vl53l0x_PerformRangingMeasurement_IT+0x2e>
	}

	return VL53L0X_RangingMeasurementData.RangeMilliMeter;
 8000fbc:	8a3b      	ldrh	r3, [r7, #16]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <vl53l0x_Device_Initialization>:


/* DEVICE FUNCTIONS */

uint8_t vl53l0x_Device_Initialization(VL53L0X_Dev_t* dev){
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	uint8_t status = VL53L0X_ERROR_NONE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]

	/* DataInit */
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_DataInit(dev))){
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f003 fd82 	bl	8004adc <VL53L0X_DataInit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <vl53l0x_Device_Initialization+0x20>
		//printf("Error DataInit() : %d\r\n",status);
		return 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00a      	b.n	8000ffc <vl53l0x_Device_Initialization+0x36>
	}

	/* StaticInit */
	if(VL53L0X_ERROR_NONE != (status = VL53L0X_StaticInit(dev))){
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f003 fedc 	bl	8004da4 <VL53L0X_StaticInit>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <vl53l0x_Device_Initialization+0x34>
		//printf("Error StaticInit() : %d\r\n",status);
		return 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <vl53l0x_Device_Initialization+0x36>
	}

	return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <vl53l0x_Calibration_Data_Load>:


uint8_t vl53l0x_Calibration_Data_Load(VL53L0X_Dev_t* dev){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	//uint8_t status = VL53L0X_ERROR_NONE;

	/* Reference SPADs */
	uint32_t count; uint8_t isApertureSpads;
	VL53L0X_PerformRefSpadManagement(dev, &count, &isApertureSpads);
 800100c:	f107 020b 	add.w	r2, r7, #11
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f005 f9e6 	bl	80063e8 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetReferenceSpads(dev, count, isApertureSpads);
	//VL53L0X_GetReferenceSpads(dev, &count, &isApertureSpads);

	/* Ref calibration */
    uint8_t VhvSettings, PhaseCal;
	VL53L0X_PerformRefCalibration(dev, &VhvSettings, &PhaseCal);
 800101c:	f107 0209 	add.w	r2, r7, #9
 8001020:	f107 030a 	add.w	r3, r7, #10
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f004 fd50 	bl	8005acc <VL53L0X_PerformRefCalibration>

	/* Offset calibration */

	/* Cross-talk correction */

	return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <vl53l0x_System_Settings>:


uint8_t vl53l0x_System_Settings(VL53L0X_Dev_t* dev){
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	/* Device Mode */
	VL53L0X_SetDeviceMode(dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800103e:	2101      	movs	r1, #1
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f004 f8c1 	bl	80051c8 <VL53L0X_SetDeviceMode>

	/* API range profiles */
	vl53l0x_Range_Profiles(dev);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f805 	bl	8001056 <vl53l0x_Range_Profiles>

	return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <vl53l0x_Range_Profiles>:


uint8_t vl53l0x_Range_Profiles(VL53L0X_Dev_t* dev){
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800105e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001062:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8001064:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001068:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 33000;
 800106a:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800106e:	60fb      	str	r3, [r7, #12]
	uint8_t preRangeVcselPeriod = 14;
 8001070:	230e      	movs	r3, #14
 8001072:	72fb      	strb	r3, [r7, #11]
	uint8_t finalRangeVcselPeriod = 10;
 8001074:	230a      	movs	r3, #10
 8001076:	72bb      	strb	r3, [r7, #10]
		timingBudget = 200000;
		preRangeVcselPeriod = 14;
		finalRangeVcselPeriod = 10;
		break;
	case HIGH_SPEED:
		signalLimit = (FixPoint1616_t)(0.25*65536);
 8001078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800107c:	617b      	str	r3, [r7, #20]
		sigmaLimit = (FixPoint1616_t)(32*65536);
 800107e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001082:	613b      	str	r3, [r7, #16]
		timingBudget = 20000;
 8001084:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001088:	60fb      	str	r3, [r7, #12]
		preRangeVcselPeriod = 14;
 800108a:	230e      	movs	r3, #14
 800108c:	72fb      	strb	r3, [r7, #11]
		finalRangeVcselPeriod = 10;
 800108e:	230a      	movs	r3, #10
 8001090:	72bb      	strb	r3, [r7, #10]
		break;
 8001092:	bf00      	nop
	default:
		//printf("Not Supported");
		break;
	}

	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	2101      	movs	r1, #1
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f004 fbc1 	bl	8005820 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f004 fbbc 	bl	8005820 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, timingBudget);
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f004 f8ea 	bl	8005284 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f004 f90a 	bl	80052d0 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 80010bc:	7abb      	ldrb	r3, [r7, #10]
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f004 f904 	bl	80052d0 <VL53L0X_SetVcselPulsePeriod>

	return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f000 fd8f 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 f86b 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f7ff fd81 	bl	8000be8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010e6:	f000 fa81 	bl	80015ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010ea:	f7ff fdf3 	bl	8000cd4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010ee:	f000 fa4d 	bl	800158c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80010f2:	4824      	ldr	r0, [pc, #144]	; (8001184 <main+0xb0>)
 80010f4:	f000 f8ba 	bl	800126c <RetargetInit>
	vl_xshut_init(&vl53l0x[0], GPIOB, GPIO_PIN_5); 			// XSHUT = PB5
    vl_sensors_init(&vl53l0x[0], &hi2c1, NB_OF_SENSORS);
#endif
#if NB_OF_SENSORS == 2
    //HAL_Delay(500);
    vl_xshut_init(&vl53l0x[0], GPIOB, GPIO_PIN_5); 			// XSHUT = PB5
 80010f8:	2220      	movs	r2, #32
 80010fa:	4923      	ldr	r1, [pc, #140]	; (8001188 <main+0xb4>)
 80010fc:	4823      	ldr	r0, [pc, #140]	; (800118c <main+0xb8>)
 80010fe:	f7ff fe6b 	bl	8000dd8 <vl_xshut_init>
    vl_xshut_init(&vl53l0x[1], GPIOB, GPIO_PIN_4); 			// XSHUT = PB4
 8001102:	2210      	movs	r2, #16
 8001104:	4920      	ldr	r1, [pc, #128]	; (8001188 <main+0xb4>)
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <main+0xbc>)
 8001108:	f7ff fe66 	bl	8000dd8 <vl_xshut_init>
    vl_sensors_init(vl53l0x, &hi2c1, NB_OF_SENSORS);
 800110c:	2202      	movs	r2, #2
 800110e:	4921      	ldr	r1, [pc, #132]	; (8001194 <main+0xc0>)
 8001110:	481e      	ldr	r0, [pc, #120]	; (800118c <main+0xb8>)
 8001112:	f7ff fe81 	bl	8000e18 <vl_sensors_init>
    //results[1] = 0;
#endif

  ///// AX-12 /////
#if AX12_ENABLE
    AX12_Init(&ax12, &huart2, 1, BR_250K);
 8001116:	2307      	movs	r3, #7
 8001118:	2201      	movs	r2, #1
 800111a:	491f      	ldr	r1, [pc, #124]	; (8001198 <main+0xc4>)
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <main+0xc8>)
 800111e:	f000 fb44 	bl	80017aa <AX12_Init>
    AX12_TorqueE_D(&ax12, TRUE);
 8001122:	2101      	movs	r1, #1
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <main+0xc8>)
 8001126:	f000 fbc3 	bl	80018b0 <AX12_TorqueE_D>
    AX12_setMaxTorque(&ax12,50);
 800112a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80011a0 <main+0xcc>
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <main+0xc8>)
 8001130:	f000 fb92 	bl	8001858 <AX12_setMaxTorque>

    AX12_setRangeAngle(&ax12,LIDAR_POS_MIN,LIDAR_POS_MAX);
 8001134:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80011a4 <main+0xd0>
 8001138:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <main+0xc8>)
 800113e:	f000 fb4f 	bl	80017e0 <AX12_setRangeAngle>
    AX12_setMovingSpeed(&ax12, 114);
 8001142:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80011a8 <main+0xd4>
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <main+0xc8>)
 8001148:	f000 fbee 	bl	8001928 <AX12_setMovingSpeed>
    AX12_setPosition(&ax12, 0);
 800114c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80011ac <main+0xd8>
 8001150:	4812      	ldr	r0, [pc, #72]	; (800119c <main+0xc8>)
 8001152:	f000 fbbd 	bl	80018d0 <AX12_setPosition>
    {
	  #if IT_MODE == 0
	  	  LIDAR_Main();

	  #elif IT_MODE == 1
	  	  printf("1: %f 2: %f\r\n", results[0], results[1]);
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <main+0xdc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <main+0xdc>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9cd 2300 	strd	r2, r3, [sp]
 8001176:	4622      	mov	r2, r4
 8001178:	462b      	mov	r3, r5
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <main+0xe0>)
 800117c:	f009 f934 	bl	800a3e8 <iprintf>
 8001180:	e7e9      	b.n	8001156 <main+0x82>
 8001182:	bf00      	nop
 8001184:	20000860 	.word	0x20000860
 8001188:	48000400 	.word	0x48000400
 800118c:	2000051c 	.word	0x2000051c
 8001190:	200006bc 	.word	0x200006bc
 8001194:	200004c8 	.word	0x200004c8
 8001198:	200008e4 	.word	0x200008e4
 800119c:	20000514 	.word	0x20000514
 80011a0:	42480000 	.word	0x42480000
 80011a4:	42c80000 	.word	0x42c80000
 80011a8:	42e40000 	.word	0x42e40000
 80011ac:	00000000 	.word	0x00000000
 80011b0:	200004b4 	.word	0x200004b4
 80011b4:	0800c6a8 	.word	0x0800c6a8

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c2:	2228      	movs	r2, #40	; 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 fc9c 	bl	8009b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fd35 	bl	8002c70 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800120c:	f000 f828 	bl	8001260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fc28 	bl	8003a80 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001236:	f000 f813 	bl	8001260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800123a:	2321      	movs	r3, #33	; 0x21
 800123c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fe4f 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001254:	f000 f804 	bl	8001260 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3758      	adds	r7, #88	; 0x58
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <RetargetInit+0x28>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <RetargetInit+0x2c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6898      	ldr	r0, [r3, #8]
 8001280:	2300      	movs	r3, #0
 8001282:	2202      	movs	r2, #2
 8001284:	2100      	movs	r1, #0
 8001286:	f009 f8c7 	bl	800a418 <setvbuf>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000085c 	.word	0x2000085c
 8001298:	200002c8 	.word	0x200002c8

0800129c <_isatty>:

int _isatty(int fd) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db04      	blt.n	80012b4 <_isatty+0x18>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	dc01      	bgt.n	80012b4 <_isatty+0x18>
    return 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e005      	b.n	80012c0 <_isatty+0x24>

  errno = EBADF;
 80012b4:	f008 fbee 	bl	8009a94 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2209      	movs	r2, #9
 80012bc:	601a      	str	r2, [r3, #0]
  return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_write>:

int _write(int fd, char* ptr, int len) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d002      	beq.n	80012e0 <_write+0x18>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d111      	bne.n	8001304 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <_write+0x54>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	f002 ffc7 	bl	8004280 <HAL_UART_Transmit>
 80012f2:	4603      	mov	r3, r0
 80012f4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <_write+0x38>
      return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	e008      	b.n	8001312 <_write+0x4a>
    else
      return EIO;
 8001300:	2305      	movs	r3, #5
 8001302:	e006      	b.n	8001312 <_write+0x4a>
  }
  errno = EBADF;
 8001304:	f008 fbc6 	bl	8009a94 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	2209      	movs	r2, #9
 800130c:	601a      	str	r2, [r3, #0]
  return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000085c 	.word	0x2000085c

08001320 <_close>:

int _close(int fd) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db04      	blt.n	8001338 <_close+0x18>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	dc01      	bgt.n	8001338 <_close+0x18>
    return 0;
 8001334:	2300      	movs	r3, #0
 8001336:	e006      	b.n	8001346 <_close+0x26>

  errno = EBADF;
 8001338:	f008 fbac 	bl	8009a94 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	2209      	movs	r2, #9
 8001340:	601a      	str	r2, [r3, #0]
  return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800135a:	f008 fb9b 	bl	8009a94 <__errno>
 800135e:	4603      	mov	r3, r0
 8001360:	2209      	movs	r2, #9
 8001362:	601a      	str	r2, [r3, #0]
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_read>:

int _read(int fd, char* ptr, int len) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d110      	bne.n	80013a4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <_read+0x4c>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	2201      	movs	r2, #1
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	f003 f80b 	bl	80043a8 <HAL_UART_Receive>
 8001392:	4603      	mov	r3, r0
 8001394:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <_read+0x30>
      return 1;
 800139c:	2301      	movs	r3, #1
 800139e:	e008      	b.n	80013b2 <_read+0x42>
    else
      return EIO;
 80013a0:	2305      	movs	r3, #5
 80013a2:	e006      	b.n	80013b2 <_read+0x42>
  }
  errno = EBADF;
 80013a4:	f008 fb76 	bl	8009a94 <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2209      	movs	r2, #9
 80013ac:	601a      	str	r2, [r3, #0]
  return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000085c 	.word	0x2000085c

080013c0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db08      	blt.n	80013e2 <_fstat+0x22>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	dc05      	bgt.n	80013e2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013dc:	605a      	str	r2, [r3, #4]
    return 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	e005      	b.n	80013ee <_fstat+0x2e>
  }

  errno = EBADF;
 80013e2:	f008 fb57 	bl	8009a94 <__errno>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2209      	movs	r2, #9
 80013ea:	601a      	str	r2, [r3, #0]
  return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_MspInit+0x44>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_MspInit+0x44>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_MspInit+0x44>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x44>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x44>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 fbfc 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	vl_clear_it_mask(&vl53l0x[1]);
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <EXTI3_IRQHandler+0x2c>)
 800149a:	f7ff fd1c 	bl	8000ed6 <vl_clear_it_mask>
	results[1] = vl_perform_ranging_it(&vl53l0x[1]);
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <EXTI3_IRQHandler+0x2c>)
 80014a0:	f7ff fd26 	bl	8000ef0 <vl_perform_ranging_it>
 80014a4:	4603      	mov	r3, r0
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <EXTI3_IRQHandler+0x30>)
 80014b0:	edc3 7a01 	vstr	s15, [r3, #4]
	//printf("Sensor 1 : %d\r\n", vl_perform_ranging_it(&vl53l0x[1]));
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80014b4:	2008      	movs	r0, #8
 80014b6:	f000 fec7 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200006bc 	.word	0x200006bc
 80014c4:	200004b4 	.word	0x200004b4

080014c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	vl_clear_it_mask(&vl53l0x[0]);
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <EXTI15_10_IRQHandler+0x2c>)
 80014ce:	f7ff fd02 	bl	8000ed6 <vl_clear_it_mask>
	results[0] = vl_perform_ranging_it(&vl53l0x[0]);
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <EXTI15_10_IRQHandler+0x2c>)
 80014d4:	f7ff fd0c 	bl	8000ef0 <vl_perform_ranging_it>
 80014d8:	4603      	mov	r3, r0
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <EXTI15_10_IRQHandler+0x30>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
	//printf("Sensor 2 : %d\r\n", vl_perform_ranging_it(&vl53l0x[0]));
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80014e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014ec:	f000 feac 	bl	8002248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000051c 	.word	0x2000051c
 80014f8:	200004b4 	.word	0x200004b4

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f008 fab2 	bl	8009a94 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20003000 	.word	0x20003000
 800155c:	00000400 	.word	0x00000400
 8001560:	200004bc 	.word	0x200004bc
 8001564:	200009c0 	.word	0x200009c0

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <MX_USART1_UART_Init+0x5c>)
 8001594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART1_UART_Init+0x58>)
 80015d0:	f002 fdb2 	bl	8004138 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015da:	f7ff fe41 	bl	8001260 <Error_Handler>
  }

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000860 	.word	0x20000860
 80015e8:	40013800 	.word	0x40013800

080015ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_USART2_UART_Init+0x54>)
 80015f2:	4a14      	ldr	r2, [pc, #80]	; (8001644 <MX_USART2_UART_Init+0x58>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_USART2_UART_Init+0x54>)
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_USART2_UART_Init+0x5c>)
 80015fa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART2_UART_Init+0x54>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_USART2_UART_Init+0x54>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_USART2_UART_Init+0x54>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x54>)
 8001610:	220c      	movs	r2, #12
 8001612:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_USART2_UART_Init+0x54>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x54>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_USART2_UART_Init+0x54>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x54>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_USART2_UART_Init+0x54>)
 800162e:	f002 fdd1 	bl	80041d4 <HAL_HalfDuplex_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001638:	f7ff fe12 	bl	8001260 <Error_Handler>
  }

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200008e4 	.word	0x200008e4
 8001644:	40004400 	.word	0x40004400
 8001648:	0003d090 	.word	0x0003d090

0800164c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a38      	ldr	r2, [pc, #224]	; (800174c <HAL_UART_MspInit+0x100>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12a      	bne.n	80016c4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_UART_MspInit+0x104>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_UART_MspInit+0x104>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_UART_MspInit+0x104>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <HAL_UART_MspInit+0x104>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a31      	ldr	r2, [pc, #196]	; (8001750 <HAL_UART_MspInit+0x104>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_UART_MspInit+0x104>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800169e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b0:	2307      	movs	r3, #7
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f000 fc39 	bl	8001f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016c2:	e03f      	b.n	8001744 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_UART_MspInit+0x108>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d13a      	bne.n	8001744 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_UART_MspInit+0x104>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_UART_MspInit+0x104>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_UART_MspInit+0x104>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_UART_MspInit+0x104>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_UART_MspInit+0x104>)
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	6153      	str	r3, [r2, #20]
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x104>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80016fe:	2304      	movs	r3, #4
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170e:	2307      	movs	r3, #7
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f000 fc0a 	bl	8001f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001732:	2307      	movs	r3, #7
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f000 fbf8 	bl	8001f34 <HAL_GPIO_Init>
}
 8001744:	bf00      	nop
 8001746:	3730      	adds	r7, #48	; 0x30
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40013800 	.word	0x40013800
 8001750:	40021000 	.word	0x40021000
 8001754:	40004400 	.word	0x40004400

08001758 <Reset_Handler>:
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <LoopForever+0x6>)
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <LoopForever+0xa>)
 8001760:	4a0e      	ldr	r2, [pc, #56]	; (800179c <LoopForever+0xe>)
 8001762:	2300      	movs	r3, #0
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:
 8001766:	58d4      	ldr	r4, [r2, r3]
 8001768:	50c4      	str	r4, [r0, r3]
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:
 800176c:	18c4      	adds	r4, r0, r3
 800176e:	428c      	cmp	r4, r1
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <LoopForever+0x12>)
 8001774:	4c0b      	ldr	r4, [pc, #44]	; (80017a4 <LoopForever+0x16>)
 8001776:	2300      	movs	r3, #0
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:
 800177e:	42a2      	cmp	r2, r4
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>
 8001782:	f7ff fef1 	bl	8001568 <SystemInit>
 8001786:	f008 f98b 	bl	8009aa0 <__libc_init_array>
 800178a:	f7ff fca3 	bl	80010d4 <main>

0800178e <LoopForever>:
 800178e:	e7fe      	b.n	800178e <LoopForever>
 8001790:	20003000 	.word	0x20003000
 8001794:	20000000 	.word	0x20000000
 8001798:	20000498 	.word	0x20000498
 800179c:	0800cae4 	.word	0x0800cae4
 80017a0:	20000498 	.word	0x20000498
 80017a4:	200009bc 	.word	0x200009bc

080017a8 <ADC1_2_IRQHandler>:
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <AX12_Init>:
#include "servoAX12.h"


void AX12_Init(AX12* ax12, UART_HandleTypeDef* uart, uint8_t ID, uint8_t BR){
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	4611      	mov	r1, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]

	/******************************************
	 * Initialisation des paramètre du module *
	 ******************************************/

	ax12->AX_Uart = uart;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	601a      	str	r2, [r3, #0]
	ax12->m_ID = ID;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	711a      	strb	r2, [r3, #4]
	ax12->m_BR = BR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	79ba      	ldrb	r2, [r7, #6]
 80017d0:	715a      	strb	r2, [r3, #5]

}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <AX12_setRangeAngle>:
		ax12->m_BR=BR;
	}
}


void AX12_setRangeAngle(AX12* ax12,float min, float max){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80017ec:	edc7 0a01 	vstr	s1, [r7, #4]
	uint16_t dataMin = min/STEP_ANGLE;
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f7fe fea9 	bl	8000548 <__aeabi_f2d>
 80017f6:	a316      	add	r3, pc, #88	; (adr r3, 8001850 <AX12_setRangeAngle+0x70>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f826 	bl	800084c <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9ce 	bl	8000ba8 <__aeabi_d2uiz>
 800180c:	4603      	mov	r3, r0
 800180e:	82fb      	strh	r3, [r7, #22]
	uint16_t dataMax = max/STEP_ANGLE;
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7fe fe99 	bl	8000548 <__aeabi_f2d>
 8001816:	a30e      	add	r3, pc, #56	; (adr r3, 8001850 <AX12_setRangeAngle+0x70>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7ff f816 	bl	800084c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9be 	bl	8000ba8 <__aeabi_d2uiz>
 800182c:	4603      	mov	r3, r0
 800182e:	82bb      	strh	r3, [r7, #20]
	AX12_sendTram2Byte(ax12,REG_CWAngle,dataMin);
 8001830:	8afb      	ldrh	r3, [r7, #22]
 8001832:	461a      	mov	r2, r3
 8001834:	2106      	movs	r1, #6
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f9c2 	bl	8001bc0 <AX12_sendTram2Byte>
	AX12_sendTram2Byte(ax12,REG_CCWAngle,dataMax);
 800183c:	8abb      	ldrh	r3, [r7, #20]
 800183e:	461a      	mov	r2, r3
 8001840:	2108      	movs	r1, #8
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f9bc 	bl	8001bc0 <AX12_sendTram2Byte>

}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2c54bf16 	.word	0x2c54bf16
 8001854:	3fd2c4b1 	.word	0x3fd2c4b1

08001858 <AX12_setMaxTorque>:
	AX12_sendTram1Byte(ax12,REG_minVolt,min);
	AX12_sendTram1Byte(ax12,REG_maxVolt,max);
}


void AX12_setMaxTorque(AX12* ax12,float max){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)max/TORQUE_PERCENT;
 8001864:	edd7 7a00 	vldr	s15, [r7]
 8001868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186c:	ee17 3a90 	vmov	r3, s15
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe56 	bl	8000524 <__aeabi_i2d>
 8001878:	a30b      	add	r3, pc, #44	; (adr r3, 80018a8 <AX12_setMaxTorque+0x50>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe ffe5 	bl	800084c <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f98d 	bl	8000ba8 <__aeabi_d2uiz>
 800188e:	4603      	mov	r3, r0
 8001890:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_torque,data);
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	461a      	mov	r2, r3
 8001896:	210e      	movs	r1, #14
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f991 	bl	8001bc0 <AX12_sendTram2Byte>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	905eab89 	.word	0x905eab89
 80018ac:	3fb90641 	.word	0x3fb90641

080018b0 <AX12_TorqueE_D>:

uint16_t AX12_getPosition(AX12* ax12){
	return AX12_readTram2byte(ax12,REG_presentPosition);
}

void AX12_TorqueE_D(AX12* ax12, uint8_t state){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
	AX12_sendTram1Byte(ax12,REG_torque_E_D,state);
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	461a      	mov	r2, r3
 80018c0:	2118      	movs	r1, #24
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f966 	bl	8001b94 <AX12_sendTram1Byte>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <AX12_setPosition>:
void AX12_LED_O_N(AX12* ax12,uint8_t state){
	AX12_sendTram1Byte(ax12,REG_LED_E_D,state);
}


void AX12_setPosition(AX12* ax12, float angle){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)angle/STEP_ANGLE;
 80018dc:	edd7 7a00 	vldr	s15, [r7]
 80018e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe1a 	bl	8000524 <__aeabi_i2d>
 80018f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001920 <AX12_setPosition+0x50>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe ffa9 	bl	800084c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f951 	bl	8000ba8 <__aeabi_d2uiz>
 8001906:	4603      	mov	r3, r0
 8001908:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_goalPosition,data);
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	461a      	mov	r2, r3
 800190e:	211e      	movs	r1, #30
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f955 	bl	8001bc0 <AX12_sendTram2Byte>
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2c54bf16 	.word	0x2c54bf16
 8001924:	3fd2c4b1 	.word	0x3fd2c4b1

08001928 <AX12_setMovingSpeed>:


void AX12_setMovingSpeed(AX12* ax12, float rpm){
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data = (uint16_t)rpm/STEP_SPEED;
 8001934:	edd7 7a00 	vldr	s15, [r7]
 8001938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193c:	ee17 3a90 	vmov	r3, s15
 8001940:	b29b      	uxth	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdee 	bl	8000524 <__aeabi_i2d>
 8001948:	a30b      	add	r3, pc, #44	; (adr r3, 8001978 <AX12_setMovingSpeed+0x50>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe ff7d 	bl	800084c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f925 	bl	8000ba8 <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	81fb      	strh	r3, [r7, #14]
	AX12_sendTram2Byte(ax12,REG_limitSpeed,data);
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	461a      	mov	r2, r3
 8001966:	2120      	movs	r1, #32
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f929 	bl	8001bc0 <AX12_sendTram2Byte>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	c83ed809 	.word	0xc83ed809
 800197c:	3fbc8721 	.word	0x3fbc8721

08001980 <AX12_sendData>:
	AX12_sendTram1Byte(ax12,REG_lockEEPROM,state);
}



void AX12_sendData(AX12* ax12 ,uint8_t size ,uint8_t instruction ,uint8_t nbParametre ,... ){
 8001980:	b408      	push	{r3}
 8001982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
 8001990:	4613      	mov	r3, r2
 8001992:	70bb      	strb	r3, [r7, #2]
 8001994:	466b      	mov	r3, sp
 8001996:	4698      	mov	r8, r3
	/****************************************
	 * Création d'une liste qui contien 	*
	 * tous les paramètre après nbParametre *
	 ****************************************/
	va_list ap;
	va_start(ap,nbParametre);
 8001998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199c:	60bb      	str	r3, [r7, #8]

	/**************************
	 * Création de la requête *
	 **************************/
	uint8_t data[size];
 800199e:	78fc      	ldrb	r4, [r7, #3]
 80019a0:	4623      	mov	r3, r4
 80019a2:	3b01      	subs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	b2e0      	uxtb	r0, r4
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	00cb      	lsls	r3, r1, #3
 80019b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019ba:	00c2      	lsls	r2, r0, #3
 80019bc:	b2e0      	uxtb	r0, r4
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	00cb      	lsls	r3, r1, #3
 80019cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019d0:	00c2      	lsls	r2, r0, #3
 80019d2:	4623      	mov	r3, r4
 80019d4:	3307      	adds	r3, #7
 80019d6:	08db      	lsrs	r3, r3, #3
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	ebad 0d03 	sub.w	sp, sp, r3
 80019de:	ab02      	add	r3, sp, #8
 80019e0:	3300      	adds	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
	data[0] = 0xFF;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	22ff      	movs	r2, #255	; 0xff
 80019e8:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	22ff      	movs	r2, #255	; 0xff
 80019ee:	705a      	strb	r2, [r3, #1]
	data[2] = ax12->m_ID;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	791a      	ldrb	r2, [r3, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	709a      	strb	r2, [r3, #2]
	data[3] = 2+nbParametre;
 80019f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019fc:	3302      	adds	r3, #2
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	70da      	strb	r2, [r3, #3]
	data[4] = instruction;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	78ba      	ldrb	r2, [r7, #2]
 8001a08:	711a      	strb	r2, [r3, #4]

	/************************************
	 * nous implémentons les paramètres *
	 * (registre, paramètre, ...)	    *
	 ************************************/
	for(uint8_t i = 0; i < nbParametre;i++){
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
 8001a0e:	e00b      	b.n	8001a28 <AX12_sendData+0xa8>
		data[5+i] = (uint8_t)va_arg(ap,int);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1d1a      	adds	r2, r3, #4
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	b2d1      	uxtb	r1, r2
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < nbParametre;i++){
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	3301      	adds	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
 8001a28:	7dfa      	ldrb	r2, [r7, #23]
 8001a2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3ee      	bcc.n	8001a10 <AX12_sendData+0x90>

	/********************************
	 * nous vérifions quel checksum *
	 * nous allons calculer 		*
	 ********************************/
	switch(nbParametre){
 8001a32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d867      	bhi.n	8001b0a <AX12_sendData+0x18a>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <AX12_sendData+0xc0>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001a79 	.word	0x08001a79
 8001a48:	08001aa5 	.word	0x08001aa5
 8001a4c:	08001ad5 	.word	0x08001ad5
	case(0):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],0,0,0);break;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	7898      	ldrb	r0, [r3, #2]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	78d9      	ldrb	r1, [r3, #3]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	791a      	ldrb	r2, [r3, #4]
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	1e5c      	subs	r4, r3, #1
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2300      	movs	r3, #0
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f000 f861 	bl	8001b30 <AX12_calculChecksum>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	551a      	strb	r2, [r3, r4]
 8001a76:	e049      	b.n	8001b0c <AX12_sendData+0x18c>
	case(1):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],0,0);break;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	7898      	ldrb	r0, [r3, #2]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	78d9      	ldrb	r1, [r3, #3]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	791a      	ldrb	r2, [r3, #4]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	795d      	ldrb	r5, [r3, #5]
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	1e5c      	subs	r4, r3, #1
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	462b      	mov	r3, r5
 8001a96:	f000 f84b 	bl	8001b30 <AX12_calculChecksum>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	551a      	strb	r2, [r3, r4]
 8001aa2:	e033      	b.n	8001b0c <AX12_sendData+0x18c>
	case(2):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],0);break;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	7898      	ldrb	r0, [r3, #2]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	78d9      	ldrb	r1, [r3, #3]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	791d      	ldrb	r5, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	795e      	ldrb	r6, [r3, #5]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	799b      	ldrb	r3, [r3, #6]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	1e54      	subs	r4, r2, #1
 8001abc:	2200      	movs	r2, #0
 8001abe:	9201      	str	r2, [sp, #4]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4633      	mov	r3, r6
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	f000 f833 	bl	8001b30 <AX12_calculChecksum>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	551a      	strb	r2, [r3, r4]
 8001ad2:	e01b      	b.n	8001b0c <AX12_sendData+0x18c>
	case(3):data[size-1] = AX12_calculChecksum(data[2],data[3],data[4],data[5],data[6],data[7]);break;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	7898      	ldrb	r0, [r3, #2]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	78dd      	ldrb	r5, [r3, #3]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	791e      	ldrb	r6, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 c005 	ldrb.w	ip, [r3, #5]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	799b      	ldrb	r3, [r3, #6]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	79d2      	ldrb	r2, [r2, #7]
 8001aee:	78f9      	ldrb	r1, [r7, #3]
 8001af0:	1e4c      	subs	r4, r1, #1
 8001af2:	9201      	str	r2, [sp, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4663      	mov	r3, ip
 8001af8:	4632      	mov	r2, r6
 8001afa:	4629      	mov	r1, r5
 8001afc:	f000 f818 	bl	8001b30 <AX12_calculChecksum>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	551a      	strb	r2, [r3, r4]
 8001b08:	e000      	b.n	8001b0c <AX12_sendData+0x18c>
	default : break;
 8001b0a:	bf00      	nop
	}

	/************************
	 * envoie de la requête *
	 ************************/
	HAL_UART_Transmit(ax12->AX_Uart, (uint8_t*)&data, size, 500);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b1a:	f002 fbb1 	bl	8004280 <HAL_UART_Transmit>
 8001b1e:	46c5      	mov	sp, r8
}
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b2a:	b001      	add	sp, #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <AX12_calculChecksum>:


uint8_t AX12_calculChecksum(uint8_t id, uint8_t length,uint8_t instruction,uint8_t reg,uint8_t param1, uint8_t param2){
 8001b30:	b490      	push	{r4, r7}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4604      	mov	r4, r0
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4623      	mov	r3, r4
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	4603      	mov	r3, r0
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	460b      	mov	r3, r1
 8001b48:	717b      	strb	r3, [r7, #5]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	713b      	strb	r3, [r7, #4]
	uint16_t checksum = id + length + instruction + reg + param1 + param2;
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	793b      	ldrb	r3, [r7, #4]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	7e3b      	ldrb	r3, [r7, #24]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	7f3b      	ldrb	r3, [r7, #28]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	81fb      	strh	r3, [r7, #14]
	checksum=~checksum;
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	81fb      	strh	r3, [r7, #14]
	checksum&=0xFF;
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)checksum;
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	b2db      	uxtb	r3, r3
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc90      	pop	{r4, r7}
 8001b92:	4770      	bx	lr

08001b94 <AX12_sendTram1Byte>:

void AX12_sendTram1Byte(AX12* ax12, uint8_t reg,uint8_t data){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	70bb      	strb	r3, [r7, #2]
	AX12_sendData(ax12 ,SIZE_WRITE_8, write ,2,reg,data);
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	9201      	str	r2, [sp, #4]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2302      	movs	r3, #2
 8001bae:	2203      	movs	r2, #3
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fee4 	bl	8001980 <AX12_sendData>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <AX12_sendTram2Byte>:

void AX12_sendTram2Byte(AX12* ax12,uint8_t reg ,uint16_t data){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af04      	add	r7, sp, #16
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	803b      	strh	r3, [r7, #0]
	uint8_t data1 = (uint8_t)(data>>8);
 8001bd0:	883b      	ldrh	r3, [r7, #0]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	73fb      	strb	r3, [r7, #15]
	uint8_t data2 = (uint8_t)data&0xFF;
 8001bd8:	883b      	ldrh	r3, [r7, #0]
 8001bda:	73bb      	strb	r3, [r7, #14]
	AX12_sendData(ax12 ,SIZE_WRITE_16, write ,3,reg,data2,data1);
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	7bba      	ldrb	r2, [r7, #14]
 8001be0:	7bf9      	ldrb	r1, [r7, #15]
 8001be2:	9102      	str	r1, [sp, #8]
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2303      	movs	r3, #3
 8001bea:	2203      	movs	r2, #3
 8001bec:	2109      	movs	r1, #9
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fec6 	bl	8001980 <AX12_sendData>
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x28>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x28>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f94f 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fbee 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000

08001c28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f967 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f92f 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000968 	.word	0x20000968

08001cb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000968 	.word	0x20000968

08001cc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	e14e      	b.n	80021e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8140 	beq.w	80021dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d00b      	beq.n	8001f7c <HAL_GPIO_Init+0x48>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d007      	beq.n	8001f7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f70:	2b11      	cmp	r3, #17
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d130      	bne.n	8001fde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	f003 0201 	and.w	r2, r3, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0xea>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b12      	cmp	r3, #18
 800201c:	d123      	bne.n	8002066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0203 	and.w	r2, r3, #3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 809a 	beq.w	80021dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a54      	ldr	r2, [pc, #336]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b52      	ldr	r3, [pc, #328]	; (8002200 <HAL_GPIO_Init+0x2cc>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ea:	d013      	beq.n	8002114 <HAL_GPIO_Init+0x1e0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a46      	ldr	r2, [pc, #280]	; (8002208 <HAL_GPIO_Init+0x2d4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00d      	beq.n	8002110 <HAL_GPIO_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a45      	ldr	r2, [pc, #276]	; (800220c <HAL_GPIO_Init+0x2d8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0x1d8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a44      	ldr	r2, [pc, #272]	; (8002210 <HAL_GPIO_Init+0x2dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_GPIO_Init+0x1d4>
 8002104:	2303      	movs	r3, #3
 8002106:	e006      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002108:	2305      	movs	r3, #5
 800210a:	e004      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 800210c:	2302      	movs	r3, #2
 800210e:	e002      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_GPIO_Init+0x1e2>
 8002114:	2300      	movs	r3, #0
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	f002 0203 	and.w	r2, r2, #3
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	4093      	lsls	r3, r2
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002126:	4937      	ldr	r1, [pc, #220]	; (8002204 <HAL_GPIO_Init+0x2d0>)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002182:	4a24      	ldr	r2, [pc, #144]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_GPIO_Init+0x2e0>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f47f aea9 	bne.w	8001f44 <HAL_GPIO_Init+0x10>
  }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	371c      	adds	r7, #28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000
 8002208:	48000400 	.word	0x48000400
 800220c:	48000800 	.word	0x48000800
 8002210:	48000c00 	.word	0x48000c00
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002234:	e002      	b.n	800223c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f806 	bl	8002278 <HAL_GPIO_EXTI_Callback>
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e081      	b.n	80023a4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fe fd4b 	bl	8000d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2224      	movs	r2, #36	; 0x24
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e006      	b.n	8002316 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002314:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d104      	bne.n	8002328 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	ea42 0103 	orr.w	r1, r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69d9      	ldr	r1, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	460b      	mov	r3, r1
 80023ba:	817b      	strh	r3, [r7, #10]
 80023bc:	4613      	mov	r3, r2
 80023be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	f040 80da 	bne.w	8002582 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_I2C_Master_Transmit+0x30>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0d3      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023e4:	f7ff fc64 	bl	8001cb0 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2319      	movs	r3, #25
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f9e6 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0be      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2210      	movs	r2, #16
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	893a      	ldrh	r2, [r7, #8]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2bff      	cmp	r3, #255	; 0xff
 8002436:	d90e      	bls.n	8002456 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <HAL_I2C_Master_Transmit+0x1e0>)
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fb48 	bl	8002ae4 <I2C_TransferConfig>
 8002454:	e06c      	b.n	8002530 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_I2C_Master_Transmit+0x1e0>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fb37 	bl	8002ae4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002476:	e05b      	b.n	8002530 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9e3 	bl	8002848 <I2C_WaitOnTXISFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e07b      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d034      	beq.n	8002530 <HAL_I2C_Master_Transmit+0x184>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d130      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f975 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e04d      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	; 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 faeb 	bl	8002ae4 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fada 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d19e      	bne.n	8002478 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	6a39      	ldr	r1, [r7, #32]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f9c2 	bl	80028c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01a      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_I2C_Master_Transmit+0x1e4>)
 8002562:	400b      	ands	r3, r1
 8002564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	80002000 	.word	0x80002000
 8002590:	fe00e800 	.word	0xfe00e800

08002594 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
 80025a4:	4613      	mov	r3, r2
 80025a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	f040 80db 	bne.w	800276c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2C_Master_Receive+0x30>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0d4      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025cc:	f7ff fb70 	bl	8001cb0 <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2319      	movs	r3, #25
 80025d8:	2201      	movs	r2, #1
 80025da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f8f2 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0bf      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2222      	movs	r2, #34	; 0x22
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2210      	movs	r2, #16
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	893a      	ldrh	r2, [r7, #8]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2bff      	cmp	r3, #255	; 0xff
 800261e:	d90e      	bls.n	800263e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	b2da      	uxtb	r2, r3
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	4b52      	ldr	r3, [pc, #328]	; (8002778 <HAL_I2C_Master_Receive+0x1e4>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa54 	bl	8002ae4 <I2C_TransferConfig>
 800263c:	e06d      	b.n	800271a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_I2C_Master_Receive+0x1e4>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fa43 	bl	8002ae4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800265e:	e05c      	b.n	800271a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	6a39      	ldr	r1, [r7, #32]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f96b 	bl	8002940 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e07c      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d034      	beq.n	800271a <HAL_I2C_Master_Receive+0x186>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d130      	bne.n	800271a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2200      	movs	r2, #0
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f880 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e04d      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2bff      	cmp	r3, #255	; 0xff
 80026da:	d90e      	bls.n	80026fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	22ff      	movs	r2, #255	; 0xff
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f9f6 	bl	8002ae4 <I2C_TransferConfig>
 80026f8:	e00f      	b.n	800271a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	2300      	movs	r3, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f9e5 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d19d      	bne.n	8002660 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	6a39      	ldr	r1, [r7, #32]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f8cd 	bl	80028c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e01a      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_I2C_Master_Receive+0x1e8>)
 800274c:	400b      	ands	r3, r1
 800274e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	80002400 	.word	0x80002400
 800277c:	fe00e800 	.word	0xfe00e800

08002780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d103      	bne.n	800279e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d007      	beq.n	80027bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	619a      	str	r2, [r3, #24]
  }
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	e022      	b.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d01e      	beq.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7ff fa65 	bl	8001cb0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e00f      	b.n	8002840 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d0cd      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002854:	e02c      	b.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8dc 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02a      	b.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d01e      	beq.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff fa1d 	bl	8001cb0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d1cb      	bne.n	8002856 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d4:	e028      	b.n	8002928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f89c 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e026      	b.n	8002938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7ff f9e1 	bl	8001cb0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d113      	bne.n	8002928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e007      	b.n	8002938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d1cf      	bne.n	80028d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800294c:	e055      	b.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f860 	bl	8002a18 <I2C_IsAcknowledgeFailed>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e053      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b20      	cmp	r3, #32
 800296e:	d129      	bne.n	80029c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d105      	bne.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e03f      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2220      	movs	r2, #32
 8002990:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800299e:	400b      	ands	r3, r1
 80029a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e022      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c4:	f7ff f974 	bl	8001cb0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d302      	bcc.n	80029da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e007      	b.n	8002a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d1a2      	bne.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	fe00e800 	.word	0xfe00e800

08002a18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d151      	bne.n	8002ad6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a32:	e022      	b.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d01e      	beq.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7ff f938 	bl	8001cb0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <I2C_IsAcknowledgeFailed+0x3a>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e02e      	b.n	8002ad8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d1d5      	bne.n	8002a34 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fe71 	bl	8002780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002aaa:	400b      	ands	r3, r1
 8002aac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fe00e800 	.word	0xfe00e800

08002ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	4613      	mov	r3, r2
 8002af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	0d5b      	lsrs	r3, r3, #21
 8002b00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <I2C_TransferConfig+0x58>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	ea02 0103 	and.w	r1, r2, r3
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b14:	7a7b      	ldrb	r3, [r7, #9]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	03ff63ff 	.word	0x03ff63ff

08002b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d138      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e032      	b.n	8002bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6819      	ldr	r1, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d139      	bne.n	8002c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e033      	b.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e000      	b.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
  }
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f000 bef4 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 816a 	beq.w	8002f6e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c9a:	4bb3      	ldr	r3, [pc, #716]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca6:	4bb0      	ldr	r3, [pc, #704]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d159      	bne.n	8002d66 <HAL_RCC_OscConfig+0xf6>
 8002cb2:	4bad      	ldr	r3, [pc, #692]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d152      	bne.n	8002d66 <HAL_RCC_OscConfig+0xf6>
 8002cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x82>
 8002cec:	4b9e      	ldr	r3, [pc, #632]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0xae>
 8002cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d0e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d1a:	4b93      	ldr	r3, [pc, #588]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d32:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 810c 	beq.w	8002f6c <HAL_RCC_OscConfig+0x2fc>
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8106 	bne.w	8002f6c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f000 be86 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x110>
 8002d72:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e030      	b.n	8002de2 <HAL_RCC_OscConfig+0x172>
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x134>
 8002d8a:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a76      	ldr	r2, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01e      	b.n	8002de2 <HAL_RCC_OscConfig+0x172>
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x15a>
 8002db0:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6c      	ldr	r2, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x172>
 8002dca:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de2:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	495d      	ldr	r1, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d059      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe ff56 	bl	8001cb0 <HAL_GetTick>
 8002e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7fe ff51 	bl	8001cb0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d902      	bls.n	8002e20 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f000 be29 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 8002e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1e2>
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x20e>
 8002e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e92:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ab      	beq.n	8002e0a <HAL_RCC_OscConfig+0x19a>
 8002eb2:	e05c      	b.n	8002f6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fefc 	bl	8001cb0 <HAL_GetTick>
 8002eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebe:	f7fe fef7 	bl	8001cb0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d902      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f000 bdcf 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 8002ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ee8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_OscConfig+0x296>
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x2c2>
 8002f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f46:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ab      	bne.n	8002ebe <HAL_RCC_OscConfig+0x24e>
 8002f66:	e002      	b.n	8002f6e <HAL_RCC_OscConfig+0x2fe>
 8002f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 816f 	beq.w	800325c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f7e:	4bd0      	ldr	r3, [pc, #832]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f8a:	4bcd      	ldr	r3, [pc, #820]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d16c      	bne.n	8003070 <HAL_RCC_OscConfig+0x400>
 8002f96:	4bca      	ldr	r3, [pc, #808]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d166      	bne.n	8003070 <HAL_RCC_OscConfig+0x400>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002fb4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x362>
 8002fcc:	4bbc      	ldr	r3, [pc, #752]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	e013      	b.n	8002ffa <HAL_RCC_OscConfig+0x38a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ff6:	4bb2      	ldr	r3, [pc, #712]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003000:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800300c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_RCC_OscConfig+0x3cc>
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f000 bd1b 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	21f8      	movs	r1, #248	; 0xf8
 800304c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003054:	fa91 f1a1 	rbit	r1, r1
 8003058:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800305c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003060:	fab1 f181 	clz	r1, r1
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	408b      	lsls	r3, r1
 8003068:	4995      	ldr	r1, [pc, #596]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e0f5      	b.n	800325c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8085 	beq.w	8003186 <HAL_RCC_OscConfig+0x516>
 800307c:	2301      	movs	r3, #1
 800307e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800308e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800309c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	2301      	movs	r3, #1
 80030a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fe02 	bl	8001cb0 <HAL_GetTick>
 80030ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fdfd 	bl	8001cb0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	f000 bcd5 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_RCC_OscConfig+0x488>
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	e013      	b.n	8003120 <HAL_RCC_OscConfig+0x4b0>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800310a:	2302      	movs	r3, #2
 800310c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003110:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2202      	movs	r2, #2
 8003122:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003126:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800312a:	fa92 f2a2 	rbit	r2, r2
 800312e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003132:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f042 0220 	orr.w	r2, r2, #32
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f002 021f 	and.w	r2, r2, #31
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0af      	beq.n	80030b2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	21f8      	movs	r1, #248	; 0xf8
 8003162:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800316a:	fa91 f1a1 	rbit	r1, r1
 800316e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003172:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003176:	fab1 f181 	clz	r1, r1
 800317a:	b2c9      	uxtb	r1, r1
 800317c:	408b      	lsls	r3, r1
 800317e:	4950      	ldr	r1, [pc, #320]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e06a      	b.n	800325c <HAL_RCC_OscConfig+0x5ec>
 8003186:	2301      	movs	r3, #1
 8003188:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003198:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	461a      	mov	r2, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fd7d 	bl	8001cb0 <HAL_GetTick>
 80031b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031bc:	f7fe fd78 	bl	8001cb0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f000 bc50 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 80031d2:	2302      	movs	r3, #2
 80031d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0x592>
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	e013      	b.n	800322a <HAL_RCC_OscConfig+0x5ba>
 8003202:	2302      	movs	r3, #2
 8003204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003214:	2302      	movs	r3, #2
 8003216:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800321a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2202      	movs	r2, #2
 800322c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003230:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003234:	fa92 f2a2 	rbit	r2, r2
 8003238:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800323c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003240:	fab2 f282 	clz	r2, r2
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f002 021f 	and.w	r2, r2, #31
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1af      	bne.n	80031bc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80da 	beq.w	8003420 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d069      	beq.n	800334a <HAL_RCC_OscConfig+0x6da>
 8003276:	2301      	movs	r3, #1
 8003278:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x654>)
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	461a      	mov	r2, r3
 800329c:	2301      	movs	r3, #1
 800329e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fe fd06 	bl	8001cb0 <HAL_GetTick>
 80032a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a8:	e00e      	b.n	80032c8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fe fd01 	bl	8001cb0 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d906      	bls.n	80032c8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e3d9      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	10908120 	.word	0x10908120
 80032c8:	2302      	movs	r3, #2
 80032ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fa93 f2a3 	rbit	r2, r3
 80032ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003308:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	4ba5      	ldr	r3, [pc, #660]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800330c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003312:	2102      	movs	r1, #2
 8003314:	6019      	str	r1, [r3, #0]
 8003316:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f1a3 	rbit	r1, r3
 8003320:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003324:	6019      	str	r1, [r3, #0]
  return result;
 8003326:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0b0      	beq.n	80032aa <HAL_RCC_OscConfig+0x63a>
 8003348:	e06a      	b.n	8003420 <HAL_RCC_OscConfig+0x7b0>
 800334a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003360:	601a      	str	r2, [r3, #0]
  return result;
 8003362:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003366:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCC_OscConfig+0x934>)
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe fc98 	bl	8001cb0 <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e009      	b.n	800339a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003386:	f7fe fc93 	bl	8001cb0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e36b      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 800339a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800339e:	2202      	movs	r2, #2
 80033a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e2:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80033e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033ea:	2102      	movs	r1, #2
 80033ec:	6019      	str	r1, [r3, #0]
 80033ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f1a3 	rbit	r1, r3
 80033f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033fc:	6019      	str	r1, [r3, #0]
  return result;
 80033fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1b2      	bne.n	8003386 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8158 	beq.w	80036e0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d112      	bne.n	8003468 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b57      	ldr	r3, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a56      	ldr	r2, [pc, #344]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]
 800344e:	4b54      	ldr	r3, [pc, #336]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b4f      	ldr	r3, [pc, #316]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11a      	bne.n	80034aa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fe fc16 	bl	8001cb0 <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e009      	b.n	800349e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe fc11 	bl	8001cb0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e2e9      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ef      	beq.n	800348a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x852>
 80034b4:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a39      	ldr	r2, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e02f      	b.n	8003522 <HAL_RCC_OscConfig+0x8b2>
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x876>
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	e01d      	b.n	8003522 <HAL_RCC_OscConfig+0x8b2>
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b05      	cmp	r3, #5
 80034ee:	d10c      	bne.n	800350a <HAL_RCC_OscConfig+0x89a>
 80034f0:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	e00b      	b.n	8003522 <HAL_RCC_OscConfig+0x8b2>
 800350a:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a24      	ldr	r2, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	6213      	str	r3, [r2, #32]
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d06b      	beq.n	8003604 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fe fbc0 	bl	8001cb0 <HAL_GetTick>
 8003530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fbbb 	bl	8001cb0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e291      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 800354e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003552:	2202      	movs	r2, #2
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800356a:	2202      	movs	r2, #2
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800357c:	601a      	str	r2, [r3, #0]
  return result;
 800357e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003582:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d109      	bne.n	80035ac <HAL_RCC_OscConfig+0x93c>
 8003598:	4b01      	ldr	r3, [pc, #4]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	e014      	b.n	80035c8 <HAL_RCC_OscConfig+0x958>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	10908120 	.word	0x10908120
 80035a8:	40007000 	.word	0x40007000
 80035ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4bbb      	ldr	r3, [pc, #748]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035cc:	2102      	movs	r1, #2
 80035ce:	6011      	str	r1, [r2, #0]
 80035d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	fa92 f1a2 	rbit	r1, r2
 80035da:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035de:	6011      	str	r1, [r2, #0]
  return result;
 80035e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d099      	beq.n	8003536 <HAL_RCC_OscConfig+0x8c6>
 8003602:	e063      	b.n	80036cc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe fb54 	bl	8001cb0 <HAL_GetTick>
 8003608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe fb4f 	bl	8001cb0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e225      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 8003626:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800362a:	2202      	movs	r2, #2
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	fa93 f2a3 	rbit	r2, r3
 8003638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003642:	2202      	movs	r2, #2
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003654:	601a      	str	r2, [r3, #0]
  return result;
 8003656:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800365a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d102      	bne.n	8003676 <HAL_RCC_OscConfig+0xa06>
 8003670:	4b90      	ldr	r3, [pc, #576]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	e00d      	b.n	8003692 <HAL_RCC_OscConfig+0xa22>
 8003676:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800367a:	2202      	movs	r2, #2
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003696:	2102      	movs	r1, #2
 8003698:	6011      	str	r1, [r2, #0]
 800369a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fa92 f1a2 	rbit	r1, r2
 80036a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036a8:	6011      	str	r1, [r2, #0]
  return result;
 80036aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f002 021f 	and.w	r2, r2, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1a0      	bne.n	800360e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b77      	ldr	r3, [pc, #476]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4a76      	ldr	r2, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 81c2 	beq.w	8003a70 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ec:	4b71      	ldr	r3, [pc, #452]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	f000 819c 	beq.w	8003a32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b02      	cmp	r3, #2
 8003702:	f040 8114 	bne.w	800392e <HAL_RCC_OscConfig+0xcbe>
 8003706:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800370a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800371e:	601a      	str	r2, [r3, #0]
  return result;
 8003720:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003724:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fab8 	bl	8001cb0 <HAL_GetTick>
 8003740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	e009      	b.n	800375a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fe fab3 	bl	8001cb0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e18b      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 800375a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800375e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	fa93 f2a3 	rbit	r2, r3
 800376e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003772:	601a      	str	r2, [r3, #0]
  return result;
 8003774:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003778:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_RCC_OscConfig+0xb24>
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	e01b      	b.n	80037cc <HAL_RCC_OscConfig+0xb5c>
 8003794:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f2a3 	rbit	r2, r3
 80037a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	fa92 f1a2 	rbit	r1, r2
 80037e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037e4:	6011      	str	r1, [r2, #0]
  return result;
 80037e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	fab2 f282 	clz	r2, r2
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f042 0220 	orr.w	r2, r2, #32
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f002 021f 	and.w	r2, r2, #31
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d19e      	bne.n	8003746 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	430b      	orrs	r3, r1
 800381e:	4925      	ldr	r1, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800382c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800383c:	601a      	str	r2, [r3, #0]
  return result;
 800383e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003842:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe fa29 	bl	8001cb0 <HAL_GetTick>
 800385e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003862:	e009      	b.n	8003878 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fa24 	bl	8001cb0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0fc      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 8003878:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800387c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003890:	601a      	str	r2, [r3, #0]
  return result;
 8003892:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0xc48>
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e01e      	b.n	80038f0 <HAL_RCC_OscConfig+0xc80>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	fa92 f1a2 	rbit	r1, r2
 8003904:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003908:	6011      	str	r1, [r2, #0]
  return result;
 800390a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d09b      	beq.n	8003864 <HAL_RCC_OscConfig+0xbf4>
 800392c:	e0a0      	b.n	8003a70 <HAL_RCC_OscConfig+0xe00>
 800392e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003932:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003946:	601a      	str	r2, [r3, #0]
  return result;
 8003948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	461a      	mov	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe f9a4 	bl	8001cb0 <HAL_GetTick>
 8003968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396c:	e009      	b.n	8003982 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396e:	f7fe f99f 	bl	8001cb0 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e077      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 8003982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399a:	601a      	str	r2, [r3, #0]
  return result;
 800399c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0xd4c>
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e01b      	b.n	80039f4 <HAL_RCC_OscConfig+0xd84>
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f107 0320 	add.w	r3, r7, #32
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	fa93 f2a3 	rbit	r2, r3
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f107 0318 	add.w	r3, r7, #24
 80039da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f107 0318 	add.w	r3, r7, #24
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f107 0210 	add.w	r2, r7, #16
 80039f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	f107 0210 	add.w	r2, r7, #16
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	fa92 f1a2 	rbit	r1, r2
 8003a08:	f107 020c 	add.w	r2, r7, #12
 8003a0c:	6011      	str	r1, [r2, #0]
  return result;
 8003a0e:	f107 020c 	add.w	r2, r7, #12
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	fab2 f282 	clz	r2, r2
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	f042 0220 	orr.w	r2, r2, #32
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	f002 021f 	and.w	r2, r2, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d19e      	bne.n	800396e <HAL_RCC_OscConfig+0xcfe>
 8003a30:	e01e      	b.n	8003a70 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e018      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b09e      	sub	sp, #120	; 0x78
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e162      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b90      	ldr	r3, [pc, #576]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b8d      	ldr	r3, [pc, #564]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	498b      	ldr	r1, [pc, #556]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b89      	ldr	r3, [pc, #548]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e14a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b82      	ldr	r3, [pc, #520]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	497f      	ldr	r1, [pc, #508]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80dc 	beq.w	8003cac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d13c      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xf6>
 8003afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xa6>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	e00f      	b.n	8003b46 <HAL_RCC_ClockConfig+0xc6>
 8003b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	667b      	str	r3, [r7, #100]	; 0x64
 8003b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b38:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d17b      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0f3      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d13c      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x178>
 8003b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x128>
 8003ba2:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x148>
 8003ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc4:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0220 	orr.w	r2, r2, #32
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13a      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b2      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x1a0>
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e00d      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1bc>
 8003c20:	2302      	movs	r3, #2
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	61ba      	str	r2, [r7, #24]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	617a      	str	r2, [r7, #20]
  return result;
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e079      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	491a      	ldr	r1, [pc, #104]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c7c:	f7fe f818 	bl	8001cb0 <HAL_GetTick>
 8003c80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fe f814 	bl	8001cb0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e061      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 020c 	and.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1eb      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d214      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4906      	ldr	r1, [pc, #24]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e040      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	491a      	ldr	r1, [pc, #104]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4912      	ldr	r1, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d22:	f000 f829 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d26:	4601      	mov	r1, r0
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	22f0      	movs	r2, #240	; 0xf0
 8003d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	fa92 f2a2 	rbit	r2, r2
 8003d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	fab2 f282 	clz	r2, r2
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	40d3      	lsrs	r3, r2
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <HAL_RCC_ClockConfig+0x2ec>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_RCC_ClockConfig+0x2f0>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_RCC_ClockConfig+0x2f4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd ff66 	bl	8001c28 <HAL_InitTick>
  
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3778      	adds	r7, #120	; 0x78
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	0800c6c0 	.word	0x0800c6c0
 8003d70:	20000000 	.word	0x20000000
 8003d74:	20000004 	.word	0x20000004

08003d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x30>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x36>
 8003da6:	e03c      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003daa:	623b      	str	r3, [r7, #32]
      break;
 8003dac:	e03c      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003db4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003db8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	fa92 f2a2 	rbit	r2, r2
 8003dc0:	607a      	str	r2, [r7, #4]
  return result;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	40d3      	lsrs	r3, r2
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	220f      	movs	r2, #15
 8003ddc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	60fa      	str	r2, [r7, #12]
  return result;
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	40d3      	lsrs	r3, r2
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e00:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	e004      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	623b      	str	r3, [r7, #32]
      break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e24:	623b      	str	r3, [r7, #32]
      break;
 8003e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	372c      	adds	r7, #44	; 0x2c
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	007a1200 	.word	0x007a1200
 8003e40:	0800c6d8 	.word	0x0800c6d8
 8003e44:	0800c6e8 	.word	0x0800c6e8
 8003e48:	003d0900 	.word	0x003d0900

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000000 	.word	0x20000000

08003e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e6a:	f7ff ffef 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	fa92 f2a2 	rbit	r2, r2
 8003e84:	603a      	str	r2, [r7, #0]
  return result;
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	40d3      	lsrs	r3, r2
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	0800c6d0 	.word	0x0800c6d0

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003eae:	f7ff ffcd 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ebc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ec0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	fa92 f2a2 	rbit	r2, r2
 8003ec8:	603a      	str	r2, [r7, #0]
  return result;
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	fab2 f282 	clz	r2, r2
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	40d3      	lsrs	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	0800c6d0 	.word	0x0800c6d0

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b092      	sub	sp, #72	; 0x48
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80cd 	beq.w	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f10:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10e      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1c:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4a82      	ldr	r2, [pc, #520]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f26:	61d3      	str	r3, [r2, #28]
 8003f28:	4b80      	ldr	r3, [pc, #512]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f46:	4b7a      	ldr	r3, [pc, #488]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a79      	ldr	r2, [pc, #484]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f52:	f7fd fead 	bl	8001cb0 <HAL_GetTick>
 8003f56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fd fea9 	bl	8001cb0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b64      	cmp	r3, #100	; 0x64
 8003f66:	d901      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0db      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f78:	4b6c      	ldr	r3, [pc, #432]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d07d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d076      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b55      	ldr	r3, [pc, #340]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fe8:	4a50      	ldr	r2, [pc, #320]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d045      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fe5a 	bl	8001cb0 <HAL_GetTick>
 8003ffc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fd fe56 	bl	8001cb0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e086      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004016:	2302      	movs	r3, #2
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	2302      	movs	r3, #2
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	61fb      	str	r3, [r7, #28]
  return result;
 800402e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d102      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	e007      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800404a:	2302      	movs	r3, #2
 800404c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	4b35      	ldr	r3, [pc, #212]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2202      	movs	r2, #2
 800405c:	613a      	str	r2, [r7, #16]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	fa92 f2a2 	rbit	r2, r2
 8004064:	60fa      	str	r2, [r7, #12]
  return result;
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	fab2 f282 	clz	r2, r2
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	f002 021f 	and.w	r2, r2, #31
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f202 	lsl.w	r2, r1, r2
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0bd      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004084:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4926      	ldr	r1, [pc, #152]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004092:	4313      	orrs	r3, r2
 8004094:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a22      	ldr	r2, [pc, #136]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	491a      	ldr	r1, [pc, #104]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f023 0210 	bic.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4912      	ldr	r1, [pc, #72]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	490b      	ldr	r1, [pc, #44]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004100:	4313      	orrs	r3, r2
 8004102:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800411e:	4313      	orrs	r3, r2
 8004120:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3748      	adds	r7, #72	; 0x48
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
 8004134:	10908100 	.word	0x10908100

08004138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e040      	b.n	80041cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fa76 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	; 0x24
 8004164:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9e8 	bl	800454c <UART_SetConfig>
 800417c:	4603      	mov	r3, r0
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e022      	b.n	80041cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fb12 	bl	80047b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fb99 	bl	80048fc <UART_CheckIdleState>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e048      	b.n	8004278 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fd fa28 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f99a 	bl	800454c <UART_SetConfig>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e02a      	b.n	8004278 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fac4 	bl	80047b8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800424e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0208 	orr.w	r2, r2, #8
 800425e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb43 	bl	80048fc <UART_CheckIdleState>
 8004276:	4603      	mov	r3, r0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 8082 	bne.w	800439e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_UART_Transmit+0x26>
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07a      	b.n	80043a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Transmit+0x38>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e073      	b.n	80043a0 <HAL_UART_Transmit+0x120>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2221      	movs	r2, #33	; 0x21
 80042cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ce:	f7fd fcef 	bl	8001cb0 <HAL_GetTick>
 80042d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d108      	bne.n	8004300 <HAL_UART_Transmit+0x80>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e003      	b.n	8004308 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004310:	e02d      	b.n	800436e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fb36 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e039      	b.n	80043a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	881a      	ldrh	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433e:	b292      	uxth	r2, r2
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	3302      	adds	r3, #2
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e008      	b.n	800435c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	781a      	ldrb	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b292      	uxth	r2, r2
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1cb      	bne.n	8004312 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	2140      	movs	r1, #64	; 0x40
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fb02 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e005      	b.n	80043a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043bc:	2b20      	cmp	r3, #32
 80043be:	f040 80bf 	bne.w	8004540 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_UART_Receive+0x26>
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0b7      	b.n	8004542 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Receive+0x38>
 80043dc:	2302      	movs	r3, #2
 80043de:	e0b0      	b.n	8004542 <HAL_UART_Receive+0x19a>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2222      	movs	r2, #34	; 0x22
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fc:	f7fd fc58 	bl	8001cb0 <HAL_GetTick>
 8004400:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	88fa      	ldrh	r2, [r7, #6]
 8004406:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d10e      	bne.n	800443a <HAL_UART_Receive+0x92>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_UART_Receive+0x88>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800442a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800442e:	e02d      	b.n	800448c <HAL_UART_Receive+0xe4>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004438:	e028      	b.n	800448c <HAL_UART_Receive+0xe4>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <HAL_UART_Receive+0xb6>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Receive+0xac>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004452:	e01b      	b.n	800448c <HAL_UART_Receive+0xe4>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	227f      	movs	r2, #127	; 0x7f
 8004458:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800445c:	e016      	b.n	800448c <HAL_UART_Receive+0xe4>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004466:	d10d      	bne.n	8004484 <HAL_UART_Receive+0xdc>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <HAL_UART_Receive+0xd2>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	227f      	movs	r2, #127	; 0x7f
 8004474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004478:	e008      	b.n	800448c <HAL_UART_Receive+0xe4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	223f      	movs	r2, #63	; 0x3f
 800447e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004482:	e003      	b.n	800448c <HAL_UART_Receive+0xe4>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004492:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d108      	bne.n	80044b0 <HAL_UART_Receive+0x108>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e003      	b.n	80044b8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044c0:	e033      	b.n	800452a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2120      	movs	r1, #32
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fa5e 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e032      	b.n	8004542 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	8a7b      	ldrh	r3, [r7, #18]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	3302      	adds	r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e00d      	b.n	8004518 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004502:	b29b      	uxth	r3, r3
 8004504:	b2da      	uxtb	r2, r3
 8004506:	8a7b      	ldrh	r3, [r7, #18]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	4013      	ands	r3, r2
 800450c:	b2da      	uxtb	r2, r3
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3301      	adds	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1c5      	bne.n	80044c2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b8a      	ldr	r3, [pc, #552]	; (80047a0 <UART_SetConfig+0x254>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	430b      	orrs	r3, r1
 8004582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a78      	ldr	r2, [pc, #480]	; (80047a4 <UART_SetConfig+0x258>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d120      	bne.n	800460a <UART_SetConfig+0xbe>
 80045c8:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <UART_SetConfig+0x25c>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d817      	bhi.n	8004604 <UART_SetConfig+0xb8>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <UART_SetConfig+0x90>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	080045f9 	.word	0x080045f9
 80045e4:	080045ff 	.word	0x080045ff
 80045e8:	080045f3 	.word	0x080045f3
 80045ec:	2300      	movs	r3, #0
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e01d      	b.n	800462e <UART_SetConfig+0xe2>
 80045f2:	2302      	movs	r3, #2
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e01a      	b.n	800462e <UART_SetConfig+0xe2>
 80045f8:	2304      	movs	r3, #4
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e017      	b.n	800462e <UART_SetConfig+0xe2>
 80045fe:	2308      	movs	r3, #8
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e014      	b.n	800462e <UART_SetConfig+0xe2>
 8004604:	2310      	movs	r3, #16
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e011      	b.n	800462e <UART_SetConfig+0xe2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a67      	ldr	r2, [pc, #412]	; (80047ac <UART_SetConfig+0x260>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d102      	bne.n	800461a <UART_SetConfig+0xce>
 8004614:	2300      	movs	r3, #0
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e009      	b.n	800462e <UART_SetConfig+0xe2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a64      	ldr	r2, [pc, #400]	; (80047b0 <UART_SetConfig+0x264>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d102      	bne.n	800462a <UART_SetConfig+0xde>
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e001      	b.n	800462e <UART_SetConfig+0xe2>
 800462a:	2310      	movs	r3, #16
 800462c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004636:	d15b      	bne.n	80046f0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004638:	7ffb      	ldrb	r3, [r7, #31]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d827      	bhi.n	800468e <UART_SetConfig+0x142>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0xf8>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	08004679 	.word	0x08004679
 8004650:	0800468f 	.word	0x0800468f
 8004654:	0800467f 	.word	0x0800467f
 8004658:	0800468f 	.word	0x0800468f
 800465c:	0800468f 	.word	0x0800468f
 8004660:	0800468f 	.word	0x0800468f
 8004664:	08004687 	.word	0x08004687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7ff fbfc 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 800466c:	61b8      	str	r0, [r7, #24]
        break;
 800466e:	e013      	b.n	8004698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7ff fc1a 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8004674:	61b8      	str	r0, [r7, #24]
        break;
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <UART_SetConfig+0x268>)
 800467a:	61bb      	str	r3, [r7, #24]
        break;
 800467c:	e00c      	b.n	8004698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7ff fb7b 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8004682:	61b8      	str	r0, [r7, #24]
        break;
 8004684:	e008      	b.n	8004698 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468a:	61bb      	str	r3, [r7, #24]
        break;
 800468c:	e004      	b.n	8004698 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77bb      	strb	r3, [r7, #30]
        break;
 8004696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d074      	beq.n	8004788 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b0f      	cmp	r3, #15
 80046ba:	d916      	bls.n	80046ea <UART_SetConfig+0x19e>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c2:	d212      	bcs.n	80046ea <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f023 030f 	bic.w	r3, r3, #15
 80046cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	b29a      	uxth	r2, r3
 80046da:	89fb      	ldrh	r3, [r7, #14]
 80046dc:	4313      	orrs	r3, r2
 80046de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	89fa      	ldrh	r2, [r7, #14]
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e04e      	b.n	8004788 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77bb      	strb	r3, [r7, #30]
 80046ee:	e04b      	b.n	8004788 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046f0:	7ffb      	ldrb	r3, [r7, #31]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d827      	bhi.n	8004746 <UART_SetConfig+0x1fa>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x1b0>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7ff fba0 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 8004724:	61b8      	str	r0, [r7, #24]
        break;
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7ff fbbe 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <UART_SetConfig+0x268>)
 8004732:	61bb      	str	r3, [r7, #24]
        break;
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7ff fb1f 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 800473a:	61b8      	str	r0, [r7, #24]
        break;
 800473c:	e008      	b.n	8004750 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e004      	b.n	8004750 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77bb      	strb	r3, [r7, #30]
        break;
 800474e:	bf00      	nop
    }

    if (pclk != 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085a      	lsrs	r2, r3, #1
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	b29b      	uxth	r3, r3
 800476a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	d908      	bls.n	8004784 <UART_SetConfig+0x238>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d204      	bcs.n	8004784 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004794:	7fbb      	ldrb	r3, [r7, #30]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	efff69f3 	.word	0xefff69f3
 80047a4:	40013800 	.word	0x40013800
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40004400 	.word	0x40004400
 80047b0:	40004800 	.word	0x40004800
 80047b4:	007a1200 	.word	0x007a1200

080047b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01a      	beq.n	80048ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b6:	d10a      	bne.n	80048ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af02      	add	r7, sp, #8
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800490c:	f7fd f9d0 	bl	8001cb0 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d10e      	bne.n	800493e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f82d 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e023      	b.n	8004986 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b04      	cmp	r3, #4
 800494a:	d10e      	bne.n	800496a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800494c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f817 	bl	800498e <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e00d      	b.n	8004986 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499e:	e05e      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d05a      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a8:	f7fd f982 	bl	8001cb0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <UART_WaitOnFlagUntilTimeout+0x30>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11b      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e043      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02c      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d124      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a2c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00f      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d091      	beq.n	80049a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fcbb 	bl	8006412 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	218a      	movs	r1, #138	; 0x8a
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f004 feb4 	bl	8009834 <VL53L0X_WrByte>
 8004acc:	4603      	mov	r3, r0
 8004ace:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	b096      	sub	sp, #88	; 0x58
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004aea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004af2:	2200      	movs	r2, #0
 8004af4:	2188      	movs	r1, #136	; 0x88
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f004 fe9c 	bl	8009834 <VL53L0X_WrByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b10:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004b1a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a9e      	ldr	r2, [pc, #632]	; (8004d9c <VL53L0X_DataInit+0x2c0>)
 8004b22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a9d      	ldr	r2, [pc, #628]	; (8004da0 <VL53L0X_DataInit+0x2c4>)
 8004b2a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fab4 	bl	80050a8 <VL53L0X_GetDeviceParameters>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004b46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d112      	bne.n	8004b74 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004b52:	2300      	movs	r3, #0
 8004b54:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f103 0410 	add.w	r4, r3, #16
 8004b5c:	f107 0510 	add.w	r5, r7, #16
 8004b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2264      	movs	r2, #100	; 0x64
 8004b78:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004b82:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b8c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004b96:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f004 fe44 	bl	8009834 <VL53L0X_WrByte>
 8004bac:	4603      	mov	r3, r0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004bba:	2201      	movs	r2, #1
 8004bbc:	21ff      	movs	r1, #255	; 0xff
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f004 fe38 	bl	8009834 <VL53L0X_WrByte>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f004 fe2c 	bl	8009834 <VL53L0X_WrByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004bea:	f107 030f 	add.w	r3, r7, #15
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2191      	movs	r1, #145	; 0x91
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f004 fea0 	bl	8009938 <VL53L0X_RdByte>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004c0e:	2201      	movs	r2, #1
 8004c10:	2100      	movs	r1, #0
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f004 fe0e 	bl	8009834 <VL53L0X_WrByte>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c26:	2200      	movs	r2, #0
 8004c28:	21ff      	movs	r1, #255	; 0xff
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f004 fe02 	bl	8009834 <VL53L0X_WrByte>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2180      	movs	r1, #128	; 0x80
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f004 fdf6 	bl	8009834 <VL53L0X_WrByte>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c56:	2300      	movs	r3, #0
 8004c58:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5a:	e014      	b.n	8004c86 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004c5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d114      	bne.n	8004c8e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fd27 	bl	80056c0 <VL53L0X_SetLimitCheckEnable>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	3301      	adds	r3, #1
 8004c84:	653b      	str	r3, [r7, #80]	; 0x50
 8004c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	dde7      	ble.n	8004c5c <VL53L0X_DataInit+0x180>
 8004c8c:	e000      	b.n	8004c90 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004c8e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004c90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fd0f 	bl	80056c0 <VL53L0X_SetLimitCheckEnable>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004ca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fd03 	bl	80056c0 <VL53L0X_SetLimitCheckEnable>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004cc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2104      	movs	r1, #4
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fcf7 	bl	80056c0 <VL53L0X_SetLimitCheckEnable>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004cd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d107      	bne.n	8004cf0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2105      	movs	r1, #5
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fceb 	bl	80056c0 <VL53L0X_SetLimitCheckEnable>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004cf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d108      	bne.n	8004d0a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cf8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fd8e 	bl	8005820 <VL53L0X_SetLimitCheckValue>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d16:	2101      	movs	r1, #1
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fd81 	bl	8005820 <VL53L0X_SetLimitCheckValue>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d108      	bne.n	8004d3e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d2c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004d30:	2102      	movs	r1, #2
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fd74 	bl	8005820 <VL53L0X_SetLimitCheckValue>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004d46:	2200      	movs	r2, #0
 8004d48:	2103      	movs	r1, #3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fd68 	bl	8005820 <VL53L0X_SetLimitCheckValue>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10f      	bne.n	8004d7e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004d66:	22ff      	movs	r2, #255	; 0xff
 8004d68:	2101      	movs	r1, #1
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f004 fd62 	bl	8009834 <VL53L0X_WrByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004d8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3758      	adds	r7, #88	; 0x58
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bdb0      	pop	{r4, r5, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	00016b85 	.word	0x00016b85
 8004da0:	000970a4 	.word	0x000970a4

08004da4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b09e      	sub	sp, #120	; 0x78
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004db2:	f107 031c 	add.w	r3, r7, #28
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 fea2 	bl	8009b04 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004de0:	2101      	movs	r1, #1
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f002 fa6b 	bl	80072be <VL53L0X_get_info_from_device>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004df4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d80d      	bhi.n	8004e24 <VL53L0X_StaticInit+0x80>
 8004e08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d102      	bne.n	8004e16 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d806      	bhi.n	8004e24 <VL53L0X_StaticInit+0x80>
 8004e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d90b      	bls.n	8004e3c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004e24:	f107 0218 	add.w	r2, r7, #24
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fcea 	bl	8006808 <VL53L0X_perform_ref_spad_management>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004e3a:	e009      	b.n	8004e50 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004e3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e40:	461a      	mov	r2, r3
 8004e42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 feeb 	bl	8006c20 <VL53L0X_set_reference_spads>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004e50:	4b94      	ldr	r3, [pc, #592]	; (80050a4 <VL53L0X_StaticInit+0x300>)
 8004e52:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004e54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10f      	bne.n	8004e7c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004e62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004e66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e76:	e001      	b.n	8004e7c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004e78:	4b8a      	ldr	r3, [pc, #552]	; (80050a4 <VL53L0X_StaticInit+0x300>)
 8004e7a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004e84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f003 fdbe 	bl	8008a08 <VL53L0X_load_tuning_settings>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 f8e3 	bl	8006070 <VL53L0X_SetGpioConfig>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eb0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d121      	bne.n	8004efc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004eb8:	2201      	movs	r2, #1
 8004eba:	21ff      	movs	r1, #255	; 0xff
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f004 fcb9 	bl	8009834 <VL53L0X_WrByte>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004ec8:	f107 031a 	add.w	r3, r7, #26
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2184      	movs	r1, #132	; 0x84
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f004 fd5b 	bl	800998c <VL53L0X_RdWord>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	21ff      	movs	r1, #255	; 0xff
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f004 fca3 	bl	8009834 <VL53L0X_WrByte>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004efc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004f04:	8b7b      	ldrh	r3, [r7, #26]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004f10:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004f18:	f107 031c 	add.w	r3, r7, #28
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8c2 	bl	80050a8 <VL53L0X_GetDeviceParameters>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004f2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d110      	bne.n	8004f54 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004f32:	f107 0319 	add.w	r3, r7, #25
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f984 	bl	8005246 <VL53L0X_GetFractionEnable>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004f44:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004f4c:	7e7a      	ldrb	r2, [r7, #25]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004f54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10e      	bne.n	8004f7a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f103 0410 	add.w	r4, r3, #16
 8004f62:	f107 051c 	add.w	r5, r7, #28
 8004f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d111      	bne.n	8004fa6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004f82:	f107 0319 	add.w	r3, r7, #25
 8004f86:	461a      	mov	r2, r3
 8004f88:	2101      	movs	r1, #1
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f004 fcd4 	bl	8009938 <VL53L0X_RdByte>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004f96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f9e:	7e7a      	ldrb	r2, [r7, #25]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004fa6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9bc 	bl	8005330 <VL53L0X_SetSequenceStepEnable>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d107      	bne.n	8004fd6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2102      	movs	r1, #2
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9b0 	bl	8005330 <VL53L0X_SetSequenceStepEnable>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004fd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fe6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004fee:	f107 0313 	add.w	r3, r7, #19
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f982 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005002:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800500a:	7cfa      	ldrb	r2, [r7, #19]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005012:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800501a:	f107 0313 	add.w	r3, r7, #19
 800501e:	461a      	mov	r2, r3
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f96c 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800502e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005036:	7cfa      	ldrb	r2, [r7, #19]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800503e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	461a      	mov	r2, r3
 800504c:	2103      	movs	r1, #3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f002 feb6 	bl	8007dc0 <get_sequence_step_timeout>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800505a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800506a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005072:	f107 030c 	add.w	r3, r7, #12
 8005076:	461a      	mov	r2, r3
 8005078:	2104      	movs	r1, #4
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f002 fea0 	bl	8007dc0 <get_sequence_step_timeout>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005086:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005096:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800509a:	4618      	mov	r0, r3
 800509c:	3770      	adds	r7, #112	; 0x70
 800509e:	46bd      	mov	sp, r7
 80050a0:	bdb0      	pop	{r4, r5, r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8b0 	bl	8005220 <VL53L0X_GetDeviceMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80050c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d107      	bne.n	80050dc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa78 	bl	80055c8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80050d8:	4603      	mov	r3, r0
 80050da:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80050dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80050ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d107      	bne.n	8005102 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3310      	adds	r3, #16
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 faae 	bl	800565a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80050fe:	4603      	mov	r3, r0
 8005100:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d107      	bne.n	800511a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fcb8 	bl	8004a86 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005116:	4603      	mov	r3, r0
 8005118:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800511a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d134      	bne.n	800518c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	e02a      	b.n	800517e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d12a      	bne.n	8005186 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	b299      	uxth	r1, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3308      	adds	r3, #8
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	3304      	adds	r3, #4
 8005140:	461a      	mov	r2, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fbce 	bl	80058e4 <VL53L0X_GetLimitCheckValue>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	4313      	orrs	r3, r2
 8005150:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d117      	bne.n	800518a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	b299      	uxth	r1, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3318      	adds	r3, #24
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	4413      	add	r3, r2
 8005166:	461a      	mov	r2, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fb35 	bl	80057d8 <VL53L0X_GetLimitCheckEnable>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	4313      	orrs	r3, r2
 8005176:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	3301      	adds	r3, #1
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b05      	cmp	r3, #5
 8005182:	ddd1      	ble.n	8005128 <VL53L0X_GetDeviceParameters+0x80>
 8005184:	e002      	b.n	800518c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800518a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800518c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d107      	bne.n	80051a4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	333c      	adds	r3, #60	; 0x3c
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fc30 	bl	8005a00 <VL53L0X_GetWrapAroundCheckEnable>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80051a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f879 	bl	80052aa <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80051b8:	4603      	mov	r3, r0
 80051ba:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b15      	cmp	r3, #21
 80051dc:	bf8c      	ite	hi
 80051de:	2201      	movhi	r2, #1
 80051e0:	2200      	movls	r2, #0
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d10e      	bne.n	8005206 <VL53L0X_SetDeviceMode+0x3e>
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <VL53L0X_SetDeviceMode+0x54>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	741a      	strb	r2, [r3, #16]
		break;
 8005204:	e001      	b.n	800520a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005206:	23f8      	movs	r3, #248	; 0xf8
 8005208:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800520a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	0030000b 	.word	0x0030000b

08005220 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7c1a      	ldrb	r2, [r3, #16]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	2109      	movs	r1, #9
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f004 fb6d 	bl	8009938 <VL53L0X_RdByte>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	b2da      	uxtb	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f003 fa26 	bl	80086e6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800529a:	4603      	mov	r3, r0
 800529c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800529e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f003 faf3 	bl	80088a6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80052c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
 80052dc:	4613      	mov	r3, r2
 80052de:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80052e4:	78ba      	ldrb	r2, [r7, #2]
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f002 ff3b 	bl	8008166 <VL53L0X_set_vcsel_pulse_period>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80052f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	460b      	mov	r3, r1
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005312:	7afb      	ldrb	r3, [r7, #11]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	4619      	mov	r1, r3
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f003 f9ad 	bl	8008678 <VL53L0X_get_vcsel_pulse_period>
 800531e:	4603      	mov	r3, r0
 8005320:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
 800533c:	4613      	mov	r3, r2
 800533e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005340:	2300      	movs	r3, #0
 8005342:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800534c:	f107 030f 	add.w	r3, r7, #15
 8005350:	461a      	mov	r2, r3
 8005352:	2101      	movs	r1, #1
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f004 faef 	bl	8009938 <VL53L0X_RdByte>
 800535a:	4603      	mov	r3, r0
 800535c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005362:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d15a      	bne.n	8005420 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800536a:	78bb      	ldrb	r3, [r7, #2]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d12b      	bne.n	80053c8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d825      	bhi.n	80053c2 <VL53L0X_SetSequenceStepEnable+0x92>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	08005391 	.word	0x08005391
 8005380:	0800539b 	.word	0x0800539b
 8005384:	080053a5 	.word	0x080053a5
 8005388:	080053af 	.word	0x080053af
 800538c:	080053b9 	.word	0x080053b9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005390:	7dbb      	ldrb	r3, [r7, #22]
 8005392:	f043 0310 	orr.w	r3, r3, #16
 8005396:	75bb      	strb	r3, [r7, #22]
				break;
 8005398:	e043      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800539a:	7dbb      	ldrb	r3, [r7, #22]
 800539c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80053a0:	75bb      	strb	r3, [r7, #22]
				break;
 80053a2:	e03e      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80053a4:	7dbb      	ldrb	r3, [r7, #22]
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	75bb      	strb	r3, [r7, #22]
				break;
 80053ac:	e039      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80053ae:	7dbb      	ldrb	r3, [r7, #22]
 80053b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b4:	75bb      	strb	r3, [r7, #22]
				break;
 80053b6:	e034      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80053b8:	7dbb      	ldrb	r3, [r7, #22]
 80053ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053be:	75bb      	strb	r3, [r7, #22]
				break;
 80053c0:	e02f      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80053c2:	23fc      	movs	r3, #252	; 0xfc
 80053c4:	75fb      	strb	r3, [r7, #23]
 80053c6:	e02c      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d825      	bhi.n	800541a <VL53L0X_SetSequenceStepEnable+0xea>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053e9 	.word	0x080053e9
 80053d8:	080053f3 	.word	0x080053f3
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	08005407 	.word	0x08005407
 80053e4:	08005411 	.word	0x08005411
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80053e8:	7dbb      	ldrb	r3, [r7, #22]
 80053ea:	f023 0310 	bic.w	r3, r3, #16
 80053ee:	75bb      	strb	r3, [r7, #22]
				break;
 80053f0:	e017      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80053f2:	7dbb      	ldrb	r3, [r7, #22]
 80053f4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80053f8:	75bb      	strb	r3, [r7, #22]
				break;
 80053fa:	e012      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80053fc:	7dbb      	ldrb	r3, [r7, #22]
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	75bb      	strb	r3, [r7, #22]
				break;
 8005404:	e00d      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005406:	7dbb      	ldrb	r3, [r7, #22]
 8005408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540c:	75bb      	strb	r3, [r7, #22]
				break;
 800540e:	e008      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005410:	7dbb      	ldrb	r3, [r7, #22]
 8005412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005416:	75bb      	strb	r3, [r7, #22]
				break;
 8005418:	e003      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800541a:	23fc      	movs	r3, #252	; 0xfc
 800541c:	75fb      	strb	r3, [r7, #23]
 800541e:	e000      	b.n	8005422 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005420:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	7dba      	ldrb	r2, [r7, #22]
 8005426:	429a      	cmp	r2, r3
 8005428:	d01e      	beq.n	8005468 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800542a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d107      	bne.n	8005442 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8005432:	7dbb      	ldrb	r3, [r7, #22]
 8005434:	461a      	mov	r2, r3
 8005436:	2101      	movs	r1, #1
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f004 f9fb 	bl	8009834 <VL53L0X_WrByte>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005442:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d103      	bne.n	8005452 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	7dba      	ldrb	r2, [r7, #22]
 800544e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005460:	6939      	ldr	r1, [r7, #16]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff ff0e 	bl	8005284 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005468:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	72fb      	strb	r3, [r7, #11]
 8005482:	4613      	mov	r3, r2
 8005484:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005490:	7afb      	ldrb	r3, [r7, #11]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d836      	bhi.n	8005504 <sequence_step_enabled+0x90>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <sequence_step_enabled+0x28>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054b1 	.word	0x080054b1
 80054a0:	080054c3 	.word	0x080054c3
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054e7 	.word	0x080054e7
 80054ac:	080054f9 	.word	0x080054f9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80054b0:	7abb      	ldrb	r3, [r7, #10]
 80054b2:	111b      	asrs	r3, r3, #4
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	701a      	strb	r2, [r3, #0]
		break;
 80054c0:	e022      	b.n	8005508 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80054c2:	7abb      	ldrb	r3, [r7, #10]
 80054c4:	10db      	asrs	r3, r3, #3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	701a      	strb	r2, [r3, #0]
		break;
 80054d2:	e019      	b.n	8005508 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80054d4:	7abb      	ldrb	r3, [r7, #10]
 80054d6:	109b      	asrs	r3, r3, #2
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	701a      	strb	r2, [r3, #0]
		break;
 80054e4:	e010      	b.n	8005508 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80054e6:	7abb      	ldrb	r3, [r7, #10]
 80054e8:	119b      	asrs	r3, r3, #6
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	701a      	strb	r2, [r3, #0]
		break;
 80054f6:	e007      	b.n	8005508 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80054f8:	7abb      	ldrb	r3, [r7, #10]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	701a      	strb	r2, [r3, #0]
		break;
 8005502:	e001      	b.n	8005508 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005504:	23fc      	movs	r3, #252	; 0xfc
 8005506:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005508:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800550c:	4618      	mov	r0, r3
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800552a:	f107 030e 	add.w	r3, r7, #14
 800552e:	461a      	mov	r2, r3
 8005530:	2101      	movs	r1, #1
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f004 fa00 	bl	8009938 <VL53L0X_RdByte>
 8005538:	4603      	mov	r3, r0
 800553a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800553c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005544:	7bba      	ldrb	r2, [r7, #14]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ff92 	bl	8005474 <sequence_step_enabled>
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d108      	bne.n	800556e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800555c:	7bba      	ldrb	r2, [r7, #14]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	3302      	adds	r3, #2
 8005562:	2101      	movs	r1, #1
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff85 	bl	8005474 <sequence_step_enabled>
 800556a:	4603      	mov	r3, r0
 800556c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d108      	bne.n	8005588 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8005576:	7bba      	ldrb	r2, [r7, #14]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	3301      	adds	r3, #1
 800557c:	2102      	movs	r1, #2
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ff78 	bl	8005474 <sequence_step_enabled>
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005590:	7bba      	ldrb	r2, [r7, #14]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3303      	adds	r3, #3
 8005596:	2103      	movs	r1, #3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff6b 	bl	8005474 <sequence_step_enabled>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80055a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80055aa:	7bba      	ldrb	r2, [r7, #14]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3304      	adds	r3, #4
 80055b0:	2104      	movs	r1, #4
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ff5e 	bl	8005474 <sequence_step_enabled>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	461a      	mov	r2, r3
 80055dc:	21f8      	movs	r1, #248	; 0xf8
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f004 f9d4 	bl	800998c <VL53L0X_RdWord>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80055e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d108      	bne.n	8005602 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80055f0:	f107 0308 	add.w	r3, r7, #8
 80055f4:	461a      	mov	r2, r3
 80055f6:	2104      	movs	r1, #4
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f004 f9ff 	bl	80099fc <VL53L0X_RdDWord>
 80055fe:	4603      	mov	r3, r0
 8005600:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800560a:	89bb      	ldrh	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	89ba      	ldrh	r2, [r7, #12]
 8005614:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005624:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7f1b      	ldrb	r3, [r3, #28]
 8005642:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	7bba      	ldrb	r2, [r7, #14]
 8005648:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800564a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b086      	sub	sp, #24
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005664:	2300      	movs	r3, #0
 8005666:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005668:	f107 030e 	add.w	r3, r7, #14
 800566c:	461a      	mov	r2, r3
 800566e:	2120      	movs	r1, #32
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f004 f98b 	bl	800998c <VL53L0X_RdWord>
 8005676:	4603      	mov	r3, r0
 8005678:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800567a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d118      	bne.n	80056b4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	771a      	strb	r2, [r3, #28]
 800569a:	e00b      	b.n	80056b4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800569c:	89fb      	ldrh	r3, [r7, #14]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80056b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	807b      	strh	r3, [r7, #2]
 80056cc:	4613      	mov	r3, r2
 80056ce:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80056e0:	887b      	ldrh	r3, [r7, #2]
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d902      	bls.n	80056ec <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056e6:	23fc      	movs	r3, #252	; 0xfc
 80056e8:	75fb      	strb	r3, [r7, #23]
 80056ea:	e05b      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80056ec:	787b      	ldrb	r3, [r7, #1]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73bb      	strb	r3, [r7, #14]
 80056fe:	e00a      	b.n	8005716 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	330c      	adds	r3, #12
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005716:	887b      	ldrh	r3, [r7, #2]
 8005718:	2b05      	cmp	r3, #5
 800571a:	d841      	bhi.n	80057a0 <VL53L0X_SetLimitCheckEnable+0xe0>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <VL53L0X_SetLimitCheckEnable+0x64>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	0800573d 	.word	0x0800573d
 8005728:	08005747 	.word	0x08005747
 800572c:	0800575d 	.word	0x0800575d
 8005730:	08005767 	.word	0x08005767
 8005734:	08005771 	.word	0x08005771
 8005738:	08005789 	.word	0x08005789

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7bfa      	ldrb	r2, [r7, #15]
 8005740:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005744:	e02e      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800574a:	b29b      	uxth	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	2144      	movs	r1, #68	; 0x44
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f004 f893 	bl	800987c <VL53L0X_WrWord>
 8005756:	4603      	mov	r3, r0
 8005758:	75fb      	strb	r3, [r7, #23]

			break;
 800575a:	e023      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7bfa      	ldrb	r2, [r7, #15]
 8005760:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005764:	e01e      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800576e:	e019      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005776:	7b7b      	ldrb	r3, [r7, #13]
 8005778:	22fe      	movs	r2, #254	; 0xfe
 800577a:	2160      	movs	r1, #96	; 0x60
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f004 f8a7 	bl	80098d0 <VL53L0X_UpdateByte>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005786:	e00d      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005788:	7bbb      	ldrb	r3, [r7, #14]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800578e:	7b7b      	ldrb	r3, [r7, #13]
 8005790:	22ef      	movs	r2, #239	; 0xef
 8005792:	2160      	movs	r1, #96	; 0x60
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f004 f89b 	bl	80098d0 <VL53L0X_UpdateByte>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800579e:	e001      	b.n	80057a4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057a0:	23fc      	movs	r3, #252	; 0xfc
 80057a2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10f      	bne.n	80057cc <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80057ac:	787b      	ldrb	r3, [r7, #1]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057b2:	887b      	ldrh	r3, [r7, #2]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80057be:	e005      	b.n	80057cc <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057c0:	887b      	ldrh	r3, [r7, #2]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	460b      	mov	r3, r1
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d905      	bls.n	80057fc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057f0:	23fc      	movs	r3, #252	; 0xfc
 80057f2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e008      	b.n	800580e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057fc:	897b      	ldrh	r3, [r7, #10]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005806:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7dba      	ldrb	r2, [r7, #22]
 800580c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800580e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	460b      	mov	r3, r1
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005832:	897b      	ldrh	r3, [r7, #10]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800583e:	7dbb      	ldrb	r3, [r7, #22]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005844:	897b      	ldrh	r3, [r7, #10]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	330c      	adds	r3, #12
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	e040      	b.n	80058d6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005854:	897b      	ldrh	r3, [r7, #10]
 8005856:	2b05      	cmp	r3, #5
 8005858:	d830      	bhi.n	80058bc <VL53L0X_SetLimitCheckValue+0x9c>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <VL53L0X_SetLimitCheckValue+0x40>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005879 	.word	0x08005879
 8005864:	08005881 	.word	0x08005881
 8005868:	08005897 	.word	0x08005897
 800586c:	0800589f 	.word	0x0800589f
 8005870:	080058a7 	.word	0x080058a7
 8005874:	080058a7 	.word	0x080058a7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800587e:	e01f      	b.n	80058c0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	2144      	movs	r1, #68	; 0x44
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f003 fff6 	bl	800987c <VL53L0X_WrWord>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005894:	e014      	b.n	80058c0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800589c:	e010      	b.n	80058c0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80058a4:	e00c      	b.n	80058c0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	2164      	movs	r1, #100	; 0x64
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f003 ffe3 	bl	800987c <VL53L0X_WrWord>
 80058b6:	4603      	mov	r3, r0
 80058b8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80058ba:	e001      	b.n	80058c0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058bc:	23fc      	movs	r3, #252	; 0xfc
 80058be:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80058c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058c8:	897b      	ldrh	r3, [r7, #10]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	330c      	adds	r3, #12
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop

080058e4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	460b      	mov	r3, r1
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80058fa:	897b      	ldrh	r3, [r7, #10]
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d847      	bhi.n	8005990 <VL53L0X_GetLimitCheckValue+0xac>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <VL53L0X_GetLimitCheckValue+0x24>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005921 	.word	0x08005921
 800590c:	0800592d 	.word	0x0800592d
 8005910:	08005953 	.word	0x08005953
 8005914:	0800595f 	.word	0x0800595f
 8005918:	0800596b 	.word	0x0800596b
 800591c:	0800596b 	.word	0x0800596b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005924:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	77bb      	strb	r3, [r7, #30]
		break;
 800592a:	e033      	b.n	8005994 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800592c:	f107 0316 	add.w	r3, r7, #22
 8005930:	461a      	mov	r2, r3
 8005932:	2144      	movs	r1, #68	; 0x44
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f004 f829 	bl	800998c <VL53L0X_RdWord>
 800593a:	4603      	mov	r3, r0
 800593c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800593e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005946:	8afb      	ldrh	r3, [r7, #22]
 8005948:	025b      	lsls	r3, r3, #9
 800594a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800594c:	2301      	movs	r3, #1
 800594e:	77bb      	strb	r3, [r7, #30]
		break;
 8005950:	e020      	b.n	8005994 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	77bb      	strb	r3, [r7, #30]
		break;
 800595c:	e01a      	b.n	8005994 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	77bb      	strb	r3, [r7, #30]
		break;
 8005968:	e014      	b.n	8005994 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800596a:	f107 0316 	add.w	r3, r7, #22
 800596e:	461a      	mov	r2, r3
 8005970:	2164      	movs	r1, #100	; 0x64
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f004 f80a 	bl	800998c <VL53L0X_RdWord>
 8005978:	4603      	mov	r3, r0
 800597a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800597c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005984:	8afb      	ldrh	r3, [r7, #22]
 8005986:	025b      	lsls	r3, r3, #9
 8005988:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	77bb      	strb	r3, [r7, #30]
		break;
 800598e:	e001      	b.n	8005994 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005990:	23fc      	movs	r3, #252	; 0xfc
 8005992:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d12a      	bne.n	80059f2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800599c:	7fbb      	ldrb	r3, [r7, #30]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d124      	bne.n	80059ec <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d110      	bne.n	80059ca <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80059a8:	897b      	ldrh	r3, [r7, #10]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	330c      	adds	r3, #12
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80059bc:	897b      	ldrh	r3, [r7, #10]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059c8:	e013      	b.n	80059f2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	330c      	adds	r3, #12
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80059de:	897b      	ldrh	r3, [r7, #10]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059ea:	e002      	b.n	80059f2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059f2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop

08005a00 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005a0e:	f107 030e 	add.w	r3, r7, #14
 8005a12:	461a      	mov	r2, r3
 8005a14:	2101      	movs	r1, #1
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f003 ff8e 	bl	8009938 <VL53L0X_RdByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10e      	bne.n	8005a46 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005a28:	7bba      	ldrb	r2, [r7, #14]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da03      	bge.n	8005a40 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a70:	f107 030e 	add.w	r3, r7, #14
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fbd2 	bl	8005220 <VL53L0X_GetDeviceMode>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f898 	bl	8005bc4 <VL53L0X_StartMeasurement>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 fb3f 	bl	8007124 <VL53L0X_measurement_poll_for_completion>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2203      	movs	r2, #3
 8005abc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005adc:	2301      	movs	r3, #1
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f001 fae1 	bl	80070aa <VL53L0X_perform_ref_calibration>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005b0e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005b10:	7dbb      	ldrb	r3, [r7, #22]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d005      	beq.n	8005b22 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005b16:	7dbb      	ldrb	r3, [r7, #22]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d002      	beq.n	8005b22 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005b1c:	7dbb      	ldrb	r3, [r7, #22]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d147      	bne.n	8005bb2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	f107 0210 	add.w	r2, r7, #16
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fbc3 	bl	80062b8 <VL53L0X_GetInterruptThresholds>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b3c:	d803      	bhi.n	8005b46 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005b3e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005b40:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b44:	d935      	bls.n	8005bb2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d131      	bne.n	8005bb2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b54:	491a      	ldr	r1, [pc, #104]	; (8005bc0 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f002 ff56 	bl	8008a08 <VL53L0X_load_tuning_settings>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	e027      	b.n	8005bb2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b62:	2204      	movs	r2, #4
 8005b64:	21ff      	movs	r1, #255	; 0xff
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f003 fe64 	bl	8009834 <VL53L0X_WrByte>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b76:	2200      	movs	r2, #0
 8005b78:	2170      	movs	r1, #112	; 0x70
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 fe5a 	bl	8009834 <VL53L0X_WrByte>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	21ff      	movs	r1, #255	; 0xff
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 fe50 	bl	8009834 <VL53L0X_WrByte>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2180      	movs	r1, #128	; 0x80
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f003 fe46 	bl	8009834 <VL53L0X_WrByte>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000100 	.word	0x20000100

08005bc4 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005bd4:	f107 030e 	add.w	r3, r7, #14
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fb20 	bl	8005220 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005be0:	2201      	movs	r2, #1
 8005be2:	2180      	movs	r1, #128	; 0x80
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f003 fe25 	bl	8009834 <VL53L0X_WrByte>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005bee:	2201      	movs	r2, #1
 8005bf0:	21ff      	movs	r1, #255	; 0xff
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f003 fe1e 	bl	8009834 <VL53L0X_WrByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f003 fe17 	bl	8009834 <VL53L0X_WrByte>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005c10:	461a      	mov	r2, r3
 8005c12:	2191      	movs	r1, #145	; 0x91
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f003 fe0d 	bl	8009834 <VL53L0X_WrByte>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c1e:	2201      	movs	r2, #1
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f003 fe06 	bl	8009834 <VL53L0X_WrByte>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	21ff      	movs	r1, #255	; 0xff
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f003 fdff 	bl	8009834 <VL53L0X_WrByte>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2180      	movs	r1, #128	; 0x80
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f003 fdf8 	bl	8009834 <VL53L0X_WrByte>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d054      	beq.n	8005cf8 <VL53L0X_StartMeasurement+0x134>
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	dc6c      	bgt.n	8005d2c <VL53L0X_StartMeasurement+0x168>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <VL53L0X_StartMeasurement+0x98>
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d034      	beq.n	8005cc4 <VL53L0X_StartMeasurement+0x100>
 8005c5a:	e067      	b.n	8005d2c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	2100      	movs	r1, #0
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f003 fde7 	bl	8009834 <VL53L0X_WrByte>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d15d      	bne.n	8005d32 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005c80:	f107 030d 	add.w	r3, r7, #13
 8005c84:	461a      	mov	r2, r3
 8005c86:	2100      	movs	r1, #0
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f003 fe55 	bl	8009938 <VL53L0X_RdByte>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3301      	adds	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005c98:	7b7a      	ldrb	r2, [r7, #13]
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005ca0:	7bfa      	ldrb	r2, [r7, #15]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d107      	bne.n	8005cb6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005cb4:	d3e1      	bcc.n	8005c7a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005cbc:	d339      	bcc.n	8005d32 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005cbe:	23f9      	movs	r3, #249	; 0xf9
 8005cc0:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005cc2:	e036      	b.n	8005d32 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d105      	bne.n	8005cd8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ff12 	bl	8005af8 <VL53L0X_CheckAndLoadInterruptSettings>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005cd8:	2202      	movs	r2, #2
 8005cda:	2100      	movs	r1, #0
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f003 fda9 	bl	8009834 <VL53L0X_WrByte>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d123      	bne.n	8005d36 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cf6:	e01e      	b.n	8005d36 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005d00:	2101      	movs	r1, #1
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fef8 	bl	8005af8 <VL53L0X_CheckAndLoadInterruptSettings>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f003 fd8f 	bl	8009834 <VL53L0X_WrByte>
 8005d16:	4603      	mov	r3, r0
 8005d18:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2204      	movs	r2, #4
 8005d26:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005d2a:	e006      	b.n	8005d3a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005d2c:	23f8      	movs	r3, #248	; 0xf8
 8005d2e:	75fb      	strb	r3, [r7, #23]
 8005d30:	e004      	b.n	8005d3c <VL53L0X_StartMeasurement+0x178>
		break;
 8005d32:	bf00      	nop
 8005d34:	e002      	b.n	8005d3c <VL53L0X_StartMeasurement+0x178>
		break;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <VL53L0X_StartMeasurement+0x178>
		break;
 8005d3a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005d5c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d112      	bne.n	8005d8a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005d64:	f107 0308 	add.w	r3, r7, #8
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fb1a 	bl	80063a4 <VL53L0X_GetInterruptMaskStatus>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d103      	bne.n	8005d82 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e01c      	b.n	8005dbc <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e018      	b.n	8005dbc <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005d8a:	f107 030d 	add.w	r3, r7, #13
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2114      	movs	r1, #20
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f003 fdd0 	bl	8009938 <VL53L0X_RdByte>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005da4:	7b7b      	ldrb	r3, [r7, #13]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e002      	b.n	8005dbc <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005dc8:	b5b0      	push	{r4, r5, r7, lr}
 8005dca:	b096      	sub	sp, #88	; 0x58
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005dd8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ddc:	230c      	movs	r3, #12
 8005dde:	2114      	movs	r1, #20
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f003 fcfb 	bl	80097dc <VL53L0X_ReadMulti>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005dec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 80d1 	bne.w	8005f98 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005e02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4413      	add	r3, r2
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	025b      	lsls	r3, r3, #9
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005e3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e56:	025b      	lsls	r3, r3, #9
 8005e58:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e7a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005e7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005e8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e9c:	d046      	beq.n	8005f2c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ea0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005eac:	4a57      	ldr	r2, [pc, #348]	; (800600c <VL53L0X_GetRangingMeasurementData+0x244>)
 8005eae:	fb82 1203 	smull	r1, r2, r2, r3
 8005eb2:	1192      	asrs	r2, r2, #6
 8005eb4:	17db      	asrs	r3, r3, #31
 8005eb6:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005eb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7f1b      	ldrb	r3, [r3, #28]
 8005ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02c      	beq.n	8005f2c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005ed2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d10d      	bne.n	8005f00 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005ee4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005eec:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005ef0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ef4:	e016      	b.n	8005f24 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005ef6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005efa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005efe:	e011      	b.n	8005f24 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005f00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f06:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005f0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f0c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005f14:	121b      	asrs	r3, r3, #8
 8005f16:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005f20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005f24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005f2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005f34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005f40:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	019b      	lsls	r3, r3, #6
 8005f48:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	75da      	strb	r2, [r3, #23]
 8005f4e:	e006      	b.n	8005f5e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f56:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005f5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f62:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005f66:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f003 f9e5 	bl	8009344 <VL53L0X_get_pal_range_status>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f88:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f90:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f98:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d12f      	bne.n	8006000 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f107 040c 	add.w	r4, r7, #12
 8005fa6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005fba:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005fc8:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005fce:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005fd4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005fda:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005fe0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005fe6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005ff0:	f107 050c 	add.w	r5, r7, #12
 8005ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006000:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006004:	4618      	mov	r0, r3
 8006006:	3750      	adds	r7, #80	; 0x50
 8006008:	46bd      	mov	sp, r7
 800600a:	bdb0      	pop	{r4, r5, r7, pc}
 800600c:	10624dd3 	.word	0x10624dd3

08006010 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800601e:	2100      	movs	r1, #0
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff f8d1 	bl	80051c8 <VL53L0X_SetDeviceMode>
 8006026:	4603      	mov	r3, r0
 8006028:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800602a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fd16 	bl	8005a64 <VL53L0X_PerformSingleMeasurement>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800603c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff febe 	bl	8005dc8 <VL53L0X_GetRangingMeasurementData>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006058:	2100      	movs	r1, #0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f962 	bl	8006324 <VL53L0X_ClearInterruptMask>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	4608      	mov	r0, r1
 800607a:	4611      	mov	r1, r2
 800607c:	461a      	mov	r2, r3
 800607e:	4603      	mov	r3, r0
 8006080:	70fb      	strb	r3, [r7, #3]
 8006082:	460b      	mov	r3, r1
 8006084:	70bb      	strb	r3, [r7, #2]
 8006086:	4613      	mov	r3, r2
 8006088:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006094:	23f6      	movs	r3, #246	; 0xf6
 8006096:	73fb      	strb	r3, [r7, #15]
 8006098:	e107      	b.n	80062aa <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800609a:	78bb      	ldrb	r3, [r7, #2]
 800609c:	2b14      	cmp	r3, #20
 800609e:	d110      	bne.n	80060c2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80060a0:	7e3b      	ldrb	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80060a6:	2310      	movs	r3, #16
 80060a8:	73bb      	strb	r3, [r7, #14]
 80060aa:	e001      	b.n	80060b0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	461a      	mov	r2, r3
 80060b4:	2184      	movs	r1, #132	; 0x84
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f003 fbbc 	bl	8009834 <VL53L0X_WrByte>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	e0f3      	b.n	80062aa <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80060c2:	78bb      	ldrb	r3, [r7, #2]
 80060c4:	2b15      	cmp	r3, #21
 80060c6:	f040 8097 	bne.w	80061f8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80060ca:	2201      	movs	r2, #1
 80060cc:	21ff      	movs	r1, #255	; 0xff
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f003 fbb0 	bl	8009834 <VL53L0X_WrByte>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4313      	orrs	r3, r2
 80060dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f003 fba6 	bl	8009834 <VL53L0X_WrByte>
 80060e8:	4603      	mov	r3, r0
 80060ea:	461a      	mov	r2, r3
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80060f2:	2200      	movs	r2, #0
 80060f4:	21ff      	movs	r1, #255	; 0xff
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f003 fb9c 	bl	8009834 <VL53L0X_WrByte>
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4313      	orrs	r3, r2
 8006104:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006106:	2201      	movs	r2, #1
 8006108:	2180      	movs	r1, #128	; 0x80
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f003 fb92 	bl	8009834 <VL53L0X_WrByte>
 8006110:	4603      	mov	r3, r0
 8006112:	461a      	mov	r2, r3
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	4313      	orrs	r3, r2
 8006118:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800611a:	2202      	movs	r2, #2
 800611c:	2185      	movs	r1, #133	; 0x85
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f003 fb88 	bl	8009834 <VL53L0X_WrByte>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	4313      	orrs	r3, r2
 800612c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800612e:	2204      	movs	r2, #4
 8006130:	21ff      	movs	r1, #255	; 0xff
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f003 fb7e 	bl	8009834 <VL53L0X_WrByte>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4313      	orrs	r3, r2
 8006140:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006142:	2200      	movs	r2, #0
 8006144:	21cd      	movs	r1, #205	; 0xcd
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f003 fb74 	bl	8009834 <VL53L0X_WrByte>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4313      	orrs	r3, r2
 8006154:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006156:	2211      	movs	r2, #17
 8006158:	21cc      	movs	r1, #204	; 0xcc
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f003 fb6a 	bl	8009834 <VL53L0X_WrByte>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4313      	orrs	r3, r2
 8006168:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800616a:	2207      	movs	r2, #7
 800616c:	21ff      	movs	r1, #255	; 0xff
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f003 fb60 	bl	8009834 <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	4313      	orrs	r3, r2
 800617c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800617e:	2200      	movs	r2, #0
 8006180:	21be      	movs	r1, #190	; 0xbe
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f003 fb56 	bl	8009834 <VL53L0X_WrByte>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	4313      	orrs	r3, r2
 8006190:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006192:	2206      	movs	r2, #6
 8006194:	21ff      	movs	r1, #255	; 0xff
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f003 fb4c 	bl	8009834 <VL53L0X_WrByte>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80061a6:	2209      	movs	r2, #9
 80061a8:	21cc      	movs	r1, #204	; 0xcc
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f003 fb42 	bl	8009834 <VL53L0X_WrByte>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80061ba:	2200      	movs	r2, #0
 80061bc:	21ff      	movs	r1, #255	; 0xff
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f003 fb38 	bl	8009834 <VL53L0X_WrByte>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461a      	mov	r2, r3
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80061ce:	2201      	movs	r2, #1
 80061d0:	21ff      	movs	r1, #255	; 0xff
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f003 fb2e 	bl	8009834 <VL53L0X_WrByte>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	4313      	orrs	r3, r2
 80061e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061e2:	2200      	movs	r2, #0
 80061e4:	2100      	movs	r1, #0
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f003 fb24 	bl	8009834 <VL53L0X_WrByte>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	73fb      	strb	r3, [r7, #15]
 80061f6:	e058      	b.n	80062aa <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80061f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d121      	bne.n	8006244 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006200:	787b      	ldrb	r3, [r7, #1]
 8006202:	2b04      	cmp	r3, #4
 8006204:	d81b      	bhi.n	800623e <VL53L0X_SetGpioConfig+0x1ce>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <VL53L0X_SetGpioConfig+0x19c>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006221 	.word	0x08006221
 8006210:	08006227 	.word	0x08006227
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006233 	.word	0x08006233
 800621c:	08006239 	.word	0x08006239
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006220:	2300      	movs	r3, #0
 8006222:	73bb      	strb	r3, [r7, #14]
				break;
 8006224:	e00f      	b.n	8006246 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006226:	2301      	movs	r3, #1
 8006228:	73bb      	strb	r3, [r7, #14]
				break;
 800622a:	e00c      	b.n	8006246 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800622c:	2302      	movs	r3, #2
 800622e:	73bb      	strb	r3, [r7, #14]
				break;
 8006230:	e009      	b.n	8006246 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006232:	2303      	movs	r3, #3
 8006234:	73bb      	strb	r3, [r7, #14]
				break;
 8006236:	e006      	b.n	8006246 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006238:	2304      	movs	r3, #4
 800623a:	73bb      	strb	r3, [r7, #14]
				break;
 800623c:	e003      	b.n	8006246 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800623e:	23f5      	movs	r3, #245	; 0xf5
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e000      	b.n	8006246 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006244:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8006246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d107      	bne.n	800625e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	461a      	mov	r2, r3
 8006252:	210a      	movs	r1, #10
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f003 faed 	bl	8009834 <VL53L0X_WrByte>
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800625e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006266:	7e3b      	ldrb	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	73bb      	strb	r3, [r7, #14]
 8006270:	e001      	b.n	8006276 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006272:	2310      	movs	r3, #16
 8006274:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	22ef      	movs	r2, #239	; 0xef
 800627a:	2184      	movs	r1, #132	; 0x84
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f003 fb27 	bl	80098d0 <VL53L0X_UpdateByte>
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	787a      	ldrb	r2, [r7, #1]
 8006292:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800629e:	2100      	movs	r1, #0
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f83f 	bl	8006324 <VL53L0X_ClearInterruptMask>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop

080062b8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	460b      	mov	r3, r1
 80062c6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	461a      	mov	r2, r3
 80062d2:	210e      	movs	r1, #14
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f003 fb59 	bl	800998c <VL53L0X_RdWord>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062de:	8abb      	ldrh	r3, [r7, #20]
 80062e0:	045b      	lsls	r3, r3, #17
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <VL53L0X_GetInterruptThresholds+0x68>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80062ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10f      	bne.n	8006314 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80062f4:	f107 0314 	add.w	r3, r7, #20
 80062f8:	461a      	mov	r2, r3
 80062fa:	210c      	movs	r1, #12
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f003 fb45 	bl	800998c <VL53L0X_RdWord>
 8006302:	4603      	mov	r3, r0
 8006304:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006306:	8abb      	ldrh	r3, [r7, #20]
 8006308:	045b      	lsls	r3, r3, #17
 800630a:	461a      	mov	r2, r3
 800630c:	4b04      	ldr	r3, [pc, #16]	; (8006320 <VL53L0X_GetInterruptThresholds+0x68>)
 800630e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	1ffe0000 	.word	0x1ffe0000

08006324 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006336:	2201      	movs	r2, #1
 8006338:	210b      	movs	r1, #11
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f003 fa7a 	bl	8009834 <VL53L0X_WrByte>
 8006340:	4603      	mov	r3, r0
 8006342:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006344:	2200      	movs	r2, #0
 8006346:	210b      	movs	r1, #11
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f003 fa73 	bl	8009834 <VL53L0X_WrByte>
 800634e:	4603      	mov	r3, r0
 8006350:	461a      	mov	r2, r3
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	4313      	orrs	r3, r2
 8006356:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006358:	f107 030d 	add.w	r3, r7, #13
 800635c:	461a      	mov	r2, r3
 800635e:	2113      	movs	r1, #19
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f003 fae9 	bl	8009938 <VL53L0X_RdByte>
 8006366:	4603      	mov	r3, r0
 8006368:	461a      	mov	r2, r3
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	4313      	orrs	r3, r2
 800636e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	3301      	adds	r3, #1
 8006374:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006376:	7b7b      	ldrb	r3, [r7, #13]
 8006378:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800637c:	2b00      	cmp	r3, #0
 800637e:	d006      	beq.n	800638e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d803      	bhi.n	800638e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0d3      	beq.n	8006336 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006394:	23f4      	movs	r3, #244	; 0xf4
 8006396:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80063b2:	f107 030e 	add.w	r3, r7, #14
 80063b6:	461a      	mov	r2, r3
 80063b8:	2113      	movs	r1, #19
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f003 fabc 	bl	8009938 <VL53L0X_RdByte>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	f003 0207 	and.w	r2, r3, #7
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	f003 0318 	and.w	r3, r3, #24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80063d8:	23fa      	movs	r3, #250	; 0xfa
 80063da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80063dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fa03 	bl	8006808 <VL53L0X_perform_ref_spad_management>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006420:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006424:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800642a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800642c:	f107 0308 	add.w	r3, r7, #8
 8006430:	461a      	mov	r2, r3
 8006432:	2128      	movs	r1, #40	; 0x28
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f003 faa9 	bl	800998c <VL53L0X_RdWord>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800643e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d11e      	bne.n	8006484 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006446:	893b      	ldrh	r3, [r7, #8]
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	b29b      	uxth	r3, r3
 800644e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	461a      	mov	r2, r3
 8006454:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006458:	429a      	cmp	r2, r3
 800645a:	dd0b      	ble.n	8006474 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800645c:	893a      	ldrh	r2, [r7, #8]
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	b29b      	uxth	r3, r3
 8006464:	b21b      	sxth	r3, r3
 8006466:	461a      	mov	r2, r3
					* 250;
 8006468:	23fa      	movs	r3, #250	; 0xfa
 800646a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e007      	b.n	8006484 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006474:	893b      	ldrh	r3, [r7, #8]
 8006476:	b21b      	sxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	23fa      	movs	r3, #250	; 0xfa
 800647c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006490:	b480      	push	{r7}
 8006492:	b08b      	sub	sp, #44	; 0x2c
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800649e:	2308      	movs	r3, #8
 80064a0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80064c0:	69b9      	ldr	r1, [r7, #24]
 80064c2:	fb01 f202 	mul.w	r2, r1, r2
 80064c6:	1a9b      	subs	r3, r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
 80064ce:	e030      	b.n	8006532 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	4413      	add	r3, r2
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d11e      	bne.n	8006524 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80064e6:	7ffa      	ldrb	r2, [r7, #31]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	fa42 f303 	asr.w	r3, r2, r3
 80064ee:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80064f4:	e016      	b.n	8006524 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80064f6:	7ffb      	ldrb	r3, [r7, #31]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <get_next_good_spad+0x88>
				success = 1;
 8006500:	2301      	movs	r3, #1
 8006502:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	fb02 f203 	mul.w	r2, r2, r3
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	4413      	add	r3, r2
 8006510:	461a      	mov	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	601a      	str	r2, [r3, #0]
				break;
 8006516:	e009      	b.n	800652c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006518:	7ffb      	ldrb	r3, [r7, #31]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	3301      	adds	r3, #1
 8006522:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	429a      	cmp	r2, r3
 800652a:	d3e4      	bcc.n	80064f6 <get_next_good_spad+0x66>
				coarseIndex++) {
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	3301      	adds	r3, #1
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	429a      	cmp	r2, r3
 8006538:	d202      	bcs.n	8006540 <get_next_good_spad+0xb0>
 800653a:	7fbb      	ldrb	r3, [r7, #30]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0c7      	beq.n	80064d0 <get_next_good_spad+0x40>
		}
	}
}
 8006540:	bf00      	nop
 8006542:	372c      	adds	r7, #44	; 0x2c
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800655e:	4a07      	ldr	r2, [pc, #28]	; (800657c <is_aperture+0x30>)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <is_aperture+0x22>
		isAperture = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	200002b8 	.word	0x200002b8

08006580 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	; 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800658c:	2300      	movs	r3, #0
 800658e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006590:	2308      	movs	r3, #8
 8006592:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065a6:	69b9      	ldr	r1, [r7, #24]
 80065a8:	fb01 f202 	mul.w	r2, r1, r2
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80065b8:	23ce      	movs	r3, #206	; 0xce
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e010      	b.n	80065e0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	4413      	add	r3, r2
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	b25a      	sxtb	r2, r3
 80065c8:	2101      	movs	r1, #1
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	b25b      	sxtb	r3, r3
 80065d2:	4313      	orrs	r3, r2
 80065d4:	b259      	sxtb	r1, r3
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	4413      	add	r3, r2
 80065dc:	b2ca      	uxtb	r2, r1
 80065de:	701a      	strb	r2, [r3, #0]

	return status;
 80065e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3724      	adds	r7, #36	; 0x24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80065fa:	2306      	movs	r3, #6
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	21b0      	movs	r1, #176	; 0xb0
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f003 f8bb 	bl	800977c <VL53L0X_WriteMulti>
 8006606:	4603      	mov	r3, r0
 8006608:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800660a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006620:	2306      	movs	r3, #6
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	21b0      	movs	r1, #176	; 0xb0
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f003 f8d8 	bl	80097dc <VL53L0X_ReadMulti>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08c      	sub	sp, #48	; 0x30
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	460b      	mov	r3, r1
 800664a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006654:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800665a:	2300      	movs	r3, #0
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	e02b      	b.n	80066b8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006660:	f107 031c 	add.w	r3, r7, #28
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ff11 	bl	8006490 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d103      	bne.n	800667e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006676:	23ce      	movs	r3, #206	; 0xce
 8006678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800667c:	e020      	b.n	80066c0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	461a      	mov	r2, r3
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	4413      	add	r3, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ff60 	bl	800654c <is_aperture>
 800668c:	4603      	mov	r3, r0
 800668e:	461a      	mov	r2, r3
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006696:	23ce      	movs	r3, #206	; 0xce
 8006698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800669c:	e010      	b.n	80066c0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f7ff ff6a 	bl	8006580 <enable_spad_bit>
		currentSpad++;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	3301      	adds	r3, #1
 80066b0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	3301      	adds	r3, #1
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066bc:	429a      	cmp	r2, r3
 80066be:	d3cf      	bcc.n	8006660 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80066c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c2:	6a3a      	ldr	r2, [r7, #32]
 80066c4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80066c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7ff ff8d 	bl	80065f0 <set_ref_spad_map>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80066dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d121      	bne.n	8006728 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80066e4:	f107 0314 	add.w	r3, r7, #20
 80066e8:	4619      	mov	r1, r3
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ff93 	bl	8006616 <get_ref_spad_map>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80066fa:	e011      	b.n	8006720 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	4413      	add	r3, r2
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	f107 0114 	add.w	r1, r7, #20
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	440b      	add	r3, r1
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d003      	beq.n	800671a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006712:	23ce      	movs	r3, #206	; 0xce
 8006714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006718:	e006      	b.n	8006728 <enable_ref_spads+0xec>
			}
			i++;
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	3301      	adds	r3, #1
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	429a      	cmp	r2, r3
 8006726:	d3e9      	bcc.n	80066fc <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006728:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800672c:	4618      	mov	r0, r3
 800672e:	3730      	adds	r7, #48	; 0x30
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800673e:	2300      	movs	r3, #0
 8006740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800675c:	22c0      	movs	r2, #192	; 0xc0
 800675e:	2101      	movs	r1, #1
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f003 f867 	bl	8009834 <VL53L0X_WrByte>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800676c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006770:	2b00      	cmp	r3, #0
 8006772:	d108      	bne.n	8006786 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006774:	f107 0308 	add.w	r3, r7, #8
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fc48 	bl	8006010 <VL53L0X_PerformSingleRangingMeasurement>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800678e:	2201      	movs	r2, #1
 8006790:	21ff      	movs	r1, #255	; 0xff
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f003 f84e 	bl	8009834 <VL53L0X_WrByte>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800679e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d107      	bne.n	80067b6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	21b6      	movs	r1, #182	; 0xb6
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f003 f8ee 	bl	800998c <VL53L0X_RdWord>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80067b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d107      	bne.n	80067ce <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067be:	2200      	movs	r2, #0
 80067c0:	21ff      	movs	r1, #255	; 0xff
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f003 f836 	bl	8009834 <VL53L0X_WrByte>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80067ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d112      	bne.n	80067fc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067da:	461a      	mov	r2, r3
 80067dc:	2101      	movs	r1, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f003 f828 	bl	8009834 <VL53L0X_WrByte>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80067ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80067fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006800:	4618      	mov	r0, r3
 8006802:	3728      	adds	r7, #40	; 0x28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b09d      	sub	sp, #116	; 0x74
 800680c:	af06      	add	r7, sp, #24
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006814:	2300      	movs	r3, #0
 8006816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800681a:	23b4      	movs	r3, #180	; 0xb4
 800681c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006820:	2303      	movs	r3, #3
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006824:	232c      	movs	r3, #44	; 0x2c
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006834:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006838:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006842:	2306      	movs	r3, #6
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006846:	2300      	movs	r3, #0
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800686c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800686e:	2300      	movs	r3, #0
 8006870:	64bb      	str	r3, [r7, #72]	; 0x48
 8006872:	e009      	b.n	8006888 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006878:	4413      	add	r3, r2
 800687a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006884:	3301      	adds	r3, #1
 8006886:	64bb      	str	r3, [r7, #72]	; 0x48
 8006888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	429a      	cmp	r2, r3
 800688e:	d3f1      	bcc.n	8006874 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006890:	2201      	movs	r2, #1
 8006892:	21ff      	movs	r1, #255	; 0xff
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f002 ffcd 	bl	8009834 <VL53L0X_WrByte>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80068a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d107      	bne.n	80068b8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80068a8:	2200      	movs	r2, #0
 80068aa:	214f      	movs	r1, #79	; 0x4f
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f002 ffc1 	bl	8009834 <VL53L0X_WrByte>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80068b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80068c0:	222c      	movs	r2, #44	; 0x2c
 80068c2:	214e      	movs	r1, #78	; 0x4e
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f002 ffb5 	bl	8009834 <VL53L0X_WrByte>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80068d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80068d8:	2200      	movs	r2, #0
 80068da:	21ff      	movs	r1, #255	; 0xff
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f002 ffa9 	bl	8009834 <VL53L0X_WrByte>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80068e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80068f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068f4:	461a      	mov	r2, r3
 80068f6:	21b6      	movs	r1, #182	; 0xb6
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f002 ff9b 	bl	8009834 <VL53L0X_WrByte>
 80068fe:	4603      	mov	r3, r0
 8006900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006904:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800690c:	2200      	movs	r2, #0
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f002 ff8f 	bl	8009834 <VL53L0X_WrByte>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800691c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006924:	f107 0210 	add.w	r2, r7, #16
 8006928:	f107 0111 	add.w	r1, r7, #17
 800692c:	2300      	movs	r3, #0
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fbbb 	bl	80070aa <VL53L0X_perform_ref_calibration>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800693a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800693e:	2b00      	cmp	r3, #0
 8006940:	d121      	bne.n	8006986 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006948:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800695e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006962:	f107 0218 	add.w	r2, r7, #24
 8006966:	9204      	str	r2, [sp, #16]
 8006968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800696a:	9203      	str	r2, [sp, #12]
 800696c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800696e:	9202      	str	r2, [sp, #8]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4623      	mov	r3, r4
 8006978:	4602      	mov	r2, r0
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f7ff fe5e 	bl	800663c <enable_ref_spads>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006986:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800698a:	2b00      	cmp	r3, #0
 800698c:	d174      	bne.n	8006a78 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006992:	f107 0312 	add.w	r3, r7, #18
 8006996:	4619      	mov	r1, r3
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fecb 	bl	8006734 <perform_ref_signal_measurement>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80069a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d161      	bne.n	8006a70 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80069ac:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80069ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d25d      	bcs.n	8006a70 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80069b4:	2300      	movs	r3, #0
 80069b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b8:	e009      	b.n	80069ce <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069be:	4413      	add	r3, r2
 80069c0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80069c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ca:	3301      	adds	r3, #1
 80069cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d3f1      	bcc.n	80069ba <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80069d6:	e002      	b.n	80069de <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	3301      	adds	r3, #1
 80069dc:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80069de:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80069e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e4:	4413      	add	r3, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fdb0 	bl	800654c <is_aperture>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80069f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d3ee      	bcc.n	80069d8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006a0e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006a12:	f107 0218 	add.w	r2, r7, #24
 8006a16:	9204      	str	r2, [sp, #16]
 8006a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1a:	9203      	str	r2, [sp, #12]
 8006a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a1e:	9202      	str	r2, [sp, #8]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4623      	mov	r3, r4
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff fe06 	bl	800663c <enable_ref_spads>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006a36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11b      	bne.n	8006a76 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006a42:	f107 0312 	add.w	r3, r7, #18
 8006a46:	4619      	mov	r1, r3
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff fe73 	bl	8006734 <perform_ref_signal_measurement>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10c      	bne.n	8006a76 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006a5c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d208      	bcs.n	8006a76 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006a6e:	e002      	b.n	8006a76 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a74:	e000      	b.n	8006a78 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a76:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 80af 	bne.w	8006be0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006a82:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a86:	429a      	cmp	r2, r3
 8006a88:	f240 80aa 	bls.w	8006be0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006a9c:	f107 031c 	add.w	r3, r7, #28
 8006aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f003 f820 	bl	8009ae8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006aa8:	8a7b      	ldrh	r3, [r7, #18]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bfb8      	it	lt
 8006ab4:	425b      	neglt	r3, r3
 8006ab6:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006abe:	e086      	b.n	8006bce <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006ac6:	f107 0314 	add.w	r3, r7, #20
 8006aca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ace:	f7ff fcdf 	bl	8006490 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d103      	bne.n	8006ae2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006ada:	23ce      	movs	r3, #206	; 0xce
 8006adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006ae0:	e07e      	b.n	8006be0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006ae2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4413      	add	r3, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fd2e 	bl	800654c <is_aperture>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d003      	beq.n	8006b02 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006b00:	e06e      	b.n	8006be0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	3301      	adds	r3, #1
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006b12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fd32 	bl	8006580 <enable_spad_bit>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006b22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fd59 	bl	80065f0 <set_ref_spad_map>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006b44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d146      	bne.n	8006bda <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006b4c:	f107 0312 	add.w	r3, r7, #18
 8006b50:	4619      	mov	r1, r3
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fdee 	bl	8006734 <perform_ref_signal_measurement>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006b5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d13b      	bne.n	8006bde <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006b66:	8a7b      	ldrh	r3, [r7, #18]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfb8      	it	lt
 8006b72:	425b      	neglt	r3, r3
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006b76:	8a7b      	ldrh	r3, [r7, #18]
 8006b78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d21c      	bcs.n	8006bb8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d914      	bls.n	8006bb0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006b86:	f107 031c 	add.w	r3, r7, #28
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fd2f 	bl	80065f0 <set_ref_spad_map>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006b9e:	f107 011c 	add.w	r1, r7, #28
 8006ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 ff9f 	bl	8009ae8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	3b01      	subs	r3, #1
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e00a      	b.n	8006bce <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006bc2:	f107 031c 	add.w	r3, r7, #28
 8006bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f002 ff8d 	bl	8009ae8 <memcpy>
		while (!complete) {
 8006bce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f43f af74 	beq.w	8006ac0 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006bd8:	e002      	b.n	8006be0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006bde:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006be0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d115      	bne.n	8006c14 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bec:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006bf4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006c14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	375c      	adds	r7, #92	; 0x5c
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd90      	pop	{r4, r7, pc}

08006c20 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b093      	sub	sp, #76	; 0x4c
 8006c24:	af06      	add	r7, sp, #24
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006c38:	23b4      	movs	r3, #180	; 0xb4
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006c3e:	2306      	movs	r3, #6
 8006c40:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006c42:	232c      	movs	r3, #44	; 0x2c
 8006c44:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c46:	2201      	movs	r2, #1
 8006c48:	21ff      	movs	r1, #255	; 0xff
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f002 fdf2 	bl	8009834 <VL53L0X_WrByte>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d107      	bne.n	8006c6e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006c5e:	2200      	movs	r2, #0
 8006c60:	214f      	movs	r1, #79	; 0x4f
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f002 fde6 	bl	8009834 <VL53L0X_WrByte>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006c6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d107      	bne.n	8006c86 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006c76:	222c      	movs	r2, #44	; 0x2c
 8006c78:	214e      	movs	r1, #78	; 0x4e
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f002 fdda 	bl	8009834 <VL53L0X_WrByte>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d107      	bne.n	8006c9e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	21ff      	movs	r1, #255	; 0xff
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f002 fdce 	bl	8009834 <VL53L0X_WrByte>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006caa:	461a      	mov	r2, r3
 8006cac:	21b6      	movs	r1, #182	; 0xb6
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f002 fdc0 	bl	8009834 <VL53L0X_WrByte>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbe:	e009      	b.n	8006cd4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3f1      	bcc.n	8006cc0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d011      	beq.n	8006d06 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006ce2:	e002      	b.n	8006cea <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006cea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	4413      	add	r3, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fc2a 	bl	800654c <is_aperture>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <VL53L0X_set_reference_spads+0xe6>
 8006cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3ee      	bcc.n	8006ce4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d16:	79f9      	ldrb	r1, [r7, #7]
 8006d18:	f107 0214 	add.w	r2, r7, #20
 8006d1c:	9204      	str	r2, [sp, #16]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	9203      	str	r2, [sp, #12]
 8006d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d24:	9202      	str	r2, [sp, #8]
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fc83 	bl	800663c <enable_ref_spads>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10c      	bne.n	8006d5e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	79fa      	ldrb	r2, [r7, #7]
 8006d5a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006d5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3734      	adds	r7, #52	; 0x34
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd90      	pop	{r4, r7, pc}

08006d6a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	f043 0301 	orr.w	r3, r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f002 fd50 	bl	8009834 <VL53L0X_WrByte>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f9bf 	bl	8007124 <VL53L0X_measurement_poll_for_completion>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff fab5 	bl	8006324 <VL53L0X_ClearInterruptMask>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f002 fd32 	bl	8009834 <VL53L0X_WrByte>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	70fb      	strb	r3, [r7, #3]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70bb      	strb	r3, [r7, #2]
 8006df6:	4613      	mov	r3, r2
 8006df8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e02:	2201      	movs	r2, #1
 8006e04:	21ff      	movs	r1, #255	; 0xff
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f002 fd14 	bl	8009834 <VL53L0X_WrByte>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f002 fd0a 	bl	8009834 <VL53L0X_WrByte>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	21ff      	movs	r1, #255	; 0xff
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f002 fd00 	bl	8009834 <VL53L0X_WrByte>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01e      	beq.n	8006e82 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	21cb      	movs	r1, #203	; 0xcb
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 fd71 	bl	8009938 <VL53L0X_RdByte>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02a      	beq.n	8006ebe <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006e68:	f107 030e 	add.w	r3, r7, #14
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	21ee      	movs	r1, #238	; 0xee
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f002 fd61 	bl	8009938 <VL53L0X_RdByte>
 8006e76:	4603      	mov	r3, r0
 8006e78:	461a      	mov	r2, r3
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e01d      	b.n	8006ebe <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006e8a:	78bb      	ldrb	r3, [r7, #2]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	21cb      	movs	r1, #203	; 0xcb
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f002 fccf 	bl	8009834 <VL53L0X_WrByte>
 8006e96:	4603      	mov	r3, r0
 8006e98:	461a      	mov	r2, r3
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006ea8:	787b      	ldrb	r3, [r7, #1]
 8006eaa:	2280      	movs	r2, #128	; 0x80
 8006eac:	21ee      	movs	r1, #238	; 0xee
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f002 fd0e 	bl	80098d0 <VL53L0X_UpdateByte>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	21ff      	movs	r1, #255	; 0xff
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f002 fcb6 	bl	8009834 <VL53L0X_WrByte>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 fcac 	bl	8009834 <VL53L0X_WrByte>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	21ff      	movs	r1, #255	; 0xff
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f002 fca2 	bl	8009834 <VL53L0X_WrByte>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	701a      	strb	r2, [r3, #0]

	return Status;
 8006f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b08a      	sub	sp, #40	; 0x28
 8006f16:	af04      	add	r7, sp, #16
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	461a      	mov	r2, r3
 8006f20:	460b      	mov	r3, r1
 8006f22:	71fb      	strb	r3, [r7, #7]
 8006f24:	4613      	mov	r3, r2
 8006f26:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006f3c:	79bb      	ldrb	r3, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006f48:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f002 fc70 	bl	8009834 <VL53L0X_WrByte>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006f60:	2140      	movs	r1, #64	; 0x40
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff ff01 	bl	8006d6a <VL53L0X_perform_single_ref_calibration>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d115      	bne.n	8006fa0 <VL53L0X_perform_vhv_calibration+0x8e>
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d112      	bne.n	8006fa0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006f7a:	7d39      	ldrb	r1, [r7, #20]
 8006f7c:	7d7a      	ldrb	r2, [r7, #21]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9303      	str	r3, [sp, #12]
 8006f82:	2301      	movs	r3, #1
 8006f84:	9302      	str	r3, [sp, #8]
 8006f86:	f107 0313 	add.w	r3, r7, #19
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	460b      	mov	r3, r1
 8006f92:	2101      	movs	r1, #1
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff ff23 	bl	8006de0 <VL53L0X_ref_calibration_io>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	75fb      	strb	r3, [r7, #23]
 8006f9e:	e002      	b.n	8006fa6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d112      	bne.n	8006fd4 <VL53L0X_perform_vhv_calibration+0xc2>
 8006fae:	79bb      	ldrb	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00f      	beq.n	8006fd4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006fb4:	7dbb      	ldrb	r3, [r7, #22]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	2101      	movs	r1, #1
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f002 fc3a 	bl	8009834 <VL53L0X_WrByte>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d103      	bne.n	8006fd4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	7dba      	ldrb	r2, [r7, #22]
 8006fd0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	460b      	mov	r3, r1
 8006ff0:	71fb      	strb	r3, [r7, #7]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007006:	79bb      	ldrb	r3, [r7, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007012:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007014:	2202      	movs	r2, #2
 8007016:	2101      	movs	r1, #1
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f002 fc0b 	bl	8009834 <VL53L0X_WrByte>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d105      	bne.n	8007036 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800702a:	2100      	movs	r1, #0
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff fe9c 	bl	8006d6a <VL53L0X_perform_single_ref_calibration>
 8007032:	4603      	mov	r3, r0
 8007034:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d115      	bne.n	800706a <VL53L0X_perform_phase_calibration+0x8a>
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d112      	bne.n	800706a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007044:	7d39      	ldrb	r1, [r7, #20]
 8007046:	7d7a      	ldrb	r2, [r7, #21]
 8007048:	2301      	movs	r3, #1
 800704a:	9303      	str	r3, [sp, #12]
 800704c:	2300      	movs	r3, #0
 800704e:	9302      	str	r3, [sp, #8]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	f107 0313 	add.w	r3, r7, #19
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	460b      	mov	r3, r1
 800705c:	2101      	movs	r1, #1
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff febe 	bl	8006de0 <VL53L0X_ref_calibration_io>
 8007064:	4603      	mov	r3, r0
 8007066:	75fb      	strb	r3, [r7, #23]
 8007068:	e002      	b.n	8007070 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d112      	bne.n	800709e <VL53L0X_perform_phase_calibration+0xbe>
 8007078:	79bb      	ldrb	r3, [r7, #6]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800707e:	7dbb      	ldrb	r3, [r7, #22]
 8007080:	461a      	mov	r2, r3
 8007082:	2101      	movs	r1, #1
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f002 fbd5 	bl	8009834 <VL53L0X_WrByte>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800708e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	7dba      	ldrb	r2, [r7, #22]
 800709a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800709e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b086      	sub	sp, #24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80070c6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	2300      	movs	r3, #0
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff ff1f 	bl	8006f12 <VL53L0X_perform_vhv_calibration>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80070d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d107      	bne.n	80070f0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	2300      	movs	r3, #0
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff ff7a 	bl	8006fe0 <VL53L0X_perform_phase_calibration>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80070f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070f8:	7dbb      	ldrb	r3, [r7, #22]
 80070fa:	461a      	mov	r2, r3
 80070fc:	2101      	movs	r1, #1
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f002 fb98 	bl	8009834 <VL53L0X_WrByte>
 8007104:	4603      	mov	r3, r0
 8007106:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7dba      	ldrb	r2, [r7, #22]
 8007114:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007118:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007138:	f107 030f 	add.w	r3, r7, #15
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe fe02 	bl	8005d48 <VL53L0X_GetMeasurementDataReady>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d110      	bne.n	8007172 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d00f      	beq.n	8007176 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007162:	d302      	bcc.n	800716a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007164:	23f9      	movs	r3, #249	; 0xf9
 8007166:	75fb      	strb	r3, [r7, #23]
			break;
 8007168:	e006      	b.n	8007178 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 fc82 	bl	8009a74 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007170:	e7e2      	b.n	8007138 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007176:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	3301      	adds	r3, #1
 8007196:	b2db      	uxtb	r3, r3
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	4603      	mov	r3, r0
 80071b2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80071dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80071e2:	e002      	b.n	80071ea <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	089b      	lsrs	r3, r3, #2
 80071e8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d8f8      	bhi.n	80071e4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80071f2:	e017      	b.n	8007224 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d30b      	bcc.n	8007218 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4413      	add	r3, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	4413      	add	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e002      	b.n	800721e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	089b      	lsrs	r3, r3, #2
 8007222:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e4      	bne.n	80071f4 <VL53L0X_isqrt+0x24>
	}

	return res;
 800722a:	68fb      	ldr	r3, [r7, #12]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007240:	2300      	movs	r3, #0
 8007242:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007244:	2200      	movs	r2, #0
 8007246:	2183      	movs	r1, #131	; 0x83
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f002 faf3 	bl	8009834 <VL53L0X_WrByte>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	4313      	orrs	r3, r2
 8007256:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d11e      	bne.n	800729e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007264:	f107 030f 	add.w	r3, r7, #15
 8007268:	461a      	mov	r2, r3
 800726a:	2183      	movs	r1, #131	; 0x83
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f002 fb63 	bl	8009938 <VL53L0X_RdByte>
 8007272:	4603      	mov	r3, r0
 8007274:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <VL53L0X_device_read_strobe+0x5a>
 800727c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	3301      	adds	r3, #1
 8007288:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007290:	d3e8      	bcc.n	8007264 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007298:	d301      	bcc.n	800729e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800729a:	23f9      	movs	r3, #249	; 0xf9
 800729c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800729e:	2201      	movs	r2, #1
 80072a0:	2183      	movs	r1, #131	; 0x83
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 fac6 	bl	8009834 <VL53L0X_WrByte>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80072b2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b098      	sub	sp, #96	; 0x60
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80072ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800730a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800730e:	2b07      	cmp	r3, #7
 8007310:	f000 8408 	beq.w	8007b24 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007314:	2201      	movs	r2, #1
 8007316:	2180      	movs	r1, #128	; 0x80
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f002 fa8b 	bl	8009834 <VL53L0X_WrByte>
 800731e:	4603      	mov	r3, r0
 8007320:	461a      	mov	r2, r3
 8007322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007326:	4313      	orrs	r3, r2
 8007328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800732c:	2201      	movs	r2, #1
 800732e:	21ff      	movs	r1, #255	; 0xff
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f002 fa7f 	bl	8009834 <VL53L0X_WrByte>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733e:	4313      	orrs	r3, r2
 8007340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007344:	2200      	movs	r2, #0
 8007346:	2100      	movs	r1, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 fa73 	bl	8009834 <VL53L0X_WrByte>
 800734e:	4603      	mov	r3, r0
 8007350:	461a      	mov	r2, r3
 8007352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007356:	4313      	orrs	r3, r2
 8007358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800735c:	2206      	movs	r2, #6
 800735e:	21ff      	movs	r1, #255	; 0xff
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f002 fa67 	bl	8009834 <VL53L0X_WrByte>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736e:	4313      	orrs	r3, r2
 8007370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007374:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007378:	461a      	mov	r2, r3
 800737a:	2183      	movs	r1, #131	; 0x83
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f002 fadb 	bl	8009938 <VL53L0X_RdByte>
 8007382:	4603      	mov	r3, r0
 8007384:	461a      	mov	r2, r3
 8007386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800738a:	4313      	orrs	r3, r2
 800738c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007394:	f043 0304 	orr.w	r3, r3, #4
 8007398:	b2db      	uxtb	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	2183      	movs	r1, #131	; 0x83
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f002 fa48 	bl	8009834 <VL53L0X_WrByte>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80073b2:	2207      	movs	r2, #7
 80073b4:	21ff      	movs	r1, #255	; 0xff
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f002 fa3c 	bl	8009834 <VL53L0X_WrByte>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80073ca:	2201      	movs	r2, #1
 80073cc:	2181      	movs	r1, #129	; 0x81
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f002 fa30 	bl	8009834 <VL53L0X_WrByte>
 80073d4:	4603      	mov	r3, r0
 80073d6:	461a      	mov	r2, r3
 80073d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073dc:	4313      	orrs	r3, r2
 80073de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 fb46 	bl	8009a74 <VL53L0X_PollingDelay>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80073f6:	2201      	movs	r2, #1
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 fa1a 	bl	8009834 <VL53L0X_WrByte>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007408:	4313      	orrs	r3, r2
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 8098 	beq.w	800754a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800741a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800741e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 8091 	bne.w	800754a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007428:	226b      	movs	r2, #107	; 0x6b
 800742a:	2194      	movs	r1, #148	; 0x94
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f002 fa01 	bl	8009834 <VL53L0X_WrByte>
 8007432:	4603      	mov	r3, r0
 8007434:	461a      	mov	r2, r3
 8007436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743a:	4313      	orrs	r3, r2
 800743c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fef9 	bl	8007238 <VL53L0X_device_read_strobe>
 8007446:	4603      	mov	r3, r0
 8007448:	461a      	mov	r2, r3
 800744a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800744e:	4313      	orrs	r3, r2
 8007450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007458:	461a      	mov	r2, r3
 800745a:	2190      	movs	r1, #144	; 0x90
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 facd 	bl	80099fc <VL53L0X_RdDWord>
 8007462:	4603      	mov	r3, r0
 8007464:	461a      	mov	r2, r3
 8007466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800746a:	4313      	orrs	r3, r2
 800746c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	0bdb      	lsrs	r3, r3, #15
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800748c:	2224      	movs	r2, #36	; 0x24
 800748e:	2194      	movs	r1, #148	; 0x94
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f002 f9cf 	bl	8009834 <VL53L0X_WrByte>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800749e:	4313      	orrs	r3, r2
 80074a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fec7 	bl	8007238 <VL53L0X_device_read_strobe>
 80074aa:	4603      	mov	r3, r0
 80074ac:	461a      	mov	r2, r3
 80074ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074bc:	461a      	mov	r2, r3
 80074be:	2190      	movs	r1, #144	; 0x90
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f002 fa9b 	bl	80099fc <VL53L0X_RdDWord>
 80074c6:	4603      	mov	r3, r0
 80074c8:	461a      	mov	r2, r3
 80074ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	0e1b      	lsrs	r3, r3, #24
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	0c1b      	lsrs	r3, r3, #16
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	0a1b      	lsrs	r3, r3, #8
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80074f2:	2225      	movs	r2, #37	; 0x25
 80074f4:	2194      	movs	r1, #148	; 0x94
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 f99c 	bl	8009834 <VL53L0X_WrByte>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007504:	4313      	orrs	r3, r2
 8007506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fe94 	bl	8007238 <VL53L0X_device_read_strobe>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007518:	4313      	orrs	r3, r2
 800751a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800751e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007522:	461a      	mov	r2, r3
 8007524:	2190      	movs	r1, #144	; 0x90
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f002 fa68 	bl	80099fc <VL53L0X_RdDWord>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007534:	4313      	orrs	r3, r2
 8007536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	0e1b      	lsrs	r3, r3, #24
 800753e:	b2db      	uxtb	r3, r3
 8007540:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	0c1b      	lsrs	r3, r3, #16
 8007546:	b2db      	uxtb	r3, r3
 8007548:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8189 	beq.w	8007868 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007556:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800755a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800755e:	2b00      	cmp	r3, #0
 8007560:	f040 8182 	bne.w	8007868 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007564:	2202      	movs	r2, #2
 8007566:	2194      	movs	r1, #148	; 0x94
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f002 f963 	bl	8009834 <VL53L0X_WrByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007576:	4313      	orrs	r3, r2
 8007578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff fe5b 	bl	8007238 <VL53L0X_device_read_strobe>
 8007582:	4603      	mov	r3, r0
 8007584:	461a      	mov	r2, r3
 8007586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758a:	4313      	orrs	r3, r2
 800758c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007590:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007594:	461a      	mov	r2, r3
 8007596:	2190      	movs	r1, #144	; 0x90
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f002 f9cd 	bl	8009938 <VL53L0X_RdByte>
 800759e:	4603      	mov	r3, r0
 80075a0:	461a      	mov	r2, r3
 80075a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80075ac:	227b      	movs	r2, #123	; 0x7b
 80075ae:	2194      	movs	r1, #148	; 0x94
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 f93f 	bl	8009834 <VL53L0X_WrByte>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075be:	4313      	orrs	r3, r2
 80075c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fe37 	bl	8007238 <VL53L0X_device_read_strobe>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80075d8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80075dc:	461a      	mov	r2, r3
 80075de:	2190      	movs	r1, #144	; 0x90
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f002 f9a9 	bl	8009938 <VL53L0X_RdByte>
 80075e6:	4603      	mov	r3, r0
 80075e8:	461a      	mov	r2, r3
 80075ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80075f4:	2277      	movs	r2, #119	; 0x77
 80075f6:	2194      	movs	r1, #148	; 0x94
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f002 f91b 	bl	8009834 <VL53L0X_WrByte>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007606:	4313      	orrs	r3, r2
 8007608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fe13 	bl	8007238 <VL53L0X_device_read_strobe>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761a:	4313      	orrs	r3, r2
 800761c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007624:	461a      	mov	r2, r3
 8007626:	2190      	movs	r1, #144	; 0x90
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f002 f9e7 	bl	80099fc <VL53L0X_RdDWord>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007636:	4313      	orrs	r3, r2
 8007638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	0e5b      	lsrs	r3, r3, #25
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007646:	b2db      	uxtb	r3, r3
 8007648:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	0c9b      	lsrs	r3, r3, #18
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007654:	b2db      	uxtb	r3, r3
 8007656:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	0adb      	lsrs	r3, r3, #11
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007662:	b2db      	uxtb	r3, r3
 8007664:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007670:	b2db      	uxtb	r3, r3
 8007672:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	b2db      	uxtb	r3, r3
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007686:	2278      	movs	r2, #120	; 0x78
 8007688:	2194      	movs	r1, #148	; 0x94
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 f8d2 	bl	8009834 <VL53L0X_WrByte>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007698:	4313      	orrs	r3, r2
 800769a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fdca 	bl	8007238 <VL53L0X_device_read_strobe>
 80076a4:	4603      	mov	r3, r0
 80076a6:	461a      	mov	r2, r3
 80076a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076b6:	461a      	mov	r2, r3
 80076b8:	2190      	movs	r1, #144	; 0x90
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f002 f99e 	bl	80099fc <VL53L0X_RdDWord>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	0f5b      	lsrs	r3, r3, #29
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80076da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076de:	4413      	add	r3, r2
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	0d9b      	lsrs	r3, r3, #22
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	0bdb      	lsrs	r3, r3, #15
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770a:	b2db      	uxtb	r3, r3
 800770c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007718:	b2db      	uxtb	r3, r3
 800771a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	b2db      	uxtb	r3, r3
 8007720:	019b      	lsls	r3, r3, #6
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800772e:	2279      	movs	r2, #121	; 0x79
 8007730:	2194      	movs	r1, #148	; 0x94
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f002 f87e 	bl	8009834 <VL53L0X_WrByte>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007740:	4313      	orrs	r3, r2
 8007742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fd76 	bl	8007238 <VL53L0X_device_read_strobe>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007754:	4313      	orrs	r3, r2
 8007756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800775a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800775e:	461a      	mov	r2, r3
 8007760:	2190      	movs	r1, #144	; 0x90
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f002 f94a 	bl	80099fc <VL53L0X_RdDWord>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007770:	4313      	orrs	r3, r2
 8007772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	0e9b      	lsrs	r3, r3, #26
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007786:	4413      	add	r3, r2
 8007788:	b2db      	uxtb	r3, r3
 800778a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	0cdb      	lsrs	r3, r3, #19
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007796:	b2db      	uxtb	r3, r3
 8007798:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	0b1b      	lsrs	r3, r3, #12
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80077c8:	227a      	movs	r2, #122	; 0x7a
 80077ca:	2194      	movs	r1, #148	; 0x94
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f002 f831 	bl	8009834 <VL53L0X_WrByte>
 80077d2:	4603      	mov	r3, r0
 80077d4:	461a      	mov	r2, r3
 80077d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077da:	4313      	orrs	r3, r2
 80077dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff fd29 	bl	8007238 <VL53L0X_device_read_strobe>
 80077e6:	4603      	mov	r3, r0
 80077e8:	461a      	mov	r2, r3
 80077ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077f8:	461a      	mov	r2, r3
 80077fa:	2190      	movs	r1, #144	; 0x90
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f002 f8fd 	bl	80099fc <VL53L0X_RdDWord>
 8007802:	4603      	mov	r3, r0
 8007804:	461a      	mov	r2, r3
 8007806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800780a:	4313      	orrs	r3, r2
 800780c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	0f9b      	lsrs	r3, r3, #30
 8007814:	b2db      	uxtb	r3, r3
 8007816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800781c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007820:	4413      	add	r3, r2
 8007822:	b2db      	uxtb	r3, r3
 8007824:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	0ddb      	lsrs	r3, r3, #23
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007830:	b2db      	uxtb	r3, r3
 8007832:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783e:	b2db      	uxtb	r3, r3
 8007840:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	0a5b      	lsrs	r3, r3, #9
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	089b      	lsrs	r3, r3, #2
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007862:	2300      	movs	r3, #0
 8007864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80f1 	beq.w	8007a56 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007878:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 80ea 	bne.w	8007a56 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007882:	227b      	movs	r2, #123	; 0x7b
 8007884:	2194      	movs	r1, #148	; 0x94
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 ffd4 	bl	8009834 <VL53L0X_WrByte>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007894:	4313      	orrs	r3, r2
 8007896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fccc 	bl	8007238 <VL53L0X_device_read_strobe>
 80078a0:	4603      	mov	r3, r0
 80078a2:	461a      	mov	r2, r3
 80078a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078a8:	4313      	orrs	r3, r2
 80078aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80078ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078b2:	461a      	mov	r2, r3
 80078b4:	2190      	movs	r1, #144	; 0x90
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f002 f8a0 	bl	80099fc <VL53L0X_RdDWord>
 80078bc:	4603      	mov	r3, r0
 80078be:	461a      	mov	r2, r3
 80078c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80078ca:	227c      	movs	r2, #124	; 0x7c
 80078cc:	2194      	movs	r1, #148	; 0x94
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 ffb0 	bl	8009834 <VL53L0X_WrByte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078dc:	4313      	orrs	r3, r2
 80078de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fca8 	bl	8007238 <VL53L0X_device_read_strobe>
 80078e8:	4603      	mov	r3, r0
 80078ea:	461a      	mov	r2, r3
 80078ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80078f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078fa:	461a      	mov	r2, r3
 80078fc:	2190      	movs	r1, #144	; 0x90
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f002 f87c 	bl	80099fc <VL53L0X_RdDWord>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800790c:	4313      	orrs	r3, r2
 800790e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007912:	2273      	movs	r2, #115	; 0x73
 8007914:	2194      	movs	r1, #148	; 0x94
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 ff8c 	bl	8009834 <VL53L0X_WrByte>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007924:	4313      	orrs	r3, r2
 8007926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fc84 	bl	8007238 <VL53L0X_device_read_strobe>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007938:	4313      	orrs	r3, r2
 800793a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800793e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007942:	461a      	mov	r2, r3
 8007944:	2190      	movs	r1, #144	; 0x90
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f002 f858 	bl	80099fc <VL53L0X_RdDWord>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007954:	4313      	orrs	r3, r2
 8007956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800795e:	b29b      	uxth	r3, r3
 8007960:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007962:	2274      	movs	r2, #116	; 0x74
 8007964:	2194      	movs	r1, #148	; 0x94
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 ff64 	bl	8009834 <VL53L0X_WrByte>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007974:	4313      	orrs	r3, r2
 8007976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff fc5c 	bl	8007238 <VL53L0X_device_read_strobe>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007988:	4313      	orrs	r3, r2
 800798a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800798e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007992:	461a      	mov	r2, r3
 8007994:	2190      	movs	r1, #144	; 0x90
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f002 f830 	bl	80099fc <VL53L0X_RdDWord>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80079ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079b0:	4313      	orrs	r3, r2
 80079b2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80079b4:	2275      	movs	r2, #117	; 0x75
 80079b6:	2194      	movs	r1, #148	; 0x94
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 ff3b 	bl	8009834 <VL53L0X_WrByte>
 80079be:	4603      	mov	r3, r0
 80079c0:	461a      	mov	r2, r3
 80079c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fc33 	bl	8007238 <VL53L0X_device_read_strobe>
 80079d2:	4603      	mov	r3, r0
 80079d4:	461a      	mov	r2, r3
 80079d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079da:	4313      	orrs	r3, r2
 80079dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079e4:	461a      	mov	r2, r3
 80079e6:	2190      	movs	r1, #144	; 0x90
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f002 f807 	bl	80099fc <VL53L0X_RdDWord>
 80079ee:	4603      	mov	r3, r0
 80079f0:	461a      	mov	r2, r3
 80079f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007a04:	2276      	movs	r2, #118	; 0x76
 8007a06:	2194      	movs	r1, #148	; 0x94
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 ff13 	bl	8009834 <VL53L0X_WrByte>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff fc0b 	bl	8007238 <VL53L0X_device_read_strobe>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007a30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a34:	461a      	mov	r2, r3
 8007a36:	2190      	movs	r1, #144	; 0x90
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 ffdf 	bl	80099fc <VL53L0X_RdDWord>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007a50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a52:	4313      	orrs	r3, r2
 8007a54:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007a56:	2200      	movs	r2, #0
 8007a58:	2181      	movs	r1, #129	; 0x81
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 feea 	bl	8009834 <VL53L0X_WrByte>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007a6e:	2206      	movs	r2, #6
 8007a70:	21ff      	movs	r1, #255	; 0xff
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fede 	bl	8009834 <VL53L0X_WrByte>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a86:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2183      	movs	r1, #131	; 0x83
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 ff52 	bl	8009938 <VL53L0X_RdByte>
 8007a94:	4603      	mov	r3, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aa6:	f023 0304 	bic.w	r3, r3, #4
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	2183      	movs	r1, #131	; 0x83
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 febf 	bl	8009834 <VL53L0X_WrByte>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	21ff      	movs	r1, #255	; 0xff
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 feb3 	bl	8009834 <VL53L0X_WrByte>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007adc:	2201      	movs	r2, #1
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fea7 	bl	8009834 <VL53L0X_WrByte>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007af4:	2200      	movs	r2, #0
 8007af6:	21ff      	movs	r1, #255	; 0xff
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fe9b 	bl	8009834 <VL53L0X_WrByte>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2180      	movs	r1, #128	; 0x80
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fe8f 	bl	8009834 <VL53L0X_WrByte>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007b24:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f040 808f 	bne.w	8007c4c <VL53L0X_get_info_from_device+0x98e>
 8007b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b32:	2b07      	cmp	r3, #7
 8007b34:	f000 808a 	beq.w	8007c4c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d024      	beq.n	8007b8c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007b42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b46:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d11e      	bne.n	8007b8c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007b54:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007b5e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b62:	2300      	movs	r3, #0
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b66:	e00e      	b.n	8007b86 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6e:	4413      	add	r3, r2
 8007b70:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007b7c:	460a      	mov	r2, r1
 8007b7e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b82:	3301      	adds	r3, #1
 8007b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	dded      	ble.n	8007b68 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d018      	beq.n	8007bc8 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007b96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b9a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d112      	bne.n	8007bc8 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ba2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	33f3      	adds	r3, #243	; 0xf3
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007bbc:	f107 0310 	add.w	r3, r7, #16
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bc4:	f002 fcee 	bl	800a5a4 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d030      	beq.n	8007c34 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007bd6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d12a      	bne.n	8007c34 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf0:	025b      	lsls	r3, r3, #9
 8007bf2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bf8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d011      	beq.n	8007c2c <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007c1c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007c20:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007c24:	425b      	negs	r3, r3
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007c2c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007c34:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007c38:	78fb      	ldrb	r3, [r7, #3]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007c42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c4c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3760      	adds	r7, #96	; 0x60
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007c64:	f240 6277 	movw	r2, #1655	; 0x677
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007c70:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007c74:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	fb02 f303 	mul.w	r3, r2, r3
 8007c84:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007c86:	68bb      	ldr	r3, [r7, #8]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007cb4:	e005      	b.n	8007cc2 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007cbc:	89fb      	ldrh	r3, [r7, #14]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f4      	bne.n	8007cb6 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007cda:	4413      	add	r3, r2
 8007cdc:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007cde:	8afb      	ldrh	r3, [r7, #22]

}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007cfa:	88fb      	ldrh	r3, [r7, #6]
 8007cfc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	0a12      	lsrs	r2, r2, #8
 8007d02:	b292      	uxth	r2, r2
 8007d04:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7ff ff92 	bl	8007c58 <VL53L0X_calc_macro_period_ps>
 8007d34:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <VL53L0X_calc_timeout_mclks+0x50>)
 8007d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d42:	099b      	lsrs	r3, r3, #6
 8007d44:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d4c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	441a      	add	r2, r3
	timeout_period_mclks =
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	10624dd3 	.word	0x10624dd3

08007d6c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	807b      	strh	r3, [r7, #2]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d80:	787b      	ldrb	r3, [r7, #1]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff67 	bl	8007c58 <VL53L0X_calc_macro_period_ps>
 8007d8a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d92:	4a0a      	ldr	r2, [pc, #40]	; (8007dbc <VL53L0X_calc_timeout_us+0x50>)
 8007d94:	fba2 2303 	umull	r2, r3, r2, r3
 8007d98:	099b      	lsrs	r3, r3, #6
 8007d9a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007d9c:	887b      	ldrh	r3, [r7, #2]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	fb02 f303 	mul.w	r3, r2, r3
 8007da4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007da8:	4a04      	ldr	r2, [pc, #16]	; (8007dbc <VL53L0X_calc_timeout_us+0x50>)
 8007daa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dae:	099b      	lsrs	r3, r3, #6
 8007db0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007db2:	697b      	ldr	r3, [r7, #20]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	10624dd3 	.word	0x10624dd3

08007dc0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08c      	sub	sp, #48	; 0x30
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <get_sequence_step_timeout+0x38>
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d002      	beq.n	8007df8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d128      	bne.n	8007e4a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007df8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2100      	movs	r1, #0
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7fd fa7d 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007e0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007e14:	f107 0320 	add.w	r3, r7, #32
 8007e18:	461a      	mov	r2, r3
 8007e1a:	2146      	movs	r1, #70	; 0x46
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f001 fd8b 	bl	8009938 <VL53L0X_RdByte>
 8007e22:	4603      	mov	r3, r0
 8007e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007e28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff ff5c 	bl	8007cec <VL53L0X_decode_timeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e38:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff ff93 	bl	8007d6c <VL53L0X_calc_timeout_us>
 8007e46:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e48:	e092      	b.n	8007f70 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d135      	bne.n	8007ebc <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e50:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e54:	461a      	mov	r2, r3
 8007e56:	2100      	movs	r1, #0
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7fd fa51 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 8081 	bne.w	8007f70 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e6e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e72:	461a      	mov	r2, r3
 8007e74:	2100      	movs	r1, #0
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7fd fa42 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007e8a:	f107 031e 	add.w	r3, r7, #30
 8007e8e:	461a      	mov	r2, r3
 8007e90:	2151      	movs	r1, #81	; 0x51
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f001 fd7a 	bl	800998c <VL53L0X_RdWord>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e9e:	8bfb      	ldrh	r3, [r7, #30]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff ff23 	bl	8007cec <VL53L0X_decode_timeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007eaa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007eae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff ff5a 	bl	8007d6c <VL53L0X_calc_timeout_us>
 8007eb8:	62b8      	str	r0, [r7, #40]	; 0x28
 8007eba:	e059      	b.n	8007f70 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d156      	bne.n	8007f70 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007ec2:	f107 0314 	add.w	r3, r7, #20
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7fd fb25 	bl	8005518 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01d      	beq.n	8007f14 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ed8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007edc:	461a      	mov	r2, r3
 8007ede:	2100      	movs	r1, #0
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7fd fa0d 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007eec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10f      	bne.n	8007f14 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007ef4:	f107 031e 	add.w	r3, r7, #30
 8007ef8:	461a      	mov	r2, r3
 8007efa:	2151      	movs	r1, #81	; 0x51
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f001 fd45 	bl	800998c <VL53L0X_RdWord>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f08:	8bfb      	ldrh	r3, [r7, #30]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff feee 	bl	8007cec <VL53L0X_decode_timeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d109      	bne.n	8007f30 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f1c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007f20:	461a      	mov	r2, r3
 8007f22:	2101      	movs	r1, #1
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7fd f9eb 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007f30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10f      	bne.n	8007f58 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007f38:	f107 031c 	add.w	r3, r7, #28
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	2171      	movs	r1, #113	; 0x71
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 fd23 	bl	800998c <VL53L0X_RdWord>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007f4c:	8bbb      	ldrh	r3, [r7, #28]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fecc 	bl	8007cec <VL53L0X_decode_timeout>
 8007f54:	4603      	mov	r3, r0
 8007f56:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007f58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007f60:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff feff 	bl	8007d6c <VL53L0X_calc_timeout_us>
 8007f6e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f74:	601a      	str	r2, [r3, #0]

	return Status;
 8007f76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3730      	adds	r7, #48	; 0x30
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b08a      	sub	sp, #40	; 0x28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <set_sequence_step_timeout+0x26>
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d002      	beq.n	8007fa8 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d138      	bne.n	800801a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007fa8:	f107 031b 	add.w	r3, r7, #27
 8007fac:	461a      	mov	r2, r3
 8007fae:	2100      	movs	r1, #0
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7fd f9a5 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11a      	bne.n	8007ffa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007fc4:	7efb      	ldrb	r3, [r7, #27]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7ff fea4 	bl	8007d18 <VL53L0X_calc_timeout_mclks>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007fd4:	8bbb      	ldrh	r3, [r7, #28]
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fda:	d903      	bls.n	8007fe4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007fdc:	23ff      	movs	r3, #255	; 0xff
 8007fde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fe2:	e004      	b.n	8007fee <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007fe4:	8bbb      	ldrh	r3, [r7, #28]
 8007fe6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ffa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 80ab 	bne.w	800815a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008008:	461a      	mov	r2, r3
 800800a:	2146      	movs	r1, #70	; 0x46
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f001 fc11 	bl	8009834 <VL53L0X_WrByte>
 8008012:	4603      	mov	r3, r0
 8008014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008018:	e09f      	b.n	800815a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800801a:	7afb      	ldrb	r3, [r7, #11]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d135      	bne.n	800808c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11b      	bne.n	8008060 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008028:	f107 031b 	add.w	r3, r7, #27
 800802c:	461a      	mov	r2, r3
 800802e:	2100      	movs	r1, #0
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7fd f965 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 8008036:	4603      	mov	r3, r0
 8008038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800803c:	7efb      	ldrb	r3, [r7, #27]
 800803e:	461a      	mov	r2, r3
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff fe68 	bl	8007d18 <VL53L0X_calc_timeout_mclks>
 8008048:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800804a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800804c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fe20 	bl	8007c94 <VL53L0X_encode_timeout>
 8008054:	4603      	mov	r3, r0
 8008056:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008058:	8b3a      	ldrh	r2, [r7, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008060:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008064:	2b00      	cmp	r3, #0
 8008066:	d108      	bne.n	800807a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008068:	8b3b      	ldrh	r3, [r7, #24]
 800806a:	461a      	mov	r2, r3
 800806c:	2151      	movs	r1, #81	; 0x51
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fc04 	bl	800987c <VL53L0X_WrWord>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800807a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800807e:	2b00      	cmp	r3, #0
 8008080:	d16b      	bne.n	800815a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800808a:	e066      	b.n	800815a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800808c:	7afb      	ldrb	r3, [r7, #11]
 800808e:	2b04      	cmp	r3, #4
 8008090:	d160      	bne.n	8008154 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008092:	f107 0310 	add.w	r3, r7, #16
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7fd fa3d 	bl	8005518 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80080a2:	7cfb      	ldrb	r3, [r7, #19]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01d      	beq.n	80080e4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080a8:	f107 031b 	add.w	r3, r7, #27
 80080ac:	461a      	mov	r2, r3
 80080ae:	2100      	movs	r1, #0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7fd f925 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80080bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10f      	bne.n	80080e4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80080c4:	f107 0318 	add.w	r3, r7, #24
 80080c8:	461a      	mov	r2, r3
 80080ca:	2151      	movs	r1, #81	; 0x51
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f001 fc5d 	bl	800998c <VL53L0X_RdWord>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80080d8:	8b3b      	ldrh	r3, [r7, #24]
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff fe06 	bl	8007cec <VL53L0X_decode_timeout>
 80080e0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80080e2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80080e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80080ec:	f107 031b 	add.w	r3, r7, #27
 80080f0:	461a      	mov	r2, r3
 80080f2:	2101      	movs	r1, #1
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7fd f903 	bl	8005300 <VL53L0X_GetVcselPulsePeriod>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008100:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008104:	2b00      	cmp	r3, #0
 8008106:	d128      	bne.n	800815a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008108:	7efb      	ldrb	r3, [r7, #27]
 800810a:	461a      	mov	r2, r3
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fe02 	bl	8007d18 <VL53L0X_calc_timeout_mclks>
 8008114:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008118:	6a3a      	ldr	r2, [r7, #32]
 800811a:	4413      	add	r3, r2
 800811c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800811e:	6a38      	ldr	r0, [r7, #32]
 8008120:	f7ff fdb8 	bl	8007c94 <VL53L0X_encode_timeout>
 8008124:	4603      	mov	r3, r0
 8008126:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008128:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008130:	8bfb      	ldrh	r3, [r7, #30]
 8008132:	461a      	mov	r2, r3
 8008134:	2171      	movs	r1, #113	; 0x71
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f001 fba0 	bl	800987c <VL53L0X_WrWord>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008142:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008146:	2b00      	cmp	r3, #0
 8008148:	d107      	bne.n	800815a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008152:	e002      	b.n	800815a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008154:	23fc      	movs	r3, #252	; 0xfc
 8008156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800815a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b08a      	sub	sp, #40	; 0x28
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
 8008172:	4613      	mov	r3, r2
 8008174:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008176:	2300      	movs	r3, #0
 8008178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800817c:	230c      	movs	r3, #12
 800817e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8008182:	2312      	movs	r3, #18
 8008184:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008188:	2308      	movs	r3, #8
 800818a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800818e:	230e      	movs	r3, #14
 8008190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008198:	78bb      	ldrb	r3, [r7, #2]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081a4:	23fc      	movs	r3, #252	; 0xfc
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081aa:	e020      	b.n	80081ee <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10d      	bne.n	80081ce <VL53L0X_set_vcsel_pulse_period+0x68>
 80081b2:	78ba      	ldrb	r2, [r7, #2]
 80081b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d304      	bcc.n	80081c6 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80081bc:	78ba      	ldrb	r2, [r7, #2]
 80081be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d903      	bls.n	80081ce <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081c6:	23fc      	movs	r3, #252	; 0xfc
 80081c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80081cc:	e00f      	b.n	80081ee <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d10c      	bne.n	80081ee <VL53L0X_set_vcsel_pulse_period+0x88>
 80081d4:	78ba      	ldrb	r2, [r7, #2]
 80081d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081da:	429a      	cmp	r2, r3
 80081dc:	d304      	bcc.n	80081e8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80081de:	78ba      	ldrb	r2, [r7, #2]
 80081e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d902      	bls.n	80081ee <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081e8:	23fc      	movs	r3, #252	; 0xfc
 80081ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80081ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80081f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081fa:	e239      	b.n	8008670 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d150      	bne.n	80082a4 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8008202:	78bb      	ldrb	r3, [r7, #2]
 8008204:	2b0c      	cmp	r3, #12
 8008206:	d110      	bne.n	800822a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008208:	2218      	movs	r2, #24
 800820a:	2157      	movs	r1, #87	; 0x57
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fb11 	bl	8009834 <VL53L0X_WrByte>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8008218:	2208      	movs	r2, #8
 800821a:	2156      	movs	r1, #86	; 0x56
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fb09 	bl	8009834 <VL53L0X_WrByte>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008228:	e17f      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800822a:	78bb      	ldrb	r3, [r7, #2]
 800822c:	2b0e      	cmp	r3, #14
 800822e:	d110      	bne.n	8008252 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008230:	2230      	movs	r2, #48	; 0x30
 8008232:	2157      	movs	r1, #87	; 0x57
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fafd 	bl	8009834 <VL53L0X_WrByte>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8008240:	2208      	movs	r2, #8
 8008242:	2156      	movs	r1, #86	; 0x56
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 faf5 	bl	8009834 <VL53L0X_WrByte>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008250:	e16b      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8008252:	78bb      	ldrb	r3, [r7, #2]
 8008254:	2b10      	cmp	r3, #16
 8008256:	d110      	bne.n	800827a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008258:	2240      	movs	r2, #64	; 0x40
 800825a:	2157      	movs	r1, #87	; 0x57
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 fae9 	bl	8009834 <VL53L0X_WrByte>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8008268:	2208      	movs	r2, #8
 800826a:	2156      	movs	r1, #86	; 0x56
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fae1 	bl	8009834 <VL53L0X_WrByte>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008278:	e157      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800827a:	78bb      	ldrb	r3, [r7, #2]
 800827c:	2b12      	cmp	r3, #18
 800827e:	f040 8154 	bne.w	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008282:	2250      	movs	r2, #80	; 0x50
 8008284:	2157      	movs	r1, #87	; 0x57
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fad4 	bl	8009834 <VL53L0X_WrByte>
 800828c:	4603      	mov	r3, r0
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8008292:	2208      	movs	r2, #8
 8008294:	2156      	movs	r1, #86	; 0x56
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 facc 	bl	8009834 <VL53L0X_WrByte>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082a2:	e142      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	f040 813f 	bne.w	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80082ac:	78bb      	ldrb	r3, [r7, #2]
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d14c      	bne.n	800834c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80082b2:	2210      	movs	r2, #16
 80082b4:	2148      	movs	r1, #72	; 0x48
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 fabc 	bl	8009834 <VL53L0X_WrByte>
 80082bc:	4603      	mov	r3, r0
 80082be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80082c2:	2208      	movs	r2, #8
 80082c4:	2147      	movs	r1, #71	; 0x47
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fab4 	bl	8009834 <VL53L0X_WrByte>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80082d2:	2202      	movs	r2, #2
 80082d4:	2132      	movs	r1, #50	; 0x32
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 faac 	bl	8009834 <VL53L0X_WrByte>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80082ea:	220c      	movs	r2, #12
 80082ec:	2130      	movs	r1, #48	; 0x30
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 faa0 	bl	8009834 <VL53L0X_WrByte>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008302:	2201      	movs	r2, #1
 8008304:	21ff      	movs	r1, #255	; 0xff
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fa94 	bl	8009834 <VL53L0X_WrByte>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008314:	4313      	orrs	r3, r2
 8008316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800831a:	2230      	movs	r2, #48	; 0x30
 800831c:	2130      	movs	r1, #48	; 0x30
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 fa88 	bl	8009834 <VL53L0X_WrByte>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800832c:	4313      	orrs	r3, r2
 800832e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008332:	2200      	movs	r2, #0
 8008334:	21ff      	movs	r1, #255	; 0xff
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fa7c 	bl	8009834 <VL53L0X_WrByte>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008344:	4313      	orrs	r3, r2
 8008346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800834a:	e0ee      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800834c:	78bb      	ldrb	r3, [r7, #2]
 800834e:	2b0a      	cmp	r3, #10
 8008350:	d14c      	bne.n	80083ec <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8008352:	2228      	movs	r2, #40	; 0x28
 8008354:	2148      	movs	r1, #72	; 0x48
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fa6c 	bl	8009834 <VL53L0X_WrByte>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8008362:	2208      	movs	r2, #8
 8008364:	2147      	movs	r1, #71	; 0x47
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fa64 	bl	8009834 <VL53L0X_WrByte>
 800836c:	4603      	mov	r3, r0
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008372:	2203      	movs	r2, #3
 8008374:	2132      	movs	r1, #50	; 0x32
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fa5c 	bl	8009834 <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008384:	4313      	orrs	r3, r2
 8008386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800838a:	2209      	movs	r2, #9
 800838c:	2130      	movs	r1, #48	; 0x30
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fa50 	bl	8009834 <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800839c:	4313      	orrs	r3, r2
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80083a2:	2201      	movs	r2, #1
 80083a4:	21ff      	movs	r1, #255	; 0xff
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fa44 	bl	8009834 <VL53L0X_WrByte>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80083ba:	2220      	movs	r2, #32
 80083bc:	2130      	movs	r1, #48	; 0x30
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fa38 	bl	8009834 <VL53L0X_WrByte>
 80083c4:	4603      	mov	r3, r0
 80083c6:	461a      	mov	r2, r3
 80083c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80083d2:	2200      	movs	r2, #0
 80083d4:	21ff      	movs	r1, #255	; 0xff
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fa2c 	bl	8009834 <VL53L0X_WrByte>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e4:	4313      	orrs	r3, r2
 80083e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083ea:	e09e      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80083ec:	78bb      	ldrb	r3, [r7, #2]
 80083ee:	2b0c      	cmp	r3, #12
 80083f0:	d14c      	bne.n	800848c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80083f2:	2238      	movs	r2, #56	; 0x38
 80083f4:	2148      	movs	r1, #72	; 0x48
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fa1c 	bl	8009834 <VL53L0X_WrByte>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8008402:	2208      	movs	r2, #8
 8008404:	2147      	movs	r1, #71	; 0x47
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fa14 	bl	8009834 <VL53L0X_WrByte>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008412:	2203      	movs	r2, #3
 8008414:	2132      	movs	r1, #50	; 0x32
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 fa0c 	bl	8009834 <VL53L0X_WrByte>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008424:	4313      	orrs	r3, r2
 8008426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800842a:	2208      	movs	r2, #8
 800842c:	2130      	movs	r1, #48	; 0x30
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 fa00 	bl	8009834 <VL53L0X_WrByte>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800843c:	4313      	orrs	r3, r2
 800843e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008442:	2201      	movs	r2, #1
 8008444:	21ff      	movs	r1, #255	; 0xff
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 f9f4 	bl	8009834 <VL53L0X_WrByte>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008454:	4313      	orrs	r3, r2
 8008456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800845a:	2220      	movs	r2, #32
 800845c:	2130      	movs	r1, #48	; 0x30
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 f9e8 	bl	8009834 <VL53L0X_WrByte>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800846c:	4313      	orrs	r3, r2
 800846e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008472:	2200      	movs	r2, #0
 8008474:	21ff      	movs	r1, #255	; 0xff
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 f9dc 	bl	8009834 <VL53L0X_WrByte>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008484:	4313      	orrs	r3, r2
 8008486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800848a:	e04e      	b.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800848c:	78bb      	ldrb	r3, [r7, #2]
 800848e:	2b0e      	cmp	r3, #14
 8008490:	d14b      	bne.n	800852a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008492:	2248      	movs	r2, #72	; 0x48
 8008494:	2148      	movs	r1, #72	; 0x48
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 f9cc 	bl	8009834 <VL53L0X_WrByte>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80084a2:	2208      	movs	r2, #8
 80084a4:	2147      	movs	r1, #71	; 0x47
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 f9c4 	bl	8009834 <VL53L0X_WrByte>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80084b2:	2203      	movs	r2, #3
 80084b4:	2132      	movs	r1, #50	; 0x32
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 f9bc 	bl	8009834 <VL53L0X_WrByte>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80084ca:	2207      	movs	r2, #7
 80084cc:	2130      	movs	r1, #48	; 0x30
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 f9b0 	bl	8009834 <VL53L0X_WrByte>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084dc:	4313      	orrs	r3, r2
 80084de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80084e2:	2201      	movs	r2, #1
 80084e4:	21ff      	movs	r1, #255	; 0xff
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f9a4 	bl	8009834 <VL53L0X_WrByte>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80084fa:	2220      	movs	r2, #32
 80084fc:	2130      	movs	r1, #48	; 0x30
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f998 	bl	8009834 <VL53L0X_WrByte>
 8008504:	4603      	mov	r3, r0
 8008506:	461a      	mov	r2, r3
 8008508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800850c:	4313      	orrs	r3, r2
 800850e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008512:	2200      	movs	r2, #0
 8008514:	21ff      	movs	r1, #255	; 0xff
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 f98c 	bl	8009834 <VL53L0X_WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008524:	4313      	orrs	r3, r2
 8008526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800852a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800852e:	2b00      	cmp	r3, #0
 8008530:	d17f      	bne.n	8008632 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008532:	78bb      	ldrb	r3, [r7, #2]
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fe38 	bl	80071aa <VL53L0X_encode_vcsel_period>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8008546:	2b01      	cmp	r3, #1
 8008548:	d045      	beq.n	80085d6 <VL53L0X_set_vcsel_pulse_period+0x470>
 800854a:	e06e      	b.n	800862a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800854c:	f107 0314 	add.w	r3, r7, #20
 8008550:	461a      	mov	r2, r3
 8008552:	2103      	movs	r1, #3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fc33 	bl	8007dc0 <get_sequence_step_timeout>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008560:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008568:	f107 0310 	add.w	r3, r7, #16
 800856c:	461a      	mov	r2, r3
 800856e:	2102      	movs	r1, #2
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff fc25 	bl	8007dc0 <get_sequence_step_timeout>
 8008576:	4603      	mov	r3, r0
 8008578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800857c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008580:	2b00      	cmp	r3, #0
 8008582:	d109      	bne.n	8008598 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008584:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008588:	461a      	mov	r2, r3
 800858a:	2150      	movs	r1, #80	; 0x50
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 f951 	bl	8009834 <VL53L0X_WrByte>
 8008592:	4603      	mov	r3, r0
 8008594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800859c:	2b00      	cmp	r3, #0
 800859e:	d108      	bne.n	80085b2 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	461a      	mov	r2, r3
 80085a4:	2103      	movs	r1, #3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff fceb 	bl	8007f82 <set_sequence_step_timeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80085b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d108      	bne.n	80085cc <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	461a      	mov	r2, r3
 80085be:	2102      	movs	r1, #2
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fcde 	bl	8007f82 <set_sequence_step_timeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	78ba      	ldrb	r2, [r7, #2]
 80085d0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80085d4:	e02e      	b.n	8008634 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80085d6:	f107 0318 	add.w	r3, r7, #24
 80085da:	461a      	mov	r2, r3
 80085dc:	2104      	movs	r1, #4
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fbee 	bl	8007dc0 <get_sequence_step_timeout>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80085ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80085f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085f6:	461a      	mov	r2, r3
 80085f8:	2170      	movs	r1, #112	; 0x70
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 f91a 	bl	8009834 <VL53L0X_WrByte>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800860a:	2b00      	cmp	r3, #0
 800860c:	d108      	bne.n	8008620 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	461a      	mov	r2, r3
 8008612:	2104      	movs	r1, #4
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff fcb4 	bl	8007f82 <set_sequence_step_timeout>
 800861a:	4603      	mov	r3, r0
 800861c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	78ba      	ldrb	r2, [r7, #2]
 8008624:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008628:	e004      	b.n	8008634 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800862a:	23fc      	movs	r3, #252	; 0xfc
 800862c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008630:	e000      	b.n	8008634 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8008632:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008634:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008638:	2b00      	cmp	r3, #0
 800863a:	d109      	bne.n	8008650 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008642:	69f9      	ldr	r1, [r7, #28]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fc fe1d 	bl	8005284 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800864a:	4603      	mov	r3, r0
 800864c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008654:	2b00      	cmp	r3, #0
 8008656:	d109      	bne.n	800866c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8008658:	f107 010f 	add.w	r1, r7, #15
 800865c:	2301      	movs	r3, #1
 800865e:	2200      	movs	r2, #0
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7fe fcbd 	bl	8006fe0 <VL53L0X_perform_phase_calibration>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800866c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008670:	4618      	mov	r0, r3
 8008672:	3728      	adds	r7, #40	; 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	460b      	mov	r3, r1
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008686:	2300      	movs	r3, #0
 8008688:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008690:	2b01      	cmp	r3, #1
 8008692:	d00a      	beq.n	80086aa <VL53L0X_get_vcsel_pulse_period+0x32>
 8008694:	e013      	b.n	80086be <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008696:	f107 0316 	add.w	r3, r7, #22
 800869a:	461a      	mov	r2, r3
 800869c:	2150      	movs	r1, #80	; 0x50
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f001 f94a 	bl	8009938 <VL53L0X_RdByte>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80086a8:	e00b      	b.n	80086c2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80086aa:	f107 0316 	add.w	r3, r7, #22
 80086ae:	461a      	mov	r2, r3
 80086b0:	2170      	movs	r1, #112	; 0x70
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f001 f940 	bl	8009938 <VL53L0X_RdByte>
 80086b8:	4603      	mov	r3, r0
 80086ba:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80086bc:	e001      	b.n	80086c2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80086be:	23fc      	movs	r3, #252	; 0xfc
 80086c0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80086c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d107      	bne.n	80086da <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80086ca:	7dbb      	ldrb	r3, [r7, #22]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fd59 	bl	8007184 <VL53L0X_decode_vcsel_period>
 80086d2:	4603      	mov	r3, r0
 80086d4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	701a      	strb	r2, [r3, #0]

	return Status;
 80086da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b092      	sub	sp, #72	; 0x48
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80086f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80086fa:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80086fc:	f240 7376 	movw	r3, #1910	; 0x776
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008702:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008708:	f44f 7325 	mov.w	r3, #660	; 0x294
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800870e:	f240 234e 	movw	r3, #590	; 0x24e
 8008712:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008714:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800871a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008720:	f240 2326 	movw	r3, #550	; 0x226
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800872a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800872e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	429a      	cmp	r2, r3
 800873a:	d205      	bcs.n	8008748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800873c:	23fc      	movs	r3, #252	; 0xfc
 800873e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008742:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008746:	e0aa      	b.n	800889e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008754:	f107 0314 	add.w	r3, r7, #20
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7fc fedc 	bl	8005518 <VL53L0X_GetSequenceStepEnables>
 8008760:	4603      	mov	r3, r0
 8008762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008766:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800876a:	2b00      	cmp	r3, #0
 800876c:	d15b      	bne.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800876e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008774:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008776:	2b00      	cmp	r3, #0
 8008778:	d102      	bne.n	8008780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800877a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800877c:	2b00      	cmp	r3, #0
 800877e:	d052      	beq.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008780:	f107 0310 	add.w	r3, r7, #16
 8008784:	461a      	mov	r2, r3
 8008786:	2102      	movs	r1, #2
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff fb19 	bl	8007dc0 <get_sequence_step_timeout>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008794:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800879c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087a0:	e07d      	b.n	800889e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80087a2:	7d3b      	ldrb	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00f      	beq.n	80087c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80087a8:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80087aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ac:	4413      	add	r3, r2
 80087ae:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d204      	bcs.n	80087c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80087b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	643b      	str	r3, [r7, #64]	; 0x40
 80087c0:	e002      	b.n	80087c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087c2:	23fc      	movs	r3, #252	; 0xfc
 80087c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80087c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80087d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80087d4:	e063      	b.n	800889e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80087d6:	7dbb      	ldrb	r3, [r7, #22]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d011      	beq.n	8008800 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	4413      	add	r3, r2
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d204      	bcs.n	80087f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80087ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	643b      	str	r3, [r7, #64]	; 0x40
 80087f6:	e016      	b.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087f8:	23fc      	movs	r3, #252	; 0xfc
 80087fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087fe:	e012      	b.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008800:	7d7b      	ldrb	r3, [r7, #21]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00f      	beq.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800880a:	4413      	add	r3, r2
 800880c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008812:	429a      	cmp	r2, r3
 8008814:	d204      	bcs.n	8008820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	643b      	str	r3, [r7, #64]	; 0x40
 800881e:	e002      	b.n	8008826 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008820:	23fc      	movs	r3, #252	; 0xfc
 8008822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008826:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800882e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008832:	e034      	b.n	800889e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d019      	beq.n	800886e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800883a:	f107 030c 	add.w	r3, r7, #12
 800883e:	461a      	mov	r2, r3
 8008840:	2103      	movs	r1, #3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fabc 	bl	8007dc0 <get_sequence_step_timeout>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008852:	4413      	add	r3, r2
 8008854:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800885a:	429a      	cmp	r2, r3
 800885c:	d204      	bcs.n	8008868 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800885e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	643b      	str	r3, [r7, #64]	; 0x40
 8008866:	e002      	b.n	800886e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008868:	23fc      	movs	r3, #252	; 0xfc
 800886a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800886e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008872:	2b00      	cmp	r3, #0
 8008874:	d111      	bne.n	800889a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008876:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00e      	beq.n	800889a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800887c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008886:	2104      	movs	r1, #4
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fb7a 	bl	8007f82 <set_sequence_step_timeout>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800889a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3748      	adds	r7, #72	; 0x48
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b090      	sub	sp, #64	; 0x40
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80088b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80088ba:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80088bc:	f240 7376 	movw	r3, #1910	; 0x776
 80088c0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80088c2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80088c8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088cc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80088ce:	f240 234e 	movw	r3, #590	; 0x24e
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80088d4:	f240 23b2 	movw	r3, #690	; 0x2b2
 80088d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80088da:	f44f 7325 	mov.w	r3, #660	; 0x294
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80088e0:	f240 2326 	movw	r3, #550	; 0x226
 80088e4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80088ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	441a      	add	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80088f4:	f107 0318 	add.w	r3, r7, #24
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7fc fe0c 	bl	8005518 <VL53L0X_GetSequenceStepEnables>
 8008900:	4603      	mov	r3, r0
 8008902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800890e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008912:	e075      	b.n	8008a00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008914:	7e3b      	ldrb	r3, [r7, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800891a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008920:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008922:	2b00      	cmp	r3, #0
 8008924:	d030      	beq.n	8008988 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	461a      	mov	r2, r3
 800892c:	2102      	movs	r1, #2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff fa46 	bl	8007dc0 <get_sequence_step_timeout>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800893a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800893e:	2b00      	cmp	r3, #0
 8008940:	d122      	bne.n	8008988 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008942:	7e3b      	ldrb	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d007      	beq.n	8008958 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800894c:	6939      	ldr	r1, [r7, #16]
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008952:	441a      	add	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008958:	7ebb      	ldrb	r3, [r7, #26]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008962:	6939      	ldr	r1, [r7, #16]
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	440b      	add	r3, r1
 8008968:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800896a:	441a      	add	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	e00a      	b.n	8008988 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008972:	7e7b      	ldrb	r3, [r7, #25]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d007      	beq.n	8008988 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800897c:	6939      	ldr	r1, [r7, #16]
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008982:	441a      	add	r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008988:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800898c:	2b00      	cmp	r3, #0
 800898e:	d114      	bne.n	80089ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008990:	7efb      	ldrb	r3, [r7, #27]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d011      	beq.n	80089ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	461a      	mov	r2, r3
 800899c:	2103      	movs	r1, #3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff fa0e 	bl	8007dc0 <get_sequence_step_timeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80089b4:	441a      	add	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d114      	bne.n	80089ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80089c2:	7f3b      	ldrb	r3, [r7, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d011      	beq.n	80089ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	461a      	mov	r2, r3
 80089ce:	2104      	movs	r1, #4
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff f9f5 	bl	8007dc0 <get_sequence_step_timeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80089e6:	441a      	add	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3740      	adds	r7, #64	; 0x40
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008a1a:	e0c6      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	4413      	add	r3, r2
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008a2c:	7cfb      	ldrb	r3, [r7, #19]
 8008a2e:	2bff      	cmp	r3, #255	; 0xff
 8008a30:	f040 808d 	bne.w	8008b4e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4413      	add	r3, r2
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	747b      	strb	r3, [r7, #17]
			Index++;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	3301      	adds	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008a44:	7c7b      	ldrb	r3, [r7, #17]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d87e      	bhi.n	8008b48 <VL53L0X_load_tuning_settings+0x140>
 8008a4a:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <VL53L0X_load_tuning_settings+0x48>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008a9b 	.word	0x08008a9b
 8008a58:	08008ad5 	.word	0x08008ad5
 8008a5c:	08008b0f 	.word	0x08008b0f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	743b      	strb	r3, [r7, #16]
				Index++;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4413      	add	r3, r2
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008a80:	7c3b      	ldrb	r3, [r7, #16]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	89ba      	ldrh	r2, [r7, #12]
 8008a94:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008a98:	e087      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	743b      	strb	r3, [r7, #16]
				Index++;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008aba:	7c3b      	ldrb	r3, [r7, #16]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	89ba      	ldrh	r2, [r7, #12]
 8008ace:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008ad2:	e06a      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	4413      	add	r3, r2
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	743b      	strb	r3, [r7, #16]
				Index++;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4413      	add	r3, r2
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	3301      	adds	r3, #1
 8008af2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008af4:	7c3b      	ldrb	r3, [r7, #16]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4413      	add	r3, r2
 8008b02:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	89ba      	ldrh	r2, [r7, #12]
 8008b08:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008b0c:	e04d      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	4413      	add	r3, r2
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	743b      	strb	r3, [r7, #16]
				Index++;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	4413      	add	r3, r2
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008b2e:	7c3b      	ldrb	r3, [r7, #16]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4413      	add	r3, r2
 8008b3c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	89ba      	ldrh	r2, [r7, #12]
 8008b42:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008b46:	e030      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b48:	23fc      	movs	r3, #252	; 0xfc
 8008b4a:	77fb      	strb	r3, [r7, #31]
 8008b4c:	e02d      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008b4e:	7cfb      	ldrb	r3, [r7, #19]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d828      	bhi.n	8008ba6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	3301      	adds	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008b64:	2300      	movs	r3, #0
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	e00f      	b.n	8008b8a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	4413      	add	r3, r2
 8008b70:	7819      	ldrb	r1, [r3, #0]
 8008b72:	f107 0208 	add.w	r2, r7, #8
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	4413      	add	r3, r2
 8008b7a:	460a      	mov	r2, r1
 8008b7c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	3301      	adds	r3, #1
 8008b82:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	3301      	adds	r3, #1
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	7cfb      	ldrb	r3, [r7, #19]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	dbeb      	blt.n	8008b6a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008b92:	7cfb      	ldrb	r3, [r7, #19]
 8008b94:	f107 0208 	add.w	r2, r7, #8
 8008b98:	7cb9      	ldrb	r1, [r7, #18]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fdee 	bl	800977c <VL53L0X_WriteMulti>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e001      	b.n	8008baa <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ba6:	23fc      	movs	r3, #252	; 0xfc
 8008ba8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	4413      	add	r3, r2
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <VL53L0X_load_tuning_settings+0x1b8>
 8008bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f43f af2e 	beq.w	8008a1c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008be2:	f107 0313 	add.w	r3, r7, #19
 8008be6:	4619      	mov	r1, r3
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7fc fd21 	bl	8005630 <VL53L0X_GetXTalkCompensationEnable>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d111      	bne.n	8008c1e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008bfa:	7cfb      	ldrb	r3, [r7, #19]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00e      	beq.n	8008c1e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	8a9b      	ldrh	r3, [r3, #20]
 8008c0a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	fb02 f303 	mul.w	r3, r2, r3
 8008c12:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	3380      	adds	r3, #128	; 0x80
 8008c18:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008c1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b086      	sub	sp, #24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008c42:	f107 0310 	add.w	r3, r7, #16
 8008c46:	461a      	mov	r2, r3
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff ffbe 	bl	8008bcc <VL53L0X_get_total_xtalk_rate>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d105      	bne.n	8008c68 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	441a      	add	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]

	return Status;
 8008c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b09a      	sub	sp, #104	; 0x68
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008c82:	2312      	movs	r3, #18
 8008c84:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c8a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8008c8c:	2342      	movs	r3, #66	; 0x42
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008c90:	2306      	movs	r3, #6
 8008c92:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008c94:	2307      	movs	r3, #7
 8008c96:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008cac:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8008cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	3380      	adds	r3, #128	; 0x80
 8008cbc:	0a1b      	lsrs	r3, r3, #8
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cc4:	fb02 f303 	mul.w	r3, r2, r3
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01a      	beq.n	8008d0a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8008cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce0:	4413      	add	r3, r2
 8008ce2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008ce4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8008cee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	4413      	add	r3, r2
 8008cf6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cfa:	fb03 f303 	mul.w	r3, r3, r3
 8008cfe:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d02:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d06:	0c1b      	lsrs	r3, r3, #16
 8008d08:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	fb03 f303 	mul.w	r3, r3, r3
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d2c:	0c1b      	lsrs	r3, r3, #16
 8008d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d32:	085a      	lsrs	r2, r3, #1
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	441a      	add	r2, r3
 8008d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d44:	fb02 f303 	mul.w	r3, r2, r3
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d50:	d302      	bcc.n	8008d58 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8008d52:	4b54      	ldr	r3, [pc, #336]	; (8008ea4 <VL53L0X_calc_dmax+0x230>)
 8008d54:	663b      	str	r3, [r7, #96]	; 0x60
 8008d56:	e015      	b.n	8008d84 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5a:	085a      	lsrs	r2, r3, #1
 8008d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d5e:	441a      	add	r2, r3
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d66:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
 8008d70:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d78:	0c1b      	lsrs	r3, r3, #16
 8008d7a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8008d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d7e:	fb03 f303 	mul.w	r3, r3, r3
 8008d82:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d86:	039b      	lsls	r3, r3, #14
 8008d88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d8c:	4a46      	ldr	r2, [pc, #280]	; (8008ea8 <VL53L0X_calc_dmax+0x234>)
 8008d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	fb03 f303 	mul.w	r3, r3, r3
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da0:	fb03 f303 	mul.w	r3, r3, r3
 8008da4:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	3308      	adds	r3, #8
 8008daa:	091b      	lsrs	r3, r3, #4
 8008dac:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db8:	4613      	mov	r3, r2
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	4413      	add	r3, r2
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008dc8:	0b9b      	lsrs	r3, r3, #14
 8008dca:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dd0:	4413      	add	r3, r2
 8008dd2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	4413      	add	r3, r2
 8008ddc:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	039b      	lsls	r3, r3, #14
 8008dec:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	4413      	add	r3, r2
 8008df6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e00:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e06:	fb02 f303 	mul.w	r3, r2, r3
 8008e0a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e12:	4a25      	ldr	r2, [pc, #148]	; (8008ea8 <VL53L0X_calc_dmax+0x234>)
 8008e14:	fba2 2303 	umull	r2, r3, r2, r3
 8008e18:	099b      	lsrs	r3, r3, #6
 8008e1a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e28:	4a1f      	ldr	r2, [pc, #124]	; (8008ea8 <VL53L0X_calc_dmax+0x234>)
 8008e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2e:	099b      	lsrs	r3, r3, #6
 8008e30:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e34:	3380      	adds	r3, #128	; 0x80
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d008      	beq.n	8008e52 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	085a      	lsrs	r2, r3, #1
 8008e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e46:	441a      	add	r2, r3
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e50:	e001      	b.n	8008e56 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008e56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008e58:	f7fe f9ba 	bl	80071d0 <VL53L0X_isqrt>
 8008e5c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d008      	beq.n	8008e76 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	085a      	lsrs	r2, r3, #1
 8008e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6a:	441a      	add	r2, r3
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e74:	e001      	b.n	8008e7a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8008e7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008e7c:	f7fe f9a8 	bl	80071d0 <VL53L0X_isqrt>
 8008e80:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d902      	bls.n	8008e96 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8008e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e94:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008e96:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3768      	adds	r7, #104	; 0x68
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	fff00000 	.word	0xfff00000
 8008ea8:	10624dd3 	.word	0x10624dd3

08008eac <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b0b4      	sub	sp, #208	; 0xd0
 8008eb0:	af04      	add	r7, sp, #16
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008eba:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008ec2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008eca:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008ece:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008ed2:	f241 235c 	movw	r3, #4700	; 0x125c
 8008ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008eda:	4b9e      	ldr	r3, [pc, #632]	; (8009154 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008ee0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008ee6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008ef4:	4b98      	ldr	r3, [pc, #608]	; (8009158 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008ef6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008efc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008efe:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008f02:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008f04:	f240 6377 	movw	r3, #1655	; 0x677
 8008f08:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f1e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008f2c:	f107 0310 	add.w	r3, r7, #16
 8008f30:	461a      	mov	r2, r3
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fe78 	bl	8008c2a <VL53L0X_get_total_signal_rate>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	461a      	mov	r2, r3
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff fe3f 	bl	8008bcc <VL53L0X_get_total_xtalk_rate>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3
 8008f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8008f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f66:	0c1b      	lsrs	r3, r3, #16
 8008f68:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008f78:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d902      	bls.n	8008f88 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008f88:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d168      	bne.n	8009062 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008fa0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008fa4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7fe feb2 	bl	8007d18 <VL53L0X_calc_timeout_mclks>
 8008fb4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008fc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008fca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7fe fe9f 	bl	8007d18 <VL53L0X_calc_timeout_mclks>
 8008fda:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008fe2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d102      	bne.n	8008ff0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008fea:	2302      	movs	r3, #2
 8008fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008ff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008ff6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	02db      	lsls	r3, r3, #11
 8009000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009008:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800900c:	4a53      	ldr	r2, [pc, #332]	; (800915c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800900e:	fba2 2303 	umull	r2, r3, r2, r3
 8009012:	099b      	lsrs	r3, r3, #6
 8009014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009018:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800901c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800901e:	fb02 f303 	mul.w	r3, r2, r3
 8009022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800902a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800902e:	4a4b      	ldr	r2, [pc, #300]	; (800915c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009030:	fba2 2303 	umull	r2, r3, r2, r3
 8009034:	099b      	lsrs	r3, r3, #6
 8009036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3380      	adds	r3, #128	; 0x80
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009048:	fb02 f303 	mul.w	r3, r2, r3
 800904c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009054:	3380      	adds	r3, #128	; 0x80
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	021b      	lsls	r3, r3, #8
 8009060:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009062:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800906a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800906e:	e15e      	b.n	800932e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10c      	bne.n	8009090 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800907c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009084:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e14c      	b.n	800932a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009098:	2301      	movs	r3, #1
 800909a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800909e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090a2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80090a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a6:	041a      	lsls	r2, r3, #16
 80090a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80090b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d902      	bls.n	80090c2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80090bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80090c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80090c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80090ca:	fb02 f303 	mul.w	r3, r2, r3
 80090ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80090d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80090d6:	4613      	mov	r3, r2
 80090d8:	005b      	lsls	r3, r3, #1
 80090da:	4413      	add	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe f876 	bl	80071d0 <VL53L0X_isqrt>
 80090e4:	4603      	mov	r3, r0
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	891b      	ldrh	r3, [r3, #8]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
 80090f6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80090f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090fa:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80090fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009100:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009102:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009104:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009108:	4a14      	ldr	r2, [pc, #80]	; (800915c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800910a:	fba2 2303 	umull	r2, r3, r2, r3
 800910e:	099b      	lsrs	r3, r3, #6
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800911a:	4a10      	ldr	r2, [pc, #64]	; (800915c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800911c:	fba2 2303 	umull	r2, r3, r2, r3
 8009120:	099b      	lsrs	r3, r3, #6
 8009122:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800912a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	bfb8      	it	lt
 8009136:	425b      	neglt	r3, r3
 8009138:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800913a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	7e1b      	ldrb	r3, [r3, #24]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800914c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009150:	e033      	b.n	80091ba <VL53L0X_calc_sigma_estimate+0x30e>
 8009152:	bf00      	nop
 8009154:	028f87ae 	.word	0x028f87ae
 8009158:	0006999a 	.word	0x0006999a
 800915c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009166:	fbb2 f3f3 	udiv	r3, r2, r3
 800916a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009178:	fb02 f303 	mul.w	r3, r2, r3
 800917c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009180:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009186:	4413      	add	r3, r2
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800918e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009192:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800919a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80091a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091a8:	fb03 f303 	mul.w	r3, r3, r3
 80091ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80091b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091b4:	0b9b      	lsrs	r3, r3, #14
 80091b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80091ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091cc:	0c1b      	lsrs	r3, r3, #16
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	fb03 f303 	mul.w	r3, r3, r3
 80091d6:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80091d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	fb03 f303 	mul.w	r3, r3, r3
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80091f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	4413      	add	r3, r2
 80091f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80091f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091fa:	f7fd ffe9 	bl	80071d0 <VL53L0X_isqrt>
 80091fe:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	3332      	adds	r3, #50	; 0x32
 800920a:	4a4b      	ldr	r2, [pc, #300]	; (8009338 <VL53L0X_calc_sigma_estimate+0x48c>)
 800920c:	fba2 2303 	umull	r2, r3, r2, r3
 8009210:	095a      	lsrs	r2, r3, #5
 8009212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009214:	fbb2 f3f3 	udiv	r3, r2, r3
 8009218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800921c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009220:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009224:	fb02 f303 	mul.w	r3, r2, r3
 8009228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800922c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009230:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009234:	3308      	adds	r3, #8
 8009236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800923a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800923e:	4a3f      	ldr	r2, [pc, #252]	; (800933c <VL53L0X_calc_sigma_estimate+0x490>)
 8009240:	fba2 2303 	umull	r2, r3, r2, r3
 8009244:	0b5b      	lsrs	r3, r3, #13
 8009246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800924a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800924e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009250:	429a      	cmp	r2, r3
 8009252:	d902      	bls.n	800925a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800925a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800925e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009262:	4413      	add	r3, r2
 8009264:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009268:	4a35      	ldr	r2, [pc, #212]	; (8009340 <VL53L0X_calc_sigma_estimate+0x494>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	099b      	lsrs	r3, r3, #6
 8009270:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8009276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800927a:	441a      	add	r2, r3
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009282:	4618      	mov	r0, r3
 8009284:	f7fd ffa4 	bl	80071d0 <VL53L0X_isqrt>
 8009288:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009296:	4a2a      	ldr	r2, [pc, #168]	; (8009340 <VL53L0X_calc_sigma_estimate+0x494>)
 8009298:	fba2 2303 	umull	r2, r3, r2, r3
 800929c:	099b      	lsrs	r3, r3, #6
 800929e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80092a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092a4:	fb03 f303 	mul.w	r3, r3, r3
 80092a8:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	fb03 f303 	mul.w	r3, r3, r3
 80092b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80092b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	4413      	add	r3, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fd ff89 	bl	80071d0 <VL53L0X_isqrt>
 80092be:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80092ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <VL53L0X_calc_sigma_estimate+0x43c>
 80092d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <VL53L0X_calc_sigma_estimate+0x43c>
 80092dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d903      	bls.n	80092f0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80092e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092f6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009302:	6939      	ldr	r1, [r7, #16]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	9303      	str	r3, [sp, #12]
 8009308:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800930c:	9302      	str	r3, [sp, #8]
 800930e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800931c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff fca8 	bl	8008c74 <VL53L0X_calc_dmax>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800932a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800932e:	4618      	mov	r0, r3
 8009330:	37c0      	adds	r7, #192	; 0xc0
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	51eb851f 	.word	0x51eb851f
 800933c:	d1b71759 	.word	0xd1b71759
 8009340:	10624dd3 	.word	0x10624dd3

08009344 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b090      	sub	sp, #64	; 0x40
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	461a      	mov	r2, r3
 8009350:	460b      	mov	r3, r1
 8009352:	72fb      	strb	r3, [r7, #11]
 8009354:	4613      	mov	r3, r2
 8009356:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009358:	2300      	movs	r3, #0
 800935a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	10db      	asrs	r3, r3, #3
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80093a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d017      	beq.n	80093dc <VL53L0X_get_pal_range_status+0x98>
 80093ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	d013      	beq.n	80093dc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80093b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093b8:	2b07      	cmp	r3, #7
 80093ba:	d00f      	beq.n	80093dc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80093bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093c0:	2b0c      	cmp	r3, #12
 80093c2:	d00b      	beq.n	80093dc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80093c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093c8:	2b0d      	cmp	r3, #13
 80093ca:	d007      	beq.n	80093dc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80093cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093d0:	2b0e      	cmp	r3, #14
 80093d2:	d003      	beq.n	80093dc <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80093d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80093d8:	2b0f      	cmp	r3, #15
 80093da:	d103      	bne.n	80093e4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80093e2:	e002      	b.n	80093ea <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80093ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80093f2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80093f6:	461a      	mov	r2, r3
 80093f8:	2100      	movs	r1, #0
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7fc f9ec 	bl	80057d8 <VL53L0X_GetLimitCheckEnable>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800940a:	2b00      	cmp	r3, #0
 800940c:	d02e      	beq.n	800946c <VL53L0X_get_pal_range_status+0x128>
 800940e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009412:	2b00      	cmp	r3, #0
 8009414:	d12a      	bne.n	800946c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009416:	f107 0310 	add.w	r3, r7, #16
 800941a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800941e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f7ff fd43 	bl	8008eac <VL53L0X_calc_sigma_estimate>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800942c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	b29a      	uxth	r2, r3
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800943c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009440:	2b00      	cmp	r3, #0
 8009442:	d113      	bne.n	800946c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009444:	f107 0320 	add.w	r3, r7, #32
 8009448:	461a      	mov	r2, r3
 800944a:	2100      	movs	r1, #0
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f7fc fa49 	bl	80058e4 <VL53L0X_GetLimitCheckValue>
 8009452:	4603      	mov	r3, r0
 8009454:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d006      	beq.n	800946c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800945e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009460:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009462:	429a      	cmp	r2, r3
 8009464:	d902      	bls.n	800946c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009466:	2301      	movs	r3, #1
 8009468:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800946c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009470:	2b00      	cmp	r3, #0
 8009472:	d109      	bne.n	8009488 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009474:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009478:	461a      	mov	r2, r3
 800947a:	2102      	movs	r1, #2
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7fc f9ab 	bl	80057d8 <VL53L0X_GetLimitCheckEnable>
 8009482:	4603      	mov	r3, r0
 8009484:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009488:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800948c:	2b00      	cmp	r3, #0
 800948e:	d044      	beq.n	800951a <VL53L0X_get_pal_range_status+0x1d6>
 8009490:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009494:	2b00      	cmp	r3, #0
 8009496:	d140      	bne.n	800951a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009498:	f107 031c 	add.w	r3, r7, #28
 800949c:	461a      	mov	r2, r3
 800949e:	2102      	movs	r1, #2
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7fc fa1f 	bl	80058e4 <VL53L0X_GetLimitCheckValue>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80094ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d107      	bne.n	80094c4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094b4:	2201      	movs	r2, #1
 80094b6:	21ff      	movs	r1, #255	; 0xff
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f9bb 	bl	8009834 <VL53L0X_WrByte>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80094c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80094cc:	f107 0316 	add.w	r3, r7, #22
 80094d0:	461a      	mov	r2, r3
 80094d2:	21b6      	movs	r1, #182	; 0xb6
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fa59 	bl	800998c <VL53L0X_RdWord>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80094e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d107      	bne.n	80094f8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094e8:	2200      	movs	r2, #0
 80094ea:	21ff      	movs	r1, #255	; 0xff
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f9a1 	bl	8009834 <VL53L0X_WrByte>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80094f8:	8afb      	ldrh	r3, [r7, #22]
 80094fa:	025b      	lsls	r3, r3, #9
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009502:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800950c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800950e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009510:	429a      	cmp	r2, r3
 8009512:	d902      	bls.n	800951a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800951a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009526:	461a      	mov	r2, r3
 8009528:	2103      	movs	r1, #3
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f7fc f954 	bl	80057d8 <VL53L0X_GetLimitCheckEnable>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	d023      	beq.n	8009586 <VL53L0X_get_pal_range_status+0x242>
 800953e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009542:	2b00      	cmp	r3, #0
 8009544:	d11f      	bne.n	8009586 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009546:	893b      	ldrh	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	637b      	str	r3, [r7, #52]	; 0x34
 8009550:	e005      	b.n	800955e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	021a      	lsls	r2, r3, #8
 8009556:	893b      	ldrh	r3, [r7, #8]
 8009558:	fbb2 f3f3 	udiv	r3, r2, r3
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800955e:	f107 0318 	add.w	r3, r7, #24
 8009562:	461a      	mov	r2, r3
 8009564:	2103      	movs	r1, #3
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7fc f9bc 	bl	80058e4 <VL53L0X_GetLimitCheckValue>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009578:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800957a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800957c:	429a      	cmp	r2, r3
 800957e:	d202      	bcs.n	8009586 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009586:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800958a:	2b00      	cmp	r3, #0
 800958c:	d14a      	bne.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800958e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009592:	2b01      	cmp	r3, #1
 8009594:	d103      	bne.n	800959e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009598:	22ff      	movs	r2, #255	; 0xff
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	e042      	b.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800959e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d007      	beq.n	80095b6 <VL53L0X_get_pal_range_status+0x272>
 80095a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d003      	beq.n	80095b6 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80095ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d103      	bne.n	80095be <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80095b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b8:	2205      	movs	r2, #5
 80095ba:	701a      	strb	r2, [r3, #0]
 80095bc:	e032      	b.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80095be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095c2:	2b06      	cmp	r3, #6
 80095c4:	d003      	beq.n	80095ce <VL53L0X_get_pal_range_status+0x28a>
 80095c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d103      	bne.n	80095d6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	2204      	movs	r2, #4
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e026      	b.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80095d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095da:	2b08      	cmp	r3, #8
 80095dc:	d007      	beq.n	80095ee <VL53L0X_get_pal_range_status+0x2aa>
 80095de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095e2:	2b0a      	cmp	r3, #10
 80095e4:	d003      	beq.n	80095ee <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80095e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d103      	bne.n	80095f6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80095ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f0:	2203      	movs	r2, #3
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e016      	b.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80095f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	d003      	beq.n	8009606 <VL53L0X_get_pal_range_status+0x2c2>
 80095fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009602:	2b01      	cmp	r3, #1
 8009604:	d103      	bne.n	800960e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009608:	2202      	movs	r2, #2
 800960a:	701a      	strb	r2, [r3, #0]
 800960c:	e00a      	b.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800960e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009612:	2b01      	cmp	r3, #1
 8009614:	d103      	bne.n	800961e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	2201      	movs	r2, #1
 800961a:	701a      	strb	r2, [r3, #0]
 800961c:	e002      	b.n	8009624 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800961e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009620:	2200      	movs	r2, #0
 8009622:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800962c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962e:	2200      	movs	r2, #0
 8009630:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009632:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009636:	461a      	mov	r2, r3
 8009638:	2101      	movs	r1, #1
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7fc f8cc 	bl	80057d8 <VL53L0X_GetLimitCheckEnable>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009646:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800964a:	2b00      	cmp	r3, #0
 800964c:	d14f      	bne.n	80096ee <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800964e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <VL53L0X_get_pal_range_status+0x31a>
 8009656:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800965a:	2b01      	cmp	r3, #1
 800965c:	d103      	bne.n	8009666 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800965e:	2301      	movs	r3, #1
 8009660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009664:	e002      	b.n	800966c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009672:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009676:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800967a:	2b04      	cmp	r3, #4
 800967c:	d003      	beq.n	8009686 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800967e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009682:	2b00      	cmp	r3, #0
 8009684:	d103      	bne.n	800968e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968c:	e002      	b.n	8009694 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800969a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800969e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <VL53L0X_get_pal_range_status+0x36a>
 80096a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d103      	bne.n	80096b6 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80096ae:	2301      	movs	r3, #1
 80096b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b4:	e002      	b.n	80096bc <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80096c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80096c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <VL53L0X_get_pal_range_status+0x392>
 80096ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d103      	bne.n	80096de <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096dc:	e002      	b.n	80096e4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80096ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3740      	adds	r7, #64	; 0x40
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af02      	add	r7, sp, #8
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	330a      	adds	r3, #10
 800970a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009718:	b299      	uxth	r1, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	b29a      	uxth	r2, r3
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4613      	mov	r3, r2
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	f7f8 fe41 	bl	80023ac <HAL_I2C_Master_Transmit>
 800972a:	4603      	mov	r3, r0
 800972c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800972e:	693b      	ldr	r3, [r7, #16]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af02      	add	r7, sp, #8
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	330a      	adds	r3, #10
 8009748:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	b2db      	uxtb	r3, r3
 800975c:	b299      	uxth	r1, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	b29a      	uxth	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4613      	mov	r3, r2
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	f7f8 ff13 	bl	8002594 <HAL_I2C_Master_Receive>
 800976e:	4603      	mov	r3, r0
 8009770:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009772:	693b      	ldr	r3, [r7, #16]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	607a      	str	r2, [r7, #4]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	460b      	mov	r3, r1
 800978a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800978c:	2300      	movs	r3, #0
 800978e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b3f      	cmp	r3, #63	; 0x3f
 8009794:	d902      	bls.n	800979c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009796:	f06f 0303 	mvn.w	r3, #3
 800979a:	e016      	b.n	80097ca <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800979c:	4a0d      	ldr	r2, [pc, #52]	; (80097d4 <VL53L0X_WriteMulti+0x58>)
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	480c      	ldr	r0, [pc, #48]	; (80097d8 <VL53L0X_WriteMulti+0x5c>)
 80097a8:	f000 f99e 	bl	8009ae8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	3301      	adds	r3, #1
 80097b0:	461a      	mov	r2, r3
 80097b2:	4908      	ldr	r1, [pc, #32]	; (80097d4 <VL53L0X_WriteMulti+0x58>)
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff ffa0 	bl	80096fa <_I2CWrite>
 80097ba:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80097c2:	23ec      	movs	r3, #236	; 0xec
 80097c4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80097c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	2000096c 	.word	0x2000096c
 80097d8:	2000096d 	.word	0x2000096d

080097dc <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	460b      	mov	r3, r1
 80097ea:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80097f0:	f107 030b 	add.w	r3, r7, #11
 80097f4:	2201      	movs	r2, #1
 80097f6:	4619      	mov	r1, r3
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff ff7e 	bl	80096fa <_I2CWrite>
 80097fe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d002      	beq.n	800980c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009806:	23ec      	movs	r3, #236	; 0xec
 8009808:	75fb      	strb	r3, [r7, #23]
        goto done;
 800980a:	e00c      	b.n	8009826 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7ff ff91 	bl	8009738 <_I2CRead>
 8009816:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800981e:	23ec      	movs	r3, #236	; 0xec
 8009820:	75fb      	strb	r3, [r7, #23]
 8009822:	e000      	b.n	8009826 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009824:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
 8009840:	4613      	mov	r3, r2
 8009842:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009848:	4a0b      	ldr	r2, [pc, #44]	; (8009878 <VL53L0X_WrByte+0x44>)
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800984e:	4a0a      	ldr	r2, [pc, #40]	; (8009878 <VL53L0X_WrByte+0x44>)
 8009850:	78bb      	ldrb	r3, [r7, #2]
 8009852:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009854:	2202      	movs	r2, #2
 8009856:	4908      	ldr	r1, [pc, #32]	; (8009878 <VL53L0X_WrByte+0x44>)
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff ff4e 	bl	80096fa <_I2CWrite>
 800985e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009866:	23ec      	movs	r3, #236	; 0xec
 8009868:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800986a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	2000096c 	.word	0x2000096c

0800987c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
 8009888:	4613      	mov	r3, r2
 800988a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800988c:	2300      	movs	r3, #0
 800988e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009890:	4a0e      	ldr	r2, [pc, #56]	; (80098cc <VL53L0X_WrWord+0x50>)
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009896:	883b      	ldrh	r3, [r7, #0]
 8009898:	0a1b      	lsrs	r3, r3, #8
 800989a:	b29b      	uxth	r3, r3
 800989c:	b2da      	uxtb	r2, r3
 800989e:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <VL53L0X_WrWord+0x50>)
 80098a0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80098a2:	883b      	ldrh	r3, [r7, #0]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <VL53L0X_WrWord+0x50>)
 80098a8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80098aa:	2203      	movs	r2, #3
 80098ac:	4907      	ldr	r1, [pc, #28]	; (80098cc <VL53L0X_WrWord+0x50>)
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff ff23 	bl	80096fa <_I2CWrite>
 80098b4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80098bc:	23ec      	movs	r3, #236	; 0xec
 80098be:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80098c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	2000096c 	.word	0x2000096c

080098d0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	4608      	mov	r0, r1
 80098da:	4611      	mov	r1, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	4603      	mov	r3, r0
 80098e0:	70fb      	strb	r3, [r7, #3]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70bb      	strb	r3, [r7, #2]
 80098e6:	4613      	mov	r3, r2
 80098e8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80098ee:	f107 020e 	add.w	r2, r7, #14
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f81e 	bl	8009938 <VL53L0X_RdByte>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d110      	bne.n	800992a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009908:	7bba      	ldrb	r2, [r7, #14]
 800990a:	78bb      	ldrb	r3, [r7, #2]
 800990c:	4013      	ands	r3, r2
 800990e:	b2da      	uxtb	r2, r3
 8009910:	787b      	ldrb	r3, [r7, #1]
 8009912:	4313      	orrs	r3, r2
 8009914:	b2db      	uxtb	r3, r3
 8009916:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009918:	7bba      	ldrb	r2, [r7, #14]
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff ff88 	bl	8009834 <VL53L0X_WrByte>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]
 8009928:	e000      	b.n	800992c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800992a:	bf00      	nop
done:
    return Status;
 800992c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	460b      	mov	r3, r1
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800994a:	f107 030b 	add.w	r3, r7, #11
 800994e:	2201      	movs	r2, #1
 8009950:	4619      	mov	r1, r3
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fed1 	bl	80096fa <_I2CWrite>
 8009958:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009960:	23ec      	movs	r3, #236	; 0xec
 8009962:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009964:	e00c      	b.n	8009980 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009966:	2201      	movs	r2, #1
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7ff fee4 	bl	8009738 <_I2CRead>
 8009970:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009978:	23ec      	movs	r3, #236	; 0xec
 800997a:	75fb      	strb	r3, [r7, #23]
 800997c:	e000      	b.n	8009980 <VL53L0X_RdByte+0x48>
    }
done:
 800997e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009980:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	460b      	mov	r3, r1
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800999a:	2300      	movs	r3, #0
 800999c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800999e:	f107 030b 	add.w	r3, r7, #11
 80099a2:	2201      	movs	r2, #1
 80099a4:	4619      	mov	r1, r3
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff fea7 	bl	80096fa <_I2CWrite>
 80099ac:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099b4:	23ec      	movs	r3, #236	; 0xec
 80099b6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80099b8:	e017      	b.n	80099ea <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80099ba:	2202      	movs	r2, #2
 80099bc:	490e      	ldr	r1, [pc, #56]	; (80099f8 <VL53L0X_RdWord+0x6c>)
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7ff feba 	bl	8009738 <_I2CRead>
 80099c4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80099cc:	23ec      	movs	r3, #236	; 0xec
 80099ce:	75fb      	strb	r3, [r7, #23]
        goto done;
 80099d0:	e00b      	b.n	80099ea <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <VL53L0X_RdWord+0x6c>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	b29a      	uxth	r2, r3
 80099dc:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <VL53L0X_RdWord+0x6c>)
 80099de:	785b      	ldrb	r3, [r3, #1]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	4413      	add	r3, r2
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80099ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	2000096c 	.word	0x2000096c

080099fc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	460b      	mov	r3, r1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009a0e:	f107 030b 	add.w	r3, r7, #11
 8009a12:	2201      	movs	r2, #1
 8009a14:	4619      	mov	r1, r3
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fe6f 	bl	80096fa <_I2CWrite>
 8009a1c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a24:	23ec      	movs	r3, #236	; 0xec
 8009a26:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009a28:	e01b      	b.n	8009a62 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	4910      	ldr	r1, [pc, #64]	; (8009a70 <VL53L0X_RdDWord+0x74>)
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff fe82 	bl	8009738 <_I2CRead>
 8009a34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009a3c:	23ec      	movs	r3, #236	; 0xec
 8009a3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009a40:	e00f      	b.n	8009a62 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <VL53L0X_RdDWord+0x74>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	061a      	lsls	r2, r3, #24
 8009a48:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <VL53L0X_RdDWord+0x74>)
 8009a4a:	785b      	ldrb	r3, [r3, #1]
 8009a4c:	041b      	lsls	r3, r3, #16
 8009a4e:	441a      	add	r2, r3
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <VL53L0X_RdDWord+0x74>)
 8009a52:	789b      	ldrb	r3, [r3, #2]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	4413      	add	r3, r2
 8009a58:	4a05      	ldr	r2, [pc, #20]	; (8009a70 <VL53L0X_RdDWord+0x74>)
 8009a5a:	78d2      	ldrb	r2, [r2, #3]
 8009a5c:	441a      	add	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	2000096c 	.word	0x2000096c

08009a74 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009a80:	2002      	movs	r0, #2
 8009a82:	f7f8 f921 	bl	8001cc8 <HAL_Delay>
    return status;
 8009a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <__errno>:
 8009a94:	4b01      	ldr	r3, [pc, #4]	; (8009a9c <__errno+0x8>)
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	200002c8 	.word	0x200002c8

08009aa0 <__libc_init_array>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	4d0d      	ldr	r5, [pc, #52]	; (8009ad8 <__libc_init_array+0x38>)
 8009aa4:	4c0d      	ldr	r4, [pc, #52]	; (8009adc <__libc_init_array+0x3c>)
 8009aa6:	1b64      	subs	r4, r4, r5
 8009aa8:	10a4      	asrs	r4, r4, #2
 8009aaa:	2600      	movs	r6, #0
 8009aac:	42a6      	cmp	r6, r4
 8009aae:	d109      	bne.n	8009ac4 <__libc_init_array+0x24>
 8009ab0:	4d0b      	ldr	r5, [pc, #44]	; (8009ae0 <__libc_init_array+0x40>)
 8009ab2:	4c0c      	ldr	r4, [pc, #48]	; (8009ae4 <__libc_init_array+0x44>)
 8009ab4:	f002 fdea 	bl	800c68c <_init>
 8009ab8:	1b64      	subs	r4, r4, r5
 8009aba:	10a4      	asrs	r4, r4, #2
 8009abc:	2600      	movs	r6, #0
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	d105      	bne.n	8009ace <__libc_init_array+0x2e>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac8:	4798      	blx	r3
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7ee      	b.n	8009aac <__libc_init_array+0xc>
 8009ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad2:	4798      	blx	r3
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	e7f2      	b.n	8009abe <__libc_init_array+0x1e>
 8009ad8:	0800cadc 	.word	0x0800cadc
 8009adc:	0800cadc 	.word	0x0800cadc
 8009ae0:	0800cadc 	.word	0x0800cadc
 8009ae4:	0800cae0 	.word	0x0800cae0

08009ae8 <memcpy>:
 8009ae8:	440a      	add	r2, r1
 8009aea:	4291      	cmp	r1, r2
 8009aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009af0:	d100      	bne.n	8009af4 <memcpy+0xc>
 8009af2:	4770      	bx	lr
 8009af4:	b510      	push	{r4, lr}
 8009af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009afe:	4291      	cmp	r1, r2
 8009b00:	d1f9      	bne.n	8009af6 <memcpy+0xe>
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <memset>:
 8009b04:	4402      	add	r2, r0
 8009b06:	4603      	mov	r3, r0
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d100      	bne.n	8009b0e <memset+0xa>
 8009b0c:	4770      	bx	lr
 8009b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b12:	e7f9      	b.n	8009b08 <memset+0x4>

08009b14 <__cvt>:
 8009b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b18:	ec55 4b10 	vmov	r4, r5, d0
 8009b1c:	2d00      	cmp	r5, #0
 8009b1e:	460e      	mov	r6, r1
 8009b20:	4619      	mov	r1, r3
 8009b22:	462b      	mov	r3, r5
 8009b24:	bfbb      	ittet	lt
 8009b26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b2a:	461d      	movlt	r5, r3
 8009b2c:	2300      	movge	r3, #0
 8009b2e:	232d      	movlt	r3, #45	; 0x2d
 8009b30:	700b      	strb	r3, [r1, #0]
 8009b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b38:	4691      	mov	r9, r2
 8009b3a:	f023 0820 	bic.w	r8, r3, #32
 8009b3e:	bfbc      	itt	lt
 8009b40:	4622      	movlt	r2, r4
 8009b42:	4614      	movlt	r4, r2
 8009b44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b48:	d005      	beq.n	8009b56 <__cvt+0x42>
 8009b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b4e:	d100      	bne.n	8009b52 <__cvt+0x3e>
 8009b50:	3601      	adds	r6, #1
 8009b52:	2102      	movs	r1, #2
 8009b54:	e000      	b.n	8009b58 <__cvt+0x44>
 8009b56:	2103      	movs	r1, #3
 8009b58:	ab03      	add	r3, sp, #12
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	ab02      	add	r3, sp, #8
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	ec45 4b10 	vmov	d0, r4, r5
 8009b64:	4653      	mov	r3, sl
 8009b66:	4632      	mov	r2, r6
 8009b68:	f000 fe72 	bl	800a850 <_dtoa_r>
 8009b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b70:	4607      	mov	r7, r0
 8009b72:	d102      	bne.n	8009b7a <__cvt+0x66>
 8009b74:	f019 0f01 	tst.w	r9, #1
 8009b78:	d022      	beq.n	8009bc0 <__cvt+0xac>
 8009b7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b7e:	eb07 0906 	add.w	r9, r7, r6
 8009b82:	d110      	bne.n	8009ba6 <__cvt+0x92>
 8009b84:	783b      	ldrb	r3, [r7, #0]
 8009b86:	2b30      	cmp	r3, #48	; 0x30
 8009b88:	d10a      	bne.n	8009ba0 <__cvt+0x8c>
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	f7f6 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b96:	b918      	cbnz	r0, 8009ba0 <__cvt+0x8c>
 8009b98:	f1c6 0601 	rsb	r6, r6, #1
 8009b9c:	f8ca 6000 	str.w	r6, [sl]
 8009ba0:	f8da 3000 	ldr.w	r3, [sl]
 8009ba4:	4499      	add	r9, r3
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7f6 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb2:	b108      	cbz	r0, 8009bb8 <__cvt+0xa4>
 8009bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bb8:	2230      	movs	r2, #48	; 0x30
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	454b      	cmp	r3, r9
 8009bbe:	d307      	bcc.n	8009bd0 <__cvt+0xbc>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bc4:	1bdb      	subs	r3, r3, r7
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	b004      	add	sp, #16
 8009bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd0:	1c59      	adds	r1, r3, #1
 8009bd2:	9103      	str	r1, [sp, #12]
 8009bd4:	701a      	strb	r2, [r3, #0]
 8009bd6:	e7f0      	b.n	8009bba <__cvt+0xa6>

08009bd8 <__exponent>:
 8009bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2900      	cmp	r1, #0
 8009bde:	bfb8      	it	lt
 8009be0:	4249      	neglt	r1, r1
 8009be2:	f803 2b02 	strb.w	r2, [r3], #2
 8009be6:	bfb4      	ite	lt
 8009be8:	222d      	movlt	r2, #45	; 0x2d
 8009bea:	222b      	movge	r2, #43	; 0x2b
 8009bec:	2909      	cmp	r1, #9
 8009bee:	7042      	strb	r2, [r0, #1]
 8009bf0:	dd2a      	ble.n	8009c48 <__exponent+0x70>
 8009bf2:	f10d 0407 	add.w	r4, sp, #7
 8009bf6:	46a4      	mov	ip, r4
 8009bf8:	270a      	movs	r7, #10
 8009bfa:	46a6      	mov	lr, r4
 8009bfc:	460a      	mov	r2, r1
 8009bfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c02:	fb07 1516 	mls	r5, r7, r6, r1
 8009c06:	3530      	adds	r5, #48	; 0x30
 8009c08:	2a63      	cmp	r2, #99	; 0x63
 8009c0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c12:	4631      	mov	r1, r6
 8009c14:	dcf1      	bgt.n	8009bfa <__exponent+0x22>
 8009c16:	3130      	adds	r1, #48	; 0x30
 8009c18:	f1ae 0502 	sub.w	r5, lr, #2
 8009c1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c20:	1c44      	adds	r4, r0, #1
 8009c22:	4629      	mov	r1, r5
 8009c24:	4561      	cmp	r1, ip
 8009c26:	d30a      	bcc.n	8009c3e <__exponent+0x66>
 8009c28:	f10d 0209 	add.w	r2, sp, #9
 8009c2c:	eba2 020e 	sub.w	r2, r2, lr
 8009c30:	4565      	cmp	r5, ip
 8009c32:	bf88      	it	hi
 8009c34:	2200      	movhi	r2, #0
 8009c36:	4413      	add	r3, r2
 8009c38:	1a18      	subs	r0, r3, r0
 8009c3a:	b003      	add	sp, #12
 8009c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c46:	e7ed      	b.n	8009c24 <__exponent+0x4c>
 8009c48:	2330      	movs	r3, #48	; 0x30
 8009c4a:	3130      	adds	r1, #48	; 0x30
 8009c4c:	7083      	strb	r3, [r0, #2]
 8009c4e:	70c1      	strb	r1, [r0, #3]
 8009c50:	1d03      	adds	r3, r0, #4
 8009c52:	e7f1      	b.n	8009c38 <__exponent+0x60>

08009c54 <_printf_float>:
 8009c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	ed2d 8b02 	vpush	{d8}
 8009c5c:	b08d      	sub	sp, #52	; 0x34
 8009c5e:	460c      	mov	r4, r1
 8009c60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c64:	4616      	mov	r6, r2
 8009c66:	461f      	mov	r7, r3
 8009c68:	4605      	mov	r5, r0
 8009c6a:	f001 fd95 	bl	800b798 <_localeconv_r>
 8009c6e:	f8d0 a000 	ldr.w	sl, [r0]
 8009c72:	4650      	mov	r0, sl
 8009c74:	f7f6 faac 	bl	80001d0 <strlen>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	f8d8 3000 	ldr.w	r3, [r8]
 8009c84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c88:	3307      	adds	r3, #7
 8009c8a:	f023 0307 	bic.w	r3, r3, #7
 8009c8e:	f103 0208 	add.w	r2, r3, #8
 8009c92:	f8c8 2000 	str.w	r2, [r8]
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cac:	ee08 0a10 	vmov	s16, r0
 8009cb0:	4b9f      	ldr	r3, [pc, #636]	; (8009f30 <_printf_float+0x2dc>)
 8009cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cba:	f7f6 ff37 	bl	8000b2c <__aeabi_dcmpun>
 8009cbe:	bb88      	cbnz	r0, 8009d24 <_printf_float+0xd0>
 8009cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cc4:	4b9a      	ldr	r3, [pc, #616]	; (8009f30 <_printf_float+0x2dc>)
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cca:	f7f6 ff11 	bl	8000af0 <__aeabi_dcmple>
 8009cce:	bb48      	cbnz	r0, 8009d24 <_printf_float+0xd0>
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 ff00 	bl	8000adc <__aeabi_dcmplt>
 8009cdc:	b110      	cbz	r0, 8009ce4 <_printf_float+0x90>
 8009cde:	232d      	movs	r3, #45	; 0x2d
 8009ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce4:	4b93      	ldr	r3, [pc, #588]	; (8009f34 <_printf_float+0x2e0>)
 8009ce6:	4894      	ldr	r0, [pc, #592]	; (8009f38 <_printf_float+0x2e4>)
 8009ce8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009cec:	bf94      	ite	ls
 8009cee:	4698      	movls	r8, r3
 8009cf0:	4680      	movhi	r8, r0
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	6123      	str	r3, [r4, #16]
 8009cf6:	9b05      	ldr	r3, [sp, #20]
 8009cf8:	f023 0204 	bic.w	r2, r3, #4
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	f04f 0900 	mov.w	r9, #0
 8009d02:	9700      	str	r7, [sp, #0]
 8009d04:	4633      	mov	r3, r6
 8009d06:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 f9d8 	bl	800a0c0 <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	f040 8090 	bne.w	8009e36 <_printf_float+0x1e2>
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	b00d      	add	sp, #52	; 0x34
 8009d1c:	ecbd 8b02 	vpop	{d8}
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	4640      	mov	r0, r8
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	f7f6 fefe 	bl	8000b2c <__aeabi_dcmpun>
 8009d30:	b140      	cbz	r0, 8009d44 <_printf_float+0xf0>
 8009d32:	464b      	mov	r3, r9
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bfbc      	itt	lt
 8009d38:	232d      	movlt	r3, #45	; 0x2d
 8009d3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d3e:	487f      	ldr	r0, [pc, #508]	; (8009f3c <_printf_float+0x2e8>)
 8009d40:	4b7f      	ldr	r3, [pc, #508]	; (8009f40 <_printf_float+0x2ec>)
 8009d42:	e7d1      	b.n	8009ce8 <_printf_float+0x94>
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d4a:	9206      	str	r2, [sp, #24]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	d13f      	bne.n	8009dd0 <_printf_float+0x17c>
 8009d50:	2306      	movs	r3, #6
 8009d52:	6063      	str	r3, [r4, #4]
 8009d54:	9b05      	ldr	r3, [sp, #20]
 8009d56:	6861      	ldr	r1, [r4, #4]
 8009d58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9303      	str	r3, [sp, #12]
 8009d60:	ab0a      	add	r3, sp, #40	; 0x28
 8009d62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d66:	ab09      	add	r3, sp, #36	; 0x24
 8009d68:	ec49 8b10 	vmov	d0, r8, r9
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	6022      	str	r2, [r4, #0]
 8009d70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d74:	4628      	mov	r0, r5
 8009d76:	f7ff fecd 	bl	8009b14 <__cvt>
 8009d7a:	9b06      	ldr	r3, [sp, #24]
 8009d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d7e:	2b47      	cmp	r3, #71	; 0x47
 8009d80:	4680      	mov	r8, r0
 8009d82:	d108      	bne.n	8009d96 <_printf_float+0x142>
 8009d84:	1cc8      	adds	r0, r1, #3
 8009d86:	db02      	blt.n	8009d8e <_printf_float+0x13a>
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	4299      	cmp	r1, r3
 8009d8c:	dd41      	ble.n	8009e12 <_printf_float+0x1be>
 8009d8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d92:	fa5f fb8b 	uxtb.w	fp, fp
 8009d96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d9a:	d820      	bhi.n	8009dde <_printf_float+0x18a>
 8009d9c:	3901      	subs	r1, #1
 8009d9e:	465a      	mov	r2, fp
 8009da0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009da4:	9109      	str	r1, [sp, #36]	; 0x24
 8009da6:	f7ff ff17 	bl	8009bd8 <__exponent>
 8009daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dac:	1813      	adds	r3, r2, r0
 8009dae:	2a01      	cmp	r2, #1
 8009db0:	4681      	mov	r9, r0
 8009db2:	6123      	str	r3, [r4, #16]
 8009db4:	dc02      	bgt.n	8009dbc <_printf_float+0x168>
 8009db6:	6822      	ldr	r2, [r4, #0]
 8009db8:	07d2      	lsls	r2, r2, #31
 8009dba:	d501      	bpl.n	8009dc0 <_printf_float+0x16c>
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d09c      	beq.n	8009d02 <_printf_float+0xae>
 8009dc8:	232d      	movs	r3, #45	; 0x2d
 8009dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dce:	e798      	b.n	8009d02 <_printf_float+0xae>
 8009dd0:	9a06      	ldr	r2, [sp, #24]
 8009dd2:	2a47      	cmp	r2, #71	; 0x47
 8009dd4:	d1be      	bne.n	8009d54 <_printf_float+0x100>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1bc      	bne.n	8009d54 <_printf_float+0x100>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e7b9      	b.n	8009d52 <_printf_float+0xfe>
 8009dde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009de2:	d118      	bne.n	8009e16 <_printf_float+0x1c2>
 8009de4:	2900      	cmp	r1, #0
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	dd0b      	ble.n	8009e02 <_printf_float+0x1ae>
 8009dea:	6121      	str	r1, [r4, #16]
 8009dec:	b913      	cbnz	r3, 8009df4 <_printf_float+0x1a0>
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	07d0      	lsls	r0, r2, #31
 8009df2:	d502      	bpl.n	8009dfa <_printf_float+0x1a6>
 8009df4:	3301      	adds	r3, #1
 8009df6:	440b      	add	r3, r1
 8009df8:	6123      	str	r3, [r4, #16]
 8009dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8009dfc:	f04f 0900 	mov.w	r9, #0
 8009e00:	e7de      	b.n	8009dc0 <_printf_float+0x16c>
 8009e02:	b913      	cbnz	r3, 8009e0a <_printf_float+0x1b6>
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	07d2      	lsls	r2, r2, #31
 8009e08:	d501      	bpl.n	8009e0e <_printf_float+0x1ba>
 8009e0a:	3302      	adds	r3, #2
 8009e0c:	e7f4      	b.n	8009df8 <_printf_float+0x1a4>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e7f2      	b.n	8009df8 <_printf_float+0x1a4>
 8009e12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	db05      	blt.n	8009e28 <_printf_float+0x1d4>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	6121      	str	r1, [r4, #16]
 8009e20:	07d8      	lsls	r0, r3, #31
 8009e22:	d5ea      	bpl.n	8009dfa <_printf_float+0x1a6>
 8009e24:	1c4b      	adds	r3, r1, #1
 8009e26:	e7e7      	b.n	8009df8 <_printf_float+0x1a4>
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	bfd4      	ite	le
 8009e2c:	f1c1 0202 	rsble	r2, r1, #2
 8009e30:	2201      	movgt	r2, #1
 8009e32:	4413      	add	r3, r2
 8009e34:	e7e0      	b.n	8009df8 <_printf_float+0x1a4>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	055a      	lsls	r2, r3, #21
 8009e3a:	d407      	bmi.n	8009e4c <_printf_float+0x1f8>
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	4642      	mov	r2, r8
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	d12c      	bne.n	8009ea4 <_printf_float+0x250>
 8009e4a:	e764      	b.n	8009d16 <_printf_float+0xc2>
 8009e4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e50:	f240 80e0 	bls.w	800a014 <_printf_float+0x3c0>
 8009e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f7f6 fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d034      	beq.n	8009ece <_printf_float+0x27a>
 8009e64:	4a37      	ldr	r2, [pc, #220]	; (8009f44 <_printf_float+0x2f0>)
 8009e66:	2301      	movs	r3, #1
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	f43f af51 	beq.w	8009d16 <_printf_float+0xc2>
 8009e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	db02      	blt.n	8009e82 <_printf_float+0x22e>
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	07d8      	lsls	r0, r3, #31
 8009e80:	d510      	bpl.n	8009ea4 <_printf_float+0x250>
 8009e82:	ee18 3a10 	vmov	r3, s16
 8009e86:	4652      	mov	r2, sl
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f43f af41 	beq.w	8009d16 <_printf_float+0xc2>
 8009e94:	f04f 0800 	mov.w	r8, #0
 8009e98:	f104 091a 	add.w	r9, r4, #26
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	4543      	cmp	r3, r8
 8009ea2:	dc09      	bgt.n	8009eb8 <_printf_float+0x264>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	079b      	lsls	r3, r3, #30
 8009ea8:	f100 8105 	bmi.w	800a0b6 <_printf_float+0x462>
 8009eac:	68e0      	ldr	r0, [r4, #12]
 8009eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb0:	4298      	cmp	r0, r3
 8009eb2:	bfb8      	it	lt
 8009eb4:	4618      	movlt	r0, r3
 8009eb6:	e730      	b.n	8009d1a <_printf_float+0xc6>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	464a      	mov	r2, r9
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f af27 	beq.w	8009d16 <_printf_float+0xc2>
 8009ec8:	f108 0801 	add.w	r8, r8, #1
 8009ecc:	e7e6      	b.n	8009e9c <_printf_float+0x248>
 8009ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	dc39      	bgt.n	8009f48 <_printf_float+0x2f4>
 8009ed4:	4a1b      	ldr	r2, [pc, #108]	; (8009f44 <_printf_float+0x2f0>)
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f af19 	beq.w	8009d16 <_printf_float+0xc2>
 8009ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	d102      	bne.n	8009ef2 <_printf_float+0x29e>
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	07d9      	lsls	r1, r3, #31
 8009ef0:	d5d8      	bpl.n	8009ea4 <_printf_float+0x250>
 8009ef2:	ee18 3a10 	vmov	r3, s16
 8009ef6:	4652      	mov	r2, sl
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4628      	mov	r0, r5
 8009efc:	47b8      	blx	r7
 8009efe:	3001      	adds	r0, #1
 8009f00:	f43f af09 	beq.w	8009d16 <_printf_float+0xc2>
 8009f04:	f04f 0900 	mov.w	r9, #0
 8009f08:	f104 0a1a 	add.w	sl, r4, #26
 8009f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0e:	425b      	negs	r3, r3
 8009f10:	454b      	cmp	r3, r9
 8009f12:	dc01      	bgt.n	8009f18 <_printf_float+0x2c4>
 8009f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f16:	e792      	b.n	8009e3e <_printf_float+0x1ea>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	4652      	mov	r2, sl
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4628      	mov	r0, r5
 8009f20:	47b8      	blx	r7
 8009f22:	3001      	adds	r0, #1
 8009f24:	f43f aef7 	beq.w	8009d16 <_printf_float+0xc2>
 8009f28:	f109 0901 	add.w	r9, r9, #1
 8009f2c:	e7ee      	b.n	8009f0c <_printf_float+0x2b8>
 8009f2e:	bf00      	nop
 8009f30:	7fefffff 	.word	0x7fefffff
 8009f34:	0800c6fc 	.word	0x0800c6fc
 8009f38:	0800c700 	.word	0x0800c700
 8009f3c:	0800c708 	.word	0x0800c708
 8009f40:	0800c704 	.word	0x0800c704
 8009f44:	0800c70c 	.word	0x0800c70c
 8009f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	bfa8      	it	ge
 8009f50:	461a      	movge	r2, r3
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	4691      	mov	r9, r2
 8009f56:	dc37      	bgt.n	8009fc8 <_printf_float+0x374>
 8009f58:	f04f 0b00 	mov.w	fp, #0
 8009f5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f60:	f104 021a 	add.w	r2, r4, #26
 8009f64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f66:	9305      	str	r3, [sp, #20]
 8009f68:	eba3 0309 	sub.w	r3, r3, r9
 8009f6c:	455b      	cmp	r3, fp
 8009f6e:	dc33      	bgt.n	8009fd8 <_printf_float+0x384>
 8009f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f74:	429a      	cmp	r2, r3
 8009f76:	db3b      	blt.n	8009ff0 <_printf_float+0x39c>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	07da      	lsls	r2, r3, #31
 8009f7c:	d438      	bmi.n	8009ff0 <_printf_float+0x39c>
 8009f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f80:	9b05      	ldr	r3, [sp, #20]
 8009f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	eba2 0901 	sub.w	r9, r2, r1
 8009f8a:	4599      	cmp	r9, r3
 8009f8c:	bfa8      	it	ge
 8009f8e:	4699      	movge	r9, r3
 8009f90:	f1b9 0f00 	cmp.w	r9, #0
 8009f94:	dc35      	bgt.n	800a002 <_printf_float+0x3ae>
 8009f96:	f04f 0800 	mov.w	r8, #0
 8009f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f9e:	f104 0a1a 	add.w	sl, r4, #26
 8009fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	eba3 0309 	sub.w	r3, r3, r9
 8009fac:	4543      	cmp	r3, r8
 8009fae:	f77f af79 	ble.w	8009ea4 <_printf_float+0x250>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4652      	mov	r2, sl
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	f43f aeaa 	beq.w	8009d16 <_printf_float+0xc2>
 8009fc2:	f108 0801 	add.w	r8, r8, #1
 8009fc6:	e7ec      	b.n	8009fa2 <_printf_float+0x34e>
 8009fc8:	4613      	mov	r3, r2
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4642      	mov	r2, r8
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b8      	blx	r7
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d1c0      	bne.n	8009f58 <_printf_float+0x304>
 8009fd6:	e69e      	b.n	8009d16 <_printf_float+0xc2>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4628      	mov	r0, r5
 8009fde:	9205      	str	r2, [sp, #20]
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f ae97 	beq.w	8009d16 <_printf_float+0xc2>
 8009fe8:	9a05      	ldr	r2, [sp, #20]
 8009fea:	f10b 0b01 	add.w	fp, fp, #1
 8009fee:	e7b9      	b.n	8009f64 <_printf_float+0x310>
 8009ff0:	ee18 3a10 	vmov	r3, s16
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d1be      	bne.n	8009f7e <_printf_float+0x32a>
 800a000:	e689      	b.n	8009d16 <_printf_float+0xc2>
 800a002:	9a05      	ldr	r2, [sp, #20]
 800a004:	464b      	mov	r3, r9
 800a006:	4442      	add	r2, r8
 800a008:	4631      	mov	r1, r6
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	d1c1      	bne.n	8009f96 <_printf_float+0x342>
 800a012:	e680      	b.n	8009d16 <_printf_float+0xc2>
 800a014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a016:	2a01      	cmp	r2, #1
 800a018:	dc01      	bgt.n	800a01e <_printf_float+0x3ca>
 800a01a:	07db      	lsls	r3, r3, #31
 800a01c:	d538      	bpl.n	800a090 <_printf_float+0x43c>
 800a01e:	2301      	movs	r3, #1
 800a020:	4642      	mov	r2, r8
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	f43f ae74 	beq.w	8009d16 <_printf_float+0xc2>
 800a02e:	ee18 3a10 	vmov	r3, s16
 800a032:	4652      	mov	r2, sl
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f ae6b 	beq.w	8009d16 <_printf_float+0xc2>
 800a040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a044:	2200      	movs	r2, #0
 800a046:	2300      	movs	r3, #0
 800a048:	f7f6 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a04c:	b9d8      	cbnz	r0, 800a086 <_printf_float+0x432>
 800a04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a050:	f108 0201 	add.w	r2, r8, #1
 800a054:	3b01      	subs	r3, #1
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	d10e      	bne.n	800a07e <_printf_float+0x42a>
 800a060:	e659      	b.n	8009d16 <_printf_float+0xc2>
 800a062:	2301      	movs	r3, #1
 800a064:	4652      	mov	r2, sl
 800a066:	4631      	mov	r1, r6
 800a068:	4628      	mov	r0, r5
 800a06a:	47b8      	blx	r7
 800a06c:	3001      	adds	r0, #1
 800a06e:	f43f ae52 	beq.w	8009d16 <_printf_float+0xc2>
 800a072:	f108 0801 	add.w	r8, r8, #1
 800a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a078:	3b01      	subs	r3, #1
 800a07a:	4543      	cmp	r3, r8
 800a07c:	dcf1      	bgt.n	800a062 <_printf_float+0x40e>
 800a07e:	464b      	mov	r3, r9
 800a080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a084:	e6dc      	b.n	8009e40 <_printf_float+0x1ec>
 800a086:	f04f 0800 	mov.w	r8, #0
 800a08a:	f104 0a1a 	add.w	sl, r4, #26
 800a08e:	e7f2      	b.n	800a076 <_printf_float+0x422>
 800a090:	2301      	movs	r3, #1
 800a092:	4642      	mov	r2, r8
 800a094:	e7df      	b.n	800a056 <_printf_float+0x402>
 800a096:	2301      	movs	r3, #1
 800a098:	464a      	mov	r2, r9
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f43f ae38 	beq.w	8009d16 <_printf_float+0xc2>
 800a0a6:	f108 0801 	add.w	r8, r8, #1
 800a0aa:	68e3      	ldr	r3, [r4, #12]
 800a0ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0ae:	1a5b      	subs	r3, r3, r1
 800a0b0:	4543      	cmp	r3, r8
 800a0b2:	dcf0      	bgt.n	800a096 <_printf_float+0x442>
 800a0b4:	e6fa      	b.n	8009eac <_printf_float+0x258>
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	f104 0919 	add.w	r9, r4, #25
 800a0be:	e7f4      	b.n	800a0aa <_printf_float+0x456>

0800a0c0 <_printf_common>:
 800a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	4699      	mov	r9, r3
 800a0c8:	688a      	ldr	r2, [r1, #8]
 800a0ca:	690b      	ldr	r3, [r1, #16]
 800a0cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	bfb8      	it	lt
 800a0d4:	4613      	movlt	r3, r2
 800a0d6:	6033      	str	r3, [r6, #0]
 800a0d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0dc:	4607      	mov	r7, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	b10a      	cbz	r2, 800a0e6 <_printf_common+0x26>
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	0699      	lsls	r1, r3, #26
 800a0ea:	bf42      	ittt	mi
 800a0ec:	6833      	ldrmi	r3, [r6, #0]
 800a0ee:	3302      	addmi	r3, #2
 800a0f0:	6033      	strmi	r3, [r6, #0]
 800a0f2:	6825      	ldr	r5, [r4, #0]
 800a0f4:	f015 0506 	ands.w	r5, r5, #6
 800a0f8:	d106      	bne.n	800a108 <_printf_common+0x48>
 800a0fa:	f104 0a19 	add.w	sl, r4, #25
 800a0fe:	68e3      	ldr	r3, [r4, #12]
 800a100:	6832      	ldr	r2, [r6, #0]
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	42ab      	cmp	r3, r5
 800a106:	dc26      	bgt.n	800a156 <_printf_common+0x96>
 800a108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a10c:	1e13      	subs	r3, r2, #0
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	bf18      	it	ne
 800a112:	2301      	movne	r3, #1
 800a114:	0692      	lsls	r2, r2, #26
 800a116:	d42b      	bmi.n	800a170 <_printf_common+0xb0>
 800a118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a11c:	4649      	mov	r1, r9
 800a11e:	4638      	mov	r0, r7
 800a120:	47c0      	blx	r8
 800a122:	3001      	adds	r0, #1
 800a124:	d01e      	beq.n	800a164 <_printf_common+0xa4>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	68e5      	ldr	r5, [r4, #12]
 800a12a:	6832      	ldr	r2, [r6, #0]
 800a12c:	f003 0306 	and.w	r3, r3, #6
 800a130:	2b04      	cmp	r3, #4
 800a132:	bf08      	it	eq
 800a134:	1aad      	subeq	r5, r5, r2
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	6922      	ldr	r2, [r4, #16]
 800a13a:	bf0c      	ite	eq
 800a13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a140:	2500      	movne	r5, #0
 800a142:	4293      	cmp	r3, r2
 800a144:	bfc4      	itt	gt
 800a146:	1a9b      	subgt	r3, r3, r2
 800a148:	18ed      	addgt	r5, r5, r3
 800a14a:	2600      	movs	r6, #0
 800a14c:	341a      	adds	r4, #26
 800a14e:	42b5      	cmp	r5, r6
 800a150:	d11a      	bne.n	800a188 <_printf_common+0xc8>
 800a152:	2000      	movs	r0, #0
 800a154:	e008      	b.n	800a168 <_printf_common+0xa8>
 800a156:	2301      	movs	r3, #1
 800a158:	4652      	mov	r2, sl
 800a15a:	4649      	mov	r1, r9
 800a15c:	4638      	mov	r0, r7
 800a15e:	47c0      	blx	r8
 800a160:	3001      	adds	r0, #1
 800a162:	d103      	bne.n	800a16c <_printf_common+0xac>
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16c:	3501      	adds	r5, #1
 800a16e:	e7c6      	b.n	800a0fe <_printf_common+0x3e>
 800a170:	18e1      	adds	r1, r4, r3
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	2030      	movs	r0, #48	; 0x30
 800a176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a17a:	4422      	add	r2, r4
 800a17c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a184:	3302      	adds	r3, #2
 800a186:	e7c7      	b.n	800a118 <_printf_common+0x58>
 800a188:	2301      	movs	r3, #1
 800a18a:	4622      	mov	r2, r4
 800a18c:	4649      	mov	r1, r9
 800a18e:	4638      	mov	r0, r7
 800a190:	47c0      	blx	r8
 800a192:	3001      	adds	r0, #1
 800a194:	d0e6      	beq.n	800a164 <_printf_common+0xa4>
 800a196:	3601      	adds	r6, #1
 800a198:	e7d9      	b.n	800a14e <_printf_common+0x8e>
	...

0800a19c <_printf_i>:
 800a19c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	4691      	mov	r9, r2
 800a1a4:	7e27      	ldrb	r7, [r4, #24]
 800a1a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1a8:	2f78      	cmp	r7, #120	; 0x78
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	469a      	mov	sl, r3
 800a1ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b2:	d807      	bhi.n	800a1c4 <_printf_i+0x28>
 800a1b4:	2f62      	cmp	r7, #98	; 0x62
 800a1b6:	d80a      	bhi.n	800a1ce <_printf_i+0x32>
 800a1b8:	2f00      	cmp	r7, #0
 800a1ba:	f000 80d8 	beq.w	800a36e <_printf_i+0x1d2>
 800a1be:	2f58      	cmp	r7, #88	; 0x58
 800a1c0:	f000 80a3 	beq.w	800a30a <_printf_i+0x16e>
 800a1c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1cc:	e03a      	b.n	800a244 <_printf_i+0xa8>
 800a1ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1d2:	2b15      	cmp	r3, #21
 800a1d4:	d8f6      	bhi.n	800a1c4 <_printf_i+0x28>
 800a1d6:	a001      	add	r0, pc, #4	; (adr r0, 800a1dc <_printf_i+0x40>)
 800a1d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a1dc:	0800a235 	.word	0x0800a235
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a1c5 	.word	0x0800a1c5
 800a1e8:	0800a1c5 	.word	0x0800a1c5
 800a1ec:	0800a1c5 	.word	0x0800a1c5
 800a1f0:	0800a1c5 	.word	0x0800a1c5
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a1c5 	.word	0x0800a1c5
 800a1fc:	0800a1c5 	.word	0x0800a1c5
 800a200:	0800a1c5 	.word	0x0800a1c5
 800a204:	0800a1c5 	.word	0x0800a1c5
 800a208:	0800a355 	.word	0x0800a355
 800a20c:	0800a279 	.word	0x0800a279
 800a210:	0800a337 	.word	0x0800a337
 800a214:	0800a1c5 	.word	0x0800a1c5
 800a218:	0800a1c5 	.word	0x0800a1c5
 800a21c:	0800a377 	.word	0x0800a377
 800a220:	0800a1c5 	.word	0x0800a1c5
 800a224:	0800a279 	.word	0x0800a279
 800a228:	0800a1c5 	.word	0x0800a1c5
 800a22c:	0800a1c5 	.word	0x0800a1c5
 800a230:	0800a33f 	.word	0x0800a33f
 800a234:	680b      	ldr	r3, [r1, #0]
 800a236:	1d1a      	adds	r2, r3, #4
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	600a      	str	r2, [r1, #0]
 800a23c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a244:	2301      	movs	r3, #1
 800a246:	e0a3      	b.n	800a390 <_printf_i+0x1f4>
 800a248:	6825      	ldr	r5, [r4, #0]
 800a24a:	6808      	ldr	r0, [r1, #0]
 800a24c:	062e      	lsls	r6, r5, #24
 800a24e:	f100 0304 	add.w	r3, r0, #4
 800a252:	d50a      	bpl.n	800a26a <_printf_i+0xce>
 800a254:	6805      	ldr	r5, [r0, #0]
 800a256:	600b      	str	r3, [r1, #0]
 800a258:	2d00      	cmp	r5, #0
 800a25a:	da03      	bge.n	800a264 <_printf_i+0xc8>
 800a25c:	232d      	movs	r3, #45	; 0x2d
 800a25e:	426d      	negs	r5, r5
 800a260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a264:	485e      	ldr	r0, [pc, #376]	; (800a3e0 <_printf_i+0x244>)
 800a266:	230a      	movs	r3, #10
 800a268:	e019      	b.n	800a29e <_printf_i+0x102>
 800a26a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a26e:	6805      	ldr	r5, [r0, #0]
 800a270:	600b      	str	r3, [r1, #0]
 800a272:	bf18      	it	ne
 800a274:	b22d      	sxthne	r5, r5
 800a276:	e7ef      	b.n	800a258 <_printf_i+0xbc>
 800a278:	680b      	ldr	r3, [r1, #0]
 800a27a:	6825      	ldr	r5, [r4, #0]
 800a27c:	1d18      	adds	r0, r3, #4
 800a27e:	6008      	str	r0, [r1, #0]
 800a280:	0628      	lsls	r0, r5, #24
 800a282:	d501      	bpl.n	800a288 <_printf_i+0xec>
 800a284:	681d      	ldr	r5, [r3, #0]
 800a286:	e002      	b.n	800a28e <_printf_i+0xf2>
 800a288:	0669      	lsls	r1, r5, #25
 800a28a:	d5fb      	bpl.n	800a284 <_printf_i+0xe8>
 800a28c:	881d      	ldrh	r5, [r3, #0]
 800a28e:	4854      	ldr	r0, [pc, #336]	; (800a3e0 <_printf_i+0x244>)
 800a290:	2f6f      	cmp	r7, #111	; 0x6f
 800a292:	bf0c      	ite	eq
 800a294:	2308      	moveq	r3, #8
 800a296:	230a      	movne	r3, #10
 800a298:	2100      	movs	r1, #0
 800a29a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a29e:	6866      	ldr	r6, [r4, #4]
 800a2a0:	60a6      	str	r6, [r4, #8]
 800a2a2:	2e00      	cmp	r6, #0
 800a2a4:	bfa2      	ittt	ge
 800a2a6:	6821      	ldrge	r1, [r4, #0]
 800a2a8:	f021 0104 	bicge.w	r1, r1, #4
 800a2ac:	6021      	strge	r1, [r4, #0]
 800a2ae:	b90d      	cbnz	r5, 800a2b4 <_printf_i+0x118>
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	d04d      	beq.n	800a350 <_printf_i+0x1b4>
 800a2b4:	4616      	mov	r6, r2
 800a2b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a2be:	5dc7      	ldrb	r7, [r0, r7]
 800a2c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2c4:	462f      	mov	r7, r5
 800a2c6:	42bb      	cmp	r3, r7
 800a2c8:	460d      	mov	r5, r1
 800a2ca:	d9f4      	bls.n	800a2b6 <_printf_i+0x11a>
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d10b      	bne.n	800a2e8 <_printf_i+0x14c>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	07df      	lsls	r7, r3, #31
 800a2d4:	d508      	bpl.n	800a2e8 <_printf_i+0x14c>
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	6861      	ldr	r1, [r4, #4]
 800a2da:	4299      	cmp	r1, r3
 800a2dc:	bfde      	ittt	le
 800a2de:	2330      	movle	r3, #48	; 0x30
 800a2e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2e8:	1b92      	subs	r2, r2, r6
 800a2ea:	6122      	str	r2, [r4, #16]
 800a2ec:	f8cd a000 	str.w	sl, [sp]
 800a2f0:	464b      	mov	r3, r9
 800a2f2:	aa03      	add	r2, sp, #12
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	f7ff fee2 	bl	800a0c0 <_printf_common>
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d14c      	bne.n	800a39a <_printf_i+0x1fe>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	b004      	add	sp, #16
 800a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30a:	4835      	ldr	r0, [pc, #212]	; (800a3e0 <_printf_i+0x244>)
 800a30c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	680e      	ldr	r6, [r1, #0]
 800a314:	061f      	lsls	r7, r3, #24
 800a316:	f856 5b04 	ldr.w	r5, [r6], #4
 800a31a:	600e      	str	r6, [r1, #0]
 800a31c:	d514      	bpl.n	800a348 <_printf_i+0x1ac>
 800a31e:	07d9      	lsls	r1, r3, #31
 800a320:	bf44      	itt	mi
 800a322:	f043 0320 	orrmi.w	r3, r3, #32
 800a326:	6023      	strmi	r3, [r4, #0]
 800a328:	b91d      	cbnz	r5, 800a332 <_printf_i+0x196>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	f023 0320 	bic.w	r3, r3, #32
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	2310      	movs	r3, #16
 800a334:	e7b0      	b.n	800a298 <_printf_i+0xfc>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	f043 0320 	orr.w	r3, r3, #32
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	2378      	movs	r3, #120	; 0x78
 800a340:	4828      	ldr	r0, [pc, #160]	; (800a3e4 <_printf_i+0x248>)
 800a342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a346:	e7e3      	b.n	800a310 <_printf_i+0x174>
 800a348:	065e      	lsls	r6, r3, #25
 800a34a:	bf48      	it	mi
 800a34c:	b2ad      	uxthmi	r5, r5
 800a34e:	e7e6      	b.n	800a31e <_printf_i+0x182>
 800a350:	4616      	mov	r6, r2
 800a352:	e7bb      	b.n	800a2cc <_printf_i+0x130>
 800a354:	680b      	ldr	r3, [r1, #0]
 800a356:	6826      	ldr	r6, [r4, #0]
 800a358:	6960      	ldr	r0, [r4, #20]
 800a35a:	1d1d      	adds	r5, r3, #4
 800a35c:	600d      	str	r5, [r1, #0]
 800a35e:	0635      	lsls	r5, r6, #24
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	d501      	bpl.n	800a368 <_printf_i+0x1cc>
 800a364:	6018      	str	r0, [r3, #0]
 800a366:	e002      	b.n	800a36e <_printf_i+0x1d2>
 800a368:	0671      	lsls	r1, r6, #25
 800a36a:	d5fb      	bpl.n	800a364 <_printf_i+0x1c8>
 800a36c:	8018      	strh	r0, [r3, #0]
 800a36e:	2300      	movs	r3, #0
 800a370:	6123      	str	r3, [r4, #16]
 800a372:	4616      	mov	r6, r2
 800a374:	e7ba      	b.n	800a2ec <_printf_i+0x150>
 800a376:	680b      	ldr	r3, [r1, #0]
 800a378:	1d1a      	adds	r2, r3, #4
 800a37a:	600a      	str	r2, [r1, #0]
 800a37c:	681e      	ldr	r6, [r3, #0]
 800a37e:	6862      	ldr	r2, [r4, #4]
 800a380:	2100      	movs	r1, #0
 800a382:	4630      	mov	r0, r6
 800a384:	f7f5 ff2c 	bl	80001e0 <memchr>
 800a388:	b108      	cbz	r0, 800a38e <_printf_i+0x1f2>
 800a38a:	1b80      	subs	r0, r0, r6
 800a38c:	6060      	str	r0, [r4, #4]
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	2300      	movs	r3, #0
 800a394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a398:	e7a8      	b.n	800a2ec <_printf_i+0x150>
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	4632      	mov	r2, r6
 800a39e:	4649      	mov	r1, r9
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	47d0      	blx	sl
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d0ab      	beq.n	800a300 <_printf_i+0x164>
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	079b      	lsls	r3, r3, #30
 800a3ac:	d413      	bmi.n	800a3d6 <_printf_i+0x23a>
 800a3ae:	68e0      	ldr	r0, [r4, #12]
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	4298      	cmp	r0, r3
 800a3b4:	bfb8      	it	lt
 800a3b6:	4618      	movlt	r0, r3
 800a3b8:	e7a4      	b.n	800a304 <_printf_i+0x168>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4632      	mov	r2, r6
 800a3be:	4649      	mov	r1, r9
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	47d0      	blx	sl
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d09b      	beq.n	800a300 <_printf_i+0x164>
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	68e3      	ldr	r3, [r4, #12]
 800a3cc:	9903      	ldr	r1, [sp, #12]
 800a3ce:	1a5b      	subs	r3, r3, r1
 800a3d0:	42ab      	cmp	r3, r5
 800a3d2:	dcf2      	bgt.n	800a3ba <_printf_i+0x21e>
 800a3d4:	e7eb      	b.n	800a3ae <_printf_i+0x212>
 800a3d6:	2500      	movs	r5, #0
 800a3d8:	f104 0619 	add.w	r6, r4, #25
 800a3dc:	e7f5      	b.n	800a3ca <_printf_i+0x22e>
 800a3de:	bf00      	nop
 800a3e0:	0800c70e 	.word	0x0800c70e
 800a3e4:	0800c71f 	.word	0x0800c71f

0800a3e8 <iprintf>:
 800a3e8:	b40f      	push	{r0, r1, r2, r3}
 800a3ea:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <iprintf+0x2c>)
 800a3ec:	b513      	push	{r0, r1, r4, lr}
 800a3ee:	681c      	ldr	r4, [r3, #0]
 800a3f0:	b124      	cbz	r4, 800a3fc <iprintf+0x14>
 800a3f2:	69a3      	ldr	r3, [r4, #24]
 800a3f4:	b913      	cbnz	r3, 800a3fc <iprintf+0x14>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f001 f930 	bl	800b65c <__sinit>
 800a3fc:	ab05      	add	r3, sp, #20
 800a3fe:	9a04      	ldr	r2, [sp, #16]
 800a400:	68a1      	ldr	r1, [r4, #8]
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	4620      	mov	r0, r4
 800a406:	f001 fe9d 	bl	800c144 <_vfiprintf_r>
 800a40a:	b002      	add	sp, #8
 800a40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a410:	b004      	add	sp, #16
 800a412:	4770      	bx	lr
 800a414:	200002c8 	.word	0x200002c8

0800a418 <setvbuf>:
 800a418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	461d      	mov	r5, r3
 800a41e:	4b5d      	ldr	r3, [pc, #372]	; (800a594 <setvbuf+0x17c>)
 800a420:	681f      	ldr	r7, [r3, #0]
 800a422:	4604      	mov	r4, r0
 800a424:	460e      	mov	r6, r1
 800a426:	4690      	mov	r8, r2
 800a428:	b127      	cbz	r7, 800a434 <setvbuf+0x1c>
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	b913      	cbnz	r3, 800a434 <setvbuf+0x1c>
 800a42e:	4638      	mov	r0, r7
 800a430:	f001 f914 	bl	800b65c <__sinit>
 800a434:	4b58      	ldr	r3, [pc, #352]	; (800a598 <setvbuf+0x180>)
 800a436:	429c      	cmp	r4, r3
 800a438:	d167      	bne.n	800a50a <setvbuf+0xf2>
 800a43a:	687c      	ldr	r4, [r7, #4]
 800a43c:	f1b8 0f02 	cmp.w	r8, #2
 800a440:	d006      	beq.n	800a450 <setvbuf+0x38>
 800a442:	f1b8 0f01 	cmp.w	r8, #1
 800a446:	f200 809f 	bhi.w	800a588 <setvbuf+0x170>
 800a44a:	2d00      	cmp	r5, #0
 800a44c:	f2c0 809c 	blt.w	800a588 <setvbuf+0x170>
 800a450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a452:	07db      	lsls	r3, r3, #31
 800a454:	d405      	bmi.n	800a462 <setvbuf+0x4a>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	0598      	lsls	r0, r3, #22
 800a45a:	d402      	bmi.n	800a462 <setvbuf+0x4a>
 800a45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45e:	f001 f9a0 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800a462:	4621      	mov	r1, r4
 800a464:	4638      	mov	r0, r7
 800a466:	f001 f865 	bl	800b534 <_fflush_r>
 800a46a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a46c:	b141      	cbz	r1, 800a480 <setvbuf+0x68>
 800a46e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a472:	4299      	cmp	r1, r3
 800a474:	d002      	beq.n	800a47c <setvbuf+0x64>
 800a476:	4638      	mov	r0, r7
 800a478:	f001 fd90 	bl	800bf9c <_free_r>
 800a47c:	2300      	movs	r3, #0
 800a47e:	6363      	str	r3, [r4, #52]	; 0x34
 800a480:	2300      	movs	r3, #0
 800a482:	61a3      	str	r3, [r4, #24]
 800a484:	6063      	str	r3, [r4, #4]
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	0619      	lsls	r1, r3, #24
 800a48a:	d503      	bpl.n	800a494 <setvbuf+0x7c>
 800a48c:	6921      	ldr	r1, [r4, #16]
 800a48e:	4638      	mov	r0, r7
 800a490:	f001 fd84 	bl	800bf9c <_free_r>
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a49a:	f023 0303 	bic.w	r3, r3, #3
 800a49e:	f1b8 0f02 	cmp.w	r8, #2
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	d06c      	beq.n	800a580 <setvbuf+0x168>
 800a4a6:	ab01      	add	r3, sp, #4
 800a4a8:	466a      	mov	r2, sp
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f001 f97a 	bl	800b7a6 <__swhatbuf_r>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	4318      	orrs	r0, r3
 800a4b6:	81a0      	strh	r0, [r4, #12]
 800a4b8:	2d00      	cmp	r5, #0
 800a4ba:	d130      	bne.n	800a51e <setvbuf+0x106>
 800a4bc:	9d00      	ldr	r5, [sp, #0]
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f001 f9d6 	bl	800b870 <malloc>
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d155      	bne.n	800a576 <setvbuf+0x15e>
 800a4ca:	f8dd 9000 	ldr.w	r9, [sp]
 800a4ce:	45a9      	cmp	r9, r5
 800a4d0:	d14a      	bne.n	800a568 <setvbuf+0x150>
 800a4d2:	f04f 35ff 	mov.w	r5, #4294967295
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	60a2      	str	r2, [r4, #8]
 800a4da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a4de:	6022      	str	r2, [r4, #0]
 800a4e0:	6122      	str	r2, [r4, #16]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e8:	6162      	str	r2, [r4, #20]
 800a4ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4ec:	f043 0302 	orr.w	r3, r3, #2
 800a4f0:	07d2      	lsls	r2, r2, #31
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	d405      	bmi.n	800a502 <setvbuf+0xea>
 800a4f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a4fa:	d102      	bne.n	800a502 <setvbuf+0xea>
 800a4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4fe:	f001 f951 	bl	800b7a4 <__retarget_lock_release_recursive>
 800a502:	4628      	mov	r0, r5
 800a504:	b003      	add	sp, #12
 800a506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50a:	4b24      	ldr	r3, [pc, #144]	; (800a59c <setvbuf+0x184>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	d101      	bne.n	800a514 <setvbuf+0xfc>
 800a510:	68bc      	ldr	r4, [r7, #8]
 800a512:	e793      	b.n	800a43c <setvbuf+0x24>
 800a514:	4b22      	ldr	r3, [pc, #136]	; (800a5a0 <setvbuf+0x188>)
 800a516:	429c      	cmp	r4, r3
 800a518:	bf08      	it	eq
 800a51a:	68fc      	ldreq	r4, [r7, #12]
 800a51c:	e78e      	b.n	800a43c <setvbuf+0x24>
 800a51e:	2e00      	cmp	r6, #0
 800a520:	d0cd      	beq.n	800a4be <setvbuf+0xa6>
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	b913      	cbnz	r3, 800a52c <setvbuf+0x114>
 800a526:	4638      	mov	r0, r7
 800a528:	f001 f898 	bl	800b65c <__sinit>
 800a52c:	f1b8 0f01 	cmp.w	r8, #1
 800a530:	bf08      	it	eq
 800a532:	89a3      	ldrheq	r3, [r4, #12]
 800a534:	6026      	str	r6, [r4, #0]
 800a536:	bf04      	itt	eq
 800a538:	f043 0301 	orreq.w	r3, r3, #1
 800a53c:	81a3      	strheq	r3, [r4, #12]
 800a53e:	89a2      	ldrh	r2, [r4, #12]
 800a540:	f012 0308 	ands.w	r3, r2, #8
 800a544:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a548:	d01c      	beq.n	800a584 <setvbuf+0x16c>
 800a54a:	07d3      	lsls	r3, r2, #31
 800a54c:	bf41      	itttt	mi
 800a54e:	2300      	movmi	r3, #0
 800a550:	426d      	negmi	r5, r5
 800a552:	60a3      	strmi	r3, [r4, #8]
 800a554:	61a5      	strmi	r5, [r4, #24]
 800a556:	bf58      	it	pl
 800a558:	60a5      	strpl	r5, [r4, #8]
 800a55a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a55c:	f015 0501 	ands.w	r5, r5, #1
 800a560:	d115      	bne.n	800a58e <setvbuf+0x176>
 800a562:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a566:	e7c8      	b.n	800a4fa <setvbuf+0xe2>
 800a568:	4648      	mov	r0, r9
 800a56a:	f001 f981 	bl	800b870 <malloc>
 800a56e:	4606      	mov	r6, r0
 800a570:	2800      	cmp	r0, #0
 800a572:	d0ae      	beq.n	800a4d2 <setvbuf+0xba>
 800a574:	464d      	mov	r5, r9
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	e7d0      	b.n	800a522 <setvbuf+0x10a>
 800a580:	2500      	movs	r5, #0
 800a582:	e7a8      	b.n	800a4d6 <setvbuf+0xbe>
 800a584:	60a3      	str	r3, [r4, #8]
 800a586:	e7e8      	b.n	800a55a <setvbuf+0x142>
 800a588:	f04f 35ff 	mov.w	r5, #4294967295
 800a58c:	e7b9      	b.n	800a502 <setvbuf+0xea>
 800a58e:	2500      	movs	r5, #0
 800a590:	e7b7      	b.n	800a502 <setvbuf+0xea>
 800a592:	bf00      	nop
 800a594:	200002c8 	.word	0x200002c8
 800a598:	0800c7e4 	.word	0x0800c7e4
 800a59c:	0800c804 	.word	0x0800c804
 800a5a0:	0800c7c4 	.word	0x0800c7c4

0800a5a4 <strcpy>:
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5aa:	f803 2b01 	strb.w	r2, [r3], #1
 800a5ae:	2a00      	cmp	r2, #0
 800a5b0:	d1f9      	bne.n	800a5a6 <strcpy+0x2>
 800a5b2:	4770      	bx	lr

0800a5b4 <__swbuf_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b118      	cbz	r0, 800a5c6 <__swbuf_r+0x12>
 800a5be:	6983      	ldr	r3, [r0, #24]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <__swbuf_r+0x12>
 800a5c2:	f001 f84b 	bl	800b65c <__sinit>
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <__swbuf_r+0x98>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d12b      	bne.n	800a624 <__swbuf_r+0x70>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	69a3      	ldr	r3, [r4, #24]
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	071a      	lsls	r2, r3, #28
 800a5d6:	d52f      	bpl.n	800a638 <__swbuf_r+0x84>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	b36b      	cbz	r3, 800a638 <__swbuf_r+0x84>
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1ac0      	subs	r0, r0, r3
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	b2f6      	uxtb	r6, r6
 800a5e6:	4283      	cmp	r3, r0
 800a5e8:	4637      	mov	r7, r6
 800a5ea:	dc04      	bgt.n	800a5f6 <__swbuf_r+0x42>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 ffa0 	bl	800b534 <_fflush_r>
 800a5f4:	bb30      	cbnz	r0, 800a644 <__swbuf_r+0x90>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	701e      	strb	r6, [r3, #0]
 800a604:	6963      	ldr	r3, [r4, #20]
 800a606:	3001      	adds	r0, #1
 800a608:	4283      	cmp	r3, r0
 800a60a:	d004      	beq.n	800a616 <__swbuf_r+0x62>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d506      	bpl.n	800a620 <__swbuf_r+0x6c>
 800a612:	2e0a      	cmp	r6, #10
 800a614:	d104      	bne.n	800a620 <__swbuf_r+0x6c>
 800a616:	4621      	mov	r1, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	f000 ff8b 	bl	800b534 <_fflush_r>
 800a61e:	b988      	cbnz	r0, 800a644 <__swbuf_r+0x90>
 800a620:	4638      	mov	r0, r7
 800a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a624:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <__swbuf_r+0x9c>)
 800a626:	429c      	cmp	r4, r3
 800a628:	d101      	bne.n	800a62e <__swbuf_r+0x7a>
 800a62a:	68ac      	ldr	r4, [r5, #8]
 800a62c:	e7cf      	b.n	800a5ce <__swbuf_r+0x1a>
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <__swbuf_r+0xa0>)
 800a630:	429c      	cmp	r4, r3
 800a632:	bf08      	it	eq
 800a634:	68ec      	ldreq	r4, [r5, #12]
 800a636:	e7ca      	b.n	800a5ce <__swbuf_r+0x1a>
 800a638:	4621      	mov	r1, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f000 f80c 	bl	800a658 <__swsetup_r>
 800a640:	2800      	cmp	r0, #0
 800a642:	d0cb      	beq.n	800a5dc <__swbuf_r+0x28>
 800a644:	f04f 37ff 	mov.w	r7, #4294967295
 800a648:	e7ea      	b.n	800a620 <__swbuf_r+0x6c>
 800a64a:	bf00      	nop
 800a64c:	0800c7e4 	.word	0x0800c7e4
 800a650:	0800c804 	.word	0x0800c804
 800a654:	0800c7c4 	.word	0x0800c7c4

0800a658 <__swsetup_r>:
 800a658:	4b32      	ldr	r3, [pc, #200]	; (800a724 <__swsetup_r+0xcc>)
 800a65a:	b570      	push	{r4, r5, r6, lr}
 800a65c:	681d      	ldr	r5, [r3, #0]
 800a65e:	4606      	mov	r6, r0
 800a660:	460c      	mov	r4, r1
 800a662:	b125      	cbz	r5, 800a66e <__swsetup_r+0x16>
 800a664:	69ab      	ldr	r3, [r5, #24]
 800a666:	b913      	cbnz	r3, 800a66e <__swsetup_r+0x16>
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 fff7 	bl	800b65c <__sinit>
 800a66e:	4b2e      	ldr	r3, [pc, #184]	; (800a728 <__swsetup_r+0xd0>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d10f      	bne.n	800a694 <__swsetup_r+0x3c>
 800a674:	686c      	ldr	r4, [r5, #4]
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a67c:	0719      	lsls	r1, r3, #28
 800a67e:	d42c      	bmi.n	800a6da <__swsetup_r+0x82>
 800a680:	06dd      	lsls	r5, r3, #27
 800a682:	d411      	bmi.n	800a6a8 <__swsetup_r+0x50>
 800a684:	2309      	movs	r3, #9
 800a686:	6033      	str	r3, [r6, #0]
 800a688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	f04f 30ff 	mov.w	r0, #4294967295
 800a692:	e03e      	b.n	800a712 <__swsetup_r+0xba>
 800a694:	4b25      	ldr	r3, [pc, #148]	; (800a72c <__swsetup_r+0xd4>)
 800a696:	429c      	cmp	r4, r3
 800a698:	d101      	bne.n	800a69e <__swsetup_r+0x46>
 800a69a:	68ac      	ldr	r4, [r5, #8]
 800a69c:	e7eb      	b.n	800a676 <__swsetup_r+0x1e>
 800a69e:	4b24      	ldr	r3, [pc, #144]	; (800a730 <__swsetup_r+0xd8>)
 800a6a0:	429c      	cmp	r4, r3
 800a6a2:	bf08      	it	eq
 800a6a4:	68ec      	ldreq	r4, [r5, #12]
 800a6a6:	e7e6      	b.n	800a676 <__swsetup_r+0x1e>
 800a6a8:	0758      	lsls	r0, r3, #29
 800a6aa:	d512      	bpl.n	800a6d2 <__swsetup_r+0x7a>
 800a6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ae:	b141      	cbz	r1, 800a6c2 <__swsetup_r+0x6a>
 800a6b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b4:	4299      	cmp	r1, r3
 800a6b6:	d002      	beq.n	800a6be <__swsetup_r+0x66>
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f001 fc6f 	bl	800bf9c <_free_r>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	6063      	str	r3, [r4, #4]
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	f043 0308 	orr.w	r3, r3, #8
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	b94b      	cbnz	r3, 800a6f2 <__swsetup_r+0x9a>
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e8:	d003      	beq.n	800a6f2 <__swsetup_r+0x9a>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f001 f87f 	bl	800b7f0 <__smakebuf_r>
 800a6f2:	89a0      	ldrh	r0, [r4, #12]
 800a6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f8:	f010 0301 	ands.w	r3, r0, #1
 800a6fc:	d00a      	beq.n	800a714 <__swsetup_r+0xbc>
 800a6fe:	2300      	movs	r3, #0
 800a700:	60a3      	str	r3, [r4, #8]
 800a702:	6963      	ldr	r3, [r4, #20]
 800a704:	425b      	negs	r3, r3
 800a706:	61a3      	str	r3, [r4, #24]
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	b943      	cbnz	r3, 800a71e <__swsetup_r+0xc6>
 800a70c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a710:	d1ba      	bne.n	800a688 <__swsetup_r+0x30>
 800a712:	bd70      	pop	{r4, r5, r6, pc}
 800a714:	0781      	lsls	r1, r0, #30
 800a716:	bf58      	it	pl
 800a718:	6963      	ldrpl	r3, [r4, #20]
 800a71a:	60a3      	str	r3, [r4, #8]
 800a71c:	e7f4      	b.n	800a708 <__swsetup_r+0xb0>
 800a71e:	2000      	movs	r0, #0
 800a720:	e7f7      	b.n	800a712 <__swsetup_r+0xba>
 800a722:	bf00      	nop
 800a724:	200002c8 	.word	0x200002c8
 800a728:	0800c7e4 	.word	0x0800c7e4
 800a72c:	0800c804 	.word	0x0800c804
 800a730:	0800c7c4 	.word	0x0800c7c4

0800a734 <quorem>:
 800a734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	6903      	ldr	r3, [r0, #16]
 800a73a:	690c      	ldr	r4, [r1, #16]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	4607      	mov	r7, r0
 800a740:	f2c0 8081 	blt.w	800a846 <quorem+0x112>
 800a744:	3c01      	subs	r4, #1
 800a746:	f101 0814 	add.w	r8, r1, #20
 800a74a:	f100 0514 	add.w	r5, r0, #20
 800a74e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a75c:	3301      	adds	r3, #1
 800a75e:	429a      	cmp	r2, r3
 800a760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a768:	fbb2 f6f3 	udiv	r6, r2, r3
 800a76c:	d331      	bcc.n	800a7d2 <quorem+0x9e>
 800a76e:	f04f 0e00 	mov.w	lr, #0
 800a772:	4640      	mov	r0, r8
 800a774:	46ac      	mov	ip, r5
 800a776:	46f2      	mov	sl, lr
 800a778:	f850 2b04 	ldr.w	r2, [r0], #4
 800a77c:	b293      	uxth	r3, r2
 800a77e:	fb06 e303 	mla	r3, r6, r3, lr
 800a782:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a786:	b29b      	uxth	r3, r3
 800a788:	ebaa 0303 	sub.w	r3, sl, r3
 800a78c:	0c12      	lsrs	r2, r2, #16
 800a78e:	f8dc a000 	ldr.w	sl, [ip]
 800a792:	fb06 e202 	mla	r2, r6, r2, lr
 800a796:	fa13 f38a 	uxtah	r3, r3, sl
 800a79a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a79e:	fa1f fa82 	uxth.w	sl, r2
 800a7a2:	f8dc 2000 	ldr.w	r2, [ip]
 800a7a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a7aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b4:	4581      	cmp	r9, r0
 800a7b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a7ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7be:	d2db      	bcs.n	800a778 <quorem+0x44>
 800a7c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7c4:	b92b      	cbnz	r3, 800a7d2 <quorem+0x9e>
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	3b04      	subs	r3, #4
 800a7ca:	429d      	cmp	r5, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	d32e      	bcc.n	800a82e <quorem+0xfa>
 800a7d0:	613c      	str	r4, [r7, #16]
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f001 fad2 	bl	800bd7c <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	db24      	blt.n	800a826 <quorem+0xf2>
 800a7dc:	3601      	adds	r6, #1
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f04f 0c00 	mov.w	ip, #0
 800a7e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a7ec:	b293      	uxth	r3, r2
 800a7ee:	ebac 0303 	sub.w	r3, ip, r3
 800a7f2:	0c12      	lsrs	r2, r2, #16
 800a7f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a7f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a7fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a800:	b29b      	uxth	r3, r3
 800a802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a806:	45c1      	cmp	r9, r8
 800a808:	f840 3b04 	str.w	r3, [r0], #4
 800a80c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a810:	d2e8      	bcs.n	800a7e4 <quorem+0xb0>
 800a812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a81a:	b922      	cbnz	r2, 800a826 <quorem+0xf2>
 800a81c:	3b04      	subs	r3, #4
 800a81e:	429d      	cmp	r5, r3
 800a820:	461a      	mov	r2, r3
 800a822:	d30a      	bcc.n	800a83a <quorem+0x106>
 800a824:	613c      	str	r4, [r7, #16]
 800a826:	4630      	mov	r0, r6
 800a828:	b003      	add	sp, #12
 800a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82e:	6812      	ldr	r2, [r2, #0]
 800a830:	3b04      	subs	r3, #4
 800a832:	2a00      	cmp	r2, #0
 800a834:	d1cc      	bne.n	800a7d0 <quorem+0x9c>
 800a836:	3c01      	subs	r4, #1
 800a838:	e7c7      	b.n	800a7ca <quorem+0x96>
 800a83a:	6812      	ldr	r2, [r2, #0]
 800a83c:	3b04      	subs	r3, #4
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d1f0      	bne.n	800a824 <quorem+0xf0>
 800a842:	3c01      	subs	r4, #1
 800a844:	e7eb      	b.n	800a81e <quorem+0xea>
 800a846:	2000      	movs	r0, #0
 800a848:	e7ee      	b.n	800a828 <quorem+0xf4>
 800a84a:	0000      	movs	r0, r0
 800a84c:	0000      	movs	r0, r0
	...

0800a850 <_dtoa_r>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	ed2d 8b02 	vpush	{d8}
 800a858:	ec57 6b10 	vmov	r6, r7, d0
 800a85c:	b095      	sub	sp, #84	; 0x54
 800a85e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a860:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a864:	9105      	str	r1, [sp, #20]
 800a866:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a86a:	4604      	mov	r4, r0
 800a86c:	9209      	str	r2, [sp, #36]	; 0x24
 800a86e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a870:	b975      	cbnz	r5, 800a890 <_dtoa_r+0x40>
 800a872:	2010      	movs	r0, #16
 800a874:	f000 fffc 	bl	800b870 <malloc>
 800a878:	4602      	mov	r2, r0
 800a87a:	6260      	str	r0, [r4, #36]	; 0x24
 800a87c:	b920      	cbnz	r0, 800a888 <_dtoa_r+0x38>
 800a87e:	4bb2      	ldr	r3, [pc, #712]	; (800ab48 <_dtoa_r+0x2f8>)
 800a880:	21ea      	movs	r1, #234	; 0xea
 800a882:	48b2      	ldr	r0, [pc, #712]	; (800ab4c <_dtoa_r+0x2fc>)
 800a884:	f001 fdf4 	bl	800c470 <__assert_func>
 800a888:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a88c:	6005      	str	r5, [r0, #0]
 800a88e:	60c5      	str	r5, [r0, #12]
 800a890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a892:	6819      	ldr	r1, [r3, #0]
 800a894:	b151      	cbz	r1, 800a8ac <_dtoa_r+0x5c>
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	604a      	str	r2, [r1, #4]
 800a89a:	2301      	movs	r3, #1
 800a89c:	4093      	lsls	r3, r2
 800a89e:	608b      	str	r3, [r1, #8]
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f001 f82d 	bl	800b900 <_Bfree>
 800a8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	1e3b      	subs	r3, r7, #0
 800a8ae:	bfb9      	ittee	lt
 800a8b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8b4:	9303      	strlt	r3, [sp, #12]
 800a8b6:	2300      	movge	r3, #0
 800a8b8:	f8c8 3000 	strge.w	r3, [r8]
 800a8bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a8c0:	4ba3      	ldr	r3, [pc, #652]	; (800ab50 <_dtoa_r+0x300>)
 800a8c2:	bfbc      	itt	lt
 800a8c4:	2201      	movlt	r2, #1
 800a8c6:	f8c8 2000 	strlt.w	r2, [r8]
 800a8ca:	ea33 0309 	bics.w	r3, r3, r9
 800a8ce:	d11b      	bne.n	800a908 <_dtoa_r+0xb8>
 800a8d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8dc:	4333      	orrs	r3, r6
 800a8de:	f000 857a 	beq.w	800b3d6 <_dtoa_r+0xb86>
 800a8e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8e4:	b963      	cbnz	r3, 800a900 <_dtoa_r+0xb0>
 800a8e6:	4b9b      	ldr	r3, [pc, #620]	; (800ab54 <_dtoa_r+0x304>)
 800a8e8:	e024      	b.n	800a934 <_dtoa_r+0xe4>
 800a8ea:	4b9b      	ldr	r3, [pc, #620]	; (800ab58 <_dtoa_r+0x308>)
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8f2:	6013      	str	r3, [r2, #0]
 800a8f4:	9800      	ldr	r0, [sp, #0]
 800a8f6:	b015      	add	sp, #84	; 0x54
 800a8f8:	ecbd 8b02 	vpop	{d8}
 800a8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a900:	4b94      	ldr	r3, [pc, #592]	; (800ab54 <_dtoa_r+0x304>)
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	3303      	adds	r3, #3
 800a906:	e7f3      	b.n	800a8f0 <_dtoa_r+0xa0>
 800a908:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a90c:	2200      	movs	r2, #0
 800a90e:	ec51 0b17 	vmov	r0, r1, d7
 800a912:	2300      	movs	r3, #0
 800a914:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a918:	f7f6 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a91c:	4680      	mov	r8, r0
 800a91e:	b158      	cbz	r0, 800a938 <_dtoa_r+0xe8>
 800a920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a922:	2301      	movs	r3, #1
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 8551 	beq.w	800b3d0 <_dtoa_r+0xb80>
 800a92e:	488b      	ldr	r0, [pc, #556]	; (800ab5c <_dtoa_r+0x30c>)
 800a930:	6018      	str	r0, [r3, #0]
 800a932:	1e43      	subs	r3, r0, #1
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	e7dd      	b.n	800a8f4 <_dtoa_r+0xa4>
 800a938:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a93c:	aa12      	add	r2, sp, #72	; 0x48
 800a93e:	a913      	add	r1, sp, #76	; 0x4c
 800a940:	4620      	mov	r0, r4
 800a942:	f001 fabf 	bl	800bec4 <__d2b>
 800a946:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a94a:	4683      	mov	fp, r0
 800a94c:	2d00      	cmp	r5, #0
 800a94e:	d07c      	beq.n	800aa4a <_dtoa_r+0x1fa>
 800a950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a952:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a95a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a95e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a96a:	4b7d      	ldr	r3, [pc, #500]	; (800ab60 <_dtoa_r+0x310>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fc89 	bl	8000288 <__aeabi_dsub>
 800a976:	a36e      	add	r3, pc, #440	; (adr r3, 800ab30 <_dtoa_r+0x2e0>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f5 fe3c 	bl	80005f8 <__aeabi_dmul>
 800a980:	a36d      	add	r3, pc, #436	; (adr r3, 800ab38 <_dtoa_r+0x2e8>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fc81 	bl	800028c <__adddf3>
 800a98a:	4606      	mov	r6, r0
 800a98c:	4628      	mov	r0, r5
 800a98e:	460f      	mov	r7, r1
 800a990:	f7f5 fdc8 	bl	8000524 <__aeabi_i2d>
 800a994:	a36a      	add	r3, pc, #424	; (adr r3, 800ab40 <_dtoa_r+0x2f0>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f7f5 fe2d 	bl	80005f8 <__aeabi_dmul>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fc71 	bl	800028c <__adddf3>
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	f7f6 f8d3 	bl	8000b58 <__aeabi_d2iz>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f6 f88e 	bl	8000adc <__aeabi_dcmplt>
 800a9c0:	b148      	cbz	r0, 800a9d6 <_dtoa_r+0x186>
 800a9c2:	4650      	mov	r0, sl
 800a9c4:	f7f5 fdae 	bl	8000524 <__aeabi_i2d>
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	f7f6 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9d0:	b908      	cbnz	r0, 800a9d6 <_dtoa_r+0x186>
 800a9d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9d6:	f1ba 0f16 	cmp.w	sl, #22
 800a9da:	d854      	bhi.n	800aa86 <_dtoa_r+0x236>
 800a9dc:	4b61      	ldr	r3, [pc, #388]	; (800ab64 <_dtoa_r+0x314>)
 800a9de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9ea:	f7f6 f877 	bl	8000adc <__aeabi_dcmplt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d04b      	beq.n	800aa8a <_dtoa_r+0x23a>
 800a9f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a9fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9fc:	1b5d      	subs	r5, r3, r5
 800a9fe:	1e6b      	subs	r3, r5, #1
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	bf43      	ittte	mi
 800aa04:	2300      	movmi	r3, #0
 800aa06:	f1c5 0801 	rsbmi	r8, r5, #1
 800aa0a:	9304      	strmi	r3, [sp, #16]
 800aa0c:	f04f 0800 	movpl.w	r8, #0
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	db3b      	blt.n	800aa8e <_dtoa_r+0x23e>
 800aa16:	9b04      	ldr	r3, [sp, #16]
 800aa18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800aa1c:	4453      	add	r3, sl
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	2300      	movs	r3, #0
 800aa22:	9306      	str	r3, [sp, #24]
 800aa24:	9b05      	ldr	r3, [sp, #20]
 800aa26:	2b09      	cmp	r3, #9
 800aa28:	d869      	bhi.n	800aafe <_dtoa_r+0x2ae>
 800aa2a:	2b05      	cmp	r3, #5
 800aa2c:	bfc4      	itt	gt
 800aa2e:	3b04      	subgt	r3, #4
 800aa30:	9305      	strgt	r3, [sp, #20]
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	f1a3 0302 	sub.w	r3, r3, #2
 800aa38:	bfcc      	ite	gt
 800aa3a:	2500      	movgt	r5, #0
 800aa3c:	2501      	movle	r5, #1
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d869      	bhi.n	800ab16 <_dtoa_r+0x2c6>
 800aa42:	e8df f003 	tbb	[pc, r3]
 800aa46:	4e2c      	.short	0x4e2c
 800aa48:	5a4c      	.short	0x5a4c
 800aa4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aa4e:	441d      	add	r5, r3
 800aa50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	bfc1      	itttt	gt
 800aa58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aa60:	fa09 f303 	lslgt.w	r3, r9, r3
 800aa64:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa68:	bfda      	itte	le
 800aa6a:	f1c3 0320 	rsble	r3, r3, #32
 800aa6e:	fa06 f003 	lslle.w	r0, r6, r3
 800aa72:	4318      	orrgt	r0, r3
 800aa74:	f7f5 fd46 	bl	8000504 <__aeabi_ui2d>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aa80:	3d01      	subs	r5, #1
 800aa82:	9310      	str	r3, [sp, #64]	; 0x40
 800aa84:	e771      	b.n	800a96a <_dtoa_r+0x11a>
 800aa86:	2301      	movs	r3, #1
 800aa88:	e7b6      	b.n	800a9f8 <_dtoa_r+0x1a8>
 800aa8a:	900e      	str	r0, [sp, #56]	; 0x38
 800aa8c:	e7b5      	b.n	800a9fa <_dtoa_r+0x1aa>
 800aa8e:	f1ca 0300 	rsb	r3, sl, #0
 800aa92:	9306      	str	r3, [sp, #24]
 800aa94:	2300      	movs	r3, #0
 800aa96:	eba8 080a 	sub.w	r8, r8, sl
 800aa9a:	930d      	str	r3, [sp, #52]	; 0x34
 800aa9c:	e7c2      	b.n	800aa24 <_dtoa_r+0x1d4>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	9308      	str	r3, [sp, #32]
 800aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dc39      	bgt.n	800ab1c <_dtoa_r+0x2cc>
 800aaa8:	f04f 0901 	mov.w	r9, #1
 800aaac:	f8cd 9004 	str.w	r9, [sp, #4]
 800aab0:	464b      	mov	r3, r9
 800aab2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aab6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aab8:	2200      	movs	r2, #0
 800aaba:	6042      	str	r2, [r0, #4]
 800aabc:	2204      	movs	r2, #4
 800aabe:	f102 0614 	add.w	r6, r2, #20
 800aac2:	429e      	cmp	r6, r3
 800aac4:	6841      	ldr	r1, [r0, #4]
 800aac6:	d92f      	bls.n	800ab28 <_dtoa_r+0x2d8>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 fed9 	bl	800b880 <_Balloc>
 800aace:	9000      	str	r0, [sp, #0]
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d14b      	bne.n	800ab6c <_dtoa_r+0x31c>
 800aad4:	4b24      	ldr	r3, [pc, #144]	; (800ab68 <_dtoa_r+0x318>)
 800aad6:	4602      	mov	r2, r0
 800aad8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aadc:	e6d1      	b.n	800a882 <_dtoa_r+0x32>
 800aade:	2301      	movs	r3, #1
 800aae0:	e7de      	b.n	800aaa0 <_dtoa_r+0x250>
 800aae2:	2300      	movs	r3, #0
 800aae4:	9308      	str	r3, [sp, #32]
 800aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae8:	eb0a 0903 	add.w	r9, sl, r3
 800aaec:	f109 0301 	add.w	r3, r9, #1
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	bfb8      	it	lt
 800aaf6:	2301      	movlt	r3, #1
 800aaf8:	e7dd      	b.n	800aab6 <_dtoa_r+0x266>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e7f2      	b.n	800aae4 <_dtoa_r+0x294>
 800aafe:	2501      	movs	r5, #1
 800ab00:	2300      	movs	r3, #0
 800ab02:	9305      	str	r3, [sp, #20]
 800ab04:	9508      	str	r5, [sp, #32]
 800ab06:	f04f 39ff 	mov.w	r9, #4294967295
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab10:	2312      	movs	r3, #18
 800ab12:	9209      	str	r2, [sp, #36]	; 0x24
 800ab14:	e7cf      	b.n	800aab6 <_dtoa_r+0x266>
 800ab16:	2301      	movs	r3, #1
 800ab18:	9308      	str	r3, [sp, #32]
 800ab1a:	e7f4      	b.n	800ab06 <_dtoa_r+0x2b6>
 800ab1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ab20:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab24:	464b      	mov	r3, r9
 800ab26:	e7c6      	b.n	800aab6 <_dtoa_r+0x266>
 800ab28:	3101      	adds	r1, #1
 800ab2a:	6041      	str	r1, [r0, #4]
 800ab2c:	0052      	lsls	r2, r2, #1
 800ab2e:	e7c6      	b.n	800aabe <_dtoa_r+0x26e>
 800ab30:	636f4361 	.word	0x636f4361
 800ab34:	3fd287a7 	.word	0x3fd287a7
 800ab38:	8b60c8b3 	.word	0x8b60c8b3
 800ab3c:	3fc68a28 	.word	0x3fc68a28
 800ab40:	509f79fb 	.word	0x509f79fb
 800ab44:	3fd34413 	.word	0x3fd34413
 800ab48:	0800c73d 	.word	0x0800c73d
 800ab4c:	0800c754 	.word	0x0800c754
 800ab50:	7ff00000 	.word	0x7ff00000
 800ab54:	0800c739 	.word	0x0800c739
 800ab58:	0800c730 	.word	0x0800c730
 800ab5c:	0800c70d 	.word	0x0800c70d
 800ab60:	3ff80000 	.word	0x3ff80000
 800ab64:	0800c8b0 	.word	0x0800c8b0
 800ab68:	0800c7b3 	.word	0x0800c7b3
 800ab6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab6e:	9a00      	ldr	r2, [sp, #0]
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	9b01      	ldr	r3, [sp, #4]
 800ab74:	2b0e      	cmp	r3, #14
 800ab76:	f200 80ad 	bhi.w	800acd4 <_dtoa_r+0x484>
 800ab7a:	2d00      	cmp	r5, #0
 800ab7c:	f000 80aa 	beq.w	800acd4 <_dtoa_r+0x484>
 800ab80:	f1ba 0f00 	cmp.w	sl, #0
 800ab84:	dd36      	ble.n	800abf4 <_dtoa_r+0x3a4>
 800ab86:	4ac3      	ldr	r2, [pc, #780]	; (800ae94 <_dtoa_r+0x644>)
 800ab88:	f00a 030f 	and.w	r3, sl, #15
 800ab8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab90:	ed93 7b00 	vldr	d7, [r3]
 800ab94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ab98:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ab9c:	eeb0 8a47 	vmov.f32	s16, s14
 800aba0:	eef0 8a67 	vmov.f32	s17, s15
 800aba4:	d016      	beq.n	800abd4 <_dtoa_r+0x384>
 800aba6:	4bbc      	ldr	r3, [pc, #752]	; (800ae98 <_dtoa_r+0x648>)
 800aba8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800abac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abb0:	f7f5 fe4c 	bl	800084c <__aeabi_ddiv>
 800abb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb8:	f007 070f 	and.w	r7, r7, #15
 800abbc:	2503      	movs	r5, #3
 800abbe:	4eb6      	ldr	r6, [pc, #728]	; (800ae98 <_dtoa_r+0x648>)
 800abc0:	b957      	cbnz	r7, 800abd8 <_dtoa_r+0x388>
 800abc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abc6:	ec53 2b18 	vmov	r2, r3, d8
 800abca:	f7f5 fe3f 	bl	800084c <__aeabi_ddiv>
 800abce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd2:	e029      	b.n	800ac28 <_dtoa_r+0x3d8>
 800abd4:	2502      	movs	r5, #2
 800abd6:	e7f2      	b.n	800abbe <_dtoa_r+0x36e>
 800abd8:	07f9      	lsls	r1, r7, #31
 800abda:	d508      	bpl.n	800abee <_dtoa_r+0x39e>
 800abdc:	ec51 0b18 	vmov	r0, r1, d8
 800abe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abe4:	f7f5 fd08 	bl	80005f8 <__aeabi_dmul>
 800abe8:	ec41 0b18 	vmov	d8, r0, r1
 800abec:	3501      	adds	r5, #1
 800abee:	107f      	asrs	r7, r7, #1
 800abf0:	3608      	adds	r6, #8
 800abf2:	e7e5      	b.n	800abc0 <_dtoa_r+0x370>
 800abf4:	f000 80a6 	beq.w	800ad44 <_dtoa_r+0x4f4>
 800abf8:	f1ca 0600 	rsb	r6, sl, #0
 800abfc:	4ba5      	ldr	r3, [pc, #660]	; (800ae94 <_dtoa_r+0x644>)
 800abfe:	4fa6      	ldr	r7, [pc, #664]	; (800ae98 <_dtoa_r+0x648>)
 800ac00:	f006 020f 	and.w	r2, r6, #15
 800ac04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac10:	f7f5 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ac14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac18:	1136      	asrs	r6, r6, #4
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2502      	movs	r5, #2
 800ac1e:	2e00      	cmp	r6, #0
 800ac20:	f040 8085 	bne.w	800ad2e <_dtoa_r+0x4de>
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1d2      	bne.n	800abce <_dtoa_r+0x37e>
 800ac28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 808c 	beq.w	800ad48 <_dtoa_r+0x4f8>
 800ac30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac34:	4b99      	ldr	r3, [pc, #612]	; (800ae9c <_dtoa_r+0x64c>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff4e 	bl	8000adc <__aeabi_dcmplt>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	f000 8081 	beq.w	800ad48 <_dtoa_r+0x4f8>
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d07d      	beq.n	800ad48 <_dtoa_r+0x4f8>
 800ac4c:	f1b9 0f00 	cmp.w	r9, #0
 800ac50:	dd3c      	ble.n	800accc <_dtoa_r+0x47c>
 800ac52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac56:	9307      	str	r3, [sp, #28]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4b91      	ldr	r3, [pc, #580]	; (800aea0 <_dtoa_r+0x650>)
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	4639      	mov	r1, r7
 800ac60:	f7f5 fcca 	bl	80005f8 <__aeabi_dmul>
 800ac64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac68:	3501      	adds	r5, #1
 800ac6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ac6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac72:	4628      	mov	r0, r5
 800ac74:	f7f5 fc56 	bl	8000524 <__aeabi_i2d>
 800ac78:	4632      	mov	r2, r6
 800ac7a:	463b      	mov	r3, r7
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	4b88      	ldr	r3, [pc, #544]	; (800aea4 <_dtoa_r+0x654>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	f7f5 fb02 	bl	800028c <__adddf3>
 800ac88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac90:	9303      	str	r3, [sp, #12]
 800ac92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d15c      	bne.n	800ad52 <_dtoa_r+0x502>
 800ac98:	4b83      	ldr	r3, [pc, #524]	; (800aea8 <_dtoa_r+0x658>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	4639      	mov	r1, r7
 800aca0:	f7f5 faf2 	bl	8000288 <__aeabi_dsub>
 800aca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aca8:	4606      	mov	r6, r0
 800acaa:	460f      	mov	r7, r1
 800acac:	f7f5 ff34 	bl	8000b18 <__aeabi_dcmpgt>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f040 8296 	bne.w	800b1e2 <_dtoa_r+0x992>
 800acb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800acba:	4630      	mov	r0, r6
 800acbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acc0:	4639      	mov	r1, r7
 800acc2:	f7f5 ff0b 	bl	8000adc <__aeabi_dcmplt>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f040 8288 	bne.w	800b1dc <_dtoa_r+0x98c>
 800accc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800acd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f2c0 8158 	blt.w	800af8c <_dtoa_r+0x73c>
 800acdc:	f1ba 0f0e 	cmp.w	sl, #14
 800ace0:	f300 8154 	bgt.w	800af8c <_dtoa_r+0x73c>
 800ace4:	4b6b      	ldr	r3, [pc, #428]	; (800ae94 <_dtoa_r+0x644>)
 800ace6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f280 80e3 	bge.w	800aebc <_dtoa_r+0x66c>
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f300 80df 	bgt.w	800aebc <_dtoa_r+0x66c>
 800acfe:	f040 826d 	bne.w	800b1dc <_dtoa_r+0x98c>
 800ad02:	4b69      	ldr	r3, [pc, #420]	; (800aea8 <_dtoa_r+0x658>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fc75 	bl	80005f8 <__aeabi_dmul>
 800ad0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad12:	f7f5 fef7 	bl	8000b04 <__aeabi_dcmpge>
 800ad16:	9e01      	ldr	r6, [sp, #4]
 800ad18:	4637      	mov	r7, r6
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f040 8243 	bne.w	800b1a6 <_dtoa_r+0x956>
 800ad20:	9d00      	ldr	r5, [sp, #0]
 800ad22:	2331      	movs	r3, #49	; 0x31
 800ad24:	f805 3b01 	strb.w	r3, [r5], #1
 800ad28:	f10a 0a01 	add.w	sl, sl, #1
 800ad2c:	e23f      	b.n	800b1ae <_dtoa_r+0x95e>
 800ad2e:	07f2      	lsls	r2, r6, #31
 800ad30:	d505      	bpl.n	800ad3e <_dtoa_r+0x4ee>
 800ad32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad36:	f7f5 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	1076      	asrs	r6, r6, #1
 800ad40:	3708      	adds	r7, #8
 800ad42:	e76c      	b.n	800ac1e <_dtoa_r+0x3ce>
 800ad44:	2502      	movs	r5, #2
 800ad46:	e76f      	b.n	800ac28 <_dtoa_r+0x3d8>
 800ad48:	9b01      	ldr	r3, [sp, #4]
 800ad4a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ad4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad50:	e78d      	b.n	800ac6e <_dtoa_r+0x41e>
 800ad52:	9900      	ldr	r1, [sp, #0]
 800ad54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad58:	4b4e      	ldr	r3, [pc, #312]	; (800ae94 <_dtoa_r+0x644>)
 800ad5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad5e:	4401      	add	r1, r0
 800ad60:	9102      	str	r1, [sp, #8]
 800ad62:	9908      	ldr	r1, [sp, #32]
 800ad64:	eeb0 8a47 	vmov.f32	s16, s14
 800ad68:	eef0 8a67 	vmov.f32	s17, s15
 800ad6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d045      	beq.n	800ae04 <_dtoa_r+0x5b4>
 800ad78:	494c      	ldr	r1, [pc, #304]	; (800aeac <_dtoa_r+0x65c>)
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	f7f5 fd66 	bl	800084c <__aeabi_ddiv>
 800ad80:	ec53 2b18 	vmov	r2, r3, d8
 800ad84:	f7f5 fa80 	bl	8000288 <__aeabi_dsub>
 800ad88:	9d00      	ldr	r5, [sp, #0]
 800ad8a:	ec41 0b18 	vmov	d8, r0, r1
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4630      	mov	r0, r6
 800ad92:	f7f5 fee1 	bl	8000b58 <__aeabi_d2iz>
 800ad96:	900c      	str	r0, [sp, #48]	; 0x30
 800ad98:	f7f5 fbc4 	bl	8000524 <__aeabi_i2d>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fa70 	bl	8000288 <__aeabi_dsub>
 800ada8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adaa:	3330      	adds	r3, #48	; 0x30
 800adac:	f805 3b01 	strb.w	r3, [r5], #1
 800adb0:	ec53 2b18 	vmov	r2, r3, d8
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	f7f5 fe90 	bl	8000adc <__aeabi_dcmplt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d165      	bne.n	800ae8c <_dtoa_r+0x63c>
 800adc0:	4632      	mov	r2, r6
 800adc2:	463b      	mov	r3, r7
 800adc4:	4935      	ldr	r1, [pc, #212]	; (800ae9c <_dtoa_r+0x64c>)
 800adc6:	2000      	movs	r0, #0
 800adc8:	f7f5 fa5e 	bl	8000288 <__aeabi_dsub>
 800adcc:	ec53 2b18 	vmov	r2, r3, d8
 800add0:	f7f5 fe84 	bl	8000adc <__aeabi_dcmplt>
 800add4:	2800      	cmp	r0, #0
 800add6:	f040 80b9 	bne.w	800af4c <_dtoa_r+0x6fc>
 800adda:	9b02      	ldr	r3, [sp, #8]
 800addc:	429d      	cmp	r5, r3
 800adde:	f43f af75 	beq.w	800accc <_dtoa_r+0x47c>
 800ade2:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <_dtoa_r+0x650>)
 800ade4:	ec51 0b18 	vmov	r0, r1, d8
 800ade8:	2200      	movs	r2, #0
 800adea:	f7f5 fc05 	bl	80005f8 <__aeabi_dmul>
 800adee:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <_dtoa_r+0x650>)
 800adf0:	ec41 0b18 	vmov	d8, r0, r1
 800adf4:	2200      	movs	r2, #0
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fbfd 	bl	80005f8 <__aeabi_dmul>
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	e7c4      	b.n	800ad8e <_dtoa_r+0x53e>
 800ae04:	ec51 0b17 	vmov	r0, r1, d7
 800ae08:	f7f5 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	9d00      	ldr	r5, [sp, #0]
 800ae10:	930c      	str	r3, [sp, #48]	; 0x30
 800ae12:	ec41 0b18 	vmov	d8, r0, r1
 800ae16:	4639      	mov	r1, r7
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7f5 fe9d 	bl	8000b58 <__aeabi_d2iz>
 800ae1e:	9011      	str	r0, [sp, #68]	; 0x44
 800ae20:	f7f5 fb80 	bl	8000524 <__aeabi_i2d>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	f7f5 fa2c 	bl	8000288 <__aeabi_dsub>
 800ae30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae32:	3330      	adds	r3, #48	; 0x30
 800ae34:	f805 3b01 	strb.w	r3, [r5], #1
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	429d      	cmp	r5, r3
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	460f      	mov	r7, r1
 800ae40:	f04f 0200 	mov.w	r2, #0
 800ae44:	d134      	bne.n	800aeb0 <_dtoa_r+0x660>
 800ae46:	4b19      	ldr	r3, [pc, #100]	; (800aeac <_dtoa_r+0x65c>)
 800ae48:	ec51 0b18 	vmov	r0, r1, d8
 800ae4c:	f7f5 fa1e 	bl	800028c <__adddf3>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fe5e 	bl	8000b18 <__aeabi_dcmpgt>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d175      	bne.n	800af4c <_dtoa_r+0x6fc>
 800ae60:	ec53 2b18 	vmov	r2, r3, d8
 800ae64:	4911      	ldr	r1, [pc, #68]	; (800aeac <_dtoa_r+0x65c>)
 800ae66:	2000      	movs	r0, #0
 800ae68:	f7f5 fa0e 	bl	8000288 <__aeabi_dsub>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4630      	mov	r0, r6
 800ae72:	4639      	mov	r1, r7
 800ae74:	f7f5 fe32 	bl	8000adc <__aeabi_dcmplt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f43f af27 	beq.w	800accc <_dtoa_r+0x47c>
 800ae7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae80:	1e6b      	subs	r3, r5, #1
 800ae82:	930c      	str	r3, [sp, #48]	; 0x30
 800ae84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae88:	2b30      	cmp	r3, #48	; 0x30
 800ae8a:	d0f8      	beq.n	800ae7e <_dtoa_r+0x62e>
 800ae8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ae90:	e04a      	b.n	800af28 <_dtoa_r+0x6d8>
 800ae92:	bf00      	nop
 800ae94:	0800c8b0 	.word	0x0800c8b0
 800ae98:	0800c888 	.word	0x0800c888
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	40240000 	.word	0x40240000
 800aea4:	401c0000 	.word	0x401c0000
 800aea8:	40140000 	.word	0x40140000
 800aeac:	3fe00000 	.word	0x3fe00000
 800aeb0:	4baf      	ldr	r3, [pc, #700]	; (800b170 <_dtoa_r+0x920>)
 800aeb2:	f7f5 fba1 	bl	80005f8 <__aeabi_dmul>
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	460f      	mov	r7, r1
 800aeba:	e7ac      	b.n	800ae16 <_dtoa_r+0x5c6>
 800aebc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aec0:	9d00      	ldr	r5, [sp, #0]
 800aec2:	4642      	mov	r2, r8
 800aec4:	464b      	mov	r3, r9
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 fcbf 	bl	800084c <__aeabi_ddiv>
 800aece:	f7f5 fe43 	bl	8000b58 <__aeabi_d2iz>
 800aed2:	9002      	str	r0, [sp, #8]
 800aed4:	f7f5 fb26 	bl	8000524 <__aeabi_i2d>
 800aed8:	4642      	mov	r2, r8
 800aeda:	464b      	mov	r3, r9
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4630      	mov	r0, r6
 800aee6:	4639      	mov	r1, r7
 800aee8:	f7f5 f9ce 	bl	8000288 <__aeabi_dsub>
 800aeec:	9e02      	ldr	r6, [sp, #8]
 800aeee:	9f01      	ldr	r7, [sp, #4]
 800aef0:	3630      	adds	r6, #48	; 0x30
 800aef2:	f805 6b01 	strb.w	r6, [r5], #1
 800aef6:	9e00      	ldr	r6, [sp, #0]
 800aef8:	1bae      	subs	r6, r5, r6
 800aefa:	42b7      	cmp	r7, r6
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	d137      	bne.n	800af72 <_dtoa_r+0x722>
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4642      	mov	r2, r8
 800af08:	464b      	mov	r3, r9
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	f7f5 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 800af12:	b9c8      	cbnz	r0, 800af48 <_dtoa_r+0x6f8>
 800af14:	4642      	mov	r2, r8
 800af16:	464b      	mov	r3, r9
 800af18:	4630      	mov	r0, r6
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800af20:	b110      	cbz	r0, 800af28 <_dtoa_r+0x6d8>
 800af22:	9b02      	ldr	r3, [sp, #8]
 800af24:	07d9      	lsls	r1, r3, #31
 800af26:	d40f      	bmi.n	800af48 <_dtoa_r+0x6f8>
 800af28:	4620      	mov	r0, r4
 800af2a:	4659      	mov	r1, fp
 800af2c:	f000 fce8 	bl	800b900 <_Bfree>
 800af30:	2300      	movs	r3, #0
 800af32:	702b      	strb	r3, [r5, #0]
 800af34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af36:	f10a 0001 	add.w	r0, sl, #1
 800af3a:	6018      	str	r0, [r3, #0]
 800af3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f43f acd8 	beq.w	800a8f4 <_dtoa_r+0xa4>
 800af44:	601d      	str	r5, [r3, #0]
 800af46:	e4d5      	b.n	800a8f4 <_dtoa_r+0xa4>
 800af48:	f8cd a01c 	str.w	sl, [sp, #28]
 800af4c:	462b      	mov	r3, r5
 800af4e:	461d      	mov	r5, r3
 800af50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af54:	2a39      	cmp	r2, #57	; 0x39
 800af56:	d108      	bne.n	800af6a <_dtoa_r+0x71a>
 800af58:	9a00      	ldr	r2, [sp, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d1f7      	bne.n	800af4e <_dtoa_r+0x6fe>
 800af5e:	9a07      	ldr	r2, [sp, #28]
 800af60:	9900      	ldr	r1, [sp, #0]
 800af62:	3201      	adds	r2, #1
 800af64:	9207      	str	r2, [sp, #28]
 800af66:	2230      	movs	r2, #48	; 0x30
 800af68:	700a      	strb	r2, [r1, #0]
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	3201      	adds	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e78c      	b.n	800ae8c <_dtoa_r+0x63c>
 800af72:	4b7f      	ldr	r3, [pc, #508]	; (800b170 <_dtoa_r+0x920>)
 800af74:	2200      	movs	r2, #0
 800af76:	f7f5 fb3f 	bl	80005f8 <__aeabi_dmul>
 800af7a:	2200      	movs	r2, #0
 800af7c:	2300      	movs	r3, #0
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	f7f5 fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 800af86:	2800      	cmp	r0, #0
 800af88:	d09b      	beq.n	800aec2 <_dtoa_r+0x672>
 800af8a:	e7cd      	b.n	800af28 <_dtoa_r+0x6d8>
 800af8c:	9a08      	ldr	r2, [sp, #32]
 800af8e:	2a00      	cmp	r2, #0
 800af90:	f000 80c4 	beq.w	800b11c <_dtoa_r+0x8cc>
 800af94:	9a05      	ldr	r2, [sp, #20]
 800af96:	2a01      	cmp	r2, #1
 800af98:	f300 80a8 	bgt.w	800b0ec <_dtoa_r+0x89c>
 800af9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af9e:	2a00      	cmp	r2, #0
 800afa0:	f000 80a0 	beq.w	800b0e4 <_dtoa_r+0x894>
 800afa4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afa8:	9e06      	ldr	r6, [sp, #24]
 800afaa:	4645      	mov	r5, r8
 800afac:	9a04      	ldr	r2, [sp, #16]
 800afae:	2101      	movs	r1, #1
 800afb0:	441a      	add	r2, r3
 800afb2:	4620      	mov	r0, r4
 800afb4:	4498      	add	r8, r3
 800afb6:	9204      	str	r2, [sp, #16]
 800afb8:	f000 fd5e 	bl	800ba78 <__i2b>
 800afbc:	4607      	mov	r7, r0
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	dd0b      	ble.n	800afda <_dtoa_r+0x78a>
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd08      	ble.n	800afda <_dtoa_r+0x78a>
 800afc8:	42ab      	cmp	r3, r5
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	bfa8      	it	ge
 800afce:	462b      	movge	r3, r5
 800afd0:	eba8 0803 	sub.w	r8, r8, r3
 800afd4:	1aed      	subs	r5, r5, r3
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	9b06      	ldr	r3, [sp, #24]
 800afdc:	b1fb      	cbz	r3, 800b01e <_dtoa_r+0x7ce>
 800afde:	9b08      	ldr	r3, [sp, #32]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 809f 	beq.w	800b124 <_dtoa_r+0x8d4>
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	dd11      	ble.n	800b00e <_dtoa_r+0x7be>
 800afea:	4639      	mov	r1, r7
 800afec:	4632      	mov	r2, r6
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 fdfe 	bl	800bbf0 <__pow5mult>
 800aff4:	465a      	mov	r2, fp
 800aff6:	4601      	mov	r1, r0
 800aff8:	4607      	mov	r7, r0
 800affa:	4620      	mov	r0, r4
 800affc:	f000 fd52 	bl	800baa4 <__multiply>
 800b000:	4659      	mov	r1, fp
 800b002:	9007      	str	r0, [sp, #28]
 800b004:	4620      	mov	r0, r4
 800b006:	f000 fc7b 	bl	800b900 <_Bfree>
 800b00a:	9b07      	ldr	r3, [sp, #28]
 800b00c:	469b      	mov	fp, r3
 800b00e:	9b06      	ldr	r3, [sp, #24]
 800b010:	1b9a      	subs	r2, r3, r6
 800b012:	d004      	beq.n	800b01e <_dtoa_r+0x7ce>
 800b014:	4659      	mov	r1, fp
 800b016:	4620      	mov	r0, r4
 800b018:	f000 fdea 	bl	800bbf0 <__pow5mult>
 800b01c:	4683      	mov	fp, r0
 800b01e:	2101      	movs	r1, #1
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fd29 	bl	800ba78 <__i2b>
 800b026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b028:	2b00      	cmp	r3, #0
 800b02a:	4606      	mov	r6, r0
 800b02c:	dd7c      	ble.n	800b128 <_dtoa_r+0x8d8>
 800b02e:	461a      	mov	r2, r3
 800b030:	4601      	mov	r1, r0
 800b032:	4620      	mov	r0, r4
 800b034:	f000 fddc 	bl	800bbf0 <__pow5mult>
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	4606      	mov	r6, r0
 800b03e:	dd76      	ble.n	800b12e <_dtoa_r+0x8de>
 800b040:	2300      	movs	r3, #0
 800b042:	9306      	str	r3, [sp, #24]
 800b044:	6933      	ldr	r3, [r6, #16]
 800b046:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b04a:	6918      	ldr	r0, [r3, #16]
 800b04c:	f000 fcc4 	bl	800b9d8 <__hi0bits>
 800b050:	f1c0 0020 	rsb	r0, r0, #32
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	4418      	add	r0, r3
 800b058:	f010 001f 	ands.w	r0, r0, #31
 800b05c:	f000 8086 	beq.w	800b16c <_dtoa_r+0x91c>
 800b060:	f1c0 0320 	rsb	r3, r0, #32
 800b064:	2b04      	cmp	r3, #4
 800b066:	dd7f      	ble.n	800b168 <_dtoa_r+0x918>
 800b068:	f1c0 001c 	rsb	r0, r0, #28
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	4403      	add	r3, r0
 800b070:	4480      	add	r8, r0
 800b072:	4405      	add	r5, r0
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	f1b8 0f00 	cmp.w	r8, #0
 800b07a:	dd05      	ble.n	800b088 <_dtoa_r+0x838>
 800b07c:	4659      	mov	r1, fp
 800b07e:	4642      	mov	r2, r8
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fe0f 	bl	800bca4 <__lshift>
 800b086:	4683      	mov	fp, r0
 800b088:	9b04      	ldr	r3, [sp, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dd05      	ble.n	800b09a <_dtoa_r+0x84a>
 800b08e:	4631      	mov	r1, r6
 800b090:	461a      	mov	r2, r3
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fe06 	bl	800bca4 <__lshift>
 800b098:	4606      	mov	r6, r0
 800b09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d069      	beq.n	800b174 <_dtoa_r+0x924>
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 fe6a 	bl	800bd7c <__mcmp>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	da63      	bge.n	800b174 <_dtoa_r+0x924>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	220a      	movs	r2, #10
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fc46 	bl	800b944 <__multadd>
 800b0b8:	9b08      	ldr	r3, [sp, #32]
 800b0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0be:	4683      	mov	fp, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 818f 	beq.w	800b3e4 <_dtoa_r+0xb94>
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	220a      	movs	r2, #10
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fc39 	bl	800b944 <__multadd>
 800b0d2:	f1b9 0f00 	cmp.w	r9, #0
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	f300 808e 	bgt.w	800b1f8 <_dtoa_r+0x9a8>
 800b0dc:	9b05      	ldr	r3, [sp, #20]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	dc50      	bgt.n	800b184 <_dtoa_r+0x934>
 800b0e2:	e089      	b.n	800b1f8 <_dtoa_r+0x9a8>
 800b0e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0ea:	e75d      	b.n	800afa8 <_dtoa_r+0x758>
 800b0ec:	9b01      	ldr	r3, [sp, #4]
 800b0ee:	1e5e      	subs	r6, r3, #1
 800b0f0:	9b06      	ldr	r3, [sp, #24]
 800b0f2:	42b3      	cmp	r3, r6
 800b0f4:	bfbf      	itttt	lt
 800b0f6:	9b06      	ldrlt	r3, [sp, #24]
 800b0f8:	9606      	strlt	r6, [sp, #24]
 800b0fa:	1af2      	sublt	r2, r6, r3
 800b0fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b0fe:	bfb6      	itet	lt
 800b100:	189b      	addlt	r3, r3, r2
 800b102:	1b9e      	subge	r6, r3, r6
 800b104:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	bfb8      	it	lt
 800b10a:	2600      	movlt	r6, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfb5      	itete	lt
 800b110:	eba8 0503 	sublt.w	r5, r8, r3
 800b114:	9b01      	ldrge	r3, [sp, #4]
 800b116:	2300      	movlt	r3, #0
 800b118:	4645      	movge	r5, r8
 800b11a:	e747      	b.n	800afac <_dtoa_r+0x75c>
 800b11c:	9e06      	ldr	r6, [sp, #24]
 800b11e:	9f08      	ldr	r7, [sp, #32]
 800b120:	4645      	mov	r5, r8
 800b122:	e74c      	b.n	800afbe <_dtoa_r+0x76e>
 800b124:	9a06      	ldr	r2, [sp, #24]
 800b126:	e775      	b.n	800b014 <_dtoa_r+0x7c4>
 800b128:	9b05      	ldr	r3, [sp, #20]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	dc18      	bgt.n	800b160 <_dtoa_r+0x910>
 800b12e:	9b02      	ldr	r3, [sp, #8]
 800b130:	b9b3      	cbnz	r3, 800b160 <_dtoa_r+0x910>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b138:	b9a3      	cbnz	r3, 800b164 <_dtoa_r+0x914>
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b140:	0d1b      	lsrs	r3, r3, #20
 800b142:	051b      	lsls	r3, r3, #20
 800b144:	b12b      	cbz	r3, 800b152 <_dtoa_r+0x902>
 800b146:	9b04      	ldr	r3, [sp, #16]
 800b148:	3301      	adds	r3, #1
 800b14a:	9304      	str	r3, [sp, #16]
 800b14c:	f108 0801 	add.w	r8, r8, #1
 800b150:	2301      	movs	r3, #1
 800b152:	9306      	str	r3, [sp, #24]
 800b154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b156:	2b00      	cmp	r3, #0
 800b158:	f47f af74 	bne.w	800b044 <_dtoa_r+0x7f4>
 800b15c:	2001      	movs	r0, #1
 800b15e:	e779      	b.n	800b054 <_dtoa_r+0x804>
 800b160:	2300      	movs	r3, #0
 800b162:	e7f6      	b.n	800b152 <_dtoa_r+0x902>
 800b164:	9b02      	ldr	r3, [sp, #8]
 800b166:	e7f4      	b.n	800b152 <_dtoa_r+0x902>
 800b168:	d085      	beq.n	800b076 <_dtoa_r+0x826>
 800b16a:	4618      	mov	r0, r3
 800b16c:	301c      	adds	r0, #28
 800b16e:	e77d      	b.n	800b06c <_dtoa_r+0x81c>
 800b170:	40240000 	.word	0x40240000
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	dc38      	bgt.n	800b1ec <_dtoa_r+0x99c>
 800b17a:	9b05      	ldr	r3, [sp, #20]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	dd35      	ble.n	800b1ec <_dtoa_r+0x99c>
 800b180:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b184:	f1b9 0f00 	cmp.w	r9, #0
 800b188:	d10d      	bne.n	800b1a6 <_dtoa_r+0x956>
 800b18a:	4631      	mov	r1, r6
 800b18c:	464b      	mov	r3, r9
 800b18e:	2205      	movs	r2, #5
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fbd7 	bl	800b944 <__multadd>
 800b196:	4601      	mov	r1, r0
 800b198:	4606      	mov	r6, r0
 800b19a:	4658      	mov	r0, fp
 800b19c:	f000 fdee 	bl	800bd7c <__mcmp>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	f73f adbd 	bgt.w	800ad20 <_dtoa_r+0x4d0>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	9d00      	ldr	r5, [sp, #0]
 800b1aa:	ea6f 0a03 	mvn.w	sl, r3
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fba3 	bl	800b900 <_Bfree>
 800b1ba:	2f00      	cmp	r7, #0
 800b1bc:	f43f aeb4 	beq.w	800af28 <_dtoa_r+0x6d8>
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	d005      	beq.n	800b1d2 <_dtoa_r+0x982>
 800b1c6:	45b8      	cmp	r8, r7
 800b1c8:	d003      	beq.n	800b1d2 <_dtoa_r+0x982>
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fb97 	bl	800b900 <_Bfree>
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fb93 	bl	800b900 <_Bfree>
 800b1da:	e6a5      	b.n	800af28 <_dtoa_r+0x6d8>
 800b1dc:	2600      	movs	r6, #0
 800b1de:	4637      	mov	r7, r6
 800b1e0:	e7e1      	b.n	800b1a6 <_dtoa_r+0x956>
 800b1e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b1e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b1e8:	4637      	mov	r7, r6
 800b1ea:	e599      	b.n	800ad20 <_dtoa_r+0x4d0>
 800b1ec:	9b08      	ldr	r3, [sp, #32]
 800b1ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 80fd 	beq.w	800b3f2 <_dtoa_r+0xba2>
 800b1f8:	2d00      	cmp	r5, #0
 800b1fa:	dd05      	ble.n	800b208 <_dtoa_r+0x9b8>
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	462a      	mov	r2, r5
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fd4f 	bl	800bca4 <__lshift>
 800b206:	4607      	mov	r7, r0
 800b208:	9b06      	ldr	r3, [sp, #24]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d05c      	beq.n	800b2c8 <_dtoa_r+0xa78>
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fb35 	bl	800b880 <_Balloc>
 800b216:	4605      	mov	r5, r0
 800b218:	b928      	cbnz	r0, 800b226 <_dtoa_r+0x9d6>
 800b21a:	4b80      	ldr	r3, [pc, #512]	; (800b41c <_dtoa_r+0xbcc>)
 800b21c:	4602      	mov	r2, r0
 800b21e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b222:	f7ff bb2e 	b.w	800a882 <_dtoa_r+0x32>
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	3202      	adds	r2, #2
 800b22a:	0092      	lsls	r2, r2, #2
 800b22c:	f107 010c 	add.w	r1, r7, #12
 800b230:	300c      	adds	r0, #12
 800b232:	f7fe fc59 	bl	8009ae8 <memcpy>
 800b236:	2201      	movs	r2, #1
 800b238:	4629      	mov	r1, r5
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 fd32 	bl	800bca4 <__lshift>
 800b240:	9b00      	ldr	r3, [sp, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	9b00      	ldr	r3, [sp, #0]
 800b248:	444b      	add	r3, r9
 800b24a:	9307      	str	r3, [sp, #28]
 800b24c:	9b02      	ldr	r3, [sp, #8]
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	46b8      	mov	r8, r7
 800b254:	9306      	str	r3, [sp, #24]
 800b256:	4607      	mov	r7, r0
 800b258:	9b01      	ldr	r3, [sp, #4]
 800b25a:	4631      	mov	r1, r6
 800b25c:	3b01      	subs	r3, #1
 800b25e:	4658      	mov	r0, fp
 800b260:	9302      	str	r3, [sp, #8]
 800b262:	f7ff fa67 	bl	800a734 <quorem>
 800b266:	4603      	mov	r3, r0
 800b268:	3330      	adds	r3, #48	; 0x30
 800b26a:	9004      	str	r0, [sp, #16]
 800b26c:	4641      	mov	r1, r8
 800b26e:	4658      	mov	r0, fp
 800b270:	9308      	str	r3, [sp, #32]
 800b272:	f000 fd83 	bl	800bd7c <__mcmp>
 800b276:	463a      	mov	r2, r7
 800b278:	4681      	mov	r9, r0
 800b27a:	4631      	mov	r1, r6
 800b27c:	4620      	mov	r0, r4
 800b27e:	f000 fd99 	bl	800bdb4 <__mdiff>
 800b282:	68c2      	ldr	r2, [r0, #12]
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	4605      	mov	r5, r0
 800b288:	bb02      	cbnz	r2, 800b2cc <_dtoa_r+0xa7c>
 800b28a:	4601      	mov	r1, r0
 800b28c:	4658      	mov	r0, fp
 800b28e:	f000 fd75 	bl	800bd7c <__mcmp>
 800b292:	9b08      	ldr	r3, [sp, #32]
 800b294:	4602      	mov	r2, r0
 800b296:	4629      	mov	r1, r5
 800b298:	4620      	mov	r0, r4
 800b29a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b29e:	f000 fb2f 	bl	800b900 <_Bfree>
 800b2a2:	9b05      	ldr	r3, [sp, #20]
 800b2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a6:	9d01      	ldr	r5, [sp, #4]
 800b2a8:	ea43 0102 	orr.w	r1, r3, r2
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	d10d      	bne.n	800b2d0 <_dtoa_r+0xa80>
 800b2b4:	2b39      	cmp	r3, #57	; 0x39
 800b2b6:	d029      	beq.n	800b30c <_dtoa_r+0xabc>
 800b2b8:	f1b9 0f00 	cmp.w	r9, #0
 800b2bc:	dd01      	ble.n	800b2c2 <_dtoa_r+0xa72>
 800b2be:	9b04      	ldr	r3, [sp, #16]
 800b2c0:	3331      	adds	r3, #49	; 0x31
 800b2c2:	9a02      	ldr	r2, [sp, #8]
 800b2c4:	7013      	strb	r3, [r2, #0]
 800b2c6:	e774      	b.n	800b1b2 <_dtoa_r+0x962>
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	e7b9      	b.n	800b240 <_dtoa_r+0x9f0>
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	e7e2      	b.n	800b296 <_dtoa_r+0xa46>
 800b2d0:	f1b9 0f00 	cmp.w	r9, #0
 800b2d4:	db06      	blt.n	800b2e4 <_dtoa_r+0xa94>
 800b2d6:	9905      	ldr	r1, [sp, #20]
 800b2d8:	ea41 0909 	orr.w	r9, r1, r9
 800b2dc:	9906      	ldr	r1, [sp, #24]
 800b2de:	ea59 0101 	orrs.w	r1, r9, r1
 800b2e2:	d120      	bne.n	800b326 <_dtoa_r+0xad6>
 800b2e4:	2a00      	cmp	r2, #0
 800b2e6:	ddec      	ble.n	800b2c2 <_dtoa_r+0xa72>
 800b2e8:	4659      	mov	r1, fp
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	f000 fcd8 	bl	800bca4 <__lshift>
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4683      	mov	fp, r0
 800b2f8:	f000 fd40 	bl	800bd7c <__mcmp>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	9b01      	ldr	r3, [sp, #4]
 800b300:	dc02      	bgt.n	800b308 <_dtoa_r+0xab8>
 800b302:	d1de      	bne.n	800b2c2 <_dtoa_r+0xa72>
 800b304:	07da      	lsls	r2, r3, #31
 800b306:	d5dc      	bpl.n	800b2c2 <_dtoa_r+0xa72>
 800b308:	2b39      	cmp	r3, #57	; 0x39
 800b30a:	d1d8      	bne.n	800b2be <_dtoa_r+0xa6e>
 800b30c:	9a02      	ldr	r2, [sp, #8]
 800b30e:	2339      	movs	r3, #57	; 0x39
 800b310:	7013      	strb	r3, [r2, #0]
 800b312:	462b      	mov	r3, r5
 800b314:	461d      	mov	r5, r3
 800b316:	3b01      	subs	r3, #1
 800b318:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b31c:	2a39      	cmp	r2, #57	; 0x39
 800b31e:	d050      	beq.n	800b3c2 <_dtoa_r+0xb72>
 800b320:	3201      	adds	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
 800b324:	e745      	b.n	800b1b2 <_dtoa_r+0x962>
 800b326:	2a00      	cmp	r2, #0
 800b328:	dd03      	ble.n	800b332 <_dtoa_r+0xae2>
 800b32a:	2b39      	cmp	r3, #57	; 0x39
 800b32c:	d0ee      	beq.n	800b30c <_dtoa_r+0xabc>
 800b32e:	3301      	adds	r3, #1
 800b330:	e7c7      	b.n	800b2c2 <_dtoa_r+0xa72>
 800b332:	9a01      	ldr	r2, [sp, #4]
 800b334:	9907      	ldr	r1, [sp, #28]
 800b336:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b33a:	428a      	cmp	r2, r1
 800b33c:	d02a      	beq.n	800b394 <_dtoa_r+0xb44>
 800b33e:	4659      	mov	r1, fp
 800b340:	2300      	movs	r3, #0
 800b342:	220a      	movs	r2, #10
 800b344:	4620      	mov	r0, r4
 800b346:	f000 fafd 	bl	800b944 <__multadd>
 800b34a:	45b8      	cmp	r8, r7
 800b34c:	4683      	mov	fp, r0
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	f04f 020a 	mov.w	r2, #10
 800b356:	4641      	mov	r1, r8
 800b358:	4620      	mov	r0, r4
 800b35a:	d107      	bne.n	800b36c <_dtoa_r+0xb1c>
 800b35c:	f000 faf2 	bl	800b944 <__multadd>
 800b360:	4680      	mov	r8, r0
 800b362:	4607      	mov	r7, r0
 800b364:	9b01      	ldr	r3, [sp, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	e775      	b.n	800b258 <_dtoa_r+0xa08>
 800b36c:	f000 faea 	bl	800b944 <__multadd>
 800b370:	4639      	mov	r1, r7
 800b372:	4680      	mov	r8, r0
 800b374:	2300      	movs	r3, #0
 800b376:	220a      	movs	r2, #10
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 fae3 	bl	800b944 <__multadd>
 800b37e:	4607      	mov	r7, r0
 800b380:	e7f0      	b.n	800b364 <_dtoa_r+0xb14>
 800b382:	f1b9 0f00 	cmp.w	r9, #0
 800b386:	9a00      	ldr	r2, [sp, #0]
 800b388:	bfcc      	ite	gt
 800b38a:	464d      	movgt	r5, r9
 800b38c:	2501      	movle	r5, #1
 800b38e:	4415      	add	r5, r2
 800b390:	f04f 0800 	mov.w	r8, #0
 800b394:	4659      	mov	r1, fp
 800b396:	2201      	movs	r2, #1
 800b398:	4620      	mov	r0, r4
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	f000 fc82 	bl	800bca4 <__lshift>
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4683      	mov	fp, r0
 800b3a4:	f000 fcea 	bl	800bd7c <__mcmp>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	dcb2      	bgt.n	800b312 <_dtoa_r+0xac2>
 800b3ac:	d102      	bne.n	800b3b4 <_dtoa_r+0xb64>
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	07db      	lsls	r3, r3, #31
 800b3b2:	d4ae      	bmi.n	800b312 <_dtoa_r+0xac2>
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	461d      	mov	r5, r3
 800b3b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3bc:	2a30      	cmp	r2, #48	; 0x30
 800b3be:	d0fa      	beq.n	800b3b6 <_dtoa_r+0xb66>
 800b3c0:	e6f7      	b.n	800b1b2 <_dtoa_r+0x962>
 800b3c2:	9a00      	ldr	r2, [sp, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d1a5      	bne.n	800b314 <_dtoa_r+0xac4>
 800b3c8:	f10a 0a01 	add.w	sl, sl, #1
 800b3cc:	2331      	movs	r3, #49	; 0x31
 800b3ce:	e779      	b.n	800b2c4 <_dtoa_r+0xa74>
 800b3d0:	4b13      	ldr	r3, [pc, #76]	; (800b420 <_dtoa_r+0xbd0>)
 800b3d2:	f7ff baaf 	b.w	800a934 <_dtoa_r+0xe4>
 800b3d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f47f aa86 	bne.w	800a8ea <_dtoa_r+0x9a>
 800b3de:	4b11      	ldr	r3, [pc, #68]	; (800b424 <_dtoa_r+0xbd4>)
 800b3e0:	f7ff baa8 	b.w	800a934 <_dtoa_r+0xe4>
 800b3e4:	f1b9 0f00 	cmp.w	r9, #0
 800b3e8:	dc03      	bgt.n	800b3f2 <_dtoa_r+0xba2>
 800b3ea:	9b05      	ldr	r3, [sp, #20]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	f73f aec9 	bgt.w	800b184 <_dtoa_r+0x934>
 800b3f2:	9d00      	ldr	r5, [sp, #0]
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4658      	mov	r0, fp
 800b3f8:	f7ff f99c 	bl	800a734 <quorem>
 800b3fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b400:	f805 3b01 	strb.w	r3, [r5], #1
 800b404:	9a00      	ldr	r2, [sp, #0]
 800b406:	1aaa      	subs	r2, r5, r2
 800b408:	4591      	cmp	r9, r2
 800b40a:	ddba      	ble.n	800b382 <_dtoa_r+0xb32>
 800b40c:	4659      	mov	r1, fp
 800b40e:	2300      	movs	r3, #0
 800b410:	220a      	movs	r2, #10
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fa96 	bl	800b944 <__multadd>
 800b418:	4683      	mov	fp, r0
 800b41a:	e7eb      	b.n	800b3f4 <_dtoa_r+0xba4>
 800b41c:	0800c7b3 	.word	0x0800c7b3
 800b420:	0800c70c 	.word	0x0800c70c
 800b424:	0800c730 	.word	0x0800c730

0800b428 <__sflush_r>:
 800b428:	898a      	ldrh	r2, [r1, #12]
 800b42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42e:	4605      	mov	r5, r0
 800b430:	0710      	lsls	r0, r2, #28
 800b432:	460c      	mov	r4, r1
 800b434:	d458      	bmi.n	800b4e8 <__sflush_r+0xc0>
 800b436:	684b      	ldr	r3, [r1, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	dc05      	bgt.n	800b448 <__sflush_r+0x20>
 800b43c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dc02      	bgt.n	800b448 <__sflush_r+0x20>
 800b442:	2000      	movs	r0, #0
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b44a:	2e00      	cmp	r6, #0
 800b44c:	d0f9      	beq.n	800b442 <__sflush_r+0x1a>
 800b44e:	2300      	movs	r3, #0
 800b450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b454:	682f      	ldr	r7, [r5, #0]
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	d032      	beq.n	800b4c0 <__sflush_r+0x98>
 800b45a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	075a      	lsls	r2, r3, #29
 800b460:	d505      	bpl.n	800b46e <__sflush_r+0x46>
 800b462:	6863      	ldr	r3, [r4, #4]
 800b464:	1ac0      	subs	r0, r0, r3
 800b466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b468:	b10b      	cbz	r3, 800b46e <__sflush_r+0x46>
 800b46a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b46c:	1ac0      	subs	r0, r0, r3
 800b46e:	2300      	movs	r3, #0
 800b470:	4602      	mov	r2, r0
 800b472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b474:	6a21      	ldr	r1, [r4, #32]
 800b476:	4628      	mov	r0, r5
 800b478:	47b0      	blx	r6
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	d106      	bne.n	800b48e <__sflush_r+0x66>
 800b480:	6829      	ldr	r1, [r5, #0]
 800b482:	291d      	cmp	r1, #29
 800b484:	d82c      	bhi.n	800b4e0 <__sflush_r+0xb8>
 800b486:	4a2a      	ldr	r2, [pc, #168]	; (800b530 <__sflush_r+0x108>)
 800b488:	40ca      	lsrs	r2, r1
 800b48a:	07d6      	lsls	r6, r2, #31
 800b48c:	d528      	bpl.n	800b4e0 <__sflush_r+0xb8>
 800b48e:	2200      	movs	r2, #0
 800b490:	6062      	str	r2, [r4, #4]
 800b492:	04d9      	lsls	r1, r3, #19
 800b494:	6922      	ldr	r2, [r4, #16]
 800b496:	6022      	str	r2, [r4, #0]
 800b498:	d504      	bpl.n	800b4a4 <__sflush_r+0x7c>
 800b49a:	1c42      	adds	r2, r0, #1
 800b49c:	d101      	bne.n	800b4a2 <__sflush_r+0x7a>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	b903      	cbnz	r3, 800b4a4 <__sflush_r+0x7c>
 800b4a2:	6560      	str	r0, [r4, #84]	; 0x54
 800b4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4a6:	602f      	str	r7, [r5, #0]
 800b4a8:	2900      	cmp	r1, #0
 800b4aa:	d0ca      	beq.n	800b442 <__sflush_r+0x1a>
 800b4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4b0:	4299      	cmp	r1, r3
 800b4b2:	d002      	beq.n	800b4ba <__sflush_r+0x92>
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f000 fd71 	bl	800bf9c <_free_r>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	6360      	str	r0, [r4, #52]	; 0x34
 800b4be:	e7c1      	b.n	800b444 <__sflush_r+0x1c>
 800b4c0:	6a21      	ldr	r1, [r4, #32]
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b0      	blx	r6
 800b4c8:	1c41      	adds	r1, r0, #1
 800b4ca:	d1c7      	bne.n	800b45c <__sflush_r+0x34>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0c4      	beq.n	800b45c <__sflush_r+0x34>
 800b4d2:	2b1d      	cmp	r3, #29
 800b4d4:	d001      	beq.n	800b4da <__sflush_r+0xb2>
 800b4d6:	2b16      	cmp	r3, #22
 800b4d8:	d101      	bne.n	800b4de <__sflush_r+0xb6>
 800b4da:	602f      	str	r7, [r5, #0]
 800b4dc:	e7b1      	b.n	800b442 <__sflush_r+0x1a>
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	e7ad      	b.n	800b444 <__sflush_r+0x1c>
 800b4e8:	690f      	ldr	r7, [r1, #16]
 800b4ea:	2f00      	cmp	r7, #0
 800b4ec:	d0a9      	beq.n	800b442 <__sflush_r+0x1a>
 800b4ee:	0793      	lsls	r3, r2, #30
 800b4f0:	680e      	ldr	r6, [r1, #0]
 800b4f2:	bf08      	it	eq
 800b4f4:	694b      	ldreq	r3, [r1, #20]
 800b4f6:	600f      	str	r7, [r1, #0]
 800b4f8:	bf18      	it	ne
 800b4fa:	2300      	movne	r3, #0
 800b4fc:	eba6 0807 	sub.w	r8, r6, r7
 800b500:	608b      	str	r3, [r1, #8]
 800b502:	f1b8 0f00 	cmp.w	r8, #0
 800b506:	dd9c      	ble.n	800b442 <__sflush_r+0x1a>
 800b508:	6a21      	ldr	r1, [r4, #32]
 800b50a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b50c:	4643      	mov	r3, r8
 800b50e:	463a      	mov	r2, r7
 800b510:	4628      	mov	r0, r5
 800b512:	47b0      	blx	r6
 800b514:	2800      	cmp	r0, #0
 800b516:	dc06      	bgt.n	800b526 <__sflush_r+0xfe>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	f04f 30ff 	mov.w	r0, #4294967295
 800b524:	e78e      	b.n	800b444 <__sflush_r+0x1c>
 800b526:	4407      	add	r7, r0
 800b528:	eba8 0800 	sub.w	r8, r8, r0
 800b52c:	e7e9      	b.n	800b502 <__sflush_r+0xda>
 800b52e:	bf00      	nop
 800b530:	20400001 	.word	0x20400001

0800b534 <_fflush_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	690b      	ldr	r3, [r1, #16]
 800b538:	4605      	mov	r5, r0
 800b53a:	460c      	mov	r4, r1
 800b53c:	b913      	cbnz	r3, 800b544 <_fflush_r+0x10>
 800b53e:	2500      	movs	r5, #0
 800b540:	4628      	mov	r0, r5
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	b118      	cbz	r0, 800b54e <_fflush_r+0x1a>
 800b546:	6983      	ldr	r3, [r0, #24]
 800b548:	b90b      	cbnz	r3, 800b54e <_fflush_r+0x1a>
 800b54a:	f000 f887 	bl	800b65c <__sinit>
 800b54e:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <_fflush_r+0x6c>)
 800b550:	429c      	cmp	r4, r3
 800b552:	d11b      	bne.n	800b58c <_fflush_r+0x58>
 800b554:	686c      	ldr	r4, [r5, #4]
 800b556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d0ef      	beq.n	800b53e <_fflush_r+0xa>
 800b55e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b560:	07d0      	lsls	r0, r2, #31
 800b562:	d404      	bmi.n	800b56e <_fflush_r+0x3a>
 800b564:	0599      	lsls	r1, r3, #22
 800b566:	d402      	bmi.n	800b56e <_fflush_r+0x3a>
 800b568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b56a:	f000 f91a 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800b56e:	4628      	mov	r0, r5
 800b570:	4621      	mov	r1, r4
 800b572:	f7ff ff59 	bl	800b428 <__sflush_r>
 800b576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b578:	07da      	lsls	r2, r3, #31
 800b57a:	4605      	mov	r5, r0
 800b57c:	d4e0      	bmi.n	800b540 <_fflush_r+0xc>
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	059b      	lsls	r3, r3, #22
 800b582:	d4dd      	bmi.n	800b540 <_fflush_r+0xc>
 800b584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b586:	f000 f90d 	bl	800b7a4 <__retarget_lock_release_recursive>
 800b58a:	e7d9      	b.n	800b540 <_fflush_r+0xc>
 800b58c:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <_fflush_r+0x70>)
 800b58e:	429c      	cmp	r4, r3
 800b590:	d101      	bne.n	800b596 <_fflush_r+0x62>
 800b592:	68ac      	ldr	r4, [r5, #8]
 800b594:	e7df      	b.n	800b556 <_fflush_r+0x22>
 800b596:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <_fflush_r+0x74>)
 800b598:	429c      	cmp	r4, r3
 800b59a:	bf08      	it	eq
 800b59c:	68ec      	ldreq	r4, [r5, #12]
 800b59e:	e7da      	b.n	800b556 <_fflush_r+0x22>
 800b5a0:	0800c7e4 	.word	0x0800c7e4
 800b5a4:	0800c804 	.word	0x0800c804
 800b5a8:	0800c7c4 	.word	0x0800c7c4

0800b5ac <std>:
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ba:	6083      	str	r3, [r0, #8]
 800b5bc:	8181      	strh	r1, [r0, #12]
 800b5be:	6643      	str	r3, [r0, #100]	; 0x64
 800b5c0:	81c2      	strh	r2, [r0, #14]
 800b5c2:	6183      	str	r3, [r0, #24]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	305c      	adds	r0, #92	; 0x5c
 800b5ca:	f7fe fa9b 	bl	8009b04 <memset>
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <std+0x38>)
 800b5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b5d2:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <std+0x3c>)
 800b5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <std+0x40>)
 800b5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5da:	4b05      	ldr	r3, [pc, #20]	; (800b5f0 <std+0x44>)
 800b5dc:	6224      	str	r4, [r4, #32]
 800b5de:	6323      	str	r3, [r4, #48]	; 0x30
 800b5e0:	bd10      	pop	{r4, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0800c3c5 	.word	0x0800c3c5
 800b5e8:	0800c3e7 	.word	0x0800c3e7
 800b5ec:	0800c41f 	.word	0x0800c41f
 800b5f0:	0800c443 	.word	0x0800c443

0800b5f4 <_cleanup_r>:
 800b5f4:	4901      	ldr	r1, [pc, #4]	; (800b5fc <_cleanup_r+0x8>)
 800b5f6:	f000 b8af 	b.w	800b758 <_fwalk_reent>
 800b5fa:	bf00      	nop
 800b5fc:	0800b535 	.word	0x0800b535

0800b600 <__sfmoreglue>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	1e4a      	subs	r2, r1, #1
 800b604:	2568      	movs	r5, #104	; 0x68
 800b606:	4355      	muls	r5, r2
 800b608:	460e      	mov	r6, r1
 800b60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b60e:	f000 fd15 	bl	800c03c <_malloc_r>
 800b612:	4604      	mov	r4, r0
 800b614:	b140      	cbz	r0, 800b628 <__sfmoreglue+0x28>
 800b616:	2100      	movs	r1, #0
 800b618:	e9c0 1600 	strd	r1, r6, [r0]
 800b61c:	300c      	adds	r0, #12
 800b61e:	60a0      	str	r0, [r4, #8]
 800b620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b624:	f7fe fa6e 	bl	8009b04 <memset>
 800b628:	4620      	mov	r0, r4
 800b62a:	bd70      	pop	{r4, r5, r6, pc}

0800b62c <__sfp_lock_acquire>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__sfp_lock_acquire+0x8>)
 800b62e:	f000 b8b8 	b.w	800b7a2 <__retarget_lock_acquire_recursive>
 800b632:	bf00      	nop
 800b634:	200009b4 	.word	0x200009b4

0800b638 <__sfp_lock_release>:
 800b638:	4801      	ldr	r0, [pc, #4]	; (800b640 <__sfp_lock_release+0x8>)
 800b63a:	f000 b8b3 	b.w	800b7a4 <__retarget_lock_release_recursive>
 800b63e:	bf00      	nop
 800b640:	200009b4 	.word	0x200009b4

0800b644 <__sinit_lock_acquire>:
 800b644:	4801      	ldr	r0, [pc, #4]	; (800b64c <__sinit_lock_acquire+0x8>)
 800b646:	f000 b8ac 	b.w	800b7a2 <__retarget_lock_acquire_recursive>
 800b64a:	bf00      	nop
 800b64c:	200009af 	.word	0x200009af

0800b650 <__sinit_lock_release>:
 800b650:	4801      	ldr	r0, [pc, #4]	; (800b658 <__sinit_lock_release+0x8>)
 800b652:	f000 b8a7 	b.w	800b7a4 <__retarget_lock_release_recursive>
 800b656:	bf00      	nop
 800b658:	200009af 	.word	0x200009af

0800b65c <__sinit>:
 800b65c:	b510      	push	{r4, lr}
 800b65e:	4604      	mov	r4, r0
 800b660:	f7ff fff0 	bl	800b644 <__sinit_lock_acquire>
 800b664:	69a3      	ldr	r3, [r4, #24]
 800b666:	b11b      	cbz	r3, 800b670 <__sinit+0x14>
 800b668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b66c:	f7ff bff0 	b.w	800b650 <__sinit_lock_release>
 800b670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b674:	6523      	str	r3, [r4, #80]	; 0x50
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <__sinit+0x68>)
 800b678:	4a13      	ldr	r2, [pc, #76]	; (800b6c8 <__sinit+0x6c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b67e:	42a3      	cmp	r3, r4
 800b680:	bf04      	itt	eq
 800b682:	2301      	moveq	r3, #1
 800b684:	61a3      	streq	r3, [r4, #24]
 800b686:	4620      	mov	r0, r4
 800b688:	f000 f820 	bl	800b6cc <__sfp>
 800b68c:	6060      	str	r0, [r4, #4]
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 f81c 	bl	800b6cc <__sfp>
 800b694:	60a0      	str	r0, [r4, #8]
 800b696:	4620      	mov	r0, r4
 800b698:	f000 f818 	bl	800b6cc <__sfp>
 800b69c:	2200      	movs	r2, #0
 800b69e:	60e0      	str	r0, [r4, #12]
 800b6a0:	2104      	movs	r1, #4
 800b6a2:	6860      	ldr	r0, [r4, #4]
 800b6a4:	f7ff ff82 	bl	800b5ac <std>
 800b6a8:	68a0      	ldr	r0, [r4, #8]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	2109      	movs	r1, #9
 800b6ae:	f7ff ff7d 	bl	800b5ac <std>
 800b6b2:	68e0      	ldr	r0, [r4, #12]
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	2112      	movs	r1, #18
 800b6b8:	f7ff ff78 	bl	800b5ac <std>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	61a3      	str	r3, [r4, #24]
 800b6c0:	e7d2      	b.n	800b668 <__sinit+0xc>
 800b6c2:	bf00      	nop
 800b6c4:	0800c6f8 	.word	0x0800c6f8
 800b6c8:	0800b5f5 	.word	0x0800b5f5

0800b6cc <__sfp>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	f7ff ffac 	bl	800b62c <__sfp_lock_acquire>
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <__sfp+0x84>)
 800b6d6:	681e      	ldr	r6, [r3, #0]
 800b6d8:	69b3      	ldr	r3, [r6, #24]
 800b6da:	b913      	cbnz	r3, 800b6e2 <__sfp+0x16>
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff ffbd 	bl	800b65c <__sinit>
 800b6e2:	3648      	adds	r6, #72	; 0x48
 800b6e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	d503      	bpl.n	800b6f4 <__sfp+0x28>
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	b30b      	cbz	r3, 800b734 <__sfp+0x68>
 800b6f0:	6836      	ldr	r6, [r6, #0]
 800b6f2:	e7f7      	b.n	800b6e4 <__sfp+0x18>
 800b6f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6f8:	b9d5      	cbnz	r5, 800b730 <__sfp+0x64>
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <__sfp+0x88>)
 800b6fc:	60e3      	str	r3, [r4, #12]
 800b6fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b702:	6665      	str	r5, [r4, #100]	; 0x64
 800b704:	f000 f84c 	bl	800b7a0 <__retarget_lock_init_recursive>
 800b708:	f7ff ff96 	bl	800b638 <__sfp_lock_release>
 800b70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b714:	6025      	str	r5, [r4, #0]
 800b716:	61a5      	str	r5, [r4, #24]
 800b718:	2208      	movs	r2, #8
 800b71a:	4629      	mov	r1, r5
 800b71c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b720:	f7fe f9f0 	bl	8009b04 <memset>
 800b724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b72c:	4620      	mov	r0, r4
 800b72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b730:	3468      	adds	r4, #104	; 0x68
 800b732:	e7d9      	b.n	800b6e8 <__sfp+0x1c>
 800b734:	2104      	movs	r1, #4
 800b736:	4638      	mov	r0, r7
 800b738:	f7ff ff62 	bl	800b600 <__sfmoreglue>
 800b73c:	4604      	mov	r4, r0
 800b73e:	6030      	str	r0, [r6, #0]
 800b740:	2800      	cmp	r0, #0
 800b742:	d1d5      	bne.n	800b6f0 <__sfp+0x24>
 800b744:	f7ff ff78 	bl	800b638 <__sfp_lock_release>
 800b748:	230c      	movs	r3, #12
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	e7ee      	b.n	800b72c <__sfp+0x60>
 800b74e:	bf00      	nop
 800b750:	0800c6f8 	.word	0x0800c6f8
 800b754:	ffff0001 	.word	0xffff0001

0800b758 <_fwalk_reent>:
 800b758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b75c:	4606      	mov	r6, r0
 800b75e:	4688      	mov	r8, r1
 800b760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b764:	2700      	movs	r7, #0
 800b766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b76a:	f1b9 0901 	subs.w	r9, r9, #1
 800b76e:	d505      	bpl.n	800b77c <_fwalk_reent+0x24>
 800b770:	6824      	ldr	r4, [r4, #0]
 800b772:	2c00      	cmp	r4, #0
 800b774:	d1f7      	bne.n	800b766 <_fwalk_reent+0xe>
 800b776:	4638      	mov	r0, r7
 800b778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d907      	bls.n	800b792 <_fwalk_reent+0x3a>
 800b782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b786:	3301      	adds	r3, #1
 800b788:	d003      	beq.n	800b792 <_fwalk_reent+0x3a>
 800b78a:	4629      	mov	r1, r5
 800b78c:	4630      	mov	r0, r6
 800b78e:	47c0      	blx	r8
 800b790:	4307      	orrs	r7, r0
 800b792:	3568      	adds	r5, #104	; 0x68
 800b794:	e7e9      	b.n	800b76a <_fwalk_reent+0x12>
	...

0800b798 <_localeconv_r>:
 800b798:	4800      	ldr	r0, [pc, #0]	; (800b79c <_localeconv_r+0x4>)
 800b79a:	4770      	bx	lr
 800b79c:	2000041c 	.word	0x2000041c

0800b7a0 <__retarget_lock_init_recursive>:
 800b7a0:	4770      	bx	lr

0800b7a2 <__retarget_lock_acquire_recursive>:
 800b7a2:	4770      	bx	lr

0800b7a4 <__retarget_lock_release_recursive>:
 800b7a4:	4770      	bx	lr

0800b7a6 <__swhatbuf_r>:
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	460e      	mov	r6, r1
 800b7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	b096      	sub	sp, #88	; 0x58
 800b7b2:	4614      	mov	r4, r2
 800b7b4:	461d      	mov	r5, r3
 800b7b6:	da07      	bge.n	800b7c8 <__swhatbuf_r+0x22>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	602b      	str	r3, [r5, #0]
 800b7bc:	89b3      	ldrh	r3, [r6, #12]
 800b7be:	061a      	lsls	r2, r3, #24
 800b7c0:	d410      	bmi.n	800b7e4 <__swhatbuf_r+0x3e>
 800b7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c6:	e00e      	b.n	800b7e6 <__swhatbuf_r+0x40>
 800b7c8:	466a      	mov	r2, sp
 800b7ca:	f000 fe91 	bl	800c4f0 <_fstat_r>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	dbf2      	blt.n	800b7b8 <__swhatbuf_r+0x12>
 800b7d2:	9a01      	ldr	r2, [sp, #4]
 800b7d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7dc:	425a      	negs	r2, r3
 800b7de:	415a      	adcs	r2, r3
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	e7ee      	b.n	800b7c2 <__swhatbuf_r+0x1c>
 800b7e4:	2340      	movs	r3, #64	; 0x40
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	b016      	add	sp, #88	; 0x58
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7f0 <__smakebuf_r>:
 800b7f0:	898b      	ldrh	r3, [r1, #12]
 800b7f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7f4:	079d      	lsls	r5, r3, #30
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	d507      	bpl.n	800b80c <__smakebuf_r+0x1c>
 800b7fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	6123      	str	r3, [r4, #16]
 800b804:	2301      	movs	r3, #1
 800b806:	6163      	str	r3, [r4, #20]
 800b808:	b002      	add	sp, #8
 800b80a:	bd70      	pop	{r4, r5, r6, pc}
 800b80c:	ab01      	add	r3, sp, #4
 800b80e:	466a      	mov	r2, sp
 800b810:	f7ff ffc9 	bl	800b7a6 <__swhatbuf_r>
 800b814:	9900      	ldr	r1, [sp, #0]
 800b816:	4605      	mov	r5, r0
 800b818:	4630      	mov	r0, r6
 800b81a:	f000 fc0f 	bl	800c03c <_malloc_r>
 800b81e:	b948      	cbnz	r0, 800b834 <__smakebuf_r+0x44>
 800b820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b824:	059a      	lsls	r2, r3, #22
 800b826:	d4ef      	bmi.n	800b808 <__smakebuf_r+0x18>
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	f043 0302 	orr.w	r3, r3, #2
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	e7e3      	b.n	800b7fc <__smakebuf_r+0xc>
 800b834:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <__smakebuf_r+0x7c>)
 800b836:	62b3      	str	r3, [r6, #40]	; 0x28
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	6020      	str	r0, [r4, #0]
 800b83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	9b00      	ldr	r3, [sp, #0]
 800b844:	6163      	str	r3, [r4, #20]
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	6120      	str	r0, [r4, #16]
 800b84a:	b15b      	cbz	r3, 800b864 <__smakebuf_r+0x74>
 800b84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b850:	4630      	mov	r0, r6
 800b852:	f000 fe5f 	bl	800c514 <_isatty_r>
 800b856:	b128      	cbz	r0, 800b864 <__smakebuf_r+0x74>
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	81a3      	strh	r3, [r4, #12]
 800b864:	89a0      	ldrh	r0, [r4, #12]
 800b866:	4305      	orrs	r5, r0
 800b868:	81a5      	strh	r5, [r4, #12]
 800b86a:	e7cd      	b.n	800b808 <__smakebuf_r+0x18>
 800b86c:	0800b5f5 	.word	0x0800b5f5

0800b870 <malloc>:
 800b870:	4b02      	ldr	r3, [pc, #8]	; (800b87c <malloc+0xc>)
 800b872:	4601      	mov	r1, r0
 800b874:	6818      	ldr	r0, [r3, #0]
 800b876:	f000 bbe1 	b.w	800c03c <_malloc_r>
 800b87a:	bf00      	nop
 800b87c:	200002c8 	.word	0x200002c8

0800b880 <_Balloc>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b884:	4604      	mov	r4, r0
 800b886:	460d      	mov	r5, r1
 800b888:	b976      	cbnz	r6, 800b8a8 <_Balloc+0x28>
 800b88a:	2010      	movs	r0, #16
 800b88c:	f7ff fff0 	bl	800b870 <malloc>
 800b890:	4602      	mov	r2, r0
 800b892:	6260      	str	r0, [r4, #36]	; 0x24
 800b894:	b920      	cbnz	r0, 800b8a0 <_Balloc+0x20>
 800b896:	4b18      	ldr	r3, [pc, #96]	; (800b8f8 <_Balloc+0x78>)
 800b898:	4818      	ldr	r0, [pc, #96]	; (800b8fc <_Balloc+0x7c>)
 800b89a:	2166      	movs	r1, #102	; 0x66
 800b89c:	f000 fde8 	bl	800c470 <__assert_func>
 800b8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8a4:	6006      	str	r6, [r0, #0]
 800b8a6:	60c6      	str	r6, [r0, #12]
 800b8a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8aa:	68f3      	ldr	r3, [r6, #12]
 800b8ac:	b183      	cbz	r3, 800b8d0 <_Balloc+0x50>
 800b8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8b6:	b9b8      	cbnz	r0, 800b8e8 <_Balloc+0x68>
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	fa01 f605 	lsl.w	r6, r1, r5
 800b8be:	1d72      	adds	r2, r6, #5
 800b8c0:	0092      	lsls	r2, r2, #2
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 fb5a 	bl	800bf7c <_calloc_r>
 800b8c8:	b160      	cbz	r0, 800b8e4 <_Balloc+0x64>
 800b8ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ce:	e00e      	b.n	800b8ee <_Balloc+0x6e>
 800b8d0:	2221      	movs	r2, #33	; 0x21
 800b8d2:	2104      	movs	r1, #4
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fb51 	bl	800bf7c <_calloc_r>
 800b8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8dc:	60f0      	str	r0, [r6, #12]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e4      	bne.n	800b8ae <_Balloc+0x2e>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	6802      	ldr	r2, [r0, #0]
 800b8ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8f4:	e7f7      	b.n	800b8e6 <_Balloc+0x66>
 800b8f6:	bf00      	nop
 800b8f8:	0800c73d 	.word	0x0800c73d
 800b8fc:	0800c824 	.word	0x0800c824

0800b900 <_Bfree>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b904:	4605      	mov	r5, r0
 800b906:	460c      	mov	r4, r1
 800b908:	b976      	cbnz	r6, 800b928 <_Bfree+0x28>
 800b90a:	2010      	movs	r0, #16
 800b90c:	f7ff ffb0 	bl	800b870 <malloc>
 800b910:	4602      	mov	r2, r0
 800b912:	6268      	str	r0, [r5, #36]	; 0x24
 800b914:	b920      	cbnz	r0, 800b920 <_Bfree+0x20>
 800b916:	4b09      	ldr	r3, [pc, #36]	; (800b93c <_Bfree+0x3c>)
 800b918:	4809      	ldr	r0, [pc, #36]	; (800b940 <_Bfree+0x40>)
 800b91a:	218a      	movs	r1, #138	; 0x8a
 800b91c:	f000 fda8 	bl	800c470 <__assert_func>
 800b920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b924:	6006      	str	r6, [r0, #0]
 800b926:	60c6      	str	r6, [r0, #12]
 800b928:	b13c      	cbz	r4, 800b93a <_Bfree+0x3a>
 800b92a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b92c:	6862      	ldr	r2, [r4, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b934:	6021      	str	r1, [r4, #0]
 800b936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b93a:	bd70      	pop	{r4, r5, r6, pc}
 800b93c:	0800c73d 	.word	0x0800c73d
 800b940:	0800c824 	.word	0x0800c824

0800b944 <__multadd>:
 800b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b948:	690e      	ldr	r6, [r1, #16]
 800b94a:	4607      	mov	r7, r0
 800b94c:	4698      	mov	r8, r3
 800b94e:	460c      	mov	r4, r1
 800b950:	f101 0014 	add.w	r0, r1, #20
 800b954:	2300      	movs	r3, #0
 800b956:	6805      	ldr	r5, [r0, #0]
 800b958:	b2a9      	uxth	r1, r5
 800b95a:	fb02 8101 	mla	r1, r2, r1, r8
 800b95e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b962:	0c2d      	lsrs	r5, r5, #16
 800b964:	fb02 c505 	mla	r5, r2, r5, ip
 800b968:	b289      	uxth	r1, r1
 800b96a:	3301      	adds	r3, #1
 800b96c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b970:	429e      	cmp	r6, r3
 800b972:	f840 1b04 	str.w	r1, [r0], #4
 800b976:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b97a:	dcec      	bgt.n	800b956 <__multadd+0x12>
 800b97c:	f1b8 0f00 	cmp.w	r8, #0
 800b980:	d022      	beq.n	800b9c8 <__multadd+0x84>
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	42b3      	cmp	r3, r6
 800b986:	dc19      	bgt.n	800b9bc <__multadd+0x78>
 800b988:	6861      	ldr	r1, [r4, #4]
 800b98a:	4638      	mov	r0, r7
 800b98c:	3101      	adds	r1, #1
 800b98e:	f7ff ff77 	bl	800b880 <_Balloc>
 800b992:	4605      	mov	r5, r0
 800b994:	b928      	cbnz	r0, 800b9a2 <__multadd+0x5e>
 800b996:	4602      	mov	r2, r0
 800b998:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <__multadd+0x8c>)
 800b99a:	480e      	ldr	r0, [pc, #56]	; (800b9d4 <__multadd+0x90>)
 800b99c:	21b5      	movs	r1, #181	; 0xb5
 800b99e:	f000 fd67 	bl	800c470 <__assert_func>
 800b9a2:	6922      	ldr	r2, [r4, #16]
 800b9a4:	3202      	adds	r2, #2
 800b9a6:	f104 010c 	add.w	r1, r4, #12
 800b9aa:	0092      	lsls	r2, r2, #2
 800b9ac:	300c      	adds	r0, #12
 800b9ae:	f7fe f89b 	bl	8009ae8 <memcpy>
 800b9b2:	4621      	mov	r1, r4
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	f7ff ffa3 	bl	800b900 <_Bfree>
 800b9ba:	462c      	mov	r4, r5
 800b9bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b9c0:	3601      	adds	r6, #1
 800b9c2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b9c6:	6126      	str	r6, [r4, #16]
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ce:	bf00      	nop
 800b9d0:	0800c7b3 	.word	0x0800c7b3
 800b9d4:	0800c824 	.word	0x0800c824

0800b9d8 <__hi0bits>:
 800b9d8:	0c03      	lsrs	r3, r0, #16
 800b9da:	041b      	lsls	r3, r3, #16
 800b9dc:	b9d3      	cbnz	r3, 800ba14 <__hi0bits+0x3c>
 800b9de:	0400      	lsls	r0, r0, #16
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9e6:	bf04      	itt	eq
 800b9e8:	0200      	lsleq	r0, r0, #8
 800b9ea:	3308      	addeq	r3, #8
 800b9ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9f0:	bf04      	itt	eq
 800b9f2:	0100      	lsleq	r0, r0, #4
 800b9f4:	3304      	addeq	r3, #4
 800b9f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9fa:	bf04      	itt	eq
 800b9fc:	0080      	lsleq	r0, r0, #2
 800b9fe:	3302      	addeq	r3, #2
 800ba00:	2800      	cmp	r0, #0
 800ba02:	db05      	blt.n	800ba10 <__hi0bits+0x38>
 800ba04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba08:	f103 0301 	add.w	r3, r3, #1
 800ba0c:	bf08      	it	eq
 800ba0e:	2320      	moveq	r3, #32
 800ba10:	4618      	mov	r0, r3
 800ba12:	4770      	bx	lr
 800ba14:	2300      	movs	r3, #0
 800ba16:	e7e4      	b.n	800b9e2 <__hi0bits+0xa>

0800ba18 <__lo0bits>:
 800ba18:	6803      	ldr	r3, [r0, #0]
 800ba1a:	f013 0207 	ands.w	r2, r3, #7
 800ba1e:	4601      	mov	r1, r0
 800ba20:	d00b      	beq.n	800ba3a <__lo0bits+0x22>
 800ba22:	07da      	lsls	r2, r3, #31
 800ba24:	d424      	bmi.n	800ba70 <__lo0bits+0x58>
 800ba26:	0798      	lsls	r0, r3, #30
 800ba28:	bf49      	itett	mi
 800ba2a:	085b      	lsrmi	r3, r3, #1
 800ba2c:	089b      	lsrpl	r3, r3, #2
 800ba2e:	2001      	movmi	r0, #1
 800ba30:	600b      	strmi	r3, [r1, #0]
 800ba32:	bf5c      	itt	pl
 800ba34:	600b      	strpl	r3, [r1, #0]
 800ba36:	2002      	movpl	r0, #2
 800ba38:	4770      	bx	lr
 800ba3a:	b298      	uxth	r0, r3
 800ba3c:	b9b0      	cbnz	r0, 800ba6c <__lo0bits+0x54>
 800ba3e:	0c1b      	lsrs	r3, r3, #16
 800ba40:	2010      	movs	r0, #16
 800ba42:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba46:	bf04      	itt	eq
 800ba48:	0a1b      	lsreq	r3, r3, #8
 800ba4a:	3008      	addeq	r0, #8
 800ba4c:	071a      	lsls	r2, r3, #28
 800ba4e:	bf04      	itt	eq
 800ba50:	091b      	lsreq	r3, r3, #4
 800ba52:	3004      	addeq	r0, #4
 800ba54:	079a      	lsls	r2, r3, #30
 800ba56:	bf04      	itt	eq
 800ba58:	089b      	lsreq	r3, r3, #2
 800ba5a:	3002      	addeq	r0, #2
 800ba5c:	07da      	lsls	r2, r3, #31
 800ba5e:	d403      	bmi.n	800ba68 <__lo0bits+0x50>
 800ba60:	085b      	lsrs	r3, r3, #1
 800ba62:	f100 0001 	add.w	r0, r0, #1
 800ba66:	d005      	beq.n	800ba74 <__lo0bits+0x5c>
 800ba68:	600b      	str	r3, [r1, #0]
 800ba6a:	4770      	bx	lr
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	e7e8      	b.n	800ba42 <__lo0bits+0x2a>
 800ba70:	2000      	movs	r0, #0
 800ba72:	4770      	bx	lr
 800ba74:	2020      	movs	r0, #32
 800ba76:	4770      	bx	lr

0800ba78 <__i2b>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	f7ff feff 	bl	800b880 <_Balloc>
 800ba82:	4602      	mov	r2, r0
 800ba84:	b928      	cbnz	r0, 800ba92 <__i2b+0x1a>
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <__i2b+0x24>)
 800ba88:	4805      	ldr	r0, [pc, #20]	; (800baa0 <__i2b+0x28>)
 800ba8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba8e:	f000 fcef 	bl	800c470 <__assert_func>
 800ba92:	2301      	movs	r3, #1
 800ba94:	6144      	str	r4, [r0, #20]
 800ba96:	6103      	str	r3, [r0, #16]
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0800c7b3 	.word	0x0800c7b3
 800baa0:	0800c824 	.word	0x0800c824

0800baa4 <__multiply>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	4614      	mov	r4, r2
 800baaa:	690a      	ldr	r2, [r1, #16]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	429a      	cmp	r2, r3
 800bab0:	bfb8      	it	lt
 800bab2:	460b      	movlt	r3, r1
 800bab4:	460d      	mov	r5, r1
 800bab6:	bfbc      	itt	lt
 800bab8:	4625      	movlt	r5, r4
 800baba:	461c      	movlt	r4, r3
 800babc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bac0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bac4:	68ab      	ldr	r3, [r5, #8]
 800bac6:	6869      	ldr	r1, [r5, #4]
 800bac8:	eb0a 0709 	add.w	r7, sl, r9
 800bacc:	42bb      	cmp	r3, r7
 800bace:	b085      	sub	sp, #20
 800bad0:	bfb8      	it	lt
 800bad2:	3101      	addlt	r1, #1
 800bad4:	f7ff fed4 	bl	800b880 <_Balloc>
 800bad8:	b930      	cbnz	r0, 800bae8 <__multiply+0x44>
 800bada:	4602      	mov	r2, r0
 800badc:	4b42      	ldr	r3, [pc, #264]	; (800bbe8 <__multiply+0x144>)
 800bade:	4843      	ldr	r0, [pc, #268]	; (800bbec <__multiply+0x148>)
 800bae0:	f240 115d 	movw	r1, #349	; 0x15d
 800bae4:	f000 fcc4 	bl	800c470 <__assert_func>
 800bae8:	f100 0614 	add.w	r6, r0, #20
 800baec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800baf0:	4633      	mov	r3, r6
 800baf2:	2200      	movs	r2, #0
 800baf4:	4543      	cmp	r3, r8
 800baf6:	d31e      	bcc.n	800bb36 <__multiply+0x92>
 800baf8:	f105 0c14 	add.w	ip, r5, #20
 800bafc:	f104 0314 	add.w	r3, r4, #20
 800bb00:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bb04:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bb08:	9202      	str	r2, [sp, #8]
 800bb0a:	ebac 0205 	sub.w	r2, ip, r5
 800bb0e:	3a15      	subs	r2, #21
 800bb10:	f022 0203 	bic.w	r2, r2, #3
 800bb14:	3204      	adds	r2, #4
 800bb16:	f105 0115 	add.w	r1, r5, #21
 800bb1a:	458c      	cmp	ip, r1
 800bb1c:	bf38      	it	cc
 800bb1e:	2204      	movcc	r2, #4
 800bb20:	9201      	str	r2, [sp, #4]
 800bb22:	9a02      	ldr	r2, [sp, #8]
 800bb24:	9303      	str	r3, [sp, #12]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d808      	bhi.n	800bb3c <__multiply+0x98>
 800bb2a:	2f00      	cmp	r7, #0
 800bb2c:	dc55      	bgt.n	800bbda <__multiply+0x136>
 800bb2e:	6107      	str	r7, [r0, #16]
 800bb30:	b005      	add	sp, #20
 800bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	f843 2b04 	str.w	r2, [r3], #4
 800bb3a:	e7db      	b.n	800baf4 <__multiply+0x50>
 800bb3c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb40:	f1ba 0f00 	cmp.w	sl, #0
 800bb44:	d020      	beq.n	800bb88 <__multiply+0xe4>
 800bb46:	f105 0e14 	add.w	lr, r5, #20
 800bb4a:	46b1      	mov	r9, r6
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bb52:	f8d9 b000 	ldr.w	fp, [r9]
 800bb56:	b2a1      	uxth	r1, r4
 800bb58:	fa1f fb8b 	uxth.w	fp, fp
 800bb5c:	fb0a b101 	mla	r1, sl, r1, fp
 800bb60:	4411      	add	r1, r2
 800bb62:	f8d9 2000 	ldr.w	r2, [r9]
 800bb66:	0c24      	lsrs	r4, r4, #16
 800bb68:	0c12      	lsrs	r2, r2, #16
 800bb6a:	fb0a 2404 	mla	r4, sl, r4, r2
 800bb6e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bb72:	b289      	uxth	r1, r1
 800bb74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb78:	45f4      	cmp	ip, lr
 800bb7a:	f849 1b04 	str.w	r1, [r9], #4
 800bb7e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb82:	d8e4      	bhi.n	800bb4e <__multiply+0xaa>
 800bb84:	9901      	ldr	r1, [sp, #4]
 800bb86:	5072      	str	r2, [r6, r1]
 800bb88:	9a03      	ldr	r2, [sp, #12]
 800bb8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	f1b9 0f00 	cmp.w	r9, #0
 800bb94:	d01f      	beq.n	800bbd6 <__multiply+0x132>
 800bb96:	6834      	ldr	r4, [r6, #0]
 800bb98:	f105 0114 	add.w	r1, r5, #20
 800bb9c:	46b6      	mov	lr, r6
 800bb9e:	f04f 0a00 	mov.w	sl, #0
 800bba2:	880a      	ldrh	r2, [r1, #0]
 800bba4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bba8:	fb09 b202 	mla	r2, r9, r2, fp
 800bbac:	4492      	add	sl, r2
 800bbae:	b2a4      	uxth	r4, r4
 800bbb0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bbb4:	f84e 4b04 	str.w	r4, [lr], #4
 800bbb8:	f851 4b04 	ldr.w	r4, [r1], #4
 800bbbc:	f8be 2000 	ldrh.w	r2, [lr]
 800bbc0:	0c24      	lsrs	r4, r4, #16
 800bbc2:	fb09 2404 	mla	r4, r9, r4, r2
 800bbc6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bbca:	458c      	cmp	ip, r1
 800bbcc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bbd0:	d8e7      	bhi.n	800bba2 <__multiply+0xfe>
 800bbd2:	9a01      	ldr	r2, [sp, #4]
 800bbd4:	50b4      	str	r4, [r6, r2]
 800bbd6:	3604      	adds	r6, #4
 800bbd8:	e7a3      	b.n	800bb22 <__multiply+0x7e>
 800bbda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1a5      	bne.n	800bb2e <__multiply+0x8a>
 800bbe2:	3f01      	subs	r7, #1
 800bbe4:	e7a1      	b.n	800bb2a <__multiply+0x86>
 800bbe6:	bf00      	nop
 800bbe8:	0800c7b3 	.word	0x0800c7b3
 800bbec:	0800c824 	.word	0x0800c824

0800bbf0 <__pow5mult>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	f012 0203 	ands.w	r2, r2, #3
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	d007      	beq.n	800bc10 <__pow5mult+0x20>
 800bc00:	4c25      	ldr	r4, [pc, #148]	; (800bc98 <__pow5mult+0xa8>)
 800bc02:	3a01      	subs	r2, #1
 800bc04:	2300      	movs	r3, #0
 800bc06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc0a:	f7ff fe9b 	bl	800b944 <__multadd>
 800bc0e:	4607      	mov	r7, r0
 800bc10:	10ad      	asrs	r5, r5, #2
 800bc12:	d03d      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc16:	b97c      	cbnz	r4, 800bc38 <__pow5mult+0x48>
 800bc18:	2010      	movs	r0, #16
 800bc1a:	f7ff fe29 	bl	800b870 <malloc>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	6270      	str	r0, [r6, #36]	; 0x24
 800bc22:	b928      	cbnz	r0, 800bc30 <__pow5mult+0x40>
 800bc24:	4b1d      	ldr	r3, [pc, #116]	; (800bc9c <__pow5mult+0xac>)
 800bc26:	481e      	ldr	r0, [pc, #120]	; (800bca0 <__pow5mult+0xb0>)
 800bc28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc2c:	f000 fc20 	bl	800c470 <__assert_func>
 800bc30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc34:	6004      	str	r4, [r0, #0]
 800bc36:	60c4      	str	r4, [r0, #12]
 800bc38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc40:	b94c      	cbnz	r4, 800bc56 <__pow5mult+0x66>
 800bc42:	f240 2171 	movw	r1, #625	; 0x271
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7ff ff16 	bl	800ba78 <__i2b>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc52:	4604      	mov	r4, r0
 800bc54:	6003      	str	r3, [r0, #0]
 800bc56:	f04f 0900 	mov.w	r9, #0
 800bc5a:	07eb      	lsls	r3, r5, #31
 800bc5c:	d50a      	bpl.n	800bc74 <__pow5mult+0x84>
 800bc5e:	4639      	mov	r1, r7
 800bc60:	4622      	mov	r2, r4
 800bc62:	4630      	mov	r0, r6
 800bc64:	f7ff ff1e 	bl	800baa4 <__multiply>
 800bc68:	4639      	mov	r1, r7
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff fe47 	bl	800b900 <_Bfree>
 800bc72:	4647      	mov	r7, r8
 800bc74:	106d      	asrs	r5, r5, #1
 800bc76:	d00b      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	b938      	cbnz	r0, 800bc8c <__pow5mult+0x9c>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff ff0f 	bl	800baa4 <__multiply>
 800bc86:	6020      	str	r0, [r4, #0]
 800bc88:	f8c0 9000 	str.w	r9, [r0]
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	e7e4      	b.n	800bc5a <__pow5mult+0x6a>
 800bc90:	4638      	mov	r0, r7
 800bc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc96:	bf00      	nop
 800bc98:	0800c978 	.word	0x0800c978
 800bc9c:	0800c73d 	.word	0x0800c73d
 800bca0:	0800c824 	.word	0x0800c824

0800bca4 <__lshift>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6849      	ldr	r1, [r1, #4]
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	4691      	mov	r9, r2
 800bcb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcbc:	f108 0601 	add.w	r6, r8, #1
 800bcc0:	42b3      	cmp	r3, r6
 800bcc2:	db0b      	blt.n	800bcdc <__lshift+0x38>
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	f7ff fddb 	bl	800b880 <_Balloc>
 800bcca:	4605      	mov	r5, r0
 800bccc:	b948      	cbnz	r0, 800bce2 <__lshift+0x3e>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	4b28      	ldr	r3, [pc, #160]	; (800bd74 <__lshift+0xd0>)
 800bcd2:	4829      	ldr	r0, [pc, #164]	; (800bd78 <__lshift+0xd4>)
 800bcd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcd8:	f000 fbca 	bl	800c470 <__assert_func>
 800bcdc:	3101      	adds	r1, #1
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	e7ee      	b.n	800bcc0 <__lshift+0x1c>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f100 0114 	add.w	r1, r0, #20
 800bce8:	f100 0210 	add.w	r2, r0, #16
 800bcec:	4618      	mov	r0, r3
 800bcee:	4553      	cmp	r3, sl
 800bcf0:	db33      	blt.n	800bd5a <__lshift+0xb6>
 800bcf2:	6920      	ldr	r0, [r4, #16]
 800bcf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcf8:	f104 0314 	add.w	r3, r4, #20
 800bcfc:	f019 091f 	ands.w	r9, r9, #31
 800bd00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd08:	d02b      	beq.n	800bd62 <__lshift+0xbe>
 800bd0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd0e:	468a      	mov	sl, r1
 800bd10:	2200      	movs	r2, #0
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	fa00 f009 	lsl.w	r0, r0, r9
 800bd18:	4302      	orrs	r2, r0
 800bd1a:	f84a 2b04 	str.w	r2, [sl], #4
 800bd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd22:	459c      	cmp	ip, r3
 800bd24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd28:	d8f3      	bhi.n	800bd12 <__lshift+0x6e>
 800bd2a:	ebac 0304 	sub.w	r3, ip, r4
 800bd2e:	3b15      	subs	r3, #21
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	3304      	adds	r3, #4
 800bd36:	f104 0015 	add.w	r0, r4, #21
 800bd3a:	4584      	cmp	ip, r0
 800bd3c:	bf38      	it	cc
 800bd3e:	2304      	movcc	r3, #4
 800bd40:	50ca      	str	r2, [r1, r3]
 800bd42:	b10a      	cbz	r2, 800bd48 <__lshift+0xa4>
 800bd44:	f108 0602 	add.w	r6, r8, #2
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	612e      	str	r6, [r5, #16]
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f7ff fdd6 	bl	800b900 <_Bfree>
 800bd54:	4628      	mov	r0, r5
 800bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd5e:	3301      	adds	r3, #1
 800bd60:	e7c5      	b.n	800bcee <__lshift+0x4a>
 800bd62:	3904      	subs	r1, #4
 800bd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd6c:	459c      	cmp	ip, r3
 800bd6e:	d8f9      	bhi.n	800bd64 <__lshift+0xc0>
 800bd70:	e7ea      	b.n	800bd48 <__lshift+0xa4>
 800bd72:	bf00      	nop
 800bd74:	0800c7b3 	.word	0x0800c7b3
 800bd78:	0800c824 	.word	0x0800c824

0800bd7c <__mcmp>:
 800bd7c:	b530      	push	{r4, r5, lr}
 800bd7e:	6902      	ldr	r2, [r0, #16]
 800bd80:	690c      	ldr	r4, [r1, #16]
 800bd82:	1b12      	subs	r2, r2, r4
 800bd84:	d10e      	bne.n	800bda4 <__mcmp+0x28>
 800bd86:	f100 0314 	add.w	r3, r0, #20
 800bd8a:	3114      	adds	r1, #20
 800bd8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd9c:	42a5      	cmp	r5, r4
 800bd9e:	d003      	beq.n	800bda8 <__mcmp+0x2c>
 800bda0:	d305      	bcc.n	800bdae <__mcmp+0x32>
 800bda2:	2201      	movs	r2, #1
 800bda4:	4610      	mov	r0, r2
 800bda6:	bd30      	pop	{r4, r5, pc}
 800bda8:	4283      	cmp	r3, r0
 800bdaa:	d3f3      	bcc.n	800bd94 <__mcmp+0x18>
 800bdac:	e7fa      	b.n	800bda4 <__mcmp+0x28>
 800bdae:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb2:	e7f7      	b.n	800bda4 <__mcmp+0x28>

0800bdb4 <__mdiff>:
 800bdb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	460c      	mov	r4, r1
 800bdba:	4606      	mov	r6, r0
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4617      	mov	r7, r2
 800bdc2:	f7ff ffdb 	bl	800bd7c <__mcmp>
 800bdc6:	1e05      	subs	r5, r0, #0
 800bdc8:	d110      	bne.n	800bdec <__mdiff+0x38>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f7ff fd57 	bl	800b880 <_Balloc>
 800bdd2:	b930      	cbnz	r0, 800bde2 <__mdiff+0x2e>
 800bdd4:	4b39      	ldr	r3, [pc, #228]	; (800bebc <__mdiff+0x108>)
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	f240 2132 	movw	r1, #562	; 0x232
 800bddc:	4838      	ldr	r0, [pc, #224]	; (800bec0 <__mdiff+0x10c>)
 800bdde:	f000 fb47 	bl	800c470 <__assert_func>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bde8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdec:	bfa4      	itt	ge
 800bdee:	463b      	movge	r3, r7
 800bdf0:	4627      	movge	r7, r4
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	6879      	ldr	r1, [r7, #4]
 800bdf6:	bfa6      	itte	ge
 800bdf8:	461c      	movge	r4, r3
 800bdfa:	2500      	movge	r5, #0
 800bdfc:	2501      	movlt	r5, #1
 800bdfe:	f7ff fd3f 	bl	800b880 <_Balloc>
 800be02:	b920      	cbnz	r0, 800be0e <__mdiff+0x5a>
 800be04:	4b2d      	ldr	r3, [pc, #180]	; (800bebc <__mdiff+0x108>)
 800be06:	4602      	mov	r2, r0
 800be08:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be0c:	e7e6      	b.n	800bddc <__mdiff+0x28>
 800be0e:	693e      	ldr	r6, [r7, #16]
 800be10:	60c5      	str	r5, [r0, #12]
 800be12:	6925      	ldr	r5, [r4, #16]
 800be14:	f107 0114 	add.w	r1, r7, #20
 800be18:	f104 0914 	add.w	r9, r4, #20
 800be1c:	f100 0e14 	add.w	lr, r0, #20
 800be20:	f107 0210 	add.w	r2, r7, #16
 800be24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800be28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800be2c:	46f2      	mov	sl, lr
 800be2e:	2700      	movs	r7, #0
 800be30:	f859 3b04 	ldr.w	r3, [r9], #4
 800be34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be38:	fa1f f883 	uxth.w	r8, r3
 800be3c:	fa17 f78b 	uxtah	r7, r7, fp
 800be40:	0c1b      	lsrs	r3, r3, #16
 800be42:	eba7 0808 	sub.w	r8, r7, r8
 800be46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be4e:	fa1f f888 	uxth.w	r8, r8
 800be52:	141f      	asrs	r7, r3, #16
 800be54:	454d      	cmp	r5, r9
 800be56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be5a:	f84a 3b04 	str.w	r3, [sl], #4
 800be5e:	d8e7      	bhi.n	800be30 <__mdiff+0x7c>
 800be60:	1b2b      	subs	r3, r5, r4
 800be62:	3b15      	subs	r3, #21
 800be64:	f023 0303 	bic.w	r3, r3, #3
 800be68:	3304      	adds	r3, #4
 800be6a:	3415      	adds	r4, #21
 800be6c:	42a5      	cmp	r5, r4
 800be6e:	bf38      	it	cc
 800be70:	2304      	movcc	r3, #4
 800be72:	4419      	add	r1, r3
 800be74:	4473      	add	r3, lr
 800be76:	469e      	mov	lr, r3
 800be78:	460d      	mov	r5, r1
 800be7a:	4565      	cmp	r5, ip
 800be7c:	d30e      	bcc.n	800be9c <__mdiff+0xe8>
 800be7e:	f10c 0203 	add.w	r2, ip, #3
 800be82:	1a52      	subs	r2, r2, r1
 800be84:	f022 0203 	bic.w	r2, r2, #3
 800be88:	3903      	subs	r1, #3
 800be8a:	458c      	cmp	ip, r1
 800be8c:	bf38      	it	cc
 800be8e:	2200      	movcc	r2, #0
 800be90:	441a      	add	r2, r3
 800be92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be96:	b17b      	cbz	r3, 800beb8 <__mdiff+0x104>
 800be98:	6106      	str	r6, [r0, #16]
 800be9a:	e7a5      	b.n	800bde8 <__mdiff+0x34>
 800be9c:	f855 8b04 	ldr.w	r8, [r5], #4
 800bea0:	fa17 f488 	uxtah	r4, r7, r8
 800bea4:	1422      	asrs	r2, r4, #16
 800bea6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800beaa:	b2a4      	uxth	r4, r4
 800beac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800beb0:	f84e 4b04 	str.w	r4, [lr], #4
 800beb4:	1417      	asrs	r7, r2, #16
 800beb6:	e7e0      	b.n	800be7a <__mdiff+0xc6>
 800beb8:	3e01      	subs	r6, #1
 800beba:	e7ea      	b.n	800be92 <__mdiff+0xde>
 800bebc:	0800c7b3 	.word	0x0800c7b3
 800bec0:	0800c824 	.word	0x0800c824

0800bec4 <__d2b>:
 800bec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bec8:	4689      	mov	r9, r1
 800beca:	2101      	movs	r1, #1
 800becc:	ec57 6b10 	vmov	r6, r7, d0
 800bed0:	4690      	mov	r8, r2
 800bed2:	f7ff fcd5 	bl	800b880 <_Balloc>
 800bed6:	4604      	mov	r4, r0
 800bed8:	b930      	cbnz	r0, 800bee8 <__d2b+0x24>
 800beda:	4602      	mov	r2, r0
 800bedc:	4b25      	ldr	r3, [pc, #148]	; (800bf74 <__d2b+0xb0>)
 800bede:	4826      	ldr	r0, [pc, #152]	; (800bf78 <__d2b+0xb4>)
 800bee0:	f240 310a 	movw	r1, #778	; 0x30a
 800bee4:	f000 fac4 	bl	800c470 <__assert_func>
 800bee8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800beec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bef0:	bb35      	cbnz	r5, 800bf40 <__d2b+0x7c>
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	d028      	beq.n	800bf4a <__d2b+0x86>
 800bef8:	4668      	mov	r0, sp
 800befa:	9600      	str	r6, [sp, #0]
 800befc:	f7ff fd8c 	bl	800ba18 <__lo0bits>
 800bf00:	9900      	ldr	r1, [sp, #0]
 800bf02:	b300      	cbz	r0, 800bf46 <__d2b+0x82>
 800bf04:	9a01      	ldr	r2, [sp, #4]
 800bf06:	f1c0 0320 	rsb	r3, r0, #32
 800bf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	40c2      	lsrs	r2, r0
 800bf12:	6163      	str	r3, [r4, #20]
 800bf14:	9201      	str	r2, [sp, #4]
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	61a3      	str	r3, [r4, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	bf14      	ite	ne
 800bf1e:	2202      	movne	r2, #2
 800bf20:	2201      	moveq	r2, #1
 800bf22:	6122      	str	r2, [r4, #16]
 800bf24:	b1d5      	cbz	r5, 800bf5c <__d2b+0x98>
 800bf26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf2a:	4405      	add	r5, r0
 800bf2c:	f8c9 5000 	str.w	r5, [r9]
 800bf30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf34:	f8c8 0000 	str.w	r0, [r8]
 800bf38:	4620      	mov	r0, r4
 800bf3a:	b003      	add	sp, #12
 800bf3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf44:	e7d5      	b.n	800bef2 <__d2b+0x2e>
 800bf46:	6161      	str	r1, [r4, #20]
 800bf48:	e7e5      	b.n	800bf16 <__d2b+0x52>
 800bf4a:	a801      	add	r0, sp, #4
 800bf4c:	f7ff fd64 	bl	800ba18 <__lo0bits>
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	6163      	str	r3, [r4, #20]
 800bf54:	2201      	movs	r2, #1
 800bf56:	6122      	str	r2, [r4, #16]
 800bf58:	3020      	adds	r0, #32
 800bf5a:	e7e3      	b.n	800bf24 <__d2b+0x60>
 800bf5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf64:	f8c9 0000 	str.w	r0, [r9]
 800bf68:	6918      	ldr	r0, [r3, #16]
 800bf6a:	f7ff fd35 	bl	800b9d8 <__hi0bits>
 800bf6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf72:	e7df      	b.n	800bf34 <__d2b+0x70>
 800bf74:	0800c7b3 	.word	0x0800c7b3
 800bf78:	0800c824 	.word	0x0800c824

0800bf7c <_calloc_r>:
 800bf7c:	b513      	push	{r0, r1, r4, lr}
 800bf7e:	434a      	muls	r2, r1
 800bf80:	4611      	mov	r1, r2
 800bf82:	9201      	str	r2, [sp, #4]
 800bf84:	f000 f85a 	bl	800c03c <_malloc_r>
 800bf88:	4604      	mov	r4, r0
 800bf8a:	b118      	cbz	r0, 800bf94 <_calloc_r+0x18>
 800bf8c:	9a01      	ldr	r2, [sp, #4]
 800bf8e:	2100      	movs	r1, #0
 800bf90:	f7fd fdb8 	bl	8009b04 <memset>
 800bf94:	4620      	mov	r0, r4
 800bf96:	b002      	add	sp, #8
 800bf98:	bd10      	pop	{r4, pc}
	...

0800bf9c <_free_r>:
 800bf9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf9e:	2900      	cmp	r1, #0
 800bfa0:	d048      	beq.n	800c034 <_free_r+0x98>
 800bfa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfa6:	9001      	str	r0, [sp, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f1a1 0404 	sub.w	r4, r1, #4
 800bfae:	bfb8      	it	lt
 800bfb0:	18e4      	addlt	r4, r4, r3
 800bfb2:	f000 fae3 	bl	800c57c <__malloc_lock>
 800bfb6:	4a20      	ldr	r2, [pc, #128]	; (800c038 <_free_r+0x9c>)
 800bfb8:	9801      	ldr	r0, [sp, #4]
 800bfba:	6813      	ldr	r3, [r2, #0]
 800bfbc:	4615      	mov	r5, r2
 800bfbe:	b933      	cbnz	r3, 800bfce <_free_r+0x32>
 800bfc0:	6063      	str	r3, [r4, #4]
 800bfc2:	6014      	str	r4, [r2, #0]
 800bfc4:	b003      	add	sp, #12
 800bfc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfca:	f000 badd 	b.w	800c588 <__malloc_unlock>
 800bfce:	42a3      	cmp	r3, r4
 800bfd0:	d90b      	bls.n	800bfea <_free_r+0x4e>
 800bfd2:	6821      	ldr	r1, [r4, #0]
 800bfd4:	1862      	adds	r2, r4, r1
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	bf04      	itt	eq
 800bfda:	681a      	ldreq	r2, [r3, #0]
 800bfdc:	685b      	ldreq	r3, [r3, #4]
 800bfde:	6063      	str	r3, [r4, #4]
 800bfe0:	bf04      	itt	eq
 800bfe2:	1852      	addeq	r2, r2, r1
 800bfe4:	6022      	streq	r2, [r4, #0]
 800bfe6:	602c      	str	r4, [r5, #0]
 800bfe8:	e7ec      	b.n	800bfc4 <_free_r+0x28>
 800bfea:	461a      	mov	r2, r3
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	b10b      	cbz	r3, 800bff4 <_free_r+0x58>
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	d9fa      	bls.n	800bfea <_free_r+0x4e>
 800bff4:	6811      	ldr	r1, [r2, #0]
 800bff6:	1855      	adds	r5, r2, r1
 800bff8:	42a5      	cmp	r5, r4
 800bffa:	d10b      	bne.n	800c014 <_free_r+0x78>
 800bffc:	6824      	ldr	r4, [r4, #0]
 800bffe:	4421      	add	r1, r4
 800c000:	1854      	adds	r4, r2, r1
 800c002:	42a3      	cmp	r3, r4
 800c004:	6011      	str	r1, [r2, #0]
 800c006:	d1dd      	bne.n	800bfc4 <_free_r+0x28>
 800c008:	681c      	ldr	r4, [r3, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	6053      	str	r3, [r2, #4]
 800c00e:	4421      	add	r1, r4
 800c010:	6011      	str	r1, [r2, #0]
 800c012:	e7d7      	b.n	800bfc4 <_free_r+0x28>
 800c014:	d902      	bls.n	800c01c <_free_r+0x80>
 800c016:	230c      	movs	r3, #12
 800c018:	6003      	str	r3, [r0, #0]
 800c01a:	e7d3      	b.n	800bfc4 <_free_r+0x28>
 800c01c:	6825      	ldr	r5, [r4, #0]
 800c01e:	1961      	adds	r1, r4, r5
 800c020:	428b      	cmp	r3, r1
 800c022:	bf04      	itt	eq
 800c024:	6819      	ldreq	r1, [r3, #0]
 800c026:	685b      	ldreq	r3, [r3, #4]
 800c028:	6063      	str	r3, [r4, #4]
 800c02a:	bf04      	itt	eq
 800c02c:	1949      	addeq	r1, r1, r5
 800c02e:	6021      	streq	r1, [r4, #0]
 800c030:	6054      	str	r4, [r2, #4]
 800c032:	e7c7      	b.n	800bfc4 <_free_r+0x28>
 800c034:	b003      	add	sp, #12
 800c036:	bd30      	pop	{r4, r5, pc}
 800c038:	200004c0 	.word	0x200004c0

0800c03c <_malloc_r>:
 800c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03e:	1ccd      	adds	r5, r1, #3
 800c040:	f025 0503 	bic.w	r5, r5, #3
 800c044:	3508      	adds	r5, #8
 800c046:	2d0c      	cmp	r5, #12
 800c048:	bf38      	it	cc
 800c04a:	250c      	movcc	r5, #12
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	4606      	mov	r6, r0
 800c050:	db01      	blt.n	800c056 <_malloc_r+0x1a>
 800c052:	42a9      	cmp	r1, r5
 800c054:	d903      	bls.n	800c05e <_malloc_r+0x22>
 800c056:	230c      	movs	r3, #12
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	2000      	movs	r0, #0
 800c05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c05e:	f000 fa8d 	bl	800c57c <__malloc_lock>
 800c062:	4921      	ldr	r1, [pc, #132]	; (800c0e8 <_malloc_r+0xac>)
 800c064:	680a      	ldr	r2, [r1, #0]
 800c066:	4614      	mov	r4, r2
 800c068:	b99c      	cbnz	r4, 800c092 <_malloc_r+0x56>
 800c06a:	4f20      	ldr	r7, [pc, #128]	; (800c0ec <_malloc_r+0xb0>)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	b923      	cbnz	r3, 800c07a <_malloc_r+0x3e>
 800c070:	4621      	mov	r1, r4
 800c072:	4630      	mov	r0, r6
 800c074:	f000 f996 	bl	800c3a4 <_sbrk_r>
 800c078:	6038      	str	r0, [r7, #0]
 800c07a:	4629      	mov	r1, r5
 800c07c:	4630      	mov	r0, r6
 800c07e:	f000 f991 	bl	800c3a4 <_sbrk_r>
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	d123      	bne.n	800c0ce <_malloc_r+0x92>
 800c086:	230c      	movs	r3, #12
 800c088:	6033      	str	r3, [r6, #0]
 800c08a:	4630      	mov	r0, r6
 800c08c:	f000 fa7c 	bl	800c588 <__malloc_unlock>
 800c090:	e7e3      	b.n	800c05a <_malloc_r+0x1e>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	1b5b      	subs	r3, r3, r5
 800c096:	d417      	bmi.n	800c0c8 <_malloc_r+0x8c>
 800c098:	2b0b      	cmp	r3, #11
 800c09a:	d903      	bls.n	800c0a4 <_malloc_r+0x68>
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	441c      	add	r4, r3
 800c0a0:	6025      	str	r5, [r4, #0]
 800c0a2:	e004      	b.n	800c0ae <_malloc_r+0x72>
 800c0a4:	6863      	ldr	r3, [r4, #4]
 800c0a6:	42a2      	cmp	r2, r4
 800c0a8:	bf0c      	ite	eq
 800c0aa:	600b      	streq	r3, [r1, #0]
 800c0ac:	6053      	strne	r3, [r2, #4]
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f000 fa6a 	bl	800c588 <__malloc_unlock>
 800c0b4:	f104 000b 	add.w	r0, r4, #11
 800c0b8:	1d23      	adds	r3, r4, #4
 800c0ba:	f020 0007 	bic.w	r0, r0, #7
 800c0be:	1ac2      	subs	r2, r0, r3
 800c0c0:	d0cc      	beq.n	800c05c <_malloc_r+0x20>
 800c0c2:	1a1b      	subs	r3, r3, r0
 800c0c4:	50a3      	str	r3, [r4, r2]
 800c0c6:	e7c9      	b.n	800c05c <_malloc_r+0x20>
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	6864      	ldr	r4, [r4, #4]
 800c0cc:	e7cc      	b.n	800c068 <_malloc_r+0x2c>
 800c0ce:	1cc4      	adds	r4, r0, #3
 800c0d0:	f024 0403 	bic.w	r4, r4, #3
 800c0d4:	42a0      	cmp	r0, r4
 800c0d6:	d0e3      	beq.n	800c0a0 <_malloc_r+0x64>
 800c0d8:	1a21      	subs	r1, r4, r0
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f000 f962 	bl	800c3a4 <_sbrk_r>
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	d1dd      	bne.n	800c0a0 <_malloc_r+0x64>
 800c0e4:	e7cf      	b.n	800c086 <_malloc_r+0x4a>
 800c0e6:	bf00      	nop
 800c0e8:	200004c0 	.word	0x200004c0
 800c0ec:	200004c4 	.word	0x200004c4

0800c0f0 <__sfputc_r>:
 800c0f0:	6893      	ldr	r3, [r2, #8]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	b410      	push	{r4}
 800c0f8:	6093      	str	r3, [r2, #8]
 800c0fa:	da08      	bge.n	800c10e <__sfputc_r+0x1e>
 800c0fc:	6994      	ldr	r4, [r2, #24]
 800c0fe:	42a3      	cmp	r3, r4
 800c100:	db01      	blt.n	800c106 <__sfputc_r+0x16>
 800c102:	290a      	cmp	r1, #10
 800c104:	d103      	bne.n	800c10e <__sfputc_r+0x1e>
 800c106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c10a:	f7fe ba53 	b.w	800a5b4 <__swbuf_r>
 800c10e:	6813      	ldr	r3, [r2, #0]
 800c110:	1c58      	adds	r0, r3, #1
 800c112:	6010      	str	r0, [r2, #0]
 800c114:	7019      	strb	r1, [r3, #0]
 800c116:	4608      	mov	r0, r1
 800c118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <__sfputs_r>:
 800c11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c120:	4606      	mov	r6, r0
 800c122:	460f      	mov	r7, r1
 800c124:	4614      	mov	r4, r2
 800c126:	18d5      	adds	r5, r2, r3
 800c128:	42ac      	cmp	r4, r5
 800c12a:	d101      	bne.n	800c130 <__sfputs_r+0x12>
 800c12c:	2000      	movs	r0, #0
 800c12e:	e007      	b.n	800c140 <__sfputs_r+0x22>
 800c130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c134:	463a      	mov	r2, r7
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ffda 	bl	800c0f0 <__sfputc_r>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d1f3      	bne.n	800c128 <__sfputs_r+0xa>
 800c140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c144 <_vfiprintf_r>:
 800c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	460d      	mov	r5, r1
 800c14a:	b09d      	sub	sp, #116	; 0x74
 800c14c:	4614      	mov	r4, r2
 800c14e:	4698      	mov	r8, r3
 800c150:	4606      	mov	r6, r0
 800c152:	b118      	cbz	r0, 800c15c <_vfiprintf_r+0x18>
 800c154:	6983      	ldr	r3, [r0, #24]
 800c156:	b90b      	cbnz	r3, 800c15c <_vfiprintf_r+0x18>
 800c158:	f7ff fa80 	bl	800b65c <__sinit>
 800c15c:	4b89      	ldr	r3, [pc, #548]	; (800c384 <_vfiprintf_r+0x240>)
 800c15e:	429d      	cmp	r5, r3
 800c160:	d11b      	bne.n	800c19a <_vfiprintf_r+0x56>
 800c162:	6875      	ldr	r5, [r6, #4]
 800c164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c166:	07d9      	lsls	r1, r3, #31
 800c168:	d405      	bmi.n	800c176 <_vfiprintf_r+0x32>
 800c16a:	89ab      	ldrh	r3, [r5, #12]
 800c16c:	059a      	lsls	r2, r3, #22
 800c16e:	d402      	bmi.n	800c176 <_vfiprintf_r+0x32>
 800c170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c172:	f7ff fb16 	bl	800b7a2 <__retarget_lock_acquire_recursive>
 800c176:	89ab      	ldrh	r3, [r5, #12]
 800c178:	071b      	lsls	r3, r3, #28
 800c17a:	d501      	bpl.n	800c180 <_vfiprintf_r+0x3c>
 800c17c:	692b      	ldr	r3, [r5, #16]
 800c17e:	b9eb      	cbnz	r3, 800c1bc <_vfiprintf_r+0x78>
 800c180:	4629      	mov	r1, r5
 800c182:	4630      	mov	r0, r6
 800c184:	f7fe fa68 	bl	800a658 <__swsetup_r>
 800c188:	b1c0      	cbz	r0, 800c1bc <_vfiprintf_r+0x78>
 800c18a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c18c:	07dc      	lsls	r4, r3, #31
 800c18e:	d50e      	bpl.n	800c1ae <_vfiprintf_r+0x6a>
 800c190:	f04f 30ff 	mov.w	r0, #4294967295
 800c194:	b01d      	add	sp, #116	; 0x74
 800c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19a:	4b7b      	ldr	r3, [pc, #492]	; (800c388 <_vfiprintf_r+0x244>)
 800c19c:	429d      	cmp	r5, r3
 800c19e:	d101      	bne.n	800c1a4 <_vfiprintf_r+0x60>
 800c1a0:	68b5      	ldr	r5, [r6, #8]
 800c1a2:	e7df      	b.n	800c164 <_vfiprintf_r+0x20>
 800c1a4:	4b79      	ldr	r3, [pc, #484]	; (800c38c <_vfiprintf_r+0x248>)
 800c1a6:	429d      	cmp	r5, r3
 800c1a8:	bf08      	it	eq
 800c1aa:	68f5      	ldreq	r5, [r6, #12]
 800c1ac:	e7da      	b.n	800c164 <_vfiprintf_r+0x20>
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	0598      	lsls	r0, r3, #22
 800c1b2:	d4ed      	bmi.n	800c190 <_vfiprintf_r+0x4c>
 800c1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1b6:	f7ff faf5 	bl	800b7a4 <__retarget_lock_release_recursive>
 800c1ba:	e7e9      	b.n	800c190 <_vfiprintf_r+0x4c>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c0:	2320      	movs	r3, #32
 800c1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ca:	2330      	movs	r3, #48	; 0x30
 800c1cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c390 <_vfiprintf_r+0x24c>
 800c1d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1d4:	f04f 0901 	mov.w	r9, #1
 800c1d8:	4623      	mov	r3, r4
 800c1da:	469a      	mov	sl, r3
 800c1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e0:	b10a      	cbz	r2, 800c1e6 <_vfiprintf_r+0xa2>
 800c1e2:	2a25      	cmp	r2, #37	; 0x25
 800c1e4:	d1f9      	bne.n	800c1da <_vfiprintf_r+0x96>
 800c1e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ea:	d00b      	beq.n	800c204 <_vfiprintf_r+0xc0>
 800c1ec:	465b      	mov	r3, fp
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7ff ff93 	bl	800c11e <__sfputs_r>
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	f000 80aa 	beq.w	800c352 <_vfiprintf_r+0x20e>
 800c1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c200:	445a      	add	r2, fp
 800c202:	9209      	str	r2, [sp, #36]	; 0x24
 800c204:	f89a 3000 	ldrb.w	r3, [sl]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80a2 	beq.w	800c352 <_vfiprintf_r+0x20e>
 800c20e:	2300      	movs	r3, #0
 800c210:	f04f 32ff 	mov.w	r2, #4294967295
 800c214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c218:	f10a 0a01 	add.w	sl, sl, #1
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c224:	931a      	str	r3, [sp, #104]	; 0x68
 800c226:	4654      	mov	r4, sl
 800c228:	2205      	movs	r2, #5
 800c22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22e:	4858      	ldr	r0, [pc, #352]	; (800c390 <_vfiprintf_r+0x24c>)
 800c230:	f7f3 ffd6 	bl	80001e0 <memchr>
 800c234:	9a04      	ldr	r2, [sp, #16]
 800c236:	b9d8      	cbnz	r0, 800c270 <_vfiprintf_r+0x12c>
 800c238:	06d1      	lsls	r1, r2, #27
 800c23a:	bf44      	itt	mi
 800c23c:	2320      	movmi	r3, #32
 800c23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c242:	0713      	lsls	r3, r2, #28
 800c244:	bf44      	itt	mi
 800c246:	232b      	movmi	r3, #43	; 0x2b
 800c248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c24c:	f89a 3000 	ldrb.w	r3, [sl]
 800c250:	2b2a      	cmp	r3, #42	; 0x2a
 800c252:	d015      	beq.n	800c280 <_vfiprintf_r+0x13c>
 800c254:	9a07      	ldr	r2, [sp, #28]
 800c256:	4654      	mov	r4, sl
 800c258:	2000      	movs	r0, #0
 800c25a:	f04f 0c0a 	mov.w	ip, #10
 800c25e:	4621      	mov	r1, r4
 800c260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c264:	3b30      	subs	r3, #48	; 0x30
 800c266:	2b09      	cmp	r3, #9
 800c268:	d94e      	bls.n	800c308 <_vfiprintf_r+0x1c4>
 800c26a:	b1b0      	cbz	r0, 800c29a <_vfiprintf_r+0x156>
 800c26c:	9207      	str	r2, [sp, #28]
 800c26e:	e014      	b.n	800c29a <_vfiprintf_r+0x156>
 800c270:	eba0 0308 	sub.w	r3, r0, r8
 800c274:	fa09 f303 	lsl.w	r3, r9, r3
 800c278:	4313      	orrs	r3, r2
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	46a2      	mov	sl, r4
 800c27e:	e7d2      	b.n	800c226 <_vfiprintf_r+0xe2>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	1d19      	adds	r1, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	9103      	str	r1, [sp, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bfbb      	ittet	lt
 800c28c:	425b      	neglt	r3, r3
 800c28e:	f042 0202 	orrlt.w	r2, r2, #2
 800c292:	9307      	strge	r3, [sp, #28]
 800c294:	9307      	strlt	r3, [sp, #28]
 800c296:	bfb8      	it	lt
 800c298:	9204      	strlt	r2, [sp, #16]
 800c29a:	7823      	ldrb	r3, [r4, #0]
 800c29c:	2b2e      	cmp	r3, #46	; 0x2e
 800c29e:	d10c      	bne.n	800c2ba <_vfiprintf_r+0x176>
 800c2a0:	7863      	ldrb	r3, [r4, #1]
 800c2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a4:	d135      	bne.n	800c312 <_vfiprintf_r+0x1ce>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	1d1a      	adds	r2, r3, #4
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	9203      	str	r2, [sp, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfb8      	it	lt
 800c2b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2b6:	3402      	adds	r4, #2
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c3a0 <_vfiprintf_r+0x25c>
 800c2be:	7821      	ldrb	r1, [r4, #0]
 800c2c0:	2203      	movs	r2, #3
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	f7f3 ff8c 	bl	80001e0 <memchr>
 800c2c8:	b140      	cbz	r0, 800c2dc <_vfiprintf_r+0x198>
 800c2ca:	2340      	movs	r3, #64	; 0x40
 800c2cc:	eba0 000a 	sub.w	r0, r0, sl
 800c2d0:	fa03 f000 	lsl.w	r0, r3, r0
 800c2d4:	9b04      	ldr	r3, [sp, #16]
 800c2d6:	4303      	orrs	r3, r0
 800c2d8:	3401      	adds	r4, #1
 800c2da:	9304      	str	r3, [sp, #16]
 800c2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e0:	482c      	ldr	r0, [pc, #176]	; (800c394 <_vfiprintf_r+0x250>)
 800c2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2e6:	2206      	movs	r2, #6
 800c2e8:	f7f3 ff7a 	bl	80001e0 <memchr>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d03f      	beq.n	800c370 <_vfiprintf_r+0x22c>
 800c2f0:	4b29      	ldr	r3, [pc, #164]	; (800c398 <_vfiprintf_r+0x254>)
 800c2f2:	bb1b      	cbnz	r3, 800c33c <_vfiprintf_r+0x1f8>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	3307      	adds	r3, #7
 800c2f8:	f023 0307 	bic.w	r3, r3, #7
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	9303      	str	r3, [sp, #12]
 800c300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c302:	443b      	add	r3, r7
 800c304:	9309      	str	r3, [sp, #36]	; 0x24
 800c306:	e767      	b.n	800c1d8 <_vfiprintf_r+0x94>
 800c308:	fb0c 3202 	mla	r2, ip, r2, r3
 800c30c:	460c      	mov	r4, r1
 800c30e:	2001      	movs	r0, #1
 800c310:	e7a5      	b.n	800c25e <_vfiprintf_r+0x11a>
 800c312:	2300      	movs	r3, #0
 800c314:	3401      	adds	r4, #1
 800c316:	9305      	str	r3, [sp, #20]
 800c318:	4619      	mov	r1, r3
 800c31a:	f04f 0c0a 	mov.w	ip, #10
 800c31e:	4620      	mov	r0, r4
 800c320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c324:	3a30      	subs	r2, #48	; 0x30
 800c326:	2a09      	cmp	r2, #9
 800c328:	d903      	bls.n	800c332 <_vfiprintf_r+0x1ee>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0c5      	beq.n	800c2ba <_vfiprintf_r+0x176>
 800c32e:	9105      	str	r1, [sp, #20]
 800c330:	e7c3      	b.n	800c2ba <_vfiprintf_r+0x176>
 800c332:	fb0c 2101 	mla	r1, ip, r1, r2
 800c336:	4604      	mov	r4, r0
 800c338:	2301      	movs	r3, #1
 800c33a:	e7f0      	b.n	800c31e <_vfiprintf_r+0x1da>
 800c33c:	ab03      	add	r3, sp, #12
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	462a      	mov	r2, r5
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <_vfiprintf_r+0x258>)
 800c344:	a904      	add	r1, sp, #16
 800c346:	4630      	mov	r0, r6
 800c348:	f7fd fc84 	bl	8009c54 <_printf_float>
 800c34c:	4607      	mov	r7, r0
 800c34e:	1c78      	adds	r0, r7, #1
 800c350:	d1d6      	bne.n	800c300 <_vfiprintf_r+0x1bc>
 800c352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c354:	07d9      	lsls	r1, r3, #31
 800c356:	d405      	bmi.n	800c364 <_vfiprintf_r+0x220>
 800c358:	89ab      	ldrh	r3, [r5, #12]
 800c35a:	059a      	lsls	r2, r3, #22
 800c35c:	d402      	bmi.n	800c364 <_vfiprintf_r+0x220>
 800c35e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c360:	f7ff fa20 	bl	800b7a4 <__retarget_lock_release_recursive>
 800c364:	89ab      	ldrh	r3, [r5, #12]
 800c366:	065b      	lsls	r3, r3, #25
 800c368:	f53f af12 	bmi.w	800c190 <_vfiprintf_r+0x4c>
 800c36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c36e:	e711      	b.n	800c194 <_vfiprintf_r+0x50>
 800c370:	ab03      	add	r3, sp, #12
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	462a      	mov	r2, r5
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <_vfiprintf_r+0x258>)
 800c378:	a904      	add	r1, sp, #16
 800c37a:	4630      	mov	r0, r6
 800c37c:	f7fd ff0e 	bl	800a19c <_printf_i>
 800c380:	e7e4      	b.n	800c34c <_vfiprintf_r+0x208>
 800c382:	bf00      	nop
 800c384:	0800c7e4 	.word	0x0800c7e4
 800c388:	0800c804 	.word	0x0800c804
 800c38c:	0800c7c4 	.word	0x0800c7c4
 800c390:	0800c984 	.word	0x0800c984
 800c394:	0800c98e 	.word	0x0800c98e
 800c398:	08009c55 	.word	0x08009c55
 800c39c:	0800c11f 	.word	0x0800c11f
 800c3a0:	0800c98a 	.word	0x0800c98a

0800c3a4 <_sbrk_r>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4d06      	ldr	r5, [pc, #24]	; (800c3c0 <_sbrk_r+0x1c>)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	602b      	str	r3, [r5, #0]
 800c3b0:	f7f5 f8a4 	bl	80014fc <_sbrk>
 800c3b4:	1c43      	adds	r3, r0, #1
 800c3b6:	d102      	bne.n	800c3be <_sbrk_r+0x1a>
 800c3b8:	682b      	ldr	r3, [r5, #0]
 800c3ba:	b103      	cbz	r3, 800c3be <_sbrk_r+0x1a>
 800c3bc:	6023      	str	r3, [r4, #0]
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	200009b8 	.word	0x200009b8

0800c3c4 <__sread>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3cc:	f000 f8e2 	bl	800c594 <_read_r>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	bfab      	itete	ge
 800c3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d8:	181b      	addge	r3, r3, r0
 800c3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3de:	bfac      	ite	ge
 800c3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3e2:	81a3      	strhlt	r3, [r4, #12]
 800c3e4:	bd10      	pop	{r4, pc}

0800c3e6 <__swrite>:
 800c3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	898b      	ldrh	r3, [r1, #12]
 800c3ee:	05db      	lsls	r3, r3, #23
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	4616      	mov	r6, r2
 800c3f6:	d505      	bpl.n	800c404 <__swrite+0x1e>
 800c3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	2200      	movs	r2, #0
 800c400:	f000 f898 	bl	800c534 <_lseek_r>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	4632      	mov	r2, r6
 800c412:	463b      	mov	r3, r7
 800c414:	4628      	mov	r0, r5
 800c416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c41a:	f000 b817 	b.w	800c44c <_write_r>

0800c41e <__sseek>:
 800c41e:	b510      	push	{r4, lr}
 800c420:	460c      	mov	r4, r1
 800c422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c426:	f000 f885 	bl	800c534 <_lseek_r>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	bf15      	itete	ne
 800c430:	6560      	strne	r0, [r4, #84]	; 0x54
 800c432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c43a:	81a3      	strheq	r3, [r4, #12]
 800c43c:	bf18      	it	ne
 800c43e:	81a3      	strhne	r3, [r4, #12]
 800c440:	bd10      	pop	{r4, pc}

0800c442 <__sclose>:
 800c442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c446:	f000 b831 	b.w	800c4ac <_close_r>
	...

0800c44c <_write_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d07      	ldr	r5, [pc, #28]	; (800c46c <_write_r+0x20>)
 800c450:	4604      	mov	r4, r0
 800c452:	4608      	mov	r0, r1
 800c454:	4611      	mov	r1, r2
 800c456:	2200      	movs	r2, #0
 800c458:	602a      	str	r2, [r5, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f7f4 ff34 	bl	80012c8 <_write>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_write_r+0x1e>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_write_r+0x1e>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	200009b8 	.word	0x200009b8

0800c470 <__assert_func>:
 800c470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c472:	4614      	mov	r4, r2
 800c474:	461a      	mov	r2, r3
 800c476:	4b09      	ldr	r3, [pc, #36]	; (800c49c <__assert_func+0x2c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4605      	mov	r5, r0
 800c47c:	68d8      	ldr	r0, [r3, #12]
 800c47e:	b14c      	cbz	r4, 800c494 <__assert_func+0x24>
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <__assert_func+0x30>)
 800c482:	9100      	str	r1, [sp, #0]
 800c484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c488:	4906      	ldr	r1, [pc, #24]	; (800c4a4 <__assert_func+0x34>)
 800c48a:	462b      	mov	r3, r5
 800c48c:	f000 f81e 	bl	800c4cc <fiprintf>
 800c490:	f000 f89f 	bl	800c5d2 <abort>
 800c494:	4b04      	ldr	r3, [pc, #16]	; (800c4a8 <__assert_func+0x38>)
 800c496:	461c      	mov	r4, r3
 800c498:	e7f3      	b.n	800c482 <__assert_func+0x12>
 800c49a:	bf00      	nop
 800c49c:	200002c8 	.word	0x200002c8
 800c4a0:	0800c995 	.word	0x0800c995
 800c4a4:	0800c9a2 	.word	0x0800c9a2
 800c4a8:	0800c9d0 	.word	0x0800c9d0

0800c4ac <_close_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d06      	ldr	r5, [pc, #24]	; (800c4c8 <_close_r+0x1c>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	602b      	str	r3, [r5, #0]
 800c4b8:	f7f4 ff32 	bl	8001320 <_close>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_close_r+0x1a>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_close_r+0x1a>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	200009b8 	.word	0x200009b8

0800c4cc <fiprintf>:
 800c4cc:	b40e      	push	{r1, r2, r3}
 800c4ce:	b503      	push	{r0, r1, lr}
 800c4d0:	4601      	mov	r1, r0
 800c4d2:	ab03      	add	r3, sp, #12
 800c4d4:	4805      	ldr	r0, [pc, #20]	; (800c4ec <fiprintf+0x20>)
 800c4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4da:	6800      	ldr	r0, [r0, #0]
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	f7ff fe31 	bl	800c144 <_vfiprintf_r>
 800c4e2:	b002      	add	sp, #8
 800c4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4e8:	b003      	add	sp, #12
 800c4ea:	4770      	bx	lr
 800c4ec:	200002c8 	.word	0x200002c8

0800c4f0 <_fstat_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d07      	ldr	r5, [pc, #28]	; (800c510 <_fstat_r+0x20>)
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	602b      	str	r3, [r5, #0]
 800c4fe:	f7f4 ff5f 	bl	80013c0 <_fstat>
 800c502:	1c43      	adds	r3, r0, #1
 800c504:	d102      	bne.n	800c50c <_fstat_r+0x1c>
 800c506:	682b      	ldr	r3, [r5, #0]
 800c508:	b103      	cbz	r3, 800c50c <_fstat_r+0x1c>
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
 800c50e:	bf00      	nop
 800c510:	200009b8 	.word	0x200009b8

0800c514 <_isatty_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d06      	ldr	r5, [pc, #24]	; (800c530 <_isatty_r+0x1c>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	f7f4 febc 	bl	800129c <_isatty>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_isatty_r+0x1a>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_isatty_r+0x1a>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	200009b8 	.word	0x200009b8

0800c534 <_lseek_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d07      	ldr	r5, [pc, #28]	; (800c554 <_lseek_r+0x20>)
 800c538:	4604      	mov	r4, r0
 800c53a:	4608      	mov	r0, r1
 800c53c:	4611      	mov	r1, r2
 800c53e:	2200      	movs	r2, #0
 800c540:	602a      	str	r2, [r5, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	f7f4 ff03 	bl	800134e <_lseek>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_lseek_r+0x1e>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_lseek_r+0x1e>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	200009b8 	.word	0x200009b8

0800c558 <__ascii_mbtowc>:
 800c558:	b082      	sub	sp, #8
 800c55a:	b901      	cbnz	r1, 800c55e <__ascii_mbtowc+0x6>
 800c55c:	a901      	add	r1, sp, #4
 800c55e:	b142      	cbz	r2, 800c572 <__ascii_mbtowc+0x1a>
 800c560:	b14b      	cbz	r3, 800c576 <__ascii_mbtowc+0x1e>
 800c562:	7813      	ldrb	r3, [r2, #0]
 800c564:	600b      	str	r3, [r1, #0]
 800c566:	7812      	ldrb	r2, [r2, #0]
 800c568:	1e10      	subs	r0, r2, #0
 800c56a:	bf18      	it	ne
 800c56c:	2001      	movne	r0, #1
 800c56e:	b002      	add	sp, #8
 800c570:	4770      	bx	lr
 800c572:	4610      	mov	r0, r2
 800c574:	e7fb      	b.n	800c56e <__ascii_mbtowc+0x16>
 800c576:	f06f 0001 	mvn.w	r0, #1
 800c57a:	e7f8      	b.n	800c56e <__ascii_mbtowc+0x16>

0800c57c <__malloc_lock>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__malloc_lock+0x8>)
 800c57e:	f7ff b910 	b.w	800b7a2 <__retarget_lock_acquire_recursive>
 800c582:	bf00      	nop
 800c584:	200009b0 	.word	0x200009b0

0800c588 <__malloc_unlock>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__malloc_unlock+0x8>)
 800c58a:	f7ff b90b 	b.w	800b7a4 <__retarget_lock_release_recursive>
 800c58e:	bf00      	nop
 800c590:	200009b0 	.word	0x200009b0

0800c594 <_read_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4d07      	ldr	r5, [pc, #28]	; (800c5b4 <_read_r+0x20>)
 800c598:	4604      	mov	r4, r0
 800c59a:	4608      	mov	r0, r1
 800c59c:	4611      	mov	r1, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7f4 fee4 	bl	8001370 <_read>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_read_r+0x1e>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_read_r+0x1e>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	200009b8 	.word	0x200009b8

0800c5b8 <__ascii_wctomb>:
 800c5b8:	b149      	cbz	r1, 800c5ce <__ascii_wctomb+0x16>
 800c5ba:	2aff      	cmp	r2, #255	; 0xff
 800c5bc:	bf85      	ittet	hi
 800c5be:	238a      	movhi	r3, #138	; 0x8a
 800c5c0:	6003      	strhi	r3, [r0, #0]
 800c5c2:	700a      	strbls	r2, [r1, #0]
 800c5c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5c8:	bf98      	it	ls
 800c5ca:	2001      	movls	r0, #1
 800c5cc:	4770      	bx	lr
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	4770      	bx	lr

0800c5d2 <abort>:
 800c5d2:	b508      	push	{r3, lr}
 800c5d4:	2006      	movs	r0, #6
 800c5d6:	f000 f82b 	bl	800c630 <raise>
 800c5da:	2001      	movs	r0, #1
 800c5dc:	f000 f854 	bl	800c688 <_exit>

0800c5e0 <_raise_r>:
 800c5e0:	291f      	cmp	r1, #31
 800c5e2:	b538      	push	{r3, r4, r5, lr}
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	460d      	mov	r5, r1
 800c5e8:	d904      	bls.n	800c5f4 <_raise_r+0x14>
 800c5ea:	2316      	movs	r3, #22
 800c5ec:	6003      	str	r3, [r0, #0]
 800c5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5f6:	b112      	cbz	r2, 800c5fe <_raise_r+0x1e>
 800c5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5fc:	b94b      	cbnz	r3, 800c612 <_raise_r+0x32>
 800c5fe:	4620      	mov	r0, r4
 800c600:	f000 f830 	bl	800c664 <_getpid_r>
 800c604:	462a      	mov	r2, r5
 800c606:	4601      	mov	r1, r0
 800c608:	4620      	mov	r0, r4
 800c60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c60e:	f000 b817 	b.w	800c640 <_kill_r>
 800c612:	2b01      	cmp	r3, #1
 800c614:	d00a      	beq.n	800c62c <_raise_r+0x4c>
 800c616:	1c59      	adds	r1, r3, #1
 800c618:	d103      	bne.n	800c622 <_raise_r+0x42>
 800c61a:	2316      	movs	r3, #22
 800c61c:	6003      	str	r3, [r0, #0]
 800c61e:	2001      	movs	r0, #1
 800c620:	e7e7      	b.n	800c5f2 <_raise_r+0x12>
 800c622:	2400      	movs	r4, #0
 800c624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c628:	4628      	mov	r0, r5
 800c62a:	4798      	blx	r3
 800c62c:	2000      	movs	r0, #0
 800c62e:	e7e0      	b.n	800c5f2 <_raise_r+0x12>

0800c630 <raise>:
 800c630:	4b02      	ldr	r3, [pc, #8]	; (800c63c <raise+0xc>)
 800c632:	4601      	mov	r1, r0
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f7ff bfd3 	b.w	800c5e0 <_raise_r>
 800c63a:	bf00      	nop
 800c63c:	200002c8 	.word	0x200002c8

0800c640 <_kill_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d07      	ldr	r5, [pc, #28]	; (800c660 <_kill_r+0x20>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	4611      	mov	r1, r2
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	f000 f813 	bl	800c678 <_kill>
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	d102      	bne.n	800c65c <_kill_r+0x1c>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	b103      	cbz	r3, 800c65c <_kill_r+0x1c>
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	bf00      	nop
 800c660:	200009b8 	.word	0x200009b8

0800c664 <_getpid_r>:
 800c664:	f000 b800 	b.w	800c668 <_getpid>

0800c668 <_getpid>:
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <_getpid+0xc>)
 800c66a:	2258      	movs	r2, #88	; 0x58
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295
 800c672:	4770      	bx	lr
 800c674:	200009b8 	.word	0x200009b8

0800c678 <_kill>:
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <_kill+0xc>)
 800c67a:	2258      	movs	r2, #88	; 0x58
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	4770      	bx	lr
 800c684:	200009b8 	.word	0x200009b8

0800c688 <_exit>:
 800c688:	e7fe      	b.n	800c688 <_exit>
	...

0800c68c <_init>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	bf00      	nop
 800c690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c692:	bc08      	pop	{r3}
 800c694:	469e      	mov	lr, r3
 800c696:	4770      	bx	lr

0800c698 <_fini>:
 800c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69a:	bf00      	nop
 800c69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69e:	bc08      	pop	{r3}
 800c6a0:	469e      	mov	lr, r3
 800c6a2:	4770      	bx	lr
