
hc-sr04_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006728  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080068f8  080068f8  000168f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d1c  08006d1c  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000022c  08006f50  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006f50  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c4f  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d7  00000000  00000000  00031eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00034488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023979  00000000  00000000  00035e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001138d  00000000  00000000  00059789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2898  00000000  00000000  0006ab16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d3ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  0013d404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00141b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00141b9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068e0 	.word	0x080068e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	080068e0 	.word	0x080068e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <initUltrasons>:
				.Trigger_GPIO_Port = GPIOB, .Trigger_GPIO_Pin = GPIO_PIN_12,
				.Echo_GPIO_Port = GPIOB, .Echo_GPIO_Pin = GPIO_PIN_13
		}
};

uint8_t initUltrasons(void){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
	save_cpt_rising = 0;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <initUltrasons+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
	cpt_us_global = 0;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <initUltrasons+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	801a      	strh	r2, [r3, #0]
	indexUS = 0;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <initUltrasons+0x54>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	stepUS = STEP_RESET;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <initUltrasons+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	e008      	b.n	8000fb6 <initUltrasons+0x36>
		distUS[i] = 999;
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <initUltrasons+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <initUltrasons+0x60>)
 8000fae:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NB_OF_US_SENSORS; i++){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	ddf3      	ble.n	8000fa4 <initUltrasons+0x24>
	}

	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000026c 	.word	0x2000026c
 8000fd0:	20000268 	.word	0x20000268
 8000fd4:	20000265 	.word	0x20000265
 8000fd8:	20000264 	.word	0x20000264
 8000fdc:	20000254 	.word	0x20000254
 8000fe0:	4479c000 	.word	0x4479c000
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <processUltrasons>:

uint8_t processUltrasons(SensorUS Sensor){
 8000fe8:	b084      	sub	sp, #16
 8000fea:	b598      	push	{r3, r4, r7, lr}
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	f107 0410 	add.w	r4, r7, #16
 8000ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(HAL_GPIO_ReadPin(Sensor.Echo_GPIO_Port, Sensor.Echo_GPIO_Pin)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	8c3a      	ldrh	r2, [r7, #32]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 f83d 	bl	800207c <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <processUltrasons+0x38>
			&& stepUS == STEP_TRIG){
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <processUltrasons+0xe8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d107      	bne.n	8001020 <processUltrasons+0x38>

			save_cpt_rising = cpt_us_global;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <processUltrasons+0xec>)
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <processUltrasons+0xf0>)
 8001016:	801a      	strh	r2, [r3, #0]
			stepUS = STEP_RISE;
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <processUltrasons+0xe8>)
 800101a:	2202      	movs	r2, #2
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e04c      	b.n	80010ba <processUltrasons+0xd2>
	}
	else if (!HAL_GPIO_ReadPin(Sensor.Echo_GPIO_Port, Sensor.Echo_GPIO_Pin)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	8c3a      	ldrh	r2, [r7, #32]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f828 	bl	800207c <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d143      	bne.n	80010ba <processUltrasons+0xd2>
			&& stepUS == STEP_RISE){
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <processUltrasons+0xe8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d13f      	bne.n	80010ba <processUltrasons+0xd2>

	    	distUS[Sensor.sensorID] = ((float)(cpt_us_global - save_cpt_rising) * 0.034) / 2.0;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <processUltrasons+0xec>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <processUltrasons+0xf0>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104e:	ee17 0a90 	vmov	r0, s15
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	a31c      	add	r3, pc, #112	; (adr r3, 80010c8 <processUltrasons+0xe0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff faec 	bl	8000638 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001070:	f7ff fc0c 	bl	800088c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	7c39      	ldrb	r1, [r7, #16]
 800107a:	460c      	mov	r4, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fdb2 	bl	8000be8 <__aeabi_d2f>
 8001084:	4602      	mov	r2, r0
 8001086:	4915      	ldr	r1, [pc, #84]	; (80010dc <processUltrasons+0xf4>)
 8001088:	00a3      	lsls	r3, r4, #2
 800108a:	440b      	add	r3, r1
 800108c:	601a      	str	r2, [r3, #0]

	    	indexUS++;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <processUltrasons+0xf8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <processUltrasons+0xf8>)
 8001098:	701a      	strb	r2, [r3, #0]
	    	if(indexUS >= NB_OF_US_SENSORS) indexUS = 0;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <processUltrasons+0xf8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d902      	bls.n	80010a8 <processUltrasons+0xc0>
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <processUltrasons+0xf8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	    	stepUS = STEP_RESET;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <processUltrasons+0xe8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	    	cpt_us_global = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <processUltrasons+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	801a      	strh	r2, [r3, #0]
	    	save_cpt_rising = 0;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <processUltrasons+0xf0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	801a      	strh	r2, [r3, #0]
	    }

	return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 80010c4:	b004      	add	sp, #16
 80010c6:	4770      	bx	lr
 80010c8:	b020c49c 	.word	0xb020c49c
 80010cc:	3fa16872 	.word	0x3fa16872
 80010d0:	20000264 	.word	0x20000264
 80010d4:	20000268 	.word	0x20000268
 80010d8:	2000026c 	.word	0x2000026c
 80010dc:	20000254 	.word	0x20000254
 80010e0:	20000265 	.word	0x20000265

080010e4 <debugUltrasons>:
	}

	return 0;
}

uint8_t debugUltrasons(void){
 80010e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af06      	add	r7, sp, #24
#if DEBUG
	printf("dist us %.3f\t%.3f\t%.3f\t%.3f\r\n", distUS[0], distUS[1], distUS[2], distUS[3]);
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <debugUltrasons+0x60>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa49 	bl	8000588 <__aeabi_f2d>
 80010f6:	4682      	mov	sl, r0
 80010f8:	468b      	mov	fp, r1
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <debugUltrasons+0x60>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa42 	bl	8000588 <__aeabi_f2d>
 8001104:	4604      	mov	r4, r0
 8001106:	460d      	mov	r5, r1
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <debugUltrasons+0x60>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa3b 	bl	8000588 <__aeabi_f2d>
 8001112:	4680      	mov	r8, r0
 8001114:	4689      	mov	r9, r1
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <debugUltrasons+0x60>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa34 	bl	8000588 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001128:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800112c:	e9cd 4500 	strd	r4, r5, [sp]
 8001130:	4652      	mov	r2, sl
 8001132:	465b      	mov	r3, fp
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <debugUltrasons+0x64>)
 8001136:	f003 fa7b 	bl	8004630 <iprintf>
	//HAL_Delay(100);
#endif
	return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001144:	20000254 	.word	0x20000254
 8001148:	080068f8 	.word	0x080068f8

0800114c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <MX_GPIO_Init+0x120>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a40      	ldr	r2, [pc, #256]	; (800126c <MX_GPIO_Init+0x120>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <MX_GPIO_Init+0x120>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <MX_GPIO_Init+0x120>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a39      	ldr	r2, [pc, #228]	; (800126c <MX_GPIO_Init+0x120>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <MX_GPIO_Init+0x120>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <MX_GPIO_Init+0x120>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a32      	ldr	r2, [pc, #200]	; (800126c <MX_GPIO_Init+0x120>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <MX_GPIO_Init+0x120>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_GPIO_Init+0x120>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a2b      	ldr	r2, [pc, #172]	; (800126c <MX_GPIO_Init+0x120>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_GPIO_Init+0x120>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG2_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80011d8:	4825      	ldr	r0, [pc, #148]	; (8001270 <MX_GPIO_Init+0x124>)
 80011da:	f000 ff67 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIGGER_Pin|TRIG3_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f241 0104 	movw	r1, #4100	; 0x1004
 80011e4:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_GPIO_Init+0x128>)
 80011e6:	f000 ff61 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIG2_Pin;
 80011ea:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <MX_GPIO_Init+0x124>)
 8001204:	f000 fda6 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ECHO1_Pin|ECHO4_Pin|ECHO3_Pin|ECHO2_Pin;
 8001208:	f24e 0302 	movw	r3, #57346	; 0xe002
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800120e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_GPIO_Init+0x128>)
 8001220:	f000 fd98 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGGER_Pin|TRIG3_Pin;
 8001224:	f241 0304 	movw	r3, #4100	; 0x1004
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_GPIO_Init+0x128>)
 800123e:	f000 fd89 	bl	8001d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2007      	movs	r0, #7
 8001248:	f000 fd4d 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800124c:	2007      	movs	r0, #7
 800124e:	f000 fd66 	bl	8001d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f000 fd45 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125c:	2028      	movs	r0, #40	; 0x28
 800125e:	f000 fd5e 	bl	8001d1e <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fbc2 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f818 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f7ff ff62 	bl	800114c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001288:	f000 fb20 	bl	80018cc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800128c:	f000 faaa 	bl	80017e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <main+0x34>)
 8001292:	f000 f925 	bl	80014e0 <RetargetInit>

  HAL_TIM_Base_Start_IT(&htim4); // 1us
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <main+0x38>)
 8001298:	f001 fd44 	bl	8002d24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  initUltrasons();
 800129c:	f7ff fe70 	bl	8000f80 <initUltrasons>

  while (1)
  {
	  debugUltrasons();
 80012a0:	f7ff ff20 	bl	80010e4 <debugUltrasons>
	  HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f000 fc1f 	bl	8001ae8 <HAL_Delay>
	  debugUltrasons();
 80012aa:	e7f9      	b.n	80012a0 <main+0x28>
 80012ac:	200002bc 	.word	0x200002bc
 80012b0:	20000274 	.word	0x20000274

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2234      	movs	r2, #52	; 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fd42 	bl	8003d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <SystemClock_Config+0xe0>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <SystemClock_Config+0xe0>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <SystemClock_Config+0xe0>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <SystemClock_Config+0xe4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <SystemClock_Config+0xe4>)
 80012fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <SystemClock_Config+0xe4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001318:	2310      	movs	r3, #16
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001324:	2310      	movs	r3, #16
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001328:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800132c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132e:	2302      	movs	r3, #2
 8001330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001332:	2302      	movs	r3, #2
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fa02 	bl	8002748 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800134a:	f000 f8c3 	bl	80014d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800134e:	f000 fedf 	bl	8002110 <HAL_PWREx_EnableOverDrive>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001358:	f000 f8bc 	bl	80014d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135c:	230f      	movs	r3, #15
 800135e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	2302      	movs	r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001368:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800136c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2105      	movs	r1, #5
 800137a:	4618      	mov	r0, r3
 800137c:	f000 ff18 	bl	80021b0 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001386:	f000 f8a5 	bl	80014d4 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	; 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d11b      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		cpt_us_global++;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013b8:	801a      	strh	r2, [r3, #0]

		if(cpt_us_global >= 0 && cpt_us_global < 10){ // && stepUS == STEP_RESET
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	2b09      	cmp	r3, #9
 80013c0:	d805      	bhi.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x32>
//			HAL_GPIO_WritePin(Sensors[indexUS].Trigger_GPIO_Port,
//					Sensors[indexUS].Trigger_GPIO_Port, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2104      	movs	r1, #4
 80013c6:	481a      	ldr	r0, [pc, #104]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013c8:	f000 fe70 	bl	80020ac <HAL_GPIO_WritePin>
 80013cc:	e00b      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		}
		else {
//			HAL_GPIO_WritePin(Sensors[indexUS].Trigger_GPIO_Port,
//					Sensors[indexUS].Trigger_GPIO_Port, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2104      	movs	r1, #4
 80013d2:	4817      	ldr	r0, [pc, #92]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013d4:	f000 fe6a 	bl	80020ac <HAL_GPIO_WritePin>

			if(stepUS == STEP_RESET) stepUS = STEP_TRIG;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
		}
	}


	if(cpt_us_global >= 10000){
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d916      	bls.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x84>
		cpt_us_global = 0;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
		distUS[indexUS]=999;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001404:	601a      	str	r2, [r3, #0]
		indexUS++;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001410:	701a      	strb	r2, [r3, #0]
		if(indexUS >= NB_OF_US_SENSORS) indexUS = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d902      	bls.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x84>
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
	}

}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40000800 	.word	0x40000800
 800142c:	20000268 	.word	0x20000268
 8001430:	40020400 	.word	0x40020400
 8001434:	20000264 	.word	0x20000264
 8001438:	20000265 	.word	0x20000265
 800143c:	20000254 	.word	0x20000254
 8001440:	4479c000 	.word	0x4479c000

08001444 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == GPIO_PIN_1 && indexUS == US_FRONT_LEFT)
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d109      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x24>
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_GPIO_EXTI_Callback+0x88>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d105      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x24>
  {
	  processUltrasons(Sensors[US_FRONT_LEFT]);
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001464:	f7ff fdc0 	bl	8000fe8 <processUltrasons>
  }

  if(GPIO_Pin == GPIO_PIN_15 && indexUS == US_FRONT_RIGHT)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800146e:	d10a      	bne.n	8001486 <HAL_GPIO_EXTI_Callback+0x42>
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_GPIO_EXTI_Callback+0x88>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_GPIO_EXTI_Callback+0x42>
  {
	  processUltrasons(Sensors[US_FRONT_RIGHT]);
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800147a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	3314      	adds	r3, #20
 8001480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001482:	f7ff fdb1 	bl	8000fe8 <processUltrasons>
  }

  if(GPIO_Pin == GPIO_PIN_14 && indexUS == US_BACK_LEFT)
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800148c:	d10a      	bne.n	80014a4 <HAL_GPIO_EXTI_Callback+0x60>
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_GPIO_EXTI_Callback+0x88>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d106      	bne.n	80014a4 <HAL_GPIO_EXTI_Callback+0x60>
  {
	  processUltrasons(Sensors[US_BACK_LEFT]);
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800149a:	9200      	str	r2, [sp, #0]
 800149c:	3328      	adds	r3, #40	; 0x28
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	f7ff fda2 	bl	8000fe8 <processUltrasons>
  }

  if(GPIO_Pin == GPIO_PIN_13 && indexUS == US_BACK_RIGHT)
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014aa:	d10a      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x7e>
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_GPIO_EXTI_Callback+0x88>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d106      	bne.n	80014c2 <HAL_GPIO_EXTI_Callback+0x7e>
  {
	  processUltrasons(Sensors[US_BACK_RIGHT]);
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_GPIO_EXTI_Callback+0x8c>)
 80014b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b8:	9200      	str	r2, [sp, #0]
 80014ba:	333c      	adds	r3, #60	; 0x3c
 80014bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014be:	f7ff fd93 	bl	8000fe8 <processUltrasons>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000265 	.word	0x20000265
 80014d0:	20000000 	.word	0x20000000

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <RetargetInit+0x28>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <RetargetInit+0x2c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2202      	movs	r2, #2
 80014f8:	2100      	movs	r1, #0
 80014fa:	f003 f8b1 	bl	8004660 <setvbuf>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000270 	.word	0x20000270
 800150c:	2000005c 	.word	0x2000005c

08001510 <_isatty>:

int _isatty(int fd) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db04      	blt.n	8001528 <_isatty+0x18>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	dc01      	bgt.n	8001528 <_isatty+0x18>
    return 1;
 8001524:	2301      	movs	r3, #1
 8001526:	e005      	b.n	8001534 <_isatty+0x24>

  errno = EBADF;
 8001528:	f002 fbe6 	bl	8003cf8 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	2209      	movs	r2, #9
 8001530:	601a      	str	r2, [r3, #0]
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_write>:

int _write(int fd, char* ptr, int len) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d002      	beq.n	8001554 <_write+0x18>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d111      	bne.n	8001578 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <_write+0x54>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	b29a      	uxth	r2, r3
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	f002 f85e 	bl	8003622 <HAL_UART_Transmit>
 8001566:	4603      	mov	r3, r0
 8001568:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <_write+0x38>
      return len;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	e008      	b.n	8001586 <_write+0x4a>
    else
      return EIO;
 8001574:	2305      	movs	r3, #5
 8001576:	e006      	b.n	8001586 <_write+0x4a>
  }
  errno = EBADF;
 8001578:	f002 fbbe 	bl	8003cf8 <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	2209      	movs	r2, #9
 8001580:	601a      	str	r2, [r3, #0]
  return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000270 	.word	0x20000270

08001594 <_close>:

int _close(int fd) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db04      	blt.n	80015ac <_close+0x18>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	dc01      	bgt.n	80015ac <_close+0x18>
    return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e006      	b.n	80015ba <_close+0x26>

  errno = EBADF;
 80015ac:	f002 fba4 	bl	8003cf8 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2209      	movs	r2, #9
 80015b4:	601a      	str	r2, [r3, #0]
  return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80015ce:	f002 fb93 	bl	8003cf8 <__errno>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2209      	movs	r2, #9
 80015d6:	601a      	str	r2, [r3, #0]
  return -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_read>:

int _read(int fd, char* ptr, int len) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d110      	bne.n	8001618 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <_read+0x4c>)
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	2201      	movs	r2, #1
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	f002 f8a0 	bl	8003746 <HAL_UART_Receive>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <_read+0x30>
      return 1;
 8001610:	2301      	movs	r3, #1
 8001612:	e008      	b.n	8001626 <_read+0x42>
    else
      return EIO;
 8001614:	2305      	movs	r3, #5
 8001616:	e006      	b.n	8001626 <_read+0x42>
  }
  errno = EBADF;
 8001618:	f002 fb6e 	bl	8003cf8 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	2209      	movs	r2, #9
 8001620:	601a      	str	r2, [r3, #0]
  return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000270 	.word	0x20000270

08001634 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db08      	blt.n	8001656 <_fstat+0x22>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	dc05      	bgt.n	8001656 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001650:	605a      	str	r2, [r3, #4]
    return 0;
 8001652:	2300      	movs	r3, #0
 8001654:	e005      	b.n	8001662 <_fstat+0x2e>
  }

  errno = EBADF;
 8001656:	f002 fb4f 	bl	8003cf8 <__errno>
 800165a:	4603      	mov	r3, r0
 800165c:	2209      	movs	r2, #9
 800165e:	601a      	str	r2, [r3, #0]
  return 0;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016aa:	2007      	movs	r0, #7
 80016ac:	f000 fb10 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f9ce 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001714:	2002      	movs	r0, #2
 8001716:	f000 fce3 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <TIM4_IRQHandler+0x10>)
 8001726:	f001 fb6d 	bl	8002e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000274 	.word	0x20000274

08001734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800173c:	f000 fcd0 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001740:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001744:	f000 fccc 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800174c:	f000 fcc8 	bl	80020e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f002 fab8 	bl	8003cf8 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20020000 	.word	0x20020000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	20000248 	.word	0x20000248
 80017bc:	20000318 	.word	0x20000318

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	463b      	mov	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <MX_TIM4_Init+0x90>)
 8001802:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <MX_TIM4_Init+0x94>)
 8001804:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MX_TIM4_Init+0x90>)
 8001808:	2201      	movs	r2, #1
 800180a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <MX_TIM4_Init+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_TIM4_Init+0x90>)
 8001814:	225a      	movs	r2, #90	; 0x5a
 8001816:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <MX_TIM4_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_TIM4_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001824:	4813      	ldr	r0, [pc, #76]	; (8001874 <MX_TIM4_Init+0x90>)
 8001826:	f001 fa2d 	bl	8002c84 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001830:	f7ff fe50 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_TIM4_Init+0x90>)
 8001842:	f001 fbe7 	bl	8003014 <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800184c:	f7ff fe42 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_TIM4_Init+0x90>)
 800185e:	f001 fe03 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001868:	f7ff fe34 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000274 	.word	0x20000274
 8001878:	40000800 	.word	0x40000800

0800187c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_TIM_Base_MspInit+0x48>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d115      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_TIM_Base_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	201e      	movs	r0, #30
 80018b0:	f000 fa19 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018b4:	201e      	movs	r0, #30
 80018b6:	f000 fa32 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40000800 	.word	0x40000800
 80018c8:	40023800 	.word	0x40023800

080018cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <MX_USART2_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 8001904:	f001 fe40 	bl	8003588 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f7ff fde1 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002bc 	.word	0x200002bc
 800191c:	40004400 	.word	0x40004400

08001920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0x88>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <HAL_UART_MspInit+0x8c>)
 8001996:	f000 f9dd 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff fef1 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f002 f991 	bl	8003d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fc49 	bl	8001278 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80019f4:	08006d24 	.word	0x08006d24
  ldr r2, =_sbss
 80019f8:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80019fc:	20000314 	.word	0x20000314

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f94f 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fe18 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f967 	bl	8001d3a <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f92f 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000050 	.word	0x20000050
 8001aa0:	20000058 	.word	0x20000058
 8001aa4:	20000054 	.word	0x20000054

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000058 	.word	0x20000058
 8001acc:	20000300 	.word	0x20000300

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000300 	.word	0x20000300

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000058 	.word	0x20000058

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e165      	b.n	800203c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8154 	bne.w	8002036 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80ae 	beq.w	8002036 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <HAL_GPIO_Init+0x300>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_GPIO_Init+0x304>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4f      	ldr	r2, [pc, #316]	; (800205c <HAL_GPIO_Init+0x308>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4e      	ldr	r2, [pc, #312]	; (8002060 <HAL_GPIO_Init+0x30c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x216>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x310>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x212>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x314>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x20e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_GPIO_Init+0x318>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x20a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_GPIO_Init+0x31c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x206>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_GPIO_Init+0x320>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x202>
 8001f52:	2306      	movs	r3, #6
 8001f54:	e00c      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e00a      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e008      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f62:	2303      	movs	r3, #3
 8001f64:	e004      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x21c>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	f002 0203 	and.w	r2, r2, #3
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f80:	4935      	ldr	r1, [pc, #212]	; (8002058 <HAL_GPIO_Init+0x304>)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb2:	4a31      	ldr	r2, [pc, #196]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_GPIO_Init+0x324>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x324>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_GPIO_Init+0x324>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3301      	adds	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	f67f ae96 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40013800 	.word	0x40013800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40021400 	.word	0x40021400
 8002074:	40021800 	.word	0x40021800
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e001      	b.n	800209e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f9a0 	bl	8001444 <HAL_GPIO_EXTI_Callback>
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40013c00 	.word	0x40013c00

08002110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800213c:	f7ff fcc8 	bl	8001ad0 <HAL_GetTick>
 8002140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002142:	e009      	b.n	8002158 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002144:	f7ff fcc4 	bl	8001ad0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002152:	d901      	bls.n	8002158 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e01f      	b.n	8002198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d1ee      	bne.n	8002144 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff fcb0 	bl	8001ad0 <HAL_GetTick>
 8002170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002172:	e009      	b.n	8002188 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002174:	f7ff fcac 	bl	8001ad0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002182:	d901      	bls.n	8002188 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e007      	b.n	8002198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002194:	d1ee      	bne.n	8002174 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	420e0040 	.word	0x420e0040
 80021a8:	40007000 	.word	0x40007000
 80021ac:	420e0044 	.word	0x420e0044

080021b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0cc      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d90c      	bls.n	80021ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b8      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800220e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a52      	ldr	r2, [pc, #328]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002228:	4b50      	ldr	r3, [pc, #320]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	494d      	ldr	r1, [pc, #308]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d044      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d119      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e07f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d003      	beq.n	800226e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e067      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4934      	ldr	r1, [pc, #208]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7ff fc16 	bl	8001ad0 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7ff fc12 	bl	8001ad0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e04f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d20c      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e032      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4916      	ldr	r1, [pc, #88]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	490e      	ldr	r1, [pc, #56]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002336:	f000 f855 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	490a      	ldr	r1, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fb76 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023c00 	.word	0x40023c00
 800236c:	40023800 	.word	0x40023800
 8002370:	08006918 	.word	0x08006918
 8002374:	20000050 	.word	0x20000050
 8002378:	20000054 	.word	0x20000054

0800237c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000050 	.word	0x20000050

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08006928 	.word	0x08006928

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffdc 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0b5b      	lsrs	r3, r3, #13
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	08006928 	.word	0x08006928

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002400:	4bce      	ldr	r3, [pc, #824]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b0c      	cmp	r3, #12
 800240a:	f200 818d 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x344>
 800240e:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <HAL_RCC_GetSysClockFreq+0x30>)
 8002410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002414:	08002449 	.word	0x08002449
 8002418:	08002729 	.word	0x08002729
 800241c:	08002729 	.word	0x08002729
 8002420:	08002729 	.word	0x08002729
 8002424:	0800244f 	.word	0x0800244f
 8002428:	08002729 	.word	0x08002729
 800242c:	08002729 	.word	0x08002729
 8002430:	08002729 	.word	0x08002729
 8002434:	08002455 	.word	0x08002455
 8002438:	08002729 	.word	0x08002729
 800243c:	08002729 	.word	0x08002729
 8002440:	08002729 	.word	0x08002729
 8002444:	080025c9 	.word	0x080025c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4bbd      	ldr	r3, [pc, #756]	; (8002740 <HAL_RCC_GetSysClockFreq+0x35c>)
 800244a:	61bb      	str	r3, [r7, #24]
       break;
 800244c:	e16f      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4bbd      	ldr	r3, [pc, #756]	; (8002744 <HAL_RCC_GetSysClockFreq+0x360>)
 8002450:	61bb      	str	r3, [r7, #24]
      break;
 8002452:	e16c      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4bb9      	ldr	r3, [pc, #740]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4bb7      	ldr	r3, [pc, #732]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d053      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4bb4      	ldr	r3, [pc, #720]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	461a      	mov	r2, r3
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	f240 10ff 	movw	r0, #511	; 0x1ff
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	ea02 0400 	and.w	r4, r2, r0
 8002482:	603c      	str	r4, [r7, #0]
 8002484:	400b      	ands	r3, r1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	e9d7 4500 	ldrd	r4, r5, [r7]
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	014b      	lsls	r3, r1, #5
 800249a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800249e:	0142      	lsls	r2, r0, #5
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	4623      	mov	r3, r4
 80024a6:	1ac0      	subs	r0, r0, r3
 80024a8:	462b      	mov	r3, r5
 80024aa:	eb61 0103 	sbc.w	r1, r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	018b      	lsls	r3, r1, #6
 80024b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024bc:	0182      	lsls	r2, r0, #6
 80024be:	1a12      	subs	r2, r2, r0
 80024c0:	eb63 0301 	sbc.w	r3, r3, r1
 80024c4:	f04f 0000 	mov.w	r0, #0
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	00d9      	lsls	r1, r3, #3
 80024ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024d2:	00d0      	lsls	r0, r2, #3
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4621      	mov	r1, r4
 80024da:	1852      	adds	r2, r2, r1
 80024dc:	4629      	mov	r1, r5
 80024de:	eb43 0101 	adc.w	r1, r3, r1
 80024e2:	460b      	mov	r3, r1
 80024e4:	f04f 0000 	mov.w	r0, #0
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	0259      	lsls	r1, r3, #9
 80024ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024f2:	0250      	lsls	r0, r2, #9
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	461a      	mov	r2, r3
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	f7fe fbc0 	bl	8000c88 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	e04c      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	461a      	mov	r2, r3
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	ea02 0a00 	and.w	sl, r2, r0
 800252a:	ea03 0b01 	and.w	fp, r3, r1
 800252e:	4650      	mov	r0, sl
 8002530:	4659      	mov	r1, fp
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	014b      	lsls	r3, r1, #5
 800253c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002540:	0142      	lsls	r2, r0, #5
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	ebb0 000a 	subs.w	r0, r0, sl
 800254a:	eb61 010b 	sbc.w	r1, r1, fp
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	018b      	lsls	r3, r1, #6
 8002558:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800255c:	0182      	lsls	r2, r0, #6
 800255e:	1a12      	subs	r2, r2, r0
 8002560:	eb63 0301 	sbc.w	r3, r3, r1
 8002564:	f04f 0000 	mov.w	r0, #0
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	00d9      	lsls	r1, r3, #3
 800256e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002572:	00d0      	lsls	r0, r2, #3
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	eb12 020a 	adds.w	r2, r2, sl
 800257c:	eb43 030b 	adc.w	r3, r3, fp
 8002580:	f04f 0000 	mov.w	r0, #0
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	0299      	lsls	r1, r3, #10
 800258a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800258e:	0290      	lsls	r0, r2, #10
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	461a      	mov	r2, r3
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f7fe fb72 	bl	8000c88 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	61bb      	str	r3, [r7, #24]
      break;
 80025c6:	e0b2      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d2:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d04d      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	461a      	mov	r2, r3
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	ea02 0800 	and.w	r8, r2, r0
 80025f6:	ea03 0901 	and.w	r9, r3, r1
 80025fa:	4640      	mov	r0, r8
 80025fc:	4649      	mov	r1, r9
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	014b      	lsls	r3, r1, #5
 8002608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800260c:	0142      	lsls	r2, r0, #5
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	ebb0 0008 	subs.w	r0, r0, r8
 8002616:	eb61 0109 	sbc.w	r1, r1, r9
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002628:	0182      	lsls	r2, r0, #6
 800262a:	1a12      	subs	r2, r2, r0
 800262c:	eb63 0301 	sbc.w	r3, r3, r1
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	00d9      	lsls	r1, r3, #3
 800263a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800263e:	00d0      	lsls	r0, r2, #3
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	eb12 0208 	adds.w	r2, r2, r8
 8002648:	eb43 0309 	adc.w	r3, r3, r9
 800264c:	f04f 0000 	mov.w	r0, #0
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	0259      	lsls	r1, r3, #9
 8002656:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800265a:	0250      	lsls	r0, r2, #9
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	461a      	mov	r2, r3
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	f7fe fb0c 	bl	8000c88 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	e04a      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	461a      	mov	r2, r3
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	ea02 0400 	and.w	r4, r2, r0
 8002692:	ea03 0501 	and.w	r5, r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	014b      	lsls	r3, r1, #5
 80026a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026a8:	0142      	lsls	r2, r0, #5
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	1b00      	subs	r0, r0, r4
 80026b0:	eb61 0105 	sbc.w	r1, r1, r5
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	018b      	lsls	r3, r1, #6
 80026be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026c2:	0182      	lsls	r2, r0, #6
 80026c4:	1a12      	subs	r2, r2, r0
 80026c6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ca:	f04f 0000 	mov.w	r0, #0
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	00d9      	lsls	r1, r3, #3
 80026d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d8:	00d0      	lsls	r0, r2, #3
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	1912      	adds	r2, r2, r4
 80026e0:	eb45 0303 	adc.w	r3, r5, r3
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	0299      	lsls	r1, r3, #10
 80026ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026f2:	0290      	lsls	r0, r2, #10
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	461a      	mov	r2, r3
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f7fe fac0 	bl	8000c88 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0f1b      	lsrs	r3, r3, #28
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	61bb      	str	r3, [r7, #24]
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetSysClockFreq+0x35c>)
 800272a:	61bb      	str	r3, [r7, #24]
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	69bb      	ldr	r3, [r7, #24]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e28d      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8083 	beq.w	800286e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002768:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d019      	beq.n	80027a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002774:	4b91      	ldr	r3, [pc, #580]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800277c:	2b08      	cmp	r3, #8
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002780:	4b8e      	ldr	r3, [pc, #568]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b84      	ldr	r3, [pc, #528]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05b      	beq.n	800286c <HAL_RCC_OscConfig+0x124>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d157      	bne.n	800286c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e25a      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x90>
 80027ca:	4b7c      	ldr	r3, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7b      	ldr	r2, [pc, #492]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xcc>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0xb4>
 80027e2:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a72      	ldr	r2, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xcc>
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6b      	ldr	r2, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff f958 	bl	8001ad0 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff f954 	bl	8001ad0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e21f      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b61      	ldr	r3, [pc, #388]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xdc>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f944 	bl	8001ad0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f940 	bl	8001ad0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e20b      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b57      	ldr	r3, [pc, #348]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x104>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06f      	beq.n	800295a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800287a:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d017      	beq.n	80028b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002886:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d11c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028aa:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x186>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1d3      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	e03a      	b.n	800295a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCC_OscConfig+0x278>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7ff f8ed 	bl	8001ad0 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fa:	f7ff f8e9 	bl	8001ad0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1b4      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4925      	ldr	r1, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x278>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7ff f8cc 	bl	8001ad0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7ff f8c8 	bl	8001ad0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e193      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d036      	beq.n	80029d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x27c>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7ff f8ac 	bl	8001ad0 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7ff f8a8 	bl	8001ad0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e173      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x234>
 800299a:	e01b      	b.n	80029d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x27c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7ff f895 	bl	8001ad0 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	e00e      	b.n	80029c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7ff f891 	bl	8001ad0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d907      	bls.n	80029c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e15c      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
 80029c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ea      	bne.n	80029aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8097 	beq.w	8002b10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b83      	ldr	r3, [pc, #524]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	4b7f      	ldr	r3, [pc, #508]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a7e      	ldr	r2, [pc, #504]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b7c      	ldr	r3, [pc, #496]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <HAL_RCC_OscConfig+0x4b0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d118      	bne.n	8002a50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x4b0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a75      	ldr	r2, [pc, #468]	; (8002bf8 <HAL_RCC_OscConfig+0x4b0>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7ff f851 	bl	8001ad0 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7ff f84d 	bl	8001ad0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e118      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <HAL_RCC_OscConfig+0x4b0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x31e>
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x358>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x340>
 8002a6e:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a60      	ldr	r2, [pc, #384]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a5d      	ldr	r2, [pc, #372]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x358>
 8002a88:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a59      	ldr	r2, [pc, #356]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
 8002a94:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4a56      	ldr	r2, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	f023 0304 	bic.w	r3, r3, #4
 8002a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7ff f812 	bl	8001ad0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f80e 	bl	8001ad0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0d7      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ee      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x368>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fffc 	bl	8001ad0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fff8 	bl	8001ad0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0c1      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af2:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ee      	bne.n	8002adc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a3a      	ldr	r2, [pc, #232]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80ad 	beq.w	8002c74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d060      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d145      	bne.n	8002bba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_RCC_OscConfig+0x4b4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe ffcc 	bl	8001ad0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7fe ffc8 	bl	8001ad0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e093      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	071b      	lsls	r3, r3, #28
 8002b86:	491b      	ldr	r1, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x4b4>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe ff9d 	bl	8001ad0 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe ff99 	bl	8001ad0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e064      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x452>
 8002bb8:	e05c      	b.n	8002c74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_RCC_OscConfig+0x4b4>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff86 	bl	8001ad0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe ff82 	bl	8001ad0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04d      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x480>
 8002be6:	e045      	b.n	8002c74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e040      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_RCC_OscConfig+0x538>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d030      	beq.n	8002c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d129      	bne.n	8002c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d122      	bne.n	8002c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d119      	bne.n	8002c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10f      	bne.n	8002c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e041      	b.n	8002d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fde6 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fa96 	bl	80031f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e04e      	b.n	8002dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d01d      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_TIM_Base_Start_IT+0xc8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d010      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e007      	b.n	8002dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40001800 	.word	0x40001800

08002e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0202 	mvn.w	r2, #2
 8002e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9b5 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9a7 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9b8 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0204 	mvn.w	r2, #4
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f98b 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f97d 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f98e 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0208 	mvn.w	r2, #8
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f961 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f953 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f964 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0210 	mvn.w	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2208      	movs	r2, #8
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f937 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f929 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f93a 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fa0a 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fae0 	bl	8003574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8ff 	bl	80031de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0220 	mvn.w	r2, #32
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 faaa 	bl	8003560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIM_ConfigClockSource+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e0b4      	b.n	800319a <HAL_TIM_ConfigClockSource+0x186>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003068:	d03e      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0xd4>
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306e:	f200 8087 	bhi.w	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	f000 8086 	beq.w	8003186 <HAL_TIM_ConfigClockSource+0x172>
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d87f      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d01a      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xa6>
 8003084:	2b70      	cmp	r3, #112	; 0x70
 8003086:	d87b      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d050      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x11a>
 800308c:	2b60      	cmp	r3, #96	; 0x60
 800308e:	d877      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b50      	cmp	r3, #80	; 0x50
 8003092:	d03c      	beq.n	800310e <HAL_TIM_ConfigClockSource+0xfa>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d873      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d058      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x13a>
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d86f      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d064      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	d86b      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d060      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d867      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d05c      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d05a      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030b8:	e062      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f000 f9ad 	bl	8003428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	609a      	str	r2, [r3, #8]
      break;
 80030e6:	e04f      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f000 f996 	bl	8003428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800310a:	609a      	str	r2, [r3, #8]
      break;
 800310c:	e03c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	f000 f90a 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2150      	movs	r1, #80	; 0x50
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f963 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800312c:	e02c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	f000 f929 	bl	8003392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2160      	movs	r1, #96	; 0x60
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f953 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800314c:	e01c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	461a      	mov	r2, r3
 800315c:	f000 f8ea 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f943 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800316c:	e00c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 f93a 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800317e:	e003      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e000      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a40      	ldr	r2, [pc, #256]	; (8003308 <TIM_Base_SetConfig+0x114>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d00f      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3d      	ldr	r2, [pc, #244]	; (800330c <TIM_Base_SetConfig+0x118>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <TIM_Base_SetConfig+0x11c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <TIM_Base_SetConfig+0x120>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <TIM_Base_SetConfig+0x124>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <TIM_Base_SetConfig+0x114>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02b      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d027      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2c      	ldr	r2, [pc, #176]	; (800330c <TIM_Base_SetConfig+0x118>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d023      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <TIM_Base_SetConfig+0x11c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01f      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <TIM_Base_SetConfig+0x120>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01b      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <TIM_Base_SetConfig+0x124>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d017      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a28      	ldr	r2, [pc, #160]	; (800331c <TIM_Base_SetConfig+0x128>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <TIM_Base_SetConfig+0x12c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00f      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a26      	ldr	r2, [pc, #152]	; (8003324 <TIM_Base_SetConfig+0x130>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <TIM_Base_SetConfig+0x134>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <TIM_Base_SetConfig+0x138>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <TIM_Base_SetConfig+0x13c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <TIM_Base_SetConfig+0x114>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0xf8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <TIM_Base_SetConfig+0x124>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d103      	bne.n	80032f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	615a      	str	r2, [r3, #20]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40010400 	.word	0x40010400
 800331c:	40014000 	.word	0x40014000
 8003320:	40014400 	.word	0x40014400
 8003324:	40014800 	.word	0x40014800
 8003328:	40001800 	.word	0x40001800
 800332c:	40001c00 	.word	0x40001c00
 8003330:	40002000 	.word	0x40002000

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0210 	bic.w	r2, r3, #16
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	031b      	lsls	r3, r3, #12
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	f043 0307 	orr.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	431a      	orrs	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e05a      	b.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d01d      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40014000 	.word	0x40014000
 800355c:	40001800 	.word	0x40001800

08003560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e03f      	b.n	800361a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe f9b6 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9cb 	bl	8003968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b08a      	sub	sp, #40	; 0x28
 8003626:	af02      	add	r7, sp, #8
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	d17c      	bne.n	800373c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit+0x2c>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e075      	b.n	800373e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x3e>
 800365c:	2302      	movs	r3, #2
 800365e:	e06e      	b.n	800373e <HAL_UART_Transmit+0x11c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2221      	movs	r2, #33	; 0x21
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003676:	f7fe fa2b 	bl	8001ad0 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d108      	bne.n	80036a4 <HAL_UART_Transmit+0x82>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e003      	b.n	80036ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036b4:	e02a      	b.n	800370c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8e2 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e036      	b.n	800373e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3302      	adds	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e007      	b.n	80036fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1cf      	bne.n	80036b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f8b2 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e006      	b.n	800373e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	; 0x28
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	f040 808c 	bne.w	8003880 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Receive+0x2e>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e084      	b.n	8003882 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_UART_Receive+0x40>
 8003782:	2302      	movs	r3, #2
 8003784:	e07d      	b.n	8003882 <HAL_UART_Receive+0x13c>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2222      	movs	r2, #34	; 0x22
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037a2:	f7fe f995 	bl	8001ad0 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d108      	bne.n	80037d0 <HAL_UART_Receive+0x8a>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	e003      	b.n	80037d8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80037e0:	e043      	b.n	800386a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2120      	movs	r1, #32
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f84c 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e042      	b.n	8003882 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380e:	b29a      	uxth	r2, r3
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	3302      	adds	r3, #2
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	e01f      	b.n	800385c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d007      	beq.n	8003836 <HAL_UART_Receive+0xf0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_UART_Receive+0xfe>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e008      	b.n	8003856 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003850:	b2da      	uxtb	r2, r3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3301      	adds	r3, #1
 800385a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1b6      	bne.n	80037e2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b090      	sub	sp, #64	; 0x40
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4613      	mov	r3, r2
 8003898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389a:	e050      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d04c      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x30>
 80038aa:	f7fe f911 	bl	8001ad0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d241      	bcs.n	800393e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038da:	637a      	str	r2, [r7, #52]	; 0x34
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	613b      	str	r3, [r7, #16]
   return(result);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800390e:	623a      	str	r2, [r7, #32]
 8003910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	69f9      	ldr	r1, [r7, #28]
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	61bb      	str	r3, [r7, #24]
   return(result);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e5      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e00f      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d09f      	beq.n	800389c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3740      	adds	r7, #64	; 0x40
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	b09f      	sub	sp, #124	; 0x7c
 800396e:	af00      	add	r7, sp, #0
 8003970:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	68d9      	ldr	r1, [r3, #12]
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	ea40 0301 	orr.w	r3, r0, r1
 8003988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	431a      	orrs	r2, r3
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4313      	orrs	r3, r2
 80039a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039ac:	f021 010c 	bic.w	r1, r1, #12
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b6:	430b      	orrs	r3, r1
 80039b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	6999      	ldr	r1, [r3, #24]
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	ea40 0301 	orr.w	r3, r0, r1
 80039d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4bc5      	ldr	r3, [pc, #788]	; (8003cec <UART_SetConfig+0x384>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d004      	beq.n	80039e6 <UART_SetConfig+0x7e>
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4bc3      	ldr	r3, [pc, #780]	; (8003cf0 <UART_SetConfig+0x388>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d103      	bne.n	80039ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e6:	f7fe fce9 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 80039ea:	6778      	str	r0, [r7, #116]	; 0x74
 80039ec:	e002      	b.n	80039f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7fe fcd1 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80039f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fc:	f040 80b6 	bne.w	8003b6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a02:	461c      	mov	r4, r3
 8003a04:	f04f 0500 	mov.w	r5, #0
 8003a08:	4622      	mov	r2, r4
 8003a0a:	462b      	mov	r3, r5
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a10:	415b      	adcs	r3, r3
 8003a12:	647b      	str	r3, [r7, #68]	; 0x44
 8003a14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a18:	1912      	adds	r2, r2, r4
 8003a1a:	eb45 0303 	adc.w	r3, r5, r3
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	00d9      	lsls	r1, r3, #3
 8003a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a2c:	00d0      	lsls	r0, r2, #3
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	1911      	adds	r1, r2, r4
 8003a34:	6639      	str	r1, [r7, #96]	; 0x60
 8003a36:	416b      	adcs	r3, r5
 8003a38:	667b      	str	r3, [r7, #100]	; 0x64
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	1891      	adds	r1, r2, r2
 8003a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a54:	f7fd f918 	bl	8000c88 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011e      	lsls	r6, r3, #4
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	461c      	mov	r4, r3
 8003a6a:	f04f 0500 	mov.w	r5, #0
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	1891      	adds	r1, r2, r2
 8003a74:	6339      	str	r1, [r7, #48]	; 0x30
 8003a76:	415b      	adcs	r3, r3
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a7e:	1912      	adds	r2, r2, r4
 8003a80:	eb45 0303 	adc.w	r3, r5, r3
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	00d9      	lsls	r1, r3, #3
 8003a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a92:	00d0      	lsls	r0, r2, #3
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	1911      	adds	r1, r2, r4
 8003a9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a9c:	416b      	adcs	r3, r5
 8003a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	62b9      	str	r1, [r7, #40]	; 0x28
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ab6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003aba:	f7fd f8e5 	bl	8000c88 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	; 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a87      	ldr	r2, [pc, #540]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae4:	441e      	add	r6, r3
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	1894      	adds	r4, r2, r2
 8003af4:	623c      	str	r4, [r7, #32]
 8003af6:	415b      	adcs	r3, r3
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003afe:	1812      	adds	r2, r2, r0
 8003b00:	eb41 0303 	adc.w	r3, r1, r3
 8003b04:	f04f 0400 	mov.w	r4, #0
 8003b08:	f04f 0500 	mov.w	r5, #0
 8003b0c:	00dd      	lsls	r5, r3, #3
 8003b0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b12:	00d4      	lsls	r4, r2, #3
 8003b14:	4622      	mov	r2, r4
 8003b16:	462b      	mov	r3, r5
 8003b18:	1814      	adds	r4, r2, r0
 8003b1a:	653c      	str	r4, [r7, #80]	; 0x50
 8003b1c:	414b      	adcs	r3, r1
 8003b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	1891      	adds	r1, r2, r2
 8003b2c:	61b9      	str	r1, [r7, #24]
 8003b2e:	415b      	adcs	r3, r3
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b3a:	f7fd f8a5 	bl	8000c88 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	3332      	adds	r3, #50	; 0x32
 8003b56:	4a67      	ldr	r2, [pc, #412]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 0207 	and.w	r2, r3, #7
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4432      	add	r2, r6
 8003b68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b6a:	e0b9      	b.n	8003ce0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6e:	461c      	mov	r4, r3
 8003b70:	f04f 0500 	mov.w	r5, #0
 8003b74:	4622      	mov	r2, r4
 8003b76:	462b      	mov	r3, r5
 8003b78:	1891      	adds	r1, r2, r2
 8003b7a:	6139      	str	r1, [r7, #16]
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b84:	1912      	adds	r2, r2, r4
 8003b86:	eb45 0303 	adc.w	r3, r5, r3
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	00d9      	lsls	r1, r3, #3
 8003b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b98:	00d0      	lsls	r0, r2, #3
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	eb12 0804 	adds.w	r8, r2, r4
 8003ba2:	eb43 0905 	adc.w	r9, r3, r5
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bbe:	0082      	lsls	r2, r0, #2
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	f7fd f860 	bl	8000c88 <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003bce:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	011e      	lsls	r6, r3, #4
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	1894      	adds	r4, r2, r2
 8003be4:	60bc      	str	r4, [r7, #8]
 8003be6:	415b      	adcs	r3, r3
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bee:	1812      	adds	r2, r2, r0
 8003bf0:	eb41 0303 	adc.w	r3, r1, r3
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	f04f 0500 	mov.w	r5, #0
 8003bfc:	00dd      	lsls	r5, r3, #3
 8003bfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c02:	00d4      	lsls	r4, r2, #3
 8003c04:	4622      	mov	r2, r4
 8003c06:	462b      	mov	r3, r5
 8003c08:	1814      	adds	r4, r2, r0
 8003c0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c28:	0082      	lsls	r2, r0, #2
 8003c2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c2e:	f7fd f82b 	bl	8000c88 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	3332      	adds	r3, #50	; 0x32
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c56:	441e      	add	r6, r3
 8003c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	1894      	adds	r4, r2, r2
 8003c66:	603c      	str	r4, [r7, #0]
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c70:	1812      	adds	r2, r2, r0
 8003c72:	eb41 0303 	adc.w	r3, r1, r3
 8003c76:	f04f 0400 	mov.w	r4, #0
 8003c7a:	f04f 0500 	mov.w	r5, #0
 8003c7e:	00dd      	lsls	r5, r3, #3
 8003c80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c84:	00d4      	lsls	r4, r2, #3
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb12 0a00 	adds.w	sl, r2, r0
 8003c8e:	eb43 0b01 	adc.w	fp, r3, r1
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003caa:	0082      	lsls	r2, r0, #2
 8003cac:	4650      	mov	r0, sl
 8003cae:	4659      	mov	r1, fp
 8003cb0:	f7fc ffea 	bl	8000c88 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003cba:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2164      	movs	r1, #100	; 0x64
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	3332      	adds	r3, #50	; 0x32
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <UART_SetConfig+0x38c>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4432      	add	r2, r6
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	377c      	adds	r7, #124	; 0x7c
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	51eb851f 	.word	0x51eb851f

08003cf8 <__errno>:
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <__errno+0x8>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	2000005c 	.word	0x2000005c

08003d04 <__libc_init_array>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4d0d      	ldr	r5, [pc, #52]	; (8003d3c <__libc_init_array+0x38>)
 8003d08:	4c0d      	ldr	r4, [pc, #52]	; (8003d40 <__libc_init_array+0x3c>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	2600      	movs	r6, #0
 8003d10:	42a6      	cmp	r6, r4
 8003d12:	d109      	bne.n	8003d28 <__libc_init_array+0x24>
 8003d14:	4d0b      	ldr	r5, [pc, #44]	; (8003d44 <__libc_init_array+0x40>)
 8003d16:	4c0c      	ldr	r4, [pc, #48]	; (8003d48 <__libc_init_array+0x44>)
 8003d18:	f002 fde2 	bl	80068e0 <_init>
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	2600      	movs	r6, #0
 8003d22:	42a6      	cmp	r6, r4
 8003d24:	d105      	bne.n	8003d32 <__libc_init_array+0x2e>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2c:	4798      	blx	r3
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7ee      	b.n	8003d10 <__libc_init_array+0xc>
 8003d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d36:	4798      	blx	r3
 8003d38:	3601      	adds	r6, #1
 8003d3a:	e7f2      	b.n	8003d22 <__libc_init_array+0x1e>
 8003d3c:	08006d1c 	.word	0x08006d1c
 8003d40:	08006d1c 	.word	0x08006d1c
 8003d44:	08006d1c 	.word	0x08006d1c
 8003d48:	08006d20 	.word	0x08006d20

08003d4c <memset>:
 8003d4c:	4402      	add	r2, r0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d100      	bne.n	8003d56 <memset+0xa>
 8003d54:	4770      	bx	lr
 8003d56:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5a:	e7f9      	b.n	8003d50 <memset+0x4>

08003d5c <__cvt>:
 8003d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	ec55 4b10 	vmov	r4, r5, d0
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	460e      	mov	r6, r1
 8003d68:	4619      	mov	r1, r3
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	bfbb      	ittet	lt
 8003d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d72:	461d      	movlt	r5, r3
 8003d74:	2300      	movge	r3, #0
 8003d76:	232d      	movlt	r3, #45	; 0x2d
 8003d78:	700b      	strb	r3, [r1, #0]
 8003d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d80:	4691      	mov	r9, r2
 8003d82:	f023 0820 	bic.w	r8, r3, #32
 8003d86:	bfbc      	itt	lt
 8003d88:	4622      	movlt	r2, r4
 8003d8a:	4614      	movlt	r4, r2
 8003d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d90:	d005      	beq.n	8003d9e <__cvt+0x42>
 8003d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d96:	d100      	bne.n	8003d9a <__cvt+0x3e>
 8003d98:	3601      	adds	r6, #1
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	e000      	b.n	8003da0 <__cvt+0x44>
 8003d9e:	2103      	movs	r1, #3
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	ab02      	add	r3, sp, #8
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	ec45 4b10 	vmov	d0, r4, r5
 8003dac:	4653      	mov	r3, sl
 8003dae:	4632      	mov	r2, r6
 8003db0:	f000 fdaa 	bl	8004908 <_dtoa_r>
 8003db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003db8:	4607      	mov	r7, r0
 8003dba:	d102      	bne.n	8003dc2 <__cvt+0x66>
 8003dbc:	f019 0f01 	tst.w	r9, #1
 8003dc0:	d022      	beq.n	8003e08 <__cvt+0xac>
 8003dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dc6:	eb07 0906 	add.w	r9, r7, r6
 8003dca:	d110      	bne.n	8003dee <__cvt+0x92>
 8003dcc:	783b      	ldrb	r3, [r7, #0]
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d10a      	bne.n	8003de8 <__cvt+0x8c>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fe95 	bl	8000b08 <__aeabi_dcmpeq>
 8003dde:	b918      	cbnz	r0, 8003de8 <__cvt+0x8c>
 8003de0:	f1c6 0601 	rsb	r6, r6, #1
 8003de4:	f8ca 6000 	str.w	r6, [sl]
 8003de8:	f8da 3000 	ldr.w	r3, [sl]
 8003dec:	4499      	add	r9, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8003dfa:	b108      	cbz	r0, 8003e00 <__cvt+0xa4>
 8003dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e00:	2230      	movs	r2, #48	; 0x30
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	454b      	cmp	r3, r9
 8003e06:	d307      	bcc.n	8003e18 <__cvt+0xbc>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e0c:	1bdb      	subs	r3, r3, r7
 8003e0e:	4638      	mov	r0, r7
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	b004      	add	sp, #16
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	9103      	str	r1, [sp, #12]
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e7f0      	b.n	8003e02 <__cvt+0xa6>

08003e20 <__exponent>:
 8003e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e22:	4603      	mov	r3, r0
 8003e24:	2900      	cmp	r1, #0
 8003e26:	bfb8      	it	lt
 8003e28:	4249      	neglt	r1, r1
 8003e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003e2e:	bfb4      	ite	lt
 8003e30:	222d      	movlt	r2, #45	; 0x2d
 8003e32:	222b      	movge	r2, #43	; 0x2b
 8003e34:	2909      	cmp	r1, #9
 8003e36:	7042      	strb	r2, [r0, #1]
 8003e38:	dd2a      	ble.n	8003e90 <__exponent+0x70>
 8003e3a:	f10d 0407 	add.w	r4, sp, #7
 8003e3e:	46a4      	mov	ip, r4
 8003e40:	270a      	movs	r7, #10
 8003e42:	46a6      	mov	lr, r4
 8003e44:	460a      	mov	r2, r1
 8003e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003e4e:	3530      	adds	r5, #48	; 0x30
 8003e50:	2a63      	cmp	r2, #99	; 0x63
 8003e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	dcf1      	bgt.n	8003e42 <__exponent+0x22>
 8003e5e:	3130      	adds	r1, #48	; 0x30
 8003e60:	f1ae 0502 	sub.w	r5, lr, #2
 8003e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e68:	1c44      	adds	r4, r0, #1
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4561      	cmp	r1, ip
 8003e6e:	d30a      	bcc.n	8003e86 <__exponent+0x66>
 8003e70:	f10d 0209 	add.w	r2, sp, #9
 8003e74:	eba2 020e 	sub.w	r2, r2, lr
 8003e78:	4565      	cmp	r5, ip
 8003e7a:	bf88      	it	hi
 8003e7c:	2200      	movhi	r2, #0
 8003e7e:	4413      	add	r3, r2
 8003e80:	1a18      	subs	r0, r3, r0
 8003e82:	b003      	add	sp, #12
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e8e:	e7ed      	b.n	8003e6c <__exponent+0x4c>
 8003e90:	2330      	movs	r3, #48	; 0x30
 8003e92:	3130      	adds	r1, #48	; 0x30
 8003e94:	7083      	strb	r3, [r0, #2]
 8003e96:	70c1      	strb	r1, [r0, #3]
 8003e98:	1d03      	adds	r3, r0, #4
 8003e9a:	e7f1      	b.n	8003e80 <__exponent+0x60>

08003e9c <_printf_float>:
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	ed2d 8b02 	vpush	{d8}
 8003ea4:	b08d      	sub	sp, #52	; 0x34
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003eac:	4616      	mov	r6, r2
 8003eae:	461f      	mov	r7, r3
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	f001 fccd 	bl	8005850 <_localeconv_r>
 8003eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8003eba:	4650      	mov	r0, sl
 8003ebc:	f7fc f9a8 	bl	8000210 <strlen>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	9305      	str	r3, [sp, #20]
 8003ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	f103 0208 	add.w	r2, r3, #8
 8003eda:	f8c8 2000 	str.w	r2, [r8]
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003eee:	9307      	str	r3, [sp, #28]
 8003ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ef4:	ee08 0a10 	vmov	s16, r0
 8003ef8:	4b9f      	ldr	r3, [pc, #636]	; (8004178 <_printf_float+0x2dc>)
 8003efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	f7fc fe33 	bl	8000b6c <__aeabi_dcmpun>
 8003f06:	bb88      	cbnz	r0, 8003f6c <_printf_float+0xd0>
 8003f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f0c:	4b9a      	ldr	r3, [pc, #616]	; (8004178 <_printf_float+0x2dc>)
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	f7fc fe0d 	bl	8000b30 <__aeabi_dcmple>
 8003f16:	bb48      	cbnz	r0, 8003f6c <_printf_float+0xd0>
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc fdfc 	bl	8000b1c <__aeabi_dcmplt>
 8003f24:	b110      	cbz	r0, 8003f2c <_printf_float+0x90>
 8003f26:	232d      	movs	r3, #45	; 0x2d
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <_printf_float+0x2e0>)
 8003f2e:	4894      	ldr	r0, [pc, #592]	; (8004180 <_printf_float+0x2e4>)
 8003f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f34:	bf94      	ite	ls
 8003f36:	4698      	movls	r8, r3
 8003f38:	4680      	movhi	r8, r0
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	6123      	str	r3, [r4, #16]
 8003f3e:	9b05      	ldr	r3, [sp, #20]
 8003f40:	f023 0204 	bic.w	r2, r3, #4
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	f04f 0900 	mov.w	r9, #0
 8003f4a:	9700      	str	r7, [sp, #0]
 8003f4c:	4633      	mov	r3, r6
 8003f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f50:	4621      	mov	r1, r4
 8003f52:	4628      	mov	r0, r5
 8003f54:	f000 f9d8 	bl	8004308 <_printf_common>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	f040 8090 	bne.w	800407e <_printf_float+0x1e2>
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f62:	b00d      	add	sp, #52	; 0x34
 8003f64:	ecbd 8b02 	vpop	{d8}
 8003f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc fdfa 	bl	8000b6c <__aeabi_dcmpun>
 8003f78:	b140      	cbz	r0, 8003f8c <_printf_float+0xf0>
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bfbc      	itt	lt
 8003f80:	232d      	movlt	r3, #45	; 0x2d
 8003f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f86:	487f      	ldr	r0, [pc, #508]	; (8004184 <_printf_float+0x2e8>)
 8003f88:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <_printf_float+0x2ec>)
 8003f8a:	e7d1      	b.n	8003f30 <_printf_float+0x94>
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f92:	9206      	str	r2, [sp, #24]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	d13f      	bne.n	8004018 <_printf_float+0x17c>
 8003f98:	2306      	movs	r3, #6
 8003f9a:	6063      	str	r3, [r4, #4]
 8003f9c:	9b05      	ldr	r3, [sp, #20]
 8003f9e:	6861      	ldr	r1, [r4, #4]
 8003fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8003faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fae:	ab09      	add	r3, sp, #36	; 0x24
 8003fb0:	ec49 8b10 	vmov	d0, r8, r9
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6022      	str	r2, [r4, #0]
 8003fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f7ff fecd 	bl	8003d5c <__cvt>
 8003fc2:	9b06      	ldr	r3, [sp, #24]
 8003fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fc6:	2b47      	cmp	r3, #71	; 0x47
 8003fc8:	4680      	mov	r8, r0
 8003fca:	d108      	bne.n	8003fde <_printf_float+0x142>
 8003fcc:	1cc8      	adds	r0, r1, #3
 8003fce:	db02      	blt.n	8003fd6 <_printf_float+0x13a>
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	dd41      	ble.n	800405a <_printf_float+0x1be>
 8003fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003fda:	fa5f fb8b 	uxtb.w	fp, fp
 8003fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fe2:	d820      	bhi.n	8004026 <_printf_float+0x18a>
 8003fe4:	3901      	subs	r1, #1
 8003fe6:	465a      	mov	r2, fp
 8003fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fec:	9109      	str	r1, [sp, #36]	; 0x24
 8003fee:	f7ff ff17 	bl	8003e20 <__exponent>
 8003ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ff4:	1813      	adds	r3, r2, r0
 8003ff6:	2a01      	cmp	r2, #1
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	6123      	str	r3, [r4, #16]
 8003ffc:	dc02      	bgt.n	8004004 <_printf_float+0x168>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	07d2      	lsls	r2, r2, #31
 8004002:	d501      	bpl.n	8004008 <_printf_float+0x16c>
 8004004:	3301      	adds	r3, #1
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800400c:	2b00      	cmp	r3, #0
 800400e:	d09c      	beq.n	8003f4a <_printf_float+0xae>
 8004010:	232d      	movs	r3, #45	; 0x2d
 8004012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004016:	e798      	b.n	8003f4a <_printf_float+0xae>
 8004018:	9a06      	ldr	r2, [sp, #24]
 800401a:	2a47      	cmp	r2, #71	; 0x47
 800401c:	d1be      	bne.n	8003f9c <_printf_float+0x100>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1bc      	bne.n	8003f9c <_printf_float+0x100>
 8004022:	2301      	movs	r3, #1
 8004024:	e7b9      	b.n	8003f9a <_printf_float+0xfe>
 8004026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800402a:	d118      	bne.n	800405e <_printf_float+0x1c2>
 800402c:	2900      	cmp	r1, #0
 800402e:	6863      	ldr	r3, [r4, #4]
 8004030:	dd0b      	ble.n	800404a <_printf_float+0x1ae>
 8004032:	6121      	str	r1, [r4, #16]
 8004034:	b913      	cbnz	r3, 800403c <_printf_float+0x1a0>
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	07d0      	lsls	r0, r2, #31
 800403a:	d502      	bpl.n	8004042 <_printf_float+0x1a6>
 800403c:	3301      	adds	r3, #1
 800403e:	440b      	add	r3, r1
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	65a1      	str	r1, [r4, #88]	; 0x58
 8004044:	f04f 0900 	mov.w	r9, #0
 8004048:	e7de      	b.n	8004008 <_printf_float+0x16c>
 800404a:	b913      	cbnz	r3, 8004052 <_printf_float+0x1b6>
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	07d2      	lsls	r2, r2, #31
 8004050:	d501      	bpl.n	8004056 <_printf_float+0x1ba>
 8004052:	3302      	adds	r3, #2
 8004054:	e7f4      	b.n	8004040 <_printf_float+0x1a4>
 8004056:	2301      	movs	r3, #1
 8004058:	e7f2      	b.n	8004040 <_printf_float+0x1a4>
 800405a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004060:	4299      	cmp	r1, r3
 8004062:	db05      	blt.n	8004070 <_printf_float+0x1d4>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	6121      	str	r1, [r4, #16]
 8004068:	07d8      	lsls	r0, r3, #31
 800406a:	d5ea      	bpl.n	8004042 <_printf_float+0x1a6>
 800406c:	1c4b      	adds	r3, r1, #1
 800406e:	e7e7      	b.n	8004040 <_printf_float+0x1a4>
 8004070:	2900      	cmp	r1, #0
 8004072:	bfd4      	ite	le
 8004074:	f1c1 0202 	rsble	r2, r1, #2
 8004078:	2201      	movgt	r2, #1
 800407a:	4413      	add	r3, r2
 800407c:	e7e0      	b.n	8004040 <_printf_float+0x1a4>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	055a      	lsls	r2, r3, #21
 8004082:	d407      	bmi.n	8004094 <_printf_float+0x1f8>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	4642      	mov	r2, r8
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	d12c      	bne.n	80040ec <_printf_float+0x250>
 8004092:	e764      	b.n	8003f5e <_printf_float+0xc2>
 8004094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004098:	f240 80e0 	bls.w	800425c <_printf_float+0x3c0>
 800409c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040a0:	2200      	movs	r2, #0
 80040a2:	2300      	movs	r3, #0
 80040a4:	f7fc fd30 	bl	8000b08 <__aeabi_dcmpeq>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d034      	beq.n	8004116 <_printf_float+0x27a>
 80040ac:	4a37      	ldr	r2, [pc, #220]	; (800418c <_printf_float+0x2f0>)
 80040ae:	2301      	movs	r3, #1
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	f43f af51 	beq.w	8003f5e <_printf_float+0xc2>
 80040bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040c0:	429a      	cmp	r2, r3
 80040c2:	db02      	blt.n	80040ca <_printf_float+0x22e>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	07d8      	lsls	r0, r3, #31
 80040c8:	d510      	bpl.n	80040ec <_printf_float+0x250>
 80040ca:	ee18 3a10 	vmov	r3, s16
 80040ce:	4652      	mov	r2, sl
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af41 	beq.w	8003f5e <_printf_float+0xc2>
 80040dc:	f04f 0800 	mov.w	r8, #0
 80040e0:	f104 091a 	add.w	r9, r4, #26
 80040e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4543      	cmp	r3, r8
 80040ea:	dc09      	bgt.n	8004100 <_printf_float+0x264>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	079b      	lsls	r3, r3, #30
 80040f0:	f100 8105 	bmi.w	80042fe <_printf_float+0x462>
 80040f4:	68e0      	ldr	r0, [r4, #12]
 80040f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f8:	4298      	cmp	r0, r3
 80040fa:	bfb8      	it	lt
 80040fc:	4618      	movlt	r0, r3
 80040fe:	e730      	b.n	8003f62 <_printf_float+0xc6>
 8004100:	2301      	movs	r3, #1
 8004102:	464a      	mov	r2, r9
 8004104:	4631      	mov	r1, r6
 8004106:	4628      	mov	r0, r5
 8004108:	47b8      	blx	r7
 800410a:	3001      	adds	r0, #1
 800410c:	f43f af27 	beq.w	8003f5e <_printf_float+0xc2>
 8004110:	f108 0801 	add.w	r8, r8, #1
 8004114:	e7e6      	b.n	80040e4 <_printf_float+0x248>
 8004116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	dc39      	bgt.n	8004190 <_printf_float+0x2f4>
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <_printf_float+0x2f0>)
 800411e:	2301      	movs	r3, #1
 8004120:	4631      	mov	r1, r6
 8004122:	4628      	mov	r0, r5
 8004124:	47b8      	blx	r7
 8004126:	3001      	adds	r0, #1
 8004128:	f43f af19 	beq.w	8003f5e <_printf_float+0xc2>
 800412c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004130:	4313      	orrs	r3, r2
 8004132:	d102      	bne.n	800413a <_printf_float+0x29e>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	07d9      	lsls	r1, r3, #31
 8004138:	d5d8      	bpl.n	80040ec <_printf_float+0x250>
 800413a:	ee18 3a10 	vmov	r3, s16
 800413e:	4652      	mov	r2, sl
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af09 	beq.w	8003f5e <_printf_float+0xc2>
 800414c:	f04f 0900 	mov.w	r9, #0
 8004150:	f104 0a1a 	add.w	sl, r4, #26
 8004154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004156:	425b      	negs	r3, r3
 8004158:	454b      	cmp	r3, r9
 800415a:	dc01      	bgt.n	8004160 <_printf_float+0x2c4>
 800415c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415e:	e792      	b.n	8004086 <_printf_float+0x1ea>
 8004160:	2301      	movs	r3, #1
 8004162:	4652      	mov	r2, sl
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	f43f aef7 	beq.w	8003f5e <_printf_float+0xc2>
 8004170:	f109 0901 	add.w	r9, r9, #1
 8004174:	e7ee      	b.n	8004154 <_printf_float+0x2b8>
 8004176:	bf00      	nop
 8004178:	7fefffff 	.word	0x7fefffff
 800417c:	08006934 	.word	0x08006934
 8004180:	08006938 	.word	0x08006938
 8004184:	08006940 	.word	0x08006940
 8004188:	0800693c 	.word	0x0800693c
 800418c:	08006944 	.word	0x08006944
 8004190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004194:	429a      	cmp	r2, r3
 8004196:	bfa8      	it	ge
 8004198:	461a      	movge	r2, r3
 800419a:	2a00      	cmp	r2, #0
 800419c:	4691      	mov	r9, r2
 800419e:	dc37      	bgt.n	8004210 <_printf_float+0x374>
 80041a0:	f04f 0b00 	mov.w	fp, #0
 80041a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a8:	f104 021a 	add.w	r2, r4, #26
 80041ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	eba3 0309 	sub.w	r3, r3, r9
 80041b4:	455b      	cmp	r3, fp
 80041b6:	dc33      	bgt.n	8004220 <_printf_float+0x384>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	db3b      	blt.n	8004238 <_printf_float+0x39c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07da      	lsls	r2, r3, #31
 80041c4:	d438      	bmi.n	8004238 <_printf_float+0x39c>
 80041c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041c8:	9b05      	ldr	r3, [sp, #20]
 80041ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	eba2 0901 	sub.w	r9, r2, r1
 80041d2:	4599      	cmp	r9, r3
 80041d4:	bfa8      	it	ge
 80041d6:	4699      	movge	r9, r3
 80041d8:	f1b9 0f00 	cmp.w	r9, #0
 80041dc:	dc35      	bgt.n	800424a <_printf_float+0x3ae>
 80041de:	f04f 0800 	mov.w	r8, #0
 80041e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041e6:	f104 0a1a 	add.w	sl, r4, #26
 80041ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	eba3 0309 	sub.w	r3, r3, r9
 80041f4:	4543      	cmp	r3, r8
 80041f6:	f77f af79 	ble.w	80040ec <_printf_float+0x250>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4631      	mov	r1, r6
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	f43f aeaa 	beq.w	8003f5e <_printf_float+0xc2>
 800420a:	f108 0801 	add.w	r8, r8, #1
 800420e:	e7ec      	b.n	80041ea <_printf_float+0x34e>
 8004210:	4613      	mov	r3, r2
 8004212:	4631      	mov	r1, r6
 8004214:	4642      	mov	r2, r8
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	d1c0      	bne.n	80041a0 <_printf_float+0x304>
 800421e:	e69e      	b.n	8003f5e <_printf_float+0xc2>
 8004220:	2301      	movs	r3, #1
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	9205      	str	r2, [sp, #20]
 8004228:	47b8      	blx	r7
 800422a:	3001      	adds	r0, #1
 800422c:	f43f ae97 	beq.w	8003f5e <_printf_float+0xc2>
 8004230:	9a05      	ldr	r2, [sp, #20]
 8004232:	f10b 0b01 	add.w	fp, fp, #1
 8004236:	e7b9      	b.n	80041ac <_printf_float+0x310>
 8004238:	ee18 3a10 	vmov	r3, s16
 800423c:	4652      	mov	r2, sl
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	d1be      	bne.n	80041c6 <_printf_float+0x32a>
 8004248:	e689      	b.n	8003f5e <_printf_float+0xc2>
 800424a:	9a05      	ldr	r2, [sp, #20]
 800424c:	464b      	mov	r3, r9
 800424e:	4442      	add	r2, r8
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	d1c1      	bne.n	80041de <_printf_float+0x342>
 800425a:	e680      	b.n	8003f5e <_printf_float+0xc2>
 800425c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425e:	2a01      	cmp	r2, #1
 8004260:	dc01      	bgt.n	8004266 <_printf_float+0x3ca>
 8004262:	07db      	lsls	r3, r3, #31
 8004264:	d538      	bpl.n	80042d8 <_printf_float+0x43c>
 8004266:	2301      	movs	r3, #1
 8004268:	4642      	mov	r2, r8
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	f43f ae74 	beq.w	8003f5e <_printf_float+0xc2>
 8004276:	ee18 3a10 	vmov	r3, s16
 800427a:	4652      	mov	r2, sl
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	f43f ae6b 	beq.w	8003f5e <_printf_float+0xc2>
 8004288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800428c:	2200      	movs	r2, #0
 800428e:	2300      	movs	r3, #0
 8004290:	f7fc fc3a 	bl	8000b08 <__aeabi_dcmpeq>
 8004294:	b9d8      	cbnz	r0, 80042ce <_printf_float+0x432>
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	f108 0201 	add.w	r2, r8, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	4631      	mov	r1, r6
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	d10e      	bne.n	80042c6 <_printf_float+0x42a>
 80042a8:	e659      	b.n	8003f5e <_printf_float+0xc2>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4652      	mov	r2, sl
 80042ae:	4631      	mov	r1, r6
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b8      	blx	r7
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f ae52 	beq.w	8003f5e <_printf_float+0xc2>
 80042ba:	f108 0801 	add.w	r8, r8, #1
 80042be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4543      	cmp	r3, r8
 80042c4:	dcf1      	bgt.n	80042aa <_printf_float+0x40e>
 80042c6:	464b      	mov	r3, r9
 80042c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042cc:	e6dc      	b.n	8004088 <_printf_float+0x1ec>
 80042ce:	f04f 0800 	mov.w	r8, #0
 80042d2:	f104 0a1a 	add.w	sl, r4, #26
 80042d6:	e7f2      	b.n	80042be <_printf_float+0x422>
 80042d8:	2301      	movs	r3, #1
 80042da:	4642      	mov	r2, r8
 80042dc:	e7df      	b.n	800429e <_printf_float+0x402>
 80042de:	2301      	movs	r3, #1
 80042e0:	464a      	mov	r2, r9
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b8      	blx	r7
 80042e8:	3001      	adds	r0, #1
 80042ea:	f43f ae38 	beq.w	8003f5e <_printf_float+0xc2>
 80042ee:	f108 0801 	add.w	r8, r8, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	4543      	cmp	r3, r8
 80042fa:	dcf0      	bgt.n	80042de <_printf_float+0x442>
 80042fc:	e6fa      	b.n	80040f4 <_printf_float+0x258>
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	f104 0919 	add.w	r9, r4, #25
 8004306:	e7f4      	b.n	80042f2 <_printf_float+0x456>

08004308 <_printf_common>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	4616      	mov	r6, r2
 800430e:	4699      	mov	r9, r3
 8004310:	688a      	ldr	r2, [r1, #8]
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004318:	4293      	cmp	r3, r2
 800431a:	bfb8      	it	lt
 800431c:	4613      	movlt	r3, r2
 800431e:	6033      	str	r3, [r6, #0]
 8004320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004324:	4607      	mov	r7, r0
 8004326:	460c      	mov	r4, r1
 8004328:	b10a      	cbz	r2, 800432e <_printf_common+0x26>
 800432a:	3301      	adds	r3, #1
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	0699      	lsls	r1, r3, #26
 8004332:	bf42      	ittt	mi
 8004334:	6833      	ldrmi	r3, [r6, #0]
 8004336:	3302      	addmi	r3, #2
 8004338:	6033      	strmi	r3, [r6, #0]
 800433a:	6825      	ldr	r5, [r4, #0]
 800433c:	f015 0506 	ands.w	r5, r5, #6
 8004340:	d106      	bne.n	8004350 <_printf_common+0x48>
 8004342:	f104 0a19 	add.w	sl, r4, #25
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	42ab      	cmp	r3, r5
 800434e:	dc26      	bgt.n	800439e <_printf_common+0x96>
 8004350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004354:	1e13      	subs	r3, r2, #0
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	bf18      	it	ne
 800435a:	2301      	movne	r3, #1
 800435c:	0692      	lsls	r2, r2, #26
 800435e:	d42b      	bmi.n	80043b8 <_printf_common+0xb0>
 8004360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004364:	4649      	mov	r1, r9
 8004366:	4638      	mov	r0, r7
 8004368:	47c0      	blx	r8
 800436a:	3001      	adds	r0, #1
 800436c:	d01e      	beq.n	80043ac <_printf_common+0xa4>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	68e5      	ldr	r5, [r4, #12]
 8004372:	6832      	ldr	r2, [r6, #0]
 8004374:	f003 0306 	and.w	r3, r3, #6
 8004378:	2b04      	cmp	r3, #4
 800437a:	bf08      	it	eq
 800437c:	1aad      	subeq	r5, r5, r2
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	6922      	ldr	r2, [r4, #16]
 8004382:	bf0c      	ite	eq
 8004384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004388:	2500      	movne	r5, #0
 800438a:	4293      	cmp	r3, r2
 800438c:	bfc4      	itt	gt
 800438e:	1a9b      	subgt	r3, r3, r2
 8004390:	18ed      	addgt	r5, r5, r3
 8004392:	2600      	movs	r6, #0
 8004394:	341a      	adds	r4, #26
 8004396:	42b5      	cmp	r5, r6
 8004398:	d11a      	bne.n	80043d0 <_printf_common+0xc8>
 800439a:	2000      	movs	r0, #0
 800439c:	e008      	b.n	80043b0 <_printf_common+0xa8>
 800439e:	2301      	movs	r3, #1
 80043a0:	4652      	mov	r2, sl
 80043a2:	4649      	mov	r1, r9
 80043a4:	4638      	mov	r0, r7
 80043a6:	47c0      	blx	r8
 80043a8:	3001      	adds	r0, #1
 80043aa:	d103      	bne.n	80043b4 <_printf_common+0xac>
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b4:	3501      	adds	r5, #1
 80043b6:	e7c6      	b.n	8004346 <_printf_common+0x3e>
 80043b8:	18e1      	adds	r1, r4, r3
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	2030      	movs	r0, #48	; 0x30
 80043be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043c2:	4422      	add	r2, r4
 80043c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043cc:	3302      	adds	r3, #2
 80043ce:	e7c7      	b.n	8004360 <_printf_common+0x58>
 80043d0:	2301      	movs	r3, #1
 80043d2:	4622      	mov	r2, r4
 80043d4:	4649      	mov	r1, r9
 80043d6:	4638      	mov	r0, r7
 80043d8:	47c0      	blx	r8
 80043da:	3001      	adds	r0, #1
 80043dc:	d0e6      	beq.n	80043ac <_printf_common+0xa4>
 80043de:	3601      	adds	r6, #1
 80043e0:	e7d9      	b.n	8004396 <_printf_common+0x8e>
	...

080043e4 <_printf_i>:
 80043e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	4691      	mov	r9, r2
 80043ec:	7e27      	ldrb	r7, [r4, #24]
 80043ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043f0:	2f78      	cmp	r7, #120	; 0x78
 80043f2:	4680      	mov	r8, r0
 80043f4:	469a      	mov	sl, r3
 80043f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043fa:	d807      	bhi.n	800440c <_printf_i+0x28>
 80043fc:	2f62      	cmp	r7, #98	; 0x62
 80043fe:	d80a      	bhi.n	8004416 <_printf_i+0x32>
 8004400:	2f00      	cmp	r7, #0
 8004402:	f000 80d8 	beq.w	80045b6 <_printf_i+0x1d2>
 8004406:	2f58      	cmp	r7, #88	; 0x58
 8004408:	f000 80a3 	beq.w	8004552 <_printf_i+0x16e>
 800440c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004414:	e03a      	b.n	800448c <_printf_i+0xa8>
 8004416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800441a:	2b15      	cmp	r3, #21
 800441c:	d8f6      	bhi.n	800440c <_printf_i+0x28>
 800441e:	a001      	add	r0, pc, #4	; (adr r0, 8004424 <_printf_i+0x40>)
 8004420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004424:	0800447d 	.word	0x0800447d
 8004428:	08004491 	.word	0x08004491
 800442c:	0800440d 	.word	0x0800440d
 8004430:	0800440d 	.word	0x0800440d
 8004434:	0800440d 	.word	0x0800440d
 8004438:	0800440d 	.word	0x0800440d
 800443c:	08004491 	.word	0x08004491
 8004440:	0800440d 	.word	0x0800440d
 8004444:	0800440d 	.word	0x0800440d
 8004448:	0800440d 	.word	0x0800440d
 800444c:	0800440d 	.word	0x0800440d
 8004450:	0800459d 	.word	0x0800459d
 8004454:	080044c1 	.word	0x080044c1
 8004458:	0800457f 	.word	0x0800457f
 800445c:	0800440d 	.word	0x0800440d
 8004460:	0800440d 	.word	0x0800440d
 8004464:	080045bf 	.word	0x080045bf
 8004468:	0800440d 	.word	0x0800440d
 800446c:	080044c1 	.word	0x080044c1
 8004470:	0800440d 	.word	0x0800440d
 8004474:	0800440d 	.word	0x0800440d
 8004478:	08004587 	.word	0x08004587
 800447c:	680b      	ldr	r3, [r1, #0]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	600a      	str	r2, [r1, #0]
 8004484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800448c:	2301      	movs	r3, #1
 800448e:	e0a3      	b.n	80045d8 <_printf_i+0x1f4>
 8004490:	6825      	ldr	r5, [r4, #0]
 8004492:	6808      	ldr	r0, [r1, #0]
 8004494:	062e      	lsls	r6, r5, #24
 8004496:	f100 0304 	add.w	r3, r0, #4
 800449a:	d50a      	bpl.n	80044b2 <_printf_i+0xce>
 800449c:	6805      	ldr	r5, [r0, #0]
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	da03      	bge.n	80044ac <_printf_i+0xc8>
 80044a4:	232d      	movs	r3, #45	; 0x2d
 80044a6:	426d      	negs	r5, r5
 80044a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ac:	485e      	ldr	r0, [pc, #376]	; (8004628 <_printf_i+0x244>)
 80044ae:	230a      	movs	r3, #10
 80044b0:	e019      	b.n	80044e6 <_printf_i+0x102>
 80044b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044b6:	6805      	ldr	r5, [r0, #0]
 80044b8:	600b      	str	r3, [r1, #0]
 80044ba:	bf18      	it	ne
 80044bc:	b22d      	sxthne	r5, r5
 80044be:	e7ef      	b.n	80044a0 <_printf_i+0xbc>
 80044c0:	680b      	ldr	r3, [r1, #0]
 80044c2:	6825      	ldr	r5, [r4, #0]
 80044c4:	1d18      	adds	r0, r3, #4
 80044c6:	6008      	str	r0, [r1, #0]
 80044c8:	0628      	lsls	r0, r5, #24
 80044ca:	d501      	bpl.n	80044d0 <_printf_i+0xec>
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <_printf_i+0xf2>
 80044d0:	0669      	lsls	r1, r5, #25
 80044d2:	d5fb      	bpl.n	80044cc <_printf_i+0xe8>
 80044d4:	881d      	ldrh	r5, [r3, #0]
 80044d6:	4854      	ldr	r0, [pc, #336]	; (8004628 <_printf_i+0x244>)
 80044d8:	2f6f      	cmp	r7, #111	; 0x6f
 80044da:	bf0c      	ite	eq
 80044dc:	2308      	moveq	r3, #8
 80044de:	230a      	movne	r3, #10
 80044e0:	2100      	movs	r1, #0
 80044e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e6:	6866      	ldr	r6, [r4, #4]
 80044e8:	60a6      	str	r6, [r4, #8]
 80044ea:	2e00      	cmp	r6, #0
 80044ec:	bfa2      	ittt	ge
 80044ee:	6821      	ldrge	r1, [r4, #0]
 80044f0:	f021 0104 	bicge.w	r1, r1, #4
 80044f4:	6021      	strge	r1, [r4, #0]
 80044f6:	b90d      	cbnz	r5, 80044fc <_printf_i+0x118>
 80044f8:	2e00      	cmp	r6, #0
 80044fa:	d04d      	beq.n	8004598 <_printf_i+0x1b4>
 80044fc:	4616      	mov	r6, r2
 80044fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004502:	fb03 5711 	mls	r7, r3, r1, r5
 8004506:	5dc7      	ldrb	r7, [r0, r7]
 8004508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800450c:	462f      	mov	r7, r5
 800450e:	42bb      	cmp	r3, r7
 8004510:	460d      	mov	r5, r1
 8004512:	d9f4      	bls.n	80044fe <_printf_i+0x11a>
 8004514:	2b08      	cmp	r3, #8
 8004516:	d10b      	bne.n	8004530 <_printf_i+0x14c>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	07df      	lsls	r7, r3, #31
 800451c:	d508      	bpl.n	8004530 <_printf_i+0x14c>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	6861      	ldr	r1, [r4, #4]
 8004522:	4299      	cmp	r1, r3
 8004524:	bfde      	ittt	le
 8004526:	2330      	movle	r3, #48	; 0x30
 8004528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800452c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004530:	1b92      	subs	r2, r2, r6
 8004532:	6122      	str	r2, [r4, #16]
 8004534:	f8cd a000 	str.w	sl, [sp]
 8004538:	464b      	mov	r3, r9
 800453a:	aa03      	add	r2, sp, #12
 800453c:	4621      	mov	r1, r4
 800453e:	4640      	mov	r0, r8
 8004540:	f7ff fee2 	bl	8004308 <_printf_common>
 8004544:	3001      	adds	r0, #1
 8004546:	d14c      	bne.n	80045e2 <_printf_i+0x1fe>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b004      	add	sp, #16
 800454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004552:	4835      	ldr	r0, [pc, #212]	; (8004628 <_printf_i+0x244>)
 8004554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	680e      	ldr	r6, [r1, #0]
 800455c:	061f      	lsls	r7, r3, #24
 800455e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004562:	600e      	str	r6, [r1, #0]
 8004564:	d514      	bpl.n	8004590 <_printf_i+0x1ac>
 8004566:	07d9      	lsls	r1, r3, #31
 8004568:	bf44      	itt	mi
 800456a:	f043 0320 	orrmi.w	r3, r3, #32
 800456e:	6023      	strmi	r3, [r4, #0]
 8004570:	b91d      	cbnz	r5, 800457a <_printf_i+0x196>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f023 0320 	bic.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	2310      	movs	r3, #16
 800457c:	e7b0      	b.n	80044e0 <_printf_i+0xfc>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f043 0320 	orr.w	r3, r3, #32
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	2378      	movs	r3, #120	; 0x78
 8004588:	4828      	ldr	r0, [pc, #160]	; (800462c <_printf_i+0x248>)
 800458a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800458e:	e7e3      	b.n	8004558 <_printf_i+0x174>
 8004590:	065e      	lsls	r6, r3, #25
 8004592:	bf48      	it	mi
 8004594:	b2ad      	uxthmi	r5, r5
 8004596:	e7e6      	b.n	8004566 <_printf_i+0x182>
 8004598:	4616      	mov	r6, r2
 800459a:	e7bb      	b.n	8004514 <_printf_i+0x130>
 800459c:	680b      	ldr	r3, [r1, #0]
 800459e:	6826      	ldr	r6, [r4, #0]
 80045a0:	6960      	ldr	r0, [r4, #20]
 80045a2:	1d1d      	adds	r5, r3, #4
 80045a4:	600d      	str	r5, [r1, #0]
 80045a6:	0635      	lsls	r5, r6, #24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0x1cc>
 80045ac:	6018      	str	r0, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0x1d2>
 80045b0:	0671      	lsls	r1, r6, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0x1c8>
 80045b4:	8018      	strh	r0, [r3, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	4616      	mov	r6, r2
 80045bc:	e7ba      	b.n	8004534 <_printf_i+0x150>
 80045be:	680b      	ldr	r3, [r1, #0]
 80045c0:	1d1a      	adds	r2, r3, #4
 80045c2:	600a      	str	r2, [r1, #0]
 80045c4:	681e      	ldr	r6, [r3, #0]
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	2100      	movs	r1, #0
 80045ca:	4630      	mov	r0, r6
 80045cc:	f7fb fe28 	bl	8000220 <memchr>
 80045d0:	b108      	cbz	r0, 80045d6 <_printf_i+0x1f2>
 80045d2:	1b80      	subs	r0, r0, r6
 80045d4:	6060      	str	r0, [r4, #4]
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	2300      	movs	r3, #0
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e0:	e7a8      	b.n	8004534 <_printf_i+0x150>
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d0ab      	beq.n	8004548 <_printf_i+0x164>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	079b      	lsls	r3, r3, #30
 80045f4:	d413      	bmi.n	800461e <_printf_i+0x23a>
 80045f6:	68e0      	ldr	r0, [r4, #12]
 80045f8:	9b03      	ldr	r3, [sp, #12]
 80045fa:	4298      	cmp	r0, r3
 80045fc:	bfb8      	it	lt
 80045fe:	4618      	movlt	r0, r3
 8004600:	e7a4      	b.n	800454c <_printf_i+0x168>
 8004602:	2301      	movs	r3, #1
 8004604:	4632      	mov	r2, r6
 8004606:	4649      	mov	r1, r9
 8004608:	4640      	mov	r0, r8
 800460a:	47d0      	blx	sl
 800460c:	3001      	adds	r0, #1
 800460e:	d09b      	beq.n	8004548 <_printf_i+0x164>
 8004610:	3501      	adds	r5, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	9903      	ldr	r1, [sp, #12]
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	42ab      	cmp	r3, r5
 800461a:	dcf2      	bgt.n	8004602 <_printf_i+0x21e>
 800461c:	e7eb      	b.n	80045f6 <_printf_i+0x212>
 800461e:	2500      	movs	r5, #0
 8004620:	f104 0619 	add.w	r6, r4, #25
 8004624:	e7f5      	b.n	8004612 <_printf_i+0x22e>
 8004626:	bf00      	nop
 8004628:	08006946 	.word	0x08006946
 800462c:	08006957 	.word	0x08006957

08004630 <iprintf>:
 8004630:	b40f      	push	{r0, r1, r2, r3}
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <iprintf+0x2c>)
 8004634:	b513      	push	{r0, r1, r4, lr}
 8004636:	681c      	ldr	r4, [r3, #0]
 8004638:	b124      	cbz	r4, 8004644 <iprintf+0x14>
 800463a:	69a3      	ldr	r3, [r4, #24]
 800463c:	b913      	cbnz	r3, 8004644 <iprintf+0x14>
 800463e:	4620      	mov	r0, r4
 8004640:	f001 f868 	bl	8005714 <__sinit>
 8004644:	ab05      	add	r3, sp, #20
 8004646:	9a04      	ldr	r2, [sp, #16]
 8004648:	68a1      	ldr	r1, [r4, #8]
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	4620      	mov	r0, r4
 800464e:	f001 fde3 	bl	8006218 <_vfiprintf_r>
 8004652:	b002      	add	sp, #8
 8004654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004658:	b004      	add	sp, #16
 800465a:	4770      	bx	lr
 800465c:	2000005c 	.word	0x2000005c

08004660 <setvbuf>:
 8004660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004664:	461d      	mov	r5, r3
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <setvbuf+0x17c>)
 8004668:	681f      	ldr	r7, [r3, #0]
 800466a:	4604      	mov	r4, r0
 800466c:	460e      	mov	r6, r1
 800466e:	4690      	mov	r8, r2
 8004670:	b127      	cbz	r7, 800467c <setvbuf+0x1c>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	b913      	cbnz	r3, 800467c <setvbuf+0x1c>
 8004676:	4638      	mov	r0, r7
 8004678:	f001 f84c 	bl	8005714 <__sinit>
 800467c:	4b58      	ldr	r3, [pc, #352]	; (80047e0 <setvbuf+0x180>)
 800467e:	429c      	cmp	r4, r3
 8004680:	d167      	bne.n	8004752 <setvbuf+0xf2>
 8004682:	687c      	ldr	r4, [r7, #4]
 8004684:	f1b8 0f02 	cmp.w	r8, #2
 8004688:	d006      	beq.n	8004698 <setvbuf+0x38>
 800468a:	f1b8 0f01 	cmp.w	r8, #1
 800468e:	f200 809f 	bhi.w	80047d0 <setvbuf+0x170>
 8004692:	2d00      	cmp	r5, #0
 8004694:	f2c0 809c 	blt.w	80047d0 <setvbuf+0x170>
 8004698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800469a:	07db      	lsls	r3, r3, #31
 800469c:	d405      	bmi.n	80046aa <setvbuf+0x4a>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	0598      	lsls	r0, r3, #22
 80046a2:	d402      	bmi.n	80046aa <setvbuf+0x4a>
 80046a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a6:	f001 f8d8 	bl	800585a <__retarget_lock_acquire_recursive>
 80046aa:	4621      	mov	r1, r4
 80046ac:	4638      	mov	r0, r7
 80046ae:	f000 ff9d 	bl	80055ec <_fflush_r>
 80046b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b4:	b141      	cbz	r1, 80046c8 <setvbuf+0x68>
 80046b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046ba:	4299      	cmp	r1, r3
 80046bc:	d002      	beq.n	80046c4 <setvbuf+0x64>
 80046be:	4638      	mov	r0, r7
 80046c0:	f001 fcd6 	bl	8006070 <_free_r>
 80046c4:	2300      	movs	r3, #0
 80046c6:	6363      	str	r3, [r4, #52]	; 0x34
 80046c8:	2300      	movs	r3, #0
 80046ca:	61a3      	str	r3, [r4, #24]
 80046cc:	6063      	str	r3, [r4, #4]
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	0619      	lsls	r1, r3, #24
 80046d2:	d503      	bpl.n	80046dc <setvbuf+0x7c>
 80046d4:	6921      	ldr	r1, [r4, #16]
 80046d6:	4638      	mov	r0, r7
 80046d8:	f001 fcca 	bl	8006070 <_free_r>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	f1b8 0f02 	cmp.w	r8, #2
 80046ea:	81a3      	strh	r3, [r4, #12]
 80046ec:	d06c      	beq.n	80047c8 <setvbuf+0x168>
 80046ee:	ab01      	add	r3, sp, #4
 80046f0:	466a      	mov	r2, sp
 80046f2:	4621      	mov	r1, r4
 80046f4:	4638      	mov	r0, r7
 80046f6:	f001 f8b2 	bl	800585e <__swhatbuf_r>
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	4318      	orrs	r0, r3
 80046fe:	81a0      	strh	r0, [r4, #12]
 8004700:	2d00      	cmp	r5, #0
 8004702:	d130      	bne.n	8004766 <setvbuf+0x106>
 8004704:	9d00      	ldr	r5, [sp, #0]
 8004706:	4628      	mov	r0, r5
 8004708:	f001 f90e 	bl	8005928 <malloc>
 800470c:	4606      	mov	r6, r0
 800470e:	2800      	cmp	r0, #0
 8004710:	d155      	bne.n	80047be <setvbuf+0x15e>
 8004712:	f8dd 9000 	ldr.w	r9, [sp]
 8004716:	45a9      	cmp	r9, r5
 8004718:	d14a      	bne.n	80047b0 <setvbuf+0x150>
 800471a:	f04f 35ff 	mov.w	r5, #4294967295
 800471e:	2200      	movs	r2, #0
 8004720:	60a2      	str	r2, [r4, #8]
 8004722:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004726:	6022      	str	r2, [r4, #0]
 8004728:	6122      	str	r2, [r4, #16]
 800472a:	2201      	movs	r2, #1
 800472c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004730:	6162      	str	r2, [r4, #20]
 8004732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	07d2      	lsls	r2, r2, #31
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	d405      	bmi.n	800474a <setvbuf+0xea>
 800473e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004742:	d102      	bne.n	800474a <setvbuf+0xea>
 8004744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004746:	f001 f889 	bl	800585c <__retarget_lock_release_recursive>
 800474a:	4628      	mov	r0, r5
 800474c:	b003      	add	sp, #12
 800474e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <setvbuf+0x184>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d101      	bne.n	800475c <setvbuf+0xfc>
 8004758:	68bc      	ldr	r4, [r7, #8]
 800475a:	e793      	b.n	8004684 <setvbuf+0x24>
 800475c:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <setvbuf+0x188>)
 800475e:	429c      	cmp	r4, r3
 8004760:	bf08      	it	eq
 8004762:	68fc      	ldreq	r4, [r7, #12]
 8004764:	e78e      	b.n	8004684 <setvbuf+0x24>
 8004766:	2e00      	cmp	r6, #0
 8004768:	d0cd      	beq.n	8004706 <setvbuf+0xa6>
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	b913      	cbnz	r3, 8004774 <setvbuf+0x114>
 800476e:	4638      	mov	r0, r7
 8004770:	f000 ffd0 	bl	8005714 <__sinit>
 8004774:	f1b8 0f01 	cmp.w	r8, #1
 8004778:	bf08      	it	eq
 800477a:	89a3      	ldrheq	r3, [r4, #12]
 800477c:	6026      	str	r6, [r4, #0]
 800477e:	bf04      	itt	eq
 8004780:	f043 0301 	orreq.w	r3, r3, #1
 8004784:	81a3      	strheq	r3, [r4, #12]
 8004786:	89a2      	ldrh	r2, [r4, #12]
 8004788:	f012 0308 	ands.w	r3, r2, #8
 800478c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004790:	d01c      	beq.n	80047cc <setvbuf+0x16c>
 8004792:	07d3      	lsls	r3, r2, #31
 8004794:	bf41      	itttt	mi
 8004796:	2300      	movmi	r3, #0
 8004798:	426d      	negmi	r5, r5
 800479a:	60a3      	strmi	r3, [r4, #8]
 800479c:	61a5      	strmi	r5, [r4, #24]
 800479e:	bf58      	it	pl
 80047a0:	60a5      	strpl	r5, [r4, #8]
 80047a2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80047a4:	f015 0501 	ands.w	r5, r5, #1
 80047a8:	d115      	bne.n	80047d6 <setvbuf+0x176>
 80047aa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80047ae:	e7c8      	b.n	8004742 <setvbuf+0xe2>
 80047b0:	4648      	mov	r0, r9
 80047b2:	f001 f8b9 	bl	8005928 <malloc>
 80047b6:	4606      	mov	r6, r0
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d0ae      	beq.n	800471a <setvbuf+0xba>
 80047bc:	464d      	mov	r5, r9
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7d0      	b.n	800476a <setvbuf+0x10a>
 80047c8:	2500      	movs	r5, #0
 80047ca:	e7a8      	b.n	800471e <setvbuf+0xbe>
 80047cc:	60a3      	str	r3, [r4, #8]
 80047ce:	e7e8      	b.n	80047a2 <setvbuf+0x142>
 80047d0:	f04f 35ff 	mov.w	r5, #4294967295
 80047d4:	e7b9      	b.n	800474a <setvbuf+0xea>
 80047d6:	2500      	movs	r5, #0
 80047d8:	e7b7      	b.n	800474a <setvbuf+0xea>
 80047da:	bf00      	nop
 80047dc:	2000005c 	.word	0x2000005c
 80047e0:	08006a1c 	.word	0x08006a1c
 80047e4:	08006a3c 	.word	0x08006a3c
 80047e8:	080069fc 	.word	0x080069fc

080047ec <quorem>:
 80047ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	6903      	ldr	r3, [r0, #16]
 80047f2:	690c      	ldr	r4, [r1, #16]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	4607      	mov	r7, r0
 80047f8:	f2c0 8081 	blt.w	80048fe <quorem+0x112>
 80047fc:	3c01      	subs	r4, #1
 80047fe:	f101 0814 	add.w	r8, r1, #20
 8004802:	f100 0514 	add.w	r5, r0, #20
 8004806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004814:	3301      	adds	r3, #1
 8004816:	429a      	cmp	r2, r3
 8004818:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800481c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004820:	fbb2 f6f3 	udiv	r6, r2, r3
 8004824:	d331      	bcc.n	800488a <quorem+0x9e>
 8004826:	f04f 0e00 	mov.w	lr, #0
 800482a:	4640      	mov	r0, r8
 800482c:	46ac      	mov	ip, r5
 800482e:	46f2      	mov	sl, lr
 8004830:	f850 2b04 	ldr.w	r2, [r0], #4
 8004834:	b293      	uxth	r3, r2
 8004836:	fb06 e303 	mla	r3, r6, r3, lr
 800483a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800483e:	b29b      	uxth	r3, r3
 8004840:	ebaa 0303 	sub.w	r3, sl, r3
 8004844:	0c12      	lsrs	r2, r2, #16
 8004846:	f8dc a000 	ldr.w	sl, [ip]
 800484a:	fb06 e202 	mla	r2, r6, r2, lr
 800484e:	fa13 f38a 	uxtah	r3, r3, sl
 8004852:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004856:	fa1f fa82 	uxth.w	sl, r2
 800485a:	f8dc 2000 	ldr.w	r2, [ip]
 800485e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004862:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004866:	b29b      	uxth	r3, r3
 8004868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800486c:	4581      	cmp	r9, r0
 800486e:	f84c 3b04 	str.w	r3, [ip], #4
 8004872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004876:	d2db      	bcs.n	8004830 <quorem+0x44>
 8004878:	f855 300b 	ldr.w	r3, [r5, fp]
 800487c:	b92b      	cbnz	r3, 800488a <quorem+0x9e>
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	3b04      	subs	r3, #4
 8004882:	429d      	cmp	r5, r3
 8004884:	461a      	mov	r2, r3
 8004886:	d32e      	bcc.n	80048e6 <quorem+0xfa>
 8004888:	613c      	str	r4, [r7, #16]
 800488a:	4638      	mov	r0, r7
 800488c:	f001 fae0 	bl	8005e50 <__mcmp>
 8004890:	2800      	cmp	r0, #0
 8004892:	db24      	blt.n	80048de <quorem+0xf2>
 8004894:	3601      	adds	r6, #1
 8004896:	4628      	mov	r0, r5
 8004898:	f04f 0c00 	mov.w	ip, #0
 800489c:	f858 2b04 	ldr.w	r2, [r8], #4
 80048a0:	f8d0 e000 	ldr.w	lr, [r0]
 80048a4:	b293      	uxth	r3, r2
 80048a6:	ebac 0303 	sub.w	r3, ip, r3
 80048aa:	0c12      	lsrs	r2, r2, #16
 80048ac:	fa13 f38e 	uxtah	r3, r3, lr
 80048b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048be:	45c1      	cmp	r9, r8
 80048c0:	f840 3b04 	str.w	r3, [r0], #4
 80048c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048c8:	d2e8      	bcs.n	800489c <quorem+0xb0>
 80048ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048d2:	b922      	cbnz	r2, 80048de <quorem+0xf2>
 80048d4:	3b04      	subs	r3, #4
 80048d6:	429d      	cmp	r5, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	d30a      	bcc.n	80048f2 <quorem+0x106>
 80048dc:	613c      	str	r4, [r7, #16]
 80048de:	4630      	mov	r0, r6
 80048e0:	b003      	add	sp, #12
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	3b04      	subs	r3, #4
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	d1cc      	bne.n	8004888 <quorem+0x9c>
 80048ee:	3c01      	subs	r4, #1
 80048f0:	e7c7      	b.n	8004882 <quorem+0x96>
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	3b04      	subs	r3, #4
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	d1f0      	bne.n	80048dc <quorem+0xf0>
 80048fa:	3c01      	subs	r4, #1
 80048fc:	e7eb      	b.n	80048d6 <quorem+0xea>
 80048fe:	2000      	movs	r0, #0
 8004900:	e7ee      	b.n	80048e0 <quorem+0xf4>
 8004902:	0000      	movs	r0, r0
 8004904:	0000      	movs	r0, r0
	...

08004908 <_dtoa_r>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	ed2d 8b02 	vpush	{d8}
 8004910:	ec57 6b10 	vmov	r6, r7, d0
 8004914:	b095      	sub	sp, #84	; 0x54
 8004916:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004918:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800491c:	9105      	str	r1, [sp, #20]
 800491e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004922:	4604      	mov	r4, r0
 8004924:	9209      	str	r2, [sp, #36]	; 0x24
 8004926:	930f      	str	r3, [sp, #60]	; 0x3c
 8004928:	b975      	cbnz	r5, 8004948 <_dtoa_r+0x40>
 800492a:	2010      	movs	r0, #16
 800492c:	f000 fffc 	bl	8005928 <malloc>
 8004930:	4602      	mov	r2, r0
 8004932:	6260      	str	r0, [r4, #36]	; 0x24
 8004934:	b920      	cbnz	r0, 8004940 <_dtoa_r+0x38>
 8004936:	4bb2      	ldr	r3, [pc, #712]	; (8004c00 <_dtoa_r+0x2f8>)
 8004938:	21ea      	movs	r1, #234	; 0xea
 800493a:	48b2      	ldr	r0, [pc, #712]	; (8004c04 <_dtoa_r+0x2fc>)
 800493c:	f001 fec2 	bl	80066c4 <__assert_func>
 8004940:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004944:	6005      	str	r5, [r0, #0]
 8004946:	60c5      	str	r5, [r0, #12]
 8004948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800494a:	6819      	ldr	r1, [r3, #0]
 800494c:	b151      	cbz	r1, 8004964 <_dtoa_r+0x5c>
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	604a      	str	r2, [r1, #4]
 8004952:	2301      	movs	r3, #1
 8004954:	4093      	lsls	r3, r2
 8004956:	608b      	str	r3, [r1, #8]
 8004958:	4620      	mov	r0, r4
 800495a:	f001 f83b 	bl	80059d4 <_Bfree>
 800495e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	1e3b      	subs	r3, r7, #0
 8004966:	bfb9      	ittee	lt
 8004968:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800496c:	9303      	strlt	r3, [sp, #12]
 800496e:	2300      	movge	r3, #0
 8004970:	f8c8 3000 	strge.w	r3, [r8]
 8004974:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004978:	4ba3      	ldr	r3, [pc, #652]	; (8004c08 <_dtoa_r+0x300>)
 800497a:	bfbc      	itt	lt
 800497c:	2201      	movlt	r2, #1
 800497e:	f8c8 2000 	strlt.w	r2, [r8]
 8004982:	ea33 0309 	bics.w	r3, r3, r9
 8004986:	d11b      	bne.n	80049c0 <_dtoa_r+0xb8>
 8004988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800498a:	f242 730f 	movw	r3, #9999	; 0x270f
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004994:	4333      	orrs	r3, r6
 8004996:	f000 857a 	beq.w	800548e <_dtoa_r+0xb86>
 800499a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800499c:	b963      	cbnz	r3, 80049b8 <_dtoa_r+0xb0>
 800499e:	4b9b      	ldr	r3, [pc, #620]	; (8004c0c <_dtoa_r+0x304>)
 80049a0:	e024      	b.n	80049ec <_dtoa_r+0xe4>
 80049a2:	4b9b      	ldr	r3, [pc, #620]	; (8004c10 <_dtoa_r+0x308>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	9800      	ldr	r0, [sp, #0]
 80049ae:	b015      	add	sp, #84	; 0x54
 80049b0:	ecbd 8b02 	vpop	{d8}
 80049b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b8:	4b94      	ldr	r3, [pc, #592]	; (8004c0c <_dtoa_r+0x304>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	3303      	adds	r3, #3
 80049be:	e7f3      	b.n	80049a8 <_dtoa_r+0xa0>
 80049c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	ec51 0b17 	vmov	r0, r1, d7
 80049ca:	2300      	movs	r3, #0
 80049cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80049d0:	f7fc f89a 	bl	8000b08 <__aeabi_dcmpeq>
 80049d4:	4680      	mov	r8, r0
 80049d6:	b158      	cbz	r0, 80049f0 <_dtoa_r+0xe8>
 80049d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049da:	2301      	movs	r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8551 	beq.w	8005488 <_dtoa_r+0xb80>
 80049e6:	488b      	ldr	r0, [pc, #556]	; (8004c14 <_dtoa_r+0x30c>)
 80049e8:	6018      	str	r0, [r3, #0]
 80049ea:	1e43      	subs	r3, r0, #1
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	e7dd      	b.n	80049ac <_dtoa_r+0xa4>
 80049f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80049f4:	aa12      	add	r2, sp, #72	; 0x48
 80049f6:	a913      	add	r1, sp, #76	; 0x4c
 80049f8:	4620      	mov	r0, r4
 80049fa:	f001 facd 	bl	8005f98 <__d2b>
 80049fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004a02:	4683      	mov	fp, r0
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	d07c      	beq.n	8004b02 <_dtoa_r+0x1fa>
 8004a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004a16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004a1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004a1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a22:	4b7d      	ldr	r3, [pc, #500]	; (8004c18 <_dtoa_r+0x310>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	4630      	mov	r0, r6
 8004a28:	4639      	mov	r1, r7
 8004a2a:	f7fb fc4d 	bl	80002c8 <__aeabi_dsub>
 8004a2e:	a36e      	add	r3, pc, #440	; (adr r3, 8004be8 <_dtoa_r+0x2e0>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fe00 	bl	8000638 <__aeabi_dmul>
 8004a38:	a36d      	add	r3, pc, #436	; (adr r3, 8004bf0 <_dtoa_r+0x2e8>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fc45 	bl	80002cc <__adddf3>
 8004a42:	4606      	mov	r6, r0
 8004a44:	4628      	mov	r0, r5
 8004a46:	460f      	mov	r7, r1
 8004a48:	f7fb fd8c 	bl	8000564 <__aeabi_i2d>
 8004a4c:	a36a      	add	r3, pc, #424	; (adr r3, 8004bf8 <_dtoa_r+0x2f0>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fdf1 	bl	8000638 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	f7fb fc35 	bl	80002cc <__adddf3>
 8004a62:	4606      	mov	r6, r0
 8004a64:	460f      	mov	r7, r1
 8004a66:	f7fc f897 	bl	8000b98 <__aeabi_d2iz>
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	4682      	mov	sl, r0
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fc f852 	bl	8000b1c <__aeabi_dcmplt>
 8004a78:	b148      	cbz	r0, 8004a8e <_dtoa_r+0x186>
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	f7fb fd72 	bl	8000564 <__aeabi_i2d>
 8004a80:	4632      	mov	r2, r6
 8004a82:	463b      	mov	r3, r7
 8004a84:	f7fc f840 	bl	8000b08 <__aeabi_dcmpeq>
 8004a88:	b908      	cbnz	r0, 8004a8e <_dtoa_r+0x186>
 8004a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a8e:	f1ba 0f16 	cmp.w	sl, #22
 8004a92:	d854      	bhi.n	8004b3e <_dtoa_r+0x236>
 8004a94:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <_dtoa_r+0x314>)
 8004a96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004aa2:	f7fc f83b 	bl	8000b1c <__aeabi_dcmplt>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d04b      	beq.n	8004b42 <_dtoa_r+0x23a>
 8004aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aae:	2300      	movs	r3, #0
 8004ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8004ab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ab4:	1b5d      	subs	r5, r3, r5
 8004ab6:	1e6b      	subs	r3, r5, #1
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	bf43      	ittte	mi
 8004abc:	2300      	movmi	r3, #0
 8004abe:	f1c5 0801 	rsbmi	r8, r5, #1
 8004ac2:	9304      	strmi	r3, [sp, #16]
 8004ac4:	f04f 0800 	movpl.w	r8, #0
 8004ac8:	f1ba 0f00 	cmp.w	sl, #0
 8004acc:	db3b      	blt.n	8004b46 <_dtoa_r+0x23e>
 8004ace:	9b04      	ldr	r3, [sp, #16]
 8004ad0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004ad4:	4453      	add	r3, sl
 8004ad6:	9304      	str	r3, [sp, #16]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9306      	str	r3, [sp, #24]
 8004adc:	9b05      	ldr	r3, [sp, #20]
 8004ade:	2b09      	cmp	r3, #9
 8004ae0:	d869      	bhi.n	8004bb6 <_dtoa_r+0x2ae>
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	bfc4      	itt	gt
 8004ae6:	3b04      	subgt	r3, #4
 8004ae8:	9305      	strgt	r3, [sp, #20]
 8004aea:	9b05      	ldr	r3, [sp, #20]
 8004aec:	f1a3 0302 	sub.w	r3, r3, #2
 8004af0:	bfcc      	ite	gt
 8004af2:	2500      	movgt	r5, #0
 8004af4:	2501      	movle	r5, #1
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d869      	bhi.n	8004bce <_dtoa_r+0x2c6>
 8004afa:	e8df f003 	tbb	[pc, r3]
 8004afe:	4e2c      	.short	0x4e2c
 8004b00:	5a4c      	.short	0x5a4c
 8004b02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004b06:	441d      	add	r5, r3
 8004b08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	bfc1      	itttt	gt
 8004b10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004b18:	fa09 f303 	lslgt.w	r3, r9, r3
 8004b1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b20:	bfda      	itte	le
 8004b22:	f1c3 0320 	rsble	r3, r3, #32
 8004b26:	fa06 f003 	lslle.w	r0, r6, r3
 8004b2a:	4318      	orrgt	r0, r3
 8004b2c:	f7fb fd0a 	bl	8000544 <__aeabi_ui2d>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4606      	mov	r6, r0
 8004b34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b38:	3d01      	subs	r5, #1
 8004b3a:	9310      	str	r3, [sp, #64]	; 0x40
 8004b3c:	e771      	b.n	8004a22 <_dtoa_r+0x11a>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e7b6      	b.n	8004ab0 <_dtoa_r+0x1a8>
 8004b42:	900e      	str	r0, [sp, #56]	; 0x38
 8004b44:	e7b5      	b.n	8004ab2 <_dtoa_r+0x1aa>
 8004b46:	f1ca 0300 	rsb	r3, sl, #0
 8004b4a:	9306      	str	r3, [sp, #24]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	eba8 080a 	sub.w	r8, r8, sl
 8004b52:	930d      	str	r3, [sp, #52]	; 0x34
 8004b54:	e7c2      	b.n	8004adc <_dtoa_r+0x1d4>
 8004b56:	2300      	movs	r3, #0
 8004b58:	9308      	str	r3, [sp, #32]
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dc39      	bgt.n	8004bd4 <_dtoa_r+0x2cc>
 8004b60:	f04f 0901 	mov.w	r9, #1
 8004b64:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b68:	464b      	mov	r3, r9
 8004b6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004b6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b70:	2200      	movs	r2, #0
 8004b72:	6042      	str	r2, [r0, #4]
 8004b74:	2204      	movs	r2, #4
 8004b76:	f102 0614 	add.w	r6, r2, #20
 8004b7a:	429e      	cmp	r6, r3
 8004b7c:	6841      	ldr	r1, [r0, #4]
 8004b7e:	d92f      	bls.n	8004be0 <_dtoa_r+0x2d8>
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 fee7 	bl	8005954 <_Balloc>
 8004b86:	9000      	str	r0, [sp, #0]
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d14b      	bne.n	8004c24 <_dtoa_r+0x31c>
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <_dtoa_r+0x318>)
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b94:	e6d1      	b.n	800493a <_dtoa_r+0x32>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e7de      	b.n	8004b58 <_dtoa_r+0x250>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9308      	str	r3, [sp, #32]
 8004b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba0:	eb0a 0903 	add.w	r9, sl, r3
 8004ba4:	f109 0301 	add.w	r3, r9, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	bfb8      	it	lt
 8004bae:	2301      	movlt	r3, #1
 8004bb0:	e7dd      	b.n	8004b6e <_dtoa_r+0x266>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e7f2      	b.n	8004b9c <_dtoa_r+0x294>
 8004bb6:	2501      	movs	r5, #1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9305      	str	r3, [sp, #20]
 8004bbc:	9508      	str	r5, [sp, #32]
 8004bbe:	f04f 39ff 	mov.w	r9, #4294967295
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bc8:	2312      	movs	r3, #18
 8004bca:	9209      	str	r2, [sp, #36]	; 0x24
 8004bcc:	e7cf      	b.n	8004b6e <_dtoa_r+0x266>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	9308      	str	r3, [sp, #32]
 8004bd2:	e7f4      	b.n	8004bbe <_dtoa_r+0x2b6>
 8004bd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004bd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bdc:	464b      	mov	r3, r9
 8004bde:	e7c6      	b.n	8004b6e <_dtoa_r+0x266>
 8004be0:	3101      	adds	r1, #1
 8004be2:	6041      	str	r1, [r0, #4]
 8004be4:	0052      	lsls	r2, r2, #1
 8004be6:	e7c6      	b.n	8004b76 <_dtoa_r+0x26e>
 8004be8:	636f4361 	.word	0x636f4361
 8004bec:	3fd287a7 	.word	0x3fd287a7
 8004bf0:	8b60c8b3 	.word	0x8b60c8b3
 8004bf4:	3fc68a28 	.word	0x3fc68a28
 8004bf8:	509f79fb 	.word	0x509f79fb
 8004bfc:	3fd34413 	.word	0x3fd34413
 8004c00:	08006975 	.word	0x08006975
 8004c04:	0800698c 	.word	0x0800698c
 8004c08:	7ff00000 	.word	0x7ff00000
 8004c0c:	08006971 	.word	0x08006971
 8004c10:	08006968 	.word	0x08006968
 8004c14:	08006945 	.word	0x08006945
 8004c18:	3ff80000 	.word	0x3ff80000
 8004c1c:	08006ae8 	.word	0x08006ae8
 8004c20:	080069eb 	.word	0x080069eb
 8004c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c26:	9a00      	ldr	r2, [sp, #0]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	2b0e      	cmp	r3, #14
 8004c2e:	f200 80ad 	bhi.w	8004d8c <_dtoa_r+0x484>
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	f000 80aa 	beq.w	8004d8c <_dtoa_r+0x484>
 8004c38:	f1ba 0f00 	cmp.w	sl, #0
 8004c3c:	dd36      	ble.n	8004cac <_dtoa_r+0x3a4>
 8004c3e:	4ac3      	ldr	r2, [pc, #780]	; (8004f4c <_dtoa_r+0x644>)
 8004c40:	f00a 030f 	and.w	r3, sl, #15
 8004c44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c48:	ed93 7b00 	vldr	d7, [r3]
 8004c4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004c50:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004c54:	eeb0 8a47 	vmov.f32	s16, s14
 8004c58:	eef0 8a67 	vmov.f32	s17, s15
 8004c5c:	d016      	beq.n	8004c8c <_dtoa_r+0x384>
 8004c5e:	4bbc      	ldr	r3, [pc, #752]	; (8004f50 <_dtoa_r+0x648>)
 8004c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c68:	f7fb fe10 	bl	800088c <__aeabi_ddiv>
 8004c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c70:	f007 070f 	and.w	r7, r7, #15
 8004c74:	2503      	movs	r5, #3
 8004c76:	4eb6      	ldr	r6, [pc, #728]	; (8004f50 <_dtoa_r+0x648>)
 8004c78:	b957      	cbnz	r7, 8004c90 <_dtoa_r+0x388>
 8004c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7e:	ec53 2b18 	vmov	r2, r3, d8
 8004c82:	f7fb fe03 	bl	800088c <__aeabi_ddiv>
 8004c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c8a:	e029      	b.n	8004ce0 <_dtoa_r+0x3d8>
 8004c8c:	2502      	movs	r5, #2
 8004c8e:	e7f2      	b.n	8004c76 <_dtoa_r+0x36e>
 8004c90:	07f9      	lsls	r1, r7, #31
 8004c92:	d508      	bpl.n	8004ca6 <_dtoa_r+0x39e>
 8004c94:	ec51 0b18 	vmov	r0, r1, d8
 8004c98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c9c:	f7fb fccc 	bl	8000638 <__aeabi_dmul>
 8004ca0:	ec41 0b18 	vmov	d8, r0, r1
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	107f      	asrs	r7, r7, #1
 8004ca8:	3608      	adds	r6, #8
 8004caa:	e7e5      	b.n	8004c78 <_dtoa_r+0x370>
 8004cac:	f000 80a6 	beq.w	8004dfc <_dtoa_r+0x4f4>
 8004cb0:	f1ca 0600 	rsb	r6, sl, #0
 8004cb4:	4ba5      	ldr	r3, [pc, #660]	; (8004f4c <_dtoa_r+0x644>)
 8004cb6:	4fa6      	ldr	r7, [pc, #664]	; (8004f50 <_dtoa_r+0x648>)
 8004cb8:	f006 020f 	and.w	r2, r6, #15
 8004cbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cc8:	f7fb fcb6 	bl	8000638 <__aeabi_dmul>
 8004ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cd0:	1136      	asrs	r6, r6, #4
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2502      	movs	r5, #2
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	f040 8085 	bne.w	8004de6 <_dtoa_r+0x4de>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1d2      	bne.n	8004c86 <_dtoa_r+0x37e>
 8004ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 808c 	beq.w	8004e00 <_dtoa_r+0x4f8>
 8004ce8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cec:	4b99      	ldr	r3, [pc, #612]	; (8004f54 <_dtoa_r+0x64c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	4639      	mov	r1, r7
 8004cf4:	f7fb ff12 	bl	8000b1c <__aeabi_dcmplt>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	f000 8081 	beq.w	8004e00 <_dtoa_r+0x4f8>
 8004cfe:	9b01      	ldr	r3, [sp, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d07d      	beq.n	8004e00 <_dtoa_r+0x4f8>
 8004d04:	f1b9 0f00 	cmp.w	r9, #0
 8004d08:	dd3c      	ble.n	8004d84 <_dtoa_r+0x47c>
 8004d0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d0e:	9307      	str	r3, [sp, #28]
 8004d10:	2200      	movs	r2, #0
 8004d12:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <_dtoa_r+0x650>)
 8004d14:	4630      	mov	r0, r6
 8004d16:	4639      	mov	r1, r7
 8004d18:	f7fb fc8e 	bl	8000638 <__aeabi_dmul>
 8004d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d20:	3501      	adds	r5, #1
 8004d22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004d26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f7fb fc1a 	bl	8000564 <__aeabi_i2d>
 8004d30:	4632      	mov	r2, r6
 8004d32:	463b      	mov	r3, r7
 8004d34:	f7fb fc80 	bl	8000638 <__aeabi_dmul>
 8004d38:	4b88      	ldr	r3, [pc, #544]	; (8004f5c <_dtoa_r+0x654>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f7fb fac6 	bl	80002cc <__adddf3>
 8004d40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d48:	9303      	str	r3, [sp, #12]
 8004d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d15c      	bne.n	8004e0a <_dtoa_r+0x502>
 8004d50:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <_dtoa_r+0x658>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	4630      	mov	r0, r6
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb fab6 	bl	80002c8 <__aeabi_dsub>
 8004d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d60:	4606      	mov	r6, r0
 8004d62:	460f      	mov	r7, r1
 8004d64:	f7fb fef8 	bl	8000b58 <__aeabi_dcmpgt>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f040 8296 	bne.w	800529a <_dtoa_r+0x992>
 8004d6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004d72:	4630      	mov	r0, r6
 8004d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb fecf 	bl	8000b1c <__aeabi_dcmplt>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f040 8288 	bne.w	8005294 <_dtoa_r+0x98c>
 8004d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f2c0 8158 	blt.w	8005044 <_dtoa_r+0x73c>
 8004d94:	f1ba 0f0e 	cmp.w	sl, #14
 8004d98:	f300 8154 	bgt.w	8005044 <_dtoa_r+0x73c>
 8004d9c:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <_dtoa_r+0x644>)
 8004d9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004da2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f280 80e3 	bge.w	8004f74 <_dtoa_r+0x66c>
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f300 80df 	bgt.w	8004f74 <_dtoa_r+0x66c>
 8004db6:	f040 826d 	bne.w	8005294 <_dtoa_r+0x98c>
 8004dba:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <_dtoa_r+0x658>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	f7fb fc39 	bl	8000638 <__aeabi_dmul>
 8004dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dca:	f7fb febb 	bl	8000b44 <__aeabi_dcmpge>
 8004dce:	9e01      	ldr	r6, [sp, #4]
 8004dd0:	4637      	mov	r7, r6
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	f040 8243 	bne.w	800525e <_dtoa_r+0x956>
 8004dd8:	9d00      	ldr	r5, [sp, #0]
 8004dda:	2331      	movs	r3, #49	; 0x31
 8004ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8004de0:	f10a 0a01 	add.w	sl, sl, #1
 8004de4:	e23f      	b.n	8005266 <_dtoa_r+0x95e>
 8004de6:	07f2      	lsls	r2, r6, #31
 8004de8:	d505      	bpl.n	8004df6 <_dtoa_r+0x4ee>
 8004dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dee:	f7fb fc23 	bl	8000638 <__aeabi_dmul>
 8004df2:	3501      	adds	r5, #1
 8004df4:	2301      	movs	r3, #1
 8004df6:	1076      	asrs	r6, r6, #1
 8004df8:	3708      	adds	r7, #8
 8004dfa:	e76c      	b.n	8004cd6 <_dtoa_r+0x3ce>
 8004dfc:	2502      	movs	r5, #2
 8004dfe:	e76f      	b.n	8004ce0 <_dtoa_r+0x3d8>
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	f8cd a01c 	str.w	sl, [sp, #28]
 8004e06:	930c      	str	r3, [sp, #48]	; 0x30
 8004e08:	e78d      	b.n	8004d26 <_dtoa_r+0x41e>
 8004e0a:	9900      	ldr	r1, [sp, #0]
 8004e0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e10:	4b4e      	ldr	r3, [pc, #312]	; (8004f4c <_dtoa_r+0x644>)
 8004e12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e16:	4401      	add	r1, r0
 8004e18:	9102      	str	r1, [sp, #8]
 8004e1a:	9908      	ldr	r1, [sp, #32]
 8004e1c:	eeb0 8a47 	vmov.f32	s16, s14
 8004e20:	eef0 8a67 	vmov.f32	s17, s15
 8004e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d045      	beq.n	8004ebc <_dtoa_r+0x5b4>
 8004e30:	494c      	ldr	r1, [pc, #304]	; (8004f64 <_dtoa_r+0x65c>)
 8004e32:	2000      	movs	r0, #0
 8004e34:	f7fb fd2a 	bl	800088c <__aeabi_ddiv>
 8004e38:	ec53 2b18 	vmov	r2, r3, d8
 8004e3c:	f7fb fa44 	bl	80002c8 <__aeabi_dsub>
 8004e40:	9d00      	ldr	r5, [sp, #0]
 8004e42:	ec41 0b18 	vmov	d8, r0, r1
 8004e46:	4639      	mov	r1, r7
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7fb fea5 	bl	8000b98 <__aeabi_d2iz>
 8004e4e:	900c      	str	r0, [sp, #48]	; 0x30
 8004e50:	f7fb fb88 	bl	8000564 <__aeabi_i2d>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f7fb fa34 	bl	80002c8 <__aeabi_dsub>
 8004e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e62:	3330      	adds	r3, #48	; 0x30
 8004e64:	f805 3b01 	strb.w	r3, [r5], #1
 8004e68:	ec53 2b18 	vmov	r2, r3, d8
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	f7fb fe54 	bl	8000b1c <__aeabi_dcmplt>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d165      	bne.n	8004f44 <_dtoa_r+0x63c>
 8004e78:	4632      	mov	r2, r6
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	4935      	ldr	r1, [pc, #212]	; (8004f54 <_dtoa_r+0x64c>)
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7fb fa22 	bl	80002c8 <__aeabi_dsub>
 8004e84:	ec53 2b18 	vmov	r2, r3, d8
 8004e88:	f7fb fe48 	bl	8000b1c <__aeabi_dcmplt>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f040 80b9 	bne.w	8005004 <_dtoa_r+0x6fc>
 8004e92:	9b02      	ldr	r3, [sp, #8]
 8004e94:	429d      	cmp	r5, r3
 8004e96:	f43f af75 	beq.w	8004d84 <_dtoa_r+0x47c>
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <_dtoa_r+0x650>)
 8004e9c:	ec51 0b18 	vmov	r0, r1, d8
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f7fb fbc9 	bl	8000638 <__aeabi_dmul>
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <_dtoa_r+0x650>)
 8004ea8:	ec41 0b18 	vmov	d8, r0, r1
 8004eac:	2200      	movs	r2, #0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb fbc1 	bl	8000638 <__aeabi_dmul>
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460f      	mov	r7, r1
 8004eba:	e7c4      	b.n	8004e46 <_dtoa_r+0x53e>
 8004ebc:	ec51 0b17 	vmov	r0, r1, d7
 8004ec0:	f7fb fbba 	bl	8000638 <__aeabi_dmul>
 8004ec4:	9b02      	ldr	r3, [sp, #8]
 8004ec6:	9d00      	ldr	r5, [sp, #0]
 8004ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8004eca:	ec41 0b18 	vmov	d8, r0, r1
 8004ece:	4639      	mov	r1, r7
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f7fb fe61 	bl	8000b98 <__aeabi_d2iz>
 8004ed6:	9011      	str	r0, [sp, #68]	; 0x44
 8004ed8:	f7fb fb44 	bl	8000564 <__aeabi_i2d>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	f7fb f9f0 	bl	80002c8 <__aeabi_dsub>
 8004ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eea:	3330      	adds	r3, #48	; 0x30
 8004eec:	f805 3b01 	strb.w	r3, [r5], #1
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	460f      	mov	r7, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	d134      	bne.n	8004f68 <_dtoa_r+0x660>
 8004efe:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <_dtoa_r+0x65c>)
 8004f00:	ec51 0b18 	vmov	r0, r1, d8
 8004f04:	f7fb f9e2 	bl	80002cc <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	4639      	mov	r1, r7
 8004f10:	f7fb fe22 	bl	8000b58 <__aeabi_dcmpgt>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d175      	bne.n	8005004 <_dtoa_r+0x6fc>
 8004f18:	ec53 2b18 	vmov	r2, r3, d8
 8004f1c:	4911      	ldr	r1, [pc, #68]	; (8004f64 <_dtoa_r+0x65c>)
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7fb f9d2 	bl	80002c8 <__aeabi_dsub>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4630      	mov	r0, r6
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb fdf6 	bl	8000b1c <__aeabi_dcmplt>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	f43f af27 	beq.w	8004d84 <_dtoa_r+0x47c>
 8004f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f38:	1e6b      	subs	r3, r5, #1
 8004f3a:	930c      	str	r3, [sp, #48]	; 0x30
 8004f3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d0f8      	beq.n	8004f36 <_dtoa_r+0x62e>
 8004f44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004f48:	e04a      	b.n	8004fe0 <_dtoa_r+0x6d8>
 8004f4a:	bf00      	nop
 8004f4c:	08006ae8 	.word	0x08006ae8
 8004f50:	08006ac0 	.word	0x08006ac0
 8004f54:	3ff00000 	.word	0x3ff00000
 8004f58:	40240000 	.word	0x40240000
 8004f5c:	401c0000 	.word	0x401c0000
 8004f60:	40140000 	.word	0x40140000
 8004f64:	3fe00000 	.word	0x3fe00000
 8004f68:	4baf      	ldr	r3, [pc, #700]	; (8005228 <_dtoa_r+0x920>)
 8004f6a:	f7fb fb65 	bl	8000638 <__aeabi_dmul>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460f      	mov	r7, r1
 8004f72:	e7ac      	b.n	8004ece <_dtoa_r+0x5c6>
 8004f74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f78:	9d00      	ldr	r5, [sp, #0]
 8004f7a:	4642      	mov	r2, r8
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	4630      	mov	r0, r6
 8004f80:	4639      	mov	r1, r7
 8004f82:	f7fb fc83 	bl	800088c <__aeabi_ddiv>
 8004f86:	f7fb fe07 	bl	8000b98 <__aeabi_d2iz>
 8004f8a:	9002      	str	r0, [sp, #8]
 8004f8c:	f7fb faea 	bl	8000564 <__aeabi_i2d>
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	f7fb fb50 	bl	8000638 <__aeabi_dmul>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f992 	bl	80002c8 <__aeabi_dsub>
 8004fa4:	9e02      	ldr	r6, [sp, #8]
 8004fa6:	9f01      	ldr	r7, [sp, #4]
 8004fa8:	3630      	adds	r6, #48	; 0x30
 8004faa:	f805 6b01 	strb.w	r6, [r5], #1
 8004fae:	9e00      	ldr	r6, [sp, #0]
 8004fb0:	1bae      	subs	r6, r5, r6
 8004fb2:	42b7      	cmp	r7, r6
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	d137      	bne.n	800502a <_dtoa_r+0x722>
 8004fba:	f7fb f987 	bl	80002cc <__adddf3>
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	f7fb fdc7 	bl	8000b58 <__aeabi_dcmpgt>
 8004fca:	b9c8      	cbnz	r0, 8005000 <_dtoa_r+0x6f8>
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fd98 	bl	8000b08 <__aeabi_dcmpeq>
 8004fd8:	b110      	cbz	r0, 8004fe0 <_dtoa_r+0x6d8>
 8004fda:	9b02      	ldr	r3, [sp, #8]
 8004fdc:	07d9      	lsls	r1, r3, #31
 8004fde:	d40f      	bmi.n	8005000 <_dtoa_r+0x6f8>
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	f000 fcf6 	bl	80059d4 <_Bfree>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	702b      	strb	r3, [r5, #0]
 8004fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fee:	f10a 0001 	add.w	r0, sl, #1
 8004ff2:	6018      	str	r0, [r3, #0]
 8004ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f43f acd8 	beq.w	80049ac <_dtoa_r+0xa4>
 8004ffc:	601d      	str	r5, [r3, #0]
 8004ffe:	e4d5      	b.n	80049ac <_dtoa_r+0xa4>
 8005000:	f8cd a01c 	str.w	sl, [sp, #28]
 8005004:	462b      	mov	r3, r5
 8005006:	461d      	mov	r5, r3
 8005008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800500c:	2a39      	cmp	r2, #57	; 0x39
 800500e:	d108      	bne.n	8005022 <_dtoa_r+0x71a>
 8005010:	9a00      	ldr	r2, [sp, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d1f7      	bne.n	8005006 <_dtoa_r+0x6fe>
 8005016:	9a07      	ldr	r2, [sp, #28]
 8005018:	9900      	ldr	r1, [sp, #0]
 800501a:	3201      	adds	r2, #1
 800501c:	9207      	str	r2, [sp, #28]
 800501e:	2230      	movs	r2, #48	; 0x30
 8005020:	700a      	strb	r2, [r1, #0]
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	3201      	adds	r2, #1
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e78c      	b.n	8004f44 <_dtoa_r+0x63c>
 800502a:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <_dtoa_r+0x920>)
 800502c:	2200      	movs	r2, #0
 800502e:	f7fb fb03 	bl	8000638 <__aeabi_dmul>
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	4606      	mov	r6, r0
 8005038:	460f      	mov	r7, r1
 800503a:	f7fb fd65 	bl	8000b08 <__aeabi_dcmpeq>
 800503e:	2800      	cmp	r0, #0
 8005040:	d09b      	beq.n	8004f7a <_dtoa_r+0x672>
 8005042:	e7cd      	b.n	8004fe0 <_dtoa_r+0x6d8>
 8005044:	9a08      	ldr	r2, [sp, #32]
 8005046:	2a00      	cmp	r2, #0
 8005048:	f000 80c4 	beq.w	80051d4 <_dtoa_r+0x8cc>
 800504c:	9a05      	ldr	r2, [sp, #20]
 800504e:	2a01      	cmp	r2, #1
 8005050:	f300 80a8 	bgt.w	80051a4 <_dtoa_r+0x89c>
 8005054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005056:	2a00      	cmp	r2, #0
 8005058:	f000 80a0 	beq.w	800519c <_dtoa_r+0x894>
 800505c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005060:	9e06      	ldr	r6, [sp, #24]
 8005062:	4645      	mov	r5, r8
 8005064:	9a04      	ldr	r2, [sp, #16]
 8005066:	2101      	movs	r1, #1
 8005068:	441a      	add	r2, r3
 800506a:	4620      	mov	r0, r4
 800506c:	4498      	add	r8, r3
 800506e:	9204      	str	r2, [sp, #16]
 8005070:	f000 fd6c 	bl	8005b4c <__i2b>
 8005074:	4607      	mov	r7, r0
 8005076:	2d00      	cmp	r5, #0
 8005078:	dd0b      	ble.n	8005092 <_dtoa_r+0x78a>
 800507a:	9b04      	ldr	r3, [sp, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dd08      	ble.n	8005092 <_dtoa_r+0x78a>
 8005080:	42ab      	cmp	r3, r5
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	bfa8      	it	ge
 8005086:	462b      	movge	r3, r5
 8005088:	eba8 0803 	sub.w	r8, r8, r3
 800508c:	1aed      	subs	r5, r5, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	9304      	str	r3, [sp, #16]
 8005092:	9b06      	ldr	r3, [sp, #24]
 8005094:	b1fb      	cbz	r3, 80050d6 <_dtoa_r+0x7ce>
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 809f 	beq.w	80051dc <_dtoa_r+0x8d4>
 800509e:	2e00      	cmp	r6, #0
 80050a0:	dd11      	ble.n	80050c6 <_dtoa_r+0x7be>
 80050a2:	4639      	mov	r1, r7
 80050a4:	4632      	mov	r2, r6
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 fe0c 	bl	8005cc4 <__pow5mult>
 80050ac:	465a      	mov	r2, fp
 80050ae:	4601      	mov	r1, r0
 80050b0:	4607      	mov	r7, r0
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 fd60 	bl	8005b78 <__multiply>
 80050b8:	4659      	mov	r1, fp
 80050ba:	9007      	str	r0, [sp, #28]
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 fc89 	bl	80059d4 <_Bfree>
 80050c2:	9b07      	ldr	r3, [sp, #28]
 80050c4:	469b      	mov	fp, r3
 80050c6:	9b06      	ldr	r3, [sp, #24]
 80050c8:	1b9a      	subs	r2, r3, r6
 80050ca:	d004      	beq.n	80050d6 <_dtoa_r+0x7ce>
 80050cc:	4659      	mov	r1, fp
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 fdf8 	bl	8005cc4 <__pow5mult>
 80050d4:	4683      	mov	fp, r0
 80050d6:	2101      	movs	r1, #1
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 fd37 	bl	8005b4c <__i2b>
 80050de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	4606      	mov	r6, r0
 80050e4:	dd7c      	ble.n	80051e0 <_dtoa_r+0x8d8>
 80050e6:	461a      	mov	r2, r3
 80050e8:	4601      	mov	r1, r0
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 fdea 	bl	8005cc4 <__pow5mult>
 80050f0:	9b05      	ldr	r3, [sp, #20]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	4606      	mov	r6, r0
 80050f6:	dd76      	ble.n	80051e6 <_dtoa_r+0x8de>
 80050f8:	2300      	movs	r3, #0
 80050fa:	9306      	str	r3, [sp, #24]
 80050fc:	6933      	ldr	r3, [r6, #16]
 80050fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005102:	6918      	ldr	r0, [r3, #16]
 8005104:	f000 fcd2 	bl	8005aac <__hi0bits>
 8005108:	f1c0 0020 	rsb	r0, r0, #32
 800510c:	9b04      	ldr	r3, [sp, #16]
 800510e:	4418      	add	r0, r3
 8005110:	f010 001f 	ands.w	r0, r0, #31
 8005114:	f000 8086 	beq.w	8005224 <_dtoa_r+0x91c>
 8005118:	f1c0 0320 	rsb	r3, r0, #32
 800511c:	2b04      	cmp	r3, #4
 800511e:	dd7f      	ble.n	8005220 <_dtoa_r+0x918>
 8005120:	f1c0 001c 	rsb	r0, r0, #28
 8005124:	9b04      	ldr	r3, [sp, #16]
 8005126:	4403      	add	r3, r0
 8005128:	4480      	add	r8, r0
 800512a:	4405      	add	r5, r0
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	f1b8 0f00 	cmp.w	r8, #0
 8005132:	dd05      	ble.n	8005140 <_dtoa_r+0x838>
 8005134:	4659      	mov	r1, fp
 8005136:	4642      	mov	r2, r8
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fe1d 	bl	8005d78 <__lshift>
 800513e:	4683      	mov	fp, r0
 8005140:	9b04      	ldr	r3, [sp, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	dd05      	ble.n	8005152 <_dtoa_r+0x84a>
 8005146:	4631      	mov	r1, r6
 8005148:	461a      	mov	r2, r3
 800514a:	4620      	mov	r0, r4
 800514c:	f000 fe14 	bl	8005d78 <__lshift>
 8005150:	4606      	mov	r6, r0
 8005152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d069      	beq.n	800522c <_dtoa_r+0x924>
 8005158:	4631      	mov	r1, r6
 800515a:	4658      	mov	r0, fp
 800515c:	f000 fe78 	bl	8005e50 <__mcmp>
 8005160:	2800      	cmp	r0, #0
 8005162:	da63      	bge.n	800522c <_dtoa_r+0x924>
 8005164:	2300      	movs	r3, #0
 8005166:	4659      	mov	r1, fp
 8005168:	220a      	movs	r2, #10
 800516a:	4620      	mov	r0, r4
 800516c:	f000 fc54 	bl	8005a18 <__multadd>
 8005170:	9b08      	ldr	r3, [sp, #32]
 8005172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005176:	4683      	mov	fp, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 818f 	beq.w	800549c <_dtoa_r+0xb94>
 800517e:	4639      	mov	r1, r7
 8005180:	2300      	movs	r3, #0
 8005182:	220a      	movs	r2, #10
 8005184:	4620      	mov	r0, r4
 8005186:	f000 fc47 	bl	8005a18 <__multadd>
 800518a:	f1b9 0f00 	cmp.w	r9, #0
 800518e:	4607      	mov	r7, r0
 8005190:	f300 808e 	bgt.w	80052b0 <_dtoa_r+0x9a8>
 8005194:	9b05      	ldr	r3, [sp, #20]
 8005196:	2b02      	cmp	r3, #2
 8005198:	dc50      	bgt.n	800523c <_dtoa_r+0x934>
 800519a:	e089      	b.n	80052b0 <_dtoa_r+0x9a8>
 800519c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800519e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051a2:	e75d      	b.n	8005060 <_dtoa_r+0x758>
 80051a4:	9b01      	ldr	r3, [sp, #4]
 80051a6:	1e5e      	subs	r6, r3, #1
 80051a8:	9b06      	ldr	r3, [sp, #24]
 80051aa:	42b3      	cmp	r3, r6
 80051ac:	bfbf      	itttt	lt
 80051ae:	9b06      	ldrlt	r3, [sp, #24]
 80051b0:	9606      	strlt	r6, [sp, #24]
 80051b2:	1af2      	sublt	r2, r6, r3
 80051b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80051b6:	bfb6      	itet	lt
 80051b8:	189b      	addlt	r3, r3, r2
 80051ba:	1b9e      	subge	r6, r3, r6
 80051bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80051be:	9b01      	ldr	r3, [sp, #4]
 80051c0:	bfb8      	it	lt
 80051c2:	2600      	movlt	r6, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bfb5      	itete	lt
 80051c8:	eba8 0503 	sublt.w	r5, r8, r3
 80051cc:	9b01      	ldrge	r3, [sp, #4]
 80051ce:	2300      	movlt	r3, #0
 80051d0:	4645      	movge	r5, r8
 80051d2:	e747      	b.n	8005064 <_dtoa_r+0x75c>
 80051d4:	9e06      	ldr	r6, [sp, #24]
 80051d6:	9f08      	ldr	r7, [sp, #32]
 80051d8:	4645      	mov	r5, r8
 80051da:	e74c      	b.n	8005076 <_dtoa_r+0x76e>
 80051dc:	9a06      	ldr	r2, [sp, #24]
 80051de:	e775      	b.n	80050cc <_dtoa_r+0x7c4>
 80051e0:	9b05      	ldr	r3, [sp, #20]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	dc18      	bgt.n	8005218 <_dtoa_r+0x910>
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	b9b3      	cbnz	r3, 8005218 <_dtoa_r+0x910>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f0:	b9a3      	cbnz	r3, 800521c <_dtoa_r+0x914>
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f8:	0d1b      	lsrs	r3, r3, #20
 80051fa:	051b      	lsls	r3, r3, #20
 80051fc:	b12b      	cbz	r3, 800520a <_dtoa_r+0x902>
 80051fe:	9b04      	ldr	r3, [sp, #16]
 8005200:	3301      	adds	r3, #1
 8005202:	9304      	str	r3, [sp, #16]
 8005204:	f108 0801 	add.w	r8, r8, #1
 8005208:	2301      	movs	r3, #1
 800520a:	9306      	str	r3, [sp, #24]
 800520c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	f47f af74 	bne.w	80050fc <_dtoa_r+0x7f4>
 8005214:	2001      	movs	r0, #1
 8005216:	e779      	b.n	800510c <_dtoa_r+0x804>
 8005218:	2300      	movs	r3, #0
 800521a:	e7f6      	b.n	800520a <_dtoa_r+0x902>
 800521c:	9b02      	ldr	r3, [sp, #8]
 800521e:	e7f4      	b.n	800520a <_dtoa_r+0x902>
 8005220:	d085      	beq.n	800512e <_dtoa_r+0x826>
 8005222:	4618      	mov	r0, r3
 8005224:	301c      	adds	r0, #28
 8005226:	e77d      	b.n	8005124 <_dtoa_r+0x81c>
 8005228:	40240000 	.word	0x40240000
 800522c:	9b01      	ldr	r3, [sp, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	dc38      	bgt.n	80052a4 <_dtoa_r+0x99c>
 8005232:	9b05      	ldr	r3, [sp, #20]
 8005234:	2b02      	cmp	r3, #2
 8005236:	dd35      	ble.n	80052a4 <_dtoa_r+0x99c>
 8005238:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800523c:	f1b9 0f00 	cmp.w	r9, #0
 8005240:	d10d      	bne.n	800525e <_dtoa_r+0x956>
 8005242:	4631      	mov	r1, r6
 8005244:	464b      	mov	r3, r9
 8005246:	2205      	movs	r2, #5
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fbe5 	bl	8005a18 <__multadd>
 800524e:	4601      	mov	r1, r0
 8005250:	4606      	mov	r6, r0
 8005252:	4658      	mov	r0, fp
 8005254:	f000 fdfc 	bl	8005e50 <__mcmp>
 8005258:	2800      	cmp	r0, #0
 800525a:	f73f adbd 	bgt.w	8004dd8 <_dtoa_r+0x4d0>
 800525e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005260:	9d00      	ldr	r5, [sp, #0]
 8005262:	ea6f 0a03 	mvn.w	sl, r3
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	4631      	mov	r1, r6
 800526c:	4620      	mov	r0, r4
 800526e:	f000 fbb1 	bl	80059d4 <_Bfree>
 8005272:	2f00      	cmp	r7, #0
 8005274:	f43f aeb4 	beq.w	8004fe0 <_dtoa_r+0x6d8>
 8005278:	f1b8 0f00 	cmp.w	r8, #0
 800527c:	d005      	beq.n	800528a <_dtoa_r+0x982>
 800527e:	45b8      	cmp	r8, r7
 8005280:	d003      	beq.n	800528a <_dtoa_r+0x982>
 8005282:	4641      	mov	r1, r8
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fba5 	bl	80059d4 <_Bfree>
 800528a:	4639      	mov	r1, r7
 800528c:	4620      	mov	r0, r4
 800528e:	f000 fba1 	bl	80059d4 <_Bfree>
 8005292:	e6a5      	b.n	8004fe0 <_dtoa_r+0x6d8>
 8005294:	2600      	movs	r6, #0
 8005296:	4637      	mov	r7, r6
 8005298:	e7e1      	b.n	800525e <_dtoa_r+0x956>
 800529a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800529c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80052a0:	4637      	mov	r7, r6
 80052a2:	e599      	b.n	8004dd8 <_dtoa_r+0x4d0>
 80052a4:	9b08      	ldr	r3, [sp, #32]
 80052a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80fd 	beq.w	80054aa <_dtoa_r+0xba2>
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	dd05      	ble.n	80052c0 <_dtoa_r+0x9b8>
 80052b4:	4639      	mov	r1, r7
 80052b6:	462a      	mov	r2, r5
 80052b8:	4620      	mov	r0, r4
 80052ba:	f000 fd5d 	bl	8005d78 <__lshift>
 80052be:	4607      	mov	r7, r0
 80052c0:	9b06      	ldr	r3, [sp, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d05c      	beq.n	8005380 <_dtoa_r+0xa78>
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4620      	mov	r0, r4
 80052ca:	f000 fb43 	bl	8005954 <_Balloc>
 80052ce:	4605      	mov	r5, r0
 80052d0:	b928      	cbnz	r0, 80052de <_dtoa_r+0x9d6>
 80052d2:	4b80      	ldr	r3, [pc, #512]	; (80054d4 <_dtoa_r+0xbcc>)
 80052d4:	4602      	mov	r2, r0
 80052d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80052da:	f7ff bb2e 	b.w	800493a <_dtoa_r+0x32>
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	3202      	adds	r2, #2
 80052e2:	0092      	lsls	r2, r2, #2
 80052e4:	f107 010c 	add.w	r1, r7, #12
 80052e8:	300c      	adds	r0, #12
 80052ea:	f000 fb25 	bl	8005938 <memcpy>
 80052ee:	2201      	movs	r2, #1
 80052f0:	4629      	mov	r1, r5
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fd40 	bl	8005d78 <__lshift>
 80052f8:	9b00      	ldr	r3, [sp, #0]
 80052fa:	3301      	adds	r3, #1
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	444b      	add	r3, r9
 8005302:	9307      	str	r3, [sp, #28]
 8005304:	9b02      	ldr	r3, [sp, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	46b8      	mov	r8, r7
 800530c:	9306      	str	r3, [sp, #24]
 800530e:	4607      	mov	r7, r0
 8005310:	9b01      	ldr	r3, [sp, #4]
 8005312:	4631      	mov	r1, r6
 8005314:	3b01      	subs	r3, #1
 8005316:	4658      	mov	r0, fp
 8005318:	9302      	str	r3, [sp, #8]
 800531a:	f7ff fa67 	bl	80047ec <quorem>
 800531e:	4603      	mov	r3, r0
 8005320:	3330      	adds	r3, #48	; 0x30
 8005322:	9004      	str	r0, [sp, #16]
 8005324:	4641      	mov	r1, r8
 8005326:	4658      	mov	r0, fp
 8005328:	9308      	str	r3, [sp, #32]
 800532a:	f000 fd91 	bl	8005e50 <__mcmp>
 800532e:	463a      	mov	r2, r7
 8005330:	4681      	mov	r9, r0
 8005332:	4631      	mov	r1, r6
 8005334:	4620      	mov	r0, r4
 8005336:	f000 fda7 	bl	8005e88 <__mdiff>
 800533a:	68c2      	ldr	r2, [r0, #12]
 800533c:	9b08      	ldr	r3, [sp, #32]
 800533e:	4605      	mov	r5, r0
 8005340:	bb02      	cbnz	r2, 8005384 <_dtoa_r+0xa7c>
 8005342:	4601      	mov	r1, r0
 8005344:	4658      	mov	r0, fp
 8005346:	f000 fd83 	bl	8005e50 <__mcmp>
 800534a:	9b08      	ldr	r3, [sp, #32]
 800534c:	4602      	mov	r2, r0
 800534e:	4629      	mov	r1, r5
 8005350:	4620      	mov	r0, r4
 8005352:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005356:	f000 fb3d 	bl	80059d4 <_Bfree>
 800535a:	9b05      	ldr	r3, [sp, #20]
 800535c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800535e:	9d01      	ldr	r5, [sp, #4]
 8005360:	ea43 0102 	orr.w	r1, r3, r2
 8005364:	9b06      	ldr	r3, [sp, #24]
 8005366:	430b      	orrs	r3, r1
 8005368:	9b08      	ldr	r3, [sp, #32]
 800536a:	d10d      	bne.n	8005388 <_dtoa_r+0xa80>
 800536c:	2b39      	cmp	r3, #57	; 0x39
 800536e:	d029      	beq.n	80053c4 <_dtoa_r+0xabc>
 8005370:	f1b9 0f00 	cmp.w	r9, #0
 8005374:	dd01      	ble.n	800537a <_dtoa_r+0xa72>
 8005376:	9b04      	ldr	r3, [sp, #16]
 8005378:	3331      	adds	r3, #49	; 0x31
 800537a:	9a02      	ldr	r2, [sp, #8]
 800537c:	7013      	strb	r3, [r2, #0]
 800537e:	e774      	b.n	800526a <_dtoa_r+0x962>
 8005380:	4638      	mov	r0, r7
 8005382:	e7b9      	b.n	80052f8 <_dtoa_r+0x9f0>
 8005384:	2201      	movs	r2, #1
 8005386:	e7e2      	b.n	800534e <_dtoa_r+0xa46>
 8005388:	f1b9 0f00 	cmp.w	r9, #0
 800538c:	db06      	blt.n	800539c <_dtoa_r+0xa94>
 800538e:	9905      	ldr	r1, [sp, #20]
 8005390:	ea41 0909 	orr.w	r9, r1, r9
 8005394:	9906      	ldr	r1, [sp, #24]
 8005396:	ea59 0101 	orrs.w	r1, r9, r1
 800539a:	d120      	bne.n	80053de <_dtoa_r+0xad6>
 800539c:	2a00      	cmp	r2, #0
 800539e:	ddec      	ble.n	800537a <_dtoa_r+0xa72>
 80053a0:	4659      	mov	r1, fp
 80053a2:	2201      	movs	r2, #1
 80053a4:	4620      	mov	r0, r4
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	f000 fce6 	bl	8005d78 <__lshift>
 80053ac:	4631      	mov	r1, r6
 80053ae:	4683      	mov	fp, r0
 80053b0:	f000 fd4e 	bl	8005e50 <__mcmp>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	dc02      	bgt.n	80053c0 <_dtoa_r+0xab8>
 80053ba:	d1de      	bne.n	800537a <_dtoa_r+0xa72>
 80053bc:	07da      	lsls	r2, r3, #31
 80053be:	d5dc      	bpl.n	800537a <_dtoa_r+0xa72>
 80053c0:	2b39      	cmp	r3, #57	; 0x39
 80053c2:	d1d8      	bne.n	8005376 <_dtoa_r+0xa6e>
 80053c4:	9a02      	ldr	r2, [sp, #8]
 80053c6:	2339      	movs	r3, #57	; 0x39
 80053c8:	7013      	strb	r3, [r2, #0]
 80053ca:	462b      	mov	r3, r5
 80053cc:	461d      	mov	r5, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053d4:	2a39      	cmp	r2, #57	; 0x39
 80053d6:	d050      	beq.n	800547a <_dtoa_r+0xb72>
 80053d8:	3201      	adds	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e745      	b.n	800526a <_dtoa_r+0x962>
 80053de:	2a00      	cmp	r2, #0
 80053e0:	dd03      	ble.n	80053ea <_dtoa_r+0xae2>
 80053e2:	2b39      	cmp	r3, #57	; 0x39
 80053e4:	d0ee      	beq.n	80053c4 <_dtoa_r+0xabc>
 80053e6:	3301      	adds	r3, #1
 80053e8:	e7c7      	b.n	800537a <_dtoa_r+0xa72>
 80053ea:	9a01      	ldr	r2, [sp, #4]
 80053ec:	9907      	ldr	r1, [sp, #28]
 80053ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80053f2:	428a      	cmp	r2, r1
 80053f4:	d02a      	beq.n	800544c <_dtoa_r+0xb44>
 80053f6:	4659      	mov	r1, fp
 80053f8:	2300      	movs	r3, #0
 80053fa:	220a      	movs	r2, #10
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 fb0b 	bl	8005a18 <__multadd>
 8005402:	45b8      	cmp	r8, r7
 8005404:	4683      	mov	fp, r0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	f04f 020a 	mov.w	r2, #10
 800540e:	4641      	mov	r1, r8
 8005410:	4620      	mov	r0, r4
 8005412:	d107      	bne.n	8005424 <_dtoa_r+0xb1c>
 8005414:	f000 fb00 	bl	8005a18 <__multadd>
 8005418:	4680      	mov	r8, r0
 800541a:	4607      	mov	r7, r0
 800541c:	9b01      	ldr	r3, [sp, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	e775      	b.n	8005310 <_dtoa_r+0xa08>
 8005424:	f000 faf8 	bl	8005a18 <__multadd>
 8005428:	4639      	mov	r1, r7
 800542a:	4680      	mov	r8, r0
 800542c:	2300      	movs	r3, #0
 800542e:	220a      	movs	r2, #10
 8005430:	4620      	mov	r0, r4
 8005432:	f000 faf1 	bl	8005a18 <__multadd>
 8005436:	4607      	mov	r7, r0
 8005438:	e7f0      	b.n	800541c <_dtoa_r+0xb14>
 800543a:	f1b9 0f00 	cmp.w	r9, #0
 800543e:	9a00      	ldr	r2, [sp, #0]
 8005440:	bfcc      	ite	gt
 8005442:	464d      	movgt	r5, r9
 8005444:	2501      	movle	r5, #1
 8005446:	4415      	add	r5, r2
 8005448:	f04f 0800 	mov.w	r8, #0
 800544c:	4659      	mov	r1, fp
 800544e:	2201      	movs	r2, #1
 8005450:	4620      	mov	r0, r4
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	f000 fc90 	bl	8005d78 <__lshift>
 8005458:	4631      	mov	r1, r6
 800545a:	4683      	mov	fp, r0
 800545c:	f000 fcf8 	bl	8005e50 <__mcmp>
 8005460:	2800      	cmp	r0, #0
 8005462:	dcb2      	bgt.n	80053ca <_dtoa_r+0xac2>
 8005464:	d102      	bne.n	800546c <_dtoa_r+0xb64>
 8005466:	9b01      	ldr	r3, [sp, #4]
 8005468:	07db      	lsls	r3, r3, #31
 800546a:	d4ae      	bmi.n	80053ca <_dtoa_r+0xac2>
 800546c:	462b      	mov	r3, r5
 800546e:	461d      	mov	r5, r3
 8005470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005474:	2a30      	cmp	r2, #48	; 0x30
 8005476:	d0fa      	beq.n	800546e <_dtoa_r+0xb66>
 8005478:	e6f7      	b.n	800526a <_dtoa_r+0x962>
 800547a:	9a00      	ldr	r2, [sp, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d1a5      	bne.n	80053cc <_dtoa_r+0xac4>
 8005480:	f10a 0a01 	add.w	sl, sl, #1
 8005484:	2331      	movs	r3, #49	; 0x31
 8005486:	e779      	b.n	800537c <_dtoa_r+0xa74>
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <_dtoa_r+0xbd0>)
 800548a:	f7ff baaf 	b.w	80049ec <_dtoa_r+0xe4>
 800548e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005490:	2b00      	cmp	r3, #0
 8005492:	f47f aa86 	bne.w	80049a2 <_dtoa_r+0x9a>
 8005496:	4b11      	ldr	r3, [pc, #68]	; (80054dc <_dtoa_r+0xbd4>)
 8005498:	f7ff baa8 	b.w	80049ec <_dtoa_r+0xe4>
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	dc03      	bgt.n	80054aa <_dtoa_r+0xba2>
 80054a2:	9b05      	ldr	r3, [sp, #20]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	f73f aec9 	bgt.w	800523c <_dtoa_r+0x934>
 80054aa:	9d00      	ldr	r5, [sp, #0]
 80054ac:	4631      	mov	r1, r6
 80054ae:	4658      	mov	r0, fp
 80054b0:	f7ff f99c 	bl	80047ec <quorem>
 80054b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80054b8:	f805 3b01 	strb.w	r3, [r5], #1
 80054bc:	9a00      	ldr	r2, [sp, #0]
 80054be:	1aaa      	subs	r2, r5, r2
 80054c0:	4591      	cmp	r9, r2
 80054c2:	ddba      	ble.n	800543a <_dtoa_r+0xb32>
 80054c4:	4659      	mov	r1, fp
 80054c6:	2300      	movs	r3, #0
 80054c8:	220a      	movs	r2, #10
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 faa4 	bl	8005a18 <__multadd>
 80054d0:	4683      	mov	fp, r0
 80054d2:	e7eb      	b.n	80054ac <_dtoa_r+0xba4>
 80054d4:	080069eb 	.word	0x080069eb
 80054d8:	08006944 	.word	0x08006944
 80054dc:	08006968 	.word	0x08006968

080054e0 <__sflush_r>:
 80054e0:	898a      	ldrh	r2, [r1, #12]
 80054e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e6:	4605      	mov	r5, r0
 80054e8:	0710      	lsls	r0, r2, #28
 80054ea:	460c      	mov	r4, r1
 80054ec:	d458      	bmi.n	80055a0 <__sflush_r+0xc0>
 80054ee:	684b      	ldr	r3, [r1, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dc05      	bgt.n	8005500 <__sflush_r+0x20>
 80054f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	dc02      	bgt.n	8005500 <__sflush_r+0x20>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005502:	2e00      	cmp	r6, #0
 8005504:	d0f9      	beq.n	80054fa <__sflush_r+0x1a>
 8005506:	2300      	movs	r3, #0
 8005508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800550c:	682f      	ldr	r7, [r5, #0]
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	d032      	beq.n	8005578 <__sflush_r+0x98>
 8005512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	075a      	lsls	r2, r3, #29
 8005518:	d505      	bpl.n	8005526 <__sflush_r+0x46>
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	1ac0      	subs	r0, r0, r3
 800551e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005520:	b10b      	cbz	r3, 8005526 <__sflush_r+0x46>
 8005522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005524:	1ac0      	subs	r0, r0, r3
 8005526:	2300      	movs	r3, #0
 8005528:	4602      	mov	r2, r0
 800552a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552c:	6a21      	ldr	r1, [r4, #32]
 800552e:	4628      	mov	r0, r5
 8005530:	47b0      	blx	r6
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	d106      	bne.n	8005546 <__sflush_r+0x66>
 8005538:	6829      	ldr	r1, [r5, #0]
 800553a:	291d      	cmp	r1, #29
 800553c:	d82c      	bhi.n	8005598 <__sflush_r+0xb8>
 800553e:	4a2a      	ldr	r2, [pc, #168]	; (80055e8 <__sflush_r+0x108>)
 8005540:	40ca      	lsrs	r2, r1
 8005542:	07d6      	lsls	r6, r2, #31
 8005544:	d528      	bpl.n	8005598 <__sflush_r+0xb8>
 8005546:	2200      	movs	r2, #0
 8005548:	6062      	str	r2, [r4, #4]
 800554a:	04d9      	lsls	r1, r3, #19
 800554c:	6922      	ldr	r2, [r4, #16]
 800554e:	6022      	str	r2, [r4, #0]
 8005550:	d504      	bpl.n	800555c <__sflush_r+0x7c>
 8005552:	1c42      	adds	r2, r0, #1
 8005554:	d101      	bne.n	800555a <__sflush_r+0x7a>
 8005556:	682b      	ldr	r3, [r5, #0]
 8005558:	b903      	cbnz	r3, 800555c <__sflush_r+0x7c>
 800555a:	6560      	str	r0, [r4, #84]	; 0x54
 800555c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800555e:	602f      	str	r7, [r5, #0]
 8005560:	2900      	cmp	r1, #0
 8005562:	d0ca      	beq.n	80054fa <__sflush_r+0x1a>
 8005564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005568:	4299      	cmp	r1, r3
 800556a:	d002      	beq.n	8005572 <__sflush_r+0x92>
 800556c:	4628      	mov	r0, r5
 800556e:	f000 fd7f 	bl	8006070 <_free_r>
 8005572:	2000      	movs	r0, #0
 8005574:	6360      	str	r0, [r4, #52]	; 0x34
 8005576:	e7c1      	b.n	80054fc <__sflush_r+0x1c>
 8005578:	6a21      	ldr	r1, [r4, #32]
 800557a:	2301      	movs	r3, #1
 800557c:	4628      	mov	r0, r5
 800557e:	47b0      	blx	r6
 8005580:	1c41      	adds	r1, r0, #1
 8005582:	d1c7      	bne.n	8005514 <__sflush_r+0x34>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0c4      	beq.n	8005514 <__sflush_r+0x34>
 800558a:	2b1d      	cmp	r3, #29
 800558c:	d001      	beq.n	8005592 <__sflush_r+0xb2>
 800558e:	2b16      	cmp	r3, #22
 8005590:	d101      	bne.n	8005596 <__sflush_r+0xb6>
 8005592:	602f      	str	r7, [r5, #0]
 8005594:	e7b1      	b.n	80054fa <__sflush_r+0x1a>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	e7ad      	b.n	80054fc <__sflush_r+0x1c>
 80055a0:	690f      	ldr	r7, [r1, #16]
 80055a2:	2f00      	cmp	r7, #0
 80055a4:	d0a9      	beq.n	80054fa <__sflush_r+0x1a>
 80055a6:	0793      	lsls	r3, r2, #30
 80055a8:	680e      	ldr	r6, [r1, #0]
 80055aa:	bf08      	it	eq
 80055ac:	694b      	ldreq	r3, [r1, #20]
 80055ae:	600f      	str	r7, [r1, #0]
 80055b0:	bf18      	it	ne
 80055b2:	2300      	movne	r3, #0
 80055b4:	eba6 0807 	sub.w	r8, r6, r7
 80055b8:	608b      	str	r3, [r1, #8]
 80055ba:	f1b8 0f00 	cmp.w	r8, #0
 80055be:	dd9c      	ble.n	80054fa <__sflush_r+0x1a>
 80055c0:	6a21      	ldr	r1, [r4, #32]
 80055c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055c4:	4643      	mov	r3, r8
 80055c6:	463a      	mov	r2, r7
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b0      	blx	r6
 80055cc:	2800      	cmp	r0, #0
 80055ce:	dc06      	bgt.n	80055de <__sflush_r+0xfe>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e78e      	b.n	80054fc <__sflush_r+0x1c>
 80055de:	4407      	add	r7, r0
 80055e0:	eba8 0800 	sub.w	r8, r8, r0
 80055e4:	e7e9      	b.n	80055ba <__sflush_r+0xda>
 80055e6:	bf00      	nop
 80055e8:	20400001 	.word	0x20400001

080055ec <_fflush_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	690b      	ldr	r3, [r1, #16]
 80055f0:	4605      	mov	r5, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	b913      	cbnz	r3, 80055fc <_fflush_r+0x10>
 80055f6:	2500      	movs	r5, #0
 80055f8:	4628      	mov	r0, r5
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	b118      	cbz	r0, 8005606 <_fflush_r+0x1a>
 80055fe:	6983      	ldr	r3, [r0, #24]
 8005600:	b90b      	cbnz	r3, 8005606 <_fflush_r+0x1a>
 8005602:	f000 f887 	bl	8005714 <__sinit>
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <_fflush_r+0x6c>)
 8005608:	429c      	cmp	r4, r3
 800560a:	d11b      	bne.n	8005644 <_fflush_r+0x58>
 800560c:	686c      	ldr	r4, [r5, #4]
 800560e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ef      	beq.n	80055f6 <_fflush_r+0xa>
 8005616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005618:	07d0      	lsls	r0, r2, #31
 800561a:	d404      	bmi.n	8005626 <_fflush_r+0x3a>
 800561c:	0599      	lsls	r1, r3, #22
 800561e:	d402      	bmi.n	8005626 <_fflush_r+0x3a>
 8005620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005622:	f000 f91a 	bl	800585a <__retarget_lock_acquire_recursive>
 8005626:	4628      	mov	r0, r5
 8005628:	4621      	mov	r1, r4
 800562a:	f7ff ff59 	bl	80054e0 <__sflush_r>
 800562e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005630:	07da      	lsls	r2, r3, #31
 8005632:	4605      	mov	r5, r0
 8005634:	d4e0      	bmi.n	80055f8 <_fflush_r+0xc>
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	059b      	lsls	r3, r3, #22
 800563a:	d4dd      	bmi.n	80055f8 <_fflush_r+0xc>
 800563c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563e:	f000 f90d 	bl	800585c <__retarget_lock_release_recursive>
 8005642:	e7d9      	b.n	80055f8 <_fflush_r+0xc>
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <_fflush_r+0x70>)
 8005646:	429c      	cmp	r4, r3
 8005648:	d101      	bne.n	800564e <_fflush_r+0x62>
 800564a:	68ac      	ldr	r4, [r5, #8]
 800564c:	e7df      	b.n	800560e <_fflush_r+0x22>
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <_fflush_r+0x74>)
 8005650:	429c      	cmp	r4, r3
 8005652:	bf08      	it	eq
 8005654:	68ec      	ldreq	r4, [r5, #12]
 8005656:	e7da      	b.n	800560e <_fflush_r+0x22>
 8005658:	08006a1c 	.word	0x08006a1c
 800565c:	08006a3c 	.word	0x08006a3c
 8005660:	080069fc 	.word	0x080069fc

08005664 <std>:
 8005664:	2300      	movs	r3, #0
 8005666:	b510      	push	{r4, lr}
 8005668:	4604      	mov	r4, r0
 800566a:	e9c0 3300 	strd	r3, r3, [r0]
 800566e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005672:	6083      	str	r3, [r0, #8]
 8005674:	8181      	strh	r1, [r0, #12]
 8005676:	6643      	str	r3, [r0, #100]	; 0x64
 8005678:	81c2      	strh	r2, [r0, #14]
 800567a:	6183      	str	r3, [r0, #24]
 800567c:	4619      	mov	r1, r3
 800567e:	2208      	movs	r2, #8
 8005680:	305c      	adds	r0, #92	; 0x5c
 8005682:	f7fe fb63 	bl	8003d4c <memset>
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <std+0x38>)
 8005688:	6263      	str	r3, [r4, #36]	; 0x24
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <std+0x3c>)
 800568c:	62a3      	str	r3, [r4, #40]	; 0x28
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <std+0x40>)
 8005690:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <std+0x44>)
 8005694:	6224      	str	r4, [r4, #32]
 8005696:	6323      	str	r3, [r4, #48]	; 0x30
 8005698:	bd10      	pop	{r4, pc}
 800569a:	bf00      	nop
 800569c:	08006499 	.word	0x08006499
 80056a0:	080064bb 	.word	0x080064bb
 80056a4:	080064f3 	.word	0x080064f3
 80056a8:	08006517 	.word	0x08006517

080056ac <_cleanup_r>:
 80056ac:	4901      	ldr	r1, [pc, #4]	; (80056b4 <_cleanup_r+0x8>)
 80056ae:	f000 b8af 	b.w	8005810 <_fwalk_reent>
 80056b2:	bf00      	nop
 80056b4:	080055ed 	.word	0x080055ed

080056b8 <__sfmoreglue>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	1e4a      	subs	r2, r1, #1
 80056bc:	2568      	movs	r5, #104	; 0x68
 80056be:	4355      	muls	r5, r2
 80056c0:	460e      	mov	r6, r1
 80056c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056c6:	f000 fd23 	bl	8006110 <_malloc_r>
 80056ca:	4604      	mov	r4, r0
 80056cc:	b140      	cbz	r0, 80056e0 <__sfmoreglue+0x28>
 80056ce:	2100      	movs	r1, #0
 80056d0:	e9c0 1600 	strd	r1, r6, [r0]
 80056d4:	300c      	adds	r0, #12
 80056d6:	60a0      	str	r0, [r4, #8]
 80056d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056dc:	f7fe fb36 	bl	8003d4c <memset>
 80056e0:	4620      	mov	r0, r4
 80056e2:	bd70      	pop	{r4, r5, r6, pc}

080056e4 <__sfp_lock_acquire>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sfp_lock_acquire+0x8>)
 80056e6:	f000 b8b8 	b.w	800585a <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	2000030c 	.word	0x2000030c

080056f0 <__sfp_lock_release>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__sfp_lock_release+0x8>)
 80056f2:	f000 b8b3 	b.w	800585c <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	2000030c 	.word	0x2000030c

080056fc <__sinit_lock_acquire>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__sinit_lock_acquire+0x8>)
 80056fe:	f000 b8ac 	b.w	800585a <__retarget_lock_acquire_recursive>
 8005702:	bf00      	nop
 8005704:	20000307 	.word	0x20000307

08005708 <__sinit_lock_release>:
 8005708:	4801      	ldr	r0, [pc, #4]	; (8005710 <__sinit_lock_release+0x8>)
 800570a:	f000 b8a7 	b.w	800585c <__retarget_lock_release_recursive>
 800570e:	bf00      	nop
 8005710:	20000307 	.word	0x20000307

08005714 <__sinit>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	f7ff fff0 	bl	80056fc <__sinit_lock_acquire>
 800571c:	69a3      	ldr	r3, [r4, #24]
 800571e:	b11b      	cbz	r3, 8005728 <__sinit+0x14>
 8005720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005724:	f7ff bff0 	b.w	8005708 <__sinit_lock_release>
 8005728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800572c:	6523      	str	r3, [r4, #80]	; 0x50
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <__sinit+0x68>)
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <__sinit+0x6c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	62a2      	str	r2, [r4, #40]	; 0x28
 8005736:	42a3      	cmp	r3, r4
 8005738:	bf04      	itt	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	61a3      	streq	r3, [r4, #24]
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f820 	bl	8005784 <__sfp>
 8005744:	6060      	str	r0, [r4, #4]
 8005746:	4620      	mov	r0, r4
 8005748:	f000 f81c 	bl	8005784 <__sfp>
 800574c:	60a0      	str	r0, [r4, #8]
 800574e:	4620      	mov	r0, r4
 8005750:	f000 f818 	bl	8005784 <__sfp>
 8005754:	2200      	movs	r2, #0
 8005756:	60e0      	str	r0, [r4, #12]
 8005758:	2104      	movs	r1, #4
 800575a:	6860      	ldr	r0, [r4, #4]
 800575c:	f7ff ff82 	bl	8005664 <std>
 8005760:	68a0      	ldr	r0, [r4, #8]
 8005762:	2201      	movs	r2, #1
 8005764:	2109      	movs	r1, #9
 8005766:	f7ff ff7d 	bl	8005664 <std>
 800576a:	68e0      	ldr	r0, [r4, #12]
 800576c:	2202      	movs	r2, #2
 800576e:	2112      	movs	r1, #18
 8005770:	f7ff ff78 	bl	8005664 <std>
 8005774:	2301      	movs	r3, #1
 8005776:	61a3      	str	r3, [r4, #24]
 8005778:	e7d2      	b.n	8005720 <__sinit+0xc>
 800577a:	bf00      	nop
 800577c:	08006930 	.word	0x08006930
 8005780:	080056ad 	.word	0x080056ad

08005784 <__sfp>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	4607      	mov	r7, r0
 8005788:	f7ff ffac 	bl	80056e4 <__sfp_lock_acquire>
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <__sfp+0x84>)
 800578e:	681e      	ldr	r6, [r3, #0]
 8005790:	69b3      	ldr	r3, [r6, #24]
 8005792:	b913      	cbnz	r3, 800579a <__sfp+0x16>
 8005794:	4630      	mov	r0, r6
 8005796:	f7ff ffbd 	bl	8005714 <__sinit>
 800579a:	3648      	adds	r6, #72	; 0x48
 800579c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	d503      	bpl.n	80057ac <__sfp+0x28>
 80057a4:	6833      	ldr	r3, [r6, #0]
 80057a6:	b30b      	cbz	r3, 80057ec <__sfp+0x68>
 80057a8:	6836      	ldr	r6, [r6, #0]
 80057aa:	e7f7      	b.n	800579c <__sfp+0x18>
 80057ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057b0:	b9d5      	cbnz	r5, 80057e8 <__sfp+0x64>
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <__sfp+0x88>)
 80057b4:	60e3      	str	r3, [r4, #12]
 80057b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057ba:	6665      	str	r5, [r4, #100]	; 0x64
 80057bc:	f000 f84c 	bl	8005858 <__retarget_lock_init_recursive>
 80057c0:	f7ff ff96 	bl	80056f0 <__sfp_lock_release>
 80057c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057cc:	6025      	str	r5, [r4, #0]
 80057ce:	61a5      	str	r5, [r4, #24]
 80057d0:	2208      	movs	r2, #8
 80057d2:	4629      	mov	r1, r5
 80057d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057d8:	f7fe fab8 	bl	8003d4c <memset>
 80057dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057e4:	4620      	mov	r0, r4
 80057e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e8:	3468      	adds	r4, #104	; 0x68
 80057ea:	e7d9      	b.n	80057a0 <__sfp+0x1c>
 80057ec:	2104      	movs	r1, #4
 80057ee:	4638      	mov	r0, r7
 80057f0:	f7ff ff62 	bl	80056b8 <__sfmoreglue>
 80057f4:	4604      	mov	r4, r0
 80057f6:	6030      	str	r0, [r6, #0]
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d1d5      	bne.n	80057a8 <__sfp+0x24>
 80057fc:	f7ff ff78 	bl	80056f0 <__sfp_lock_release>
 8005800:	230c      	movs	r3, #12
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	e7ee      	b.n	80057e4 <__sfp+0x60>
 8005806:	bf00      	nop
 8005808:	08006930 	.word	0x08006930
 800580c:	ffff0001 	.word	0xffff0001

08005810 <_fwalk_reent>:
 8005810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005814:	4606      	mov	r6, r0
 8005816:	4688      	mov	r8, r1
 8005818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800581c:	2700      	movs	r7, #0
 800581e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005822:	f1b9 0901 	subs.w	r9, r9, #1
 8005826:	d505      	bpl.n	8005834 <_fwalk_reent+0x24>
 8005828:	6824      	ldr	r4, [r4, #0]
 800582a:	2c00      	cmp	r4, #0
 800582c:	d1f7      	bne.n	800581e <_fwalk_reent+0xe>
 800582e:	4638      	mov	r0, r7
 8005830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005834:	89ab      	ldrh	r3, [r5, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d907      	bls.n	800584a <_fwalk_reent+0x3a>
 800583a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800583e:	3301      	adds	r3, #1
 8005840:	d003      	beq.n	800584a <_fwalk_reent+0x3a>
 8005842:	4629      	mov	r1, r5
 8005844:	4630      	mov	r0, r6
 8005846:	47c0      	blx	r8
 8005848:	4307      	orrs	r7, r0
 800584a:	3568      	adds	r5, #104	; 0x68
 800584c:	e7e9      	b.n	8005822 <_fwalk_reent+0x12>
	...

08005850 <_localeconv_r>:
 8005850:	4800      	ldr	r0, [pc, #0]	; (8005854 <_localeconv_r+0x4>)
 8005852:	4770      	bx	lr
 8005854:	200001b0 	.word	0x200001b0

08005858 <__retarget_lock_init_recursive>:
 8005858:	4770      	bx	lr

0800585a <__retarget_lock_acquire_recursive>:
 800585a:	4770      	bx	lr

0800585c <__retarget_lock_release_recursive>:
 800585c:	4770      	bx	lr

0800585e <__swhatbuf_r>:
 800585e:	b570      	push	{r4, r5, r6, lr}
 8005860:	460e      	mov	r6, r1
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	2900      	cmp	r1, #0
 8005868:	b096      	sub	sp, #88	; 0x58
 800586a:	4614      	mov	r4, r2
 800586c:	461d      	mov	r5, r3
 800586e:	da07      	bge.n	8005880 <__swhatbuf_r+0x22>
 8005870:	2300      	movs	r3, #0
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	89b3      	ldrh	r3, [r6, #12]
 8005876:	061a      	lsls	r2, r3, #24
 8005878:	d410      	bmi.n	800589c <__swhatbuf_r+0x3e>
 800587a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587e:	e00e      	b.n	800589e <__swhatbuf_r+0x40>
 8005880:	466a      	mov	r2, sp
 8005882:	f000 ff5f 	bl	8006744 <_fstat_r>
 8005886:	2800      	cmp	r0, #0
 8005888:	dbf2      	blt.n	8005870 <__swhatbuf_r+0x12>
 800588a:	9a01      	ldr	r2, [sp, #4]
 800588c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005890:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005894:	425a      	negs	r2, r3
 8005896:	415a      	adcs	r2, r3
 8005898:	602a      	str	r2, [r5, #0]
 800589a:	e7ee      	b.n	800587a <__swhatbuf_r+0x1c>
 800589c:	2340      	movs	r3, #64	; 0x40
 800589e:	2000      	movs	r0, #0
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	b016      	add	sp, #88	; 0x58
 80058a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080058a8 <__smakebuf_r>:
 80058a8:	898b      	ldrh	r3, [r1, #12]
 80058aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058ac:	079d      	lsls	r5, r3, #30
 80058ae:	4606      	mov	r6, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	d507      	bpl.n	80058c4 <__smakebuf_r+0x1c>
 80058b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	2301      	movs	r3, #1
 80058be:	6163      	str	r3, [r4, #20]
 80058c0:	b002      	add	sp, #8
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	ab01      	add	r3, sp, #4
 80058c6:	466a      	mov	r2, sp
 80058c8:	f7ff ffc9 	bl	800585e <__swhatbuf_r>
 80058cc:	9900      	ldr	r1, [sp, #0]
 80058ce:	4605      	mov	r5, r0
 80058d0:	4630      	mov	r0, r6
 80058d2:	f000 fc1d 	bl	8006110 <_malloc_r>
 80058d6:	b948      	cbnz	r0, 80058ec <__smakebuf_r+0x44>
 80058d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058dc:	059a      	lsls	r2, r3, #22
 80058de:	d4ef      	bmi.n	80058c0 <__smakebuf_r+0x18>
 80058e0:	f023 0303 	bic.w	r3, r3, #3
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	e7e3      	b.n	80058b4 <__smakebuf_r+0xc>
 80058ec:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <__smakebuf_r+0x7c>)
 80058ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	6020      	str	r0, [r4, #0]
 80058f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	9b00      	ldr	r3, [sp, #0]
 80058fc:	6163      	str	r3, [r4, #20]
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	6120      	str	r0, [r4, #16]
 8005902:	b15b      	cbz	r3, 800591c <__smakebuf_r+0x74>
 8005904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005908:	4630      	mov	r0, r6
 800590a:	f000 ff2d 	bl	8006768 <_isatty_r>
 800590e:	b128      	cbz	r0, 800591c <__smakebuf_r+0x74>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	89a0      	ldrh	r0, [r4, #12]
 800591e:	4305      	orrs	r5, r0
 8005920:	81a5      	strh	r5, [r4, #12]
 8005922:	e7cd      	b.n	80058c0 <__smakebuf_r+0x18>
 8005924:	080056ad 	.word	0x080056ad

08005928 <malloc>:
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <malloc+0xc>)
 800592a:	4601      	mov	r1, r0
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f000 bbef 	b.w	8006110 <_malloc_r>
 8005932:	bf00      	nop
 8005934:	2000005c 	.word	0x2000005c

08005938 <memcpy>:
 8005938:	440a      	add	r2, r1
 800593a:	4291      	cmp	r1, r2
 800593c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005940:	d100      	bne.n	8005944 <memcpy+0xc>
 8005942:	4770      	bx	lr
 8005944:	b510      	push	{r4, lr}
 8005946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800594a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800594e:	4291      	cmp	r1, r2
 8005950:	d1f9      	bne.n	8005946 <memcpy+0xe>
 8005952:	bd10      	pop	{r4, pc}

08005954 <_Balloc>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005958:	4604      	mov	r4, r0
 800595a:	460d      	mov	r5, r1
 800595c:	b976      	cbnz	r6, 800597c <_Balloc+0x28>
 800595e:	2010      	movs	r0, #16
 8005960:	f7ff ffe2 	bl	8005928 <malloc>
 8005964:	4602      	mov	r2, r0
 8005966:	6260      	str	r0, [r4, #36]	; 0x24
 8005968:	b920      	cbnz	r0, 8005974 <_Balloc+0x20>
 800596a:	4b18      	ldr	r3, [pc, #96]	; (80059cc <_Balloc+0x78>)
 800596c:	4818      	ldr	r0, [pc, #96]	; (80059d0 <_Balloc+0x7c>)
 800596e:	2166      	movs	r1, #102	; 0x66
 8005970:	f000 fea8 	bl	80066c4 <__assert_func>
 8005974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005978:	6006      	str	r6, [r0, #0]
 800597a:	60c6      	str	r6, [r0, #12]
 800597c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800597e:	68f3      	ldr	r3, [r6, #12]
 8005980:	b183      	cbz	r3, 80059a4 <_Balloc+0x50>
 8005982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800598a:	b9b8      	cbnz	r0, 80059bc <_Balloc+0x68>
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f605 	lsl.w	r6, r1, r5
 8005992:	1d72      	adds	r2, r6, #5
 8005994:	0092      	lsls	r2, r2, #2
 8005996:	4620      	mov	r0, r4
 8005998:	f000 fb5a 	bl	8006050 <_calloc_r>
 800599c:	b160      	cbz	r0, 80059b8 <_Balloc+0x64>
 800599e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059a2:	e00e      	b.n	80059c2 <_Balloc+0x6e>
 80059a4:	2221      	movs	r2, #33	; 0x21
 80059a6:	2104      	movs	r1, #4
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fb51 	bl	8006050 <_calloc_r>
 80059ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059b0:	60f0      	str	r0, [r6, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e4      	bne.n	8005982 <_Balloc+0x2e>
 80059b8:	2000      	movs	r0, #0
 80059ba:	bd70      	pop	{r4, r5, r6, pc}
 80059bc:	6802      	ldr	r2, [r0, #0]
 80059be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059c2:	2300      	movs	r3, #0
 80059c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059c8:	e7f7      	b.n	80059ba <_Balloc+0x66>
 80059ca:	bf00      	nop
 80059cc:	08006975 	.word	0x08006975
 80059d0:	08006a5c 	.word	0x08006a5c

080059d4 <_Bfree>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059d8:	4605      	mov	r5, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b976      	cbnz	r6, 80059fc <_Bfree+0x28>
 80059de:	2010      	movs	r0, #16
 80059e0:	f7ff ffa2 	bl	8005928 <malloc>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6268      	str	r0, [r5, #36]	; 0x24
 80059e8:	b920      	cbnz	r0, 80059f4 <_Bfree+0x20>
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <_Bfree+0x3c>)
 80059ec:	4809      	ldr	r0, [pc, #36]	; (8005a14 <_Bfree+0x40>)
 80059ee:	218a      	movs	r1, #138	; 0x8a
 80059f0:	f000 fe68 	bl	80066c4 <__assert_func>
 80059f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059f8:	6006      	str	r6, [r0, #0]
 80059fa:	60c6      	str	r6, [r0, #12]
 80059fc:	b13c      	cbz	r4, 8005a0e <_Bfree+0x3a>
 80059fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a00:	6862      	ldr	r2, [r4, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a08:	6021      	str	r1, [r4, #0]
 8005a0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	08006975 	.word	0x08006975
 8005a14:	08006a5c 	.word	0x08006a5c

08005a18 <__multadd>:
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	690e      	ldr	r6, [r1, #16]
 8005a1e:	4607      	mov	r7, r0
 8005a20:	4698      	mov	r8, r3
 8005a22:	460c      	mov	r4, r1
 8005a24:	f101 0014 	add.w	r0, r1, #20
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6805      	ldr	r5, [r0, #0]
 8005a2c:	b2a9      	uxth	r1, r5
 8005a2e:	fb02 8101 	mla	r1, r2, r1, r8
 8005a32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a36:	0c2d      	lsrs	r5, r5, #16
 8005a38:	fb02 c505 	mla	r5, r2, r5, ip
 8005a3c:	b289      	uxth	r1, r1
 8005a3e:	3301      	adds	r3, #1
 8005a40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a44:	429e      	cmp	r6, r3
 8005a46:	f840 1b04 	str.w	r1, [r0], #4
 8005a4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a4e:	dcec      	bgt.n	8005a2a <__multadd+0x12>
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	d022      	beq.n	8005a9c <__multadd+0x84>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	42b3      	cmp	r3, r6
 8005a5a:	dc19      	bgt.n	8005a90 <__multadd+0x78>
 8005a5c:	6861      	ldr	r1, [r4, #4]
 8005a5e:	4638      	mov	r0, r7
 8005a60:	3101      	adds	r1, #1
 8005a62:	f7ff ff77 	bl	8005954 <_Balloc>
 8005a66:	4605      	mov	r5, r0
 8005a68:	b928      	cbnz	r0, 8005a76 <__multadd+0x5e>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <__multadd+0x8c>)
 8005a6e:	480e      	ldr	r0, [pc, #56]	; (8005aa8 <__multadd+0x90>)
 8005a70:	21b5      	movs	r1, #181	; 0xb5
 8005a72:	f000 fe27 	bl	80066c4 <__assert_func>
 8005a76:	6922      	ldr	r2, [r4, #16]
 8005a78:	3202      	adds	r2, #2
 8005a7a:	f104 010c 	add.w	r1, r4, #12
 8005a7e:	0092      	lsls	r2, r2, #2
 8005a80:	300c      	adds	r0, #12
 8005a82:	f7ff ff59 	bl	8005938 <memcpy>
 8005a86:	4621      	mov	r1, r4
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f7ff ffa3 	bl	80059d4 <_Bfree>
 8005a8e:	462c      	mov	r4, r5
 8005a90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a94:	3601      	adds	r6, #1
 8005a96:	f8c3 8014 	str.w	r8, [r3, #20]
 8005a9a:	6126      	str	r6, [r4, #16]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa2:	bf00      	nop
 8005aa4:	080069eb 	.word	0x080069eb
 8005aa8:	08006a5c 	.word	0x08006a5c

08005aac <__hi0bits>:
 8005aac:	0c03      	lsrs	r3, r0, #16
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	b9d3      	cbnz	r3, 8005ae8 <__hi0bits+0x3c>
 8005ab2:	0400      	lsls	r0, r0, #16
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005aba:	bf04      	itt	eq
 8005abc:	0200      	lsleq	r0, r0, #8
 8005abe:	3308      	addeq	r3, #8
 8005ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ac4:	bf04      	itt	eq
 8005ac6:	0100      	lsleq	r0, r0, #4
 8005ac8:	3304      	addeq	r3, #4
 8005aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ace:	bf04      	itt	eq
 8005ad0:	0080      	lsleq	r0, r0, #2
 8005ad2:	3302      	addeq	r3, #2
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	db05      	blt.n	8005ae4 <__hi0bits+0x38>
 8005ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005adc:	f103 0301 	add.w	r3, r3, #1
 8005ae0:	bf08      	it	eq
 8005ae2:	2320      	moveq	r3, #32
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4770      	bx	lr
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e7e4      	b.n	8005ab6 <__hi0bits+0xa>

08005aec <__lo0bits>:
 8005aec:	6803      	ldr	r3, [r0, #0]
 8005aee:	f013 0207 	ands.w	r2, r3, #7
 8005af2:	4601      	mov	r1, r0
 8005af4:	d00b      	beq.n	8005b0e <__lo0bits+0x22>
 8005af6:	07da      	lsls	r2, r3, #31
 8005af8:	d424      	bmi.n	8005b44 <__lo0bits+0x58>
 8005afa:	0798      	lsls	r0, r3, #30
 8005afc:	bf49      	itett	mi
 8005afe:	085b      	lsrmi	r3, r3, #1
 8005b00:	089b      	lsrpl	r3, r3, #2
 8005b02:	2001      	movmi	r0, #1
 8005b04:	600b      	strmi	r3, [r1, #0]
 8005b06:	bf5c      	itt	pl
 8005b08:	600b      	strpl	r3, [r1, #0]
 8005b0a:	2002      	movpl	r0, #2
 8005b0c:	4770      	bx	lr
 8005b0e:	b298      	uxth	r0, r3
 8005b10:	b9b0      	cbnz	r0, 8005b40 <__lo0bits+0x54>
 8005b12:	0c1b      	lsrs	r3, r3, #16
 8005b14:	2010      	movs	r0, #16
 8005b16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b1a:	bf04      	itt	eq
 8005b1c:	0a1b      	lsreq	r3, r3, #8
 8005b1e:	3008      	addeq	r0, #8
 8005b20:	071a      	lsls	r2, r3, #28
 8005b22:	bf04      	itt	eq
 8005b24:	091b      	lsreq	r3, r3, #4
 8005b26:	3004      	addeq	r0, #4
 8005b28:	079a      	lsls	r2, r3, #30
 8005b2a:	bf04      	itt	eq
 8005b2c:	089b      	lsreq	r3, r3, #2
 8005b2e:	3002      	addeq	r0, #2
 8005b30:	07da      	lsls	r2, r3, #31
 8005b32:	d403      	bmi.n	8005b3c <__lo0bits+0x50>
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	f100 0001 	add.w	r0, r0, #1
 8005b3a:	d005      	beq.n	8005b48 <__lo0bits+0x5c>
 8005b3c:	600b      	str	r3, [r1, #0]
 8005b3e:	4770      	bx	lr
 8005b40:	4610      	mov	r0, r2
 8005b42:	e7e8      	b.n	8005b16 <__lo0bits+0x2a>
 8005b44:	2000      	movs	r0, #0
 8005b46:	4770      	bx	lr
 8005b48:	2020      	movs	r0, #32
 8005b4a:	4770      	bx	lr

08005b4c <__i2b>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	460c      	mov	r4, r1
 8005b50:	2101      	movs	r1, #1
 8005b52:	f7ff feff 	bl	8005954 <_Balloc>
 8005b56:	4602      	mov	r2, r0
 8005b58:	b928      	cbnz	r0, 8005b66 <__i2b+0x1a>
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <__i2b+0x24>)
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <__i2b+0x28>)
 8005b5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b62:	f000 fdaf 	bl	80066c4 <__assert_func>
 8005b66:	2301      	movs	r3, #1
 8005b68:	6144      	str	r4, [r0, #20]
 8005b6a:	6103      	str	r3, [r0, #16]
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	bf00      	nop
 8005b70:	080069eb 	.word	0x080069eb
 8005b74:	08006a5c 	.word	0x08006a5c

08005b78 <__multiply>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	690a      	ldr	r2, [r1, #16]
 8005b80:	6923      	ldr	r3, [r4, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	bfb8      	it	lt
 8005b86:	460b      	movlt	r3, r1
 8005b88:	460d      	mov	r5, r1
 8005b8a:	bfbc      	itt	lt
 8005b8c:	4625      	movlt	r5, r4
 8005b8e:	461c      	movlt	r4, r3
 8005b90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005b94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b98:	68ab      	ldr	r3, [r5, #8]
 8005b9a:	6869      	ldr	r1, [r5, #4]
 8005b9c:	eb0a 0709 	add.w	r7, sl, r9
 8005ba0:	42bb      	cmp	r3, r7
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	bfb8      	it	lt
 8005ba6:	3101      	addlt	r1, #1
 8005ba8:	f7ff fed4 	bl	8005954 <_Balloc>
 8005bac:	b930      	cbnz	r0, 8005bbc <__multiply+0x44>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b42      	ldr	r3, [pc, #264]	; (8005cbc <__multiply+0x144>)
 8005bb2:	4843      	ldr	r0, [pc, #268]	; (8005cc0 <__multiply+0x148>)
 8005bb4:	f240 115d 	movw	r1, #349	; 0x15d
 8005bb8:	f000 fd84 	bl	80066c4 <__assert_func>
 8005bbc:	f100 0614 	add.w	r6, r0, #20
 8005bc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005bc4:	4633      	mov	r3, r6
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	4543      	cmp	r3, r8
 8005bca:	d31e      	bcc.n	8005c0a <__multiply+0x92>
 8005bcc:	f105 0c14 	add.w	ip, r5, #20
 8005bd0:	f104 0314 	add.w	r3, r4, #20
 8005bd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005bd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005bdc:	9202      	str	r2, [sp, #8]
 8005bde:	ebac 0205 	sub.w	r2, ip, r5
 8005be2:	3a15      	subs	r2, #21
 8005be4:	f022 0203 	bic.w	r2, r2, #3
 8005be8:	3204      	adds	r2, #4
 8005bea:	f105 0115 	add.w	r1, r5, #21
 8005bee:	458c      	cmp	ip, r1
 8005bf0:	bf38      	it	cc
 8005bf2:	2204      	movcc	r2, #4
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	9a02      	ldr	r2, [sp, #8]
 8005bf8:	9303      	str	r3, [sp, #12]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d808      	bhi.n	8005c10 <__multiply+0x98>
 8005bfe:	2f00      	cmp	r7, #0
 8005c00:	dc55      	bgt.n	8005cae <__multiply+0x136>
 8005c02:	6107      	str	r7, [r0, #16]
 8005c04:	b005      	add	sp, #20
 8005c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0a:	f843 2b04 	str.w	r2, [r3], #4
 8005c0e:	e7db      	b.n	8005bc8 <__multiply+0x50>
 8005c10:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c14:	f1ba 0f00 	cmp.w	sl, #0
 8005c18:	d020      	beq.n	8005c5c <__multiply+0xe4>
 8005c1a:	f105 0e14 	add.w	lr, r5, #20
 8005c1e:	46b1      	mov	r9, r6
 8005c20:	2200      	movs	r2, #0
 8005c22:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c26:	f8d9 b000 	ldr.w	fp, [r9]
 8005c2a:	b2a1      	uxth	r1, r4
 8005c2c:	fa1f fb8b 	uxth.w	fp, fp
 8005c30:	fb0a b101 	mla	r1, sl, r1, fp
 8005c34:	4411      	add	r1, r2
 8005c36:	f8d9 2000 	ldr.w	r2, [r9]
 8005c3a:	0c24      	lsrs	r4, r4, #16
 8005c3c:	0c12      	lsrs	r2, r2, #16
 8005c3e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c46:	b289      	uxth	r1, r1
 8005c48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c4c:	45f4      	cmp	ip, lr
 8005c4e:	f849 1b04 	str.w	r1, [r9], #4
 8005c52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c56:	d8e4      	bhi.n	8005c22 <__multiply+0xaa>
 8005c58:	9901      	ldr	r1, [sp, #4]
 8005c5a:	5072      	str	r2, [r6, r1]
 8005c5c:	9a03      	ldr	r2, [sp, #12]
 8005c5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c62:	3304      	adds	r3, #4
 8005c64:	f1b9 0f00 	cmp.w	r9, #0
 8005c68:	d01f      	beq.n	8005caa <__multiply+0x132>
 8005c6a:	6834      	ldr	r4, [r6, #0]
 8005c6c:	f105 0114 	add.w	r1, r5, #20
 8005c70:	46b6      	mov	lr, r6
 8005c72:	f04f 0a00 	mov.w	sl, #0
 8005c76:	880a      	ldrh	r2, [r1, #0]
 8005c78:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c7c:	fb09 b202 	mla	r2, r9, r2, fp
 8005c80:	4492      	add	sl, r2
 8005c82:	b2a4      	uxth	r4, r4
 8005c84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005c88:	f84e 4b04 	str.w	r4, [lr], #4
 8005c8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c90:	f8be 2000 	ldrh.w	r2, [lr]
 8005c94:	0c24      	lsrs	r4, r4, #16
 8005c96:	fb09 2404 	mla	r4, r9, r4, r2
 8005c9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005c9e:	458c      	cmp	ip, r1
 8005ca0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005ca4:	d8e7      	bhi.n	8005c76 <__multiply+0xfe>
 8005ca6:	9a01      	ldr	r2, [sp, #4]
 8005ca8:	50b4      	str	r4, [r6, r2]
 8005caa:	3604      	adds	r6, #4
 8005cac:	e7a3      	b.n	8005bf6 <__multiply+0x7e>
 8005cae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1a5      	bne.n	8005c02 <__multiply+0x8a>
 8005cb6:	3f01      	subs	r7, #1
 8005cb8:	e7a1      	b.n	8005bfe <__multiply+0x86>
 8005cba:	bf00      	nop
 8005cbc:	080069eb 	.word	0x080069eb
 8005cc0:	08006a5c 	.word	0x08006a5c

08005cc4 <__pow5mult>:
 8005cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc8:	4615      	mov	r5, r2
 8005cca:	f012 0203 	ands.w	r2, r2, #3
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460f      	mov	r7, r1
 8005cd2:	d007      	beq.n	8005ce4 <__pow5mult+0x20>
 8005cd4:	4c25      	ldr	r4, [pc, #148]	; (8005d6c <__pow5mult+0xa8>)
 8005cd6:	3a01      	subs	r2, #1
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cde:	f7ff fe9b 	bl	8005a18 <__multadd>
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	10ad      	asrs	r5, r5, #2
 8005ce6:	d03d      	beq.n	8005d64 <__pow5mult+0xa0>
 8005ce8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cea:	b97c      	cbnz	r4, 8005d0c <__pow5mult+0x48>
 8005cec:	2010      	movs	r0, #16
 8005cee:	f7ff fe1b 	bl	8005928 <malloc>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6270      	str	r0, [r6, #36]	; 0x24
 8005cf6:	b928      	cbnz	r0, 8005d04 <__pow5mult+0x40>
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <__pow5mult+0xac>)
 8005cfa:	481e      	ldr	r0, [pc, #120]	; (8005d74 <__pow5mult+0xb0>)
 8005cfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d00:	f000 fce0 	bl	80066c4 <__assert_func>
 8005d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d08:	6004      	str	r4, [r0, #0]
 8005d0a:	60c4      	str	r4, [r0, #12]
 8005d0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d14:	b94c      	cbnz	r4, 8005d2a <__pow5mult+0x66>
 8005d16:	f240 2171 	movw	r1, #625	; 0x271
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7ff ff16 	bl	8005b4c <__i2b>
 8005d20:	2300      	movs	r3, #0
 8005d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d26:	4604      	mov	r4, r0
 8005d28:	6003      	str	r3, [r0, #0]
 8005d2a:	f04f 0900 	mov.w	r9, #0
 8005d2e:	07eb      	lsls	r3, r5, #31
 8005d30:	d50a      	bpl.n	8005d48 <__pow5mult+0x84>
 8005d32:	4639      	mov	r1, r7
 8005d34:	4622      	mov	r2, r4
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff ff1e 	bl	8005b78 <__multiply>
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4680      	mov	r8, r0
 8005d40:	4630      	mov	r0, r6
 8005d42:	f7ff fe47 	bl	80059d4 <_Bfree>
 8005d46:	4647      	mov	r7, r8
 8005d48:	106d      	asrs	r5, r5, #1
 8005d4a:	d00b      	beq.n	8005d64 <__pow5mult+0xa0>
 8005d4c:	6820      	ldr	r0, [r4, #0]
 8005d4e:	b938      	cbnz	r0, 8005d60 <__pow5mult+0x9c>
 8005d50:	4622      	mov	r2, r4
 8005d52:	4621      	mov	r1, r4
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7ff ff0f 	bl	8005b78 <__multiply>
 8005d5a:	6020      	str	r0, [r4, #0]
 8005d5c:	f8c0 9000 	str.w	r9, [r0]
 8005d60:	4604      	mov	r4, r0
 8005d62:	e7e4      	b.n	8005d2e <__pow5mult+0x6a>
 8005d64:	4638      	mov	r0, r7
 8005d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08006bb0 	.word	0x08006bb0
 8005d70:	08006975 	.word	0x08006975
 8005d74:	08006a5c 	.word	0x08006a5c

08005d78 <__lshift>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	6849      	ldr	r1, [r1, #4]
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	4607      	mov	r7, r0
 8005d8a:	4691      	mov	r9, r2
 8005d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d90:	f108 0601 	add.w	r6, r8, #1
 8005d94:	42b3      	cmp	r3, r6
 8005d96:	db0b      	blt.n	8005db0 <__lshift+0x38>
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f7ff fddb 	bl	8005954 <_Balloc>
 8005d9e:	4605      	mov	r5, r0
 8005da0:	b948      	cbnz	r0, 8005db6 <__lshift+0x3e>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <__lshift+0xd0>)
 8005da6:	4829      	ldr	r0, [pc, #164]	; (8005e4c <__lshift+0xd4>)
 8005da8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005dac:	f000 fc8a 	bl	80066c4 <__assert_func>
 8005db0:	3101      	adds	r1, #1
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	e7ee      	b.n	8005d94 <__lshift+0x1c>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f100 0114 	add.w	r1, r0, #20
 8005dbc:	f100 0210 	add.w	r2, r0, #16
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	4553      	cmp	r3, sl
 8005dc4:	db33      	blt.n	8005e2e <__lshift+0xb6>
 8005dc6:	6920      	ldr	r0, [r4, #16]
 8005dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005dcc:	f104 0314 	add.w	r3, r4, #20
 8005dd0:	f019 091f 	ands.w	r9, r9, #31
 8005dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ddc:	d02b      	beq.n	8005e36 <__lshift+0xbe>
 8005dde:	f1c9 0e20 	rsb	lr, r9, #32
 8005de2:	468a      	mov	sl, r1
 8005de4:	2200      	movs	r2, #0
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	fa00 f009 	lsl.w	r0, r0, r9
 8005dec:	4302      	orrs	r2, r0
 8005dee:	f84a 2b04 	str.w	r2, [sl], #4
 8005df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df6:	459c      	cmp	ip, r3
 8005df8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005dfc:	d8f3      	bhi.n	8005de6 <__lshift+0x6e>
 8005dfe:	ebac 0304 	sub.w	r3, ip, r4
 8005e02:	3b15      	subs	r3, #21
 8005e04:	f023 0303 	bic.w	r3, r3, #3
 8005e08:	3304      	adds	r3, #4
 8005e0a:	f104 0015 	add.w	r0, r4, #21
 8005e0e:	4584      	cmp	ip, r0
 8005e10:	bf38      	it	cc
 8005e12:	2304      	movcc	r3, #4
 8005e14:	50ca      	str	r2, [r1, r3]
 8005e16:	b10a      	cbz	r2, 8005e1c <__lshift+0xa4>
 8005e18:	f108 0602 	add.w	r6, r8, #2
 8005e1c:	3e01      	subs	r6, #1
 8005e1e:	4638      	mov	r0, r7
 8005e20:	612e      	str	r6, [r5, #16]
 8005e22:	4621      	mov	r1, r4
 8005e24:	f7ff fdd6 	bl	80059d4 <_Bfree>
 8005e28:	4628      	mov	r0, r5
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e32:	3301      	adds	r3, #1
 8005e34:	e7c5      	b.n	8005dc2 <__lshift+0x4a>
 8005e36:	3904      	subs	r1, #4
 8005e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e40:	459c      	cmp	ip, r3
 8005e42:	d8f9      	bhi.n	8005e38 <__lshift+0xc0>
 8005e44:	e7ea      	b.n	8005e1c <__lshift+0xa4>
 8005e46:	bf00      	nop
 8005e48:	080069eb 	.word	0x080069eb
 8005e4c:	08006a5c 	.word	0x08006a5c

08005e50 <__mcmp>:
 8005e50:	b530      	push	{r4, r5, lr}
 8005e52:	6902      	ldr	r2, [r0, #16]
 8005e54:	690c      	ldr	r4, [r1, #16]
 8005e56:	1b12      	subs	r2, r2, r4
 8005e58:	d10e      	bne.n	8005e78 <__mcmp+0x28>
 8005e5a:	f100 0314 	add.w	r3, r0, #20
 8005e5e:	3114      	adds	r1, #20
 8005e60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e70:	42a5      	cmp	r5, r4
 8005e72:	d003      	beq.n	8005e7c <__mcmp+0x2c>
 8005e74:	d305      	bcc.n	8005e82 <__mcmp+0x32>
 8005e76:	2201      	movs	r2, #1
 8005e78:	4610      	mov	r0, r2
 8005e7a:	bd30      	pop	{r4, r5, pc}
 8005e7c:	4283      	cmp	r3, r0
 8005e7e:	d3f3      	bcc.n	8005e68 <__mcmp+0x18>
 8005e80:	e7fa      	b.n	8005e78 <__mcmp+0x28>
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295
 8005e86:	e7f7      	b.n	8005e78 <__mcmp+0x28>

08005e88 <__mdiff>:
 8005e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	4606      	mov	r6, r0
 8005e90:	4611      	mov	r1, r2
 8005e92:	4620      	mov	r0, r4
 8005e94:	4617      	mov	r7, r2
 8005e96:	f7ff ffdb 	bl	8005e50 <__mcmp>
 8005e9a:	1e05      	subs	r5, r0, #0
 8005e9c:	d110      	bne.n	8005ec0 <__mdiff+0x38>
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff fd57 	bl	8005954 <_Balloc>
 8005ea6:	b930      	cbnz	r0, 8005eb6 <__mdiff+0x2e>
 8005ea8:	4b39      	ldr	r3, [pc, #228]	; (8005f90 <__mdiff+0x108>)
 8005eaa:	4602      	mov	r2, r0
 8005eac:	f240 2132 	movw	r1, #562	; 0x232
 8005eb0:	4838      	ldr	r0, [pc, #224]	; (8005f94 <__mdiff+0x10c>)
 8005eb2:	f000 fc07 	bl	80066c4 <__assert_func>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec0:	bfa4      	itt	ge
 8005ec2:	463b      	movge	r3, r7
 8005ec4:	4627      	movge	r7, r4
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	bfa6      	itte	ge
 8005ecc:	461c      	movge	r4, r3
 8005ece:	2500      	movge	r5, #0
 8005ed0:	2501      	movlt	r5, #1
 8005ed2:	f7ff fd3f 	bl	8005954 <_Balloc>
 8005ed6:	b920      	cbnz	r0, 8005ee2 <__mdiff+0x5a>
 8005ed8:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <__mdiff+0x108>)
 8005eda:	4602      	mov	r2, r0
 8005edc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ee0:	e7e6      	b.n	8005eb0 <__mdiff+0x28>
 8005ee2:	693e      	ldr	r6, [r7, #16]
 8005ee4:	60c5      	str	r5, [r0, #12]
 8005ee6:	6925      	ldr	r5, [r4, #16]
 8005ee8:	f107 0114 	add.w	r1, r7, #20
 8005eec:	f104 0914 	add.w	r9, r4, #20
 8005ef0:	f100 0e14 	add.w	lr, r0, #20
 8005ef4:	f107 0210 	add.w	r2, r7, #16
 8005ef8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005efc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005f00:	46f2      	mov	sl, lr
 8005f02:	2700      	movs	r7, #0
 8005f04:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f0c:	fa1f f883 	uxth.w	r8, r3
 8005f10:	fa17 f78b 	uxtah	r7, r7, fp
 8005f14:	0c1b      	lsrs	r3, r3, #16
 8005f16:	eba7 0808 	sub.w	r8, r7, r8
 8005f1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f22:	fa1f f888 	uxth.w	r8, r8
 8005f26:	141f      	asrs	r7, r3, #16
 8005f28:	454d      	cmp	r5, r9
 8005f2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f2e:	f84a 3b04 	str.w	r3, [sl], #4
 8005f32:	d8e7      	bhi.n	8005f04 <__mdiff+0x7c>
 8005f34:	1b2b      	subs	r3, r5, r4
 8005f36:	3b15      	subs	r3, #21
 8005f38:	f023 0303 	bic.w	r3, r3, #3
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	3415      	adds	r4, #21
 8005f40:	42a5      	cmp	r5, r4
 8005f42:	bf38      	it	cc
 8005f44:	2304      	movcc	r3, #4
 8005f46:	4419      	add	r1, r3
 8005f48:	4473      	add	r3, lr
 8005f4a:	469e      	mov	lr, r3
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	4565      	cmp	r5, ip
 8005f50:	d30e      	bcc.n	8005f70 <__mdiff+0xe8>
 8005f52:	f10c 0203 	add.w	r2, ip, #3
 8005f56:	1a52      	subs	r2, r2, r1
 8005f58:	f022 0203 	bic.w	r2, r2, #3
 8005f5c:	3903      	subs	r1, #3
 8005f5e:	458c      	cmp	ip, r1
 8005f60:	bf38      	it	cc
 8005f62:	2200      	movcc	r2, #0
 8005f64:	441a      	add	r2, r3
 8005f66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005f6a:	b17b      	cbz	r3, 8005f8c <__mdiff+0x104>
 8005f6c:	6106      	str	r6, [r0, #16]
 8005f6e:	e7a5      	b.n	8005ebc <__mdiff+0x34>
 8005f70:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f74:	fa17 f488 	uxtah	r4, r7, r8
 8005f78:	1422      	asrs	r2, r4, #16
 8005f7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005f7e:	b2a4      	uxth	r4, r4
 8005f80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f84:	f84e 4b04 	str.w	r4, [lr], #4
 8005f88:	1417      	asrs	r7, r2, #16
 8005f8a:	e7e0      	b.n	8005f4e <__mdiff+0xc6>
 8005f8c:	3e01      	subs	r6, #1
 8005f8e:	e7ea      	b.n	8005f66 <__mdiff+0xde>
 8005f90:	080069eb 	.word	0x080069eb
 8005f94:	08006a5c 	.word	0x08006a5c

08005f98 <__d2b>:
 8005f98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4689      	mov	r9, r1
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	ec57 6b10 	vmov	r6, r7, d0
 8005fa4:	4690      	mov	r8, r2
 8005fa6:	f7ff fcd5 	bl	8005954 <_Balloc>
 8005faa:	4604      	mov	r4, r0
 8005fac:	b930      	cbnz	r0, 8005fbc <__d2b+0x24>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	4b25      	ldr	r3, [pc, #148]	; (8006048 <__d2b+0xb0>)
 8005fb2:	4826      	ldr	r0, [pc, #152]	; (800604c <__d2b+0xb4>)
 8005fb4:	f240 310a 	movw	r1, #778	; 0x30a
 8005fb8:	f000 fb84 	bl	80066c4 <__assert_func>
 8005fbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005fc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fc4:	bb35      	cbnz	r5, 8006014 <__d2b+0x7c>
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	d028      	beq.n	800601e <__d2b+0x86>
 8005fcc:	4668      	mov	r0, sp
 8005fce:	9600      	str	r6, [sp, #0]
 8005fd0:	f7ff fd8c 	bl	8005aec <__lo0bits>
 8005fd4:	9900      	ldr	r1, [sp, #0]
 8005fd6:	b300      	cbz	r0, 800601a <__d2b+0x82>
 8005fd8:	9a01      	ldr	r2, [sp, #4]
 8005fda:	f1c0 0320 	rsb	r3, r0, #32
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	40c2      	lsrs	r2, r0
 8005fe6:	6163      	str	r3, [r4, #20]
 8005fe8:	9201      	str	r2, [sp, #4]
 8005fea:	9b01      	ldr	r3, [sp, #4]
 8005fec:	61a3      	str	r3, [r4, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf14      	ite	ne
 8005ff2:	2202      	movne	r2, #2
 8005ff4:	2201      	moveq	r2, #1
 8005ff6:	6122      	str	r2, [r4, #16]
 8005ff8:	b1d5      	cbz	r5, 8006030 <__d2b+0x98>
 8005ffa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ffe:	4405      	add	r5, r0
 8006000:	f8c9 5000 	str.w	r5, [r9]
 8006004:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006008:	f8c8 0000 	str.w	r0, [r8]
 800600c:	4620      	mov	r0, r4
 800600e:	b003      	add	sp, #12
 8006010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006018:	e7d5      	b.n	8005fc6 <__d2b+0x2e>
 800601a:	6161      	str	r1, [r4, #20]
 800601c:	e7e5      	b.n	8005fea <__d2b+0x52>
 800601e:	a801      	add	r0, sp, #4
 8006020:	f7ff fd64 	bl	8005aec <__lo0bits>
 8006024:	9b01      	ldr	r3, [sp, #4]
 8006026:	6163      	str	r3, [r4, #20]
 8006028:	2201      	movs	r2, #1
 800602a:	6122      	str	r2, [r4, #16]
 800602c:	3020      	adds	r0, #32
 800602e:	e7e3      	b.n	8005ff8 <__d2b+0x60>
 8006030:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006034:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006038:	f8c9 0000 	str.w	r0, [r9]
 800603c:	6918      	ldr	r0, [r3, #16]
 800603e:	f7ff fd35 	bl	8005aac <__hi0bits>
 8006042:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006046:	e7df      	b.n	8006008 <__d2b+0x70>
 8006048:	080069eb 	.word	0x080069eb
 800604c:	08006a5c 	.word	0x08006a5c

08006050 <_calloc_r>:
 8006050:	b513      	push	{r0, r1, r4, lr}
 8006052:	434a      	muls	r2, r1
 8006054:	4611      	mov	r1, r2
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	f000 f85a 	bl	8006110 <_malloc_r>
 800605c:	4604      	mov	r4, r0
 800605e:	b118      	cbz	r0, 8006068 <_calloc_r+0x18>
 8006060:	9a01      	ldr	r2, [sp, #4]
 8006062:	2100      	movs	r1, #0
 8006064:	f7fd fe72 	bl	8003d4c <memset>
 8006068:	4620      	mov	r0, r4
 800606a:	b002      	add	sp, #8
 800606c:	bd10      	pop	{r4, pc}
	...

08006070 <_free_r>:
 8006070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006072:	2900      	cmp	r1, #0
 8006074:	d048      	beq.n	8006108 <_free_r+0x98>
 8006076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f1a1 0404 	sub.w	r4, r1, #4
 8006082:	bfb8      	it	lt
 8006084:	18e4      	addlt	r4, r4, r3
 8006086:	f000 fba3 	bl	80067d0 <__malloc_lock>
 800608a:	4a20      	ldr	r2, [pc, #128]	; (800610c <_free_r+0x9c>)
 800608c:	9801      	ldr	r0, [sp, #4]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	4615      	mov	r5, r2
 8006092:	b933      	cbnz	r3, 80060a2 <_free_r+0x32>
 8006094:	6063      	str	r3, [r4, #4]
 8006096:	6014      	str	r4, [r2, #0]
 8006098:	b003      	add	sp, #12
 800609a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800609e:	f000 bb9d 	b.w	80067dc <__malloc_unlock>
 80060a2:	42a3      	cmp	r3, r4
 80060a4:	d90b      	bls.n	80060be <_free_r+0x4e>
 80060a6:	6821      	ldr	r1, [r4, #0]
 80060a8:	1862      	adds	r2, r4, r1
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bf04      	itt	eq
 80060ae:	681a      	ldreq	r2, [r3, #0]
 80060b0:	685b      	ldreq	r3, [r3, #4]
 80060b2:	6063      	str	r3, [r4, #4]
 80060b4:	bf04      	itt	eq
 80060b6:	1852      	addeq	r2, r2, r1
 80060b8:	6022      	streq	r2, [r4, #0]
 80060ba:	602c      	str	r4, [r5, #0]
 80060bc:	e7ec      	b.n	8006098 <_free_r+0x28>
 80060be:	461a      	mov	r2, r3
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b10b      	cbz	r3, 80060c8 <_free_r+0x58>
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d9fa      	bls.n	80060be <_free_r+0x4e>
 80060c8:	6811      	ldr	r1, [r2, #0]
 80060ca:	1855      	adds	r5, r2, r1
 80060cc:	42a5      	cmp	r5, r4
 80060ce:	d10b      	bne.n	80060e8 <_free_r+0x78>
 80060d0:	6824      	ldr	r4, [r4, #0]
 80060d2:	4421      	add	r1, r4
 80060d4:	1854      	adds	r4, r2, r1
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	d1dd      	bne.n	8006098 <_free_r+0x28>
 80060dc:	681c      	ldr	r4, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	6053      	str	r3, [r2, #4]
 80060e2:	4421      	add	r1, r4
 80060e4:	6011      	str	r1, [r2, #0]
 80060e6:	e7d7      	b.n	8006098 <_free_r+0x28>
 80060e8:	d902      	bls.n	80060f0 <_free_r+0x80>
 80060ea:	230c      	movs	r3, #12
 80060ec:	6003      	str	r3, [r0, #0]
 80060ee:	e7d3      	b.n	8006098 <_free_r+0x28>
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	1961      	adds	r1, r4, r5
 80060f4:	428b      	cmp	r3, r1
 80060f6:	bf04      	itt	eq
 80060f8:	6819      	ldreq	r1, [r3, #0]
 80060fa:	685b      	ldreq	r3, [r3, #4]
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	bf04      	itt	eq
 8006100:	1949      	addeq	r1, r1, r5
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	6054      	str	r4, [r2, #4]
 8006106:	e7c7      	b.n	8006098 <_free_r+0x28>
 8006108:	b003      	add	sp, #12
 800610a:	bd30      	pop	{r4, r5, pc}
 800610c:	2000024c 	.word	0x2000024c

08006110 <_malloc_r>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	1ccd      	adds	r5, r1, #3
 8006114:	f025 0503 	bic.w	r5, r5, #3
 8006118:	3508      	adds	r5, #8
 800611a:	2d0c      	cmp	r5, #12
 800611c:	bf38      	it	cc
 800611e:	250c      	movcc	r5, #12
 8006120:	2d00      	cmp	r5, #0
 8006122:	4606      	mov	r6, r0
 8006124:	db01      	blt.n	800612a <_malloc_r+0x1a>
 8006126:	42a9      	cmp	r1, r5
 8006128:	d903      	bls.n	8006132 <_malloc_r+0x22>
 800612a:	230c      	movs	r3, #12
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	2000      	movs	r0, #0
 8006130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006132:	f000 fb4d 	bl	80067d0 <__malloc_lock>
 8006136:	4921      	ldr	r1, [pc, #132]	; (80061bc <_malloc_r+0xac>)
 8006138:	680a      	ldr	r2, [r1, #0]
 800613a:	4614      	mov	r4, r2
 800613c:	b99c      	cbnz	r4, 8006166 <_malloc_r+0x56>
 800613e:	4f20      	ldr	r7, [pc, #128]	; (80061c0 <_malloc_r+0xb0>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	b923      	cbnz	r3, 800614e <_malloc_r+0x3e>
 8006144:	4621      	mov	r1, r4
 8006146:	4630      	mov	r0, r6
 8006148:	f000 f996 	bl	8006478 <_sbrk_r>
 800614c:	6038      	str	r0, [r7, #0]
 800614e:	4629      	mov	r1, r5
 8006150:	4630      	mov	r0, r6
 8006152:	f000 f991 	bl	8006478 <_sbrk_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	d123      	bne.n	80061a2 <_malloc_r+0x92>
 800615a:	230c      	movs	r3, #12
 800615c:	6033      	str	r3, [r6, #0]
 800615e:	4630      	mov	r0, r6
 8006160:	f000 fb3c 	bl	80067dc <__malloc_unlock>
 8006164:	e7e3      	b.n	800612e <_malloc_r+0x1e>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	1b5b      	subs	r3, r3, r5
 800616a:	d417      	bmi.n	800619c <_malloc_r+0x8c>
 800616c:	2b0b      	cmp	r3, #11
 800616e:	d903      	bls.n	8006178 <_malloc_r+0x68>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	441c      	add	r4, r3
 8006174:	6025      	str	r5, [r4, #0]
 8006176:	e004      	b.n	8006182 <_malloc_r+0x72>
 8006178:	6863      	ldr	r3, [r4, #4]
 800617a:	42a2      	cmp	r2, r4
 800617c:	bf0c      	ite	eq
 800617e:	600b      	streq	r3, [r1, #0]
 8006180:	6053      	strne	r3, [r2, #4]
 8006182:	4630      	mov	r0, r6
 8006184:	f000 fb2a 	bl	80067dc <__malloc_unlock>
 8006188:	f104 000b 	add.w	r0, r4, #11
 800618c:	1d23      	adds	r3, r4, #4
 800618e:	f020 0007 	bic.w	r0, r0, #7
 8006192:	1ac2      	subs	r2, r0, r3
 8006194:	d0cc      	beq.n	8006130 <_malloc_r+0x20>
 8006196:	1a1b      	subs	r3, r3, r0
 8006198:	50a3      	str	r3, [r4, r2]
 800619a:	e7c9      	b.n	8006130 <_malloc_r+0x20>
 800619c:	4622      	mov	r2, r4
 800619e:	6864      	ldr	r4, [r4, #4]
 80061a0:	e7cc      	b.n	800613c <_malloc_r+0x2c>
 80061a2:	1cc4      	adds	r4, r0, #3
 80061a4:	f024 0403 	bic.w	r4, r4, #3
 80061a8:	42a0      	cmp	r0, r4
 80061aa:	d0e3      	beq.n	8006174 <_malloc_r+0x64>
 80061ac:	1a21      	subs	r1, r4, r0
 80061ae:	4630      	mov	r0, r6
 80061b0:	f000 f962 	bl	8006478 <_sbrk_r>
 80061b4:	3001      	adds	r0, #1
 80061b6:	d1dd      	bne.n	8006174 <_malloc_r+0x64>
 80061b8:	e7cf      	b.n	800615a <_malloc_r+0x4a>
 80061ba:	bf00      	nop
 80061bc:	2000024c 	.word	0x2000024c
 80061c0:	20000250 	.word	0x20000250

080061c4 <__sfputc_r>:
 80061c4:	6893      	ldr	r3, [r2, #8]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	b410      	push	{r4}
 80061cc:	6093      	str	r3, [r2, #8]
 80061ce:	da08      	bge.n	80061e2 <__sfputc_r+0x1e>
 80061d0:	6994      	ldr	r4, [r2, #24]
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	db01      	blt.n	80061da <__sfputc_r+0x16>
 80061d6:	290a      	cmp	r1, #10
 80061d8:	d103      	bne.n	80061e2 <__sfputc_r+0x1e>
 80061da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061de:	f000 b99f 	b.w	8006520 <__swbuf_r>
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	1c58      	adds	r0, r3, #1
 80061e6:	6010      	str	r0, [r2, #0]
 80061e8:	7019      	strb	r1, [r3, #0]
 80061ea:	4608      	mov	r0, r1
 80061ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <__sfputs_r>:
 80061f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f4:	4606      	mov	r6, r0
 80061f6:	460f      	mov	r7, r1
 80061f8:	4614      	mov	r4, r2
 80061fa:	18d5      	adds	r5, r2, r3
 80061fc:	42ac      	cmp	r4, r5
 80061fe:	d101      	bne.n	8006204 <__sfputs_r+0x12>
 8006200:	2000      	movs	r0, #0
 8006202:	e007      	b.n	8006214 <__sfputs_r+0x22>
 8006204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006208:	463a      	mov	r2, r7
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff ffda 	bl	80061c4 <__sfputc_r>
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	d1f3      	bne.n	80061fc <__sfputs_r+0xa>
 8006214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006218 <_vfiprintf_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	460d      	mov	r5, r1
 800621e:	b09d      	sub	sp, #116	; 0x74
 8006220:	4614      	mov	r4, r2
 8006222:	4698      	mov	r8, r3
 8006224:	4606      	mov	r6, r0
 8006226:	b118      	cbz	r0, 8006230 <_vfiprintf_r+0x18>
 8006228:	6983      	ldr	r3, [r0, #24]
 800622a:	b90b      	cbnz	r3, 8006230 <_vfiprintf_r+0x18>
 800622c:	f7ff fa72 	bl	8005714 <__sinit>
 8006230:	4b89      	ldr	r3, [pc, #548]	; (8006458 <_vfiprintf_r+0x240>)
 8006232:	429d      	cmp	r5, r3
 8006234:	d11b      	bne.n	800626e <_vfiprintf_r+0x56>
 8006236:	6875      	ldr	r5, [r6, #4]
 8006238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800623a:	07d9      	lsls	r1, r3, #31
 800623c:	d405      	bmi.n	800624a <_vfiprintf_r+0x32>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	059a      	lsls	r2, r3, #22
 8006242:	d402      	bmi.n	800624a <_vfiprintf_r+0x32>
 8006244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006246:	f7ff fb08 	bl	800585a <__retarget_lock_acquire_recursive>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	071b      	lsls	r3, r3, #28
 800624e:	d501      	bpl.n	8006254 <_vfiprintf_r+0x3c>
 8006250:	692b      	ldr	r3, [r5, #16]
 8006252:	b9eb      	cbnz	r3, 8006290 <_vfiprintf_r+0x78>
 8006254:	4629      	mov	r1, r5
 8006256:	4630      	mov	r0, r6
 8006258:	f000 f9c6 	bl	80065e8 <__swsetup_r>
 800625c:	b1c0      	cbz	r0, 8006290 <_vfiprintf_r+0x78>
 800625e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006260:	07dc      	lsls	r4, r3, #31
 8006262:	d50e      	bpl.n	8006282 <_vfiprintf_r+0x6a>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b01d      	add	sp, #116	; 0x74
 800626a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626e:	4b7b      	ldr	r3, [pc, #492]	; (800645c <_vfiprintf_r+0x244>)
 8006270:	429d      	cmp	r5, r3
 8006272:	d101      	bne.n	8006278 <_vfiprintf_r+0x60>
 8006274:	68b5      	ldr	r5, [r6, #8]
 8006276:	e7df      	b.n	8006238 <_vfiprintf_r+0x20>
 8006278:	4b79      	ldr	r3, [pc, #484]	; (8006460 <_vfiprintf_r+0x248>)
 800627a:	429d      	cmp	r5, r3
 800627c:	bf08      	it	eq
 800627e:	68f5      	ldreq	r5, [r6, #12]
 8006280:	e7da      	b.n	8006238 <_vfiprintf_r+0x20>
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	0598      	lsls	r0, r3, #22
 8006286:	d4ed      	bmi.n	8006264 <_vfiprintf_r+0x4c>
 8006288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800628a:	f7ff fae7 	bl	800585c <__retarget_lock_release_recursive>
 800628e:	e7e9      	b.n	8006264 <_vfiprintf_r+0x4c>
 8006290:	2300      	movs	r3, #0
 8006292:	9309      	str	r3, [sp, #36]	; 0x24
 8006294:	2320      	movs	r3, #32
 8006296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800629a:	f8cd 800c 	str.w	r8, [sp, #12]
 800629e:	2330      	movs	r3, #48	; 0x30
 80062a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006464 <_vfiprintf_r+0x24c>
 80062a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062a8:	f04f 0901 	mov.w	r9, #1
 80062ac:	4623      	mov	r3, r4
 80062ae:	469a      	mov	sl, r3
 80062b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b4:	b10a      	cbz	r2, 80062ba <_vfiprintf_r+0xa2>
 80062b6:	2a25      	cmp	r2, #37	; 0x25
 80062b8:	d1f9      	bne.n	80062ae <_vfiprintf_r+0x96>
 80062ba:	ebba 0b04 	subs.w	fp, sl, r4
 80062be:	d00b      	beq.n	80062d8 <_vfiprintf_r+0xc0>
 80062c0:	465b      	mov	r3, fp
 80062c2:	4622      	mov	r2, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ff93 	bl	80061f2 <__sfputs_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	f000 80aa 	beq.w	8006426 <_vfiprintf_r+0x20e>
 80062d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d4:	445a      	add	r2, fp
 80062d6:	9209      	str	r2, [sp, #36]	; 0x24
 80062d8:	f89a 3000 	ldrb.w	r3, [sl]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80a2 	beq.w	8006426 <_vfiprintf_r+0x20e>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295
 80062e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ec:	f10a 0a01 	add.w	sl, sl, #1
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	9307      	str	r3, [sp, #28]
 80062f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062f8:	931a      	str	r3, [sp, #104]	; 0x68
 80062fa:	4654      	mov	r4, sl
 80062fc:	2205      	movs	r2, #5
 80062fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006302:	4858      	ldr	r0, [pc, #352]	; (8006464 <_vfiprintf_r+0x24c>)
 8006304:	f7f9 ff8c 	bl	8000220 <memchr>
 8006308:	9a04      	ldr	r2, [sp, #16]
 800630a:	b9d8      	cbnz	r0, 8006344 <_vfiprintf_r+0x12c>
 800630c:	06d1      	lsls	r1, r2, #27
 800630e:	bf44      	itt	mi
 8006310:	2320      	movmi	r3, #32
 8006312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006316:	0713      	lsls	r3, r2, #28
 8006318:	bf44      	itt	mi
 800631a:	232b      	movmi	r3, #43	; 0x2b
 800631c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006320:	f89a 3000 	ldrb.w	r3, [sl]
 8006324:	2b2a      	cmp	r3, #42	; 0x2a
 8006326:	d015      	beq.n	8006354 <_vfiprintf_r+0x13c>
 8006328:	9a07      	ldr	r2, [sp, #28]
 800632a:	4654      	mov	r4, sl
 800632c:	2000      	movs	r0, #0
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	4621      	mov	r1, r4
 8006334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006338:	3b30      	subs	r3, #48	; 0x30
 800633a:	2b09      	cmp	r3, #9
 800633c:	d94e      	bls.n	80063dc <_vfiprintf_r+0x1c4>
 800633e:	b1b0      	cbz	r0, 800636e <_vfiprintf_r+0x156>
 8006340:	9207      	str	r2, [sp, #28]
 8006342:	e014      	b.n	800636e <_vfiprintf_r+0x156>
 8006344:	eba0 0308 	sub.w	r3, r0, r8
 8006348:	fa09 f303 	lsl.w	r3, r9, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	46a2      	mov	sl, r4
 8006352:	e7d2      	b.n	80062fa <_vfiprintf_r+0xe2>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1d19      	adds	r1, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9103      	str	r1, [sp, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfbb      	ittet	lt
 8006360:	425b      	neglt	r3, r3
 8006362:	f042 0202 	orrlt.w	r2, r2, #2
 8006366:	9307      	strge	r3, [sp, #28]
 8006368:	9307      	strlt	r3, [sp, #28]
 800636a:	bfb8      	it	lt
 800636c:	9204      	strlt	r2, [sp, #16]
 800636e:	7823      	ldrb	r3, [r4, #0]
 8006370:	2b2e      	cmp	r3, #46	; 0x2e
 8006372:	d10c      	bne.n	800638e <_vfiprintf_r+0x176>
 8006374:	7863      	ldrb	r3, [r4, #1]
 8006376:	2b2a      	cmp	r3, #42	; 0x2a
 8006378:	d135      	bne.n	80063e6 <_vfiprintf_r+0x1ce>
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	9203      	str	r2, [sp, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	bfb8      	it	lt
 8006386:	f04f 33ff 	movlt.w	r3, #4294967295
 800638a:	3402      	adds	r4, #2
 800638c:	9305      	str	r3, [sp, #20]
 800638e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006474 <_vfiprintf_r+0x25c>
 8006392:	7821      	ldrb	r1, [r4, #0]
 8006394:	2203      	movs	r2, #3
 8006396:	4650      	mov	r0, sl
 8006398:	f7f9 ff42 	bl	8000220 <memchr>
 800639c:	b140      	cbz	r0, 80063b0 <_vfiprintf_r+0x198>
 800639e:	2340      	movs	r3, #64	; 0x40
 80063a0:	eba0 000a 	sub.w	r0, r0, sl
 80063a4:	fa03 f000 	lsl.w	r0, r3, r0
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	4303      	orrs	r3, r0
 80063ac:	3401      	adds	r4, #1
 80063ae:	9304      	str	r3, [sp, #16]
 80063b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b4:	482c      	ldr	r0, [pc, #176]	; (8006468 <_vfiprintf_r+0x250>)
 80063b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ba:	2206      	movs	r2, #6
 80063bc:	f7f9 ff30 	bl	8000220 <memchr>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d03f      	beq.n	8006444 <_vfiprintf_r+0x22c>
 80063c4:	4b29      	ldr	r3, [pc, #164]	; (800646c <_vfiprintf_r+0x254>)
 80063c6:	bb1b      	cbnz	r3, 8006410 <_vfiprintf_r+0x1f8>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	3307      	adds	r3, #7
 80063cc:	f023 0307 	bic.w	r3, r3, #7
 80063d0:	3308      	adds	r3, #8
 80063d2:	9303      	str	r3, [sp, #12]
 80063d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d6:	443b      	add	r3, r7
 80063d8:	9309      	str	r3, [sp, #36]	; 0x24
 80063da:	e767      	b.n	80062ac <_vfiprintf_r+0x94>
 80063dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e0:	460c      	mov	r4, r1
 80063e2:	2001      	movs	r0, #1
 80063e4:	e7a5      	b.n	8006332 <_vfiprintf_r+0x11a>
 80063e6:	2300      	movs	r3, #0
 80063e8:	3401      	adds	r4, #1
 80063ea:	9305      	str	r3, [sp, #20]
 80063ec:	4619      	mov	r1, r3
 80063ee:	f04f 0c0a 	mov.w	ip, #10
 80063f2:	4620      	mov	r0, r4
 80063f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063f8:	3a30      	subs	r2, #48	; 0x30
 80063fa:	2a09      	cmp	r2, #9
 80063fc:	d903      	bls.n	8006406 <_vfiprintf_r+0x1ee>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0c5      	beq.n	800638e <_vfiprintf_r+0x176>
 8006402:	9105      	str	r1, [sp, #20]
 8006404:	e7c3      	b.n	800638e <_vfiprintf_r+0x176>
 8006406:	fb0c 2101 	mla	r1, ip, r1, r2
 800640a:	4604      	mov	r4, r0
 800640c:	2301      	movs	r3, #1
 800640e:	e7f0      	b.n	80063f2 <_vfiprintf_r+0x1da>
 8006410:	ab03      	add	r3, sp, #12
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	462a      	mov	r2, r5
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <_vfiprintf_r+0x258>)
 8006418:	a904      	add	r1, sp, #16
 800641a:	4630      	mov	r0, r6
 800641c:	f7fd fd3e 	bl	8003e9c <_printf_float>
 8006420:	4607      	mov	r7, r0
 8006422:	1c78      	adds	r0, r7, #1
 8006424:	d1d6      	bne.n	80063d4 <_vfiprintf_r+0x1bc>
 8006426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006428:	07d9      	lsls	r1, r3, #31
 800642a:	d405      	bmi.n	8006438 <_vfiprintf_r+0x220>
 800642c:	89ab      	ldrh	r3, [r5, #12]
 800642e:	059a      	lsls	r2, r3, #22
 8006430:	d402      	bmi.n	8006438 <_vfiprintf_r+0x220>
 8006432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006434:	f7ff fa12 	bl	800585c <__retarget_lock_release_recursive>
 8006438:	89ab      	ldrh	r3, [r5, #12]
 800643a:	065b      	lsls	r3, r3, #25
 800643c:	f53f af12 	bmi.w	8006264 <_vfiprintf_r+0x4c>
 8006440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006442:	e711      	b.n	8006268 <_vfiprintf_r+0x50>
 8006444:	ab03      	add	r3, sp, #12
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	462a      	mov	r2, r5
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <_vfiprintf_r+0x258>)
 800644c:	a904      	add	r1, sp, #16
 800644e:	4630      	mov	r0, r6
 8006450:	f7fd ffc8 	bl	80043e4 <_printf_i>
 8006454:	e7e4      	b.n	8006420 <_vfiprintf_r+0x208>
 8006456:	bf00      	nop
 8006458:	08006a1c 	.word	0x08006a1c
 800645c:	08006a3c 	.word	0x08006a3c
 8006460:	080069fc 	.word	0x080069fc
 8006464:	08006bbc 	.word	0x08006bbc
 8006468:	08006bc6 	.word	0x08006bc6
 800646c:	08003e9d 	.word	0x08003e9d
 8006470:	080061f3 	.word	0x080061f3
 8006474:	08006bc2 	.word	0x08006bc2

08006478 <_sbrk_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d06      	ldr	r5, [pc, #24]	; (8006494 <_sbrk_r+0x1c>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	f7fb f966 	bl	8001754 <_sbrk>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_sbrk_r+0x1a>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_sbrk_r+0x1a>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	20000310 	.word	0x20000310

08006498 <__sread>:
 8006498:	b510      	push	{r4, lr}
 800649a:	460c      	mov	r4, r1
 800649c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a0:	f000 f9a2 	bl	80067e8 <_read_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	bfab      	itete	ge
 80064a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064aa:	89a3      	ldrhlt	r3, [r4, #12]
 80064ac:	181b      	addge	r3, r3, r0
 80064ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064b2:	bfac      	ite	ge
 80064b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80064b6:	81a3      	strhlt	r3, [r4, #12]
 80064b8:	bd10      	pop	{r4, pc}

080064ba <__swrite>:
 80064ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064be:	461f      	mov	r7, r3
 80064c0:	898b      	ldrh	r3, [r1, #12]
 80064c2:	05db      	lsls	r3, r3, #23
 80064c4:	4605      	mov	r5, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	4616      	mov	r6, r2
 80064ca:	d505      	bpl.n	80064d8 <__swrite+0x1e>
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	2302      	movs	r3, #2
 80064d2:	2200      	movs	r2, #0
 80064d4:	f000 f958 	bl	8006788 <_lseek_r>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	4632      	mov	r2, r6
 80064e6:	463b      	mov	r3, r7
 80064e8:	4628      	mov	r0, r5
 80064ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ee:	f000 b869 	b.w	80065c4 <_write_r>

080064f2 <__sseek>:
 80064f2:	b510      	push	{r4, lr}
 80064f4:	460c      	mov	r4, r1
 80064f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fa:	f000 f945 	bl	8006788 <_lseek_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	bf15      	itete	ne
 8006504:	6560      	strne	r0, [r4, #84]	; 0x54
 8006506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800650a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800650e:	81a3      	strheq	r3, [r4, #12]
 8006510:	bf18      	it	ne
 8006512:	81a3      	strhne	r3, [r4, #12]
 8006514:	bd10      	pop	{r4, pc}

08006516 <__sclose>:
 8006516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651a:	f000 b8f1 	b.w	8006700 <_close_r>
	...

08006520 <__swbuf_r>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	460e      	mov	r6, r1
 8006524:	4614      	mov	r4, r2
 8006526:	4605      	mov	r5, r0
 8006528:	b118      	cbz	r0, 8006532 <__swbuf_r+0x12>
 800652a:	6983      	ldr	r3, [r0, #24]
 800652c:	b90b      	cbnz	r3, 8006532 <__swbuf_r+0x12>
 800652e:	f7ff f8f1 	bl	8005714 <__sinit>
 8006532:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <__swbuf_r+0x98>)
 8006534:	429c      	cmp	r4, r3
 8006536:	d12b      	bne.n	8006590 <__swbuf_r+0x70>
 8006538:	686c      	ldr	r4, [r5, #4]
 800653a:	69a3      	ldr	r3, [r4, #24]
 800653c:	60a3      	str	r3, [r4, #8]
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	071a      	lsls	r2, r3, #28
 8006542:	d52f      	bpl.n	80065a4 <__swbuf_r+0x84>
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	b36b      	cbz	r3, 80065a4 <__swbuf_r+0x84>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	1ac0      	subs	r0, r0, r3
 800654e:	6963      	ldr	r3, [r4, #20]
 8006550:	b2f6      	uxtb	r6, r6
 8006552:	4283      	cmp	r3, r0
 8006554:	4637      	mov	r7, r6
 8006556:	dc04      	bgt.n	8006562 <__swbuf_r+0x42>
 8006558:	4621      	mov	r1, r4
 800655a:	4628      	mov	r0, r5
 800655c:	f7ff f846 	bl	80055ec <_fflush_r>
 8006560:	bb30      	cbnz	r0, 80065b0 <__swbuf_r+0x90>
 8006562:	68a3      	ldr	r3, [r4, #8]
 8006564:	3b01      	subs	r3, #1
 8006566:	60a3      	str	r3, [r4, #8]
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	6022      	str	r2, [r4, #0]
 800656e:	701e      	strb	r6, [r3, #0]
 8006570:	6963      	ldr	r3, [r4, #20]
 8006572:	3001      	adds	r0, #1
 8006574:	4283      	cmp	r3, r0
 8006576:	d004      	beq.n	8006582 <__swbuf_r+0x62>
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	07db      	lsls	r3, r3, #31
 800657c:	d506      	bpl.n	800658c <__swbuf_r+0x6c>
 800657e:	2e0a      	cmp	r6, #10
 8006580:	d104      	bne.n	800658c <__swbuf_r+0x6c>
 8006582:	4621      	mov	r1, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f7ff f831 	bl	80055ec <_fflush_r>
 800658a:	b988      	cbnz	r0, 80065b0 <__swbuf_r+0x90>
 800658c:	4638      	mov	r0, r7
 800658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <__swbuf_r+0x9c>)
 8006592:	429c      	cmp	r4, r3
 8006594:	d101      	bne.n	800659a <__swbuf_r+0x7a>
 8006596:	68ac      	ldr	r4, [r5, #8]
 8006598:	e7cf      	b.n	800653a <__swbuf_r+0x1a>
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <__swbuf_r+0xa0>)
 800659c:	429c      	cmp	r4, r3
 800659e:	bf08      	it	eq
 80065a0:	68ec      	ldreq	r4, [r5, #12]
 80065a2:	e7ca      	b.n	800653a <__swbuf_r+0x1a>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f81e 	bl	80065e8 <__swsetup_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d0cb      	beq.n	8006548 <__swbuf_r+0x28>
 80065b0:	f04f 37ff 	mov.w	r7, #4294967295
 80065b4:	e7ea      	b.n	800658c <__swbuf_r+0x6c>
 80065b6:	bf00      	nop
 80065b8:	08006a1c 	.word	0x08006a1c
 80065bc:	08006a3c 	.word	0x08006a3c
 80065c0:	080069fc 	.word	0x080069fc

080065c4 <_write_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <_write_r+0x20>)
 80065c8:	4604      	mov	r4, r0
 80065ca:	4608      	mov	r0, r1
 80065cc:	4611      	mov	r1, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f7fa ffb2 	bl	800153c <_write>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_write_r+0x1e>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_write_r+0x1e>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000310 	.word	0x20000310

080065e8 <__swsetup_r>:
 80065e8:	4b32      	ldr	r3, [pc, #200]	; (80066b4 <__swsetup_r+0xcc>)
 80065ea:	b570      	push	{r4, r5, r6, lr}
 80065ec:	681d      	ldr	r5, [r3, #0]
 80065ee:	4606      	mov	r6, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	b125      	cbz	r5, 80065fe <__swsetup_r+0x16>
 80065f4:	69ab      	ldr	r3, [r5, #24]
 80065f6:	b913      	cbnz	r3, 80065fe <__swsetup_r+0x16>
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7ff f88b 	bl	8005714 <__sinit>
 80065fe:	4b2e      	ldr	r3, [pc, #184]	; (80066b8 <__swsetup_r+0xd0>)
 8006600:	429c      	cmp	r4, r3
 8006602:	d10f      	bne.n	8006624 <__swsetup_r+0x3c>
 8006604:	686c      	ldr	r4, [r5, #4]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800660c:	0719      	lsls	r1, r3, #28
 800660e:	d42c      	bmi.n	800666a <__swsetup_r+0x82>
 8006610:	06dd      	lsls	r5, r3, #27
 8006612:	d411      	bmi.n	8006638 <__swsetup_r+0x50>
 8006614:	2309      	movs	r3, #9
 8006616:	6033      	str	r3, [r6, #0]
 8006618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	e03e      	b.n	80066a2 <__swsetup_r+0xba>
 8006624:	4b25      	ldr	r3, [pc, #148]	; (80066bc <__swsetup_r+0xd4>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d101      	bne.n	800662e <__swsetup_r+0x46>
 800662a:	68ac      	ldr	r4, [r5, #8]
 800662c:	e7eb      	b.n	8006606 <__swsetup_r+0x1e>
 800662e:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <__swsetup_r+0xd8>)
 8006630:	429c      	cmp	r4, r3
 8006632:	bf08      	it	eq
 8006634:	68ec      	ldreq	r4, [r5, #12]
 8006636:	e7e6      	b.n	8006606 <__swsetup_r+0x1e>
 8006638:	0758      	lsls	r0, r3, #29
 800663a:	d512      	bpl.n	8006662 <__swsetup_r+0x7a>
 800663c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800663e:	b141      	cbz	r1, 8006652 <__swsetup_r+0x6a>
 8006640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006644:	4299      	cmp	r1, r3
 8006646:	d002      	beq.n	800664e <__swsetup_r+0x66>
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff fd11 	bl	8006070 <_free_r>
 800664e:	2300      	movs	r3, #0
 8006650:	6363      	str	r3, [r4, #52]	; 0x34
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	2300      	movs	r3, #0
 800665c:	6063      	str	r3, [r4, #4]
 800665e:	6923      	ldr	r3, [r4, #16]
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f043 0308 	orr.w	r3, r3, #8
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	6923      	ldr	r3, [r4, #16]
 800666c:	b94b      	cbnz	r3, 8006682 <__swsetup_r+0x9a>
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006678:	d003      	beq.n	8006682 <__swsetup_r+0x9a>
 800667a:	4621      	mov	r1, r4
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff f913 	bl	80058a8 <__smakebuf_r>
 8006682:	89a0      	ldrh	r0, [r4, #12]
 8006684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006688:	f010 0301 	ands.w	r3, r0, #1
 800668c:	d00a      	beq.n	80066a4 <__swsetup_r+0xbc>
 800668e:	2300      	movs	r3, #0
 8006690:	60a3      	str	r3, [r4, #8]
 8006692:	6963      	ldr	r3, [r4, #20]
 8006694:	425b      	negs	r3, r3
 8006696:	61a3      	str	r3, [r4, #24]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	b943      	cbnz	r3, 80066ae <__swsetup_r+0xc6>
 800669c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066a0:	d1ba      	bne.n	8006618 <__swsetup_r+0x30>
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
 80066a4:	0781      	lsls	r1, r0, #30
 80066a6:	bf58      	it	pl
 80066a8:	6963      	ldrpl	r3, [r4, #20]
 80066aa:	60a3      	str	r3, [r4, #8]
 80066ac:	e7f4      	b.n	8006698 <__swsetup_r+0xb0>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e7f7      	b.n	80066a2 <__swsetup_r+0xba>
 80066b2:	bf00      	nop
 80066b4:	2000005c 	.word	0x2000005c
 80066b8:	08006a1c 	.word	0x08006a1c
 80066bc:	08006a3c 	.word	0x08006a3c
 80066c0:	080069fc 	.word	0x080069fc

080066c4 <__assert_func>:
 80066c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066c6:	4614      	mov	r4, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <__assert_func+0x2c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4605      	mov	r5, r0
 80066d0:	68d8      	ldr	r0, [r3, #12]
 80066d2:	b14c      	cbz	r4, 80066e8 <__assert_func+0x24>
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <__assert_func+0x30>)
 80066d6:	9100      	str	r1, [sp, #0]
 80066d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066dc:	4906      	ldr	r1, [pc, #24]	; (80066f8 <__assert_func+0x34>)
 80066de:	462b      	mov	r3, r5
 80066e0:	f000 f81e 	bl	8006720 <fiprintf>
 80066e4:	f000 f89f 	bl	8006826 <abort>
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <__assert_func+0x38>)
 80066ea:	461c      	mov	r4, r3
 80066ec:	e7f3      	b.n	80066d6 <__assert_func+0x12>
 80066ee:	bf00      	nop
 80066f0:	2000005c 	.word	0x2000005c
 80066f4:	08006bcd 	.word	0x08006bcd
 80066f8:	08006bda 	.word	0x08006bda
 80066fc:	08006c08 	.word	0x08006c08

08006700 <_close_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	; (800671c <_close_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fa ff42 	bl	8001594 <_close>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_close_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_close_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20000310 	.word	0x20000310

08006720 <fiprintf>:
 8006720:	b40e      	push	{r1, r2, r3}
 8006722:	b503      	push	{r0, r1, lr}
 8006724:	4601      	mov	r1, r0
 8006726:	ab03      	add	r3, sp, #12
 8006728:	4805      	ldr	r0, [pc, #20]	; (8006740 <fiprintf+0x20>)
 800672a:	f853 2b04 	ldr.w	r2, [r3], #4
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	f7ff fd71 	bl	8006218 <_vfiprintf_r>
 8006736:	b002      	add	sp, #8
 8006738:	f85d eb04 	ldr.w	lr, [sp], #4
 800673c:	b003      	add	sp, #12
 800673e:	4770      	bx	lr
 8006740:	2000005c 	.word	0x2000005c

08006744 <_fstat_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4d07      	ldr	r5, [pc, #28]	; (8006764 <_fstat_r+0x20>)
 8006748:	2300      	movs	r3, #0
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	f7fa ff6f 	bl	8001634 <_fstat>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d102      	bne.n	8006760 <_fstat_r+0x1c>
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	b103      	cbz	r3, 8006760 <_fstat_r+0x1c>
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	bd38      	pop	{r3, r4, r5, pc}
 8006762:	bf00      	nop
 8006764:	20000310 	.word	0x20000310

08006768 <_isatty_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	; (8006784 <_isatty_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fecc 	bl	8001510 <_isatty>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_isatty_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_isatty_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000310 	.word	0x20000310

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	; (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa ff13 	bl	80015c2 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20000310 	.word	0x20000310

080067ac <__ascii_mbtowc>:
 80067ac:	b082      	sub	sp, #8
 80067ae:	b901      	cbnz	r1, 80067b2 <__ascii_mbtowc+0x6>
 80067b0:	a901      	add	r1, sp, #4
 80067b2:	b142      	cbz	r2, 80067c6 <__ascii_mbtowc+0x1a>
 80067b4:	b14b      	cbz	r3, 80067ca <__ascii_mbtowc+0x1e>
 80067b6:	7813      	ldrb	r3, [r2, #0]
 80067b8:	600b      	str	r3, [r1, #0]
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	1e10      	subs	r0, r2, #0
 80067be:	bf18      	it	ne
 80067c0:	2001      	movne	r0, #1
 80067c2:	b002      	add	sp, #8
 80067c4:	4770      	bx	lr
 80067c6:	4610      	mov	r0, r2
 80067c8:	e7fb      	b.n	80067c2 <__ascii_mbtowc+0x16>
 80067ca:	f06f 0001 	mvn.w	r0, #1
 80067ce:	e7f8      	b.n	80067c2 <__ascii_mbtowc+0x16>

080067d0 <__malloc_lock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__malloc_lock+0x8>)
 80067d2:	f7ff b842 	b.w	800585a <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20000308 	.word	0x20000308

080067dc <__malloc_unlock>:
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <__malloc_unlock+0x8>)
 80067de:	f7ff b83d 	b.w	800585c <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20000308 	.word	0x20000308

080067e8 <_read_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d07      	ldr	r5, [pc, #28]	; (8006808 <_read_r+0x20>)
 80067ec:	4604      	mov	r4, r0
 80067ee:	4608      	mov	r0, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fa fef4 	bl	80015e4 <_read>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_read_r+0x1e>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_read_r+0x1e>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	20000310 	.word	0x20000310

0800680c <__ascii_wctomb>:
 800680c:	b149      	cbz	r1, 8006822 <__ascii_wctomb+0x16>
 800680e:	2aff      	cmp	r2, #255	; 0xff
 8006810:	bf85      	ittet	hi
 8006812:	238a      	movhi	r3, #138	; 0x8a
 8006814:	6003      	strhi	r3, [r0, #0]
 8006816:	700a      	strbls	r2, [r1, #0]
 8006818:	f04f 30ff 	movhi.w	r0, #4294967295
 800681c:	bf98      	it	ls
 800681e:	2001      	movls	r0, #1
 8006820:	4770      	bx	lr
 8006822:	4608      	mov	r0, r1
 8006824:	4770      	bx	lr

08006826 <abort>:
 8006826:	b508      	push	{r3, lr}
 8006828:	2006      	movs	r0, #6
 800682a:	f000 f82b 	bl	8006884 <raise>
 800682e:	2001      	movs	r0, #1
 8006830:	f000 f854 	bl	80068dc <_exit>

08006834 <_raise_r>:
 8006834:	291f      	cmp	r1, #31
 8006836:	b538      	push	{r3, r4, r5, lr}
 8006838:	4604      	mov	r4, r0
 800683a:	460d      	mov	r5, r1
 800683c:	d904      	bls.n	8006848 <_raise_r+0x14>
 800683e:	2316      	movs	r3, #22
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	f04f 30ff 	mov.w	r0, #4294967295
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800684a:	b112      	cbz	r2, 8006852 <_raise_r+0x1e>
 800684c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006850:	b94b      	cbnz	r3, 8006866 <_raise_r+0x32>
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f830 	bl	80068b8 <_getpid_r>
 8006858:	462a      	mov	r2, r5
 800685a:	4601      	mov	r1, r0
 800685c:	4620      	mov	r0, r4
 800685e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006862:	f000 b817 	b.w	8006894 <_kill_r>
 8006866:	2b01      	cmp	r3, #1
 8006868:	d00a      	beq.n	8006880 <_raise_r+0x4c>
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	d103      	bne.n	8006876 <_raise_r+0x42>
 800686e:	2316      	movs	r3, #22
 8006870:	6003      	str	r3, [r0, #0]
 8006872:	2001      	movs	r0, #1
 8006874:	e7e7      	b.n	8006846 <_raise_r+0x12>
 8006876:	2400      	movs	r4, #0
 8006878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800687c:	4628      	mov	r0, r5
 800687e:	4798      	blx	r3
 8006880:	2000      	movs	r0, #0
 8006882:	e7e0      	b.n	8006846 <_raise_r+0x12>

08006884 <raise>:
 8006884:	4b02      	ldr	r3, [pc, #8]	; (8006890 <raise+0xc>)
 8006886:	4601      	mov	r1, r0
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	f7ff bfd3 	b.w	8006834 <_raise_r>
 800688e:	bf00      	nop
 8006890:	2000005c 	.word	0x2000005c

08006894 <_kill_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	; (80068b4 <_kill_r+0x20>)
 8006898:	2300      	movs	r3, #0
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	602b      	str	r3, [r5, #0]
 80068a2:	f000 f813 	bl	80068cc <_kill>
 80068a6:	1c43      	adds	r3, r0, #1
 80068a8:	d102      	bne.n	80068b0 <_kill_r+0x1c>
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	b103      	cbz	r3, 80068b0 <_kill_r+0x1c>
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
 80068b2:	bf00      	nop
 80068b4:	20000310 	.word	0x20000310

080068b8 <_getpid_r>:
 80068b8:	f000 b800 	b.w	80068bc <_getpid>

080068bc <_getpid>:
 80068bc:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <_getpid+0xc>)
 80068be:	2258      	movs	r2, #88	; 0x58
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295
 80068c6:	4770      	bx	lr
 80068c8:	20000310 	.word	0x20000310

080068cc <_kill>:
 80068cc:	4b02      	ldr	r3, [pc, #8]	; (80068d8 <_kill+0xc>)
 80068ce:	2258      	movs	r2, #88	; 0x58
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	4770      	bx	lr
 80068d8:	20000310 	.word	0x20000310

080068dc <_exit>:
 80068dc:	e7fe      	b.n	80068dc <_exit>
	...

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
